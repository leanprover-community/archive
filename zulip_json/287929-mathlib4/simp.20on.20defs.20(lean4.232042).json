[
    {
        "content": "<p>In lean3, <code>simp</code> on <code>def foo (a : Nat) : Nat := 2 * a</code> meant \"add the simp lemma <code>foo a = 2 * a</code>\". In lean 4, it means \"add the simp lemma <code>foo \n = fun a =&gt; 2 * a</code>\" (<a href=\"https://github.com/leanprover/lean4/pull/2042\">lean4#2042</a>).</p>\n<p>Can we teach mathport to not add these <code>simp</code> attributes, and instead insert a TODO comment for the porter asking them to write manual equation lemmas? This is particularly notable when the function is implemented with a match, which causes it to unfold to the match statement</p>",
        "id": 339141703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677773168
    },
    {
        "content": "<p>Previous thread <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322022846\">here</a>; that was discussing fixing the behavior in Lean. In the meantime, it would be helpful for porting for the mathport output to not pollute the simp set with these bad lemmas</p>",
        "id": 339142256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677773293
    },
    {
        "content": "<p>That means that there is no way to get the equational lemmas automatically?</p>",
        "id": 339143508,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677773626
    },
    {
        "content": "<p>I think the equation lemma is now the useless <code>foo = fun a =&gt; 2*a</code> one</p>",
        "id": 339149874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677775174
    },
    {
        "content": "<p>We could define our own attribute that implements the mathlib 3 simp behavior, right? In the case without equations it's basically a trivial version of <code>simps</code></p>",
        "id": 339165245,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677778820
    },
    {
        "content": "<p>I think it would be beneficial to have mathport output that attribute even if doesn't exist yet</p>",
        "id": 339165863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677779000
    },
    {
        "content": "<p>Because then it flags something that has to be done manually while porting</p>",
        "id": 339165915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677779010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20on.20defs.20.28lean4.232042.29/near/339149874\">said</a>:</p>\n<blockquote>\n<p>I think the equation lemma is now the useless <code>foo = fun a =&gt; 2*a</code> one</p>\n</blockquote>\n<p>Could you explain what makes this form useless? Wouldn't simp after rewriting <code>foo x</code> reduce <code>(fun a =&gt; 2 * a) x</code> into <code>2 * x</code>?</p>",
        "id": 339298696,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1677837860
    },
    {
        "content": "<p>It's useless in that it's not the lemma you want, and certainly not the one we had in lean 3</p>",
        "id": 339301251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677838533
    },
    {
        "content": "<p>Apparently rewriting works both ways for this <code>foo</code>, and it doesn't even create intermediate <code>fun</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(The <code>add_com</code> is just to keep <code>rw</code> from closing the goal by refl)</p>",
        "id": 339301279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677838542
    },
    {
        "content": "<p>In the absence of a fix for this, and the increasing urgency of <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/matrix/basic\">port-status#data/matrix/basic</a>, I've created:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/18696\">#18696</a>, which removes all of the matrix code that relies on this feature. This will likely have lots of small annoying downstream failures to fix, but it's easier to fix these in Lean 3 than while porting.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/3024\">!4#3024</a>, which lets override the useless equation lemmas manually using an attribute</li>\n</ul>",
        "id": 345526583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680129110
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18696\">#18696</a> is now green</p>",
        "id": 345714271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680190599
    }
]