[
    {
        "content": "<p>The file Geometry/Euclidean/Inversion.lean in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/euclidean/inversion.lean\">the original</a> has <code>include V</code> on line 34.  It happens to be the case that there is a variable <code>V</code> defined on line 28.  However, the GPTs tell me that <code>include</code> means file inclusion. There is no file or directory <code>V</code> in context.  </p>\n<p>The porting script carries this over to <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Geometry/Euclidean/Inversion.lean\">line 38 of the version to port</a>.</p>\n<p>Is this something that can be safely commented out?</p>",
        "id": 361204391,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685069567
    },
    {
        "content": "<p>There is no reason to expect GPT to have anything reasonable to say here, and indeed your statement is wrong.  Look at the manual for a description of the meaning of <code>include</code>:<br>\n<a href=\"https://leanprover.github.io/reference/other_commands.html#universes-and-variables\">https://leanprover.github.io/reference/other_commands.html#universes-and-variables</a></p>",
        "id": 361205144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685070092
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>.  What is the Lean 4 equivalent of <code>include V</code>?  The mathport script is leaving it untouched, but the Lean 4 Infoview gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"n\">command</span>\n</code></pre></div>",
        "id": 361207379,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685071598
    },
    {
        "content": "<p>There is no include anymore. Just delete it.</p>",
        "id": 361212197,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685074878
    },
    {
        "content": "<p>oh, mathport should be doing that</p>",
        "id": 361212232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685074912
    },
    {
        "content": "<p><code>include/omit</code> no longer exist.  Lean now tries to take care of this automatically.  If it gets it wrong, then a workaround is to use <code>section</code>s to limit the scope of <code>variable</code>s.</p>",
        "id": 361212238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685074919
    },
    {
        "content": "<p>Mario, I think we don't want mathport to delete them itself. If there were ever an issue (and I did run into one months ago I think), it would be very confusing.</p>",
        "id": 361212449,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685075070
    },
    {
        "content": "<p>it could delete them and leave a <code>unsupported:</code> warning</p>",
        "id": 361212475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685075088
    },
    {
        "content": "<p>Yes, or simply comment them.</p>",
        "id": 361212495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685075103
    },
    {
        "content": "<p>A recent issue was in porting RatFunc</p>",
        "id": 361212708,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685075203
    },
    {
        "content": "<p>For instance, changing <code>variable {K : Type u}</code> to <code>variable {K}</code>  <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca570a16fa94804dbbf293d60926609c34ff91fc/Mathlib/FieldTheory/RatFunc.lean#L1544\">on this line</a>, breaks the following code.</p>\n<p>As far as I understand, the simultaneous presence of <code>CommRing K, IsDomain K, Field K</code> confuses Lean and the trick above is a hint to Lean to use <code>K</code> and <code>Field K</code> instead of any other combination of <code>K</code> and some typeclass.</p>",
        "id": 361214273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685076335
    },
    {
        "content": "<p>I created a PR to remove some of the unnecessary workarounds that I had used in <code>FieldTheory.RatFunc</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4373\">!4#4373</a>.</p>",
        "id": 361216050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685077254
    },
    {
        "content": "<p>You It works better if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 361234366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685084809
    },
    {
        "content": "<p>(when you change implicitness of <code>K</code>)</p>",
        "id": 361234432,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685084824
    },
    {
        "content": "<p>It would be great if mathport knew this</p>",
        "id": 361239860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685086552
    },
    {
        "content": "<p>Ok, but this is unrelated to the issue that I mentioned, right?</p>",
        "id": 361242369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685087243
    },
    {
        "content": "<p><code>CommRing K, IsDomain K, Field K</code> should never be simultaneously present</p>",
        "id": 361258495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685091220
    },
    {
        "content": "<p>How did you end up in that situation?</p>",
        "id": 361258523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685091228
    },
    {
        "content": "<p>Did you mean to link to <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca570a16fa94804dbbf293d60926609c34ff91fc/Mathlib/FieldTheory/RatFunc.lean#L1077-L1080\">L1077-L1080</a>?</p>",
        "id": 361258916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685091321
    },
    {
        "content": "<p>Ah, I take it back; this file was just <a href=\"https://github.com/leanprover-community/mathlib/blob/cb42593171ba005beaaf4549fcfe0dece9ada4c9/src/field_theory/ratfunc.lean#L882-L884\">really weird</a> in mathlib3</p>",
        "id": 361259221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685091422
    },
    {
        "content": "<p>Yes, I worked trying to make minimal adjustments for the port.  I found that it worked moderately well, except when Lean got which typeclass assumptions to use when wrong.  To be fair, I think that Lean got it right a lot of the times.</p>",
        "id": 361260057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685091656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/include.20V.20in.20Inversion.2Elean/near/361258916\">said</a>:</p>\n<blockquote>\n<p>Did you mean to link to <a href=\"https://github.com/leanprover-community/mathlib4/blob/ca570a16fa94804dbbf293d60926609c34ff91fc/Mathlib/FieldTheory/RatFunc.lean#L1077-L1080\">L1077-L1080</a>?</p>\n</blockquote>\n<p>There as well, and I guess that it was earlier than the analogous issue that I linked to before.</p>",
        "id": 361260398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685091723
    },
    {
        "content": "<p>By the way <a href=\"#narrow/stream/270676-lean4/topic/substitute.20for.20.60include.2Fomit.60.3F\">here</a> (<code>include/omit</code>) and <a href=\"#narrow/stream/270676-lean4/topic/unexpected.20.60variable.60.20behaviour.3F\">there</a> (<code>variable</code>) are previous threads about related issues.</p>",
        "id": 361261223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685091915
    },
    {
        "content": "<p>In this reduced version of euclean.geometry.inversion, for definition <code>inversion</code>, the <code>include V</code> is required:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inversion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>If we exclude the <code>include V</code>, then we get many errors in the <code>inversion</code> line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">69</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_vsub</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">P</span>\n<span class=\"n\">foo.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">69</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">foo.lean</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">2</span>\n<span class=\"n\">simplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">dist</span> <span class=\"o\">((</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>I guess from <a href=\"https://leanprover.github.io/reference/other_commands.html#universes-and-variables\">here</a>  that it adds an implicit declaration of <code>V : Type*</code> in every definition that follows.</p>\n<p>The corresponding version in Lean 4 typechecks without any problem but doesn't need the <code>include</code> even though <code>V</code> is not declared in the theorem header:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inversion</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>So I guess we can say that any <code>variable</code> in scope of a <code>def</code> in Lean 4 is implicitly declared in the theorem header.</p>",
        "id": 361471641,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685156788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> has marked this topic as resolved.</p>",
        "id": 361471687,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685156824
    },
    {
        "content": "<p>Inversion.lean is already ported if I understand correctly</p>",
        "id": 361480000,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685163834
    },
    {
        "content": "<p>You're right <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>  it has been ported.</p>",
        "id": 361553834,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685188585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span>, if you're just doing this as a learning exercise then this is fine; but if your intent is to contribute towards porting a file, then you should push your changes to github (and create a PR with label WIP and mathlib-port) as soon as you start so that others know you are working on it.</p>",
        "id": 361554089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685188661
    }
]