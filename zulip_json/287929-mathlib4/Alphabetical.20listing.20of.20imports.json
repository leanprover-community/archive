[
    {
        "content": "<p>Is it something desired/expected that <code>import</code>s be in alphabetical order?  I think that this is required for <code>Mathlib.lean</code> and <code>Tactic.lean</code>.</p>",
        "id": 386895913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692803660
    },
    {
        "content": "<p>I certainly check for this in my reviews, mostly because I find it neater. More importantly, it makes merge conflicts easier to spot / resolve: if two PRs change the imports then they will agree on the order, so the only different lines are actual changes in the imports, and not reorderings.</p>",
        "id": 386908241,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692806922
    },
    {
        "content": "<p>Note that changing import order can change behavior</p>",
        "id": 386950152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692824715
    },
    {
        "content": "<p>I was giving this a try on <a href=\"https://github.com/leanprover-community/mathlib4/tree/adomani%2Falpha\">branch#adomani/alpha</a>.  There is an error in <code>Tactic.Positivity.Core</code> and I wonder if this is what Eric points out or just my script having messed up somewhere.</p>\n<p>I'll look into it tomorrow, but the dependence on the order maybe is a signal that alphabetising imports should not be a requirement.</p>",
        "id": 386951789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692825447
    },
    {
        "content": "<p>Also, has someone consciously ordered their imports, so as to simplify a proof?</p>",
        "id": 386952011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692825556
    },
    {
        "content": "<p>This could be next level golfing: find the global permutation of imports that allows you to shorten the most proofs...</p>",
        "id": 386952181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692825629
    },
    {
        "content": "<p>Here is what happens in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6763\">#6763</a> for building master (now linting):</p>\n<ul>\n<li>in <code>Mathlib.Tactic.Positivity.Core</code> I left <code>Mathlib.Tactic.NormNum.Core</code> first, to avoid a timeout;</li>\n<li>in <code>Mathlib.LinearAlgebra.Charpoly.ToMatrix</code> I bumped a little the heartbeats (the file has 2 <em>direct</em> imports and swapping them did not fix the timeout);</li>\n<li>in <code>Mathlib.NumberTheory.NumberField.Norm</code> declaration <code>isUnit_norm</code> now builds with</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">6400000</span> <span class=\"k\">in</span>  <span class=\"c1\">-- via count_heartbeat in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">10000000</span> <span class=\"k\">in</span> <span class=\"c1\">-- by hand: timeout with one fewer 0</span>\n</code></pre></div>\n<p>The sorting of the <code>import</code>s was very crude, so I may have missed sorting \"disconnected\" imports, but the bulk of the sorting should be done.</p>\n<p>As I mentioned, maybe this is not wanted, but, if it is, then the next step would probably be enforcing that new PRs sort their imports and check that the current ones are really all sorted.</p>",
        "id": 386998579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692853763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Alphabetical.20listing.20of.20imports/near/386952011\">said</a>:</p>\n<blockquote>\n<p>Also, has someone consciously ordered their imports, so as to simplify a proof?</p>\n</blockquote>\n<p>To simplify a proof? I doubt it, but to avoid something failing I can definitely imagine</p>",
        "id": 386999280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692854217
    },
    {
        "content": "<p>That crazy bump is almost completely due to <code>Subalgebra.toX</code>’s</p>",
        "id": 387066839,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692881544
    },
    {
        "content": "<p>A different perspective is that it is entirely due to import orders... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 387067593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692881795
    },
    {
        "content": "<p>:) but it can’t just be a problem here</p>",
        "id": 387067851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692881864
    },
    {
        "content": "<p>Agreed!  Anyway, I saw that Alex just ibenched the branch, so we'll get some data!</p>",
        "id": 387068044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692881919
    },
    {
        "content": "<p>I can imagine a fuzzing import order tool ;)</p>",
        "id": 387068274,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692881997
    },
    {
        "content": "<p>At quick glance it wants to pull apart the algebra instance on the algebraic closure</p>",
        "id": 387069336,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692882282
    },
    {
        "content": "<p>The results are in.  They look... random to me.  If anyone who understands what they really say wants to comment, I'd be happy to learn!</p>",
        "id": 387078798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692884841
    },
    {
        "content": "<p>The results are in.  They look... random to me.  If anyone who understands what they really say wants to comment, I'd be happy to learn!</p>",
        "id": 387078992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692884889
    },
    {
        "content": "<p>I think we should expect them to look random. But it would be good to understand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.NumberTheory.NumberField.Norm</span> <span class=\"n\">instructions</span> <span class=\"mi\">1423</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>at least!</p>",
        "id": 387082165,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692885762
    },
    {
        "content": "<p>Do we have a linter or anything that reports all uses of a particular instance in a build?</p>",
        "id": 387084495,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692886296
    },
    {
        "content": "<p>I just re-updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/6763\">#6763</a>, but maybe there is no interest in doing this.</p>\n<p>I personally think that it might be informative to understand</p>\n<ul>\n<li>how to avoid the huge timeouts in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingOfIntegers.isUnit_norm#doc\">docs#RingOfIntegers.isUnit_norm</a></li>\n<li>why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.Positivity.normNumPositivity#doc\">docs#Mathlib.Meta.Positivity.normNumPositivity</a> seem to not build at all, if <code>import Mathlib.Tactic.NormNum.Core</code> does not appear fairly early.</li>\n</ul>\n<p>I will stop maintining up to date the PR, but I have a script that alphabetizes the imports, so can recreate it whenever there is interest!</p>",
        "id": 387525437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693138670
    }
]