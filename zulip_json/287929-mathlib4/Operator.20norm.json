[
    {
        "content": "<p>The following mystery is blocking calculus in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.MeanValue</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.FiniteDimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Cast</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Du</span> <span class=\"n\">Eu</span> <span class=\"n\">Fu</span> <span class=\"n\">Gu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Du</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Du</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Eu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Eu</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Fu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Gu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Gu</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Eu</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">Eu</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 363236749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685780486
    },
    {
        "content": "<p>Not the operator norm again <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 363236903,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685780525
    },
    {
        "content": "<p>Lean has no trouble finding the operator norm until <code>(Du →L[𝕜] Fu) →L[𝕜] Du →L[𝕜] Gu</code> but fails with <code>Eu →L[𝕜] ((Du →L[𝕜] Fu) →L[𝕜] Du →L[𝕜] Gu)</code></p>",
        "id": 363236937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685780534
    },
    {
        "content": "<p>This is the first error in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4532\">!4#4532</a>.</p>",
        "id": 363237094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685780572
    },
    {
        "content": "<p>Ruben, you seem to be a specialist in this issue, it would be very nice to have a fix.</p>",
        "id": 363237186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685780594
    },
    {
        "content": "<p>This file is the main remaining roadblock to restoring the calculus chapter in MIL.</p>",
        "id": 363237403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685780655
    },
    {
        "content": "<p>I'm not sure any such reputation is deserved, but I'll try to find some time later today</p>",
        "id": 363237825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685780769
    },
    {
        "content": "<p>Is it able to find this instance if given the expression to construct it explicitly?</p>",
        "id": 363245031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685782653
    },
    {
        "content": "<p>Answer: no <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- type mismatch</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">Eu</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ContinuousLinearMap.hasOpNorm</span>\n</code></pre></div>\n<p>Going through the <code>isDefEq</code> trace suggests thar the problem is that it<code>found stuck MVar</code>.</p>",
        "id": 363270714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685789265
    },
    {
        "content": "<p>I think there's some weird universe problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">Eu</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n    <span class=\"n\">ContinuousLinearMap.hasOpNorm</span>\n</code></pre></div>\n<p>This has an error on both the last two lines, but the error goes away if you replace the last line with <code>sorry</code></p>",
        "id": 363272226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685789703
    },
    {
        "content": "<p>I'm assuming it's just a coincidence that <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/OperatorNorm.html#ContinuousLinearMap.instNormedSpaceContinuousLinearMapToSemiringToDivisionSemiringToSemifieldToFieldToNormedFieldIdToNonAssocSemiringContinuousLinearMapToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToModuleToModuleTopologicalSpaceToTopologicalAddGroupAddCommMonoidToContinuousAddToAddGroupToSeminormedAddGroupContinuousLinearMapToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToModuleTopologicalSpaceToTopologicalAddGroupAddCommMonoidToContinuousAddToAddGroupToSeminormedAddGroupModuleSmulCommClass_selfToCommMonoidToCommRingToEuclideanDomainToMulActionToMonoidWithZeroToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoidToDivisionAddCommMonoidToMulActionWithZeroContinuousConstSMulToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToSMulToZeroToAddMonoidToSMulZeroClassToZeroToSMulWithZeroContinuousSMulToZeroToCommMonoidWithZeroToCommGroupWithZeroBoundedSMulModuleSmulCommClass_selfToMulActionToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoidToDivisionAddCommMonoidToMulActionWithZeroContinuousConstSMulToSMulToZeroToAddMonoidToSMulZeroClassToSMulWithZeroContinuousSMulBoundedSMulInstSeminormedAddCommGroupContinuousLinearMapToSemiringToDivisionSemiringToSemifieldToFieldToNormedFieldIdToNonAssocSemiringContinuousLinearMapToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToModuleToModuleTopologicalSpaceToTopologicalAddGroupAddCommMonoidToContinuousAddToAddGroupToSeminormedAddGroupContinuousLinearMapToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToAddCommMonoidToAddCommGroupToModuleTopologicalSpaceToTopologicalAddGroupAddCommMonoidToContinuousAddToAddGroupToSeminormedAddGroupModuleSmulCommClass_selfToCommMonoidToCommRingToEuclideanDomainToMulActionToMonoidWithZeroToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoidToDivisionAddCommMonoidToMulActionWithZeroContinuousConstSMulToTopologicalSpaceToUniformSpaceToPseudoMetricSpaceToSeminormedRingToSeminormedCommRingToNormedCommRingToSMulToZeroToAddMonoidToSMulZeroClassToZeroToSMulWithZeroContinuousSMulToZeroToCommMonoidWithZeroToCommGroupWithZeroBoundedSMulModuleSmulCommClass_selfToMulActionToZeroToNegZeroClassToSubNegZeroMonoidToSubtractionMonoidToDivisionAddCommMonoidToMulActionWithZeroContinuousConstSMulToSMulToZeroToAddMonoidToSMulZeroClassToSMulWithZeroContinuousSMulBoundedSMul\">mathlib's longest declaration name</a> is about these objects.</p>",
        "id": 363273571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685790066
    },
    {
        "content": "<p>Note that that instance <a href=\"https://github.com/leanprover-community/mathlib4/blob/30940c3973fcc1e6135001efde0817b6e206257f/Mathlib/Analysis/NormedSpace/OperatorNorm.lean#L995-L996\">is already a porting hack</a>, so probably this is related</p>",
        "id": 363274038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685790133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Why do you think it is related to universes?</p>",
        "id": 363292074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685794670
    },
    {
        "content": "<p>Because the metavariable has an unresolved universe argument</p>",
        "id": 363292296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685794711
    },
    {
        "content": "<p>And the error in the above code sample complains about unifying <code>max ? ?</code> with <code>u</code></p>",
        "id": 363292410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685794736
    },
    {
        "content": "<p>I pushed a hack feeding this instance into the first failing proof, but I need to give up on the next proof for now (the issue seems different). But working on this file is almost impossible because everything is so slow. So probably we can't avoid facing that issue for real.</p>",
        "id": 363302475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685797557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">RingHomIsometric</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">RingHomIsometric</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">?</span><span class=\"n\">m.51913</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>:-(</p>\n<p>I don't really know what a stuck metavariable is but this shows up a few times in the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">ContinuousLinearMap.topologicalSpace</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">ContinuousLinearMap.strongTopology</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span>\n                  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"n\">Bornology.IsVonNBounded</span> <span class=\"bp\">𝕜</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">TopologicalSpace.induced</span> <span class=\"n\">FunLike.coe</span>\n                    <span class=\"o\">(</span><span class=\"n\">UniformOnFun.topologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span>\n                      <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"n\">Bornology.IsVonNBounded</span> <span class=\"bp\">𝕜</span> <span class=\"n\">S</span><span class=\"o\">})</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">IsOpen</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n                      <span class=\"n\">isOpen_univ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span><span class=\"o\">),</span>\n                      <span class=\"n\">isOpen_inter</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                            <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                              <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">∩</span> <span class=\"n\">s₂</span><span class=\"o\">)),</span>\n                      <span class=\"n\">isOpen_sUnion</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))),</span>\n                            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                                <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                              <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">IsOpen</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n                        <span class=\"n\">isOpen_univ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span><span class=\"o\">),</span>\n                        <span class=\"n\">isOpen_inter</span> <span class=\"o\">:=</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                              <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">∩</span> <span class=\"n\">s₂</span><span class=\"o\">)),</span>\n                        <span class=\"n\">isOpen_sUnion</span> <span class=\"o\">:=</span>\n                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))),</span>\n                              <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                                  <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PseudoMetricSpace.toUniformSpace.1</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">TopologicalSpace.IsOpen</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">IsOpen</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n                          <span class=\"n\">isOpen_univ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">Set.univ</span><span class=\"o\">),</span>\n                          <span class=\"n\">isOpen_inter</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                                <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">∩</span> <span class=\"n\">s₂</span><span class=\"o\">)),</span>\n                          <span class=\"n\">isOpen_sUnion</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))),</span>\n                                <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)),</span>\n                                    <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                  <span class=\"bp\">∃</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PseudoMetricSpace.toUniformSpace.1</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[</span><span class=\"n\">stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.51846</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363350642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685812360
    },
    {
        "content": "<p>I think a lot of these traces would become easier to navigate with <code>set_option pp.proofs false</code> or whatever the name is</p>",
        "id": 363351647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685812767
    },
    {
        "content": "<p>Maybe the problem is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">[tryResolve] ❌ RingHomIsometric (RingHom.id 𝕜) ≟ RingHomIsometric (RingHom.id ?m.52368) ▶</span>\n\n<span class=\"cm\">LHS</span>\n\n<span class=\"cm\">@RingHomIsometric 𝕜 𝕜 DivisionSemiring.toSemiring DivisionSemiring.toSemiring NormedField.toNorm NormedField.toNorm</span>\n<span class=\"cm\">  (RingHom.id 𝕜) : Prop</span>\n\n<span class=\"cm\">RHS</span>\n\n<span class=\"cm\">@RingHomIsometric ?m.52368 ?m.52368 Ring.toSemiring Ring.toSemiring SeminormedRing.toNorm SeminormedRing.toNorm</span>\n<span class=\"cm\">  (RingHom.id ?m.52368) : Prop</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 363351804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685812828
    },
    {
        "content": "<p>Does setting a default instance on <code>RingHomIsometric</code> for <code>RingHom.id</code> help at all?</p>",
        "id": 363351903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685812878
    },
    {
        "content": "<p>(The above issue would align with the general picture of Lean 4 being a bit crap at the way we've set up ring theory and now this problem is leaking over to anything which uses fields :-/)</p>",
        "id": 363352052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685812932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Operator.20norm/near/363351903\">said</a>:</p>\n<blockquote>\n<p>Does setting a default instance on <code>RingHomIsometric</code> for <code>RingHom.id</code> help at all?</p>\n</blockquote>\n<p>Yes, it changes the issue to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">smulCommClass_self</span> <span class=\"n\">to</span> <span class=\"n\">SMulCommClass</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SMulCommClass</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span> <span class=\"bp\">≟</span> <span class=\"n\">SMulCommClass</span> <span class=\"bp\">?</span><span class=\"n\">m.53239</span> <span class=\"bp\">?</span><span class=\"n\">m.53239</span> <span class=\"bp\">?</span><span class=\"n\">m.53240</span>\n</code></pre></div>",
        "id": 363352957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685813319
    },
    {
        "content": "<p><del>That failure is expected, that's the wrong instance</del></p>",
        "id": 363353047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685813356
    },
    {
        "content": "<p>LHS is <code>@SMulCommClass 𝕜 𝕜 Fu SMulZeroClass.toSMul SMulZeroClass.toSMul : Prop</code>, RHS is <code>@SMulCommClass ?m.53239 ?m.53239 ?m.53240 MulAction.toSMul MulAction.toSMul : Prop</code></p>",
        "id": 363353124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685813380
    },
    {
        "content": "<p>I assume it's stuck because <code>MulAction.toSMul</code> on the RHS has more metavariables?</p>",
        "id": 363353291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685813421
    },
    {
        "content": "<p>Is the LHS metavariable-free?</p>",
        "id": 363353363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685813456
    },
    {
        "content": "<p>Sorry I'm finding it a bit hard to read these traces, ultimately Lean seems to reduce it to <code>IsScalarTower 𝕜 𝕜 Fu</code>. The \"goal\" of the traces keeps changing and I have to unfold things to find out where we're going</p>",
        "id": 363353477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685813519
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">IsScalarTower.left</span> <span class=\"n\">to</span> <span class=\"n\">IsScalarTower</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">IsScalarTower</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span> <span class=\"bp\">≟</span> <span class=\"n\">IsScalarTower</span> <span class=\"bp\">?</span><span class=\"n\">m.53455</span> <span class=\"bp\">?</span><span class=\"n\">m.53455</span> <span class=\"bp\">?</span><span class=\"n\">m.53456</span>\n</code></pre></div>\n<p>fails because LHS is <code>@IsScalarTower 𝕜 𝕜 Fu Algebra.toSMul SMulZeroClass.toSMul SMulZeroClass.toSMul : Prop</code> and RHS is <code>@IsScalarTower ?m.53455 ?m.53455 ?m.53456 MulAction.toSMul MulAction.toSMul MulAction.toSMul : Prop</code>. And at this point it goes back and tries to find another way to make <code>NormedSpace 𝕜 Fu</code> other than <code>_inst_2</code> :-/</p>",
        "id": 363354072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685813767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Operator.20norm/near/363353291\">said</a>:</p>\n<blockquote>\n<p>I assume it's stuck because <code>MulAction.toSMul</code> on the RHS has more metavariables?</p>\n</blockquote>\n<p>It does have more metavariables: <code>@MulAction.toSMul ?m.55677 ?m.55678 CommMonoid.toMonoid ?m.55680 : SMul ?m.55677 ?m.55678</code></p>",
        "id": 363362941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685817457
    },
    {
        "content": "<p>OK so here's some kind of solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.MeanValue</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.FiniteDimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Cast</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Du</span> <span class=\"n\">Eu</span> <span class=\"n\">Fu</span> <span class=\"n\">Gu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Du</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Du</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Eu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Eu</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Fu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">Gu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Gu</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">RingHomIsometric</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMulCommClass</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Fu</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">Eu</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">((</span><span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Fu</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">Gu</span><span class=\"o\">))</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>If you comment out either instance then <code>#synth</code> fails. Should that happen? I am only adding instances which typeclass inference can already find. That's a bit weird.</p>",
        "id": 363363302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685817603
    },
    {
        "content": "<p>It's not super weird since it probably change the order in which instances are tried.</p>",
        "id": 363363908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685817882
    },
    {
        "content": "<p>Oh OK. We also do this sort of thing occasionally in Lean 3, e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/af471b9e3ce868f296626d33189b4ce730fa4c00/src/data/rat/basic.lean#L51-L52\">here in <code>data.rat.basic</code></a> (and I didn't really understand why we had to do that either)</p>",
        "id": 363364079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685817952
    },
    {
        "content": "<p>It doesn't mean this isn't a problem. I only meant that it's not paranormal.</p>",
        "id": 363364238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685818000
    },
    {
        "content": "<p>\"Lean does not do magic\" -- Kenny Lau</p>",
        "id": 363364310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685818021
    },
    {
        "content": "<p>I seem to have it building, but please don't judge how :)</p>",
        "id": 363367292,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685819240
    }
]