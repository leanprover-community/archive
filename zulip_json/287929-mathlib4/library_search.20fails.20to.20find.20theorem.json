[
    {
        "content": "<p>Here's a simple proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add_left_cancel</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Now suppose we ask <code>library_search</code> to help with this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p><code>library_search</code> doesn't come up with the theorem <code>Nat.add_left_cancel</code>.  Shouldn't it find it?</p>",
        "id": 360639697,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1684876348
    },
    {
        "content": "<p>By the way: I'm using <code>leanprover/lean4:nightly-2023-04-20</code>.</p>",
        "id": 360639836,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1684876414
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>works ok on the Lean 4 web editor <a href=\"https://lean.math.hhu.de\">https://lean.math.hhu.de</a>, maybe you just need to update to a newer mathlib?  (library search has seen some improvements recently)</p>",
        "id": 360651265,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1684881707
    },
    {
        "content": "<p>I'm mostly loving our new fast <code>exact?</code> library search but occasionally I'm surprised by failures. For example, shouldn't this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Fails to find `eq_zero_or_pos`</span>\n</code></pre></div>",
        "id": 377013391,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689865192
    },
    {
        "content": "<p>That's a consequence of this line in <code>isInternal'</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a1451be4b1cafd4d5e780a690b9e26c8891d3220/Mathlib/Lean/Expr/Basic.lean#L97\">https://github.com/leanprover-community/mathlib4/blob/a1451be4b1cafd4d5e780a690b9e26c8891d3220/Mathlib/Lean/Expr/Basic.lean#L97</a></p>",
        "id": 377016972,
        "sender_full_name": "David Renshaw",
        "timestamp": 1689865742
    },
    {
        "content": "<p>Is there an issue open about that?</p>",
        "id": 377035069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689868798
    },
    {
        "content": "<p>I just added a comment here: <a href=\"https://github.com/leanprover-community/mathlib4/issues/3426#issuecomment-1644226610\">https://github.com/leanprover-community/mathlib4/issues/3426#issuecomment-1644226610</a></p>",
        "id": 377043193,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689870349
    },
    {
        "content": "<p>Oh, I meant an issue against lean4, since that seems like a pretty odd thing to declare internal</p>",
        "id": 377043865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689870479
    },
    {
        "content": "<p>I don't really know what the concept of being \"internal\" means so I'm not sure what the issue should be. Should it be \"Add API to detect if something is internal\"?</p>",
        "id": 377046043,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689870958
    },
    {
        "content": "<p>This pull request is related: <a href=\"https://github.com/leanprover/lean4/pull/2112\">https://github.com/leanprover/lean4/pull/2112</a></p>",
        "id": 377046811,
        "sender_full_name": "David Renshaw",
        "timestamp": 1689871142
    },
    {
        "content": "<p>and the one it links to: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2349\">https://github.com/leanprover-community/mathlib4/pull/2349</a></p>",
        "id": 377046927,
        "sender_full_name": "David Renshaw",
        "timestamp": 1689871172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/library_search.20fails.20to.20find.20theorem/near/377043865\">said</a>:</p>\n<blockquote>\n<p>Oh, I meant an issue against lean4, since that seems like a pretty odd thing to declare internal</p>\n</blockquote>\n<p>isInternal' is in mathlib though</p>",
        "id": 377055184,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689872929
    },
    {
        "content": "<p>I'm actually not sure what that part of <code>isInternal'</code> is guarding against, I can see declarations with names like <code>_eq_n</code> in mathlib, but none without the leading underscore, perhaps it can just be deleted. Thoughts <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ?</p>",
        "id": 377056940,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689873354
    },
    {
        "content": "<p>I just looked into it a bit more, looks like core lean switched from <code>eq_n</code> to <code>_eq_n</code> in <a href=\"https://github.com/leanprover/lean4/commit/4d1343d67005749367a08d2964a1dfb0bf09d3dd\">https://github.com/leanprover/lean4/commit/4d1343d67005749367a08d2964a1dfb0bf09d3dd</a> so I think we are safe to remove the <code>eq_n</code> check from <code>isInternal'</code> as it is now covered by <code>isInternal</code>. I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/6036\">#6036</a> to change this</p>",
        "id": 377146250,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689901372
    }
]