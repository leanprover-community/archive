[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4738\">!4#4738</a> This works, but is there a way to prove <code>h₁</code> (with a real 3 exponent) in one line? I can't see the theorems that <code>norm_cast</code> used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">deriv2_sqrt_mul_log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">deriv</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.iterate</span><span class=\"o\">,</span> <span class=\"n\">deriv_sqrt_mul_log'</span><span class=\"o\">]</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_eq_zero_of_nonpos</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_num</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">HasDerivWithinAt.deriv_eq_zero</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">uniqueDiffOn_Iic</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">hasDerivWithinAt_const</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr_of_mem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_eq_zero_of_nonpos</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">div_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt_ne_zero'.2</span> <span class=\"n\">hx</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(((</span><span class=\"n\">hasDerivAt_log</span> <span class=\"n\">hx.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_add</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">div</span> <span class=\"o\">((</span><span class=\"n\">hasDerivAt_sqrt</span> <span class=\"n\">hx.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_mul</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">mul_ne_zero</span> <span class=\"n\">two_ne_zero</span> <span class=\"n\">h₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">deriv</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"n\">nth_rw</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_self_sqrt</span> <span class=\"n\">hx.le</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_ne_zero</span> <span class=\"mi\">3</span> <span class=\"n\">h₀</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n    <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 364037827,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686065212
    },
    {
        "content": "<p>Note that in <code>pow_ne_zero 3 h₀</code> the 3 is natural</p>",
        "id": 364038131,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686065273
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_eq_of_ne</span> <span class=\"o\">(</span><span class=\"n\">rpow_nat_cast</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_ne_zero</span> <span class=\"mi\">3</span> <span class=\"n\">h₀</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>seems to work.  I am not sure that this is really better, though.</p>",
        "id": 364044144,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686066568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> that <code>3</code> should have type <code>ℕ</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv2_sqrt_mul_log\">docs#deriv2_sqrt_mul_log</a>. You need the <code>HPow</code> local macro hack.</p>",
        "id": 364044766,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686066702
    },
    {
        "content": "<p>In general, if you see things that are naturals in powers that are being coerced to <code>ℝ</code>, there's a good chance <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> is to blame.</p>",
        "id": 364045319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686066820
    },
    {
        "content": "<p>Then why are you not fixing this now?</p>",
        "id": 364045755,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686066919
    },
    {
        "content": "<p>Probably for much of the same reasons <em>you</em> aren't</p>",
        "id": 364046627,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686067107
    },
    {
        "content": "<p>Because you're working on the file? I'm in the middle of my own projects; it would be inconvenient for me to switch branches, pull, cache, change and push, not to mention the fact that the PR is not marked as <code>help-wanted</code>. There's a separation of responsibilities.</p>",
        "id": 364046852,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686067153
    },
    {
        "content": "<p>I meant <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>",
        "id": 364047264,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686067224
    },
    {
        "content": "<p>I've read the comments and there are a few nice proposals there</p>",
        "id": 364047801,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686067328
    },
    {
        "content": "<p>Again, separation of responsibilities (and authority). This is a Lean 4 core issue, and I have essentially no experience there. I trust others who are more comfortable in that space to handle it at some point. Maybe I will eventually get comfortable making PRs to Lean 4 core, but I don't feel a strong impetus to do so right now.</p>",
        "id": 364049259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686067642
    },
    {
        "content": "<p>I admit I did put the hack in one of my other PRs</p>",
        "id": 364051966,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686068212
    },
    {
        "content": "<p>That's the right approach for the moment. It preserves the intended declaration from mathlib3, and as long as you leave a porting note referencing <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a>, it can easily be removed when that issue is fixed.</p>",
        "id": 364053887,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686068656
    },
    {
        "content": "<p>...though I had not included the hack when I started working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/4738\">!4#4738</a>, so I've re-ported the file properly at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4746\">!4#4746</a></p>",
        "id": 364067542,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686072002
    },
    {
        "content": "<p>With the hack the <code>have</code>s indeed disappear</p>",
        "id": 364068875,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686072353
    }
]