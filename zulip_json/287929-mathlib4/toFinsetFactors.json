[
    {
        "content": "<p>The current idiom for \"the finset of prime factors of <code>n:Nat</code>\" is <code>n.factors.toFinset</code>. (n.factors is a list). <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/6662#pullrequestreview-1627355865\">pointed out</a> that this set should probably have a name. I tend to agree. What should it be called?</p>",
        "id": 391003733,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694718967
    },
    {
        "content": "<p>/poll What should we call this set?</p>",
        "id": 391003743,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694718971
    },
    {
        "content": "<p>For reference:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat.factors, List.toFinset</p>",
        "id": 391003904,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694719081
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:13: expected end of input</p>",
        "id": 391003908,
        "sender_full_name": "loogle",
        "timestamp": 1694719082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat.factors, List.toFinset</p>",
        "id": 391004176,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694719206
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/Divisors.html#Nat.prime_divisors_eq_to_filter_divisors_prime\">Nat.prime_divisors_eq_to_filter_divisors_prime</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/PrimeFin.html#Nat.factors_mul_toFinset\">Nat.factors_mul_toFinset</a>, and <a href=\"https://loogle.lean-fro.org/?q=Nat.factors%2C%20List.toFinset\">13 more</a></p>",
        "id": 391004177,
        "sender_full_name": "loogle",
        "timestamp": 1694719206
    },
    {
        "content": "<p>FactorsFinset</p>",
        "id": 391005781,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694719941
    },
    {
        "content": "<p>I'd be tempted to make this an <code>abbrev</code> so that it doesn't cost anything</p>",
        "id": 391006674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694720352
    },
    {
        "content": "<p>I added <code>n.support</code> as an option, but maybe that's not too intuitive for most people.</p>",
        "id": 391007618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694720760
    },
    {
        "content": "<p>note that <code>support</code> should also makes sense for (nonzero) rational numbers.</p>",
        "id": 391007731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694720798
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization.support#doc\">docs#Nat.factorization.support</a></p>",
        "id": 391009878,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694721721
    },
    {
        "content": "<p>whatever it is I think should be an abbrev of <code>factorization.support</code></p>",
        "id": 391010033,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694721778
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization#doc\">docs#Nat.factorization</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.support#doc\">docs#Finsupp.support</a>)</p>",
        "id": 391010058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694721788
    },
    {
        "content": "<p>I just noticed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.support_factorization#doc\">docs#Nat.support_factorization</a> is a simp lemma, suggesting <code>n.factors.toFinset</code> is currently the canonical spelling.</p>",
        "id": 391011148,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694722242
    },
    {
        "content": "<p>Either way, the fact that there are two very natural ways of expressing this concept makes me think this should be a <code>def</code> rather than an abbreviation.</p>",
        "id": 391011347,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694722323
    },
    {
        "content": "<p>But I think it's nice to apply stuff about finsupps - there was some good work put into the factorization stuff</p>",
        "id": 391011786,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694722556
    },
    {
        "content": "<p>If we're going with an abbreviation I'd like to consider what we want <code>simp</code> to do with <code>p ∈ n.primeDivisors</code>. Currently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorization.Basic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">primeDivisors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n.factorization.support</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.primeDivisors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> h : p ∈ factors n -/</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> And if we remove simp from support_factorization: -/</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.support_factorization</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.primeDivisors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> h : ¬↑(factorization n) p = 0 -/</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I'd argue it would be much more natural to have a simp lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mem_divisors#doc\">docs#Nat.mem_divisors</a> that produces <code>p.Prime ∧ p ∣ n ∧ n ≠ 0</code>, but we can't do that with an abbreviation since simp could apply more general results like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mem_toFinset#doc\">docs#List.mem_toFinset</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.mem_support_iff#doc\">docs#Finsupp.mem_support_iff</a> first.</p>",
        "id": 392517748,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1695389205
    },
    {
        "content": "<p>I've opened a <a href=\"https://github.com/leanprover-community/mathlib4/pull/7607\">#7607</a>, which makes <code>n.primeDivisors</code>an abbreviation for <code>n.factorization.support</code> and attempts to make it into the canonical spelling throughout mathlib. (that includes removing <code>simp</code> from <code>support_factorization</code>)</p>",
        "id": 395907946,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1696951552
    }
]