[
    {
        "content": "<p>If <code>x : ℝ</code>, <code>x ^ 2</code> = <code>x * (x * 1)</code> by <code>rfl</code>, not <code>x * x</code>. This could be changed by redefining <code>npowRec</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">npowRec</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">npowRec</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Would this change be a good idea?</p>\n<p>There's a comment above <code>npowRec</code> explaining the current rationale</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- use `x * npowRec n x` and not `npowRec n x * x` in the definition to make sure that</span>\n<span class=\"c1\">-- definitional unfolding of `npowRec` is blocked, to avoid deep recursion issues.</span>\n<span class=\"kd\">def</span> <span class=\"n\">npowRec</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">npowRec</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I don't really understand what this comment is saying. What \"definitional unfolding\" is the current solution blocking?</p>",
        "id": 398908475,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698416521
    },
    {
        "content": "<p>What would the purpose of the change be?</p>",
        "id": 398908724,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698416604
    },
    {
        "content": "<p>Note that <code>x ^ n</code> is often not defeq to <code>npowRec n x</code> anyway</p>",
        "id": 398908734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/x.20.5E.202.20defeq/near/398908734\">said</a>:</p>\n<blockquote>\n<p>Note that <code>x ^ n</code> is often not defeq to <code>npowRec n x</code> anyway</p>\n</blockquote>\n<p>It is for all real numbers <code>x</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">npowRec</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398909733,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698416961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/x.20.5E.202.20defeq/near/398908724\">said</a>:</p>\n<blockquote>\n<p>What would the purpose of the change be?</p>\n</blockquote>\n<p>Well the current defeq can always be worked around with <code>simp [pow_two]</code> (or <code>pow_succ</code> for greater <code>n</code>), but I was just surprised when I tried to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">normSq_mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and it failed.</p>",
        "id": 398910039,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698417069
    },
    {
        "content": "<p>I think that you should be surprised when you <em>can</em> prove something by <code>rfl</code>, not when you <em>cannot</em>!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 398910459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698417204
    },
    {
        "content": "<p>If in informal maths you say \"this is true by definition\", then in formal maths you say \"there is a lemma asserting this\".  Relying on defeq is too strong, but propeq is closer to what \"by definition\" means informally.</p>",
        "id": 398911495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698417562
    },
    {
        "content": "<p>Maybe, renaming <code>DefEq</code> to <code>CompSciEq</code> would have confused fewer people...</p>",
        "id": 398911504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698417565
    },
    {
        "content": "<p>Arguably we should really implement <code>npowRec</code> with binary recursion for a performance boost on things like <code>x ^ 16</code>!</p>",
        "id": 398915786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698418985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/287929-mathlib4/topic/x.20.5E.202.20defeq/near/398910039\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">normSq_mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and it failed.</p>\n</blockquote>\n<p>Surely the real definition of <code>Complex.normSq ⟨x, y⟩</code> is <code>x ^ 2 + y ^ 2 + 0</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 398933280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698424596
    },
    {
        "content": "<p>There's nothing wrong with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">normSq_mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Complex.normSq</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Defeq is over-rated. It's not even a mathematical concept really. It's specific to dependent type theory I guess?</p>",
        "id": 398947709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698430591
    },
    {
        "content": "<p>I would argue that defeq <em>is</em> a mathematical concept, but that the defeq required by dependent type theory isn't. For instance, we certainly have a notion in mathematics of \"this is true by definition\". I think the key feature of the mathematical version is: upon creating a definition, you're allowed to provide multiple definitions as long as you show they are propositionally equal / equivalent.</p>",
        "id": 398972240,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698443117
    },
    {
        "content": "<p>Right -- several things can be \"true by definition\" because we're allowed to switch definition! But that's not what we're talking about here I guess.</p>",
        "id": 398975082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698444897
    },
    {
        "content": "<p>Doesn't Isabell have a notion of defeq like that?</p>",
        "id": 398978544,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698447615
    },
    {
        "content": "<p>Right -- maybe I should have said \"Lean's defeq is not even a mathematical concept really\" (in agreement with Jireh)</p>",
        "id": 398979892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698448629
    }
]