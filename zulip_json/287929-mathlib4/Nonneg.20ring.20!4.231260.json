[
    {
        "content": "<p>I fixed a timeout in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1260\">!4#1260</a> by changing instances before <code>with</code> to terms that appear in the <code>extends</code> chain. Can we do the same to the other? It may be harder because it has more non-structure arguments.</p>",
        "id": 326947338,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675991699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> has marked this topic as resolved.</p>",
        "id": 326947355,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675991708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> has marked this topic as unresolved.</p>",
        "id": 326947358,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675991711
    },
    {
        "content": "<p>interestingly enough, the timeout you mention seem to also be fixed by just swapping</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">Nonneg.linearOrderedSemiring</span><span class=\"o\">,</span> <span class=\"n\">Nonneg.orderedCommSemiring</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">Nonneg.orderedCommSemiring</span><span class=\"o\">,</span> <span class=\"n\">Nonneg.linearOrderedSemiring</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>It compiles now and is fully linted <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 326950088,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675993742
    },
    {
        "content": "<p>I'm going to fix the lemmas that you commented instead of removing them. It seems that the parser added coercions at wrong places.</p>",
        "id": 326950977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675993937
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"356930\">@porters</span> Should we merge it now (and unlock some dependencies) or wait for a proper fix in the Lean core?</p>",
        "id": 326956388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675995243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Reporting a <code>mathport</code> bug (or a missing feature). We have many lemmas like <code>(s t : Finset α) : ↑(s ∪ t) = (s ∪ t : Set α)</code>. In Lean 3, this was interpreted as <code>(s t : finset α) : (s ∪ t).to_set = s.to_set ∪ t.to_set</code> while Lean 4 interprets it as <code>(s t : Finset α) : (s ∪ t).toSet = (s ∪ t).toSet</code> changing its meaning and making it useless. Is it possible to adjust these lemmas in <code>mathport</code>? E.g., by adding some extra arrows.</p>",
        "id": 326978034,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676012949
    },
    {
        "content": "<p>I opened an issue about this against the lean repo but my understanding is that this change was intentional so really it should be opened against mathport instead</p>",
        "id": 326985255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676016093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nonneg.20ring.20!4.231260/near/326956388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-group-mention silent\" data-user-group-id=\"356930\">porters</span> Should we merge it now (and unlock some dependencies) or wait for a proper fix in the Lean core?</p>\n</blockquote>\n<p>I believe with per-file caching it's not too much of a bother merging now even if it has a <code>set_option maxHeartbeat</code> in there.</p>",
        "id": 327002977,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1676022031
    },
    {
        "content": "<p>Do we think the timeouts here are again the structure eta issue in type class inference?</p>",
        "id": 327125205,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676055550
    },
    {
        "content": "<p>I rebased on <code>master</code> to see how it works with new Lean</p>",
        "id": 327193299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676095443
    },
    {
        "content": "<p>It works without <code>set_option maxHeartbeats</code>!</p>",
        "id": 327193830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676096017
    },
    {
        "content": "<p>Should we merge it now?</p>",
        "id": 327193833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676096024
    }
]