[
    {
        "content": "<p>This is my first time playing with algebraic structures in Lean 4.<br>\nI decided to define a custom <code>Ring</code> instance over rational numbers.<br>\nI thought it would be an easy exercise (it probably is -- and I seem to be n00b).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weirdAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">weirdAdd</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">weirdMul</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I already have an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.1052</span> <span class=\"bp\">?</span><span class=\"n\">m.1052</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">NatCast.natCast</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>What is the cause? Do I need to provide the <code>natCast</code> function, prove <code>natCast_zero</code> and so on?</p>",
        "id": 389840091,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694163627
    },
    {
        "content": "<p>You would do better to do this exercise on a (wrapped) copy of the rational numbers</p>",
        "id": 389840262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694163683
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyRat</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">weirdAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyRat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyRat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyRat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyRat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a.val</span><span class=\"bp\">*</span><span class=\"n\">b.val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">MyRat</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 389840445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694163738
    },
    {
        "content": "<p>Otherwise Lean will try to use the existing instance, which is what is going wrong here</p>",
        "id": 389840479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694163753
    },
    {
        "content": "<p>Would <code>def Q' : Type := ℚ</code> be enough? Or does it have to be a structure with a rational field?</p>",
        "id": 389840579,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694163791
    },
    {
        "content": "<p>That would be enough, but it's much easier to make a mess</p>",
        "id": 389840610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694163804
    },
    {
        "content": "<p>If you use that approach, you will want to to define <code>Q'.mk</code> and <code>Q.val</code> manually, and write your code as if you were using a structure</p>",
        "id": 389840699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694163838
    },
    {
        "content": "<p>How can I unfold the zero now?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weirdAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a.v</span> <span class=\"bp\">*</span> <span class=\"n\">b.v</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">weirdRing</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">weirdAdd</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">weirdMul</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.v</span><span class=\"o\">))</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">--unfold HAdd.hAdd</span>\n    <span class=\"c1\">--unfold instHAdd</span>\n    <span class=\"c1\">--unfold weirdAdd</span>\n    <span class=\"c1\">--unfold Add.add</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">,</span> <span class=\"n\">instHAdd</span><span class=\"o\">,</span> <span class=\"n\">weirdAdd</span><span class=\"o\">,</span> <span class=\"n\">Add.add</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- `0.v` is `@OfNat.ofNat ℚ' 0 Zero.toOfNat0 : ℚ'`</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there a better way how to get from the generic goal <code>0 + x = x</code> to working with my definitions?</p>",
        "id": 389844680,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694165301
    },
    {
        "content": "<p>Put <code>@[simps]</code> on your defs?</p>",
        "id": 389845557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694165636
    },
    {
        "content": "<p>(and <code>ext</code> on the structure)</p>",
        "id": 389845628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694165647
    },
    {
        "content": "<p>Did I understand your recommendation right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a.v</span> <span class=\"bp\">*</span> <span class=\"n\">b.v</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">weirdRing</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">weirdAdd</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">weirdMul</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.v</span><span class=\"o\">)</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">--simp only [HAdd.hAdd, instHAdd, weirdAdd, Add.add]</span>\n    <span class=\"n\">simp</span> <span class=\"c1\">-- has no effect</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It has no effect.</p>",
        "id": 389846215,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694165866
    },
    {
        "content": "<p>The ext attribute won't do anything until you use the corresponding tactic</p>",
        "id": 389847497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694166289
    },
    {
        "content": "<p>Defining neg and zero separately with simps will help too</p>",
        "id": 389847661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694166355
    },
    {
        "content": "<p>Still no unfolding.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdMul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"n\">a.v</span> <span class=\"bp\">+</span> <span class=\"n\">b.v</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a.v</span> <span class=\"bp\">*</span> <span class=\"n\">b.v</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdZero</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdOne</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">weirdNeg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">$</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a.v</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">weirdRing</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">ℚ'</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">weirdAdd</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">weirdMul</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">weirdZero</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">weirdNeg</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">weirdOne</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">--ext -- goes too far</span>\n    <span class=\"n\">simp</span> <span class=\"c1\">-- has no effect</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there any tutorial that I could follow?<br>\nI cannot be the first one who struggles with these instances.</p>",
        "id": 389848984,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694166922
    },
    {
        "content": "<p><code>ext : 1</code> will go exactly as far as you need</p>",
        "id": 389850171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694167361
    },
    {
        "content": "<p><a href=\"https://github.com/lftcm2023/lftcm2023/blob/287b489a6613ff252792289626d975cfd1044aef/LftCM/C05_Structures_And_Classes/S00_Structures_And_Classes.lean#L728\">here</a> is an exercise that has you build this type of type alias</p>",
        "id": 389850445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694167465
    },
    {
        "content": "<p>Very nice tutorial, thank you!</p>",
        "id": 389871046,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694175542
    },
    {
        "content": "<p>I finished my exercise:<br>\n<a href=\"https://github.com/madvorak/lean4-exercises/blob/main/Rings.lean\">https://github.com/madvorak/lean4-exercises/blob/main/Rings.lean</a></p>\n<ul>\n<li>It took me longer than I expected. However, this is indicative of me being a n00b, not of Lean 4 not being user-friendly.</li>\n<li>I didn't manage to do the proofs inside the <code>instance</code> declaration; I might possibly define a notation before declaring the instance and use it in all lemmas, but it is not what I hoped for.</li>\n<li>On the positive side, Lean proved to be a proof assistant. I made a mathematical mistake originally. In Lean, it was easy to find the mistake and very fast to correct it.</li>\n</ul>",
        "id": 389897457,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694184980
    },
    {
        "content": "<p>I would really like to know how to write it so that I will be able open the tactic mode inside the instance declaration and unfold my definitions there. Repeating each condition in a separate lemma statement was annoying.</p>",
        "id": 389899713,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694185690
    }
]