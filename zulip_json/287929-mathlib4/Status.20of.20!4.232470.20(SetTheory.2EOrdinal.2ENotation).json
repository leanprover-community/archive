[
    {
        "content": "<p>I've been semi-adopting this file and fixing things on and off, but it's pretty heinous. In particular, the original Lean 3 (ab)uses <code>_match_1</code> to prove certain invariants that are essential for proofs, and there's a thing that happens here where two match patterns generate three terms in a way that I don't understand (and neither does Lean 4).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">repr_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NF</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NF</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">repr</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">match</span> <span class=\"n\">cmp</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cmp_compares</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"n\">ordering.lt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">repr</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n <span class=\"bp\">|</span> <span class=\"n\">ordering.gt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">repr</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n <span class=\"bp\">|</span> <span class=\"n\">ordering.eq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(<code>cmp</code> returns an <code>ordering</code> and <code>cmp_compares</code> returns <code>(cmp a b).compares a b</code>, and there's some magic that's happening there).</p>\n<p>I wonder if the right thing here is for someone to refactor on the Lean 3 side then re-start the port. I've been inserting defs that recapitulate the <code>_match_1</code> on the Lean 3 side (and yes, there's a match construct on Lean 4 but it returns different signatures), and generally cleaning stuff up, but someone's going to have a long review cycle....</p>",
        "id": 342368362,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678984830
    },
    {
        "content": "<p>_match_1 can probably be replaced with <code>let rec</code>?</p>",
        "id": 342368968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678984958
    },
    {
        "content": "<p>Can you link to the offending use of _match_1 in mathlib3?</p>",
        "id": 342369132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678984999
    },
    {
        "content": "<p>Sure: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote.opow_def\">docs#onote.opow_def</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote.oadd_add\">docs#onote.oadd_add</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote.repr_sub\">docs#onote.repr_sub</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote.fast_growing_def\">docs#onote.fast_growing_def</a></p>",
        "id": 342372942,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678985809
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/opow_def\">docs#opow_def</a>  is just the equation lemma for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opow\">docs#opow</a></p>",
        "id": 342377256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678986849
    },
    {
        "content": "<p>Sort of.</p>",
        "id": 342380060,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678987592
    },
    {
        "content": "<p><code>opow._match_1</code> is <code>onote → onote × ℕ → onote</code> and <code>opow</code> is <code>onote → onote → onote</code>, so it's a single step into <code>opow</code></p>",
        "id": 342380972,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678987831
    },
    {
        "content": "<p>I find this very confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The ordinal denoted by a notation -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">Onote</span> <span class=\"bp\">→</span> <span class=\"n\">Ordinal.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">oadd</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">onote.repr</span> <span class=\"n\">Onote.repr</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Onote</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">PNat</span><span class=\"o\">))</span> <span class=\"c1\">-- OK: repr e * ↑↑5 : Ordinal</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">oadd_repr</span><span class=\"o\">:</span> <span class=\"n\">oadd</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  HMul Ordinal ℕ+ ?m.12533</span>\n</code></pre></div>\n<p>This seemingly trivial proof is key to some shennanigans I'd like to try to unlock <code>repr_inj</code>.</p>",
        "id": 342817919,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679160465
    },
    {
        "content": "<p>Did you mean to write <code>(oadd e n a).repr</code> and not <code>oadd e n a </code>?</p>",
        "id": 342819559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679161282
    },
    {
        "content": "<p>I <em>just</em> realized that...</p>",
        "id": 342819758,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679161365
    },
    {
        "content": "<p>Sigh, now I'm in coercion hell.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zere_ne_oadd_repr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"bp\">≠</span>  <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">opow_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">omega_ne_zero</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span>  <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Ordinal.mul_ne_zero</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">PNat.ne_zero</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">argument</span>\n  <span class=\"n\">PNat.ne_zero</span> <span class=\"n\">n</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑↑</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The plan here is that by cases, I can get <code>repr_inj</code> to a state where if I can prove the above, and can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">notation_ext_iff</span><span class=\"o\">:</span>\n    <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ω</span> <span class=\"bp\">^</span> <span class=\"n\">repr</span> <span class=\"n\">e'</span> <span class=\"bp\">*</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"n\">repr</span> <span class=\"n\">a'</span> <span class=\"bp\">↔</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e'</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then I'm done</p>",
        "id": 342827118,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679165101
    },
    {
        "content": "<p>How does it work in mathlib3?</p>",
        "id": 342827381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679165196
    },
    {
        "content": "<p>See above -- first post -- some weird thing where two matches generate three hypotheses.</p>\n<p>(Sadly, my <code>ext_iff</code> relies on <code>repr_inj</code> so that's another corner).</p>",
        "id": 342827459,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679165268
    },
    {
        "content": "<p>I don't understand why that syntax worked but it must have meant something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 342827721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165414
    },
    {
        "content": "<p>In any case <code>repr_inj</code> should follow easily from <code>cmp_compares</code></p>",
        "id": 342827792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20!4.232470.20.28SetTheory.2EOrdinal.2ENotation.29/near/342827721\">said</a>:</p>\n<blockquote>\n<p>I don't understand why that syntax worked but it must have meant something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Because this match expression is appearing where we want a term of type<br>\n<code>repr a = repr b -&gt; a = b</code><br>\nand in the branch <code>| ordering.lt, (h : repr a &lt; repr b), e := (ne_of_lt h e).elim</code> we see <code>ne_of_lt h e</code> with <code>h : repr a &lt; repr b</code>, so <code>e : repr a = repr b</code> and there is a call to <code>false.elim</code></p>",
        "id": 342828081,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165644
    },
    {
        "content": "<p>What's so very confusing here, is that we have <code>h,e</code> where <code>h: repr a &lt; repr b</code> and <code>e</code> is <code>a = b</code></p>",
        "id": 342828224,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679165719
    },
    {
        "content": "<p><code>e</code> should be of type <code>repr a = repr b</code></p>",
        "id": 342828244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165739
    },
    {
        "content": "<p><code>ne_of_lt</code></p>",
        "id": 342828272,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679165761
    },
    {
        "content": "<p>Right, it is being passed <code>h : repr a &lt; repr b</code>, so then the result is <code>not (repr a = repr b)</code>, so if we pass <code>e : repr a = repr b</code> now, we get <code>false</code></p>",
        "id": 342828347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165793
    },
    {
        "content": "<p>This also makes sense, since we are proving the forwards direction so <code>repr a = repr b</code> is what we know.</p>",
        "id": 342828375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165821
    },
    {
        "content": "<p>Sorry, <code>e: repr a = repr b</code></p>",
        "id": 342828391,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679165834
    },
    {
        "content": "<p>To be more precise what I mean is that you can rewrite the Lean 3 code equivalently by</p>\n<ul>\n<li>inserting <code>\\lam e, </code> between the <code>\\&lt;</code> and <code>match</code></li>\n<li>removing <code>, e</code> from the LHS of each branch</li>\n</ul>",
        "id": 342828514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165891
    },
    {
        "content": "<p>I think whoever wrote this code the first time knows too much about how Lean works.</p>",
        "id": 342828558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679165927
    },
    {
        "content": "<p>Look at the copyright statement <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 342828795,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679166028
    },
    {
        "content": "<p>Yes, I was pretty sure I knew who it was without looking!</p>",
        "id": 342828923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679166099
    },
    {
        "content": "<p>Now I wonder if you could use <code>match with</code> with no expressions, but with multiple branches, as a lambda-case</p>",
        "id": 342829217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679166264
    },
    {
        "content": "<p>Uber-compact/golfed code has turned out to be tricky to port on more than one occasion. For me this was an unexpected bad consequence of the mathlib3 golf-for-your-life policy.</p>",
        "id": 342836779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679171253
    },
    {
        "content": "<p>On the flipside, I think long messy nonterminal-simp proofs would have been worse to port</p>",
        "id": 342840419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679174314
    },
    {
        "content": "<p>This is driving me crazy -- has to be an easy fix with a missing coercion somewhere.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Principal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one'</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- good</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one''</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 342863457,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679190430
    },
    {
        "content": "<p>I would not expect the second one to work, look at the goal state</p>",
        "id": 342864312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679191190
    },
    {
        "content": "<p>Ah....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Principal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one'</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one''</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- doens't</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one''''</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't</span>\n</code></pre></div>",
        "id": 342868127,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679194581
    },
    {
        "content": "<p>So in the first case, we use the <code>One</code> machinery, in the other two we use coercion machinery to cast a <code>P/Nat</code> as an <code>Ordinal</code>.</p>",
        "id": 342868344,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679194763
    },
    {
        "content": "<p>Which, if the cast is to mean anything should be equal to <code>Ordinal.one</code></p>",
        "id": 342868990,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679195259
    },
    {
        "content": "<p>So, updating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Principal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one'</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one''</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- closes goal, below fails due to no goals to be solved</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.cast_one</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one''''</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}:</span> <span class=\"n\">o</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"c1\">-- DOES NOT CLOSE GOAL but below closes goal</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑↑</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.cast_one</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It seems like there's a simp lemma missing somewhere.</p>",
        "id": 342966416,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679245685
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2989\">!4#2989</a> perhaps?</p>",
        "id": 342966549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679245791
    },
    {
        "content": "<p>I don't think that has the right signature, but maybe?</p>",
        "id": 342967118,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679246124
    },
    {
        "content": "<p>One would like to express \"if there's a coercion between <code>ℕ</code> and some time there's also a coercion between <code>ℕ+</code> and that type\"</p>",
        "id": 342967348,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679246267
    },
    {
        "content": "<p>Do the proofs above work in Lean 3?</p>",
        "id": 342967610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679246395
    },
    {
        "content": "<p>Lean 3 simps just fine</p>",
        "id": 342967700,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679246418
    },
    {
        "content": "<p>Then use <code>simp?</code> in Lean 3 vs Lean 4 and see what's different</p>",
        "id": 342967724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679246429
    },
    {
        "content": "<p>Ah, the missing bit is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_coe\">docs#coe_coe</a></p>",
        "id": 342968337,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679246781
    },
    {
        "content": "<p>Not ported, and no align statement AFAICT?</p>",
        "id": 342968441,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679246858
    },
    {
        "content": "<p><code>coe_coe</code> was a magic lemma in Lean3 which can't really exist in Lean4</p>",
        "id": 342968930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247099
    },
    {
        "content": "<p>At least, as I understand it; I think it exploited the fact that implicit typeclass arguments are found by unification, so it would apply to things that aren't actually the transitive coercion instance as long as they're defeq to it. There is no <code>coe</code> symbol to match on in Lean 4, so the lemma wouldn't work</p>",
        "id": 342969064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247173
    },
    {
        "content": "<p>If you add the <code>coe_coe</code> statement locally for the types you need, does it help?</p>",
        "id": 342969105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247191
    },
    {
        "content": "<p>Let me try -- I see a bunch of local <code>coe_coe</code> lemmas that I can try from &amp; obviously I have a hacky solution above that will work.</p>",
        "id": 342969507,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247384
    },
    {
        "content": "<p>I did confirm that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">PNat_Nat_coe</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>does not work where the local hypothesis does?</p>",
        "id": 342969912,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247584
    },
    {
        "content": "<p><code>↑↑</code> is nonsense there</p>",
        "id": 342970042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247625
    },
    {
        "content": "<p>Lean has no way of knowing which coercion you meant</p>",
        "id": 342970053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247632
    },
    {
        "content": "<p>Ah, because my local type is actually <code>@Nat.cast Ordinal AddMonoidWithOne.toNatCast ↑1 : Ordinal</code></p>",
        "id": 342970069,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247639
    },
    {
        "content": "<p>What statement are you trying to write? And what is <code>n</code>?</p>",
        "id": 342970146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247691
    },
    {
        "content": "<p>Goal state is <code> ω ^ repr x * ↑↑1 * repr o = ω ^ repr x * repr o</code></p>",
        "id": 342970251,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247727
    },
    {
        "content": "<p>and I want to close the goal with <code>mul_one</code></p>",
        "id": 342970271,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247740
    },
    {
        "content": "<p>Can you turn off coercion printing?</p>",
        "id": 342970394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20!4.232470.20.28SetTheory.2EOrdinal.2ENotation.29/near/342966549\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2989\">!4#2989</a> perhaps?</p>\n</blockquote>\n<p>I'm pretty sure this PR will solve your problem</p>",
        "id": 342970486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679247849
    },
    {
        "content": "<p><code>ω ^ repr x * Nat.cast (PNat.val (OfNat.ofNat 1)) * repr o = ω ^ repr x * repr o</code></p>",
        "id": 342970523,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679247870
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.one_coe#doc\">docs4#PNat.one_coe</a> I think</p>",
        "id": 342970803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679248024
    },
    {
        "content": "<p>Which like I said, is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2989\">!4#2989</a></p>",
        "id": 342970850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679248064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20!4.232470.20.28SetTheory.2EOrdinal.2ENotation.29/near/342970803\">said</a>:</p>\n<blockquote>\n<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.one_coe#doc\">docs4#PNat.one_coe</a> I think</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, how hard would it be to make <code>↑</code> link to <code>PNat.val</code> in that lemma?</p>",
        "id": 342970917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679248089
    },
    {
        "content": "<p>OK, merged and building now...</p>",
        "id": 342970926,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679248096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20!4.232470.20.28SetTheory.2EOrdinal.2ENotation.29/near/342970917\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Status.20of.20!4.232470.20.28SetTheory.2EOrdinal.2ENotation.29/near/342970803\">said</a>:</p>\n<blockquote>\n<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.one_coe#doc\">docs4#PNat.one_coe</a> I think</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>, how hard would it be to make <code>↑</code> link to <code>PNat.val</code> in that lemma?</p>\n</blockquote>\n<p>Hmmm, as I understand it the arrow is a <code>Coe.coe</code> call which has an implicit argument with the<code>Coe</code> instnace? And somewhere burried in that should be the call to PNat.val. So certainly not trivial :(</p>",
        "id": 342971252,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1679248272
    },
    {
        "content": "<p>My understanding was that <code>Coe</code>s got inlined, so the arrow is actually a direct call of <code>PNat.val</code></p>",
        "id": 342971652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679248488
    },
    {
        "content": "<p>Ah indeed it does desugar into PNat.val here I didn't know that cool...and I can directly go to definition on it as well so the InfoTree does seem to have the information even. In that case it should certainly be doable.</p>\n<p>In fact I am rather surprise it doesnt just work <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> out of the box <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 342974796,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1679250330
    }
]