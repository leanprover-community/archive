[
    {
        "content": "<p>A weird interaction between <code>to_additive</code> and <code>noncomputable</code>. The following works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.Basic</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"c1\">-- @[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">μ</span> <span class=\"bp\">↦</span> <span class=\"n\">Measure.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But if you uncomment the <code>to_additive</code>, then you get a complaint </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">MeasureTheory.Measure.map'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>Marking it by hand as <code>noncomputable</code> fixes it, so this is not a blocker at all, but still it doesn't seem right. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , any idea what could be going wrong?</p>",
        "id": 394068118,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696065949
    },
    {
        "content": "<p>I would say this is a core issue. Declarations in <code>noncomputable section</code>s that are not compiled are not currently tagged <code>noncomputable</code><br>\nsee</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"kn\">section</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">t</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">isNoncomputable</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">t</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"c1\">--for comparison</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">isNoncomputable</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">t'</span>\n</code></pre></div>",
        "id": 394094813,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696088668
    },
    {
        "content": "<p>I'll make a PR to change this later today, and see if it is a desired change or not</p>",
        "id": 394094881,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696088740
    },
    {
        "content": "<p>This is now <a href=\"https://github.com/leanprover/lean4/pull/2610\">https://github.com/leanprover/lean4/pull/2610</a></p>",
        "id": 394223123,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696172308
    }
]