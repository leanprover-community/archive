[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/group_theory/specific_groups/quaternion\">Quaternions</a> are expressed in <a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/group_theory/specific_groups/quaternion.lean#L52\">Lean 3</a> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">quaternion_group</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quaternion_group</span>\n<span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quaternion_group</span>\n</code></pre></div>\n<p>In Lean 4 <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/GroupTheory/SpecificGroups/Quaternion.lean\">this gets translated</a> as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">QuaternionGroup</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>Without specifying an argument, the <code>QuaternionGroup</code> references give Infoview error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">got</span>\n  <span class=\"o\">(</span><span class=\"n\">QuaternionGroup</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Adding an <code>n</code> to each reference solves the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">QuaternionGroup</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>Perhaps the mathport script should add type parameters to inductive type references since they will be required.</p>",
        "id": 361647692,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685222794
    },
    {
        "content": "<p>This could probably be automated, but I think that it is not a priority to include this feature, given that</p>\n<ul>\n<li>approximately 3/4 of the porting is done,</li>\n<li>this happens fewer than 100 times (a rough estimate),</li>\n<li>many of these cases have already been ported.</li>\n</ul>",
        "id": 361653685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685226698
    },
    {
        "content": "<p>I believe that the issue is due to the fact that in Lean 3, you could only use as match arguments the ones that happened after the \"colon\", the ones before were \"fixed\" and automatically inserted in the recursive calls.</p>\n<p>In Lean 4, you have the flexibility of modifying the arguments in recursive calls, even if they appear before the \"colon\" and this is why you get the errors you are seeing.</p>",
        "id": 361653909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685226837
    },
    {
        "content": "<p>E.g. in the example above, in Lean 3, <code>→ quaternion_group</code> really means <code>→ quaternion_group n</code> and you cannot change <code>n</code> to something else.  In Lean 4 you can.</p>",
        "id": 361654074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685226937
    },
    {
        "content": "<p>Also, congratulations on finding a file that may not be already PRed/ported!  Hopefully there will not be many issues.</p>\n<p>If you want to contribute to the port, I encourage you to create a WIP PR right away, so that others will know that someone is working on this file.</p>",
        "id": 361654821,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685227408
    },
    {
        "content": "<p>It is the generalised quaternion groups, not the quaternions. It is probably a good beginner file as it is very close to the corresponding file for dihedral groups, which was recently ported, so you can check the solutions there.</p>",
        "id": 361655337,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1685227694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I like to wait on the WIP PR for two reasons:</p>\n<ul>\n<li>I don't have confidence that I will get through the whole file and I don't want to hold it up</li>\n<li>Every file I've discussed so far has been picked up and solved overnight by someone in the room, so I am feeling productive as a cheerleader if nothing else.</li>\n</ul>\n<p>I will  put in a PR for any file I can solve completely that no one else has grabbed in the meantime.  I learn a little bit of Lean 4 with each one, and there are about 700 to go, so there is still plenty to do.</p>",
        "id": 361663826,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685234305
    },
    {
        "content": "<p>Yeah but that's just not how it works:</p>\n<ul>\n<li>You don't need to get through it all. Just tag your PR <code>help-wanted</code> and people will help.</li>\n<li>Probably nobody has read the threads where you were solving problems in porting files, because at no point the process says \"Check that people work on this file on a random Zulip thread\". On the other hand, if you open a porting PR, it's indicated on the port dashboard. So your work so far has been completely uneffective, even from a cheerleading standpoint.</li>\n</ul>\n<p>Please just open a porting PR.</p>",
        "id": 361685415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685253713
    }
]