[
    {
        "content": "<p>I'm just getting into how manifolds are implemented in mathlib with aim of adding a toy example showing that the graph of a continuous function between two topological manifolds is a submanifold of their product. I'm starting with f : R^n → R^k because that seemed easiest to conceptualize (i.e. that for <code>graph f</code> the graph of <code>f : EuclideanSpace ℝ (Fin n) → EuclideanSpace ℝ (Fin k)</code> and <code>Continuous f</code>, we have <code>HasGroupoid (graph f) (contDiffGroupoid 0 (modelWithCornersSelf ℝ (EuclideanSpace ℝ (Fin n))))</code>). It then shouldn't be too much of a stretch to show that this is actually a <code>SmoothManifoldWithCorners</code> in the case that <code>f</code> is C^∞. I imagine that the graph and the global chart should look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">setOf</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.snd</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">projChart</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LocalHomeomorph</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"n\">univ</span>\n  <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">univ</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.1.fst</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">map_source'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n  <span class=\"n\">map_target'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n  <span class=\"n\">left_inv'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">Subtype.forall</span><span class=\"o\">,</span> <span class=\"n\">Subtype.mk.injEq</span><span class=\"o\">,</span>\n    <span class=\"n\">Prod.forall</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">forall_eq</span><span class=\"o\">,</span> <span class=\"n\">eq_self</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">]</span>\n  <span class=\"n\">open_source</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">open_target</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">continuous_toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Continuous.continuousOn</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LocalEquiv.toFun</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_fst</span>\n  <span class=\"n\">continuous_invFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Continuous.continuousOn</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Continuous.subtype_mk</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_prod_mk.mpr</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">continuous_id</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have the sneaking suspicion that I'm not correctly specifying how <code>graph f</code> is inheriting the subspace topology from R^n × R^k, however. Namely, I'm getting a <code>synthInstance</code> error in trying to apply <code>continuous_fst</code> in the proof of <code>continuous_toFun</code>, saying that it's stuck trying to synthesize a <code>TopologicalSpace</code> of some metavariable. Does anyone know what I might be missing here? Thanks!</p>",
        "id": 379320187,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690499464
    },
    {
        "content": "<p>I don't know this part of the library at all but often the way to fix that error on a function <code>foo</code> is to explicitly supply the metavariable using the <code>foo (X := \\R) ...</code> syntax, where <code>X</code> is the name of the variable used by <code>foo</code></p>",
        "id": 379320502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690499627
    },
    {
        "content": "<p>Ah, I think I was actually just using the wrong theorem here. I tried <code>apply Continuous.fst</code> and realized that Lean still wanted me to show that the inclusion from <code>graph f</code> into R^n × R^k was continuous, which I could just do with <code>exact Continuous.subtype_val continuous_id</code>.</p>",
        "id": 379322044,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690500493
    },
    {
        "content": "<p>If you're interested in trying out the manifold part of the library, here's something that is missing that I think shouldn't be too hard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.Complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.ProjectiveSpace.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Manifold</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"ℂⁿ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"ℂℙⁿ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Projectivization</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ℂℙⁿ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Projectivization</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ChartedSpace</span> <span class=\"n\">ℂⁿ</span> <span class=\"n\">ℂℙⁿ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Data</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">ℂⁿ</span><span class=\"o\">)</span> <span class=\"n\">ℂℙⁿ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- Prop</span>\n</code></pre></div>",
        "id": 379584005,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690565317
    },
    {
        "content": "<p>Of course it's true for more general fields and I suppose, infinite dimensions too. I've only written it for <code>ℂ</code> because I've pasted that code in from a snippet I had somewhere.</p>",
        "id": 379584418,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690565405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Sure, I'd love to tackle this next! Actually, my long-term goal is to formalize as much of Jack Lee's Introduction to Smooth Manifolds as I can (and as makes sense within the structure of the existing manifold part of the library), and eventually to make it to Introduction to Riemannian Manifolds as well. I finished the example above (which is Example 1.3 in Smooth Manifolds) and am generalizing it to the graph of a C^k function between two C^k manifolds now. Example 1.4 is spheres (already done by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ), and Example 1.5 is projective spaces (which I'll aim to similarly generalize to nontrivially normed fields).</p>",
        "id": 379794781,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690635701
    },
    {
        "content": "<p>That sounds wonderful. I believe Heather actually has a branch which defines Riemannian manifolds but I think it's mostly proof-of-concept, rather than a proposal for the Mathlib definition. Projective spaces are of course just special cases of Grassmannians but I think the latter can wait.</p>",
        "id": 379795652,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690635889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Topology.20on.20sets.20with.20manifold.20structure/near/379795652\">said</a>:</p>\n<blockquote>\n<p>That sounds wonderful. I believe Heather actually has a branch which defines Riemannian manifolds but I think it's mostly proof-of-concept, rather than a proposal for the Mathlib definition. Projective spaces are of course just special cases of Grassmannians but I think the latter can wait.</p>\n</blockquote>\n<p>Good point. Although, I think we're missing a couple of key results to show this. Actually, maybe I should focus on embedded submanifolds (which would both trivialize the above example and enable formalizing the Grassmannian as an embedded submanifold of C^(n × n)).</p>",
        "id": 379801797,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690637379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"633028\">@Michael Lee</span> How is this coming along? I've also been formalising parts of Lee's Introduction to Smooth Manifolds, specifically the parts on integral curves. At some point we can't avoid referring to submanifolds, e.g. vector fields tangent to a submanifold, Lie subgroups. Should there be a (immersed/embedded) <code>Submanifold</code> structure?</p>",
        "id": 408541755,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1702881735
    }
]