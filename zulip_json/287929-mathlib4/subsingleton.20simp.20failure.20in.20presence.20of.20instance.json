[
    {
        "content": "<p>I am experimenting with definitions in category theory, based on what we have in mathlib. I found that importing <code>Mathlib.CategoryTheory.Category.Preorder</code> broke some of my simple <code>simp</code> proofs. Specifically, it seems the <code>Preorder.subsingleton_hom</code> instance gets in the way. Yet explicit reference to <code>eq_iff_true_of_subsingleton</code> works.</p>\n<p>Here is my repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subsingleton_of_forall_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">iff_of_true</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">iff_of_true</span> <span class=\"n\">h</span> <span class=\"o\">‚ü®‚ü©</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.elim</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Unique</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">default</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">Unique</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Unique</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toInhabited</span> <span class=\"o\">‚Äπ</span><span class=\"n\">Unique</span> <span class=\"n\">Œ±</span><span class=\"o\">‚Ä∫</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_default</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"o\">:=</span>\n  <span class=\"n\">uniq</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subsingleton_of_forall_eq</span> <span class=\"n\">_</span> <span class=\"n\">eq_default</span>\n\n<span class=\"c1\">-- turning this `attribute [simp] ... in` off breaks the first `Initial.Iso`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Unique.bijective</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Unique</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ‚ü∂ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quiver.Hom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CategoryStruct</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ùüô\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryStruct.id</span>  <span class=\"c1\">-- type as \\b1</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ‚â´ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryStruct.comp</span> <span class=\"c1\">-- type as \\gg</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">SmallCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ULift.ext</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.down</span> <span class=\"bp\">=</span> <span class=\"n\">y.down</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congrArg</span> <span class=\"n\">up</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Iso</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:</span> <span class=\"n\">inv</span> <span class=\"bp\">‚â´</span> <span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ‚âÖ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iso</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Initial</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryStruct</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">‚àÄ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Initial.Iso</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryStruct</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hX</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- uses eq_iff_true_of_subsingleton</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hY</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.synthInstance] ‚úÖ Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">  [] new goal Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [instances] #[@Unique.instSubsingleton, instSubsingleton]</span>\n<span class=\"cm\">  [] ‚ùå apply instSubsingleton to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚ùå Subsingleton (X ‚ü∂ X) ‚âü Subsingleton ?m.31237</span>\n<span class=\"cm\">  [] ‚úÖ apply @Unique.instSubsingleton to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚úÖ Subsingleton (X ‚ü∂ X) ‚âü Subsingleton (X ‚ü∂ X)</span>\n<span class=\"cm\">    [] new goal Unique (X ‚ü∂ X) ‚ñ∂</span>\n<span class=\"cm\">  [] ‚úÖ apply this to Unique (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚úÖ Unique (X ‚ü∂ X) ‚âü Unique (X ‚ü∂ X)</span>\n<span class=\"cm\">  [resume] propagating Unique (X ‚ü∂ X) to subgoal Unique (X ‚ü∂ X) of Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [] size: 1</span>\n<span class=\"cm\">  [] result Unique.instSubsingleton</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Preorder</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Preorder.smallCategory</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">ULift</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">‚â§</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">Preorder.le_refl</span> <span class=\"n\">X</span><span class=\"o\">‚ü©‚ü©</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">Preorder.le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.down.down</span> <span class=\"n\">g.down.down</span><span class=\"o\">‚ü©‚ü©</span>\n\n<span class=\"c1\">-- porting note: added to ease the port of `CategoryTheory.Subobject.Basic`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Preorder.subsingleton_hom</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ULift.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">)‚ü©</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Preorder</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Initial.Iso'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryStruct</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hX</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- now it breaks</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hY</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- now it breaks</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.synthInstance] üí• Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">  [] new goal Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [instances] #[@Unique.instSubsingleton, instSubsingleton, @Preorder.subsingleton_hom]</span>\n<span class=\"cm\">  [] üí• apply @Preorder.subsingleton_hom to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] üí• Subsingleton (X ‚ü∂ X) ‚âü Subsingleton (?m.31875 ‚ü∂ ?m.31876)</span>\n\n<span class=\"cm\">[Meta.synthInstance] üí• Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">  [] new goal Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [instances] #[@Unique.instSubsingleton, instSubsingleton, @Preorder.subsingleton_hom]</span>\n<span class=\"cm\">  [] üí• apply @Preorder.subsingleton_hom to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] üí• Subsingleton (X ‚ü∂ X) ‚âü Subsingleton (?m.31905 ‚ü∂ ?m.31906)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Initial.Iso''</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CategoryStruct</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Initial</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hX</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hY</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">trivial</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.synthInstance] üí• Subsingleton ?m.32133 ‚ñº</span>\n<span class=\"cm\">  [] new goal Subsingleton ?m.32133 ‚ñº</span>\n<span class=\"cm\">    [instances] #[@Unique.instSubsingleton, instSubsingleton, @instSubsingletonForAll, @Preorder.subsingleton_hom, instSubsingletonDecidable, @instSubsingletonSquash, @instSubsingletonPLift, instSubsingletonPUnit, @instSubsingletonStateM]</span>\n<span class=\"cm\">  [] üí• apply @instSubsingletonStateM to Subsingleton ?m.32133 ‚ñº</span>\n<span class=\"cm\">    [tryResolve] üí• Subsingleton ?m.32133 ‚âü Subsingleton (StateM ?m.32146 ?m.32147)</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚úÖ Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">  [] new goal Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [instances] #[@Unique.instSubsingleton, instSubsingleton, @Preorder.subsingleton_hom]</span>\n<span class=\"cm\">  [] ‚ùå apply @Preorder.subsingleton_hom to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚ùå Subsingleton (X ‚ü∂ X) ‚âü Subsingleton (?m.32163 ‚ü∂ ?m.32164)</span>\n<span class=\"cm\">  [] ‚ùå apply instSubsingleton to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚ùå Subsingleton (X ‚ü∂ X) ‚âü Subsingleton ?m.32181</span>\n<span class=\"cm\">  [] ‚úÖ apply @Unique.instSubsingleton to Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚úÖ Subsingleton (X ‚ü∂ X) ‚âü Subsingleton (X ‚ü∂ X)</span>\n<span class=\"cm\">    [] new goal Unique (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">      [instances] #[this]</span>\n<span class=\"cm\">  [] ‚úÖ apply this to Unique (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [tryResolve] ‚úÖ Unique (X ‚ü∂ X) ‚âü Unique (X ‚ü∂ X)</span>\n<span class=\"cm\">  [resume] propagating Unique (X ‚ü∂ X) to subgoal Unique (X ‚ü∂ X) of Subsingleton (X ‚ü∂ X) ‚ñº</span>\n<span class=\"cm\">    [] size: 1</span>\n<span class=\"cm\">  [] result Unique.instSubsingleton</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 360686231,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684903583
    },
    {
        "content": "<p>Ah, this was explored in <a href=\"#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E</a></p>",
        "id": 360686621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684903804
    },
    {
        "content": "<p>So setting explicit universes on <code>Category.{v, u}</code> makes <code>simp</code> work again.</p>",
        "id": 360686666,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684903828
    },
    {
        "content": "<p>Or <code>[CategoryStruct.{v} C]</code> (you only need to give v, that's the one it's not synthesizing). Without it and with universes on you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                <span class=\"o\">[]</span> <span class=\"bp\">üí•</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.31729</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"bp\">=?=</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">C</span> <span class=\"bp\">=?=</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>and for some reason it won't solve that universe problem.</p>",
        "id": 360688587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684905001
    },
    {
        "content": "<p>The other solution is to rely on <code>Subsingleton.elim</code> instead, which is what <code>aesop_cat</code> now does.</p>",
        "id": 360864586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684952321
    },
    {
        "content": "<p>How would/does <code>Subsingleton.elim</code> work still, if one hits a failure to synthesize a Subsingleton here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Unique.instSubsingleton</span><span class=\"o\">,</span> <span class=\"n\">instSubsingleton</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.subsingleton_hom</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">üí•</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.subsingleton_hom</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.31875</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">?</span><span class=\"n\">m.31876</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Unique.instSubsingleton</span><span class=\"o\">,</span> <span class=\"n\">instSubsingleton</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.subsingleton_hom</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">üí•</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.subsingleton_hom</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.31905</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">?</span><span class=\"n\">m.31906</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360869509,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684953199
    },
    {
        "content": "<p>There are apparently different behaviours here inside <code>simp</code> vs just with <code>apply</code> (presumably also <code>exact</code>, etc).</p>",
        "id": 360922256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684977701
    }
]