[
    {
        "content": "<p>I'm finding <code>linarith</code> to be somewhat unpredictable.  Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h3</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h3</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>In the first example, <code>linarith</code> works, and in the second it doesn't.  Why?</p>\n<p>(I know these examples are somewhat convoluted, but it took me a while to find a MWE to illustrate the inconsistency I've been seeing.)</p>",
        "id": 326705462,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1675898984
    },
    {
        "content": "<p>There was some discussion at the porting meeting last week of a not-easy-to-fix bug in linarith related to when it throws away certain hypotheses. A quick fix to the bug would make linarith take a huge performance hit, but I don't think anyone who knows enough about the algorithm has had the time to sit down and debug it. I'm not sure if that's what is going on here or not though.</p>",
        "id": 326707782,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675900272
    },
    {
        "content": "<p>Also, <code>linarith</code> doesn't yet deal with fractions -- it needs the same second pass that <code>norm_num</code>, <code>ring</code> and <code>positivity</code> have had (thanks <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>!).</p>",
        "id": 326708596,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675900764
    },
    {
        "content": "<p>So this kind of Lean 3 linarith capability isn't available yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 326708753,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675900845
    },
    {
        "content": "<p>However, I think this example is probably none of those things, but instead the kind of bug <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has been fixing in other tactics, about updates to the goal state not being handled correctly by the tactic.</p>",
        "id": 326709628,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675901367
    },
    {
        "content": "<p>PSA: Please don't use <code>import Mathlib</code> in MWEs</p>",
        "id": 326709742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675901432
    },
    {
        "content": "<p>Looking at the trace using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.linarith</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.linarith.detail</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>the issue seems to be that in the second one, the \"assumed-for-the-sake-of-contradiction\" hypothesis isn't picked up by linarith:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[linarith] Preprocessing: split conjunctions\n\n[linarith] [ℕ, n ≥ 1, ¬n ≥ 2, 1 &lt; n]\n\n[linarith] Preprocessing: filter terms that are not proofs of comparisons\n\n[linarith] [n ≥ 1, 1 &lt; n]\n</code></pre></div>",
        "id": 326709976,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675901584
    },
    {
        "content": "<p>Whereas in the first one it is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[linarith] Preprocessing: split conjunctions\n\n[linarith] [ℕ, n ≥ 1, ¬n ≥ 2, 1 &lt; n]\n\n[linarith] Preprocessing: filter terms that are not proofs of comparisons\n\n[linarith] [n ≥ 1, ¬n ≥ 2, 1 &lt; n]\n</code></pre></div>",
        "id": 326710008,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675901617
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2173\">!4#2173</a></p>",
        "id": 326711370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675902502
    },
    {
        "content": "<p>I think I figured out what was happening in my examples.  In the first example, when <code>linarith</code> is called,  <code>h3</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Not</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">GE.ge</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span>  <span class=\"n\">etc.</span>\n</code></pre></div>\n<p>But in the second one, it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Not</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">mdata</span> <span class=\"o\">[(</span><span class=\"n\">noImplicitLambda</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">GE.ge</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"n\">etc.</span>\n</code></pre></div>\n<p><code>linarith</code> doesn't look past the <code>mdata</code>, so it doesn't see that it is a negated <code>≥</code> statement.</p>\n<p>The <code>have h4</code> tactic adds the <code>mdata</code> to the goal (why?), and then <code>by_contra</code> leaves it there and adds a <code>Not</code>.</p>\n<p>I wonder if this is a common pitfall in tactic writing--like forgetting to call <code>withMainContext</code>.  I have certainly made both mistakes myself, resulting in tactics that sometimes work and sometimes don't.</p>",
        "id": 326809378,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1675947882
    },
    {
        "content": "<p>a previous example of this coming up: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1930\">!4#1930</a></p>",
        "id": 326809871,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675948022
    },
    {
        "content": "<p>and another:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1394/commits/52866b88dcd432ab2b1f3f9459d2788d3ea33dd6\">https://github.com/leanprover-community/mathlib4/pull/1394/commits/52866b88dcd432ab2b1f3f9459d2788d3ea33dd6</a></p>",
        "id": 326839257,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675955197
    },
    {
        "content": "<p>Are there “general rules” for when you need <code>whnfR</code> and when you don’t? It seems like you need it whenever you match on the actual form of an expression to either guard or extract data, at least.</p>\n<p>Are there other cases? Do you e.g. need it after constructing expressions which you might assign metavariables to?</p>",
        "id": 326923855,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675979744
    },
    {
        "content": "<p>And is there a general heuristic for “whose” responsibility it is to call whnfR: the thing that makes the expression, or the thing that eats it? Could we avoid some headaches by putting it in things like e.g. <code>isEq</code>, or is it expensive to perform/check if already performed?</p>",
        "id": 326923861,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675979750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith/near/326923861\">said</a>:</p>\n<blockquote>\n<p>And is there a general heuristic for “whose” responsibility it is to call whnfR: the thing that makes the expression, or the thing that eats it? </p>\n</blockquote>\n<p>The thing that matches the expression is responsible for doing whatever reduction is necessary to recognize whatever is being identified</p>",
        "id": 326971904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676009325
    },
    {
        "content": "<p>There are a few different issues here:</p>\n<ul>\n<li>When you match on an expression, you should ask yourself whether to match structurally  or up to computation.</li>\n<li>If structurally, you should ask yourself whether you want to ignore <code>mdata</code>. It's been <a href=\"https://github.com/leanprover/lean4/issues/2026\">suggested before</a> that matching functions should ignore <code>mdata</code> by default, but currently this needs to be done explicitly.</li>\n<li>If up to computation, you should ask yourself which transparency is appropriate. You also need to make sure that you call the appropriate <code>whnf</code> variant multiple times if you match more than one level deep.</li>\n</ul>\n<p>It's unfortunate that this is so complex (and some of the APIs could be improved), but the issue is partly inherent to the system: dependent type theory blesses and burdens us with pervasive computation.</p>",
        "id": 327016105,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1676025873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith/near/326708753\">said</a>:</p>\n<blockquote>\n<p>So this kind of Lean 3 linarith capability isn't available yet:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It seems that linarith is still unable to handle fractions, if it’s a porting issue, could someone point me somewhere? I am interested in implementing it</p>",
        "id": 362142190,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1685443584
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3801\">#3801</a> should have fixed this, the following now works in mathlib4 for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>do you have a failing example?</p>",
        "id": 362160984,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685448112
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3801\">!4#3801</a></p>",
        "id": 362167112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685449635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith/near/362160984\">said</a>:</p>\n<blockquote>\n<p>do you have a failing example?</p>\n</blockquote>\n<p>I was trying to do lean tutorials (00_first_proofs.lean) and this failed for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n    <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>  <span class=\"c1\">-- this failed</span>\n</code></pre></div>",
        "id": 362176413,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1685451720
    },
    {
        "content": "<p>oh wait, strangely the example you provided doesn't work for me either. might be my version <code>version 4.0.0-nightly-2023-04-20, commit f9da1d8b55ca</code></p>",
        "id": 362176977,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1685451840
    },
    {
        "content": "<p>Yeah that mathlib PR was only merged  a couple of weeks back, so you probably need to update mathlib</p>",
        "id": 362177472,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685451943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith/near/362177472\">said</a>:</p>\n<blockquote>\n<p>Yeah that mathlib PR was only merged  a couple of weeks back, so you probably need to update mathlib</p>\n</blockquote>\n<p>You were right! Thanks alot it works now!!</p>",
        "id": 362258509,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1685468858
    }
]