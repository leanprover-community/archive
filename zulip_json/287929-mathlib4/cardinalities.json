[
    {
        "content": "<p>There are various ways to access the cardinality of a (finite) set, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard#doc\">docs#Set.ncard</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.encard#doc\">docs#Set.encard</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card#doc\">docs#Finset.card</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.card#doc\">docs#Fintype.card</a>, or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat.card#doc\">docs#PartENat.card</a>…<br>\nFor basic combinatorial manipulations, which one is recommended?</p>\n<p>(All APIs are not complete, for example, there is no <code>Nat.card_union_add_card_inter</code> corresponding to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard_union_add_ncard_inter#doc\">docs#Set.ncard_union_add_ncard_inter</a>)</p>",
        "id": 386688315,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692736381
    },
    {
        "content": "<p>I would say it depends on the situation. If your sets are <em>structurally</em> finite (i.e., they are <code>Finset</code>s or lie in a <code>Fintype</code>), then you probably want <code>Finset.card</code> (perhaps accessed with <code>Set.toFinset</code> in the case of a fintype). However, if they are just <em>provably</em> finite, then likely <code>Set.ncard</code> is the way to go. If they are finite in some situations, but not others, then you'll want <code>Set.encard</code>. Note that <code>Nat.card</code> and <code>Fintype.card</code> should be used for <em>types</em> not <em>sets</em> (in general).</p>",
        "id": 386691670,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692738071
    },
    {
        "content": "<p>I would avoid using <code>PartENat.card</code> for now. There was recent talk of removing <code>PartENat</code> and developing an <code>ENat.card</code> API.</p>",
        "id": 386691765,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692738117
    },
    {
        "content": "<p>Thanks. (I had not realized that <code>Nat.card</code> should only be used for types, that should explain some of my troubles…)</p>\n<p>Additional question : should we use <code>[Finite]</code> whenever we don't make use of an explicit enumeration given by <code>[Fintype]</code>?</p>",
        "id": 386701061,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692741233
    },
    {
        "content": "<p>Yes. In fact, as long as the <em>statement</em> doesn't need <code>Fintype</code>, you should use <code>Finite</code>, even if in the proof you need the <code>Fintype</code>. You can get a <code>Fintype</code> instance from a <code>Finite</code> instance locally within the proof using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.ofFinite#doc\">docs#Fintype.ofFinite</a></p>",
        "id": 386703466,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692742180
    },
    {
        "content": "<p>You can use <code>Nat.card</code> for sets, since sets are automatically coerced into types, but this is exactly how <code>Set.ncard</code> is defined, so you should just use <code>Set.ncard</code> since it gives you access to more relevant API</p>",
        "id": 386722928,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1692752480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386691670\">said</a>:</p>\n<blockquote>\n<p>Note that <code>Nat.card</code> and <code>Fintype.card</code> should be used for <em>types</em> not <em>sets</em> (in general).</p>\n</blockquote>\n<p>There's a good amount of API for <code>Fintype.card</code> of sets, probably because it's more convenient than <code>s.to_finset.card</code>. I think you're right in principle though, since I remember having troubles with simp lemmas turning <code>Fintype.card</code> expressions for sets into inconvenient forms (but perhaps it doesn't affect Lean 4 now that coercions work differently... Still, it's nice having <code>Set.ncard</code> to keep things in <code>Set</code> language.)</p>",
        "id": 386726013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692753731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386701061\">said</a>:</p>\n<blockquote>\n<p>I had not realized that <code>Nat.card</code> should only be used for types</p>\n</blockquote>\n<p>I don't actually think that's true? At any rate, the best choice is <code>Finset.card</code> in most scenarii.</p>",
        "id": 386921766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692811830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386722928\">said</a>:</p>\n<blockquote>\n<p>You can use <code>Nat.card</code> for sets, since sets are automatically coerced into types, but this is exactly how <code>Set.ncard</code> is defined</p>\n</blockquote>\n<p>Nope?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Set.ncard</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">ENat.toNat</span> <span class=\"o\">(</span><span class=\"n\">Set.encard</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Set.encard</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">PartENat.withTopEquiv</span> <span class=\"o\">(</span><span class=\"n\">PartENat.card</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">PartENat.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">Cardinal.toPartENat</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">Nat.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so Set.ncard goes from Cardinal -&gt; PartENat -&gt; ENat -&gt; Nat while Nat.card does it in one step. (This might have recently changed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a>. I didn't know the first three defs exist before this thread!)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386691765\">said</a>:</p>\n<blockquote>\n<p>I would avoid using <code>PartENat.card</code> for now. There was recent talk of removing <code>PartENat</code> and developing an <code>ENat.card</code> API.</p>\n</blockquote>\n<p>How would the hypothetic <code>ENat.card</code> API be different from the <code>Set.encard</code> API?</p>",
        "id": 386951474,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692825310
    },
    {
        "content": "<p>One would operate on types, the other sets</p>",
        "id": 386957608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692828760
    },
    {
        "content": "<p>While <code>Finset.card</code> necessarily take a (Fin)set since its computability doesn't work for a general type, I think for the other cardinalities that are defined in terms of <a href=\"http://Cardinal.mk\">Cardinal.mk</a> and noncomputable anyways, we don't lose anything by restricting the definition to types and centering the API around types, and using coercion when applying it to sets. It's actually less convenient the other way, as we'd need to use type annotations like <code>⊤ : Set α</code> when applying it to a type <code>α</code>. I think this is also the design we adopted for properties of Submodules, etc.</p>",
        "id": 386959737,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692830269
    },
    {
        "content": "<p>Junyan, the problem is you want statements about the cardinality of a union of two sets and the like. And then it gets a bit messy if you don't have a set version. Ask <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span>.</p>",
        "id": 386963013,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692832666
    },
    {
        "content": "<p>Also: when acting (probably carelessly) with types, I easily ended ups with finiteness instances that Lean had created but couldn't manage to identify, so that apparently obvious equalities of the form <code>Nat.card ↑s = Nat.card ↑s</code> wre not proved by <code>rfl</code>…</p>",
        "id": 386966382,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692835230
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> doesn't take any finite instances. Do you mean Fintype.card?</p>",
        "id": 386976671,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692844023
    },
    {
        "content": "<blockquote>\n<p>the problem is you want statements about the cardinality of a union of two sets and the like</p>\n</blockquote>\n<p>We'd have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_union_le#doc\">docs#Cardinal.mk_union_le</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_union_of_disjoint#doc\">docs#Cardinal.mk_union_of_disjoint</a> but the main definition still applies to a type.</p>",
        "id": 386976771,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692844094
    },
    {
        "content": "<p>Probably he meant that he needed finiteness assumptions for <code>Nat.card</code> to avoid the junk value.</p>\n<p>Yes, I realize you can do it that way, but I think ultimately it's going to be more painful than just having a dedicated <code>def</code> for sets. I could be wrong though.</p>",
        "id": 387003570,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692857057
    },
    {
        "content": "<p>Having rewritten many lemmas using <code>Set.ncard</code> systematically, I can confirm that the proofs are simpler.</p>",
        "id": 387009089,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692860695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386959737\">said</a>:</p>\n<blockquote>\n<p>While <code>Finset.card</code> necessarily take a (Fin)set since its computability doesn't work for a general type, I think for the other cardinalities that are defined in terms of <a href=\"http://Cardinal.mk\">Cardinal.mk</a> and noncomputable anyways, we don't lose anything by restricting the definition to types and centering the API around types, and using coercion when applying it to sets. It's actually less convenient the other way, as we'd need to use type annotations like <code>⊤ : Set α</code> when applying it to a type <code>α</code>. I think this is also the design we adopted for properties of Submodules, etc.</p>\n</blockquote>\n<p>One thing that is lost is dot notation for sets. And having coercion symbols everywhere.  What kind of lemmas about <code>Nat.card</code> for types (that aren't more naturally phrased as statements about sets) do you have in mind?</p>",
        "id": 387065790,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1692881246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/cardinalities/near/386951474\">said</a>:</p>\n<blockquote>\n<p>so Set.ncard goes from Cardinal -&gt; PartENat -&gt; ENat -&gt; Nat while Nat.card does it in one step. (This might have recently changed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a>. I didn't know the first three defs exist before this thread!)</p>\n</blockquote>\n<p>Originally <code>Set.ncard</code> was defined in terms of <code>Nat.card</code>. The change was made to defining it via <code>Set.encard</code> at <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> 's suggestion. But it's still propositionally equal; see <code>Set.Nat.card_coe_set_eq</code>. I don't have a strong view on which defeq is preferable.</p>",
        "id": 387066933,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1692881576
    }
]