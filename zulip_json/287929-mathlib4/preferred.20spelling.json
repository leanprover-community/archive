[
    {
        "content": "<p>(deleted)</p>",
        "id": 399853784,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698899791
    },
    {
        "content": "<p>I have some questions regarding the preferred spelling of various notions when working on some algebraic NT</p>\n<ol>\n<li>Should primes in a dedekind domain be <code>Prime p</code> or <code>[p.IsPrime] (_ : p ≠ ⊥)</code> or <code>[p.IsMaximal]</code>.</li>\n<li>Should the multiplicity of some ideal <code>p</code> in <code>I</code> be <code>multiplicity p I</code> or <code>(normalizedFactors I).count p</code> or <code>(factors I).count p</code>?</li>\n<li>Should an ring extension be <code>(_ : Function.injective (algebraMap R S))</code> or <code>[NoZeroSMulDivisors R S]</code></li>\n<li>What is the preferred way do a standard AKLB setup? I'm currently using</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsDedekindDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">S</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsIntegralClosure</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But the first lines of almost all my proofs are setting up various <code>IsNoetherian R S</code>, <code>NoZeroSMulDivisors R S</code> <code>IsDedekindDomain S</code> <code>IsFractionRing S L</code> <code>Algebra.IsIntegral R S</code> instances.</p>\n<ol start=\"5\">\n<li>Why is <code>Algebra.IsIntegral R S</code> not a class?</li>\n</ol>",
        "id": 399854494,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698900304
    },
    {
        "content": "<p>I don't think we have any consistent answers to this, so here are my weak preferences unhindered by the actual state of the library:</p>\n<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.IsMaximal#doc\">docs#Ideal.IsMaximal</a>, since it works with the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.Quotient.field#doc\">docs#Ideal.Quotient.field</a> instance.</li>\n<li>None of these options are satisfactory. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> seems like the obvious choice but since it takes values in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a> it's more annoying to work with than <code>factors.count</code>. I generally find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniqueFactorizationMonoid.normalizedFactors#doc\">docs#UniqueFactorizationMonoid.normalizedFactors</a> to be more convenient to work with.</li>\n<li>Even better would be a class that states <code>Function.injective (algebraMap R S)</code>. But in this case that's equivalent to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NoZeroSMulDivisors#doc\">docs#NoZeroSMulDivisors</a>, so I use the latter.</li>\n<li>During development I generally make all of these hypotheses an extra <code>variable</code>, because it often turns out we can drop quite a few of the hypotheses. Only in the final theorem statement do I set up those instances from the AKLB setup.</li>\n<li>It isn't? I recall being surprised by the same thing a couple of years ago and refactoring it into a class.</li>\n</ol>",
        "id": 399886099,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698915966
    },
    {
        "content": "<p>Thanks for the reply!</p>",
        "id": 399891146,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698917717
    },
    {
        "content": "<p>I remembered after asking the question that fields are dedekind domains in mathlib so <code>p.IsMaximal</code> isn't really equivalent to the other two...</p>",
        "id": 399891513,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698917846
    },
    {
        "content": "<p>Ah right, that explains why we have a lot of <code>[I.IsPrime] (_ : I ≠ ⊥)</code> too.</p>",
        "id": 399891883,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698917974
    },
    {
        "content": "<p>By the way, do you have a working definition of unramified extensions (of global fields) living somewhere? I heard on zulip that you had a chunk of global theory done.</p>",
        "id": 399892124,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698918048
    },
    {
        "content": "<p>I don't have a secret project to reveal, unfortunately! :) Since the port all my energy has gone into my thesis and tactics, and everything before that should already be in Mathlib.</p>",
        "id": 399905437,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698922096
    },
    {
        "content": "<p>With <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> we have something about unramified extensions of local fields, but it is not in mathlib yet.</p>",
        "id": 399907539,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698922746
    }
]