[
    {
        "content": "<p>Just for the record, I had a very hard time with <code>FieldTheory.Finite.GaloisField</code> until I realized that changing: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">GaloisField</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GaloisField</span> <span class=\"o\">:=</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>solved most of the difficulties.</p>\n<p>I am not sure I understand why it works better that way...</p>",
        "id": 367077110,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686986403
    },
    {
        "content": "<p>Aren't they the same? Can you give an example where there's a difference in behaviour?</p>",
        "id": 367086725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686989015
    },
    {
        "content": "<p>Do you mean the first version was timing out while the second wasn't? <span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span></p>",
        "id": 367087894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686989302
    },
    {
        "content": "<p>Yes, exactly. I am on the phone at the moment but I’ll post an example when I get back home</p>",
        "id": 367089679,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686989738
    },
    {
        "content": "<p>This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GaloisField</span> <span class=\"o\">:=</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GaloisField</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">SplittingField.instFieldSplittingField</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃+*</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GaloisField</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">RingEquiv.refl</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 367109821,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686994595
    },
    {
        "content": "<p>But this one times out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GaloisField</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GaloisField</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">SplittingField.instFieldSplittingField</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"n\">GaloisField</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">≃+*</span> <span class=\"n\">SplittingField</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">GaloisField</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">RingEquiv.refl</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 367109980,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686994635
    },
    {
        "content": "<p>It doesn't use the same instance path in the two definitions: one uses <code>ZMod.commRing p</code>, the other one <code>@ZMod.instFieldZMod p inst</code>. I have no idea why declaring variables differently would make a difference on instance resolution...</p>",
        "id": 367139159,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687000729
    },
    {
        "content": "<p>See the discussion <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234891.20.20FieldTheory.2ESplittingField/near/366408815\">here</a></p>",
        "id": 367140655,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687001039
    },
    {
        "content": "<p>Let me try do make <code>zmod.algebra</code> a def.</p>",
        "id": 367140834,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687001072
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19197\">#19197</a></p>",
        "id": 367142052,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687001326
    },
    {
        "content": "<p>I should have guessed since the instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.instAlgebraZModToCommSemiringCommRingToSemiring#doc\">docs4#ZMod.instAlgebraZModToCommSemiringCommRingToSemiring</a> (the equivalent of <code>zmod.algebra</code> in Mathlib4) is causing so much trouble later on in this file that I had to disable it. Making it a <code>def</code> is probably a good idea</p>",
        "id": 367155119,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687004361
    },
    {
        "content": "<p>Quite surprisingly it is used almost only in proofs, meaning that so far only one statement broke.</p>",
        "id": 367155237,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687004397
    },
    {
        "content": "<p>It builds. Only 7 files needed to be fixed, and only one statement.</p>",
        "id": 367157316,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687004784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Does this<br>\n<a href=\"/user_uploads/3121/pP93axRGX54kUkH784Nr6dey/zmodinst.png\">zmodinst.png</a><br>\nactually matter? Why is <code>Field.mk</code> dismantling and then rebuilding the <code>toCommRing</code>field here? I think when typeclass inference finds one of these instances with a completely dismantled <code>toCommRing</code> and another one without a dismantled <code>toCommRing</code> it can take a second or more to check that these instances are defeq.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pP93axRGX54kUkH784Nr6dey/zmodinst.png\" title=\"zmodinst.png\"><img src=\"/user_uploads/3121/pP93axRGX54kUkH784Nr6dey/zmodinst.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Algebra</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">ZMod.instFieldZMod</span>\n</code></pre></div>",
        "id": 367236861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687028958
    },
    {
        "content": "<p>Can you screenshot again with pp.proofs false?</p>",
        "id": 367241506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687031051
    },
    {
        "content": "<p>But either way, the answer is \"<code>with</code> notation almost always does the wrong thing WRT new-style structures\"</p>",
        "id": 367241616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687031115
    },
    {
        "content": "<p>This does sound like another point for flat structures, which ensures that both sides are always the dismantled version and there's no need to spend lots of extra time applying eta</p>",
        "id": 367241901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687031237
    }
]