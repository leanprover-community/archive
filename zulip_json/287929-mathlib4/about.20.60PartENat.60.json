[
    {
        "content": "<p>In reviewing <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a> (cc: <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span>), I came across the existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat#doc\">docs#PartENat</a> for the first time, which seems to be a computable version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENat#doc\">docs#ENat</a>, but otherwise it's the same. Is there anywhere this computability is actually being used? If not, how do we feel about disentangling usage of <code>PartENat</code> in favor of <code>ENat</code>? I think in at least one place, namely, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.toPartENat#doc\">docs#Cardinal.toPartENat</a> (and hence the rest of the cardinality library) there is no reason to use a computable version (<span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span>). I guess using <code>PartENat</code> makes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=multiplicity#doc\">docs#multiplicity</a> computable, but is this something we care about? <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> since I think you created <code>PartENat</code>.</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a>, it seems that it's only being used because we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PartENat.card#doc\">docs#PartENat.card</a>, but no <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENat.card#doc\">docs#ENat.card</a> <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span>.</p>",
        "id": 376143267,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689622758
    },
    {
        "content": "<p>I created <code>PartENat</code>. I would have used <code>option</code>, but Mario told me to use <code>roption</code>, which I think is called <code>Part</code> now. I'm not going to strongly defend <code>PartENat</code>.</p>",
        "id": 376143739,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1689622902
    },
    {
        "content": "<p>PartENat is not any more computable than ENat, it's differently computable.  With ENat equality is computable while with PartENat finding the smallest number satisfying a decidable predicate is computable.  Each of the operations is noncomputable in the other formalism.</p>",
        "id": 376144741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689623166
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Do I remember correctly that you were refactoring things involving <code>PartENat</code>/<code>ENat</code> in mathlib3? I thought I remembered it being <code>enat.card</code> at some point.)</p>",
        "id": 376145320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689623322
    },
    {
        "content": "<p>I started this refactor, then postponed it till after the port. Now I'll need to see what's already done in Mathlib 4.</p>",
        "id": 376146973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689623809
    },
    {
        "content": "<p>That's indeed the reason <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a> uses it - the interactions with it are minimal, but things would have been slightly smoother if there existed <code>ENat.card</code> and a few very basic API lemmas for is (maybe half a dozen). It would be trivial to modify that PR if <code>ENat.card</code> were introduced, or to do so in the future if/when that happens.</p>",
        "id": 376156123,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689625954
    },
    {
        "content": "<p>And yes, count me as being in favour of the disentanglement (partly just because <code>ENat</code> has the nice notation).</p>",
        "id": 376156409,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689626016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> you may be interested in this conversation</p>",
        "id": 376159018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689626511
    },
    {
        "content": "<p>I would vote for keeping only <code>ENat</code> as well. In my experience, it is nicer to work with if you also want to consider <code>with_top Z</code> and the natural map to it.</p>",
        "id": 376165274,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1689628679
    },
    {
        "content": "<p>I will try to recover my old lean3 branch with <code>ENat.card</code> and port it to lean4.</p>",
        "id": 376168064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689629736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> if it ends up being a lot of work and not worth trying to salvage, let me know and I can just do it in Lean 4 directly.</p>",
        "id": 376168251,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689629794
    },
    {
        "content": "<p>I have some ideas about how it should be done, so I would prefer to do it myself.</p>",
        "id": 376168344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689629833
    },
    {
        "content": "<p>Any update on this, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ? To throw my two very minor cents in, it'd be nice to have the <code>∞</code> symbol in place of <code>⊤ </code>, like we do for the reals.</p>",
        "id": 406384378,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701895454
    },
    {
        "content": "<p>Maybe we can accomplish that with a scoped notation or something?</p>",
        "id": 406384889,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701895601
    },
    {
        "content": "<p>I'm sorry for another delay. If I don't do it in a week, then I officially release the hold.</p>",
        "id": 406384918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701895610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/about.20.60PartENat.60/near/406384889\">said</a>:</p>\n<blockquote>\n<p>Maybe we can accomplish that with a scoped notation or something?</p>\n</blockquote>\n<p>That should work. If you use <code>notation3</code>, you can also get it to pretty print. Here's a quick test with <code>ENat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"∞\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">ENat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∞</span> <span class=\"c1\">-- ∞</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"c1\">-- ⊤</span>\n</code></pre></div>",
        "id": 406633630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701989324
    },
    {
        "content": "<p>Will it work with <code>open scoped ENNReal</code>?</p>",
        "id": 406647832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701996635
    }
]