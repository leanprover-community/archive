[
    {
        "content": "<p>I am hitting several errors (first one happens on line 36 after changing this line to use the Lean 4 <code>#align</code> name - <code>Finset.mem_bunionᵢ</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidableEq</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>This indicates that the error is due to an overloaded operation that has not been implemented, and it describes the type class that must be implemented.   However, this seems odd from my understanding as this instance implementation should already be present as it is relating to code that has already been ported to mathlib4?  Am I thinking about this correctly?  Any suggestions?</p>",
        "id": 344603568,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679813130
    },
    {
        "content": "<p>I see <code>classical</code> is used in line 32, and the mathlib 3 version is similar.<br>\nI think mathlib 3's <code>classical</code> had a bug where <code>classical</code> in one tactic block could affect later tactic blocks as well. (Does anyone know if it is still the case?)<br>\nMaybe try adding a line <code>classical</code> between lines 35 and 36?</p>",
        "id": 344606419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679815131
    },
    {
        "content": "<p>That fixed it, thanks!</p>",
        "id": 344609056,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679816742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> was curious if you could take a quick look at the top error for what is currently pushed to <a href=\"https://github.com/leanprover-community/mathlib4/pull/3106\">!4#3106</a> as I think you wrote this earlier this year so you would most likely know what to do? Any other suggestions  I am all ears as I continue learn.  Thanks.</p>",
        "id": 344725017,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679872137
    },
    {
        "content": "<blockquote>\n<p>as I think you wrote this earlier this year </p>\n</blockquote>\n<p>I think it was less than a week ago!</p>",
        "id": 344725217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679872302
    },
    {
        "content": "<p>Looking at the PR, I think the difficulty is that <code>∃ m' ∈ s, p m'</code> means <code>∃ m' (m' ∈ s), p m</code> in Lean 3, and <code>∃ m', m' ∈ s \\and p m'</code> in Lean 4.<br>\n Perhaps someone else can advise on whether you're expected to rewrite the proofs, or just use the explicit spelling <code>∃ m' (_ : m' ∈ s), p m</code> which means the same as the Lean 3 code</p>",
        "id": 344725872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679872768
    },
    {
        "content": "<p>Either way, I fixed the build</p>",
        "id": 344726607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679873375
    },
    {
        "content": "<p>It would be good to understand the porting notes before merging; this file is super-low priority, so we may as well use it to work out what's going on</p>",
        "id": 344727194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679873986
    },
    {
        "content": "<p>Why has <code>bUnion</code> turned into <code>bunionᵢ</code>, btw? The <code>set</code> incentive doesn't apply here.</p>",
        "id": 344727300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679874096
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs4#Finset</a>.bunionᵢ</p>",
        "id": 344727371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874143
    },
    {
        "content": "<p>I think this might be the error that I already fixed, I am on line 53 now <code>refine' Ideal.span_le.2 _</code></p>",
        "id": 344727406,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679874208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233106/near/344726607\">said</a>:</p>\n<blockquote>\n<p>Either way, I fixed the build</p>\n</blockquote>\n<p>Note I pushed these fixes</p>",
        "id": 344727427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874240
    },
    {
        "content": "<p>That <code>refine'</code> error is weird</p>",
        "id": 344727470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874246
    },
    {
        "content": "<p>It seems to be confused by the implicit binders</p>",
        "id": 344727476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233106/near/344727194\">said</a>:</p>\n<blockquote>\n<p>It would be good to understand the porting notes before merging; this file is super-low priority, so we may as well use it to work out what's going on</p>\n</blockquote>\n<p>Sounds good</p>",
        "id": 344727676,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679874478
    },
    {
        "content": "<p>So now that the rest of the errors are gone and it builds, does it get merged or because of the porting notes will this branch be held back till a later date?</p>",
        "id": 344727848,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679874646
    },
    {
        "content": "<p>Personally I think we should wait for someone to work out what's going on with the porting notes, since the file is really low priority</p>",
        "id": 344727959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679874796
    },
    {
        "content": "<p>Speaking of priority, I know that the porting wiki says just pick one of the unported files to work on but if there really is some files that would help along the entire porting endeavor,  what would be the best way to pick those out while looking for a file to work on?</p>",
        "id": 344728307,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679875112
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> lists them by number of downstream files</p>",
        "id": 344728583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679875324
    },
    {
        "content": "<p>So the one with the most dependents is the one that's going to free up the most things once its ported</p>",
        "id": 344728608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679875348
    },
    {
        "content": "<p>Otherwise, pick a file you find interesting that's unported (or use one of the targets in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/port.20progress\">#mathlib4 &gt; port progress</a> and look at the graph to work out which files it needs</p>",
        "id": 344728661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679875402
    }
]