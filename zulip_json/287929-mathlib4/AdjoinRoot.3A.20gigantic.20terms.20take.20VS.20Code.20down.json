[
    {
        "content": "<p>I was trying to make sense of why things are slow with <code>AdjoinRoot</code>. The proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AdjoinRoot.quotAdjoinRootEquivQuotPolynomialQuot_symm_mk_mk#doc\">docs4#AdjoinRoot.quotAdjoinRootEquivQuotPolynomialQuot_symm_mk_mk</a> is just <code>by rw [about 12 lemmas]</code> and right now in master we have <code>set_option maxHeartbeats 300000 in</code> for this lemma. I thought it might be worth inspecting the full term, so I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.AdjoinRoot</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Polynomial</span> <span class=\"n\">Ideal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">AdjoinRoot</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DoubleQuot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"c1\">-- uncomment this to take your VS Code down</span>\n<span class=\"c1\">-- set_option pp.all true in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">quotAdjoinRootEquivQuotPolynomialQuot_symm_mk_mk'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">quotAdjoinRootEquivQuotPolynomialQuot</span> <span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">f.map</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)[</span><span class=\"n\">X</span><span class=\"o\">]))</span>\n        <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I.map</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">AdjoinRoot</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but uncommenting <code>set_option pp.all true</code> puts VS Code into some kind of catatonic state, where for a while the infoview doesn't display anything at all, and then finally it does display the theorem statement and the goal is so large that I cannot even inspect how large it is; the moment it is displayed (together with a very small scrollbar) VS Code becomes completely unresponsive. </p>\n<p>Is this an indication of a problem? Or should Lean be able to handle gigantic terms which are too big to be displayed?</p>\n<p>I don't think any of the 12 rewrites are in particular to blame; without pp.all each one is basically a bit slow, perhaps because the term is obscenely huge or perhaps for other reasons.</p>\n<p>I managed to get command line Lean to output the term -- it's just over 37000 lines long. You can view it <a href=\"https://gist.githubusercontent.com/kbuzzard/717a19b677ab7d9231fa51aa8e820cf1/raw/c029c4ab69efe8c50510407e17fc46c92bfec9b8/quotAdjoinRootEquivQuotPolynomialQuot_symm_mk_mk.lean\">here</a>.</p>",
        "id": 363520138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685892342
    },
    {
        "content": "<p>There is a lot redundancy in this text -- gzip compresses it from 2955890 down to 54963 bytes (a factor of ~54). So I assume that internally, a lot of sharing will be going on. Still, to my naïve eyes, this looks bad. Is exponential blow-up of terms unavoidable in the long run?</p>",
        "id": 363550490,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1685903237
    },
    {
        "content": "<p>Yes, this is really my question. I know nothing about programming, and I'm wondering why this proof is slow. Is the answer \"because the term is 3 million characters long\" or is the answer \"it doesn't matter at all that the term is 3 million characters long when pretty printed because internally it is a completely reasonable size and the problem is somewhere else\"?</p>",
        "id": 363578208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685918381
    },
    {
        "content": "<p>For comparison, the  corresponding theorem in mathlib3 has a goal that pretty prints to 767235 bytes (~1/4 the size), and compresses to 15000 bytes (pretty much the same ~51 compression ratio).</p>",
        "id": 363585113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924176
    },
    {
        "content": "<p>To be honest the goal type doesn't look that scary. It's a huge amount of duplication in <code>pp.all</code>, but I think it is all going to be shared internally.</p>",
        "id": 363585226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924283
    },
    {
        "content": "<p>Understanding the difference between the mathlib3 and mathlib4 terms might be helpful, however.</p>",
        "id": 363585739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924737
    },
    {
        "content": "<p>The mathlib3 term is <a href=\"https://gist.github.com/semorrison/2a5b150b091f36ba99459cba8cdc9248\">here</a>.</p>",
        "id": 363585812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924771
    },
    {
        "content": "<p>How much of that 1/4 is due to not having stupidly long instance names?</p>",
        "id": 363585849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685924818
    },
    {
        "content": "<p>Not much, I think. I renamed <code>instHasQuotientIdealToSemiringToCommSemiring</code> and it makes little difference,.</p>",
        "id": 363585899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924859
    },
    {
        "content": "<p>It actually looks like a bigger cause of the inflation is lack of beta reduction on the mathlib4 side. There are lots of <code>(fun (a : T) ↦ b) a</code> with large terms <code>T</code>.</p>",
        "id": 363586016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685924957
    },
    {
        "content": "<p>I am tempted to suggest that we refactor <code>AdjoinRoot</code>, essentially getting rid of it almost entirely in favour of <code>IsAdjoinRoot</code>. We could just have an <code>opaque</code> definition for <code>AdjoinRoot</code> if all the theory were developed immediately in terms of <code>IsAdjoinRoot</code>.</p>",
        "id": 363586305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685925174
    },
    {
        "content": "<p>I think if we do that we lose a bunch of scalar action structures</p>",
        "id": 363586503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685925310
    }
]