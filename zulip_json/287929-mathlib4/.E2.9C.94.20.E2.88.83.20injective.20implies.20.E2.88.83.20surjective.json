[
    {
        "content": "<p>Does Mathlib4 have code for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inje</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">classical</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 339226580,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677800930
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.leftInverse_invFun#doc\">docs4#Function.leftInverse_invFun</a> is basically that, but it's in terms of a specific function created using choice</p>",
        "id": 339227338,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677801386
    },
    {
        "content": "<p>What file is it in?</p>",
        "id": 339227416,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677801444
    },
    {
        "content": "<p>Sorry, I pasted the mathlib3 version. Fixed.</p>",
        "id": 339227473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677801479
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 339227557,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677801493
    },
    {
        "content": "<p>I see it works both with <code>[Inhabited A]</code> and <code>[Nonempty A]</code>. Is there any difference?</p>",
        "id": 339228060,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677801753
    },
    {
        "content": "<p>Inhabited implies Nonempty. Nonempty is the Prop version, but Inhabited has a <code>default</code> function.</p>",
        "id": 339228765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677802113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 339228832,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677802148
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choice#doc\">docs4#Classical.choice</a> is equivalent to there being a function <code>Nonempty A -&gt; Inhabited A</code>.</p>",
        "id": 339228881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677802183
    },
    {
        "content": "<p>You can only get from Prop to Type with magic.</p>",
        "id": 339229272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677802380
    },
    {
        "content": "<p>Sometimes that magic is computable though, even though it uses choice!</p>",
        "id": 339229843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677802687
    }
]