[
    {
        "content": "<p>I took a look at the help-wanted's, and I think that the error here might be a subtle universe error. Changing <code>J</code> from<code>: Type</code> to <code>: Type v</code> makes that instance work out (but breaks other definitions); but I think the root of the issue here is a maybe-unnecessary coincidence in universe levels arising from the use of <code>ModuleCat.piIsoPi</code>.</p>\n<p>In that file (Algebra.Category.ModuleCat.Products), we define things under the assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But the universe of <code>ι</code> should not always need to coincide with the universe <code>v</code> in <code>ModuleCat.{v}</code>—in parts of that file (and in the file being ported, with <code>ι</code> = <code>J</code>) we actually have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ModuleCat.of.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>so the type of the argument of <code>Z</code> only needs to live in a universe ≤ <code>v</code>, not necessarily <code>v</code> itself. Of course, trying to change things in the obvious way makes a bunch of other things break (whether asking for <code>J : Type v</code> or <code>ι : Type v'</code>); I just wanted to share the observation in case it helps someone more familiar with these issues figure it out. :)</p>",
        "id": 370127996,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687882984
    },
    {
        "content": "<p>(I don't really understand how the errors emerge either; if you try to phrase the needed inequality as <code>variable {ι : Type v} (Z : ι → ModuleCat.{max v v', u} R)</code>, then you hit errors like <code>stuck at solving universe constraint max v ?u.3769 =?= max v v'</code>—which <em>looks</em> very solvable, but I suppose something must be pushing the MCtx depth somewhere, and I'm not sure what...)</p>",
        "id": 370130708,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687883492
    },
    {
        "content": "<p>Lean 3 used to be able to solve this universe constraint by setting <code>?u.3769=v'</code>, but Lean 4 (implicitly) is imagining that there could in theory be more solutions if v' &lt;= v (which is something which cannot even be expressed in Lean :-/ ). Right now we're working around this nonsense using the <code>TypeMax</code> hack :-/</p>",
        "id": 370144827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687886114
    },
    {
        "content": "<p>No, Lean 4 is just unwilling to solve <code>max u v =?= max u ?_</code> or <code>max u v =?= max ?_ u</code>. I have a patched version of Lean 4 (set your lean-toolchain to <code>semorrison/lean4:release-20230620-max</code> to try it out) that makes the most conservative possible change to allow this.</p>\n<p>I've been meaning to write up an argument for adopting this change (see <a href=\"https://github.com/leanprover-community/mathlib4/tree/forward_port_19153_hack\">branch#forward_port_19153_hack</a>, which works with this patch, and <a href=\"https://github.com/leanprover-community/mathlib4/tree/forward_port_19153\">branch#forward_port_19153</a>, which doesn't!) but haven't quite got there. :-)</p>",
        "id": 370216229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687903361
    },
    {
        "content": "<p>Is it possible to check that your hack solves this problem?</p>",
        "id": 370217322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687903742
    },
    {
        "content": "<p>Set your <code>lean-toolchain</code> to <code>semorrison/lean4:release-20230620-max</code>, and recompile (possibly via CI).</p>",
        "id": 370220994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687905164
    },
    {
        "content": "<p>I tracked this down: there was a mysterious mis-port of a universe level in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3515\">#3515</a> that then caused this problem. Fixing the underlying problem made this go away.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5519\">#5519</a> should be ready for review now.</p>",
        "id": 370672563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688025281
    }
]