[
    {
        "content": "<p>The following proof isn't too bad, but the <code>change</code> feels awkward. Is there a better way to do this? Or does this indicate a missing API lemma? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_eqv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_congr_subtype</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_eqv</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 408201327,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702652148
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_congr_subtype#doc\">docs#tsum_congr_subtype</a> is mis-stated, it should be the version you wrote</p>",
        "id": 408202447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702652505
    },
    {
        "content": "<p>(and then maybe the old statement can be moved to <code>tsum_congr_set_coe</code> or similar)</p>",
        "id": 408202664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702652554
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9080\">#9080</a></p>",
        "id": 408209285,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702654791
    }
]