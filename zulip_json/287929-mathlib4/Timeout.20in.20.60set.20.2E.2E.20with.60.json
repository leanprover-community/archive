[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4912\">!4#4912</a>, if you add <code>with hg</code> to <code>set</code> in line <a href=\"https://github.com/leanprover-community/mathlib4/pull/4912/files#diff-6f2f772b41622ce6d9a4dc922f7e26f8aeb129f555c3aa567f4a386979db4acdR156\">https://github.com/leanprover-community/mathlib4/pull/4912/files#diff-6f2f772b41622ce6d9a4dc922f7e26f8aeb129f555c3aa567f4a386979db4acdR156</a>, then Lean timeouts.</p>",
        "id": 364922941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686331327
    },
    {
        "content": "<p>The same happens if you uncomment, e.g., line 160</p>",
        "id": 364923065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686331364
    },
    {
        "content": "<p>Minimizing.</p>",
        "id": 364927222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686332401
    },
    {
        "content": "<p>I already started doing the same<br>\ngot to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">horizontal_strip</span>\n    <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n       <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n     <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- If `im z = a` or `im z = b`, then we apply `hle_a` or `hle_b`, otherwise `im z ∈ Ioo a b`.</span>\n  <span class=\"c1\">-- After a change of variables, we deal with the strip `a - b &lt; im z &lt; a + b` instead</span>\n  <span class=\"c1\">-- of `a &lt; im z &lt; b`</span>\n  <span class=\"c1\">-- Choose some `c B : ℝ` satisfying `hB`, then choose `max c 0 &lt; d &lt; π / 2 / b`.</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hB</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hO</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">set</span> <span class=\"n\">aff</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>so far</p>",
        "id": 364927761,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686332534
    },
    {
        "content": "<p>I've got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">aff</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">hg</span>\n</code></pre></div>",
        "id": 364928107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686332638
    },
    {
        "content": "<p>edited:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span>  <span class=\"n\">ℂ</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 364928538,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686332756
    },
    {
        "content": "<p>Your example fails with type mismatch</p>",
        "id": 364929309,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686332954
    },
    {
        "content": "<p>Adding <code>fun (ε : ℝ) (w : ℂ)</code> helps with your example. Trying in the original source.</p>",
        "id": 364929391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686332981
    },
    {
        "content": "<p>Works!</p>",
        "id": 364929648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686333035
    },
    {
        "content": "<p>Probably, <code>set</code> parses RHS without expected type</p>",
        "id": 364929709,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686333057
    },
    {
        "content": "<p>(and in Lean 3 it used the expected type)</p>",
        "id": 364929786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686333076
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4917\">!4#4917</a>, lets see if anything breaks with this change</p>",
        "id": 364934513,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686334287
    },
    {
        "content": "<p>Note that sometimes <code>set</code> fails too (with \"type mismatch\" error)</p>",
        "id": 364942136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686336269
    },
    {
        "content": "<p>I had to move type information from left to right here and there.</p>",
        "id": 364942194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686336287
    },
    {
        "content": "<p>I finally finished the above PR, please say if you find more distinct issues. Do you have an example of this type mismatch error I can look at?</p>",
        "id": 367931218,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687268339
    },
    {
        "content": "<p>A very non-minimal example: if you remove type annotations on the right in <code>set</code>s in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PhragmenLindelof.horizontal_strip#src\">src4#PhragmenLindelof.horizontal_strip</a>, then the proof timeouts.</p>",
        "id": 367957382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687272933
    },
    {
        "content": "<p>Even if you move them to the LHS</p>",
        "id": 367957438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687272943
    },
    {
        "content": "<p>If you replace line 154 with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ε</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">aff</span> <span class=\"n\">w</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>then it timeouts, even if you comment out everything after line 157</p>",
        "id": 367958828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687273184
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5386\">#5386</a>  should fix this <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 368843416,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687516756
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 368981856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687543231
    }
]