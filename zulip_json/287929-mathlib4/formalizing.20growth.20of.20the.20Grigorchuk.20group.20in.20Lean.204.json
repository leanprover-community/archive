[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263407\">@Laurent Bartholdi</span> and I are going to formalize estimates on the growth of the Grigorchuk group in Lean 4, so we're going to start making feature PRs unique to mathlib4. The first two are <a href=\"https://github.com/leanprover-community/mathlib4/pull/2192\">!4#2192</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2193\">!4#2193</a>.</p>",
        "id": 327082769,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676043540
    },
    {
        "content": "<p>Should we have a new label for \"new theory not in mathlib3\"?</p>",
        "id": 327151482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676065308
    },
    {
        "content": "<p>Wouldn't that just be the negation of a port-like tag? I would rather this be the default</p>",
        "id": 327190893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676093010
    },
    {
        "content": "<p>The advantage of an explicit label is it distinguishes \"new mathlib4 content\" from \"I forgot to label this\"</p>",
        "id": 327280591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676134162
    },
    {
        "content": "<p>The first nontrivial PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2214\">!4#2214</a> (needs a lot of documentation; possibly, needs <code>@[to_additive]</code>)</p>",
        "id": 327299428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676145081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/formalizing.20growth.20of.20the.20Grigorchuk.20group.20in.20Lean.204/near/327280591\">said</a>:</p>\n<blockquote>\n<p>The advantage of an explicit label is it distinguishes \"new mathlib4 content\" from \"I forgot to label this\"</p>\n</blockquote>\n<p>Plus: color coding and easy github UI filtering! :)</p>",
        "id": 327316593,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676158840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/formalizing.20growth.20of.20the.20Grigorchuk.20group.20in.20Lean.204/near/327299428\">said</a>:</p>\n<blockquote>\n<p>The first nontrivial PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2214\">!4#2214</a> (needs a lot of documentation; possibly, needs <code>@[to_additive]</code>)</p>\n</blockquote>\n<p>Is this worth the boilerplate vs using <code>@free_product bool</code> or <code>@free_product (fin 2)</code>? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_product\">docs#free_product</a> / <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FreeProduct#doc\">docs4#FreeProduct</a>)</p>",
        "id": 327318999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676160909
    },
    {
        "content": "<p>I think this perhaps highlights a danger of adding new content to mathlib4 mid-port; the content you add can end up overlapping with other content that hasn't been ported yet (<a href=\"https://leanprover-community.github.io/mathlib-port-status/file/group_theory/free_product\">port-status#group_theory/free_product</a>)</p>",
        "id": 327319197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676161056
    },
    {
        "content": "<p>Yes, it is worth it. A minor argument is that <code>M</code> and <code>N</code> can be in different universes (I don't care too much about it). A more important argument is that we don't have machinery to go from <code>[Monoid M] [Monoid N]</code> to <code>âˆ€ i, Monoid (![M, N] i)</code>.</p>",
        "id": 327328639,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676169413
    },
    {
        "content": "<p>Also, <code>Con</code> gives the universal property for free, so proving all these properties directly is as easy (if not easier) than transfering them from <code>FreeProduct ![M, N]</code>.</p>",
        "id": 327328737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676169537
    },
    {
        "content": "<p>And I want to have convenience API based on <code>Sum</code> instead of <code>Sigma</code>.</p>",
        "id": 327328754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676169562
    },
    {
        "content": "<p>How should I call the additive version of <code>FreeProd</code>? <code>FreeSum</code>? Something else?</p>",
        "id": 327469315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676266914
    },
    {
        "content": "<p>The PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2214\">!4#2214</a> is ready for review. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , could you please have a look at the last 4 definitions? I tried to generate the additive ones using <code>to_additive</code> but it doesn't translate <code>_ : MulOneClass PUnit</code> to <code>_ : AddZeroClass PUnit</code>. This looks like the reversed version of the issue we had with <code>Nat</code>s. Is it easy to (locally?) disable the rule you introduced to make it work with <code>1 : Nat</code> for <code>PUnit</code>?</p>",
        "id": 327472360,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676268875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I added a label <code>new-feature</code>. Feel free to edit name/description/color.</p>",
        "id": 327472406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676268906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/formalizing.20growth.20of.20the.20Grigorchuk.20group.20in.20Lean.204/near/327469315\">said</a>:</p>\n<blockquote>\n<p>How should I call the additive version of <code>FreeProd</code>? <code>FreeSum</code>? Something else?</p>\n</blockquote>\n<p>I think it's fine if it doesn't exist</p>",
        "id": 327483661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676274411
    },
    {
        "content": "<p><code>free_sum</code> doesn't exist in mathlib3.</p>",
        "id": 327486834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676275620
    },
    {
        "content": "<p>Sounds very easy to port then ;-)</p>",
        "id": 327519798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676286267
    },
    {
        "content": "<p>What is easy to port?</p>",
        "id": 327560479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676298124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/formalizing.20growth.20of.20the.20Grigorchuk.20group.20in.20Lean.204/near/327472360\">said</a>:</p>\n<blockquote>\n<p>The PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2214\">!4#2214</a> is ready for review. <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> , could you please have a look at the last 4 definitions? I tried to generate the additive ones using <code>to_additive</code> but it doesn't translate <code>_ : MulOneClass PUnit</code> to <code>_ : AddZeroClass PUnit</code>. This looks like the reversed version of the issue we had with <code>Nat</code>s. Is it easy to (locally?) disable the rule you introduced to make it work with <code>1 : Nat</code> for <code>PUnit</code>?</p>\n</blockquote>\n<p>This heuristic is not applied to <code>PUnit</code>. </p>\n<p>The problem is that the synthesized instance for <code>MulOneClass PUnit</code> is derived from the instance <code>PUnit.commRing : CommRing PUnit</code>. The latter (of course) doesn't have an additive analogue, and so <code>to_additive</code> cannot translate the instance.<br>\nThis is fixed if all multiplicative only instances on <code>PUnit</code> (like <code>MulOneClass</code>) are not derived from any ring-like instances. <br>\nThis can probably be fixed by setting manual instance priorities. In this case, setting <code>MulZeroOneClass.toMulOneClass</code> to have a lower priority than <code>Monoid.toMulOneClass</code>. More generally, forgetful instances that have additive+multiplicative data and forget the additive data should maybe have a lower priority than instances that don't involve additive data in the first place.</p>",
        "id": 327603455,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309015
    }
]