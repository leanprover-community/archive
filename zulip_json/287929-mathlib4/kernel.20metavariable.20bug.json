[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">what_happened</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Replace the <code>by sorry</code> with <code>sorry</code> and the bug disappears. Weird.</p>",
        "id": 401278599,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1699585985
    },
    {
        "content": "<p>I'm not sure what you are doing with <code>inv_mem'</code>, but that's definitely the cause of the problem.</p>",
        "id": 401278837,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699586127
    },
    {
        "content": "<p>What inductive type are you trying to destruct there?</p>",
        "id": 401278858,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699586144
    },
    {
        "content": "<p>I had a more complicated carrier but reduced it for the purposes of the MWE. Deconstruction works here still: <code>a</code> has type <code>G</code> and <code>b</code> has type <code>a = x✝</code>.</p>",
        "id": 401279116,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1699586302
    },
    {
        "content": "<p>Oh, I see, you're using the alternate set notation. I misread that the first time. I'm betting it's a bug in the elaborator for that notation. I'll see if I can hunt it down.</p>",
        "id": 401280383,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699587225
    },
    {
        "content": "<p>Hmmm... I don't see the problem. I think <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> has played a bit with binder predicates and this kind of thing before though, so perhaps he has an idea.</p>",
        "id": 401281321,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699587911
    }
]