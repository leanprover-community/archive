[
    {
        "content": "<p>Which name should we use for <code>simp</code> lemmas (and in <code>simps</code> config)?</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s1\">'init.*symmApply'</span>\n<span class=\"go\">Mathlib/Algebra/Hom/Equiv/Basic.lean:initialize_simps_projections AddEquiv (toEquiv_toFun → apply, toEquiv_invFun → symmApply, -toEquiv)</span>\n<span class=\"go\">Mathlib/Algebra/Hom/Equiv/Basic.lean:initialize_simps_projections MulEquiv (toEquiv_toFun → apply, toEquiv_invFun → symmApply, -toEquiv)</span>\n<span class=\"go\">Mathlib/Algebra/Module/Equiv.lean:initialize_simps_projections LinearEquiv (toLinearMap → apply, invFun → symmApply)</span>\n<span class=\"go\">Mathlib/Algebra/Ring/Equiv.lean:initialize_simps_projections RingEquiv (toEquiv_toFun → apply, toEquiv_invFun → symmApply, -toEquiv)</span>\n<span class=\"go\">Mathlib/Logic/Equiv/LocalEquiv.lean:initialize_simps_projections LocalEquiv (toFun → apply, invFun → symmApply)</span>\n<span class=\"go\">Mathlib/Order/RelIso/Basic.lean:initialize_simps_projections RelIso (toEquiv_toFun → apply, toEquiv_invFun → symmApply, -toEquiv)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git<span class=\"w\"> </span>grep<span class=\"w\"> </span><span class=\"s1\">'init.*symm_apply'</span>\n<span class=\"go\">Mathlib/Data/Finsupp/Defs.lean:  equivFunOnFinite.symm_apply_apply f</span>\n<span class=\"go\">Mathlib/Data/Finsupp/Defs.lean:  rw [← equivFunOnFinite_single, Equiv.symm_apply_apply]</span>\n<span class=\"go\">Mathlib/Logic/Equiv/Defs.lean:initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)</span>\n<span class=\"go\">Mathlib/Tactic/Simps/Basic.lean:  Example: `initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)`.</span>\n<span class=\"go\">Mathlib/Tactic/Simps/Basic.lean:  `initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)`.</span>\n<span class=\"go\">Mathlib/Tactic/Simps/Basic.lean:    initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)</span>\n<span class=\"go\">Mathlib/Topology/Homeomorph.lean:initialize_simps_projections Homeomorph (toEquiv_toFun → apply, toEquiv_invFun → symm_apply,</span>\n<span class=\"go\">test/Simps.lean:initialize_simps_projections Equiv (toFun → apply, invFun → symm_apply)</span>\n<span class=\"go\">test/Simps.lean:initialize_simps_projections Equiv (toFun → coe as_prefix, invFun → symm_apply)</span>\n</code></pre></div>",
        "id": 327469634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676267118
    },
    {
        "content": "<p><code>symm_apply</code> seems more logical to me</p>",
        "id": 327483989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676274552
    },
    {
        "content": "<p>It was also on my todo-list to replace all occurrences of <code>symmApply</code> with <code>symm_apply</code>, but feel free to do this!</p>",
        "id": 327605723,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309701
    },
    {
        "content": "<p>Note that the mismatch is likely because mathport automatically camelCases the custom projections for <code>Simps</code> (e.g. <code>Equiv.Simps.symmApply</code>).</p>",
        "id": 327605857,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309741
    }
]