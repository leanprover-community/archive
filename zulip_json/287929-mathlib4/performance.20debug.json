[
    {
        "content": "<p>I'd like to get help to debug <em>huge</em> performance issues with <a href=\"https://github.com/leanprover-community/mathlib4/pull/3383\">!4#3383</a>. Each declaration compiles piecewise but some don't compile globally. For instance in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">irreducible_def</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n      <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Quot.lift</span> <span class=\"n\">f</span>\n            <span class=\"o\">(</span><span class=\"kd\">by</span>\n              <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r</span>\n              <span class=\"n\">induction</span> <span class=\"n\">r</span>\n              <span class=\"n\">case</span> <span class=\"n\">of</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">f'.prop</span> <span class=\"n\">r</span>\n              <span class=\"n\">case</span> <span class=\"n\">add_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">]</span>\n              <span class=\"n\">case</span> <span class=\"n\">mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">]</span>\n              <span class=\"n\">case</span> <span class=\"n\">mul_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n            <span class=\"n\">x.toQuot</span>\n        <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by simp only [← zero_quot, f.map_zero] -/</span>\n        <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">          rintro ⟨⟨x⟩⟩ ⟨⟨y⟩⟩</span>\n<span class=\"cm\">          simp only [add_quot, f.map_add x y] -/</span>\n        <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by simp only [← one_quot, f.map_one] -/</span>\n        <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">          rintro ⟨⟨x⟩⟩ ⟨⟨y⟩⟩</span>\n<span class=\"cm\">          simp only [mul_quot, f.map_mul x y] -/</span> <span class=\"o\">}</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">⟨</span><span class=\"n\">F.comp</span> <span class=\"o\">(</span><span class=\"n\">mkRingHom</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">        dsimp</span>\n<span class=\"cm\">        rw [mkRingHom_rel h] -/</span><span class=\"o\">⟩</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">      ext</span>\n<span class=\"cm\">      simp [mkRingHom_def] -/</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">      ext</span>\n<span class=\"cm\">      simp [mkRingHom_def] -/</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Each sorry replaces a proof that actually works. You can un-comment each one separately and it works. But uncommenting all of them at once will make Lean hang forever. A similar problem higher up in the file actually led to  timeout and I got it to compile with <code>set_option maxHeartbeats 800000 in</code>, but in the above case I don't even get a timeout, it simply runs forever, consuming all CPU power it can find. More generally editing this file doesn't feel like <em>interactive</em> theorem proving at all, more like \"type a line and go make some coffee while Lean thinks about it\". I'd be happy to see someone fixing that but I'd be even more interesting in learning how to debug such a disaster.</p>",
        "id": 351296860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681990823
    },
    {
        "content": "<p>For the case that terminates, it would be interesting to see where time is spent using <code>profiler true</code>. When it doesn't terminate, the best approximation to that is running everything under <code>gdb</code> and looking at a few stack traces, which, yes, is a significantly worse user experience</p>",
        "id": 351298351,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681991163
    },
    {
        "content": "<p>Sorry about disappearing. Lean 4 killed my computer and I had to reboot to regain control.</p>",
        "id": 351302856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992147
    },
    {
        "content": "<p><code>set_option profiler true</code> says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">377</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">929</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">971</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">08</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span>\n<span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"n\">took</span> <span class=\"mi\">104</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">RingQuot.instSemiring</span> <span class=\"n\">took</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 351302999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992181
    },
    {
        "content": "<p>Should I say something more to get more info?</p>",
        "id": 351303144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992221
    },
    {
        "content": "<p>Does forcing it to be noncomputable help?</p>",
        "id": 351303203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681992235
    },
    {
        "content": "<p>I just tried after seeing that suspicious looking <code>compilation</code> thing and it does help!</p>",
        "id": 351303338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992262
    },
    {
        "content": "<p>or maybe not</p>",
        "id": 351303502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992304
    },
    {
        "content": "<p>It stops printing <code>compilation of RingQuot.instSemiring took 19.2s</code> but it still takes forever.</p>",
        "id": 351303636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992331
    },
    {
        "content": "<p>Tracing <code>isDefEq</code> and/or <code>synthInstance</code> will report timings for each step with <code>profiler</code></p>",
        "id": 351304043,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681992412
    },
    {
        "content": "<p>The actual time with <code>noncomputable</code> is still around 20s.</p>",
        "id": 351304132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992430
    },
    {
        "content": "<p>That sounds weird, it should at least get faster by that amount if the line disappears. If the expensive definition dominates file processing time (up to that point with <code>#exit</code> after it), you can also run it on the cmdline with <code>lean --profile</code> to print a grand total.</p>",
        "id": 351305303,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681992705
    },
    {
        "content": "<p>Tracing <code>isDefEq</code> and <code>synthInstance</code> doesn't show anything striking to me.</p>",
        "id": 351306208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992958
    },
    {
        "content": "<p>Sebastian, could you tell what I should run on the command line exactly?</p>",
        "id": 351306283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681992972
    },
    {
        "content": "<p><code>lake env lean --profile &lt;file.lean&gt;</code></p>",
        "id": 351306352,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681992990
    },
    {
        "content": "<p>Thanks. Without <code>noncomputable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.251._spec_1</span> <span class=\"n\">took</span> <span class=\"mi\">102</span><span class=\"n\">ms</span>\n<span class=\"kn\">import</span> <span class=\"n\">took</span> <span class=\"mi\">313</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">375</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">930</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">963</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">07</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">38</span><span class=\"n\">s</span>\n<span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"n\">took</span> <span class=\"mi\">105</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">RingQuot.instSemiring</span> <span class=\"n\">took</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">s</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">RingQuot.lean</span><span class=\"o\">:</span><span class=\"mi\">327</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"n\">exit'</span> <span class=\"n\">to</span> <span class=\"n\">interrupt</span> <span class=\"n\">Lean</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">87</span><span class=\"n\">ms</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n    <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">138</span><span class=\"n\">ms</span>\n    <span class=\"n\">dsimp</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">456</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">313</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">39</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">805</span><span class=\"n\">ms</span>\n    <span class=\"n\">linting</span> <span class=\"mi\">56</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">135</span><span class=\"n\">ms</span>\n    <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">110</span><span class=\"n\">ms</span>\n    <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">87</span><span class=\"n\">s</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">581</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 351306605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993067
    },
    {
        "content": "<p>with <code>noncomputable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.251._spec_1</span> <span class=\"n\">took</span> <span class=\"mi\">102</span><span class=\"n\">ms</span>\n<span class=\"kn\">import</span> <span class=\"n\">took</span> <span class=\"mi\">467</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">375</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">923</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">960</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">07</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">s</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">RingQuot.lean</span><span class=\"o\">:</span><span class=\"mi\">327</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"n\">exit'</span> <span class=\"n\">to</span> <span class=\"n\">interrupt</span> <span class=\"n\">Lean</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">86</span><span class=\"n\">ms</span>\n    <span class=\"n\">compilation</span> <span class=\"mi\">46</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n    <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">33</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n    <span class=\"n\">dsimp</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">456</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">11</span><span class=\"n\">s</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">467</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">798</span><span class=\"n\">ms</span>\n    <span class=\"n\">linting</span> <span class=\"mi\">56</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">136</span><span class=\"n\">ms</span>\n    <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">112</span><span class=\"n\">ms</span>\n    <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">87</span><span class=\"n\">s</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">589</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 351306833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993122
    },
    {
        "content": "<p>That's still not very fast, but does the second version at least feel faster? (You can also prepend <code>time </code> to the cmdline to make that more precise)</p>",
        "id": 351307074,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681993191
    },
    {
        "content": "<p><code>time</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m38</span><span class=\"o\">,</span><span class=\"mi\">883</span><span class=\"n\">s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m38</span><span class=\"o\">,</span><span class=\"mi\">023</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">860</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m19</span><span class=\"o\">,</span><span class=\"mi\">635</span><span class=\"n\">s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">0</span><span class=\"n\">m19</span><span class=\"o\">,</span><span class=\"mi\">280</span><span class=\"n\">s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m0</span><span class=\"o\">,</span><span class=\"mi\">356</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 351307854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993351
    },
    {
        "content": "<p>So the second version is indeed faster.</p>",
        "id": 351307934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993368
    },
    {
        "content": "<p>But both are horrible.</p>",
        "id": 351307973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993376
    },
    {
        "content": "<p>Without <code>noncomputable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Std.Linter.UnreachableTactic.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Std.Linter.UnreachableTactic._hyg.1411</span> <span class=\"n\">took</span> <span class=\"mi\">108</span><span class=\"n\">ms</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.251._spec_1</span> <span class=\"n\">took</span> <span class=\"mi\">133</span><span class=\"n\">ms</span>\n<span class=\"kn\">import</span> <span class=\"n\">took</span> <span class=\"mi\">650</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">580</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">43</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">46</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">61</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"n\">s</span>\n<span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"n\">took</span> <span class=\"mi\">135</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">RingQuot.instSemiring</span> <span class=\"n\">took</span> <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">s</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">RingQuot.lean</span><span class=\"o\">:</span><span class=\"mi\">330</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"n\">exit'</span> <span class=\"n\">to</span> <span class=\"n\">interrupt</span> <span class=\"n\">Lean</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">78</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">s</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">181</span><span class=\"n\">ms</span>\n        <span class=\"n\">dsimp</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">531</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">650</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">30</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">58</span><span class=\"n\">s</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">71</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n        <span class=\"n\">simp</span> <span class=\"mi\">187</span><span class=\"n\">ms</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">159</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">66</span><span class=\"n\">s</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">771</span><span class=\"n\">ms</span>\n<span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean  54.57s user 1.67s system 99% cpu 56.271 total</span>\n</code></pre></div>\n<p>with <code>noncomputable</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean</span>\n<span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"n\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Mathport.Rename._hyg.251._spec_1</span> <span class=\"n\">took</span> <span class=\"mi\">133</span><span class=\"n\">ms</span>\n<span class=\"kn\">import</span> <span class=\"n\">took</span> <span class=\"mi\">665</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">584</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">47</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">65</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">RingQuot.lean</span><span class=\"o\">:</span><span class=\"mi\">330</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"n\">exit'</span> <span class=\"n\">to</span> <span class=\"n\">interrupt</span> <span class=\"n\">Lean</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">82</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">68</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">46</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n        <span class=\"n\">dsimp</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">562</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">17</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">665</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">56</span><span class=\"n\">s</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">71</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">18</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">ms</span>\n        <span class=\"n\">simp</span> <span class=\"mi\">187</span><span class=\"n\">ms</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">158</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">75</span><span class=\"n\">s</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">779</span><span class=\"n\">ms</span>\n<span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--profile Mathlib/Algebra/RingQuot.lean  29.55s user 1.04s system 99% cpu 30.610 total</span>\n</code></pre></div>",
        "id": 351307991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993382
    },
    {
        "content": "<p>The high type checking (kernel) time is curious, we don't see that very often. Could it be that the produced (proof) term is simply humongous?</p>",
        "id": 351308315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681993444
    },
    {
        "content": "<p>Which declarations are chewing up the processor in particular? Just <code>lift</code>?</p>",
        "id": 351308530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681993495
    },
    {
        "content": "<p>The relevant declaration is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"n\">natCast</span> <span class=\"n\">r</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast</span><span class=\"o\">,</span> <span class=\"n\">natCast_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast</span><span class=\"o\">,</span> <span class=\"n\">natCast_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span><span class=\"o\">]</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">right_distrib</span><span class=\"o\">]</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"n\">npow_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">npow_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n               <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which conspicuously has many structure fields, each with a tactic proof.</p>",
        "id": 351308568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993504
    },
    {
        "content": "<p>(This is the one Patrick and I are timing. <code>lift</code> is further down the file (past the #exit) and even slower.)</p>",
        "id": 351308712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993540
    },
    {
        "content": "<p>Does bisecting the fields help narrow it down?</p>",
        "id": 351308789,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681993558
    },
    {
        "content": "<p>I remember long ago in lean3 some quadratic effect?</p>",
        "id": 351308863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993566
    },
    {
        "content": "<p>Matthew, <code>lift</code> doesn't compile at all. Currently we focus on one that does compile if you push <code>MaxHearbeats</code> enough.</p>",
        "id": 351308893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993573
    },
    {
        "content": "<p>Indeed, <code>sorry</code>ing the second half of the proofs drops elaboration time to 2s.</p>",
        "id": 351309341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993670
    },
    {
        "content": "<p>Is it snappy with just the data carrying fields?</p>",
        "id": 351309623,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681993733
    },
    {
        "content": "<p>Similarly, <code>sorry</code>ing instead the first half of the proofs drops elaboration time to 0.4s.</p>",
        "id": 351309645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993738
    },
    {
        "content": "<p>So it is a non-local effect of the many proofs...</p>",
        "id": 351309705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993750
    },
    {
        "content": "<p>Those proofs overlap quite a bit</p>",
        "id": 351309930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681993797
    },
    {
        "content": "<p>overlap?</p>",
        "id": 351310135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681993842
    },
    {
        "content": "<p>Yes, you can sorry any combination of half the proofs to get something fast.</p>",
        "id": 351310341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681993884
    },
    {
        "content": "<p>The elements of the lists in the calls  to <code>simp</code> overlap.</p>",
        "id": 351310540,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681993923
    },
    {
        "content": "<p>Hypothetically if  <code>*_quot</code> is somewhat slow them doing them in succession is very slow</p>",
        "id": 351310943,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681994018
    },
    {
        "content": "<p>The proof terms generated are getting bigger as you go through the list of fields:</p>",
        "id": 351311415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994118
    },
    {
        "content": "<p>Maybe the proof terms somehow include the proof terms of the previous fields?</p>",
        "id": 351312375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681994321
    },
    {
        "content": "<p>Yes.</p>",
        "id": 351312453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994340
    },
    {
        "content": "<p>Would factoring some stuff out to separate declarations prevent this?</p>",
        "id": 351312654,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681994384
    },
    {
        "content": "<p>Proof of <code>add_assoc</code> (_proof_1) is 67kb, proof of <code>zero_add</code> (_proof_2) is 260kb, but if you comment out <code>add_assoc</code> then the proof of <code>zero_add</code> drops to 30kb.</p>",
        "id": 351313022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994458
    },
    {
        "content": "<p>(These are all with <code>pp.all</code>.)</p>",
        "id": 351313118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, presumably, but I think we want to treat this as a Lean bug for now. This is not good behaviour!</p>",
        "id": 351313276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994514
    },
    {
        "content": "<p>What are the sizes in ML3?</p>",
        "id": 351313431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681994548
    },
    {
        "content": "<p>Ah.. simple but terrible explanation. :-)</p>",
        "id": 351313593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994588
    },
    {
        "content": "<p>The <code>HAdd</code> instance that is being used in the proof of <code>zero_add</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddSemigroup.toAdd.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddSemigroup.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Add.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingQuot.instAddRingQuot.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>i.e. it is being deduced from an <code>AddSemigroup</code> which contains the proof of <code>add_assoc</code>!</p>",
        "id": 351313958,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994675
    },
    {
        "content": "<p>This then snowballs as we get to the later fields, and the instances being used recursively contain copies of the proofs from earlier steps (which contain instances which ...).</p>",
        "id": 351314150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994721
    },
    {
        "content": "<p>This is all with <code>pp.all</code> on, so the sizes I'm seeing are a bit unfair.</p>",
        "id": 351314231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994743
    },
    {
        "content": "<p>(Subexpression sharing, etc)</p>",
        "id": 351314293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681994761
    },
    {
        "content": "<p>Is that a general drawback of new structures, then?</p>",
        "id": 351314556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681994811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, does this make sense to you?</p>",
        "id": 351315440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995009
    },
    {
        "content": "<p>Thank you very much Scott for investigating this. This definitely reveals a bug either in Lean or in how mathlib uses Lean. There isn't much point in finding a workaround, we need a systematic fix.</p>",
        "id": 351315982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681995126
    },
    {
        "content": "<p>this is a known issue, I think</p>",
        "id": 351316513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995265
    },
    {
        "content": "<p>Is there a known fix then?</p>",
        "id": 351316602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681995291
    },
    {
        "content": "<p>It happens in ml3 as well, when you try to construct a deeply nested structure \"in one go\" without breaking out the parents into their own declarations</p>",
        "id": 351316694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995316
    },
    {
        "content": "<p>How slow was this in mathlib3? I don't remember.</p>",
        "id": 351316961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995373
    },
    {
        "content": "<p>I would hope it doesn't get <em>too</em> bad, because of the abstraction of the _proof_i theorems</p>",
        "id": 351317036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995395
    },
    {
        "content": "<p>It seems they are not being abstracted properly here, however.</p>",
        "id": 351317132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995415
    },
    {
        "content": "<p>it's possible that the way this abstraction is handled in lean 4 has changed in a way that is making the kernel see the full term</p>",
        "id": 351317165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995421
    },
    {
        "content": "<p>The actual proofs are showing up in the later proofs.</p>",
        "id": 351317177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995423
    },
    {
        "content": "<p>(That is, with <code>pp.all</code>.)</p>",
        "id": 351317209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995433
    },
    {
        "content": "<p>But I would have hoped that they are behind <code>_proof_n</code>.</p>",
        "id": 351317260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995447
    },
    {
        "content": "<p>can this be MWE'd?</p>",
        "id": 351317355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/performance.20debug/near/351316602\">said</a>:</p>\n<blockquote>\n<p>Is there a known fix then?</p>\n</blockquote>\n<p>there is a known workaround, which is as Matthew said: make a lemma</p>",
        "id": 351317704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995546
    },
    {
        "content": "<p>I believe proofs are abstracted only after term elaboration</p>",
        "id": 351317744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681995557
    },
    {
        "content": "<p>And that hasn't changed, I guess?</p>",
        "id": 351318123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995629
    },
    {
        "content": "<p>I guess this is caused by a metavariable for the proof appearing in many places, somewhere in the structure instance elaborator</p>",
        "id": 351318151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995636
    },
    {
        "content": "<p>even then it seems like it should be mostly okay since you get a dag-like term</p>",
        "id": 351318270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995661
    },
    {
        "content": "<p>and after abstraction it shouldn't matter</p>",
        "id": 351318354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995679
    },
    {
        "content": "<p>but shouldn't abstraction happen before it is sent to the kernel?</p>",
        "id": 351318563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995720
    },
    {
        "content": "<p>You also mentioned another workaround above:<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/performance.20debug/near/351316694\">said</a>:</p>\n<blockquote>\n<p>breaking out the parents into their own declarations</p>\n</blockquote>\n<p>This is a form of making the implicit term sharing explicit. Binding the suspected repeated metavariable with a <code>let</code> would be another explicit sharing solution, but that might not be trivial at all to achieve.</p>",
        "id": 351318629,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681995726
    },
    {
        "content": "<p>I worry about <code>let</code> binders in instances making things weird in typeclass inference after unfolding</p>",
        "id": 351318949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995812
    },
    {
        "content": "<p>not sure how much of an issue that is in reality</p>",
        "id": 351319008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995827
    },
    {
        "content": "<p>Yes, it could definitely affect other things. But ideally it shouldn't be more problematic than splitting the code into multiple instances manually.</p>",
        "id": 351319251,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681995872
    },
    {
        "content": "<p>What is the Lean 4 syntax to say that missing fields should be taken from a previous named declaration?</p>",
        "id": 351319279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681995880
    },
    {
        "content": "<p><code>__ := </code> should work</p>",
        "id": 351319350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995896
    },
    {
        "content": "<p>I don't think identical proofs are abstracted into the same <code>proof_N</code> declaration, so abstracting after duplication doesn't help all that much</p>",
        "id": 351319560,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681995948
    },
    {
        "content": "<p>oof</p>",
        "id": 351319598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995956
    },
    {
        "content": "<p>way to break term sharing</p>",
        "id": 351319671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681995970
    },
    {
        "content": "<p>My bad, there is indeed a cache</p>",
        "id": 351319898,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681996036
    },
    {
        "content": "<p>I can confirm this \"fixes\" the issue. But it's really really unnatural and ugly here.</p>",
        "id": 351320149,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996083
    },
    {
        "content": "<p>really? Looking at that definition above I would say it cries out for being factored into smaller pieces</p>",
        "id": 351320736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996206
    },
    {
        "content": "<p>it's a bunch of things dependent over a function which is itself a quotient lift with a big proof in it</p>",
        "id": 351320893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996243
    },
    {
        "content": "<p>I'm talking about the SemiRing instance.</p>",
        "id": 351321396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996332
    },
    {
        "content": "<p>you don't have to break it into every single parent, just enough to solve the performance issues</p>",
        "id": 351321838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996422
    },
    {
        "content": "<p>like the notation typeclasses I would probably skip</p>",
        "id": 351321878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996435
    },
    {
        "content": "<p>but you could split a semiring instance into a AddMonoid instance, a Monoid instance, and a semiring instance</p>",
        "id": 351322063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996472
    },
    {
        "content": "<p>I went with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n               <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"n\">npow_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_quot</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">npow_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_quot</span><span class=\"o\">,</span> <span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"n\">natCast</span> <span class=\"n\">r</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast</span><span class=\"o\">,</span> <span class=\"n\">natCast_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zero_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast</span><span class=\"o\">,</span> <span class=\"n\">natCast_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span><span class=\"o\">]</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_quot</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">,</span> <span class=\"n\">right_distrib</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"o\">⟨⟨⟩⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_quot</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n               <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_quot</span><span class=\"o\">]</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">instAddCommMonoid</span> <span class=\"n\">r</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">instMonoidWithZero</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 351322425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996549
    },
    {
        "content": "<p>Which roughly split in three equal pieces. But mathematically this is meaningless.</p>",
        "id": 351322537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996571
    },
    {
        "content": "<p>The reason it is meaningless is that <code>R</code> already has all the required typeclasses anyway.</p>",
        "id": 351322624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996597
    },
    {
        "content": "<p>sure it is meaningful. You don't need to give the full proof of semiring at once</p>",
        "id": 351322640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996602
    },
    {
        "content": "<p>Since they are needed to talk about <code>RingQuot r</code></p>",
        "id": 351322669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996610
    },
    {
        "content": "<p>lemma 1 is that it's a monoid, lemma 2 is that it's also an add monoid, and lemma 3 is that the structures cohere</p>",
        "id": 351322741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996629
    },
    {
        "content": "<p>It does seem like it wouldn't be too hard to MWE this, which might be worth doing just to help document the issue, even if no mitigation is planned.</p>",
        "id": 351322770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681996636
    },
    {
        "content": "<p>I think I'm with Mario that this is fine as library code, but with Patrick that this is a horrible footgun.</p>",
        "id": 351322939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681996678
    },
    {
        "content": "<p>oh absolutely</p>",
        "id": 351323095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996704
    },
    {
        "content": "<p>It certainly feels like you should just be able to do all the easy proofs one after the other, so it's easy to write something extremely non-performant.</p>",
        "id": 351323152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681996721
    },
    {
        "content": "<p>I'd also like to know why we got away with this in ml3.</p>",
        "id": 351323274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681996746
    },
    {
        "content": "<p>flat structures might play a role, although you still get some of the same issues as long as you have multiple layers of hierarchy</p>",
        "id": 351323530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996798
    },
    {
        "content": "<p>Needless to see, none of these proof would appear in the real world. The most you can hope for is explicitly leaving them to readers.</p>",
        "id": 351323609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681996805
    },
    {
        "content": "<p>I think about why lean couldn't just do this definition splitting automatically, but then things get weird as far as what the proof state actually is while you are proving it</p>",
        "id": 351324009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996885
    },
    {
        "content": "<p>because these dependent proofs are actually visible in the tactic state if you click around</p>",
        "id": 351324103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996907
    },
    {
        "content": "<p>and if we make a definition then you might have to block on some part of the proof getting finished before you can even proceed to show errors on the dependent parts</p>",
        "id": 351324428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681996975
    },
    {
        "content": "<p>which IIRC is a thing that actually happened in lean 3 in some situations</p>",
        "id": 351324601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997009
    },
    {
        "content": "<p>These humongous subgoals also cause/expose the performance problems that <code>to_additive</code> has in some files. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3580\">!4#3580</a> adding a single <code>dsimp only</code> in a proof speeds up <code>to_additive</code> 4x.</p>",
        "id": 351682936,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1682095720
    }
]