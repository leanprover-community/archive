[
    {
        "content": "<p>When I hover over <code>change</code>, I get a docstring that suggests <code>change t at h</code> is supported:<br>\n<a href=\"/user_uploads/3121/LpvAjBvgALYG-Mkx2gdnX4YQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LpvAjBvgALYG-Mkx2gdnX4YQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LpvAjBvgALYG-Mkx2gdnX4YQ/image.png\"></a></div><p>But the definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `change` is a synonym for `show`,</span>\n<span class=\"sd\">and can be used to replace a goal with a definitionally equal one. -/</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Where is this incorrect docstring coming from?</p>",
        "id": 341310089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678640641
    },
    {
        "content": "<p>Ah, I see this came up earlier in <a href=\"#narrow/stream/113489-new-members/topic/why.20show.2E.2Efrom.20.3F/near/340489181\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/why.20show.2E.2Efrom.20.3F/near/340489181</a></p>",
        "id": 341315143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678643026
    },
    {
        "content": "<p>It's definitely not supported. You can use <code>replace h : xxx := h</code></p>",
        "id": 341316329,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678643632
    },
    {
        "content": "<p>Where's the docstring coming from that claims it is supported?</p>",
        "id": 341318126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678644460
    },
    {
        "content": "<p>Ah, it's in core as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">* `change tgt'` will change the goal from `tgt` to `tgt'`,</span>\n<span class=\"sd\">  assuming these are definitionally equal.</span>\n<span class=\"sd\">* `change t' at h` will change hypothesis `h : t` to have type `t'`, assuming</span>\n<span class=\"sd\">  assuming `t` and `t'` are definitionally equal.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">change</span><span class=\"o\">)</span> <span class=\"s2\">\"change \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 341320861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678645888
    },
    {
        "content": "<p>This keeps coming up. Is it really anything more than a few lines of tactic code to just do \"revert h, change [what_you_want_h_to_be] -&gt; [old goal], intro h\"?  I have no clue about tactic-writing but this looks like something which could easily be added to mathlib by someone who does.</p>",
        "id": 341322293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678646629
    },
    {
        "content": "<p>I  have no idea how to write Lean4 tactics, but my initial attempt is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptLocation</span> <span class=\"n\">l</span>\n    <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">wildcard</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fail</span>\n    <span class=\"bp\">|</span> <span class=\"n\">targets</span> <span class=\"n\">ts</span> <span class=\"n\">include_goal</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">ts</span>\n        <span class=\"n\">skip</span> <span class=\"c1\">-- TODO: `have $t : $e = $t, clear $t`</span>\n        <span class=\"c1\">-- let hId? := (← getLCtx).findFromUserName? name |&gt;.map fun d ↦ d.fvarId</span>\n        <span class=\"c1\">-- evalTactic $ ← `(tactic| have $[$n?]? $[: $t?]? := $v)</span>\n\n      <span class=\"k\">if</span> <span class=\"n\">include_goal</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341323409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678647238
    },
    {
        "content": "<p>The actual tactic work is trivial, I just have no idea how to process a <code>location</code>, or write a <code>for</code> loop</p>",
        "id": 341323541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678647307
    },
    {
        "content": "<p>And I have no idea what I should be reading to learn about this</p>",
        "id": 341323617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678647365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/change.20at/near/341320861\">said</a>:</p>\n<blockquote>\n<p>Ah, it's in core as</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">* `change tgt'` will change the goal from `tgt` to `tgt'`,</span>\n<span class=\"sd\">  assuming these are definitionally equal.</span>\n<span class=\"sd\">* `change t' at h` will change hypothesis `h : t` to have type `t'`, assuming</span>\n<span class=\"sd\">  assuming `t` and `t'` are definitionally equal.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">change</span><span class=\"o\">)</span> <span class=\"s2\">\"change \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If you copied it correctly, then the second part has a double \"assuming\"...</p>",
        "id": 341326141,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678648810
    },
    {
        "content": "<p>I assume you meant to say \"assuming<br>\nassuming I copied it correctly\"...</p>",
        "id": 341326696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678649141
    },
    {
        "content": "<p>for the for loop, I think you're missing a <code>do</code></p>",
        "id": 341328596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678650179
    },
    {
        "content": "<p>BTW, why don't we use <code>TSyntax ident</code> for the <code>targets</code> constructor of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.Location#doc\">docs4#Lean.Elab.Tactic.Location</a> ?</p>",
        "id": 341330279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678651128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/change.20at/near/341316329\">said</a>:</p>\n<blockquote>\n<p>It's definitely not supported. You can use <code>replace h : xxx := h</code></p>\n</blockquote>\n<p>I clarified the section on the porting wiki on this.</p>",
        "id": 341331164,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678651689
    },
    {
        "content": "<p>I don't know how to clear the old fvar, but here's something that kinda works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Location</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">expandLocation</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Wildcards are not supported.\"</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">targets</span> <span class=\"n\">ts</span> <span class=\"n\">incl</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">allowed</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ts.size</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">incl</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">ts.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">incl</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">allowed</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Changing in more than one location is not supported\"</span>\n          <span class=\"k\">if</span> <span class=\"n\">incl</span> <span class=\"k\">then</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n            <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">ts</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n            <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">TSyntax.mk</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">TSyntax.mk</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341332494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678652765
    },
    {
        "content": "<p>well <code>change at \\goal</code> doesn't work.</p>",
        "id": 341332594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678652849
    },
    {
        "content": "<p>I think I'm just misunderstanding what <code>expandLocation</code> actually does</p>",
        "id": 341332909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678653041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/change.20at/near/341332494\">said</a>:</p>\n<blockquote>\n<p>I don't know how to clear the old fvar, but here's something that kinda works:</p>\n</blockquote>\n<p>I forgot about <code>replace</code>... here's a (hacky) approximation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Replace</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Location</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">expandLocation</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Wildcards are not supported.\"</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">targets</span> <span class=\"n\">ts</span> <span class=\"n\">incl</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">allowed</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ts.size</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">incl</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">ts.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">incl</span><span class=\"o\">)</span>\n          <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">allowed</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Changing in more than one location is not supported\"</span>\n          <span class=\"k\">if</span> <span class=\"n\">incl</span> <span class=\"k\">then</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n            <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">ts</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n            <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">TSyntax.mk</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">TSyntax.mk</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341336651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678655901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's a little tricker than just revert/change/intro because the revert might revert multiple hypotheses. It's also a bit tricky because <code>change</code> needs to be able to handle <code>_</code>'s (Edit: in the implementation a few messages down, the pre-existing function <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.changeLocalDecl#doc\">docs4#Lean.MVarId.changeLocalDecl</a> handles the whole revert/change/intro for us, which is great)</p>",
        "id": 341353367,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> One problem with using replace is that when there are dependencies it creates a new local variable that shadows the old one.</p>",
        "id": 341353434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669351
    },
    {
        "content": "<p>I think I got an implementation, but it's hacky in a different way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ofNewType</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">))</span>\n    <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">ofNewType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTag</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">allowNaturalHoles</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n          <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">isAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">e.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">ofNewType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTag</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">allowNaturalHoles</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span><span class=\"o\">))</span>\n          <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">isAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n            <span class=\"n\">e.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"change failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">change</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 341353445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669364
    },
    {
        "content": "<p>Yeah I know that was a problem with using replace.</p>",
        "id": 341353482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678669387
    },
    {
        "content": "<p>The main part of the implementation is <code>mvarId.changeLocalDecl</code> and <code>mvarId.change</code> (and using <code>withLocation</code> to drive things)</p>",
        "id": 341353520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669419
    },
    {
        "content": "<p>I'm using <code>elabTermWithHoles</code> but I found I kept getting defeq errors when there were placeholders if I tried to work with the types directly</p>",
        "id": 341353584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669447
    },
    {
        "content": "<p>The workaround I'm using is to run <code>elabTermWithHoles</code> on <code>(_ : $newType)</code> instead, because somehow this creates the right kind of placeholders(?), but I also need to assign the metavariable directly since <code>isDefEq</code> won't do that when the terms are <code>Prop</code>s (at least I think that's the issue)</p>",
        "id": 341353669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678669539
    },
    {
        "content": "<p>There's a function <code>withAssignableSyntheticOpaque</code> that changes <code>isDefEq</code> to be able to assign to the metavariables that <code>elabTermWithHoles</code> seems to produce, and that appears to be the right thing to do here, giving a cleaner implementation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">hTy</span> <span class=\"bp\">←</span> <span class=\"n\">h.getType</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">newType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">hTy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTag</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">allowNaturalHoles</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n          <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">withAssignableSyntheticOpaque</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">hTy</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">h.getUserName</span>\n            <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">change</span> <span class=\"n\">mvarId</span>\n              <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"given type{indentExpr e}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal at {h'} to{indentExpr hTy}\"</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">newType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTag</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">allowNaturalHoles</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n          <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">withAssignableSyntheticOpaque</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n            <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">change</span> <span class=\"n\">mvarId</span>\n              <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"given type{indentExpr e}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal to{indentExpr tgt}\"</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.change</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"change failed\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341355927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678671369
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2836\">mathlib4#2836</a></p>",
        "id": 341356930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678672433
    },
    {
        "content": "<p>It turns out elaborating expressions as well as <code>show</code> does is trickier than I'm able to pull off (and <code>show</code> does a very good job at dealing with placeholders). So, for the main goal, it seems you can't do better than <code>evalTactic &lt;| ← `(tactic| show $newType)</code>. And then for hypotheses, there's this hack you can use where you elaborate a <code>show</code> expression, copying how the <code>show</code> (and <code>refine</code>) tactics work, but then you throw this expression away and just use some metavariables you get from this. It seems to work fine for creating side-goals with <code>?_</code>'s too (as unlikely as the use of those may be).</p>\n<p>A downside compared to before is that the error messages are a bit confusing since they refer to details of how <code>show ... from ...</code> elaborates.</p>\n<p>Here's the code now for reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">hTy</span> <span class=\"bp\">←</span> <span class=\"n\">h.getType</span>\n        <span class=\"c1\">-- This is a hack to get the new type to elaborate in the same sort of way that</span>\n        <span class=\"c1\">-- it would for a `show` expression for the goal.</span>\n        <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvars</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermWithHoles</span>\n                          <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">newType</span> <span class=\"k\">from</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">mvar</span><span class=\"o\">)))</span> <span class=\"n\">hTy</span> <span class=\"bp\">`</span><span class=\"n\">change</span>\n        <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mvar</span><span class=\"o\">))</span> <span class=\"o\">::</span> <span class=\"n\">mvars</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">newType</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"change tactic failed\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341591047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678748873
    }
]