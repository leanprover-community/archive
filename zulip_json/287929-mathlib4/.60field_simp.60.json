[
    {
        "content": "<p>Is there a new way to use <code>field_simp</code> or something? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 346381872,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1680451230
    },
    {
        "content": "<p>(<code>field_simp [hw, hy] at h</code> doesn't do any better, fwiw)</p>",
        "id": 346384753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680452638
    },
    {
        "content": "<p>What’s the result of <code>field_simp at h</code>?</p>",
        "id": 346384958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680452708
    },
    {
        "content": "<p>It just doesn't do anything. (But it doesn't give an error that the tactic failed)</p>",
        "id": 346385038,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1680452745
    },
    {
        "content": "<p>Hmmm…</p>",
        "id": 346385381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680452878
    },
    {
        "content": "<p>That’s not great</p>",
        "id": 346385446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680452887
    },
    {
        "content": "<p>One workaround is to use apply_fun to multiply both sides of h by y and w, and hope that <code>field_simp at h</code> makes progress</p>",
        "id": 346385768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680453044
    },
    {
        "content": "<p>I can’t test this since I’m on mobile right now</p>",
        "id": 346385889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680453093
    },
    {
        "content": "<p>oof. I'm seeing the same thing here. Does not work on the rationals either.</p>",
        "id": 346387285,
        "sender_full_name": "David Renshaw",
        "timestamp": 1680453651
    },
    {
        "content": "<p>In mathlib3, it does work.</p>",
        "id": 346387295,
        "sender_full_name": "David Renshaw",
        "timestamp": 1680453659
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3230\">!4#3230</a> should fix this hopefully</p>",
        "id": 346389256,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680454670
    }
]