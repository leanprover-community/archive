[
    {
        "content": "<p>I've noticed <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20rename_i&amp;type=code\">a few cases</a> now where <code>rename_i</code> has been added in the port to deal with an autogenerated name. Are we happy with this during porting, or should we be adding the explicit names to the tactics using autogenerated names?</p>",
        "id": 329266787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677005610
    },
    {
        "content": "<p>In favor of just using <code>rename_i</code> is that this is something that's very easy to clean up later by just burninating all uses of <code>rename_i</code> post-port.</p>",
        "id": 329267151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677005707
    },
    {
        "content": "<p><code>rename_i</code> is fine-ish. It's a code smell, but not terrible. Not all tactics allow you to control the new names, and even if they do if it's like <code>induction'</code> with a long list of names you might prefer to not do that and introduce the names in the cases instead (let's assume that the equivalent of <code>induction</code> didn't exist in this example). I've taken to using <code>next a b =&gt;</code> instead of <code>rename_i</code> though when used in this way</p>",
        "id": 329271418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677006891
    },
    {
        "content": "<p>It is the sort of thing a linter can find and possibly fix in the future though, so keep that in mind</p>",
        "id": 329271752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677006979
    },
    {
        "content": "<p>Each should be marked by a porting note.</p>",
        "id": 329281431,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677010054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rename_i.20during.20porting/near/329281431\">said</a>:</p>\n<blockquote>\n<p>Each should be marked by a porting note.</p>\n</blockquote>\n<p>If a linter can find them then what purpose does the porting note serve?</p>",
        "id": 329284666,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1677011152
    },
    {
        "content": "<p>Searching through the codebase, marker to reviewers. Also there isn’t yet a lint.</p>",
        "id": 329285177,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677011356
    },
    {
        "content": "<p>I think a porting note is uneccessary, you can just search through the codebase for <code>rename_i</code> since it's pretty much always a code smell</p>",
        "id": 329286869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677011932
    },
    {
        "content": "<p>Just searching through the codebase, I'd say ~90% of the <code>rename_i</code> would be trivial to remove, and the other 10% are tactic bugs, missing features, which makes it really had to do what I'm suggesting for a porting note, to document <em>why</em> a <code>rename_i</code> was necessary...</p>",
        "id": 329294813,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677014585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rename_i.20during.20porting/near/329294813\">said</a>:</p>\n<blockquote>\n<p>Just searching through the codebase, I'd say ~90% of the <code>rename_i</code> would be trivial to remove, and the other 10% are tactic bugs, missing features, which makes it really had to do what I'm suggesting for a porting note, to document <em>why</em> a <code>rename_i</code> was necessary...</p>\n</blockquote>\n<p>One would have to be an expert porter to find this out. Or alternatively ask experts. This would either slow down the port or use up the time of experts or both. If the linter does the job, then a diagnosis of why rename_I was used is not only consuming too much time, but also pointless. The linter could always be applied later to check for rename_I and the respective proofs improved.</p>",
        "id": 329305777,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1677018928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rename_i.20during.20porting/near/329305777\">said</a>:</p>\n<blockquote>\n<p>One would have to be an expert porter to find this out. Or alternatively ask experts.</p>\n</blockquote>\n<p>This certainly isn't the case for the 90% of the <code>rename_i</code> that are trivial to remove, a quick look at the tactic documentation that introduced the inaccessible name is all that's needed</p>",
        "id": 329307177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677019552
    },
    {
        "content": "<p>And that's probably less effort than having this discussion :)</p>",
        "id": 329307237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677019565
    },
    {
        "content": "<p>I'm preparing a refactor PR as we write.</p>",
        "id": 329308694,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677020178
    },
    {
        "content": "<p>I replaced rename_i usage in my PR, by using induction' instead of induction. It only seems to make the proof more messy, and all just for preserving an identifier name.</p>",
        "id": 329311609,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1677021486
    },
    {
        "content": "<p>You can use <code>induction</code> with <code>case</code>/<code>case</code>.</p>",
        "id": 329311764,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677021577
    },
    {
        "content": "<p>is there an example for this?</p>",
        "id": 329312830,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1677022187
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Sum'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum'</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum'</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">Sum'</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum'.inl</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s₁</span>\n  <span class=\"n\">case</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 329316136,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677023968
    },
    {
        "content": "<p>I think this works too?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">s₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 329324807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677028667
    },
    {
        "content": "<p>I don't know which is preferred</p>",
        "id": 329324871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677028687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2429\">!4#2429</a></p>\n<p>What's left are:</p>\n<ul>\n<li><code>split</code> and <code>split_ifs</code></li>\n<li><code>nontriviality</code></li>\n<li>one case in <code>Data.LazyList.Basic</code> where <code>intros</code> eats a variable number after an <code>apply</code> (the <code>rename_i</code> here could be avoided by moving the <code>intro</code> and <code>ext</code> into each case but that would be...worse).</li>\n<li>some particularly ugly cases in <code>Data.PFunctor.Univariate.M</code> where there's some shadowing going on after an <code>induction</code>, and <code>rename_i</code> is used to reclaim the shadowed original hypotheses.</li>\n</ul>",
        "id": 329327228,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677030485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rename_i.20during.20porting/near/329324871\">said</a>:</p>\n<blockquote>\n<p>I don't know which is preferred</p>\n</blockquote>\n<p>You should prefer <code>induction x with | foo x =&gt;</code> over <code>induction x; case foo x =&gt;</code>, because it has a more rigid structure. The <code>case</code> form should only be used when you are deliberately relaxing that structure, e.g. by proving only some of the cases and then using a different kind of automation</p>",
        "id": 329334843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677036275
    }
]