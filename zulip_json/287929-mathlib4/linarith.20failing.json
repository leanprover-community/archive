[
    {
        "content": "<p><code>linarith</code> is failing for me on the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">96</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>Is there something easy I can do about this?</p>",
        "id": 341474276,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678717072
    },
    {
        "content": "<p>Works for me on mathlib(edit: 3) from Jan</p>",
        "id": 341479776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678718179
    },
    {
        "content": "<p>oh sorry, just noticed lean 4</p>",
        "id": 341480295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678718283
    },
    {
        "content": "<p>Does <code>linarith</code> support rationals yet? I can't remember. <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> weren't you working on <code>cancel_denoms</code> at some point in order to support this?</p>",
        "id": 341482409,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678718750
    },
    {
        "content": "<p>I had a similar problem with the following :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>see <a href=\"https://github.com/leanprover-community/mathlib4/pull/2825/files#diff-e5aadca59b7b28686fba9dce98b624b6bef606e0615c3142c6e86c89fb756d53R278-R296\">https://github.com/leanprover-community/mathlib4/pull/2825/files#diff-e5aadca59b7b28686fba9dce98b624b6bef606e0615c3142c6e86c89fb756d53R278-R296</a></p>",
        "id": 341483913,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678719067
    },
    {
        "content": "<p>Quick sanity check (I'm not at a computer right now): does lean 4 interpret the numeral division as real division? Because the algorithm changed it occurred to me that it might be natural division</p>",
        "id": 341484218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678719127
    },
    {
        "content": "<p>We're no longer outside-in</p>",
        "id": 341484425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678719169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20failing/near/341484218\">said</a>:</p>\n<blockquote>\n<p>Quick sanity check (I'm not at a computer right now): does lean 4 interpret the numeral division as real division? Because the algorithm changed it occurred to me that it might be natural division</p>\n</blockquote>\n<p>It does interpret it as real number division.</p>",
        "id": 341484667,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678719225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20failing/near/341484425\">said</a>:</p>\n<blockquote>\n<p>We're no longer outside-in</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what do you mean?</p>",
        "id": 341486773,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678719685
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1915\">lean4#1915</a> -- oh -- maybe we're no longer left-to-right but we're still outside-in? I don't really understand the new algorithm yet.</p>",
        "id": 341489783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678720155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20failing/near/341482409\">said</a>:</p>\n<blockquote>\n<p>Does <code>linarith</code> support rationals yet? I can't remember. <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> weren't you working on <code>cancel_denoms</code> at some point in order to support this?</p>\n</blockquote>\n<p>Yep, still working on it! Sorry for the delay, I’ve lost some time recently on which I’d otherwise work on it; also, just wrapping up <code>mono</code> first (it’s done, just needs some refactoring and prettifying today), then cancel_denoms is up next</p>",
        "id": 341546900,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678733222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Are you still working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2323\">!4#2323</a>?</p>",
        "id": 344602050,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679812155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, does this message have any connection to this thread? It seems offtopic.</p>",
        "id": 344606035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679814855
    },
    {
        "content": "<p>Yes, the last message talked about the <code>mono</code> tactic. I'm trying to see how to port <code>cancel_denoms</code> myself right now</p>",
        "id": 344606301,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679815063
    },
    {
        "content": "<p>Yep, I’ve just gotten somewhat busy this past week or so. (Ah, I see that I didn’t yet push the commit which merges the version of the solve_by_elim refactor branch which passed checks, whoops; will do tomorrow, away from my computer rn. As mentioned in other threads the basic version works, I’m just seeing if I can refine the behavior.)</p>\n<p>Do you need cancel_denoms for something urgently? I’ve roughly laid out some of the code already but haven’t committed anything anywhere. See the <a href=\"https://github.com/leanprover-community/mathlib4/issues/430\">tactic porting tracking issue</a> for who’s working on what so we don’t duplicate work!</p>\n<p>EDIT: re: mono, nvm, can't sleep—I'll fix the branch now</p>",
        "id": 344619941,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679822235
    },
    {
        "content": "<p>I'm not urgently needing <code>cancel_denoms</code>; I saw <a href=\"#narrow/stream/116395-maths/topic/picking.20up.20lean4.20with.20math/near/344542281\">this thread</a> which is about <code>linarith</code> and how it currently can't handle fractions</p>",
        "id": 344629140,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679825770
    },
    {
        "content": "<p>And I thought \"oh, <code>cancel_denoms</code> can provide some of that functionality\"</p>",
        "id": 344629330,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679825850
    },
    {
        "content": "<p>And you mentioned that <code>cancel_demons</code> was coming up after <code>mono</code></p>",
        "id": 344629628,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679825951
    },
    {
        "content": "<p>Ah, sorry, my earlier message by itself wasn't clear: I meant that I would try to wrap up cancel_denoms after mono. i.e. it was up next on my to-do list :)</p>",
        "id": 344630198,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679826156
    },
    {
        "content": "<p>But, still, there does seem to be a need for it soon...I'll have some time starting monday and push forward on it! :)</p>",
        "id": 344631345,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679826604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> , please don't add labels to PRs that you're not (co-)managing! The mono PR is green and can likely be used in other PR's (see <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/341992858\">here</a>) but I'm not putting it out for review just yet because it's not sufficiently tested and/or factored properly. (Also, I'm trying to refine the <code>mono*</code> behavior if I can.)</p>",
        "id": 344752551,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679888756
    },
    {
        "content": "<p>Some news from <code>linarith</code>: Floris, Kyle and I have just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3797\">!4#3797</a> which ports <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cancel_denoms\">docs#cancel_denoms</a> which is the missing preprocessor that is meant to allow <code>linarith</code> to get rid of denominators. The application to <code>linarith</code> is not part of this PR. <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 355772452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683206484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 355772497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683206493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3797\">!4#3797</a></p>",
        "id": 355775993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1683207227
    }
]