[
    {
        "content": "<p>I am working on a problem that has to do with solving for the cardinality of a set.  In order to solve the problem it is natural to construct maps onto new sets and show that the cardinality of the sets must agree.  To do this, I have been mainly relying on Set.InjOn.encard_image and in the case where the sets are actually equal Set.ext.  Although this works, it has been incredibly tedious to use  Set.InjOn.encard_image, as it first requires proving the InjOn property, and then proving that the image of the map is indeed the desired set, which involves using Set.ext to prove equality of the sets.  For each step, I generally have to unpack all of the different sets and then use all the membership functions, such as Set.mem_image and Set.mem_setOf or dsimp to finally arrive at the results, which tend to be repetitions of previously proved results.</p>\n<p>I am wondering if there are any more powerful tools for this type of procedure, and whether there are higher level tactics that can be used to shorten this process.  Schematically the process looks like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f_inj</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">set_a</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">set_a</span> <span class=\"bp\">=</span> <span class=\"n\">set_b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- generally long and complicated proof here</span>\n<span class=\"n\">card_eq</span> <span class=\"o\">:=</span> <span class=\"n\">Set.InjOn.encard_image</span> <span class=\"n\">f_inj</span>\n</code></pre></div>\n<p>In one problem, I had a series of set equivalences that compose to give the final answer, and each proof ends up being about a hundred lines, for what generally ends up being a rather simple set equivalence.  Any help with the general strategy for this type of proof would be appreciated!</p>",
        "id": 395984490,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1696986042
    },
    {
        "content": "<p>Are your sets finite?</p>",
        "id": 396023657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697007888
    },
    {
        "content": "<p>Also I think this rather belongs in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> or <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a></p>",
        "id": 396023785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697007943
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Trouble.20with.20sets\">#lean4 &gt; Trouble with sets</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 396029121,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697010195
    },
    {
        "content": "<p>The sets are finite but I have to prove they are finite, which is part of the process of proving the various set equivalences, therefore I have to use methods that are not only tailored for finite sets.  I'm looking for a tactic kind of like congr for working with sums, or something of that nature.  I'm also wondering if I'm going about it the best way.  If this type of tool doesn't exist, that's ok too, I just want to make sure that I'm not missing an easier way to do things.</p>",
        "id": 396138124,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1697045951
    },
    {
        "content": "<p>If your sets are finite, I would highly advise you use <code>Finset</code>. Can you give us more context? ie click here <span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span> <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 396157138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697054489
    }
]