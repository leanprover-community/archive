[
    {
        "content": "<p>MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Bar.lemma1</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.Bar.lemma2</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat.Foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bar</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">lemma1</span> <span class=\"c1\">-- unknown identifier 'lemma1'</span>\n<span class=\"k\">#check</span> <span class=\"n\">lemma2</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">_root_.Bar</span> <span class=\"c1\">-- unknown namespace '_root_.Bar'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat.Foo</span>\n</code></pre></div>",
        "id": 357210490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683708881
    },
    {
        "content": "<p>This problem shows up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3833\">https://github.com/leanprover-community/mathlib4/pull/3833</a> where we want to <code>open Primrec</code>, but the effective result is <code>open Nat.Primrec</code>.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara K≈ç</span></p>",
        "id": 357210722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683708939
    },
    {
        "content": "<p>Is this a known issue? Is there a workaround available?</p>",
        "id": 357211175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683709044
    },
    {
        "content": "<p>I think this behavior gets used a lot, e.g., <code>open Lean Meta</code> or whatever it is</p>",
        "id": 357215456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683709818
    },
    {
        "content": "<p>I see. But is there a way top open non-nested namespaces that conflict namewise with nested ones?</p>",
        "id": 357227379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683712145
    }
]