[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , I'm finally finishing this up now that <code>Rat.cast</code> is reducible and I can get rid of <code>LawfulOfScientific</code>.</p>\n<ol>\n<li>\n<p>I noticed that we're using <code>assumeInstancesCommute</code> instead of <code>assertInstancesCommute</code> and I'm assuming the same philosophy applies here: that is, the lemmas are going to have an argument saying that the given DivisionRing OfScientific instance is equal to <code>Rat.ofScientific</code> followed by <code>Rat.cast</code>, and we just supply this as <code>Eq.refl</code> and let it fail in the kernel if it must (which it almost surely won't). Just wanted to run it by you in case we actually wanted a defeq check here for some reason.</p>\n</li>\n<li>\n<p>Is it better performance-wise for those lemmas to have a hypothesis stating that the instance per se is equal to a canonical version, or one saying that for all arguments, its field applied to arguments is equal to the canonical one applied to arguments? (Or, that the single field of the instance is equal to the canonical function as a function?) Not sure if this difference matters or not.</p>\n</li>\n<li>\n<p>Likewise, does it matter (performance-wise) whether the argument to <code>Eq.refl</code> is the canonical ofScientific or the division-ring one? Does it affect what we unfold and how?</p>\n</li>\n</ol>",
        "id": 342468787,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679027257
    },
    {
        "content": "<p>Yes to (1). What is \"those lemmas\" in (2)?</p>",
        "id": 342469796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679028196
    },
    {
        "content": "<p>the lemmas should not have any arguments asserting equality of instances</p>",
        "id": 342469818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679028229
    },
    {
        "content": "<p>Qq has the <code>=Q</code> type to represent <em>definitional equalities</em> that should hold. There is no equivalent expression in object-level lean</p>",
        "id": 342469901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679028292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/finishing.20up.20ofScientific.20in.20norm_num/near/342469818\">said</a>:</p>\n<blockquote>\n<p>... What is \"those lemmas\" in (2)?</p>\n<p>the lemmas should not have any arguments asserting equality of instances</p>\n</blockquote>\n<p>These are the <code>IsRat_ofScientific_of_true</code> and <code>isNat_ofScientific_of_false</code> lemmas, which need one of the following as a hypothesis</p>\n<ol>\n<li><del><code>σα = ⟨fun m s e ↦ (Rat.ofScientific m s e : α)⟩</code></del> (assert equality of instances)</li>\n<li><code>OfScientific.ofScientific (α := α) = fun m s e ↦ (Rat.ofScientific m s e : α)</code></li>\n<li><code>∀ m s e, OfScientific.ofScientific (α := α) m s e = (Rat.ofScientific m s e : α)</code></li>\n</ol>",
        "id": 342470212,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679028558
    },
    {
        "content": "<p>(Ignore the current commits, I pushed right before I saw your message, lol)</p>",
        "id": 342470417,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679028656
    },
    {
        "content": "<p>link?</p>",
        "id": 342470442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679028671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a></p>",
        "id": 342470472,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679028708
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isRat_ofScientific_of_true</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">σα</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">σα</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)⟩</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">true</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lh</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lh</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">Rat.ofScientific</span><span class=\"o\">,</span> <span class=\"n\">Rat.normalize_eq_mkRat</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n</code></pre></div>\n</blockquote>\n<p>You should not be taking a <code>OfScientific α</code> hypothesis in this theorem, it should be the one derived from the division ring</p>",
        "id": 342470605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679028785
    },
    {
        "content": "<p>Right, true</p>",
        "id": 342470651,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679028831
    },
    {
        "content": "<p>Hmm, using option 2, it doesn't like it when I infer an OfScientific instance anymore. Is this...an ok type for the hypothesis in the evaluator? Looks atypical. A little unsure of using explicit projections here. <code>Q((($dα).toOfScientific).ofScientific = fun m s e ↦ (Rat.ofScientific m s e : $α))</code></p>",
        "id": 342471255,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679029253
    },
    {
        "content": "<p>Alright, should be fixed, using option 2. (Can switch to 3 easily, I think)</p>",
        "id": 342471684,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679029574
    },
    {
        "content": "<p>...Nevermind, the tests don't work anymore. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 342471833,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679029698
    },
    {
        "content": "<p>(Oh! because Qq was \"turned off\" for the Eq.refl's. Just forgot to fix those.)</p>",
        "id": 342471889,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679029747
    },
    {
        "content": "<p>Hmm, it doesn't like that. \"(kernel) deep recursion detected\"</p>",
        "id": 342472231,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679029981
    },
    {
        "content": "<p>that Q(...) does indeed look atypical</p>",
        "id": 342472258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679029998
    },
    {
        "content": "<p>you should not need anything like that</p>",
        "id": 342472262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030004
    },
    {
        "content": "<p>I don't really understand what you are trying though</p>",
        "id": 342472362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030064
    },
    {
        "content": "<p>is an <code>inferScientificOf dα</code> def the way to go?</p>",
        "id": 342472378,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030077
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 342472379,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030080
    },
    {
        "content": "<p>I mean you are speaking without context</p>",
        "id": 342472409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030111
    },
    {
        "content": "<p>you say \"it doesn't work\" before saying what \"it\" is</p>",
        "id": 342472418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030127
    },
    {
        "content": "<p>Right, fair. This test gives the deep recursion error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">14159</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">314159</span><span class=\"bp\">/</span><span class=\"mi\">100000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n</code></pre></div>",
        "id": 342472525,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030165
    },
    {
        "content": "<p>that could mean that the term doesn't typecheck</p>",
        "id": 342472664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030227
    },
    {
        "content": "<p>I think it does? The other tests work</p>",
        "id": 342472686,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030244
    },
    {
        "content": "<p>what did you try? The test itself doesn't tell me much</p>",
        "id": 342472803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/finishing.20up.20ofScientific.20in.20norm_num/near/342472686\">said</a>:</p>\n<blockquote>\n<p>I think it does? The other tests work</p>\n</blockquote>\n<p>Also, if it's a good test it won't be testing exactly the same code paths as previous tests, so it is possible that norm_num only generates a bad term in this case</p>",
        "id": 342472866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030354
    },
    {
        "content": "<p>When I was first implementing <code>OfScientific</code>, there were problems similar to this—I forget what exactly was different with the code to cause them, though. Terms with only a couple digits would work, but terms with more digits would cause a stack overflow. So, there are some tests that just have more digits, and it seems that was illuminating...</p>",
        "id": 342473197,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030593
    },
    {
        "content": "<p>remember that in norm_num type errors don't always manifest as a failure, they can also manifest as unfolding hell. Especially since the theorems being asserted are usually true, if you just normalize everything you often get a proof anyway, but with unacceptable performance and possibly a stack overflow or timeout</p>",
        "id": 342473316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030680
    },
    {
        "content": "<p>you should check the defeq trace to see if anything surprising is being unfolded</p>",
        "id": 342473390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679030756
    },
    {
        "content": "<p>It's weird. having the extra instances around (as arguments to the lemmas used) seemed to work just fine, even though I'm sure this was abusing something somehow. I'll check that trace...</p>",
        "id": 342473486,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679030833
    },
    {
        "content": "<p>Unrelated, but I noticed <code>evalSub</code> used some of the nice new Qq machinery for its initial checks. Not doing it in this PR, but should the others follow suit? Is that better, performance-wise?</p>",
        "id": 342477605,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679033338
    },
    {
        "content": "<p>Interesting. Here's what I've found:</p>\n<p>As long as the following two things are the case, the tests work fine. (Fast, even with an absurd number of digits.)</p>\n<ol>\n<li>The lemmas take an explicit <code>OfScientific α</code> argument. This means that the type signature looks like this:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isRat_ofScientific_of_true</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">σα</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">@</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">α</span> <span class=\"n\">σα</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">α</span> <span class=\"n\">σα</span> <span class=\"n\">m</span> <span class=\"n\">true</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>We use <code>let σα ← inferOfScientificOfDivisionRing dα</code> instead of something like <code>(($dα).toOfScientific).ofScientific</code> or <code>have σα : Q(OfScientific α) := q(($dα).ofScientific</code>.</li>\n</ol>\n<p>If we use the obvious alternative to either of those—namely just a <code>DivisionRing</code> argument in the lemmas or a projection to obtain the instance (in <em>any</em> spot, such as the <code>have</code>)—we end up with <code>(kernel) deep recursion detected</code> for sufficiently long digit strings.</p>",
        "id": 342479889,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679034633
    },
    {
        "content": "<p>I don't know why any of this happens, and I couldn't read a broader message from the defeq traces. For now, though, the version that works is up.</p>",
        "id": 342481831,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679035701
    },
    {
        "content": "<p>Here's a minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isRat_ofScientific_of_true'</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">true</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">OfScientific.ofScientific</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">Rat.ofScientific</span><span class=\"o\">,</span> <span class=\"n\">Rat.normalize_eq_mkRat</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsRat</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">Rat.divisionRing</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">14159</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"mi\">100000</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">isRat_ofScientific_of_true'</span> <span class=\"n\">ℚ</span> <span class=\"n\">Rat.divisionRing</span> <span class=\"mi\">314159</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"mi\">100000</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>",
        "id": 342484644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679037054
    },
    {
        "content": "<p>Minimized (depending on your metrics) further: it's (also?) a <code>mkRat</code> issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">IsRat</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsRat</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">Rat.divisionRing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkRat</span> <span class=\"mi\">314159</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"mi\">100000</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">ℚ</span> <span class=\"n\">Rat.divisionRing</span> <span class=\"mi\">314159</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"mi\">100000</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>",
        "id": 342485859,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679037652
    },
    {
        "content": "<p>Minimized some more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">Rat</span> <span class=\"n\">Rat.instOfScientificRat</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">OfScientific.ofScientific</span> <span class=\"n\">Rat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toOfScientific</span> <span class=\"n\">Rat</span> <span class=\"n\">Rat.divisionRing</span><span class=\"o\">)</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span>\n      <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span>\n        <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Rat.instOfScientificRat.1</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivisionRing.toOfScientific.1</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span> <span class=\"bp\">=?=</span> <span class=\"n\">RatCast.ratCast</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">Rat.normalize</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n              <span class=\"k\">else</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">314159</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">RatCast.ratCast</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Decidable.casesOn</span> <span class=\"o\">(</span><span class=\"n\">instDecidableEqBool</span> <span class=\"n\">true</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">314159</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)))</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n                  <span class=\"n\">Rat.normalize</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"mi\">314159</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">RatCast.ratCast</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"mi\">314159</span> <span class=\"n\">true</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 342486564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038003
    },
    {
        "content": "<p>It appears that <code>ratCast</code> is less unfold-worthy than <code>Rat.ofScientific</code></p>",
        "id": 342486639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038040
    },
    {
        "content": "<p>this seems to make the work on making <code>OfScientific</code> diamonds commute worthless</p>",
        "id": 342486847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038118
    },
    {
        "content": "<p>Is something similar true for <code>mkRat</code> vs. <code>ratCast</code>, then, given the above example which doesn't involve any sort of <code>OfScientific</code>?</p>",
        "id": 342486880,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679038137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/finishing.20up.20ofScientific.20in.20norm_num/near/342486847\">said</a>:</p>\n<blockquote>\n<p>this seems to make the work on making <code>OfScientific</code> diamonds commute worthless</p>\n</blockquote>\n<p>well, at least the <code>Eq.refl</code> proof still succeeds now thanks to <code>Rat.cast</code> reducibility</p>",
        "id": 342487110,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679038234
    },
    {
        "content": "<p>yes, I mean it's the same issue, <code>&lt;big term&gt; = RatCast.ratCast &lt;big term&gt;</code> should try to unfold <code>ratCast</code>, not <code>&lt;big term&gt;</code></p>",
        "id": 342487127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038243
    },
    {
        "content": "<p>that will only happen if <code>&lt;big term&gt;</code> can be normalized (e.g. it is a variable). If not lean will go crazy unfolding it</p>",
        "id": 342487242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038295
    },
    {
        "content": "<p>making <code>Rat.ofScientific</code> opaque here will probably also work</p>",
        "id": 342487453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679038385
    },
    {
        "content": "<p>does it...make any sense to make <code>RatCast.ratCast</code> reducible? if it's something we want to unfold in most places? (can you even make structure fields reducible in this specific sense of the word?)</p>",
        "id": 342487743,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679038506
    },
    {
        "content": "<p>(also, how would you unfold <code>Rat.ofScientific</code> to prove anything about it if it were opaque?)</p>",
        "id": 342489802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679039313
    },
    {
        "content": "<p>If it is <code>@[irreducible]</code> then you can still prove things about it</p>",
        "id": 342490665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679039656
    },
    {
        "content": "<p>and if it is <code>irreducible_def</code> then it is literally an <code>opaque</code> but there is an equality to the definition that you can use to prove things</p>",
        "id": 342490715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679039678
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 342490970,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679039782
    },
    {
        "content": "<p>more precisely it's not <code>ratCast</code> itself we want to unfold (it is a projection so this doesn't make sense) but rather <code>@RatCast.ratCast.{0} Rat (@DivisionRing.toRatCast.{0} Rat Rat.divisionRing)</code></p>",
        "id": 342491026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679039808
    },
    {
        "content": "<p>Yeah, hmmm. It would be neat if we could somehow use the head of an expression to give lean a hint that it ought to readily unfold a specified application.</p>\n<p>Or, honestly, just the ability to give structure projections in particular an attribute that makes complete applications of the projections readily unfold. Maybe that's what being a <code>reducible</code> structure projection should mean.</p>",
        "id": 342491188,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679039879
    },
    {
        "content": "<p>(But I can also imagine that having complicated ways to mess with that kind of thing could cause some really unexpected behavior down the line...)</p>",
        "id": 342491482,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679039992
    },
    {
        "content": "<p>Anyway, should I really go ahead and make <code>Rat.ofScientific</code> irreducible? It seems like a strange reason to adjust that definition—it seems like it's \"not <code>Rat.ofScientific</code>'s responsibility\", so to speak—but I guess this definition is highly specific in its usage, so adjusting it so it can be used this way might make sense.</p>\n<p>Though, is it better or worse than the current \"non-instance <code>OfScientific α</code> argument\" setup which seems to circumvent this unfolding problem anyway? (Esp. given that the theorems <code>isRat_ofScientific_of_true</code>, <code>isNat_ofScientific_of_false</code> are even <em>more</em> niche than <code>Rat.ofScientific</code>?)</p>",
        "id": 342496316,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679041691
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a> finally passes CI after two months of work from <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>.  Could I ping this for review from someone who is confident with meta code?  I'm looking forward to having this in mathlib!</p>",
        "id": 342751198,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679135542
    },
    {
        "content": "<p>Let me give it just ooone more once-over today and then I’ll put it out for review! 😁</p>",
        "id": 342829300,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679166318
    },
    {
        "content": "<p>Depending, of course, on what we want to do about this unfolding business.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, should we make the round trip to std4 first and make Rat.ofScientific irreducible, or is letting these niche lemmas have a slightly weird type signature ok? (Or is there a better solution?)</p>",
        "id": 342829516,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679166462
    },
    {
        "content": "<p>I've put it out for review because this is technically a review question, and we can always refactor if needed—this certainly won't be the last time NormNum.Basic is touched. :) And/or it can be addressed during review.</p>",
        "id": 342852571,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679182894
    },
    {
        "content": "<blockquote>\n<p>Anyway, should I really go ahead and make Rat.ofScientific irreducible?</p>\n</blockquote>\n<p>Yes, it won't reduce anyhow since it uses <code>gcd</code>.</p>",
        "id": 343520188,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679432527
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/commit/4167b2466a7dbad3cf489100d7d26559c3be7e21\">https://github.com/leanprover/lean4/commit/4167b2466a7dbad3cf489100d7d26559c3be7e21</a></p>",
        "id": 343521725,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679433080
    },
    {
        "content": "<p>Alright, here's a PR making Rat.ofScientific irreducible :) <a href=\"https://github.com/leanprover/std4/pull/109\">std4#109</a></p>",
        "id": 343531197,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679436916
    },
    {
        "content": "<p>So, I've been fixing <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a> to incorporate the std bump (thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> !) and...I've hit <code>(kernel) deep recursion</code> again. That's on me—I shouldn't have assumed that the proposed solution of making <code>Rat.ofScientific</code> irreducible would work. I apologize for the wasted time. (Hopefully it wasn't <em>completely</em> wasted, I guess: defeq checks involving <code>Rat.ofScientific</code> are probably now less costly.) Lesson learned: <em>always</em> test a potential solution before using it.</p>\n<h2>The error</h2>\n<p><strong>tl;dr</strong> it seems to be linked to the well-foundedness-based definition of gcd somehow.</p>\n<p>The error is actually pretty generic. I've minimized it a lot, and I don't know if it's to do with defeq checks after all: the <code>Meta.isDefEq</code> trace is very short.. (I mean, this is a <code>(kernel)</code> error, so maybe that makes sense.)</p>\n<p>Here's a version of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">10000</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Rat.normalize</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Rat.normalize</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>\n<p>Note that the <code>id</code> (or some other expression equivalent to id) is required. Using a reducible version like <code>@[reducible] def idR (a : α) := a</code> doesn't change the error; but using <code>fun x =&gt; x</code> instead <em>does</em> eliminate the error. (I'm guessing because of how lambdas are handled, somehow?)</p>\n<p>Perhaps we can blame the <code>gcd</code> in <code>Rat.normalize</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>\n<p>In turn, this seems to be due to the well-foundedness implementation, not the external code. Here's <code>gcd</code> copied over but without the <code>extern</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">gcdF</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span>  <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gcd2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">gcdF</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">gcd2</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gcd2</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>\n<p>(Note, in case it's informative: in the course of teasing this out, Lean soaked up a <em>lot</em> of memory. Quitting VS code freed up <em>23 GB</em>. And according to my iStatMenus R/W widget, it continues writing to disk for <em>minutes</em> after any errors have been cleared from the file, and only stops when I quit VS code or <code>killall lean</code>! Weird.)</p>\n<p>(Note: making <code>gcd2</code> irreducible doesn't help.)</p>\n<h3>Wrapping tricks</h3>\n<p>Oddly, the following prevents the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p><code>Int.ofNat</code> is not special here—other expressions like e.g. casts produce the same behavior—but notably, it can't be replaced with simply <code>id</code>.</p>\n<p>I'm guessing that something equivalent to whatever's going on here might be why I can play \"tricks\" to make the <code>norm_num</code> extension work (like passing in the instance as an argument to the lemmas).</p>\n<p>In case it helps, note that switching the <code>id</code> and the <code>Int.ofNat</code> brings back the error—this makes a sort of sense, as now we're back to comparing the two expressions that caused us an issue before once we peel off <code>Int.ofNat</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- (kernel) deep recursion detected</span>\n</code></pre></div>",
        "id": 344787759,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679903650
    },
    {
        "content": "<p>I wonder if this could be related to the problems with the <code>@[irreducible]</code> attribute (reported in <a href=\"https://github.com/leanprover/lean4/pull/2161\">lean4#2161</a>)?</p>",
        "id": 344788706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679903972
    },
    {
        "content": "<p>I tried to make <code>gcd2</code> monadic to test that. Interestingly, before I even got to play around with irreducibility, when <code>trace[debug]</code> was present, the error vanished:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">gcdF</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"{x}\"</span><span class=\"bp\">;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span>  <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gcd2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">gcdF</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">gcd2</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gcd2</span> <span class=\"mi\">314159</span> <span class=\"mi\">10000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>But remove <code>trace[debug] \"{x}\";</code> (and keep the <code>do</code>/monadicity), and suddenly it causes a <code>(kernel) deep recursion detected</code> error! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 344793523,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679905310
    },
    {
        "content": "<p>(Though, are <code>noncomputable def</code>s irreducible by default? That would make sense...)</p>",
        "id": 344793890,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679905399
    },
    {
        "content": "<p><del>Is there a way to download the lean4 build from <a href=\"https://github.com/leanprover/lean4/pull/2162\">lean4#2162</a> without building it myself? I'd like to test if that solves the issue, but it takes quite a long time for my computer to compile lean from scratch <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></del></p>",
        "id": 344795599,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679905851
    },
    {
        "content": "<p>Ah, noncomputable defs are not automatically irreducible, i see. So I don't think <a href=\"https://github.com/leanprover/lean4/pull/2162\">lean4#2162</a> will make a difference...</p>",
        "id": 344799169,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679906763
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2171\">lean4#2171</a></p>",
        "id": 344963901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679949623
    },
    {
        "content": "<p>Alright, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a> is finally green and out for review (again)! :) It was reviewed by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> at an earlier stage, so I suppose all that needs review are the commits afterward.</p>\n<p>(Note: it was agreed in the meeting to go ahead with the lemmas which take an explicit <code>OfScientific</code> instance argument. When the <code>(kernel) deep recursion detected</code> error is addressed, I'll fix the lemmas.)</p>",
        "id": 345019803,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679976724
    }
]