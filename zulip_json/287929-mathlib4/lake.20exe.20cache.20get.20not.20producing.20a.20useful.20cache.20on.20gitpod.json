[
    {
        "content": "<p>I'm repeatedly finding that the following doesn't work:</p>\n<ul>\n<li>Open gitpod on a random branch</li>\n<li>Let <code>lake exe cache get</code> run. Everything works fine.</li>\n<li><code>git checkout some-other-branch</code></li>\n<li><code>pkill lake; pkill lean</code></li>\n<li><code>lake exe cache get</code> (succeeds)</li>\n<li>Open a file that is definitely cached on the branch</li>\n<li>VSCode starts building random files in <code>Std</code></li>\n</ul>",
        "id": 392105298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695212280
    },
    {
        "content": "<p>Even <code>lake exe cache clean!; lake exe cache get!</code> still leaves me with a bad cache</p>",
        "id": 392106147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695212543
    },
    {
        "content": "<p>Is this caused by switching branch changing the lean toolchain? (and vscode-lean4 caching the old version of lean?)</p>",
        "id": 392106249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695212593
    },
    {
        "content": "<p>Are you explicitly restarting the server using the corresponding VS Code command after checking out? Does that help?</p>",
        "id": 392107272,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695213001
    },
    {
        "content": "<p>Yes, if I didn't do that then it wouldn't build anything at all!</p>",
        "id": 392107505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695213082
    },
    {
        "content": "<p>Does it work locally? I'm only managing to get a cache with</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>lake-packages/\nrm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>build/\nrm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>~/.cache/mathlib\nkillall<span class=\"w\"> </span>lean\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>clean!\nlake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n</code></pre></div>\n<p>recently</p>",
        "id": 392108810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695213603
    },
    {
        "content": "<p>Ah, I bet those <code>rm</code>s are the important bit (though I assume it's better to do them after the <code>killall</code>)</p>",
        "id": 392108990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695213665
    },
    {
        "content": "<p>I don't know if all of those lines are load-bearing, but most of them seem to be</p>",
        "id": 392109283,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695213751
    },
    {
        "content": "<p>I usually skip the third line of Ruben's process (<code>rm ~/.cache/mathlib</code>) and, so far, it worked for me.</p>",
        "id": 392116251,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695216024
    },
    {
        "content": "<p>From the other thread, it seems like <code>lake exe cache clean</code> is useless and <code>lake clean</code> does the job</p>",
        "id": 392117341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216392
    },
    {
        "content": "<p>Maybe ever removing packages/build can be skipped with <code>lake clean</code>?</p>",
        "id": 392117949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695216589
    },
    {
        "content": "<p>I'll try to remember to experiment, next time I have problems with the cache.</p>",
        "id": 392118239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695216663
    },
    {
        "content": "<p>Going back to this, I had something broken again in the cache and the following worked:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># end of previous `lake build` that was really building</span>\n<span class=\"o\">[</span><span class=\"m\">557</span>/3776<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Data.Nat.Basic\n<span class=\"o\">[</span><span class=\"m\">558</span>/3776<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Algebra.Ring.MinimalAxioms\n<span class=\"o\">[</span><span class=\"m\">559</span>/3776<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Algebra.Field.Defs\n^C\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>clean\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>/6<span class=\"o\">]</span><span class=\"w\"> </span>Fetching<span class=\"w\"> </span>proofwidgets<span class=\"w\"> </span>cloud<span class=\"w\"> </span>release\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">7</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\nNo<span class=\"w\"> </span>files<span class=\"w\"> </span>to<span class=\"w\"> </span>download\nDecompressing<span class=\"w\"> </span><span class=\"m\">3778</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">8067</span><span class=\"w\"> </span>ms\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"c1\"># no output, took about a second</span>\n</code></pre></div>\n<p>So, <code>lake clean</code> seems to take care of the <code>rm</code>s and <code>lake exe cache clean!</code>!  This is great!</p>",
        "id": 392296964,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695293686
    },
    {
        "content": "<p>Yes, <code>cache</code> is badly broken for me today and requires a <code>lake clean</code> between most branch switches. If someone is able to investigate that would be great.</p>",
        "id": 392297199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695293780
    },
    {
        "content": "<p>It needs to be updated for 4.1.0</p>",
        "id": 392297270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293808
    },
    {
        "content": "<p>there are new build files that need to go in the cache files</p>",
        "id": 392297326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293833
    },
    {
        "content": "<p>Sorry, I don't understand.</p>",
        "id": 392297501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695293900
    },
    {
        "content": "<p>currently we only store <code>.olean</code> in the ltar files, we need to also package all the new files lake is making now</p>",
        "id": 392297565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293933
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7291\">#7291</a></p>",
        "id": 392299090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695294532
    }
]