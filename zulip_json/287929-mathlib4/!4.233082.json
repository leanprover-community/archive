[
    {
        "content": "<p>I've just got this building again. It might be worth making this relatively high priority, because it keeps breaking against master. It also should hopefully restore behaviour a bit closer to mathlib3 and make porting a little easier.</p>",
        "id": 348482843,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681224297
    },
    {
        "content": "<p>It would be nice to sort out the <code>Finset.mapEmbedding_apply</code> issue, which seems worrying.</p>",
        "id": 348560581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681246540
    },
    {
        "content": "<p>I'd err on the side of merging and then sorting it out but I'm biased.</p>",
        "id": 348566905,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681249539
    },
    {
        "content": "<p>Is there a reason you've put almost all of the PR description below the <code>---</code>?</p>",
        "id": 348569469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681250737
    },
    {
        "content": "<p>It looks to me like the <code>mapEmbedding_apply </code> failure is due to a missing delta reduction</p>",
        "id": 348570619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681251312
    },
    {
        "content": "<p>That is, I think lean is being confused by the way that <code>RelEmbedding</code> is an alias for <code>OrderEmbedding</code></p>",
        "id": 348574029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681252839
    },
    {
        "content": "<p>Comparing terms, <code>have := @mapEmbedding_apply α β f a</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">RelHomClass.toFunLike</span>\n  <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but the goal contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">↪</span><span class=\"n\">r</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">RelHomClass.toFunLike</span>\n  <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 348574411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681253011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233082/near/348569469\">said</a>:</p>\n<blockquote>\n<p>Is there a reason you've put almost all of the PR description below the <code>---</code>?</p>\n</blockquote>\n<p>Habit. I'll change it I guess.</p>",
        "id": 348693618,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681297902
    },
    {
        "content": "<p><code>abbrev</code> just seems like a bad idea to me. It's not reducible enough.</p>",
        "id": 348696573,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681298750
    },
    {
        "content": "<p>I see where the real problem lies. <code>le_eq_subset</code> is a <code>simp</code> lemma. So in <code>Data.Finset.Powerset</code>, <code>dsimp only [RelEmbedding.coe_toEmbedding, mapEmbedding_apply]</code> works but <code>dsimp [RelEmbedding.coe_toEmbedding, mapEmbedding_apply]</code> does not work. So it's probably a bad idea to use <code>OrderEmbedding</code> on things where we simplify <code>le</code> to a different relation.</p>",
        "id": 348698671,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681299279
    },
    {
        "content": "<p>Arguably <code>mapEmbedding_apply</code> is not in simp normal form on the LHS</p>",
        "id": 348699779,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681299551
    },
    {
        "content": "<p>Interestingly the linter doesn't see a problem here even though <code>simp</code> does not prove <code>mapEmbedding_apply2</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mapEmbedding_apply</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">RelEmbedding</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n     <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finset.map_embedding_apply</span> <span class=\"n\">Finset.mapEmbedding_apply</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mapEmbedding_apply2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">RelEmbedding</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n     <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 348700386,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681299672
    },
    {
        "content": "<p>I'm not sure of the best solution here.</p>",
        "id": 348700853,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681299758
    },
    {
        "content": "<p><code>order_embedding</code> being an abbreviation of <code>rel_embedding</code> was arguably a bad design decision in the first place. I would personally be happy to make it its own structure.</p>",
        "id": 348703531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681300349
    },
    {
        "content": "<p>It's a shame that <code>(. ⊆ .) ↪r (. ⊆ .)</code> delaborates as <code>(fun x x_1 =&gt; x ⊆ x_1) ↪r fun x x_1 =&gt; x ⊆ x_1</code></p>",
        "id": 348704138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681300480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233082/near/348703531\">said</a>:</p>\n<blockquote>\n<p><code>order_embedding</code> being an abbreviation of <code>rel_embedding</code> was arguably a bad design decision in the first place. I would personally be happy to make it its own structure.</p>\n</blockquote>\n<p>That's a long-term fix that, but I think a temporary fix would be better before that. I could write a new version of <code>mapEmbedding_apply</code> with the LHS in simp normal form perhaps, to be deleted when the refactor goes through?</p>",
        "id": 348713480,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681302573
    },
    {
        "content": "<p>Do we know why this only becomes a problem after <a href=\"https://github.com/leanprover-community/mathlib4/pull/3082\">!4#3082</a>?</p>",
        "id": 348715959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681303058
    },
    {
        "content": "<p>It's not clear. The LHS of <code>mapEmbedding_apply</code> in current mathlib4 contains the following term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">RelEmbedding.toEmbedding</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p><code>simp only [mapEmbedding_apply]</code> can prove a version with <code>subset</code> instead of <code>le</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">RelEmbedding.toEmbedding</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>So for some reason <code>simp</code> doesn't care about the difference between <code>subset</code> and <code>le</code> here, but it does in the new version.</p>\n<p>The code producing this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mapEmbedding_apply</span> <span class=\"o\">:</span> <span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finset.map_embedding_apply</span> <span class=\"n\">Finset.mapEmbedding_apply</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mapEmbedding_apply2</span> <span class=\"o\">:</span> <span class=\"n\">mapEmbedding</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_eq_subset</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mapEmbedding_apply</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 348720727,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1681303925
    }
]