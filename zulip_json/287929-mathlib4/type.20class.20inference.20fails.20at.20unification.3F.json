[
    {
        "content": "<p>In porting <code>RingTheory.Ideal.Basic</code> I ran into this issue with typeclass inference. It's not a problem with new structures because <code>Semiring.toModule</code> works. It seems like Lean sets up a trivial unification problem for itself and then fails to solve it. I don't understand any further than this. </p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I tried to make a non-mathlib mwe but couldn't get it to reproduce.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"c1\">-- note: priority of `Semiring.toModule` is set</span>\n<span class=\"c1\">-- to 910 because it always applies</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.synthInstance] ❌ Module R R ▼</span>\n<span class=\"cm\">  [] new goal Module R R ▶</span>\n<span class=\"cm\">  [] ❌ apply @Semiring.toModule to Module R R ▼</span>\n<span class=\"cm\">    [tryResolve] ❌ Module R R ≟ Module ?m.888 ?m.888</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>attempted MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>class Foo (R : Type _) where\n  X : Nat\n\nclass SuperFoo (R : Type _) where\n  Y : Nat\n\ninstance (priority := 200) SuperFoo.toFoo [SuperFoo R] : Foo R where\n  X := @SuperFoo.Y R _\n\nclass Bar (R : Type _) where\n  Z : Nat\n\ninstance Foo.toBar [Foo R] : Bar R where\n  Z := @Foo.X R _\n\nclass Baz (R S : Type _) [Foo R] [Bar R] where\n  U : Nat\n  V : Nat\n\ninstance (priority := 910) Foo.toBaz [Foo R] : Baz R R where\n  U := @Foo.X R _\n  V := @Foo.X R _\n\nexample [Foo R] : Baz R R := inferInstance\nexample [SuperFoo R] : Baz R R := inferInstance -- succeeds, so doesn&#39;t reproduce the problem.\n</code></pre></div>\n</div></div>",
        "id": 327854525,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676402027
    },
    {
        "content": "<p>This looks like exactly <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> to me</p>",
        "id": 327855270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676402287
    },
    {
        "content": "<p>Which _is_ a problem with new structures, it's the ones in the implicit arguments that you can't see</p>",
        "id": 327855311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676402304
    },
    {
        "content": "<p>Then why does it succeed with <code>Semiring.toModule</code> without any extra help?</p>",
        "id": 327855759,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676402478
    },
    {
        "content": "<p>Because unification uses structure eta but TC search doesn't</p>",
        "id": 327855804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676402495
    },
    {
        "content": "<p>And structure eta is needed to make new-style structures behave</p>",
        "id": 327855840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676402507
    },
    {
        "content": "<p>Is this the same issue as my <a href=\"#narrow/stream/287929-mathlib4/topic/Default.20HSMul.20for.20!4.232212/near/327415103\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Default.20HSMul.20for.20!4.232212/near/327415103</a> ?</p>",
        "id": 327856065,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676402583
    },
    {
        "content": "<p>Ah, so is the point that when I call <code>Semiring.toModule</code> the implicit arguments get filled via unification and that resolves the issue with structure eta, and then the remaining type class inference succeeds because it doesn't have metavariables?</p>",
        "id": 327856182,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676402639
    },
    {
        "content": "<p>That sounds right to me</p>",
        "id": 327857454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403072
    },
    {
        "content": "<p>From the github issue, we had precisely this example before at <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EPeriodic.20!4.231963/near/325949252\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Algebra.2EPeriodic.20!4.231963/near/325949252</a></p>",
        "id": 327857537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403102
    },
    {
        "content": "<p>So far the approach is basically \"pretend that NonAssocRing doesn't exist (by deinstancing it) and wait for a fix upstream in Lean\"</p>",
        "id": 327857669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403135
    },
    {
        "content": "<p>Searching for porting note referencing 2074 should find examples of the former</p>",
        "id": 327857736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403158
    },
    {
        "content": "<p>sorry, I should have checked <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a>, but I had convinced myself it wasn't structure eta for the (incorrect) reasons above.</p>",
        "id": 327858107,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676403296
    }
]