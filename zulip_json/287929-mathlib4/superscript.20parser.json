[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Superscript</span>\n\n<span class=\"n\">macro</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">superscript</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"o\">(‚ü®</span><span class=\"n\">b.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]‚ü©))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">¬≤</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">¬π‚Å∂</span> <span class=\"bp\">=</span> <span class=\"mi\">65536</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"bp\">‚Åø‚Å∫¬π</span><span class=\"o\">)</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">¬π‚Å∂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 365151927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686412634
    },
    {
        "content": "<p>not yet PR'd, but it basically works as pictured</p>",
        "id": 365153512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413156
    },
    {
        "content": "<p>you can even ctrl click the <code>‚Åø</code> to go to the binding site of the <code>fun n =&gt;</code></p>",
        "id": 365153652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413195
    },
    {
        "content": "<p>But not all unicode characters can be superscripted can they? Or was that subscripted. I can clearly remember that not even all numbers could be super or subscripted I just don't remember which it was.</p>",
        "id": 365153854,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686413280
    },
    {
        "content": "<p>that's right, so you can only spell some words or use some symbols in the subscript</p>",
        "id": 365154124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413381
    },
    {
        "content": "<p>there is also a subscript parser</p>",
        "id": 365154336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413450
    },
    {
        "content": "<p>my plan is to make the parser available in mathlib but not actually use it globally, and let people use it in local notations when it makes sense</p>",
        "id": 365154520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413504
    },
    {
        "content": "<p>Hm, I'm not sure if it is good to further splitting up notation style with this because we can but if the majority likes it go for it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 365154640,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686413534
    },
    {
        "content": "<p>what do you mean by that?</p>",
        "id": 365154705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413558
    },
    {
        "content": "<p>Well with this we are once again handing out yet another option to write quite literally the same thing (something that is already possible in base Lean already, for example inductive types can be denote with and without <code>where</code> if you wish) just because it is possible, I don't really see the advantage of having it done like this. I guess it looks nice and more familiar?</p>\n<p>I just generally believe that with Lean already being as rich in syntax as it is we should try to stick to one way to write the same thing.</p>",
        "id": 365155251,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686413750
    },
    {
        "content": "<p>Local notations which do this kind of thing already exist in mathlib, for example defining <code>‚Ñù‚Åø‚Å∫¬π</code> to mean <code>Fin (n + 1) -&gt; ‚Ñù</code> for some local variable named <code>n</code></p>",
        "id": 365155489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413839
    },
    {
        "content": "<p>I'm not sure what you mean by \"literally the same thing\", it's a <code>macro</code> (which you can think of as a <code>notation</code> in this case) which lets you write the same thing you could before but with different syntax</p>",
        "id": 365155819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413948
    },
    {
        "content": "<p>that's kind of the point</p>",
        "id": 365155871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686413970
    },
    {
        "content": "<p>(Just to be clear, I have no intention of using this for the power function on Nat. That was just a demo.)</p>",
        "id": 365158583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686414910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik B√∂ving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/superscript.20parser/near/365153854\">said</a>:</p>\n<blockquote>\n<p>But not all unicode characters can be superscripted can they? Or was that subscripted. I can clearly remember that not even all numbers could be super or subscripted I just don't remember which it was.</p>\n</blockquote>\n<p>Actually both are incomplete. Here are the defined mappings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Mapping.superscript</span> <span class=\"o\">:=</span> <span class=\"n\">mkMapping</span>\n  <span class=\"s2\">\"‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñêû• ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª·¥¨·¥Æ·¥∞·¥±·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æÍü¥·¥ø·µÄ·µÅ‚±Ω·µÇ·µù·µû·µü·µã·∂ø·∂•·∂π·µ†·µ°‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ\"</span>\n  <span class=\"s2\">\"0123456789abcdefghijklmnopqrstuvwxyzABDEGHIJKLMNOPQRTUVWŒ≤Œ≥Œ¥ŒµŒ∏ŒπœÖœÜœá+-=()\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mapping.subscript</span> <span class=\"o\">:=</span> <span class=\"n\">mkMapping</span>\n  <span class=\"s2\">\"‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥òÍûØ ÄÍú±·¥õ·¥ú·¥†·¥° è·¥¢·µ¶·µß·µ®·µ©·µ™‚Çä‚Çã‚Çå‚Çç‚Çé\"</span>\n  <span class=\"s2\">\"0123456789aehijklmnoprstuvxABCDEFGHIJKLMNOPQRSTUVWYZŒ≤Œ≥œÅœÜœá+-=()\"</span>\n</code></pre></div>",
        "id": 365160735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686415768
    },
    {
        "content": "<p>you don't even have <code>*</code>, which makes it kind of hard to write formulas</p>",
        "id": 365160861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686415825
    },
    {
        "content": "<p>those feel so arbitrary... unicode weirdness??</p>",
        "id": 365162511,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686416428
    },
    {
        "content": "<p>it's because different parts of the alphabet were introduced at different times for different reasons</p>",
        "id": 365162633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416477
    },
    {
        "content": "<p>if you look at the codepoint values they are all over the place</p>",
        "id": 365162686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416500
    },
    {
        "content": "<p>This <code>mkMapping</code> API seems nice in principle (\"oh, the columns will align\"), but the reality is:</p>\n<p><a href=\"/user_uploads/3121/W18NUU5HzvbsJzTi8a0gjKcv/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/bSn5f-7tDvG5wcHhyC7mVlYB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/W18NUU5HzvbsJzTi8a0gjKcv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/W18NUU5HzvbsJzTi8a0gjKcv/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bSn5f-7tDvG5wcHhyC7mVlYB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bSn5f-7tDvG5wcHhyC7mVlYB/image.png\"></a></div>",
        "id": 365163930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417014
    },
    {
        "content": "<p>It looks like (white screenshot) Microsoft rather dropped the ball on Consolas subscript characters (maybe that's fixed in newer versions than the one I have?)</p>",
        "id": 365164167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417101
    },
    {
        "content": "<p>I once spend two days figuring out the font with the most monospaced unicode characters to use with Lean, my decision at the time was julia mono:<br>\n<a href=\"/user_uploads/3121/6cZn9Ee55Q2DcMpPLu_UXhSv/image.png\">image.png</a><br>\ni would say it is holding up pretty well</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6cZn9Ee55Q2DcMpPLu_UXhSv/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6cZn9Ee55Q2DcMpPLu_UXhSv/image.png\"></a></div>",
        "id": 365164425,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686417189
    },
    {
        "content": "<p>Though Zulip's \"Source Code Pro\" default has  even fewer characters</p>",
        "id": 365164498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik B√∂ving</span>, very weird that the only failing subscript is a capital F</p>",
        "id": 365164677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417284
    },
    {
        "content": "<p>Also, what's up with the <code>q</code>?</p>",
        "id": 365165064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686417424
    },
    {
        "content": "<p>It seems like it doesnt exist in julia mono, if you look at marios  thing above for me the q looks very weird as well</p>",
        "id": 365165174,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686417474
    },
    {
        "content": "<p>Maybe the q is new?</p>",
        "id": 365165179,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686417477
    },
    {
        "content": "<p>The q is not a true superscript character</p>",
        "id": 365165364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417560
    },
    {
        "content": "<p>It's <a href=\"https://unicode-explorer.com/c/107A5\">https://unicode-explorer.com/c/107A5</a></p>",
        "id": 365165367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686417562
    },
    {
        "content": "<p>\"modifier letter small q\" who comes up with this</p>",
        "id": 365166051,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686417827
    },
    {
        "content": "<p>I mean it's IPA</p>",
        "id": 365168347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686418794
    },
    {
        "content": "<p>Unicode is supposed to be semantic not visual</p>",
        "id": 365168421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686418809
    },
    {
        "content": "<p>I think that character only theoretically exists. I put it in for completeness but I have not seen any font render it as not a box</p>",
        "id": 365173398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686420734
    },
    {
        "content": "<p>at least the julia font renders the capital Q, mine doesn't</p>",
        "id": 365173569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686420816
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4957\">!4#4957</a></p>",
        "id": 365193610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686430129
    },
    {
        "content": "<p>Hm, now here's an interesting edge case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">2</span><span class=\"bp\">¬≤</span> <span class=\"bp\">‚Åª‚Åª·∂†·µí·µí</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 2 ^ 2 + 2 : Nat</span>\n</code></pre></div>",
        "id": 365198416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686432670
    },
    {
        "content": "<p>oh my...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">2</span><span class=\"bp\">¬≤</span> <span class=\"bp\">‚Åª‚Åª</span> <span class=\"c\">/-</span>\n<span class=\"cm\">- 2 --/</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\">-- 2 ^ (2 - 2) + 2 : Nat</span>\n</code></pre></div>\n<p>you can comment out comments <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span></p>",
        "id": 365198893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686432983
    }
]