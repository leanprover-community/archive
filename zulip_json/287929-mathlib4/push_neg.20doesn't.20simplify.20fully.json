[
    {
        "content": "<p>In the lemma below, applying <code>push_neg</code> twice changes the goal, whereas I would assume that <code>push_neg</code> returns a canonical \"pushed neg\" form. Is my assumption false or is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Hasse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.PNat.Prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">divisibilityGraph</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">ℕ</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h.left.symm</span><span class=\"o\">,</span> <span class=\"n\">h.right.symm</span><span class=\"o\">⟩</span>\n  <span class=\"n\">loopless</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">ha.left</span> <span class=\"bp\">$</span> <span class=\"n\">refl</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">∈</span> <span class=\"n\">divisibilityGraph.edgeSet</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_edgeSet</span><span class=\"o\">,</span> <span class=\"n\">divisibilityGraph</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ ¬Adj (mk fun a b =&gt; a ≠ b ∧ (a ∣ b ∨ b ∣ a)) p q -/</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ ¬(p ≠ q ∧ (p ∣ q ∨ q ∣ p)) -/</span>\n  <span class=\"n\">push_neg</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ⊢ p ≠ q → ¬p ∣ q ∧ ¬q ∣ p -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398898249,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698413049
    },
    {
        "content": "<p>This is definitely a bug.</p>",
        "id": 398898297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698413076
    },
    {
        "content": "<p>Hmm, I'm surprised <code>push_neg</code> eliminates the <code>Adj</code> at all</p>",
        "id": 398898638,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698413206
    },
    {
        "content": "<p>I assume that wrapping the tactic core with <code>repeat</code> is not the correct fix, since this indicates something wrong with the algorithm?</p>",
        "id": 398899199,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698413399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/push_neg.20doesn't.20simplify.20fully/near/398898638\">said</a>:</p>\n<blockquote>\n<p>Hmm, I'm surprised <code>push_neg</code> eliminates the <code>Adj</code> at all</p>\n</blockquote>\n<p>I don't know how the tactic works, but the source code indicates it uses <code>simp</code> to some degree, which can probably unfold the <code>Adj</code> - indeed <code>simp only</code> does unfold <code>Adj</code></p>",
        "id": 398899558,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698413508
    },
    {
        "content": "<p>Unfolding <code>Adj</code> is definitely not part of the spec. The Lean 3 implementation was not using <code>simp</code> at all, but the Lean 4 port took a shortcut.</p>",
        "id": 398899953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698413633
    },
    {
        "content": "<p>The existing simp configuration that <code>push_neg</code> uses probably should be reviewed more carefully, but setting it not not unfold projections was enough for this example: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7989\">#7989</a></p>",
        "id": 398954136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698433504
    }
]