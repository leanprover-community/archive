[
    {
        "content": "<p>Is <code>exact?</code>broken at the moment? Someting as trivial as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>cannot be found using <code>exact?</code>. I'm sure it was working well with <code>library_search</code> a few months ago...</p>\n<p>I'm using leanprover/lean4:nightly-2023-08-19.</p>\n<p>NOTE: should be moved to mathlib4 topic</p>",
        "id": 386228499,
        "sender_full_name": "RL",
        "timestamp": 1692541716
    },
    {
        "content": "<p>Have you seen <code>rw?</code>, I'm not sure I'd expect <code>exact?</code> to find this (what is the single <code>exact blah</code> call you think it should find?)</p>",
        "id": 386260949,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692566751
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/exact.3F.20recent.20regression.3F\">#lean4 &gt; exact? recent regression?</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 386264966,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692571131
    },
    {
        "content": "<p>I don't see why either <code>exact?</code> or <code>rw?</code> should be able to do this.</p>",
        "id": 386264982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692571167
    },
    {
        "content": "<p>I guess one possible proof would be <code>rwa [Nat.add_comm]</code>, so one question could be if it is by design that <code>rw?</code>isn't able to suggest this, or at least rank <code>Nat.add_comm</code> higher up (3rd position now)?</p>",
        "id": 386359270,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692614290
    },
    {
        "content": "<p>There is nothing in <code>rw?</code> that tries <code>assumption</code> afterwards. There is already something that checks if <code>rfl</code> works afterwards. Checking <code>assumption</code> as well would be a reasonable addition.</p>",
        "id": 386362295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692615420
    },
    {
        "content": "<p>I just observed this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: exact dvd_of_mul_left_dvd h</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n</code></pre></div>\n<p>It seems a bit strange that adding a hypothesis to the context makes <code>exact?</code> miss the solution it had found before.</p>",
        "id": 387691588,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693236168
    },
    {
        "content": "<p>Fascinating: not <code>exact?</code>'s fault per se:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_of_mul_left_dvd</span>\n  <span class=\"n\">solve_by_elim</span><span class=\"bp\">*</span> <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 387784785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693271370
    },
    {
        "content": "<p>There is a bug in my implementation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.independent#src\">src#Lean.MVarId.independent</a>?, and more generally a meta-bug in my implementation of <code>solve_by_elim</code> being terrible.</p>",
        "id": 387785945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693271906
    },
    {
        "content": "<p>Not sure if this is related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- `exact Iff.mp (ZMod.nat_cast_zmod_eq_zero_iff_dvd a 2) h`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- long list of essentially useless suggestions (similarly without `h`)</span>\n</code></pre></div>",
        "id": 387907091,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693323013
    },
    {
        "content": "<p>What answer might you expect there? I think that one is just out of scope for <code>exact?</code>.</p>",
        "id": 387983875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693349645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20recent.20regression.3F/near/387691588\">said</a>:</p>\n<blockquote>\n<p>I just observed this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: exact dvd_of_mul_left_dvd h</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n</code></pre></div>\n<p>It seems a bit strange that adding a hypothesis to the context makes <code>exact?</code> miss the solution it had found before.</p>\n</blockquote>\n<p>Now fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6862\">#6862</a>.</p>",
        "id": 388032169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693371626
    },
    {
        "content": "<p>This may not actually be a regression, maybe my mistaken memory... I thought <code>exact?</code> handled negation/<code>False</code> correctly, but this fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Pfalse</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact?</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Pfalse</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>(<code>library_search</code> gets this in Lean 3.) I didn't see an issue and couldn't turn up any hits on Zulip search, is this known?</p>",
        "id": 389275946,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1693946144
    },
    {
        "content": "<p>It is known.</p>",
        "id": 389303719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693958391
    }
]