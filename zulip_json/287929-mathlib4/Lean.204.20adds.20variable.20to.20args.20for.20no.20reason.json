[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4773\">!4#4773</a>, if you remove <code>section FTC1</code> and <code>end FTC1</code>, then Lean adds <code>lb</code>/<code>lb'</code>/<code>FTCFilter _ _ _</code> to the arguments of <code>sub_le_integral_of_has_deriv_right_of_le</code>. I don't know why and I don't know how to minimize this example.</p>",
        "id": 364302289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686148967
    },
    {
        "content": "<p>I added a section as a workaround (also, we should split this file into FTC1 and FTC2)</p>",
        "id": 364302464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686148998
    },
    {
        "content": "<p>It's probably a <code>cases</code> or <code>induction</code> or <code>rw at *</code> or similar that modified one of the variables in the context, making it \"used\" and hence pulled in to the definition</p>",
        "id": 364303090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686149109
    },
    {
        "content": "<p>This seems to me to be a genuine regression :-(</p>",
        "id": 364344672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686157599
    },
    {
        "content": "<p>In <code>induction</code> I assume you mean; obviously this a regression in the statement of FTC!</p>",
        "id": 364356323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686160503
    },
    {
        "content": "<p>There is a simple rule about <code>variable</code> in Lean 4: you should never state a theorem in a context where there are variable you don't want to be included. <code>variable</code> simply doesn't work in Lean 4 the way it worked in Lean 3. It would have been clearer to simply use a different keyword.</p>",
        "id": 364357154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686160681
    },
    {
        "content": "<p>Is this something the ambiguous translation thing could have caught, if it wasn't full of false positives?</p>",
        "id": 364364271,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686162428
    },
    {
        "content": "<p>I caught it first time I tried to apply this theorem.</p>",
        "id": 364366430,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686163016
    },
    {
        "content": "<p>But ambiguous translation should've caught it too.</p>",
        "id": 364366474,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686163032
    },
    {
        "content": "<p>I think Kevin's claim is that the new behavior, confusing or otherwise, is just not as useful as the old</p>",
        "id": 364368226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686163472
    },
    {
        "content": "<p>Seeing a gazillion irrelevant variables in the infoview is not helpful :-( I know Mario has argued that variables defined 200 lines earlier lead to code which he can't read as easily, but what we have now is not really ideal.</p>",
        "id": 364369434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686163799
    },
    {
        "content": "<p>I think there's a lot of value to being able to say at the top of the file \"<code>S</code> is a semiring, <code>R</code> is a ring, <code>K</code> is a field\"</p>",
        "id": 364370190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164014
    },
    {
        "content": "<p>If you use a sectioning approach instead, then all your lemmas move around when they're generalized (replacing <code>K</code> with <code>R</code> or <code>R</code> with <code>S</code>) and our diffs become bigger</p>",
        "id": 364370240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164040
    },
    {
        "content": "<p>Right now the behavior is \"it works just fine (other than an ugly goal view) unless you're planning to use <code>induction</code>, and then you have to write <code>generalizing</code> to keep your foot attached\"</p>",
        "id": 364370524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164111
    },
    {
        "content": "<p>I would also like to point out that \"it works just fine\" may not be entirely true when Lean guesses incorrectly which typeclasses to use, from the available pool.  This lead to my misporting of <code>RatFunc</code> that resulted in Yuri's issues with <code>Laurent</code>.</p>",
        "id": 364371451,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686164378
    },
    {
        "content": "<p>Well that never worked well in Lean 3 either (unless you juggle with <code>include</code>/<code>omit</code>, which was a pain there too)</p>",
        "id": 364371732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164446
    },
    {
        "content": "<p>I didn't suggest above saying at the top of the file \"<code>R</code> is a semiring, ring, or field, depending on how I use <code>include</code>\"!</p>",
        "id": 364371874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164483
    },
    {
        "content": "<p>Sure, that file had other issues, but I still preferred when the available assumptions were, by default, the ones that made the statement typecheck, plus some correction for edge cases where you may want to revise this.</p>",
        "id": 364372271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686164590
    },
    {
        "content": "<p>Maybe what we want is something like \"<code>variable</code> tells <code>autoImplicit</code> what the types are\"</p>",
        "id": 364373391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686164907
    },
    {
        "content": "<p>fwiw, I've never liked the \"global variables at the top of the file\" approach, and find it completely unreadable, and think larger diffs when refactoring is a small price to pay.</p>",
        "id": 364425774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686189174
    },
    {
        "content": "<p>What's wrong with \"in this file, <code>E</code>, <code>F</code>, and <code>G</code> are normed spaces over a nontrivially normed field <code>K</code>\"?</p>",
        "id": 364429298,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686191688
    },
    {
        "content": "<p>That's fine, I guess. I don't much like the \"<code>M</code> is a module over a ring <code>R</code> and <code>V</code> is a module over a field <code>K</code>\" approach, where the only way for me to work out the hypotheses of a lemma are to be like a physicist and know from the names of things what they are. :-)</p>",
        "id": 364429416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686191769
    },
    {
        "content": "<p>Hover over declaration names has made this much easier, of course.</p>",
        "id": 364429432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686191785
    },
    {
        "content": "<p>That is, I prefer sections for changing hypothesis strengths rather than having to carry around a lookup table from variable names to typeclasses</p>",
        "id": 364429488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686191847
    }
]