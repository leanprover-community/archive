[
    {
        "content": "<p>This question is not meant to be a criticism in any way.  I play around with lean and mathlib 4 and it is far beyond anything I could have done.  I am curious about the choice to define, <code>(1:Nat)-(100:Nat)</code> as <code>(0:Nat)</code>.    I know that C and C++ leave this (unsigned integer underflow) as \"undefined\" and this provides some flexibility but also some \"footguns\" to the language. For example, for all unsigned integers <code>u </code>we have <code>(u - 100) + 100</code>  because, in some sense, integer underflow needn't be considered, it is undefined.  So to a C++ program (compiler) the expression <code>(u-100)+100</code> is also a proof that <code> u \\ge 100</code>. </p>\n<p>Were any similar approaches tried in Mathlib?  Is there anything written that I could read that discusses this, and similar (like <code>1/0 = 0</code>), choices?  Perhaps using the some/none approach.  I read about this online  somewhere and now I can't find a link to it.</p>\n<p>Any responses will be appreciated.</p>",
        "id": 381658352,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1691118762
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/</a></p>",
        "id": 381659465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691119424
    },
    {
        "content": "<p>Thanks.  I remember that I read this earlier.  I fall into the category of \"OK so I can see that it can be made to work.  But I still feel a bit uncomfortable about all this.\"</p>",
        "id": 381661221,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1691120388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519925\">Kent Van Vels</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20did.20the.20community.20decide.20to.20use.20.22special.20values.22.3F/near/381658352\">said</a>:</p>\n<blockquote>\n<p>I know that C and C++ leave this (unsigned integer underflow) as \"undefined\"</p>\n</blockquote>\n<p>It may be worth noting that while the C/C++ <em>standard</em> leaves some things \"undefined\" (i.e., implementation defined), the implementations themselves (e.g., GCC, Clang) do have defined behaviors for such special cases. Since Lean is both the language and the compiler, leaving it \"undefined\" is not an option -- there has to be some concrete implementation.</p>",
        "id": 381667417,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691124121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519925\">Kent Van Vels</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20did.20the.20community.20decide.20to.20use.20.22special.20values.22.3F/near/381658352\">said</a>:</p>\n<blockquote>\n<p>I know that C and C++ leave this (unsigned integer underflow) as \"undefined\" and this provides some flexibility but also some \"footguns\" to the language. For example, for all unsigned integers <code>u </code>we have <code>(u - 100) + 100</code>  because, in some sense, integer underflow needn't be considered, it is undefined.</p>\n</blockquote>\n<p>This is false, <em>unsigned</em> integer overflow is always defined as modular arithmetic</p>",
        "id": 381667460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691124130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Note that the example was <em>underflow</em>, not <em>overflow</em>.</p>",
        "id": 381667625,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691124235
    },
    {
        "content": "<p>The same comment applies</p>",
        "id": 381667696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691124255
    },
    {
        "content": "<p><em>signed</em> integer under/overflow is the one that is undefined, <a href=\"https://en.m.wikipedia.org/wiki/Integer_overflow#Programming_language_support\">see Wikipedia</a></p>",
        "id": 381667725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691124282
    },
    {
        "content": "<p>The standard is a bit weird in how it phrases this, though, because it only makes reference to \"overflow\", not \"underflow\", but the behavior mentioned )modulo the max + 1) does seem to logically apply to underflow as well (though I imagine a lawyer could argue their way out of it <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> ).</p>",
        "id": 381667934,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691124415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks the correction.  I did get the unsigned/signed integer case backwards.  </p>\n<p>It doesn't refute your point in any way, <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>,but I am reasonably sure that GCC and Clang leave overflow undefined.  This file exhibits undefined behavior and, interestingly, under different optimization level on g++-9 we get different outputs.</p>\n<p>Indeed, on <code>-O3</code> we get \"yes\" and on <code>-O0</code> we get \"no\" printed to the console.</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;limits&gt;</span>\n\n<span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">){</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">min</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"yes</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"no</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 381718401,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1691135725
    },
    {
        "content": "<p>This is a common misconception: <em>underflow</em> is usually defined as what happens when your floats get too close to zero. You can't underflow an int, you can only <em>negatively</em> overflow it.</p>",
        "id": 381723360,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691136557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519925\">Kent Van Vels</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20did.20the.20community.20decide.20to.20use.20.22special.20values.22.3F/near/381718401\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Thanks the correction.  I did get the unsigned/signed integer case backwards.  </p>\n<p>It doesn't refute your point in any way, <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span>,but I am reasonably sure that GCC and Clang leave overflow undefined.  This file exhibits undefined behavior and, interestingly, under different optimization level on g++-9 we get different outputs.</p>\n</blockquote>\n<p>Signed integer overflow is undefined behaviour in the standard, but most compilers let you choose to define it, e.g. using the <code>-fwrapv</code> or <code>-ftrapv</code> flags.</p>",
        "id": 381776209,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691144809
    },
    {
        "content": "<p>(But we're getting somewhat off topic here!)</p>",
        "id": 381776321,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691144829
    },
    {
        "content": "<p>I will remark that sometimes these special values do help mathematically; if <code>1/0 != 0</code> then we would not have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.distribSMul#doc\">docs#Rat.distribSMul</a>, which is a genuinely important result allowing us to remove a specific diamond to do with rat-algebras</p>",
        "id": 381779273,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691145278
    },
    {
        "content": "<p>All this underflow stuff is fine but at the end of the day the type of <code>sub</code> is <code>X -&gt; X -&gt; X</code> in Lean so you have to return a natural if you subtract two naturals and that's basically the end of the matter other than the argument over the junk value returned when the subtraction is mathematically invalid. Any other design decision (e.g. partial functions, returning <code>option X</code> etc) is harder to work with in practice, in a functional language. Moreover the junk value choice doesn't actually matter to mathematicians; all we're doing is defining a new function which extends subtraction. Errors are caught in other places, not in the act of subtraction itself; this is the counterintuitive part, because mathematicians usually catch the issue earlier.</p>",
        "id": 381785090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691146210
    },
    {
        "content": "<p>One specific solution that I haven't seen come up too often in these sorts of discussion is the \"bundled\" one. Namely: supplying a proof at each point you mention subtraction is annoying, so why not make it part of the arguments? So we would write the type of subtraction as <code>∀ (a : ℕ), Fin (a+1) → ℕ</code>. My gut feeling is that this is still more annoying than junk values, yet other parts of the library seem to fare no worse by doing this bundling. (For instance, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.map#doc\">docs#Ideal.map</a> could just as well be defined for any function, not just ring homomorphisms.) I would love to learn why this is!</p>",
        "id": 381798094,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691148344
    },
    {
        "content": "<p>I am thankful for everyone's input.  I am just learning the library and I am impressed.  I have been doing some digging and there are \"partial-subtraction\" psub and \"partial-predecessor\"  function defined on the natural numbers.  I will play around with that to get an idea of how burdensome the some/none paradigm is.  Thanks!</p>",
        "id": 381801807,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1691148916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20did.20the.20community.20decide.20to.20use.20.22special.20values.22.3F/near/381658352\">said</a>:</p>\n<blockquote>\n<p>It may be worth noting that while the C/C++ <em>standard</em> leaves some things \"undefined\" (i.e., implementation defined), the implementations themselves (e.g., GCC, Clang) do have defined behaviors for such special cases.</p>\n</blockquote>\n<p>\"Undefined behaviour\" and \"implementation defined\" are very different! If a code path invokes undefined behaviour, the compiler can assume that the code path is unreachable. This enables certain optimizations. Here's an <a href=\"https://godbolt.org/z/zj4dfv3sM\">example</a> on Compiler Explorer where a function's side effects are optimized away entirely.</p>",
        "id": 382197900,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691256817
    },
    {
        "content": "<p>Note that lean also has \"undefined behavior\": obviously C code with UB is UB, but also <code>False.elim</code>: the compiler will optimize out branches where one side is a <code>False.elim</code> application</p>",
        "id": 382245090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691282277
    }
]