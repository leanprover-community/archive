[
    {
        "content": "<p>Would someone like to modify <code>cache</code> so that, if it is run from a downstream project, it verifies that <code>lean-toolchain</code> agrees with Mathlib's <code>lean-toolchain</code>, and prints a helpful error message if not?</p>",
        "id": 396365351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697145223
    },
    {
        "content": "<p>It seems like this would catch a big fraction of our problems right away.</p>",
        "id": 396365378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697145240
    },
    {
        "content": "<p>I support this. See <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency\">previous discussion here</a>.</p>",
        "id": 396366861,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697145931
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">mathlib4#7282</a></p>",
        "id": 396368047,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697146588
    },
    {
        "content": "<p>Additionally, in multiple threads the extension team has mentioned that there will be a set of GUI commands tailored for mathlib's needs.</p>",
        "id": 396369391,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697147357
    },
    {
        "content": "<p>GUI commands are a massive tangent here. We have a <code>lake exe cache</code> command line already, and it contains a footgun. We can make the footgun less dangerous without having to build a GUI.</p>",
        "id": 396369786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697147567
    },
    {
        "content": "<p>That's the PR I linked. The GUI is apparently already WIP and will hopefully mitigate against cli footguns entirely.</p>",
        "id": 396372810,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697148746
    },
    {
        "content": "<p>Turning a CLI into  GUI turns your CLI footguns into a GUI footgun...</p>",
        "id": 396373249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697148870
    },
    {
        "content": "<p>I am not arguing against your point. I agree that cli footguns  can imply GUI footguns. I am not developing this anyway. </p>\n<p>That said ,GUI not only hides the cli, but also provides the chance for writing one click buttons for sensible sequences of commands if required urgently, without too much tinkering of lake.</p>",
        "id": 396373684,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697149057
    },
    {
        "content": "<p>Let's take further discussion on GUI to discord if necessary.</p>",
        "id": 396373893,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697149184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> I can't help, but I support the idea of building tools on top of Lake. I still have this fun thought of creating some sort of <code>mathlibtools</code> in Godot because it's such an easy engine to create frontends and because it compiles to Linux, Windows and MacOS with very very little effort</p>",
        "id": 396376692,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1697150753
    },
    {
        "content": "<p>Just to add in that I support this. I <em>just</em> faced this toolchain problem yesterday, and for beginners like me and others, seeing <code>error: weakLeanArgs is not a field of structure \"Lake.LeanLibConfig\"</code> is not that helpful.</p>",
        "id": 396376986,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697150924
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> regarding <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">#7282</a>, and think that this should happen in <code>cache</code> itself, per the topic title.</p>",
        "id": 396377241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697151116
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7652\">#7652</a>.<br>\nI will need to replace the hardcoded path with <code>mathlibDepPath</code> but otherwise does this look OK?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">checkForToolchainMismatch</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">downstreamToolchain</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"s2\">\"lean-toolchain\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mathlibToolchain</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"s2\">\"./lake-packages/mathlib/lean-toolchain\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Checking for toolchains mismatch\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Mathlib = {mathlibToolchain.trim} | Project = {downstreamToolchain.trim}\"</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">mathlibToolchain.trim</span> <span class=\"bp\">=</span> <span class=\"n\">downstreamToolchain.trim</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"k\">else</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"Toolchains mismatch\"</span>\n\n\n<span class=\"sd\">/-- Downloads missing files, and unpacks files. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getFiles</span> <span class=\"o\">(</span><span class=\"n\">hashMap</span> <span class=\"o\">:</span> <span class=\"n\">IO.HashMap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">forceDownload</span> <span class=\"n\">forceUnpack</span> <span class=\"n\">parallel</span> <span class=\"n\">decompress</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">isMathlibRoot</span> <span class=\"bp\">←</span> <span class=\"n\">IO.isMathlibRoot</span>\n  <span class=\"k\">if</span> <span class=\"n\">isMathlibRoot</span>\n    <span class=\"k\">then</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Cache in Mathlib, no need to check for Toolchains mismatch!\"</span>\n    <span class=\"k\">else</span> <span class=\"n\">checkForToolchainMismatch</span>\n  <span class=\"n\">downloadFiles</span> <span class=\"n\">hashMap</span> <span class=\"n\">forceDownload</span> <span class=\"n\">parallel</span>\n  <span class=\"k\">if</span> <span class=\"n\">decompress</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.unpackCache</span> <span class=\"n\">hashMap</span> <span class=\"n\">forceUnpack</span>\n</code></pre></div>",
        "id": 396384737,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697155389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is there a better way to terminate other than <code>panic</code>?</p>",
        "id": 396385060,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697155551
    },
    {
        "content": "<p>It shouldn't print anything <strong>unless</strong> there is a mismatch, and if there is a mismatch it shouldn't be a panic, but rather a helpful message showing the contents of the files and stating that they don't match, and suggesting a possible resolution.</p>",
        "id": 396385072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697155558
    },
    {
        "content": "<p><code>exit 1</code>?</p>",
        "id": 396385083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697155562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>mohanad@kw-13792:~/Desktop/LeanMathSigProc$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\nwarning:<span class=\"w\"> </span>mathlib:<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/mathlib'</span><span class=\"w\"> </span>has<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>changes\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\nDependency<span class=\"w\"> </span>Mathlib<span class=\"w\"> </span>uses<span class=\"w\"> </span>a<span class=\"w\"> </span>different<span class=\"w\"> </span>lean-toolchain\nProject<span class=\"w\"> </span>uses<span class=\"w\"> </span>leanprover/lean4:v4.0.0<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>Mathlib<span class=\"w\"> </span>uses<span class=\"w\"> </span>leanprover/lean4:v4.2.0-rc1\n\nIt<span class=\"w\"> </span>is<span class=\"w\"> </span>recommended<span class=\"w\"> </span>that<span class=\"w\"> </span>your<span class=\"w\"> </span>project<span class=\"w\"> </span>toolchain<span class=\"w\"> </span>matches<span class=\"w\"> </span>Mathlibs<span class=\"w\"> </span>toolchain\nThis<span class=\"w\"> </span>can<span class=\"w\"> </span>be<span class=\"w\"> </span>achieved<span class=\"w\"> </span>by<span class=\"w\"> </span>copying<span class=\"w\"> </span>the<span class=\"w\"> </span>contents<span class=\"w\"> </span>of<span class=\"w\"> </span>the<span class=\"w\"> </span>file<span class=\"w\"> </span>lake-packages/mathlib/lean-toolchain\ninto<span class=\"w\"> </span>the<span class=\"w\"> </span>lean-toolchain<span class=\"w\"> </span>file<span class=\"w\"> </span>at<span class=\"w\"> </span>the<span class=\"w\"> </span>root<span class=\"w\"> </span>directory<span class=\"w\"> </span>of<span class=\"w\"> </span>your<span class=\"w\"> </span>project\n</code></pre></div>",
        "id": 396390026,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697157984
    },
    {
        "content": "<p>Looks PR worthy!</p>",
        "id": 396397367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697161346
    },
    {
        "content": "<p>I recommend adding a copy-and-pastable command that achieves what you mention (\"copying the contents of the file lake-packages/mathlib/lean-toolchain into the lean-toolchain file\")</p>",
        "id": 396398114,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697161791
    },
    {
        "content": "<p>I can't find it but there's a guide that recommend something like<br>\n<code>curl https://raw.githubusercontent.com/leanprover-community/mathlib4/master/lean-toolchain -O lean-toolchain</code> or something</p>",
        "id": 396398327,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697161912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7652\">#7652</a></p>",
        "id": 396400657,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697162841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20exe.20cache.20get.60.20should.20check.20toolchains/near/396398327\">said</a>:</p>\n<blockquote>\n<p>I can't find it but there's a guide that recommend something like<br>\n<code>curl https://raw.githubusercontent.com/leanprover-community/mathlib4/master/lean-toolchain -O lean-toolchain</code> or something</p>\n</blockquote>\n<p>Should it match the online mathlib or the local copy of mathlib that the user already has? <br>\nFor the 2nd choice it will be something like: <code>cp ./lake-pacakges/mathlib/lean-toolchain</code></p>",
        "id": 396401024,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697162981
    },
    {
        "content": "<p>I think <code>cp</code> is better!</p>",
        "id": 396401163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697163055
    },
    {
        "content": "<p>The project may have e.g. pinned a branch or commit of Mathlib.</p>",
        "id": 396401186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697163068
    },
    {
        "content": "<p>(the message should say <code>copy</code> on Windows, that's one reason I went with <code>curl</code>)</p>",
        "id": 396436632,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697180143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20exe.20cache.20get.60.20should.20check.20toolchains/near/396436632\">said</a>:</p>\n<blockquote>\n<p>(the message should say <code>copy</code> on Windows, that's one reason I went with <code>curl</code>)</p>\n</blockquote>\n<p>If you are on powershell on windows <code>cp</code> should still work</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>PS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt; cat .\\lean-toolchain\nleanprover/lean4:v4.2.0-rc1\nPS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt; echo xyz &gt; lean-toolchain\nPS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt; cat .\\lean-toolchain\nxyz\nPS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt; cp .\\lake-packages\\mathlib\\lean-toolchain .\\lean-toolchain\nPS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt; cat .\\lean-toolchain\nleanprover/lean4:v4.2.0-rc1\nPS C:\\Users\\Mohanad\\LeanStuff\\LeanMathSigProc&gt;\n</code></pre></div>",
        "id": 396462335,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697187916
    },
    {
        "content": "<p>Thanks for the helpful PR! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>I don't think prompting the user to copy is a good idea (although better than curl since it does not depend on network).</p>\n<p>A common solution to similar situations is that running <code>lake exe cache get</code> prompts the user to execute <code>lake exe cache get --fix</code> if the toolchain mismatches, and the <code>--fix</code> run will write the toolchain file with the corrrect toolchain directly instead of platform-dependent copy.</p>",
        "id": 396468929,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697189927
    },
    {
        "content": "<p>Using curl could fetch the wrong version of git has progressed, so using <code>cp</code> seems nicer. (or even a <code>cache</code> or <code>lake</code>  command - it seems silly that a tool can recognize the desired state, but then can't ensure that state. But a good warning is already a good start).</p>",
        "id": 396469226,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697190014
    },
    {
        "content": "<p>Ah, what Utensil says :-D</p>",
        "id": 396469380,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697190074
    },
    {
        "content": "<p>The tooling solution is <a href=\"https://github.com/leanprover/lake/pull/180\">lake#180</a></p>",
        "id": 396469766,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697190196
    },
    {
        "content": "<p>By \"prompting the user to copy\" I mean a series of platform-specific <code>println!</code> of these commands in the PR which is poor UX and might cause even more new user issues, and this time Zulip would have to help copying a file:</p>\n<p><a href=\"/user_uploads/3121/kBoTEQjwRKYToN6VNx0JiD04/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kBoTEQjwRKYToN6VNx0JiD04/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kBoTEQjwRKYToN6VNx0JiD04/image.png\"></a></div><p>And this copy action shouldn't be left to the end users to do. (so shouldn't <code>lake exe cache get</code> actually, but that's another issue)</p>",
        "id": 396471150,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697190644
    },
    {
        "content": "<p>Related: PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">#7282</a> for lake, it directly updates the <code>lean-toolchain</code> file instead of prompting users to do to.</p>",
        "id": 396617788,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697262277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20exe.20cache.20get.60.20should.20check.20toolchains/near/396471150\">said</a>:</p>\n<blockquote>\n<p>And this copy action shouldn't be left to the end users to do. (so shouldn't <code>lake exe cache get</code> actually, but that's another issue)</p>\n</blockquote>\n<p>As it currently stands running cache is done through the CLI. I think we merge now as is and minimize this problem. </p>\n<p>I guess what you are thinking of is a more holistic user experience design perhaps even through a gui like the recent prerelease of the new vs code extension. That would be great but until then this is a reasonable warning for the user. </p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what do you think?</p>",
        "id": 396635819,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697277500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span>, I left some comments.</p>",
        "id": 396638054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697279205
    },
    {
        "content": "<p>If you're happy to make the changes as indicated, it's delegated.</p>",
        "id": 396638065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697279217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20exe.20cache.20get.60.20should.20check.20toolchains/near/396635819\">said</a>:</p>\n<blockquote>\n<p>I think we merge now as is and minimize this problem. ... I guess what you are thinking of is a more holistic user experience design perhaps even through a gui like the recent prerelease of the new vs code extension. That would be great but until then this is a reasonable warning for the user. </p>\n</blockquote>\n<p>Sure, merging as is definitely improves the experience.</p>",
        "id": 396638356,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697279454
    }
]