[
    {
        "content": "<p>If <code>E</code> is a set in <code>X</code> and <code>F</code> is a set in <code>E</code> (viewed as a subtype of <code>X</code>), I was wondering if <code>Subtype.val '' F</code> is intended to match with <code>(F : Set X)</code>, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems that <code>(F: Set X)</code> uses a method <code>Lean.Internal.coeM</code> which the documentation warns not to actually use in practice.  So does this mean that the casting operator <code>( : Set X)</code> is deprecated, and I should be using <code>Subtype.val ''</code> throughout instead?</p>",
        "id": 402049520,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699988391
    },
    {
        "content": "<p>Yes exactly. <code>Lean.Internal.coeM</code> is not something you should ever see. But we haven't managed to enforce that invisibility yet.</p>",
        "id": 402049812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699988457
    },
    {
        "content": "<p>A pity, because the casting <code>(F : Set X)</code> is intuitive to me and sounds like something I would want to use.</p>",
        "id": 402050017,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699988514
    },
    {
        "content": "<p>We're not claiming we shouldn't have such casting, simply that <code>Lean.internal.coeM</code> really is not what it's meant to be using</p>",
        "id": 402050270,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699988573
    },
    {
        "content": "<p>If you don't want to see it then you can hide it using <code>attribute [coe] Lean.Internal.coeM</code> somewhere near the top of your file.</p>",
        "id": 402050453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699988633
    },
    {
        "content": "<p>But of course this is a very superficial thing to do.</p>",
        "id": 402050523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699988647
    },
    {
        "content": "<p>Are those definitionally equal, at least?</p>",
        "id": 402050709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699988710
    },
    {
        "content": "<p>What do you mean by \"those\"?</p>",
        "id": 402051339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699988940
    },
    {
        "content": "<p>Are you asking whether the example above is <code>rfl</code>? I don't think, but it is definitely true.</p>",
        "id": 402051407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699988976
    },
    {
        "content": "<p>I can't see how to prove it though given that there are no methods relating to <code>Lean.internal.coeM</code>.</p>",
        "id": 402051486,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699989002
    },
    {
        "content": "<p>You can unfold the definition.</p>",
        "id": 402051570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699989023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Lean.Internal.coeM</span><span class=\"o\">,</span> <span class=\"n\">CoeT.coe</span><span class=\"o\">,</span> <span class=\"n\">CoeHTCT.coe</span><span class=\"o\">,</span> <span class=\"n\">CoeHTC.coe</span><span class=\"o\">,</span> <span class=\"n\">CoeOTC.coe</span><span class=\"o\">,</span> <span class=\"n\">CoeTC.coe</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402051725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699989087
    },
    {
        "content": "<p>This definitely shouldn't happen, none of those coes are supposed to ever be visible</p>",
        "id": 402051769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699989104
    },
    {
        "content": "<p>A dirty proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">Lean.Internal.coeM</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Lean.Internal.coeM</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.iUnion_coe_set</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iUnion</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a.property</span><span class=\"o\">,</span> <span class=\"n\">ha</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">xE</span><span class=\"o\">,</span> <span class=\"n\">xF</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xE</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 402051886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699989134
    },
    {
        "content": "<p>But really I'm worried that needing this lemma reveals a deeper issue with your setup. Type theory doesn't play nicely with sets in sets. Usually there is a better way of saying the same thing.</p>",
        "id": 402052025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699989180
    },
    {
        "content": "<p>Patrick makes a good point, but just to see how we can get this coercion to work, I stumbled upon this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Set.monad</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeT</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ Subtype.val '' F = Subtype.val '' F</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Do we want <code>Set</code> to actually be a <code>Monad</code>? Sets don't have computational content in Lean.)</p>",
        "id": 402052834,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699989469
    },
    {
        "content": "<p>This is an instance of dependent type hell. Another one you might meet is the following: if you have two conditions <code>p</code> and <code>q</code> on a type <code>X</code>, and build the subtype made of the points satisfying <code>p</code>, and then in this one build the subsubtype made of the points also satisfying <code>q</code>, then the thing you get is <em>not</em> the same as if you do things in the other order, using <code>q</code> first and then <code>p</code>. Of course, there is a canonical bijection between them, but it's not even trivial to write down. On the other hand, if you use subsets of <code>X</code>, then the two things are equal (although not definitionally) and a lot of the pain goes away.</p>",
        "id": 402053045,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699989531
    },
    {
        "content": "<p>If this becomes too painful, you may consider working only with subsets and never with subtypes.</p>",
        "id": 402053159,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699989573
    },
    {
        "content": "<p>Let me be more explicit than Kyle: Kyle says that we could simply change the definition of the coercion from <code>Set E</code> to <code>Set X</code> to make the equality true by definition. This would require to give up the monad instance on <code>Set</code> whose utility isn't clear anyway.</p>",
        "id": 402053348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699989622
    },
    {
        "content": "<p>And we don't have to give up the monad entirely. There's this trick for enabling <code>do</code> notation and all that on a case-by-case basis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SetM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">SetM</span> <span class=\"o\">:=</span> <span class=\"n\">Set.monad</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set.run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SetM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pairs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">s</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">s</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402054049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699989855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Subtype.2Eval.20''.20be.20related.20to.20Lean's.20internal.20cast.3F/near/402052025\">said</a>:</p>\n<blockquote>\n<p>But really I'm worried that needing this lemma reveals a deeper issue with your setup. Type theory doesn't play nicely with sets in sets. Usually there is a better way of saying the same thing.</p>\n</blockquote>\n<p>Here's what I was actually trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">MeasureTheory.Measure.Subtype.measureSpace</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">MeasureTheory.MeasureSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hE</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span>\n<span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.MeasureSpace.volume</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">MeasureTheory.MeasureSpace.volume</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can prove this with <code>(F: Set X)</code> replaced by <code>Subtype.val '' F</code>, hence my above question.  Now I guess I can just do the rest of my project without ever touching the casting operator to <code>Set X</code> and using <code>Subtype.val ''</code> throughout, but I think it's a pity because to me the above statement is really naturally stated using the casting operator.</p>",
        "id": 402055190,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699990251
    },
    {
        "content": "<p>Independently of whether <code>Set</code> should be a monad, I think the design of <code>coeM</code> is wrong and it should be inlined like any other coercion</p>",
        "id": 402055204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699990258
    },
    {
        "content": "<p>Especially since it doesn't currently inline the coercion inside it</p>",
        "id": 402055298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699990302
    },
    {
        "content": "<p>Terry, this statement already has a <code>Set E</code> with <code>E : Set X</code>, so you need to tell use more in order to see whether you really want this statement.</p>",
        "id": 402055697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699990434
    },
    {
        "content": "<p>Ultimately I want to prove the formula <code>P[ F | E ] = P [ F ] / P [ E ]</code> where <code>E</code> is an event in a probability space <code>X</code> (let's take it to be positive probability to avoid technicalities), and <code>F</code> is an event in the conditioned probability space <code>E</code>.  I'm modeling <code>E</code> as a subset of <code>X</code> and <code>F</code> as a subset of <code>E</code>.</p>",
        "id": 402056043,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699990554
    },
    {
        "content": "<p>One could I guess view the conditioned probability space as still a space on <code>X</code>, and view <code>F</code> as a subset of <code>X</code> directly that happens to lie in <code>E</code>, but I find it more conceptual to think of <code>E</code> as the universal set of the conditioned space, rather than <code>X</code>.  I was hoping that Lean could tolerate this small amount of dependency in the types.</p>",
        "id": 402056296,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699990666
    },
    {
        "content": "<p>Lean can definitely tolerate this, but it is not necessarily the easiest path.</p>",
        "id": 402056557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699990774
    },
    {
        "content": "<p>If you don't need anything more nested than that then it's probably ok.</p>",
        "id": 402056579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699990791
    },
    {
        "content": "<p>The reason why I'd like to narrow <code>Set.univ</code> down from <code>X</code> to <code>E</code> is that I will need some sort of <code>congr</code> type statement to the effect that if two events or random variables agree on <code>E</code>, but not necessarily on all of <code>X</code>, then their probabilities (or expectations, entropies or whatever) will also agree when conditioned to <code>E</code>.  If I were to keep the universal set fixed at <code>X</code> then I would need some auxiliary lemmas that track the essential support of various probability measures in order to do <code>congr</code> properly, and it seems simpler to me to allow for a dependent universal set.</p>",
        "id": 402056905,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699990934
    },
    {
        "content": "<p>I guess for now I'll just take one of your proofs of the equivalence of <code>Subtype.val '' F</code> and <code>(F : Set X)</code> so that I can use <code>(F : Set X)</code> in the statements of my lemmas even if I don't plan to do anything with this cast other than turn it right back into <code>Subtype.val '' F</code>, just because I think it is aesthetically more natural.</p>",
        "id": 402057199,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699991076
    },
    {
        "content": "<p>Getting <code>congr</code> to play ball is a more minor issue than fighting dependent hell in my experience.</p>",
        "id": 402057205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699991078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Subtype.2Eval.20''.20be.20related.20to.20Lean's.20internal.20cast.3F/near/402057205\">said</a>:</p>\n<blockquote>\n<p>Getting <code>congr</code> to play ball is a more minor issue than fighting dependent hell in my experience.</p>\n</blockquote>\n<p>Hmm, after thinking about it a bit more I am inclined to agree.  I can condition to <code>E</code> while retaining <code>X</code> as the ambient <code>MeasurableSpace</code> and add a lemma noting that <code>E</code> has full probability in this conditioned space, and write the <code>congr</code> lemmas in terms of almost sure equality which is what is natural in probability theory anyway.  It does mean that there are now multiple <code>MeasureSpace</code> structures on <code>X</code> besides the canonical one, so notation such as <code>P[ ]</code> that was intended to hide the <code>MeasureSpace</code> structure will sometimes have to be modified (I have already made a notation <code>P[ E ; ‹ MeasureSpace X › ]</code> in anticipation of having to explicitly specify the measure space structure on occasion), but I think I can do this using the <code>@</code> operator to override default instances of <code>MeasureSpace</code> as necessary.  Now there are no more dependent subtypes or <code>Subtype.val</code> to work with.</p>",
        "id": 402064413,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699993947
    },
    {
        "content": "<p>Actually this is better in a number of ways.  I now get the full conditional probability formula <code>P[ F | E ] = P[ F ∩ E ] / P[ E ]</code> for all <code>F : Set X</code> (assuming measurability etc. of course) rather than just for <code>F : Set E</code> like I had previously.</p>",
        "id": 402065038,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699994212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Subtype.2Eval.20''.20be.20related.20to.20Lean's.20internal.20cast.3F/near/402055190\">said</a>:</p>\n<blockquote>\n<p>I can prove this with <code>(F: Set X)</code> replaced by <code>Subtype.val '' F</code>, hence my above question.  Now I guess I can just do the rest of my project without ever touching the casting operator to <code>Set X</code> and using <code>Subtype.val ''</code> throughout, but I think it's a pity because to me the above statement is really naturally stated using the casting operator.</p>\n</blockquote>\n<p>I suppose it's irrelevant for your applications now, but if there's a mathlib maintainer that thinks it's a good idea, I experimented with making casting for <code>Set</code> behave nicer for this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8413\">#8413</a></p>",
        "id": 402077648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699999234
    },
    {
        "content": "<p>This seems analogous to some of the decisions I made for matroids in mathlib (see the discussion of 'ground sets' in the docs of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matroid#doc\">docs#Matroid</a>). <br>\nCoercions/DTT stuff gets pretty bad when <code>set</code>s in types get involved, so I decided to have all my predicates defined on an ambient type, even when everything is happening in some particular subset.</p>",
        "id": 402247928,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1700056944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20Subtype.2Eval.20''.20be.20related.20to.20Lean's.20internal.20cast.3F/near/402247928\">said</a>:</p>\n<blockquote>\n<p>This seems analogous to some of the decisions I made for matroids in mathlib (see the discussion of 'ground sets' in the docs of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matroid#doc\">docs#Matroid</a>). <br>\nCoercions/DTT stuff gets pretty bad when <code>set</code>s in types get involved, so I decided to have all my predicates defined on an ambient type, even when everything is happening in some particular subset.</p>\n</blockquote>\n<p>I also noticed this when working with symmetric polynomials in <code>n</code> variables.  Initially I modeled these variables by a function on <code>Fin n</code>, but I quickly abandoned this due to not understanding how to use coercions at the time and instead they are defined as functions on <code>ℕ</code> even though I don't use the values of this function on all but finitely many of the inputs.</p>\n<p>Ideally at some point these sorts of recommendations should be added to a \"helpful tips\" section of some introductory text for how to use Lean for the working mathematician.</p>",
        "id": 402292943,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700068847
    },
    {
        "content": "<p>Another trick there is to model the variables by a function on some type <code>X</code> of cardinality <code>n</code>. Abstract indexing like this tends to work nicely -- and help you avoid unnecessary arithmetic.</p>",
        "id": 402294644,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700069469
    }
]