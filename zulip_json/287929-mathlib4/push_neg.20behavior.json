[
    {
        "content": "<p>In lean3 mathlib, push_neg use classical logic to be able to rewrite var in the context.<br>\nI made a port of push_neg that only use constructive logic and then is only able to change the goal.<br>\nSo i was wondering if we should make two tactic : <br>\nOne that act on the goal and only use constructive logic, and one that can act on the context and use classical logique</p>",
        "id": 271424478,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644496457
    },
    {
        "content": "<p>why would the constructive version be limited to just the goal? Anyway the whole point of this tactic was to do classical rewrites, I'm sure <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can tell the story better than I. We have a precedent for using <code>!</code> in tactics to enable \"classical mode\" but I'm not sure how acceptable that is to the people that use this tactic a lot</p>",
        "id": 271460477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644512280
    },
    {
        "content": "<p>Relevant: <a href=\"#narrow/stream/113489-new-members/topic/is.20.60push_neg.60.20classical.3F\">is <code>push_neg</code> classical?</a></p>",
        "id": 271461683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644512761
    },
    {
        "content": "<p>Of course <code>push_neg</code> is classical. But anyone is welcome to write another tactic <code>half_push_neg</code> or <code>masochistic_push_neg</code> that is intuistionistic. You can even write a <code>don't_push_neg</code> tactic that simply write an error message \"You seem to have too much fun, you should remove a couple more axioms\".</p>",
        "id": 271476073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644518868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/push_neg.20behavior/near/271460477\">said</a>:</p>\n<blockquote>\n<p>why would the constructive version be limited to just the goal? Anyway the whole point of this tactic was to do classical rewrites, I'm sure <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> can tell the story better than I. We have a precedent for using <code>!</code> in tactics to enable \"classical mode\" but I'm not sure how acceptable that is to the people that use this tactic a lot</p>\n</blockquote>\n<p>Well, the constructive version would be limited because you loose some equivalence so you can't do the same thing on the goal and on the var</p>",
        "id": 271505047,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1644532326
    },
    {
        "content": "<p>I assume you are only doing bidirectional rewrites here, because otherwise it could potentially make the goal unprovable</p>",
        "id": 271508722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644534881
    },
    {
        "content": "<p>in which case you can do the same thing on the goal and on the hypotheses (which is to say, not much)</p>",
        "id": 271508751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644534907
    },
    {
        "content": "<p>I kind of agree with Patrick here. Pushing negations isn't really a thing you can do in general intuitionistically, so presenting a tactic that fails half the time seems like a poor user experience</p>",
        "id": 271508907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644535034
    },
    {
        "content": "<p>It's like if we had a <code>prenex</code> tactic to put things in prenex normal form, but because it only does intuitionistic rewrites it just fails in all nontrivial cases</p>",
        "id": 271509040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644535124
    },
    {
        "content": "<p>It would be quite nice to know when something I'm doing with <code>push_neg</code> can be done in a constructive way, but I'm not sure your idea helps with that...</p>",
        "id": 281824459,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652189651
    },
    {
        "content": "<p>Hi, I have two more <code>push_neg</code> failures (possibly, the same bug):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_rfl</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 366512517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686838044
    },
    {
        "content": "<p>I think that in the match, the presence of the <code>let</code> messes up one of the cases extracting the <code>\\not</code>.  I'm seeing if I can add a <code>letE</code> match to fix the issue.</p>",
        "id": 366521681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686839627
    },
    {
        "content": "<p>There seems to be some <code>mdata</code> embedded in the term.  I do not think that <code>mdata</code> was a thing in Lean3, which might explain why this fails now, but was not failing before.</p>",
        "id": 366524527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686840106
    },
    {
        "content": "<p>If you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">ex.consumeMData</span>\n</code></pre></div>\n<p>just above the <code>match</code> on <a href=\"https://github.com/leanprover-community/mathlib4/blob/878d95c40e4a93f407c45a5bfa059a77eaf8bde9/Mathlib/Tactic/PushNeg.lean#L58-L59\">this line</a>, your examples seem to parse.</p>",
        "id": 366530328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686841196
    },
    {
        "content": "<p>I can PR this \"fix\", but I do not really understand the consequences of it.</p>\n<p>However, since <code>mdata</code> was not a field of <code>expr</code> in Lean3, it should not be a big deal for the port anyway...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 366530740,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686841252
    },
    {
        "content": "<p>EDIT: permalink fixed above.</p>",
        "id": 366531420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686841361
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/5082\">#5082</a>, in case you want to experiment (and to check that it does not break more than it fixes).</p>",
        "id": 366533099,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686841672
    },
    {
        "content": "<p>This is very cool: the PR had a failure at a porting note and now a <code>rw [not_not]</code> can go away!</p>",
        "id": 366539967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686842885
    },
    {
        "content": "<p>That's <a href=\"https://github.com/leanprover-community/mathlib4/pull/5082\">!4#5082</a></p>",
        "id": 366551951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686845035
    },
    {
        "content": "<p>This PR is very satisfying: every time that CI failed to build with the change has been an improvement!  I'm going to stop for the day, but if someone else wants to see if there are further errors and fix them, it is very gratifying!</p>",
        "id": 366606361,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686857649
    },
    {
        "content": "<p>I'll take a look now</p>",
        "id": 366606657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686857732
    },
    {
        "content": "<p>Maybe all issues have been resolved?</p>",
        "id": 366611532,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686858918
    },
    {
        "content": "<p>One thing that may be worth checking is that with the current \"fix\", stripping annotations happens <em>after</em> taking <code>whnf</code>.  I do not know if there is the need to take <code>whnf</code> of the un-annotated <code>Expr</code>.</p>",
        "id": 366611949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686859000
    },
    {
        "content": "<p>It's rebuilding the world because you touched the tactic, but it's up to 2805/3256. Still a few hundred files that could be broken :)</p>",
        "id": 366612213,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686859068
    },
    {
        "content": "<p>Alright!</p>",
        "id": 366612410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686859109
    },
    {
        "content": "<p>It might be interesting to grep around <code>contra/push_neg</code>s, searching for porting notes or <code>not...</code> and see if there are more regressions.</p>",
        "id": 366612676,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686859177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/push_neg.20behavior/near/366530328\">said</a>:</p>\n<blockquote>\n<p>If you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"n\">ex.consumeMData</span>\n</code></pre></div>\n<p>just above the <code>match</code> on <a href=\"https://github.com/leanprover-community/mathlib4/blob/878d95c40e4a93f407c45a5bfa059a77eaf8bde9/Mathlib/Tactic/PushNeg.lean#L58-L59\">this line</a>, your examples seem to parse.</p>\n</blockquote>\n<p>I've being writing  this kind of <code>consumeMData</code>lines in my meta-code as well, but I'd be interested to know if <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> think this is a dangerous \"blind fix\".</p>",
        "id": 366614018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686859486
    },
    {
        "content": "<p>Yes, I would like to know that as well.  In this situation, it seems to have resolved several porting notes, so maybe it is an ok fix.</p>\n<p>This seems like another one of these \"blanket\" debugging checklists: have you instantiated metavars?  Have you <code>focus</code>ed?  Have you <code>whnf</code>ed?  Have you <code>withContext</code>ed?</p>\n<p>Now, have you consumed annotations?</p>",
        "id": 366616109,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686860052
    },
    {
        "content": "<p>Nope, looks like it's going to be all green!</p>",
        "id": 366617599,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686860490
    },
    {
        "content": "<p>I added tests that passed to <code>by_contra</code>, but have not thought of looking at <code>push_neg</code>: there is still some possibility of failure!</p>",
        "id": 366617870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686860569
    },
    {
        "content": "<p>I labeled the PR as awaiting review, and would be very happy to receive further comments about whether the current version is suitable!</p>",
        "id": 366691721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686892840
    }
]