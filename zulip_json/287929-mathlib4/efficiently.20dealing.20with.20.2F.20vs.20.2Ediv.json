[
    {
        "content": "<p>my goal contains this term: <code>-↑R * x / ↑R * ↑R </code>, and I also have <code>↑R ∣ -↑R</code> in my context, so I'm trying to do <code>rw [ Int.mul_div_assoc (-↑R: Int) ]</code> to put this expression in a form that can be further simplified, but the lemma relies on <code>.div</code> while my goal uses <code>/</code> -- how can I reconcile the two? this seems to be an instance of a general pattern where I've previously had to deal with notations (e.g. writing lemmas of the form <code>(↑R)⁻¹ = ZMod.inv q (↑ R)</code> just to \"evaluate away\" the notation...) perhaps there is a good way to deal with these discrepancies?</p>\n<p>FYI I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Int.div</span> <span class=\"o\">(</span><span class=\"bp\">-↑</span><span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.27345</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.27346</span>\n</code></pre></div>",
        "id": 391786403,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695076552
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mul_ediv_assoc#doc\">docs#Int.mul_ediv_assoc</a> is what you want</p>",
        "id": 391786553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695076617
    },
    {
        "content": "<p><code>.div</code> and <code>/</code> are different operations (they round differently)</p>",
        "id": 391786566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695076625
    },
    {
        "content": "<p>ah that explains it. thanks!</p>",
        "id": 391786694,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695076685
    },
    {
        "content": "<p>It's a little confusing, because lemmas in <code>Std</code> about <code>/</code> are generally named <code>ediv</code>, while lemmas in mathlib use <code>div</code> in the name</p>",
        "id": 391786746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695076722
    },
    {
        "content": "<p>I think there's a proposal to rename <code>.div</code> to <code>.tdiv</code> such that <code>ediv</code> can be called <code>div</code> and the confusion is gone</p>",
        "id": 391786776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695076744
    },
    {
        "content": "<p>thanks Eric! and I'd be remiss if I didn't ask: is there an efficient tactic in mathlib that might help simplify this expression? (just trying to remove the R / R part...)</p>",
        "id": 391786844,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695076786
    },
    {
        "content": "<p>the proposal sounds good, but now that I now there's a confusing notation, I'll pay more attention to which one of the two I'm dealing with, thanks</p>",
        "id": 391786901,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695076805
    },
    {
        "content": "<p>I'm afraid that's not really answerable without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 391786911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695076815
    },
    {
        "content": "<p>no problem, let me work a little more on that, thanks</p>",
        "id": 391786972,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695076870
    },
    {
        "content": "<p>this is the original thing I was setting out to prove when I ran into / vs .div:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_R</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">R</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">q</span><span class=\"o\">]):</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 391788342,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695077734
    },
    {
        "content": "<p>Can you make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? (read the link)</p>",
        "id": 391790198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695078931
    },
    {
        "content": "<p>ah yes thanks I didn't realize <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> was clickable and I needed all of the imports... should be good now. I mean I did manage to prove that, but I'm wondering if there's a tactic that will do it in one step rather than my own painful 10 lines that involve proving divisibility and then re-arranging the terms rather tediously by hand</p>",
        "id": 391793389,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695080969
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ediv_mul_cancel#doc\">docs#Int.ediv_mul_cancel</a> should get you there almost instantly.</p>",
        "id": 391794077,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695081394
    },
    {
        "content": "<p>As for automation, no, we don't really have any for that because integer division isn't well-behaved.</p>",
        "id": 391794158,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695081448
    },
    {
        "content": "<p>yeah that's basically what I ended up doing</p>",
        "id": 391819945,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695094308
    },
    {
        "content": "<p>good to know that there isn't anything more principled</p>",
        "id": 391819956,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695094314
    },
    {
        "content": "<p>thanks!</p>",
        "id": 391819963,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695094317
    }
]