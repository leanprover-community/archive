[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This rewrite fails, with errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RwError.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">RightDistribClass</span> <span class=\"bp\">?</span><span class=\"n\">m.180</span>\n<span class=\"n\">RwError.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.258</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I'm aware this is fixable with <code>(α := ℕ)</code> or specifying <code>a</code>, but this still seems undesired to me. Further, this works in Lean 3, and I'm not aware of anything in the documentation which explains why this rewrite should fail.  For the sake of reference, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_one_mul#doc\">docs4#add_one_mul</a></p>",
        "id": 392607542,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695420432
    },
    {
        "content": "<p>(and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_one_mul\">docs3#add_one_mul</a>)</p>",
        "id": 392612575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695423220
    },
    {
        "content": "<p>This looks fairly easy to minimize into a mathlib-free mwe (#mfmwe?) and open an issue about</p>",
        "id": 392612739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695423298
    },
    {
        "content": "<p>I'm having a bit of trouble doing this - can anyone help out?</p>",
        "id": 392616546,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695425765
    },
    {
        "content": "<p>Having a look now.</p>",
        "id": 392617811,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695426767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RightDistribClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Distrib.rightDistribClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Distrib</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">RightDistribClass</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Distrib.right_distrib</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_mul</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RightDistribClass</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RightDistribClass.right_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_one_mul</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RightDistribClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Distrib</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Nat</span>       <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">RightDistribClass</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">add_one_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"c1\">-- works</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_one_mul</span><span class=\"o\">]</span>     <span class=\"c1\">-- failed to synthesize instance: RightDistribClass ?m</span>\n</code></pre></div>",
        "id": 392619082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695427735
    },
    {
        "content": "<p>Did an issue ever get made for this? I just ran into it again :/</p>",
        "id": 396580672,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697237805
    },
    {
        "content": "<p>I've managed to hit this again in a third situation! Here's an issue for it: <a href=\"https://github.com/leanprover/lean4/issues/2736\">https://github.com/leanprover/lean4/issues/2736</a></p>",
        "id": 397995786,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698028339
    },
    {
        "content": "<p>I think you might have linked a different recent <code>rw</code> issue by mistake—I think you want <a href=\"https://github.com/leanprover/lean4/pull/2736\">lean4#2736</a> :)</p>",
        "id": 397997845,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698029397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/regression.20in.20rw/near/397997845\">said</a>:</p>\n<blockquote>\n<p>I think you might have linked a different recent <code>rw</code> issue by mistake—I think you want <a href=\"https://github.com/leanprover/lean4/pull/2736\">lean4#2736</a> :)</p>\n</blockquote>\n<p>Oops, you're right, thanks!</p>",
        "id": 398131318,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698083047
    }
]