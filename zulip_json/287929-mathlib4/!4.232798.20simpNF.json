[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2798\">!4#2798</a> is failing in the lint stage repeatedly</p>",
        "id": 341141763,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678547333
    },
    {
        "content": "<p>should the currently running bors build be stopped?</p>",
        "id": 341141823,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678547350
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_add.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.mapAddHom_apply.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_neg.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_sub.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_sum.</span><span class=\"o\">{</span><span class=\"n\">u_5</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.forget_map.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofLeftExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofRightExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">GNUmakefile</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">lint</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">2</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 341141927,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678547394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Thanks! I took it of the queue.</p>",
        "id": 341143085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678547817
    },
    {
        "content": "<p>Wait, that's the wrong PR!</p>",
        "id": 341143155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678547841
    },
    {
        "content": "<p>Umm... I believe I put the right PR here</p>",
        "id": 341143411,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678547924
    },
    {
        "content": "<p>The linting errors are all about category theory. But that PR doesn't have anything to do with it.</p>",
        "id": 341143683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678548014
    },
    {
        "content": "<p>The errors all relate to the <code>CategoryTheory.Preadditive.AdditiveFunctor</code> port that was pushed a mere hour ago. Perhaps the \"ripple effect\" changes from <code>Data.Fintype.Basic</code> need to be extended to that file</p>",
        "id": 341144052,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678548130
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> is currently failing. I think that was the problem</p>",
        "id": 341145524,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678548669
    },
    {
        "content": "<p>Right...</p>",
        "id": 341145569,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678548698
    },
    {
        "content": "<p>Although it is very strange that that file would cause problems</p>",
        "id": 341145789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678548768
    },
    {
        "content": "<p>Maybe it's just <em>bors</em> getting confused, instead of mathport</p>\n<p>I saw the build for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2798\">!4#2798</a> fail three times</p>",
        "id": 341145882,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678548803
    },
    {
        "content": "<p>Hmmm, that is very weird indeed</p>",
        "id": 341145898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678548810
    },
    {
        "content": "<p>Ok, I took it of the queue again</p>",
        "id": 341146134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678548886
    },
    {
        "content": "<p>I ran the Linter for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> locally and it failed. Although <code>#lint</code> in the file where it failed seemed to succeed.</p>",
        "id": 341146185,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678548908
    },
    {
        "content": "<p>I guess maybe <code>runLinter</code> checks for <code>simpNF</code> after importing everything and <code>#lint</code> doesn't do that?</p>",
        "id": 341146272,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678548949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232798.20simpNF/near/341145882\">said</a>:</p>\n<blockquote>\n<p>Maybe it's just <em>bors</em> getting confused, instead of mathport</p>\n<p>I saw the build for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2798\">!4#2798</a> fail <strong>three</strong> times</p>\n</blockquote>\n<p>Re this: <a href=\"https://lichess.org/twejU3rW/black\">https://lichess.org/twejU3rW/black</a></p>\n<p><a href=\"/user_uploads/3121/FP4FSIRnTWQ7YmFtX7AxAPTI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FP4FSIRnTWQ7YmFtX7AxAPTI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FP4FSIRnTWQ7YmFtX7AxAPTI/image.png\"></a></div>",
        "id": 341147134,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678549254
    },
    {
        "content": "<p>I just tried <code>runLinter</code> on current master and it failed</p>",
        "id": 341147254,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678549300
    },
    {
        "content": "<p>That's the problem</p>",
        "id": 341147274,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678549309
    },
    {
        "content": "<p>Sorry, that's not the problem, I had old oleans.</p>",
        "id": 341148173,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678549600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Something to know about bors that might not be obvious is that it merges batches of PRs and does a single build. When there are build failures it rebuilds subsets.</p>",
        "id": 341149388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678550114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> has marked this topic as resolved.</p>",
        "id": 341153657,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678551856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> has marked this topic as unresolved.</p>",
        "id": 341157417,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678553351
    },
    {
        "content": "<p>merge conflict at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2803\">!4#2803</a></p>",
        "id": 341157442,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678553367
    },
    {
        "content": "<p>also it looks like some more PRs could be marked as ready</p>",
        "id": 341157859,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678553526
    },
    {
        "content": "<p>*to merge</p>",
        "id": 341159025,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678553986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> <code>ready-to-merge</code> is added automatically when a maintainer gives the <code>bors r+</code> (= <code>bors merge</code>) command.</p>",
        "id": 341165874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678557203
    },
    {
        "content": "<p>yeah I know that</p>",
        "id": 341165892,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678557211
    },
    {
        "content": "<p>If there are some PRs that you have reviewed and you think they look good, then please \"Approve\" them using the github interface.</p>",
        "id": 341166009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678557250
    },
    {
        "content": "<p>This is very helpful for maintainers, because they get the signal that another person think a PR is ready</p>",
        "id": 341166035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678557270
    },
    {
        "content": "<p>so, like this? <a href=\"https://github.com/leanprover-community/mathlib4/pull/2782\">!4#2782</a></p>",
        "id": 341166306,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678557399
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2769\">!4#2769</a> just failed with the simpNF errors, that's got to be the one</p>",
        "id": 341168325,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678558434
    },
    {
        "content": "<p>How do you mean? It's not on the bors queue, unless you're inferring something from whatever mattrobball merged something into this an hour ago.</p>",
        "id": 341169664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678559102
    },
    {
        "content": "<p>I did some poking at this. </p>\n<ul>\n<li>everything builds fine</li>\n<li><code>#lint</code> is clear on <code>CategoryTheory/Preadditive/AdditiveFunctor.lean</code></li>\n<li><code>#synth Limits.HasZeroObject D</code> fails after L54 on the same file </li>\n<li><code>runLinter</code> fails on this branch on my machine </li>\n<li><code>runLinter</code> succeeds on master on my machine</li>\n<li><code>runLinter</code>succeeds on this branch after removing <code>CategoryTheory/Abelian/Basic.lean</code> (the only new file)</li>\n</ul>\n<p>The errors from <code>simpNF</code> all complain about missing <code>HasZeroObject</code> instances on things where they should not be necessary (<code>Preadditive</code> does not extend <code>HasZeroObject</code> unless I mistaken).</p>",
        "id": 341172124,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678560350
    },
    {
        "content": "<p>If <code>simpNF</code> is trying to go from <code>Preadditive</code> to <code>Abelian</code> something is weird</p>",
        "id": 341173108,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678560841
    },
    {
        "content": "<p>Lean knows it does not need the <code>HasZeroObject</code> instances (as it shouldn't) but for some reason <code>simpNF</code> is looking for them</p>",
        "id": 341173723,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678561151
    },
    {
        "content": "<p>I probably won't have much time to look at this more until this evening. Anyone should feel free to diagnose and cure. (And then we can knock off another target.)</p>",
        "id": 341173944,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678561258
    },
    {
        "content": "<p>Typo fix: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2816\">!4#2816</a></p>",
        "id": 341209114,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678587177
    },
    {
        "content": "<p>…now I'm getting the same problem in the workflow for <strong>my own</strong> <a href=\"https://github.com/leanprover-community/mathlib4/pull/2816\">!4#2816</a> !!!</p>",
        "id": 341286281,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678630370
    }
]