[
    {
        "content": "<p>I had a go at making a bunch of stuff to do with <code>TensorProduct</code> irreducible to see if it would improve performance in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3555\">!4#3555</a> It didn't seem to make much difference, but it did throw up an interesting diamond. If I add the following code <a href=\"https://github.com/leanprover-community/mathlib4/blob/4f2edb73f3c73ce6bfb9d1a57fe3622ae5dd65fb/Mathlib/LinearAlgebra/TensorProduct.lean#L322\">here</a> then <code>rfl</code> fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Units.instSMulUnits</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">TensorProduct.leftHasSMul</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>This is not a diamond in current Mathlib4 master, but the commutavity relies on the defeq <code>a • (x ⊗ₜ y) = (a • x) ⊗ₜ y</code>, which itself relies on unfolding everthing to <code>AddCon</code> and then to <code>Quot</code> and using the defeq <code>Quot.lift_mk</code>. I don't know if this is a really bad thing, but it's possible that this sort of thing is behind some of the performance problems we've been having and it's certainly worth being aware that we're doing this if we weren't already.</p>",
        "id": 351390356,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1682012241
    },
    {
        "content": "<p>I think we're aware of this, it's the same reason that the <code>smul</code> on polynomial can't be irreducible (edit: see <a href=\"https://github.com/leanprover-community/mathlib/pull/8392\">#8392</a>)</p>",
        "id": 351391738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682012652
    },
    {
        "content": "<p>If you make it irreducible then all sort of diamonds don't commute any more</p>",
        "id": 351391808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682012674
    },
    {
        "content": "<p>I don't think this is a performance issue having tested it, but it is annoying that we need to think about this</p>",
        "id": 351392242,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1682012809
    },
    {
        "content": "<p>It would be nice if we could steer defeq testing using higher-level defeqs</p>",
        "id": 351392807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682012989
    },
    {
        "content": "<p>But maybe there's no sensible algorithm for that</p>",
        "id": 351392950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682013020
    },
    {
        "content": "<p>It would be nice to not have to use our current notion of defeq IMO, but that's a gigantic project. I think this is basically a really hard problem.</p>",
        "id": 351393186,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1682013081
    }
]