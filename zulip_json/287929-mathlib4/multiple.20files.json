[
    {
        "content": "<p>How do I work on two files added to mathlib <code>A.lean</code> and <code>B.lean</code>, where <code>A</code> uses <code>sorry</code>, and <code>B</code> imports <code>A</code>?<br>\n<code>lake build</code> errors on the sorry and doesn't build an olean file for <code>A</code></p>",
        "id": 362484274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545233
    },
    {
        "content": "<p>And when I have <code>B</code> open it tries to build <code>A</code> and fails.</p>",
        "id": 362484691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545313
    },
    {
        "content": "<p>Does replacing sorry with <code>admit</code> help?</p>",
        "id": 362486005,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685545564
    },
    {
        "content": "<p>I replaced with an axiom <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 362486104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545589
    },
    {
        "content": "<p>I used it in term mode a lot.</p>",
        "id": 362486227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545620
    },
    {
        "content": "<p>OMG <code>error: unused variable `h` [linter.unusedVariables]</code></p>",
        "id": 362486424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545673
    },
    {
        "content": "<p>Yeah no kidding, it will be used in the proof.</p>",
        "id": 362486572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545695
    },
    {
        "content": "<p>Am I in uncharted territory?</p>",
        "id": 362486712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545731
    },
    {
        "content": "<p>If you remove that setting fron the lakefile, does that work or would that invalidate all the cache?</p>",
        "id": 362487510,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1685545905
    },
    {
        "content": "<p>That is <code>DwarningsAsErrors</code></p>",
        "id": 362487642,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1685545927
    },
    {
        "content": "<p>It started rebuilding everything</p>",
        "id": 362487756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685545954
    },
    {
        "content": "<p>The good news is when I put it back, it only rebuilt the 5 files it got to before I stopped it!</p>",
        "id": 362488214,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685546045
    },
    {
        "content": "<p>Maybe it's better for now to work in a project with mathlib as a dependency?</p>",
        "id": 362492020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685546840
    },
    {
        "content": "<p>This same issue came up for me yesterday. Is using <code>axiom</code>s really the only way?</p>",
        "id": 362494090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685547237
    },
    {
        "content": "<p>Certainly we're going to need some way to work on multiple files at once without being stopped by linter nonsense</p>",
        "id": 362502304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685548891
    },
    {
        "content": "<p>I think we need a way to enable this <code>DwarningsAsErrors</code> only in CI, not when editing files.</p>",
        "id": 362502851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685549000
    },
    {
        "content": "<p>Also surely the unused variables linter should just shut up whenever a declaration uses <code>sorry</code>, no?</p>",
        "id": 362503921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685549244
    },
    {
        "content": "<p>That also sounds extremely reasonable</p>",
        "id": 362504541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685549389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362494090\">said</a>:</p>\n<blockquote>\n<p>This same issue came up for me yesterday. Is using <code>axiom</code>s really the only way?</p>\n</blockquote>\n<p>I had the same issue too. My solution was to fill in all the <code>sorry</code>'s in the imported file, which is suboptimal in general.</p>",
        "id": 362507188,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685549960
    },
    {
        "content": "<p>Ah I see now. It's all because of these lines in the lakefile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- These settings only apply during `lake build`, but not in VSCode editor.</span>\n<span class=\"kd\">def</span> <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"-DwarningAsError=true\"</span>\n<span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">moreServerArgs</span>\n</code></pre></div>\n<p>Maybe we can arrange for the CI to just add that flag as part of the build, and remove this from mathlib4's lakefile?</p>",
        "id": 362514004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685551599
    },
    {
        "content": "<p>There must be a way to pass this flag directly in the <code>lake build</code> command in the CI itself, no?</p>",
        "id": 362514514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685551719
    },
    {
        "content": "<p>As long as we can still reuse the cache from ci</p>",
        "id": 362515944,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685552047
    },
    {
        "content": "<p>The much simpler way to shut up the unused variables linter is to (1) use <code>_</code> before the variable or (2) turn off the unused variables linter in the file or section</p>",
        "id": 362559368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563201
    },
    {
        "content": "<p>But the sorries causing errors is a bigger problem. It essentially means you cannot work with multiple files at the same time.</p>",
        "id": 362559660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362503921\">said</a>:</p>\n<blockquote>\n<p>Also surely the unused variables linter should just shut up whenever a declaration uses <code>sorry</code>, no?</p>\n</blockquote>\n<p>I don't think this is a good idea, because it's easy to cause that old issue where <code>def foo (x : Nat) : Nat := sorry</code> creates a constant function and theorems are suddenly really easy to prove by <code>rfl</code></p>",
        "id": 362559777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563303
    },
    {
        "content": "<p>using an axiom is a decent workaround, I use that in test files too sometimes</p>",
        "id": 362559956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563343
    },
    {
        "content": "<p>but it's definitely more dangerous since it would also pass CI</p>",
        "id": 362560054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563364
    },
    {
        "content": "<p>That (using axioms) doesn't scale. If I'm working on some file with deeply nested structures with various obvious proof obligations that I'm too lazy to fulfill right now, I don't want to have to introduce 37 axioms just to be able to use this file in a second file I'm working on.</p>",
        "id": 362560290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563432
    },
    {
        "content": "<p>I think moving CI to use <code>-DwarningsAsErrors</code> makes sense</p>",
        "id": 362560331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563442
    },
    {
        "content": "<p>that's usually what I do in other languages</p>",
        "id": 362560390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563455
    },
    {
        "content": "<p>It's not 37 axioms, it's 1 <code>axiom mySorry {A : Sort _} : A</code></p>",
        "id": 362560480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563491
    },
    {
        "content": "<p>and then you use <code>mySorry</code> instead of <code>sorry</code></p>",
        "id": 362560551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563514
    },
    {
        "content": "<p>oh I see okay.</p>",
        "id": 362560572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563521
    },
    {
        "content": "<p>yeah that's fine then :)</p>",
        "id": 362560584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563526
    },
    {
        "content": "<p>But then I have to remember to remove 37 <code>mySorries</code> at some point</p>",
        "id": 362560782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563594
    },
    {
        "content": "<p>well you should remove <code>mySorry</code> itself before it hits the PR</p>",
        "id": 362560826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563612
    },
    {
        "content": "<p>Well, I guess just removing the axiom will give all the errors.</p>",
        "id": 362560829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685563612
    },
    {
        "content": "<p>IIRC the <code>roadmap</code> directory also had a <code>mySorry</code> in it</p>",
        "id": 362560997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685563672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362559368\">said</a>:</p>\n<blockquote>\n<p>(2) turn off the unused variables linter in the file or section</p>\n</blockquote>\n<p>How do I do this?</p>",
        "id": 362564530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685564768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362559777\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362503921\">said</a>:</p>\n<blockquote>\n<p>Also surely the unused variables linter should just shut up whenever a declaration uses <code>sorry</code>, no?</p>\n</blockquote>\n<p>I don't think this is a good idea, because it's easy to cause that old issue where <code>def foo (x : Nat) : Nat := sorry</code> creates a constant function and theorems are suddenly really easy to prove by <code>rfl</code></p>\n</blockquote>\n<p>Renaming <code>x</code> to <code>_x</code> will not help with that. And meanwhile it adds a bunch of busy work that also needs to be undone later when/if you fill in the <code>sorry</code>.</p>",
        "id": 362564766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685564854
    },
    {
        "content": "<p>What would be cool is if <code>sorry</code> could generate something like <code>sorryAx x</code>, for each unused variable <code>x</code> in scope (or maybe just every variable in scope?)</p>",
        "id": 362565520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685565110
    },
    {
        "content": "<p>Unfortunately just writing <code>mySorry x</code> doesn't work (Lean doesn't seem to want to infer the type of <code>mySorry</code> as a function)</p>",
        "id": 362566116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685565297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362564530\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362559368\">said</a>:</p>\n<blockquote>\n<p>(2) turn off the unused variables linter in the file or section</p>\n</blockquote>\n<p>How do I do this?</p>\n</blockquote>\n<p>The reason linter warnings mention the linter name is because it's an option that you can set</p>",
        "id": 362567947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685565811
    },
    {
        "content": "<p><code>set_option linter.unusedVariables false</code></p>",
        "id": 362567996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685565833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362565520\">said</a>:</p>\n<blockquote>\n<p>What would be cool is if <code>sorry</code> could generate something like <code>sorryAx x</code>, for each unused variable <code>x</code> in scope (or maybe just every variable in scope?)</p>\n</blockquote>\n<p>It should be every variable in scope, except possibly the implDetail variables like the theorem name itself since this can cause a weird interaction with the termination checker</p>",
        "id": 362568391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685565953
    },
    {
        "content": "<p>this sounds like a proposal for a <code>sorry!</code> tactic</p>",
        "id": 362568558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685565997
    },
    {
        "content": "<p>Doesn't <code>sorry</code> already behave as some special elaborator?</p>",
        "id": 362568656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566026
    },
    {
        "content": "<p>it has an elaborator, not sure how special it is</p>",
        "id": 362568722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566045
    },
    {
        "content": "<p>it elaborates to <code>sorryAx _</code> IIRC</p>",
        "id": 362568782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566068
    },
    {
        "content": "<p>Fair enough</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtin_term_elab «sorry»]</span> <span class=\"kd\">def</span> <span class=\"n\">elabSorry</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stxNew</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"n\">_</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"n\">withMacroExpansion</span> <span class=\"n\">stx</span> <span class=\"n\">stxNew</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stxNew</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 362568816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566080
    },
    {
        "content": "<p>note that tactic sorry has a separate implementation, also in terms of <code>sorryAx</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"sorry\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">sorryAx</span> <span class=\"n\">_</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362568975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566122
    },
    {
        "content": "<p>I guess it could be ... <code>exact sorry</code> right?</p>",
        "id": 362569373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566255
    },
    {
        "content": "<p>If possible, I'd prefer to avoid adding yet another thing that you have to know and remember about to opt in to the correct behavior rather than the wrong one</p>",
        "id": 362569523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566308
    },
    {
        "content": "<p>I guess that when the type of the <code>sorry</code> is a <code>Prop</code>, there's no need to make a term that depends on all the variables</p>",
        "id": 362569704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566358
    },
    {
        "content": "<p>Sure, make an issue ig</p>",
        "id": 362569842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566413
    },
    {
        "content": "<p>Anyways, I think the more urgent question is how we can get <code>-DwarningAsError=true</code> used only by CI, while still having it produce usable oleans. I guess Lean needs to be told that this flag doesn't olean compatibility?</p>",
        "id": 362569993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566449
    },
    {
        "content": "<p>I'm pretty sure something like <code>lake build --lean-args=\"-DwarningAsError=true\"</code> works, I need to look up the syntax</p>",
        "id": 362570167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566506
    },
    {
        "content": "<p>the olean compatibility problem is solved as long as the user lakefile.lean is byte for byte equal to the one used by CI</p>",
        "id": 362570270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566546
    },
    {
        "content": "<p>Oh wild</p>",
        "id": 362570348,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566563
    },
    {
        "content": "<p>I assumed it would be based on the actual flags used</p>",
        "id": 362570469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566598
    },
    {
        "content": "<p>It seems like adding irrelevant whitespace to the lakefile doesn't invalidate my oleans</p>",
        "id": 362570852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566719
    },
    {
        "content": "<p>It invalidates the cache key</p>",
        "id": 362571072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566785
    },
    {
        "content": "<p>Oh I see, I'm not using any cache.</p>",
        "id": 362571191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685566804
    },
    {
        "content": "<p>looking at the code now, lake lets you set <code>-K</code> options which are accessible via <code>get_config?</code> to the lakefile, so we could put some code in <code>meta if get_config? CI = true then ...</code> and set <code>-KCI=true</code> on the CI command line</p>",
        "id": 362571452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685566888
    },
    {
        "content": "<p>In general I would expect that running <code>lake build</code> with different <code>-K</code> flags would cause recompilation, especially if this involves invoking Lean with different options.</p>",
        "id": 362572639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567200
    },
    {
        "content": "<p>the oleans don't have the lake invocation that produced them written in their binary, so I don't see why?</p>",
        "id": 362572800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567271
    },
    {
        "content": "<p>The experiment I did was to just comment out the <code>\"-DwarningAsError=true\"</code> line, and then <code>lake build</code> started rebuilding stuff. So there is some mechanism here we need to evade or disable.</p>",
        "id": 362572898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567296
    },
    {
        "content": "<p>if you produce oleans with different configuration then okay, but if it has no effect on the end product I don't think lake is doing any additional caching</p>",
        "id": 362572933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567310
    },
    {
        "content": "<p>yeah, changing the lakefile directly won't work</p>",
        "id": 362572980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567329
    },
    {
        "content": "<p>Do you mean that <code>lake</code> is the thing doing the recompilation checking, via its own invalidation mechanism, and not <code>lean</code>?</p>",
        "id": 362573091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567370
    },
    {
        "content": "<p>yes, of course</p>",
        "id": 362573112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567378
    },
    {
        "content": "<p>lean doesn't do any dependency tracking at all</p>",
        "id": 362573145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567393
    },
    {
        "content": "<p>it doesn't have a <code>--make</code> mode anymore, it just compiles what you tell it to</p>",
        "id": 362573250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567417
    },
    {
        "content": "<p>how quaint!</p>",
        "id": 362573286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567430
    },
    {
        "content": "<p>the model seems to be based on <code>rustc</code> / <code>cargo</code> interactions, or <code>gcc</code> / <code>make</code></p>",
        "id": 362573458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567487
    },
    {
        "content": "<p>the compiler just takes a bazillion flags telling it what to read and what to write and the build tool does dependency management and recompiles things intelligently</p>",
        "id": 362573604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567535
    },
    {
        "content": "<p>Where is this state stored then? In these <code>.trace</code> files?</p>",
        "id": 362573756,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567601
    },
    {
        "content": "<p>I was thinking it was in the oleans but that makes more sense</p>",
        "id": 362573834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567638
    },
    {
        "content": "<p>yes the <code>.trace</code> file contains a hash of the stuff which would invalidate the artifact if changed</p>",
        "id": 362574002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567694
    },
    {
        "content": "<p>although if you use <code>--old</code> it ignores the hashes and uses modification date tracking instead</p>",
        "id": 362574145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685567752
    },
    {
        "content": "<p>This seems promising but I'm not sure how to reconcile these statements</p>\n<ol>\n<li>Removing \"-DwarningAsError=true\" from <code>moreLeanArgs</code> causes recompilation</li>\n<li>Adding irrelevant whitespace to the file doesn't cause recompilation</li>\n<li>Passing <code>lake</code> a <code>-KCI=true</code> command line option doesn't cause recompilation even if the effect is to add something to <code>moreLeanArgs</code></li>\n</ol>",
        "id": 362574800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567949
    },
    {
        "content": "<p>I tested 1 and 2 but not 3.</p>",
        "id": 362574840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685567968
    },
    {
        "content": "<p>I am not sure yet what the mechanism is for (2)</p>",
        "id": 362575533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568222
    },
    {
        "content": "<p>I do like these <code>.trace</code> files that are just hashes printed in decimal</p>",
        "id": 362575690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568264
    },
    {
        "content": "<p>Isn't catching every variable in scope going to do totally the wrong thing for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"c1\">-- used elsewhere</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">new_sorry</span>\n</code></pre></div>\n<p>which would make <code>foo</code> take three arguments not one?</p>",
        "id": 362575778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685568304
    },
    {
        "content": "<p>Anyone got a shorter one than... (16 bytes) ?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>-rw-rw-r-- 1 rwbarton rwbarton 16 May 31 22:57 ./build/lib/Mathlib/Algebra/Module/Opposites.trace\n</code></pre></div>",
        "id": 362575794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568309
    },
    {
        "content": "<p>looks like the hash of a lean module is the combined hashes of its <code>olean</code> and <code>ilean</code> files. So if you make a modification that doesn't affect either one then it won't be invalidated</p>",
        "id": 362576147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568424
    },
    {
        "content": "<p>Wait what about the source? Is this a different kind of hash? Or do you mean the \"hash of an imported lean file\"?</p>",
        "id": 362576486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568519
    },
    {
        "content": "<p>no the source is not hashed, that was my point actually</p>",
        "id": 362576679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568587
    },
    {
        "content": "<p>however the ilean is quite overfit to the source because of things like line/col positions</p>",
        "id": 362576771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568606
    },
    {
        "content": "<p>Doesn't lake rebuild an olean file if I edit the source file?</p>",
        "id": 362576800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568614
    },
    {
        "content": "<p>Or is this handled some other way (like by modification time)?</p>",
        "id": 362576840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568632
    },
    {
        "content": "<p>modification time is used, sometimes...</p>",
        "id": 362577000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568694
    },
    {
        "content": "<p>this code is really abstract, it's hard to tell why it does anything</p>",
        "id": 362577065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568722
    },
    {
        "content": "<p>I am afraid if I look at it I will get flashbacks to <code>Cabal</code>.</p>",
        "id": 362577239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568789
    },
    {
        "content": "<p>it's peak functional programming</p>",
        "id": 362577304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568823
    },
    {
        "content": "<p>(Did you know <code>Cabal</code> supports non-GHC compilers? ...I think?)</p>",
        "id": 362577331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568838
    },
    {
        "content": "<p>Maybe it is easier to just test on a new project</p>",
        "id": 362577458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685568878
    },
    {
        "content": "<p>did you know lake supports lakefiles that aren't called <code>lakefile.lean</code>? (The server definitely doesn't!)</p>",
        "id": 362577472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685568885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/multiple.20files/near/362559777\">said</a>:</p>\n<blockquote>\n<p>I don't think this is a good idea, because it's easy to cause that old issue where <code>def foo (x : Nat) : Nat := sorry</code> creates a constant function and theorems are suddenly really easy to prove by <code>rfl</code></p>\n</blockquote>\n<p>Most of the time we're using <code>sorry</code> for theorems, and it would be nice if the linter didn't flag those.</p>",
        "id": 362721865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685619524
    }
]