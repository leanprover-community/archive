[
    {
        "content": "<p>For some reason, if I execute <code>lake build +Mathlib.&lt;file&gt;</code> in the VS code terminal (so the right branch is checked out and everything), wait for it to complete, then look at the file (for the first time) with the VS code extension, it build all of the requisite files over again as though I hadn't already built them.</p>\n<p>I would have expected <code>lake build</code> and the extension to refer to the same build files—do they not? Can anyone else reproduce this? (I'm on Mac OS Monterey)</p>",
        "id": 325732166,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675461944
    },
    {
        "content": "<p>Did you try <code>Lean 4 : restart server</code>?</p>",
        "id": 325732333,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675462011
    },
    {
        "content": "<p>Is it standard to need to restart the server after running <code>lake build</code>?</p>",
        "id": 325732459,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675462074
    },
    {
        "content": "<p>Not that I've noticed, but it would be the first thing I would have tried (note: this certainly <em>was</em> necessary in Lean 3)</p>",
        "id": 325732837,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675462237
    },
    {
        "content": "<p>Maybe it’ll work, but fwiw this has been consistent behavior since I’ve started using lean, so if it does work I imagine it’ll mean having to restart after any <code>lake build</code></p>",
        "id": 325733062,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675462338
    },
    {
        "content": "<p>Note, when VS Code builds files, it doesn't actually write them to disk, so, yes, in some sense they work with different files (although VS Code tries to use what is on the disk first). If what I highlighted is the issue, then I think it's just about what VS Code has cached in memory, and that this hasn't been updated after the <code>lake build</code>.</p>",
        "id": 325733459,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675462546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20build.60.20builds.20independently.20of.20lean4.20VS.20code.20extension/near/325732166\">said</a>:</p>\n<blockquote>\n<p>For some reason, if I execute <code>lake build +Mathlib.&lt;file&gt;</code> in the VS code terminal (so the right branch is checked out and everything), wait for it to complete, then look at the file (for the first time) with the VS code extension, it build all of the requisite files over again as though I hadn't already built them.</p>\n<p>I would have expected <code>lake build</code> and the extension to refer to the same build files—do they not? Can anyone else reproduce this? (I'm on Mac OS Monterey)</p>\n</blockquote>\n<p>They should.  Are you sure both use the same Lean version?  You can check <code>#eval Lean.versionString</code></p>",
        "id": 325734164,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675462868
    },
    {
        "content": "<blockquote>\n<p>Note, when VS Code builds files, it doesn't actually write them to disk,</p>\n</blockquote>\n<p>This was in Lean 3.  In Lean 4 the built dependencies are written to disk.  (aka be careful when opening two files at once, or opening a file while lake build is running)</p>",
        "id": 325734264,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675462920
    },
    {
        "content": "<p>Good to know, thanks.</p>",
        "id": 325734503,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675463001
    },
    {
        "content": "<p>Ah, good catch. The lean versions are different: <code>4.0.0-nightly-2023-02-03</code> in the extension and <code>4.0.0-nightly-2023-01-29</code>. But that’s a bit surprising, since I don’t have any workspace overrides or anything. How do I keep the lake lean version synced with the <code>elan</code> one? (<code>lake update</code> doesn’t seem to do what I want) Or, vice versa, the extension version synced with the lake version?</p>",
        "id": 325741315,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675466175
    },
    {
        "content": "<p>Are you using vscode?  Did you by any chance ever use the <code>Lean 4: Select Lean Toolchain</code> command?</p>",
        "id": 325742630,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675466989
    },
    {
        "content": "<p>Yes, I’m in vscode, and I have used it in the past, but I just use the default now. (Evidenced (I think) by the fact that when I run <code>elan update</code>, the extension updates its version too.)</p>",
        "id": 325742859,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467115
    },
    {
        "content": "<p><code>elan update</code> shouldn't have any effect here</p>",
        "id": 325742924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675467139
    },
    {
        "content": "<p>Do you get the right version after <code>Lean 4: Restart Server</code>?</p>",
        "id": 325742996,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675467199
    },
    {
        "content": "<p>That’s strange—it does indeed have an effect. When I first started writing this thread, in fact, I was on <code>02-01</code>, then I ran <code>elan update</code>, restarted the server, and got <code>02-03</code> (neither of which match lake)</p>",
        "id": 325743042,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467235
    },
    {
        "content": "<p>You do have a <code>lean-toolchain</code> file, right?</p>",
        "id": 325743101,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675467247
    },
    {
        "content": "<p>I believe so—it’s just a typical branch of mathlib4</p>",
        "id": 325743150,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467279
    },
    {
        "content": "<p>(On mobile now, so going from memory)</p>",
        "id": 325743190,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467303
    },
    {
        "content": "<blockquote>\n<p>I’m in vscode, and I have used it in the past, but I just use the default now.</p>\n</blockquote>\n<p>Can you elaborate on what you selected as \"default\"?</p>",
        "id": 325743197,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675467307
    },
    {
        "content": "<p>I’ll check when I get back to my computer :)</p>",
        "id": 325743220,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467327
    },
    {
        "content": "<p>(iirc it’s “nightly (default)” but we’ll see)</p>",
        "id": 325743328,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467368
    },
    {
        "content": "<p>Oh yeah, I think it's time to remove that feature.  The correct way to select default is to first select \"other...\" at the end of the list and then enter the empty string.</p>",
        "id": 325743817,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675467647
    },
    {
        "content": "<p>ahhh…I would never have thought of that! Thanks! (Maybe I’ll open an issue on the vscode lean4 extension repo; I feel there should be an explicit option in the drop-down to select the current package toolchain.)</p>",
        "id": 325744138,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675467857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> has marked this topic as resolved.</p>",
        "id": 325745982,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675468983
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean4/pull/284\">https://github.com/leanprover/vscode-lean4/pull/284</a></p>",
        "id": 325746527,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675469274
    },
    {
        "content": "<p>Are you actually making use of the \"select toolchain\" feature, or were you just under the impression that it's the right way to select Lean versions in vscode?</p>",
        "id": 325746616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675469312
    },
    {
        "content": "<p>If you're using it, is there anything you can't do with <code>elan override</code> already?  I'd like to reduce the number of ways you can override the Lean version to prevent mixups like the one here.</p>",
        "id": 325746691,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675469378
    },
    {
        "content": "<p>I was actually making use of it to test different Lean builds back when I was seeing if I could put <code>refine_struct</code> functionality into core, but If <code>elan override</code> does the trick and the extension picks up on it, that would be fine!</p>",
        "id": 325746846,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675469477
    },
    {
        "content": "<p>Yes, and <code>elan override</code> will also work on the command-line with <code>lake build</code> and co.</p>",
        "id": 325746945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675469526
    },
    {
        "content": "<p>That seems to me like a great way to make sure everything is in sync, then :)</p>",
        "id": 325747012,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675469579
    },
    {
        "content": "<p>(If there <em>were</em> some kind of extension capability to select a toolchain, perhaps it should simply be an alias of sorts for <code>elan override</code>, as working entirely with vscode commands would be nice—but I imagine this is very low priority. In that case it would need an option to clearly distinguish “no override/use package toolchain” from the “elan default” (perhaps by not showing “(default)” after any name, since that info isn’t relevant in this context))</p>",
        "id": 325747207,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675469695
    },
    {
        "content": "<p>I'd actually rather not advertise <code>elan override</code> too widely.  It's an advanced command for expert developers, and it's better if you can't use it accidentally.  The recommended way to switch Lean versions is the <code>lean-toolchain</code> file, that's the direction I want to push people to.</p>",
        "id": 325747930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675470212
    },
    {
        "content": "<p>Just for the record, learned a couple things on returning to my computer: </p>\n<ol>\n<li>\n<p>It <em>does</em> say that I have workspace override, though the override was the nightly, which it originally reported as “(default)” in the dropdown (though not after it had been selected as the override)</p>\n</li>\n<li>\n<p>“Reset workspace override” is an option in the select toolchain list, and clicking it fixed it.</p>\n</li>\n</ol>\n<p>So it wasn’t as bad as I thought—a case of me choosing the wrong action at one point then not realizing what I needed to check to fix it later—but it is still unintuitive that it initially called it (default) and that it allowed the workspace and the command line to decouple like that at all.</p>",
        "id": 325755750,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675475933
    },
    {
        "content": "<p>To be honest I would be inclined (if I was actually spending time on elan) to remove any kind of toolchain override from elan apart from <code>lean-toolchain</code> (and <code>leanpkg.toml</code> for compatibility I suppose). It should <em>never</em> be possible to break a build in a way that is not visible in <code>git diff</code>.</p>",
        "id": 325792509,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675503573
    }
]