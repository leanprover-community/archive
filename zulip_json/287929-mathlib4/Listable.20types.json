[
    {
        "content": "<p>What's the canonical way to speak about finite types <code>X</code> where there is a list <code>L : List X</code> with no duplicates where <code>L.toFinset = Finset.elems</code>? </p>\n<p>One way is to say something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.univ.sort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And this is indeed equivalent since a list <code>L</code> as above induces a linear order in the obvious way. But is this the right way to do this?</p>",
        "id": 408222952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and I had a PR in Lean 3 to add a typeclass for such types, but it never landed.</p>",
        "id": 408223539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702659727
    },
    {
        "content": "<p>What class did you use? Or did you make a new class?</p>",
        "id": 408223623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659752
    },
    {
        "content": "<p>We were making a new one.</p>",
        "id": 408223669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702659768
    },
    {
        "content": "<p>Nowadays you have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum#doc\">docs#FinEnum</a> (although I'm not sure what the motivation for it was) for <code>Fin</code>-indexed tuples, and I have a version of it which further contains a <code>List</code> (for defeq convenience) in my second-year computing project.</p>",
        "id": 408223895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702659837
    },
    {
        "content": "<p>Ok, I guess <code>FinEnum</code> accomplishes the same thing.</p>",
        "id": 408224006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659871
    },
    {
        "content": "<p>I guess it depends what you want to do with it. Do you want to run code?</p>",
        "id": 408224114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702659920
    },
    {
        "content": "<p>yeah</p>",
        "id": 408224126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659926
    },
    {
        "content": "<p>it looks computable enough!?</p>",
        "id": 408224151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659934
    },
    {
        "content": "<p>Then probably you need my version, which instead contains a <code>List</code> (or an <code>Array</code>)</p>",
        "id": 408224197,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702659956
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum.toList#doc\">docs#FinEnum.toList</a></p>",
        "id": 408224276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659975
    },
    {
        "content": "<p>that should be good enough for me.</p>",
        "id": 408224285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702659980
    },
    {
        "content": "<p>Okay! Ring me up if not.</p>",
        "id": 408224355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702660012
    },
    {
        "content": "<p>It's computable only in the weakest sense, the implementation is pretty computationally awful and goes back and forth between lists everywhere</p>",
        "id": 408225737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702660527
    }
]