[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3141\">!4#3141</a> is easy, since it only modifies four SHAs</p>",
        "id": 344964250,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679949765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is wrong</p>",
        "id": 344964563,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679949881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, no, Scott is right here. The point is not just to check the diff on GitHub, the point is that one must verify that the content of the mathlib3 diffs already appear in mathlib4. This is nontrivial work.</p>",
        "id": 344964922,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679950026
    },
    {
        "content": "<p>This obviously takes more than 20s to review. In particular, one needs to check what has happened to the changes listed at <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/group/opposite?range=acebd8d49928f6ed8920e502a6c90674e75bd441..76de8ae01554c3b37d66544866659ff174e66e1f\">https://leanprover-community.github.io/mathlib-port-status/file/algebra/group/opposite?range=acebd8d49928f6ed8920e502a6c90674e75bd441..76de8ae01554c3b37d66544866659ff174e66e1f</a>, and this is not obvious from the PR page.</p>\n<p>Please do not add further <code>easy</code> tags (speaking with my maintainer hat on).</p>",
        "id": 344964938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679950035
    },
    {
        "content": "<p>Declaring that someone is wrong is <em>not</em> a fruitful way to start a discussion.<br>\n(Especially if that person has several years and tens of thousands of lines of Lean experience.)</p>",
        "id": 344964954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679950042
    },
    {
        "content": "<p>Yeah, no, that's not an easy PR. Not too hard, but not <code>easy</code>.</p>",
        "id": 344964992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679950061
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 344964995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679950062
    },
    {
        "content": "<p>Does <span aria-label=\"butterfly\" class=\"emoji emoji-1f98b\" role=\"img\" title=\"butterfly\">:butterfly:</span>  apply here also?</p>",
        "id": 344965086,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679950090
    },
    {
        "content": "<p>Yes, but only if it's clear what that means to the person receiving it.</p>",
        "id": 344965152,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679950120
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Community.20Guidelines\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Community.20Guidelines</a></p>",
        "id": 344965193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679950137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, do you understand that you are being asked to no longer use the <code>easy</code> tag?</p>",
        "id": 344965303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1679950187
    },
    {
        "content": "<p>Yes, we should eliminate it entirely</p>",
        "id": 344965418,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679950216
    },
    {
        "content": "<p>There are very few situations where a review would take less than 20 seconds</p>",
        "id": 344965989,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679950442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> There is a community consensus here which you will learn eventually.  See the 2500 PRs labelled \"easy\" on mathlib3.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pulls?q=is%3Apr+label%3Aeasy+\">https://github.com/leanprover-community/mathlib/pulls?q=is%3Apr+label%3Aeasy+</a></p>",
        "id": 344966259,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679950552
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18519\">#18519</a> is my most recent <code>easy</code> PR, just as a data point I could lay my hands on quickly. (edit: sorry, I originally had a typo in the PR number).</p>",
        "id": 344966392,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679950599
    },
    {
        "content": "<p>The <code>easy</code> tag has its place, it just doesn't happen to be on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3141\">!4#3141</a> for the reasons specified above.</p>",
        "id": 344966511,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679950639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/How.20easy.20is.20an.20easy.20PR.3F/near/344965418\">said</a>:</p>\n<blockquote>\n<p>Yes, we should eliminate it entirely</p>\n</blockquote>\n<p>An easy thing you could do here is pretend it doesn't exist and not apply it to anything  -- that way it effectively doesn't exist for you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>(Also, please don't apply tags to other people's PRs. The community norm, or at least my understanding of it, is that the following people can apply tags: PR authors, PR coauthors, and maintainers. For example, applying <code>awaiting-review</code> is a decision that the author has to make; just because something passes CI doesn't mean it's ready for someone to look at. We often use PRs to keep track of work in progress.)</p>",
        "id": 344967975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679951182
    },
    {
        "content": "<p>One thing I do a lot is find a broken PR, fix it, then it <code>awaiting-review</code>. Even though I'm not the author of the PR, this falls under \"PR coauthored\" since I've touched the PR (or made sure it didn't need touching).</p>",
        "id": 344968409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679951325
    },
    {
        "content": "<p>How can I be respectful to all of you?</p>",
        "id": 344968613,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679951404
    },
    {
        "content": "<p>I prefer to reach out to the original PR author if possible before touching it, since you never know if they have some work in progress they haven't pushed, or they might have just gotten temporarily caught up in something.</p>",
        "id": 344968623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679951406
    },
    {
        "content": "<p>I always feel like you're all so slow</p>",
        "id": 344968704,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679951445
    },
    {
        "content": "<p>Only <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has been able to tame me here</p>",
        "id": 344968744,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679951466
    },
    {
        "content": "<p>The mathlib port is important, but it's not the most important thing most of us who work on it are doing.</p>",
        "id": 344968784,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679951490
    },
    {
        "content": "<p>(I'm personally amazed we got to 50% already. I would have thought it would have been at least in another few months!)</p>",
        "id": 344968915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679951538
    },
    {
        "content": "<p>I do respect Eric, and I wait for Eric</p>",
        "id": 344968944,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679951552
    },
    {
        "content": "<p>Slow and steady will also prevent burnout. Breakneck pace is a recipe for miscommunication and disagreement</p>",
        "id": 344968997,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679951570
    },
    {
        "content": "<p>The port is not just an \"ends\". The \"means\" matter -- getting something right pays off in the end, instead of the instance gratification feeling of seeing some number go up quicker.</p>",
        "id": 344969137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679951642
    },
    {
        "content": "<p>You know, I am a final year undergraduate student. My end of year exams will significantly determine my future. I shouldn't be spending any time on any of this. I do it anyway (at the rate of 6 hours a day!) because I enjoy it.</p>",
        "id": 344969176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679951644
    },
    {
        "content": "<p>Regarding \"easy\", it turns out to be the case that LOC changed isn't always correlated with how difficult it is to review. I think recognizing that and learning to pay attention to community behaviors is a way to succeed. We haven't yet figured out all the tooling that can track and do everything for us. So instead, we rely on human language and community decisions on how to communicate. Ignoring those, for the sake of the \"tool\", is missing the point. It's what the community achieves in the tool that's important, not what the tool does to the community.</p>",
        "id": 344969510,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679951812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, my preference would be that you continue your great work making new PRs porting material from mathlib3 to mathlib4 --- this is very much appreciated! --- but that you simply stay away from others PRs for a while. It's obviously causing a lot of friction. I'm happy to try to promptly review and merge your porting PRs, as I appreciate that speedy turn arounds are helpful for the way you like to work.</p>",
        "id": 344969638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679951881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/How.20easy.20is.20an.20easy.20PR.3F/near/344969638\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span>, my preference would be that you continue your great work making new PRs porting material from mathlib3 to mathlib4 --- this is very much appreciated! --- but that you simply stay away from others PRs for a while. It's obviously causing a lot of friction. I'm happy to try to promptly review and merge your porting PRs, as I appreciate that speedy turn arounds are helpful for the way you like to work.</p>\n</blockquote>\n<p><span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> Admittedly I'm slowly learning how to slow down here. I didn't tag Joel's chain of PRs for example</p>",
        "id": 344969835,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679951955
    },
    {
        "content": "<p>Quite fittingly the character for \"fast\" appears in my Chinese name (the Jie in Jeremy Tan Jie Rui)</p>",
        "id": 344969995,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679952009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/How.20easy.20is.20an.20easy.20PR.3F/near/344964250\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3141\">!4#3141</a> is easy, since it only modifies four SHAs</p>\n</blockquote>\n<p>For reference, this took me 5-10 minutes to review, but I imagine it would take others longer, because:</p>\n<ul>\n<li>I was the one who reviewed the corresponding mathlib3 PR so know what to expect</li>\n<li>The port-status pages are likely slightly less frustrating for me since I already adjusted them to match my workflow</li>\n</ul>\n<p>So this certainly is not a 20 second PR. Pretty much the only plausibly \"easy\" sha update PRs are \"someone already approved this forward port but I was stupid and forgot to actually update the SHAs in it\" (I did this today...)</p>",
        "id": 344977796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679955839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/How.20easy.20is.20an.20easy.20PR.3F/near/344968704\">said</a>:</p>\n<blockquote>\n<p>I always feel like you're all so slow</p>\n</blockquote>\n<p>This is also the nature of large distributed projects, even if this one weren't staffed almost entirely by busy volunteers! See for example the fact that GitHub <a href=\"https://github.blog/2022-09-13-scaling-gits-garbage-collection/\">has their own internal fork</a> of Git, which they upstream from at leisure, because that's just faster than coordinating with the distributed maintainers of Git; or for examples of what can go wrong when interacting with systems where these processes are mismanaged, see e.g. <a href=\"https://social.treehouse.systems/@marcan\">Hector Martin's adventures</a> in upstreaming changes from Asahi to mainline Linux. Large entities are simply slower than small ones; the overhead of consensus is one of the prices you expect to pay in exchange for large parallelism and reduced <a href=\"https://en.wikipedia.org/wiki/Bus_factor\">bus-factors</a>. Personally (from the outside) I'm perpetually astonished at how smoothly-functioning the mathlib project appears to be!</p>\n<p>The desire for caution and consensus goes doubly when the project is intended to be a long-lasting foundation for other stuff, in which case it's relatively more important to get things right the first time up front: it'll be much more painful to fix later, when people are relying on it, than it is now when absolutely nobody is relying on it. You can't really blame anyone who would prefer to trade off towards \"taking great care not to bake mistakes into the heart of mathlib4\" rather than \"get the ported lines to 100% as fast as possible\" during the porting process; rejigging a million-line monolith because you made a mistake halfway up its dependency graph is <em>not</em> easy.</p>",
        "id": 344983442,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1679958237
    },
    {
        "content": "<p>(Although it is <em>easier</em> in Lean than many other programming langauges. :-)</p>",
        "id": 344983665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679958317
    }
]