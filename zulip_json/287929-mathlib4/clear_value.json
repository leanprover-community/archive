[
    {
        "content": "<p>It seems the <code>clear_value</code> tactic has not been ported. Are there any workarounds?</p>",
        "id": 342095096,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678894948
    },
    {
        "content": "<p>Here's a port: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2916\">mathlib4#2916</a></p>",
        "id": 342142623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678906627
    },
    {
        "content": "<p>Here's a workaround that does basically what <code>clear_value</code> is doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">let_of_forall</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span><span class=\"bp\">;</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"c1\">-- `clear_value x` workaround:</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">let_of_forall</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">y.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"c1\">-- `clear_value y x` workaround:</span>\n  <span class=\"n\">revert</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">let_of_forall</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">y</span>\n  <span class=\"n\">revert</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">let_of_forall</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When you do the <code>intro</code> on each line, you have to be sure to intro everything that was reverted.</p>",
        "id": 342146442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678907771
    },
    {
        "content": "<p>I couldn't immediately find <code>let_of_forall</code> in mathlib, but it seems like it's an important relationship between forall and let.</p>",
        "id": 342146670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678907851
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>!</p>",
        "id": 342324281,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678976097
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2916\">mathlib4#2916</a>, I'm finding that <code>clear_value</code> isn't interacting well with the unused variables linter.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">z.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"c1\">-- claims `z` is unused</span>\n  <span class=\"n\">clear_value</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">z.2</span>\n</code></pre></div>\n<p>The implementation of <code>clear_value</code> uses <code>Lean.MVarId.revert</code>, does some processing, then does <code>Lean.MVarId.introNP</code> to undo the revert.</p>\n<p>My best guess is that the unused variable linter doesn't notice <code>z</code> is being used because <code>introNP</code> creates fresh fvars, so the <code>z</code> in <code>exact z.2</code> is a new <code>z</code>.</p>",
        "id": 342362982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678983633
    },
    {
        "content": "<p>If that's the issue, then is this a problem with the unused variables linter? or should the tactic be careful to use the same <code>FVarId</code>s?</p>",
        "id": 342363213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678983689
    },
    {
        "content": "<p>If it's the latter, is there a version of <code>introNP</code> somewhere that takes a list of <code>FVarId</code>s to use, rather than calling <code>mkFreshFVarId</code>?</p>\n<p>Or is there a way to \"link\" two <code>FVarId</code>s together here for the purpose of helping the unused variable linter (and the IDE)? I do get two lists: one of the <code>FVarId</code>s that were reverted, and another of the <code>FVarId</code>s that are introduced.</p>",
        "id": 342363763,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678983805
    },
    {
        "content": "<p>(Note that this issue should affect <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.changeLocalDecl#doc\">docs4#Lean.MVarId.changeLocalDecl</a> as well since it also does <code>revert</code>/<code>introNP</code>.)</p>",
        "id": 342364040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678983864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/clear_value/near/342362982\">said</a>:</p>\n<blockquote>\n<p>My best guess is that the unused variable linter doesn't notice <code>z</code> is being used because <code>introNP</code> creates fresh fvars, so the <code>z</code> in <code>exact z.2</code> is a new <code>z</code>.</p>\n</blockquote>\n<p>This turns out to be the case. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2937\">mathlib4#2937</a> I have a fix for this, but it involves duplicating a good chunk of the implementation of <code>introNP</code>... Maybe there's another solution?</p>\n<p>With this version, neither <code>clear_value</code> nor <code>change ... at</code> cause any spurious unused variable warnings. They also properly handle that variable highlighting feature in VS Code.</p>",
        "id": 342392838,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678991236
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <code>clear_value</code> is merged. Let me know if you run into any unused variable linter errors due to it.)</p>",
        "id": 342426002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679002181
    },
    {
        "content": "<p>I'm very suprised that <code>changeLocalDecl</code> uses the revert-intro pattern. It requires a defeq type, so it should be safe (and faster) to just create a new mvar with a modified lctx. This would also preserve the <code>FVarId</code>.</p>\n<p>Wrt your original question, I'm not sure whether it's allowed to change the value of an fvar without generating a new <code>FVarId</code>.</p>",
        "id": 342428439,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679003243
    },
    {
        "content": "<p>I think the reason for revert-intro is so it can register a type hint, since Lean doesn't have transitive defeq.</p>",
        "id": 342428513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679003279
    },
    {
        "content": "<p>Will do, but it won't be until at least tomorrow until I can check.</p>",
        "id": 342433027,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679005287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/clear_value/near/342428513\">said</a>:</p>\n<blockquote>\n<p>I think the reason for revert-intro is so it can register a type hint, since Lean doesn't have transitive defeq.</p>\n</blockquote>\n<p>Possible, though the same file also contains <code>replaceLocalDeclDefEq</code> which implements the method I was alluding to (without a type hint). <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 342506280,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679044901
    },
    {
        "content": "<p>Hmm, I had decided not to use <code>replaceLocalDeclDefEq</code> because it didn't register a type hint, but it looks like it's used pervasively in Lean 4, so maybe in practice it's not a problem. I switched <code>change ... at</code> to use it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2937\">mathlib4#2937</a></p>",
        "id": 342990862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679261260
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, when you said \"I'm not sure whether it's allowed to change the value of an fvar without generating a new <code>FVarId</code>\" did you mean that as \"I'm not sure whether it's possible\" or \"I'm not sure whether you are meant to\"? It's definitely possible (that's what <a href=\"https://github.com/leanprover-community/mathlib4/pull/2937\">mathlib4#2937</a> was doing, at least before the commits I just pushed), but I wonder whether re-using <code>FVarId</code>s is breaking any contract.</p>",
        "id": 342991104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679261450
    },
    {
        "content": "<p>The latter. Like you, I'm not sure what the precise contract for changing <code>LocalDecl</code>s is. I know you're allowed to replace the type <code>T</code> of a <code>LocalDecl</code> with a defeq type <code>U</code>. I also know you're <em>not</em> allowed to replace <code>T</code> with a non-defeq type <code>V</code>. (Nothing stops you from doing this, but all kinds of things would probably get messed up.) But I've never seen any documentation on whether changing/removing a value is allowed.</p>",
        "id": 343071317,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679306615
    }
]