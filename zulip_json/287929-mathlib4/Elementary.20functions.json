[
    {
        "content": "<p>I don't think there are elementary functions in mathlib (as a class of functions) yet? Since every individual type (sin, exp etc.) of functions is already in mathlib,  I'd like to define the set of elementary functions and prove some elementary (no pun intended) properties. What is the best way to do this? One problem I can think of is that we also need to formalize the notion of \"natural domain\" of a function, which excludes zero for reciprocals, negative numbers for square roots, etc.</p>",
        "id": 396924725,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697469036
    },
    {
        "content": "<p>Generally we would define a class of functions like this using an inductive predicate, to express some fixed type of combinations of some fixed base functions. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsPoly#doc\">docs#IsPoly</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSolvableByRad#doc\">docs#IsSolvableByRad</a> for some examples</p>",
        "id": 396926425,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697469588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Elementary.20functions/near/396926425\">said</a>:</p>\n<blockquote>\n<p>Generally we would define a class of functions like this using an inductive predicate, to express some fixed type of combinations of some fixed base functions. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsPoly#doc\">docs#IsPoly</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSolvableByRad#doc\">docs#IsSolvableByRad</a> for some examples</p>\n</blockquote>\n<p>I'm thinking about either this or defining an inductive syntax (i.e. no indices, just an inductive type <code>Elementary : Type</code>), and a function <code>Elementary -&gt; Real -&gt; Real</code> that is zero outside of the natural domain.</p>",
        "id": 396928761,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697470216
    },
    {
        "content": "<p>I'm still worried about this domain thing. What should the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{x} + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> be at zero?</p>",
        "id": 396928925,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697470268
    },
    {
        "content": "<p>Also, we should have a theorem like \"the floor function isn't elementary because it is not continuous on its domain\". But if we use junk values I think this is false..</p>",
        "id": 396929598,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697470495
    },
    {
        "content": "<p>Are you saying the floor function would be elementary, that it would be continuous, or that the implication \"not continuous -&gt; not elementary\" would be false?</p>",
        "id": 396930602,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697470838
    },
    {
        "content": "<p>Could you define it as an inductive predicate on partial functions? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Partrec#doc\">docs#Nat.Partrec</a> for an example</p>",
        "id": 396930820,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697470909
    },
    {
        "content": "<p>A quick sketch of my proposal before I go to bed:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full Code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Syntax</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">sin</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">arcsin</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Syntax</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">add</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mul</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">Syntax</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">root</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">g</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">g</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arcsin</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.arcsin</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.exp</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.log</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">f</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">InDomain</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">→</span> <span class=\"n\">f.eval</span> <span class=\"n\">xs</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">root</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"n\">g</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"n\">g</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">sin</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sin</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">arcsin</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">→</span> <span class=\"n\">f.eval</span> <span class=\"n\">xs</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">arcsin</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">log</span> <span class=\"o\">:</span> <span class=\"n\">InDomain</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">→</span> <span class=\"n\">f.eval</span> <span class=\"n\">xs</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">→</span> <span class=\"n\">InDomain</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</code></pre></div>\n</div></div>",
        "id": 396935873,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697472557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Elementary.20functions/near/396930602\">said</a>:</p>\n<blockquote>\n<p>Are you saying the floor function would be elementary, that it would be continuous, or that the implication \"not continuous -&gt; not elementary\" would be false?</p>\n</blockquote>\n<p>The last. I think this is one of the \"headline properties\" of elementary functions, so we need to deal with it.</p>",
        "id": 396936047,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697472623
    },
    {
        "content": "<p>The rational roots look like a mess.. Let me see if there's some slick mathematical definition that avoids discussing the domain of ration powers</p>",
        "id": 397029495,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1697519802
    }
]