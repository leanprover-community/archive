[
    {
        "content": "<p>I hope mathlib4 is the right place to post this. I needed this auxiliary theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mod_one_gt_zero</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>There's probably a neater way to write it. I couldn't find something in the standard library that did this job. Is it actually missing, or did I miss it? I needed it for mod 2, but I guess it generalises to any base, and could be a simplification rule. In general, I guess it is something like <code>n%a \\ne 0 -&gt; 0 &lt; n</code> or perhaps <code>n%a \\ne 0 -&gt; n \\ne 0</code> maybe, but I specifically needed it to prove a <code>0&lt;n</code> bound.</p>",
        "id": 389649822,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694090681
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Odd.pos#doc\">docs#Odd.pos</a></p>",
        "id": 389650352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694090848
    },
    {
        "content": "<p>You could also do <code>λ h ↦ pos_iff_ne_zero.2 $ by rintro rfl; simpa using h</code>. This generalizes to any base.</p>",
        "id": 389650600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694090917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mod.20lt.20possibly.20missing/near/389650352\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Odd.pos#doc\">docs#Odd.pos</a></p>\n</blockquote>\n<p>Thanks. To get that to behave I needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.odd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">nh</span> <span class=\"c1\">-- rewrite the assumption `n%2=1` to `Odd n`</span>\n        <span class=\"n\">use</span> <span class=\"n\">Odd.pos</span> <span class=\"n\">nh</span>                                <span class=\"c1\">-- use `Odd n -&gt; 0 &lt; n`to close the case</span>\n</code></pre></div>\n<p>The <code>only</code> was required - it was simplifying to <code>¬Even n</code> very eagerly.</p>\n<p>I guess I've learned a whole new chunk of mathlib exists today :D</p>",
        "id": 389659124,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694093261
    }
]