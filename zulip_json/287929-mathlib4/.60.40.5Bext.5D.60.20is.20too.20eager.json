[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4312\">!4#4312</a> I had to write my <code>ext</code> lemma manually because <code>@[ext]</code> generated an extensionality lemma which was \"too eager\". The issue was essentially this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MyProd</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">Ã—</span> <span class=\"n\">B</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">MyProd.ext</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">MyProd.ext.{u_1, u_2} {A : Type u_1} {B : Type u_2} (x y : MyProd A B)</span>\n<span class=\"cm\">  (fst : x.fst = y.fst) (snd : x.snd = y.snd) : x = y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>whereas I would have expected (and Lean 3 <code>ext</code> did this) it to generate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MyProd.ext'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyProd</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.toProd</span> <span class=\"bp\">=</span> <span class=\"n\">y.toProd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 360910932,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684969013
    },
    {
        "content": "<p>That's the wrong behavior for new-style structures that were old-style in mathlib3</p>",
        "id": 360911871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684969644
    },
    {
        "content": "<p>There is a flag for this in the ext tactic but it's not exposed IIRC</p>",
        "id": 360911886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684969660
    },
    {
        "content": "<p>fixed in std</p>",
        "id": 360917202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684973610
    }
]