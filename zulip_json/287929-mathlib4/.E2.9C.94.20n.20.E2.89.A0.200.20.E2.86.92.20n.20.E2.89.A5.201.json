[
    {
        "content": "<p>Does Mathlib4 have something for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 339617813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677968758
    },
    {
        "content": "<p>Oic now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 339617922,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677968842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 339617937,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677968865
    },
    {
        "content": "<p>We should probably add <code>n ≠ 0 → 1 ≤ n</code> as a lemma because <code>library_search</code> does not see it.</p>",
        "id": 339618137,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677969000
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.one_le_iff_ne_zero#doc\">docs4#Nat.one_le_iff_ne_zero</a>, doesn't Lean 3 library search have some power to find these?</p>",
        "id": 339619240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677969816
    },
    {
        "content": "<p>Lean 3 does, Lean 4 doesn't.</p>",
        "id": 339619695,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677970181
    },
    {
        "content": "<p>While I agree this particular fact is probably basic enough to include as a lemma, the more general solution to \"library search doesn't find it\" would be to expand the power of library search.</p>",
        "id": 339619829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677970289
    },
    {
        "content": "<p>Better <code>library_search</code> in Mathlib4 will be needed. I definitely cannot teach my students that, as a part of their workflow in Lean 4, they should translate the statement to Lean 3 and use <code>library_search</code> there.</p>",
        "id": 339619970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677970419
    },
    {
        "content": "<p>Unfortunately, I am not able to work on tactics. The only thing I can do is to provide a lemma that will compensate for <code>library_search</code> insufficiencies.</p>",
        "id": 339620117,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677970527
    },
    {
        "content": "<p>but how will people find your lemma? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 339621055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677971296
    },
    {
        "content": "<p>I think <code>library_search</code> will find it if I provide it in the precise <code>1 ≤ n</code> form.</p>",
        "id": 339659227,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678005068
    },
    {
        "content": "<p>Nevertheless, I agree that we have enough lemmata for this thing and <code>library_search</code> needs improvements.</p>",
        "id": 339659361,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678005148
    },
    {
        "content": "<p><code>library_search</code> gains some power (or rather, regains it from mathlib3) in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2768\">mathlib4#2768</a>.</p>",
        "id": 340761253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678421904
    }
]