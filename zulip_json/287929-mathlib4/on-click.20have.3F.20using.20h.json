[
    {
        "content": "<p>When clicking on a suggestion produced by <code>have? using h</code>, the word <code>have?</code> is replaced by the suggestion, but the <code>using h</code> remains at the end of the line.</p>",
        "id": 367991606,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687279274
    },
    {
        "content": "<p>I think I can fix this myself. One question:<br>\nIf I have a snippet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span><span class=\"bp\">?%$</span><span class=\"n\">tk</span> <span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>In the <code>do</code> I want to refer to the whole syntax object <code>have? using ..</code>. How do I do this? Is <code>‚Üê getRef</code> the usual way to do this? Is there also a way to give that syntax a name in the pattern match?</p>",
        "id": 367995122,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687280028
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5305\">!4#5305</a></p>",
        "id": 367997901,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687280634
    },
    {
        "content": "<p>I don't know if you can give a name to the whole syntax object from within the pattern, but my understanding is that <code>getRef</code> will give you the Syntax (at least both <code>evalTactic</code> and <code>elabCommand</code> have a <code>withRef</code> to set it to the right thing).</p>",
        "id": 367998710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687280795
    },
    {
        "content": "<p>You should be able to get a reference to the syntax via <code>| stx@`(tactic| have? ...) =&gt; ...</code></p>",
        "id": 368061646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687298141
    },
    {
        "content": "<p>I agree you should be able to, but you get an \"unexpected syntax\" error</p>",
        "id": 368061810,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687298230
    },
    {
        "content": "<p>I'm not remembering where in the source code it is, but <code>match</code> expressions with quotations for cases is its own whole elaborator, and it appears not to support <code>@</code> based on this</p>",
        "id": 368062274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687298418
    },
    {
        "content": "<p>you can also break open <code>elab_rules</code> a bit and write a <code>@[tactic] def</code> directly</p>",
        "id": 368062583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687298539
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Lean/Elab/Quotation.lean\">here's the <code>match</code> elaborator for quotations</a>)</p>",
        "id": 368062742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687298638
    },
    {
        "content": "<p>Hmm, <code>match</code> accepts it but <code>elab_rules</code> doesn't. I guess this means it's actually the part of <code>elab_rules</code> that tries to figure out which attributes to set that's failing when there's an <code>@</code>?</p>",
        "id": 368063072,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687298778
    },
    {
        "content": "<p>The exception seems to be this line, were it gives up if the match pattern isn't immediately syntax quotation: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/ElabRules.lean#LL28C9-L28C31\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/ElabRules.lean#LL28C9-L28C31</a></p>",
        "id": 368063233,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687298868
    }
]