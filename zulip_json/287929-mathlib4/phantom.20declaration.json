[
    {
        "content": "<p>The following code contains a phantom theorem. It looks declared (and sorried) but then the <code>#check</code> commands doesn't know about it. Replacing the sorry by the commented \"proof\" results in <code>this tactic is never executed [linter.unreachableTactic]</code> over the whole proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Equiv</span> <span class=\"n\">Bundle</span> <span class=\"n\">ContinuousLinearMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span> <span class=\"n\">Bundle</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"FJ¹MV\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Bundle.ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.Trivial</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"J¹MV\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">FJ</span><span class=\"bp\">¹</span><span class=\"n\">MV</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Smoothness</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"bp\">¹</span><span class=\"n\">MV</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smoothAt_one_jet_eucl_bundle'</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">↔</span> <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∘</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">trivializationAt</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symmL</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">  simp_rw [smoothAt_hom_bundle, in_coordinates, trivial.trivialization_at,</span>\n<span class=\"cm\">    trivial.trivialization_continuous_linear_map_at]</span>\n<span class=\"cm\">  dsimp only [Bundle.Trivial]</span>\n<span class=\"cm\">  simp_rw [ContinuousLinearMap.id_comp] -/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">smoothAt_one_jet_eucl_bundle'</span>\n</code></pre></div>\n<p>Any idea?</p>",
        "id": 398390011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698198854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, this is mathported from code you wrote.</p>",
        "id": 398390046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698198879
    },
    {
        "content": "<p>Just for the sake of minimization, the first prop in the conjunction can be removed while preserving the issue (with the sorry):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∘</span><span class=\"n\">L</span>\n        <span class=\"o\">(</span><span class=\"n\">trivializationAt</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symmL</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 398391460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698199593
    },
    {
        "content": "<p>This sounds related to an old lean4 issue of mine (<a href=\"https://github.com/leanprover/lean4/pull/2226\">lean4#2226</a>), where an error would occur during elaboration without reporting any actual info diagnostics</p>",
        "id": 398396053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698201615
    },
    {
        "content": "<p>Yes, it's an instance of the same issue. There is an issue elaborating the variables line and it produces a synthetic sorry without reporting an error about it, which breaks an invariant of the system (synthetic sorries should only appear if errors have been reported), and if you do it right you can get no further error to be reported (because things see the synthetic sorry and think \"I guess I don't need to add insult to injury here, we are already in an error state so no need to report more\"</p>",
        "id": 398397102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202134
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover/lean4/pull/2226\">lean4#2226</a> refers to <a href=\"https://github.com/leanprover/lean4/pull/2257\">lean4#2257</a> which seems very relevant here.</p>",
        "id": 398397106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202136
    },
    {
        "content": "<p>Getting rid of the local notation by copy-paste reveals an error.</p>",
        "id": 398397201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202177
    },
    {
        "content": "<p><code>def foo := f</code> will produce a definition, but notice that it has <code>sorry</code> in it caused by typechecking failures and there are no app mismatch errors or the like</p>",
        "id": 398397215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202187
    },
    {
        "content": "<p>New mystery is then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Equiv</span> <span class=\"n\">Bundle</span> <span class=\"n\">ContinuousLinearMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span> <span class=\"n\">Bundle</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.Trivial</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">))}</span>\n</code></pre></div>",
        "id": 398397416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202275
    },
    {
        "content": "<p>which does features an error message, so this is a great progress.</p>",
        "id": 398397433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202287
    },
    {
        "content": "<p>you have to separate the two binder groups there or else <code>{I M V}</code> won't be interpreted as a binder update</p>",
        "id": 398397480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202310
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.Trivial</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">))}</span>\n</code></pre></div>\n<p>has yet another error message</p>",
        "id": 398397588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202349
    },
    {
        "content": "<p>I know how to fix that one.</p>",
        "id": 398397701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202425
    },
    {
        "content": "<p>The following works now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Equiv</span> <span class=\"n\">Bundle</span> <span class=\"n\">ContinuousLinearMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span> <span class=\"n\">Bundle</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.Trivial</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">))}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">smoothAt_one_jet_eucl_bundle'</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"bp\">↔</span> <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">SmoothAt</span> <span class=\"n\">J</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">∘</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">trivializationAt</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symmL</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> by</span>\n<span class=\"cm\">  simp_rw [smoothAt_hom_bundle, in_coordinates, trivial.trivialization_at,</span>\n<span class=\"cm\">    trivial.trivialization_continuous_linear_map_at]</span>\n<span class=\"cm\">  dsimp only [Bundle.Trivial]</span>\n<span class=\"cm\">  simp_rw [ContinuousLinearMap.id_comp] -/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">smoothAt_one_jet_eucl_bundle'</span>\n</code></pre></div>",
        "id": 398397767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202444
    },
    {
        "content": "<p>So I'm unstuck now.</p>",
        "id": 398397791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202454
    },
    {
        "content": "<p>Thanks a lot Mario! You can continue that impressive series by solving the minimization quest at <a href=\"#narrow/stream/270676-lean4/topic/Another.20simp.20mystery/near/398356577\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Another.20simp.20mystery/near/398356577</a></p>",
        "id": 398397863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698202502
    },
    {
        "content": "<p>what did you even change? I'm eyeball diffing and I don't see anything</p>",
        "id": 398397913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202530
    },
    {
        "content": "<p>oh, <code>Type*</code> -&gt; <code>Type u</code></p>",
        "id": 398397965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202558
    },
    {
        "content": "<p>what a terrible error message</p>",
        "id": 398398053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698202586
    },
    {
        "content": "<p>Do you think there is anyway I could use a notation here? Or should I write <code>TotalSpace (E →L[𝕜] V) (Bundle.ContinuousLinearMap (RingHom.id 𝕜) (TangentSpace I : M → Type u) (Bundle.Trivial M V))</code> everywhere in this file?</p>",
        "id": 398399031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698203053
    },
    {
        "content": "<p>there's nothing wrong with using a notation, it was just hiding an error</p>",
        "id": 398399119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698203105
    },
    {
        "content": "<p>Can you fix the above snippet while keeping a notation?</p>",
        "id": 398399363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698203238
    },
    {
        "content": "<p>I think I already met that issue that local notations are no longer really allowed in Lean 4.</p>",
        "id": 398399407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698203264
    },
    {
        "content": "<p>I found it <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20introduces.20sorry/near/390552023\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Notation.20introduces.20sorry/near/390552023</a></p>",
        "id": 398399523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698203306
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"FJ¹MV\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Bundle.ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundle.Trivial</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"J¹MV\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">FJ</span><span class=\"bp\">¹</span><span class=\"n\">MV</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Smoothness</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"bp\">¹</span><span class=\"n\">MV</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 398400073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698203594
    },
    {
        "content": "<p>Thanks, but this introduces a sorry in the statement.</p>",
        "id": 398400393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698203741
    }
]