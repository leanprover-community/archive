[
    {
        "content": "<p>I ran into the following while porting <code>Geometry.Manifold.Instances.Sphere</code>. What should I expect <code>cancel_denoms</code> to do here: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cancel_denoms</span> <span class=\"c1\">-- unchanged</span>\n</code></pre></div>",
        "id": 376399899,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689695842
    },
    {
        "content": "<p>I thought that if the system can't find proofs that denominators are non-zero then it clears them anyway and asks the user to supply proofs that they're nonzero? Oh but maybe the division in the denominator is screwing things up?</p>",
        "id": 376400540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689695966
    },
    {
        "content": "<p>I haven't had time to poke at and shrink further but wanted to record it before I forgot</p>",
        "id": 376400909,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689696030
    },
    {
        "content": "<p><code>cancel_denoms</code> doesn't do anything in lean 3 either. I can believe that the situation would have been different if that <code>+ 4</code> had somehow made it into the numerator of the previous thing.</p>",
        "id": 376401179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689696086
    },
    {
        "content": "<p><code>cancel_denoms</code> only knows about numerals and canceling those</p>",
        "id": 376401279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689696107
    },
    {
        "content": "<p>Oh, sorry, I see, you have a factor of <code>4</code> in there that could theoretically be removed. That's not something that <code>cancel_denoms</code> can do yet, but it seems like it could plausibly be able to.</p>",
        "id": 376402945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689696393
    },
    {
        "content": "<p>Oh I'm confusing <code>cancel_denoms</code> with <code>field_simp</code> which would happily deal with more complex denominators. Sorry for the noise!</p>",
        "id": 376404605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689696731
    },
    {
        "content": "<p>So perhaps I should <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this. The above is the output of <code>field_simp</code> in Lean 4 for the step here<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/bf2428c9486c407ca38b5b3fb10b87dad0bc99fa/src/geometry/manifold/instances/sphere.lean#L239\">https://github.com/leanprover-community/mathlib/blob/bf2428c9486c407ca38b5b3fb10b87dad0bc99fa/src/geometry/manifold/instances/sphere.lean#L239</a><br>\nMy memory is that this cleared denominators allowing <code>ring</code> (essentially) to finish it. (My memory might be incorrect but I no longer have working Lean 3 on my machine)</p>",
        "id": 376406820,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689697206
    },
    {
        "content": "<p>I'll return to this in a little bit to clarify. Apologies</p>",
        "id": 376407848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689697435
    },
    {
        "content": "<p>A better question is: at the line referenced above, <code>field_simp</code> clears denominators. However in a bare bones example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- n / d = 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it reduces to a single ratio equalling 1. (I had assumed it called <code>cancel_denoms</code> which generated the original question.) Why is it cancelling denominators in the file above?</p>",
        "id": 376425485,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689701279
    },
    {
        "content": "<p><code>field_simp</code> will only cancel denominators if it can find a proof in the context that the denominator is different from zero. (Because, otherwise, it's just not true!)</p>",
        "id": 376426583,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689701523
    },
    {
        "content": "<p>Does it make any attempt to synthesize a proof?</p>",
        "id": 376431960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689702773
    },
    {
        "content": "<p>Answering my own question: yes. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- 1 = a *b</span>\n</code></pre></div>",
        "id": 376435446,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689703568
    },
    {
        "content": "<p>This works (clears denominators) in Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"c1\">-- 4 * 2 = (2 ^ 2 * b ^ 2 / (1 - a) ^ 2 + 4) * (1 - a)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and this works in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- 8 = (2 ^ 2 * b ^ 2 / (1 - a) ^ 2 + 4) * (1 - a)</span>\n</code></pre></div>\n<p>but this fails </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- no change</span>\n</code></pre></div>",
        "id": 376457646,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689709495
    },
    {
        "content": "<p>And this fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Calculus</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">8</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- no change</span>\n</code></pre></div>",
        "id": 376459229,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689709866
    },
    {
        "content": "<p>Is there a more verbose version of <code>trace.Tactic.field_simp</code>?</p>",
        "id": 376459704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689709989
    },
    {
        "content": "<p>More minimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Calculus</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- 1 / (c * d ^ 2 ) = 1</span>\n</code></pre></div>",
        "id": 376462513,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689710674
    },
    {
        "content": "<p>Just to remark that you still have some denominators in your \"cleared denominator\" term</p>",
        "id": 376462535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689710678
    },
    {
        "content": "<p>Fair. I am comparing to the behavior in Lean 3 which at least moved the big denominator to the RHS</p>",
        "id": 376462745,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689710736
    },
    {
        "content": "<p>It appears the only exponents that are troublesome are <code>c * d ^ 1</code> and <code>c * d ^ 2</code>.</p>",
        "id": 376464949,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689711414
    },
    {
        "content": "<p>I tried <code>trace.Meta.Tactic.simp</code>but I can't find where it is failing to discharge the hypothesis for <code>div_eq_iff</code></p>",
        "id": 376465224,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689711503
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rpow_two</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.rpow_two#doc\">docs#Real.rpow_two</a> is the offender</p>",
        "id": 376470670,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689713259
    },
    {
        "content": "<p>Remove that from the simp set and <code>field_simp</code> clears the denominators in the simplified example above. Keep it in and it does not</p>",
        "id": 376471342,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689713503
    },
    {
        "content": "<p>This remains true even with <code>import Mathlib</code></p>",
        "id": 376473926,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689714432
    },
    {
        "content": "<p>Also like to point out that it works to use the macro-trick in order to have <code>x ^ 2</code> interpreted as a <code>hPow ℝ ℕ ℝ</code> (like in mathlib3) and not a <code>hPow ℝ ℝ ℝ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">done</span> <span class=\"c1\">-- unsolved goal: 1 = c * d ^ 2</span>\n</code></pre></div>",
        "id": 376475639,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689715037
    },
    {
        "content": "<p>Yes. It is odd that is getting priority. I couldn't seem to lower it. It looks like <code>Real.rpow_two</code> simplifies <code>d ^ 2</code> to <code>@HPow.hPow ℝ ℕ ℝ _ d 2</code> while the hypothesis remains <code>@HPow.hPow ℝ ℝ ℝ _ d 2</code> and then these two cannot be unified. (The denominators are cleared if we manually simplify <code>h</code>.)</p>",
        "id": 376493918,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689723026
    },
    {
        "content": "<p>Should I expect <code>field_simp</code> to operate on the hypotheses using the same simp set?</p>",
        "id": 376494008,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689723089
    },
    {
        "content": "<p>There is also <code>Real.rpow_one</code> and <code>Real.rpow_zero</code> so I would bet <code>0</code> exponent also causes problems.</p>",
        "id": 376494310,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689723261
    },
    {
        "content": "<p>This is a known \"bug\" in current mathlib, where Lean tries to put the same type in the exponent as in the base. That's why in a lot of files we have the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue #2220</span>\n</code></pre></div>\n<p>If you add it at the beginning of your file, it should probably fix everything: the exponents will then be natural numbers.</p>",
        "id": 376548714,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689748583
    },
    {
        "content": "<p>Thanks. I need pay better attention <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span>. Unfortunately, what I am trying to clean-up already had  <a href=\"https://github.com/leanprover-community/mathlib4/blob/91db558a26be57eb3c0e40f799ffd4fedb15880b/Mathlib/Geometry/Manifold/Instances/Sphere.lean#L75\">that</a></p>\n<p>But it looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.cast_pow#doc\">docs#Nat.cast_pow</a> fires and turns <code>2 ^ 2</code> into <code>(↑2) ^ 2</code> which causes it not to use <code>this</code> when discharging here <a href=\"https://github.com/leanprover-community/mathlib4/blob/91db558a26be57eb3c0e40f799ffd4fedb15880b/Mathlib/Geometry/Manifold/Instances/Sphere.lean#L261\">https://github.com/leanprover-community/mathlib4/blob/91db558a26be57eb3c0e40f799ffd4fedb15880b/Mathlib/Geometry/Manifold/Instances/Sphere.lean#L261</a></p>",
        "id": 376686303,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689776733
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6034\">#6034</a> uses <code>normCast</code> in the discharger for <code>field_simp</code> and allows it to handle this example (and others where casts used to interfere)</p>",
        "id": 377084811,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689879784
    }
]