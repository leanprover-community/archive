[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> what are you waiting on me for? No question is asked there and no changes have been requested</p>",
        "id": 341457900,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678713373
    },
    {
        "content": "<p>You have a red x, not a green tick, so the PR can't be merged.</p>",
        "id": 341459383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678713729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> It's still failing for the same reason as <a href=\"https://github.com/leanprover-community/mathlib4/pull/2769\">!4#2769</a></p>",
        "id": 341464763,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678714962
    },
    {
        "content": "<p>And nobody knows why simpNF is being overly aggressive here</p>",
        "id": 341464862,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678714989
    },
    {
        "content": "<p>Rather than simpNF being overly aggressive, probably the search was just below the timeout and newly added instances broke the camel's back. Profiling would be required to see what's causing the <code>HasZeroObject</code> failures.</p>",
        "id": 341466044,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1678715253
    },
    {
        "content": "<p>how does profiling work?</p>",
        "id": 341467398,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678715566
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> adds no new instances.</p>",
        "id": 341469035,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678715978
    },
    {
        "content": "<p>What’s the error the linter gives for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> ?</p>",
        "id": 341469618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678716105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797/near/341469618\">said</a>:</p>\n<blockquote>\n<p>What’s the error the linter gives for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> ?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.CategoryTheory.Linear.LinearFunctor</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_smul.</span><span class=\"o\">{</span><span class=\"n\">u_5</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.mapLinearMap_apply.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n\n<span class=\"c1\">-- Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_add.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.mapAddHom_apply.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_neg.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_sub.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map_sum.</span><span class=\"o\">{</span><span class=\"n\">u_5</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject D</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.forget_map.</span><span class=\"o\">{</span><span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofLeftExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofRightExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.AdditiveFunctor.ofExact_map.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  CategoryTheory.Limits.HasZeroObject (C ⥤+ D)</span>\n<span class=\"cm\">(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">GNUmakefile</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">lint</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">2</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 341470101,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678716206
    },
    {
        "content": "<p>They are all searching for <code>HasZeroObject</code> instances. Originally it was in <code>Preadditive.AdditiveFunctor</code> but <a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a> add <code>Linear.LinearFunctor</code> Load up <code>master</code> and see if you can find a <code>HasZeroObject D</code> instance <a href=\"https://github.com/leanprover-community/mathlib4/blob/baf8d765412d7f8ad43200bc7ca83edacdf14da0/Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.lean#L56\">here</a></p>",
        "id": 341470407,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716271
    },
    {
        "content": "<p>Is the issue that it’s looking for an additive instance via preadditive plus zero objects plus binary biproducts?</p>",
        "id": 341472113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678716609
    },
    {
        "content": "<p>My guess. But it knows not to do this when building</p>",
        "id": 341472279,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716650
    },
    {
        "content": "<p>And last I checked, Lean cannot synthesize an instance of <code>HasZeroObject</code> in that file at the appropriate locations</p>",
        "id": 341472599,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716711
    },
    {
        "content": "<p>Which file?</p>",
        "id": 341472831,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678716748
    },
    {
        "content": "<p>It seems the search done when building the file is a different from the <code>simpNF</code> search</p>",
        "id": 341472906,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/baf8d765412d7f8ad43200bc7ca83edacdf14da0/Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.lean#L56\">https://github.com/leanprover-community/mathlib4/blob/baf8d765412d7f8ad43200bc7ca83edacdf14da0/Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.lean#L56</a></p>",
        "id": 341472926,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716767
    },
    {
        "content": "<p>I think the difference is that the linter works globally somehow, not locally in an individual file</p>",
        "id": 341473120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678716810
    },
    {
        "content": "<p>I confess to never having looked at the linter files</p>",
        "id": 341473273,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678716843
    },
    {
        "content": "<p>Rebuilt <code>master</code> from scratch with no problem and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Limits.HasZeroObject</span> <span class=\"n\">D</span>  <span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>For reference one of the <code>simpNF</code> errors is for timing out in a search for <code>HasZeroObject D</code> in the next declaration.</p>",
        "id": 341478370,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678717905
    },
    {
        "content": "<p>And does etaExperiment help?</p>",
        "id": 341479539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678718130
    },
    {
        "content": "<p>Can you remind of the syntax to turn it on?</p>",
        "id": 341479835,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678718190
    },
    {
        "content": "<p>Has zero object is a prop right? It probably won’t make a difference</p>",
        "id": 341480256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678718278
    },
    {
        "content": "<p>The linter is a black box to me. Just curious to poke it with this stick</p>",
        "id": 341480455,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678718318
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 341480947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678718422
    },
    {
        "content": "<p>I set it true globally. Lean is not finding a <code>HasZeroObject D</code> instance because there is none</p>",
        "id": 341481202,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678718485
    },
    {
        "content": "<p>Running the linter with it in there for fun</p>",
        "id": 341481704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678718600
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Linting passed.</span>\n</code></pre></div>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 341483743,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678719033
    },
    {
        "content": "<p>Let me check if other changes to master didn't induce this</p>",
        "id": 341483924,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678719070
    },
    {
        "content": "<p>Failed!!</p>",
        "id": 341485181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678719325
    },
    {
        "content": "<p>Solution </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">simpNF</span>\n</code></pre></div>\n<p>is clearly the fix <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 341485655,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678719423
    },
    {
        "content": "<p>Well, now it fails again even with EE turned on</p>",
        "id": 341492815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678720738
    },
    {
        "content": "<p>A MWE to help debugging (using the branch from <a href=\"https://github.com/leanprover-community/mathlib4/pull/2797\">!4#2797</a>): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341494526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678721045
    },
    {
        "content": "<p>New theory: the fresh build of master on my machine did it</p>",
        "id": 341495173,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678721173
    },
    {
        "content": "<p>My <em>guess</em> is that lean is trying to use a lemma which requires <code>Additive D</code>, and it looks for an additive instance from preadditive+zeroobj+binarybiprods which it can deduce from preadditive+finitebiprods which it can deduce from preadditive+zeroobj+binarybiprods, etc.</p>",
        "id": 341501902,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722564
    },
    {
        "content": "<p>But the trace itself is crashing my vscode, so it's hard to tell what's actually going on</p>",
        "id": 341502022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722597
    },
    {
        "content": "<p>The oddness for me is the divergence between Lean and simpNF</p>",
        "id": 341502170,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678722623
    },
    {
        "content": "<p>Is there a way to emit the synthInstance trace in the command line instead of vscode?</p>",
        "id": 341502225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722635
    },
    {
        "content": "<p>If you call lean from the command-line, yes.</p>",
        "id": 341502412,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678722687
    },
    {
        "content": "<p>bah of course :)</p>",
        "id": 341502490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722707
    },
    {
        "content": "<p>What I often do is add <code>set_option synthInstance.maxHeartbeats N</code> with <code>N</code> ranging from 0 to 20000 (the default) to reduce the output.</p>",
        "id": 341502669,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678722737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341502412\">said</a>:</p>\n<blockquote>\n<p>If you call lean from the command-line, yes.</p>\n</blockquote>\n<p>okay, lean4 doesn't let me do <code>lean --make foobar.lean</code>. What's the right flag?</p>",
        "id": 341502981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341502669\">said</a>:</p>\n<blockquote>\n<p>What I often do is add <code>set_option synthInstance.maxHeartbeats N</code> with <code>N</code> ranging from 0 to 20000 (the default) to reduce the output.</p>\n</blockquote>\n<p>I'll try this as well.</p>",
        "id": 341503057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722814
    },
    {
        "content": "<p><code>lake env lean</code></p>",
        "id": 341503383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678722867
    },
    {
        "content": "<p>?</p>",
        "id": 341503873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678722977
    },
    {
        "content": "<p>anyway, lean is indeed stuck trying to find an additive instance.</p>",
        "id": 341503993,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723002
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">CategoryTheory.Limits.HasZeroObject</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CategoryTheory.Limits.HasZeroObject</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.NonPreadditiveAbelian.has_zero_object</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Limits.HasZeroObject</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">CategoryTheory.Limits.hasZeroObject_of_hasFiniteBiproducts</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Limits.HasZeroObject</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.NonPreadditiveAbelian.toHasZeroMorphisms</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Limits.HasZeroMorphisms</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Preadditive.preadditiveHasZeroMorphisms</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Limits.HasZeroMorphisms</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">CategoryTheory.Preadditive</span>\n        <span class=\"n\">D</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">D</span> <span class=\"n\">of</span> <span class=\"n\">CategoryTheory.Limits.HasZeroMorphisms</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">CategoryTheory.Limits.HasZeroMorphisms</span>\n        <span class=\"n\">D</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">CategoryTheory.Limits.HasZeroMorphisms</span> <span class=\"n\">D</span> <span class=\"n\">of</span> <span class=\"n\">CategoryTheory.Limits.HasZeroObject</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.AdditiveCategory.toHasFiniteBiproducts</span> <span class=\"n\">to</span> <span class=\"n\">CategoryTheory.Limits.HasFiniteBiproducts</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">CategoryTheory.Limits.HasFiniteBiproducts</span> <span class=\"n\">D</span> <span class=\"bp\">≟</span> <span class=\"n\">CategoryTheory.Limits.HasFiniteBiproducts</span> <span class=\"bp\">?</span><span class=\"n\">m.2287</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">CategoryTheory.AdditiveCategory</span> <span class=\"n\">D</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>output truncated by many more of the same line</p>\n</div></div>",
        "id": 341504266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723078
    },
    {
        "content": "<p>Are you trying to synthesize a <code>HasZeroObject D</code> instance in the original file?</p>",
        "id": 341504910,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723219
    },
    {
        "content": "<p>no I'm just using the following to investigate precisely the failure of <code>map_add</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341505053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723258
    },
    {
        "content": "<p>Wait. That fails to build?</p>",
        "id": 341505180,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723284
    },
    {
        "content": "<p>yup</p>",
        "id": 341505218,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723294
    },
    {
        "content": "<p>error @ simp</p>",
        "id": 341505251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723301
    },
    {
        "content": "<p>Huh. I didn't check that branch. On <code>port/CategoryTheory.Abelian.Basic</code> everything always built</p>",
        "id": 341505541,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723366
    },
    {
        "content": "<p>Does it fail on <code>master</code>?</p>",
        "id": 341506147,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723495
    },
    {
        "content": "<p>It doesn't crash <code>nvim</code> :)</p>",
        "id": 341506316,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723536
    },
    {
        "content": "<p>I haven't checked but my guess is that it would. The issue is in Additive.Basic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Additive.Basic</span> <span class=\"c1\">-- uncomment this line to get rid of error.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341506356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341506316\">said</a>:</p>\n<blockquote>\n<p>It doesn't crash <code>nvim</code> :)</p>\n</blockquote>\n<p>did you use the heartbeats setting in my code block? ;)</p>",
        "id": 341506438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723564
    },
    {
        "content": "<p>I don't think so. (I would make a terrible lab scientist...)</p>",
        "id": 341506562,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723594
    },
    {
        "content": "<p>Fails on <code>master</code> and yes no limit on the heartbeats</p>",
        "id": 341506857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341506857\">said</a>:</p>\n<blockquote>\n<p>Fails on <code>master</code> and yes no limit on the heartbeats</p>\n</blockquote>\n<p>okay, that's not good</p>",
        "id": 341507073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723706
    },
    {
        "content": "<p>Well, I also just dropped that into the <code>CategoryTheory/Preadditive/Additive.lean</code> directly and I get a different trace</p>",
        "id": 341507440,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723807
    },
    {
        "content": "<p>This is working for me on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341508097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678723964
    },
    {
        "content": "<p>As I said, terrible lab scientist.</p>",
        "id": 341508260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678723998
    },
    {
        "content": "<p>If you change the proof of <code>map_add</code> in <code>CategoryTheory/Preadditive/AdditiveFunctor.lean</code> to <code>\nset_option trace.Meta.synthInstance true in by simp</code> does it succeed?</p>",
        "id": 341508795,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724128
    },
    {
        "content": "<p>that file builds fine. I don't think that would change anything. I think the issue is in the <code>Additive</code> class itself.</p>",
        "id": 341508894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724160
    },
    {
        "content": "<p>I'll try to extract a MWE</p>",
        "id": 341509025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724186
    },
    {
        "content": "<p>The current proof is not <code>simp</code></p>",
        "id": 341509028,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724187
    },
    {
        "content": "<p>Ah ok. <code>simpNF</code> is testing for proofs by <code>by simp</code> and this is happening</p>",
        "id": 341509186,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724236
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 341509214,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724243
    },
    {
        "content": "<p>Shouldn't it just say \"there is no proof by simp, we are ok\"</p>",
        "id": 341509291,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Uncomment the first one and comment out the second to get an error.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">--class thing (C : Type _) [Category C] extends Preadditive C, Limits.HasFiniteBiproducts C</span>\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341510234,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724499
    },
    {
        "content": "<p>Well, <code>Additive</code> and <code>Abelian</code> fit that</p>",
        "id": 341510771,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724630
    },
    {
        "content": "<p>that <code>foo</code> lemma wasn't actually needed</p>",
        "id": 341511140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724718
    },
    {
        "content": "<p>You aren't suggesting unbundling <code>Preadditive</code> in <code>Additive</code> and <code>Abelian</code>right?</p>",
        "id": 341511446,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724780
    },
    {
        "content": "<p>I'm not suggesting anything. I'm just trying to isolate the issue</p>",
        "id": 341511717,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724848
    },
    {
        "content": "<p>Just asked for clarity</p>",
        "id": 341511827,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678724873
    },
    {
        "content": "<p><code>Abelian</code> should be a prop anyway ;)</p>",
        "id": 341511829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724873
    },
    {
        "content": "<p>re <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> : There is only ever at most one abelian category instance on any given category</p>",
        "id": 341512107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724936
    },
    {
        "content": "<p>But that's not an actual suggestion. We sometimes want to exploit the definitional properties of addition of morphisms (like in the category of modules), so making it a prop is not a good thing to do.</p>",
        "id": 341512298,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678724983
    },
    {
        "content": "<p>well, I couldn't track down the issue. I hope a typeclass expert can help us out here? The current MWE is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Comment out the first one and uncomment out the second to get rid of the error.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span>\n<span class=\"c1\">--class thing (C : Type _) [Category C] [Preadditive C] extends Limits.HasFiniteBiproducts C</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>And it's valid on current mathlib4 master</p>",
        "id": 341515871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678725843
    },
    {
        "content": "<p>I just cloned a fresh copy of mathlib and built it from scratch (for some reason cache was not unpacking the files from get!).  If I replace the proof of <code>map_add</code> in <code>CategoryTheory/Preadditive/AdditiveFunctor.lean</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>then it is already looking for <code>HasZeroObject D</code></p>",
        "id": 341518544,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678726527
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> CategoryTheory.Limits.HasZeroObject D ▼<br>\n  [] new goal CategoryTheory.Limits.HasZeroObject D ▶<br>\n  [] ✅ apply CategoryTheory.Limits.hasZeroObject_of_hasFiniteBiproducts to CategoryTheory.Limits.HasZeroObject D ▶<br>\n  [] ✅ apply @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms to CategoryTheory.Limits.HasZeroMorphisms D ▶<br>\n  [] ✅ apply inst✝¹ to CategoryTheory.Preadditive D ▶<br>\n  [resume] propagating CategoryTheory.Preadditive<br>\n        D to subgoal CategoryTheory.Preadditive D of CategoryTheory.Limits.HasZeroMorphisms D ▶<br>\n  [resume] propagating CategoryTheory.Limits.HasZeroMorphisms<br>\n        D to subgoal CategoryTheory.Limits.HasZeroMorphisms D of CategoryTheory.Limits.HasZeroObject D ▶<br>\n  [] ❌ apply inst✝² to CategoryTheory.Preadditive D ▶</p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> CategoryTheory.Limits.HasZeroObject D ▼<br>\n  [] result &lt;not-available&gt; (cached)</p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> CategoryTheory.Limits.HasZeroObject D ▼<br>\n  [] result &lt;not-available&gt; (cached)</p>\n<p>[Meta.synthInstance] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> Subsingleton (F.obj X ⟶ F.obj Y) ▼<br>\n  [] new goal Subsingleton (F.obj X ⟶ F.obj Y) ▶<br>\n  [] ❌ apply instSubsingleton to Subsingleton (F.obj X ⟶ F.obj Y) ▶<br>\n  [] ✅ apply @Unique.instSubsingleton to Subsingleton (F.obj X ⟶ F.obj Y) ▶<br>\n  [] ✅ apply @IsEmpty.instSubsingleton to Subsingleton (F.obj X ⟶ F.obj Y) ▶</p>\n</div></div>",
        "id": 341519403,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678726758
    },
    {
        "content": "<p>Re the MWE: for me you don't need to uncomment the second <code>thing</code> to get rid of the error -- just removing the first one does the job.</p>",
        "id": 341519536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678726798
    },
    {
        "content": "<p>yeah true</p>",
        "id": 341519701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678726825
    },
    {
        "content": "<p>but uncommenting out the second doesn't introduce an error, which might be useful information as well</p>",
        "id": 341519781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678726841
    },
    {
        "content": "<p>Why is Lean searching for <code>HasZeroObject D</code> in <code>map_add</code>? (This may be orthogonal to the looping with the new class)</p>",
        "id": 341519959,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678726881
    },
    {
        "content": "<p>you can trace the simp as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341521814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678727370
    },
    {
        "content": "<p>It seems that this HasZeroObject search is due to <code>CategoryTheory.Limits.IsZero.map</code>.</p>",
        "id": 341522020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678727416
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> CategoryTheory.Limits.HasZeroObject D ▼<br>\n    [] new goal CategoryTheory.Limits.HasZeroObject D ▼<br>\n    [instances] #[CategoryTheory.Limits.hasZeroObject_of_hasFiniteBiproducts]<br>\n    [] ✅ apply CategoryTheory.Limits.hasZeroObject_of_hasFiniteBiproducts to CategoryTheory.Limits.HasZeroObject D ▼<br>\n         [tryResolve] ✅ CategoryTheory.Limits.HasZeroObject D ≟ CategoryTheory.Limits.HasZeroObject D<br>\n    [] new goal CategoryTheory.Limits.HasZeroMorphisms D ▼<br>\n      [instances] #[@CategoryTheory.Preadditive.preadditiveHasZeroMorphisms]<br>\n  [] ✅ apply @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms to CategoryTheory.Limits.HasZeroMorphisms D ▼<br>\n    [tryResolve] ✅ CategoryTheory.Limits.HasZeroMorphisms D ≟ CategoryTheory.Limits.HasZeroMorphisms D<br>\n    [] new goal CategoryTheory.Preadditive D ▶<br>\n  [] ✅ apply inst✝¹ to CategoryTheory.Preadditive D ▶<br>\n  [resume] propagating CategoryTheory.Preadditive<br>\n        D to subgoal CategoryTheory.Preadditive D of CategoryTheory.Limits.HasZeroMorphisms D ▼<br>\n    [] size: 1<br>\n  [resume] propagating CategoryTheory.Limits.HasZeroMorphisms<br>\n        D to subgoal CategoryTheory.Limits.HasZeroMorphisms D of CategoryTheory.Limits.HasZeroObject D ▼<br>\n    [] size: 2<br>\n    [synthInstance] new goal CategoryTheory.Limits.HasFiniteBiproducts D ▼<br>\n      [instances] #[@thing.toHasFiniteBiproducts]<br>\n  [] 💥 apply @thing.toHasFiniteBiproducts to CategoryTheory.Limits.HasFiniteBiproducts D ▼<br>\n    [tryResolve] 💥 CategoryTheory.Limits.HasFiniteBiproducts D ≟ CategoryTheory.Limits.HasFiniteBiproducts ?m.2238 ▶</p>\n</div></div>\n<p>My output from <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> MWE (in its borked mode) (edit: expanded)</p>",
        "id": 341522086,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678727436
    },
    {
        "content": "<p>Nuking <code>hasZeroObject_of_hasFiniteBiproducts</code> fixes things</p>",
        "id": 341524389,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678728078
    },
    {
        "content": "<p>But I think we want that instance. And I still can't figure out where the loop is coming from.</p>",
        "id": 341525709,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678728434
    },
    {
        "content": "<p>It has lower priority in the original file for some reason</p>",
        "id": 341525791,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678728460
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Preadditive.AdditiveFunctor</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">HasFiniteBiproducts</span> <span class=\"n\">C</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">IsZero.map</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Functor.Additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 341527987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678729079
    },
    {
        "content": "<p>FWIW, removing  from the simp set <code>IsZero.map</code> globally doesn't break anything (yet)</p>",
        "id": 341533806,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678729482
    },
    {
        "content": "<p>It is a strange result</p>",
        "id": 341533858,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678729498
    },
    {
        "content": "<p>I don't think checking if <code>F = 0</code> is a good place to start looking for a proof that <code>F.map</code> is a homomorphism</p>",
        "id": 341534515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678729700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341533806\">said</a>:</p>\n<blockquote>\n<p>FWIW, removing  from the simp set <code>IsZero.map</code> globally doesn't break anything (yet)</p>\n</blockquote>\n<p>Removing <code>@[simp]</code> doesn't seem to cause any problems in mathlib(3)</p>",
        "id": 341545353,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678732793
    },
    {
        "content": "<p>If you change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">HasZeroMorphisms</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>then the problem goes away. Are these the same?</p>",
        "id": 341547548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678733419
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>More output </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> apply @thing.toHasFiniteBiproducts to CategoryTheory.Limits.HasFiniteBiproducts D ▼<br>\n    [tryResolve] 💥 CategoryTheory.Limits.HasFiniteBiproducts D ≟ CategoryTheory.Limits.HasFiniteBiproducts ?m.2238 ▼<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▼<br>\n          [instances] #[]<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▼<br>\n          [instances] #[]<br>\n      [synthInstance] ❌ thing D ▶<br>\n     ....</p>\n</div></div>",
        "id": 341551799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678734651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341547548\">said</a>:</p>\n<blockquote>\n<p>If you change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">HasZeroMorphisms</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Limits.HasFiniteBiproducts</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>then the problem goes away. Are these the same?</p>\n</blockquote>\n<p><code>Preadditive</code> implies <code>HasZeroMorphisms</code>, and both are data, so this is probably problematic</p>",
        "id": 341552468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678734858
    },
    {
        "content": "<p>Does it?</p>",
        "id": 341552565,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678734885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341551799\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>More output </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> apply @thing.toHasFiniteBiproducts to CategoryTheory.Limits.HasFiniteBiproducts D ▼<br>\n    [tryResolve] 💥 CategoryTheory.Limits.HasFiniteBiproducts D ≟ CategoryTheory.Limits.HasFiniteBiproducts ?m.2238 ▼<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▶<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▼<br>\n          [instances] #[]<br>\n      [synthInstance] ❌ thing D ▼<br>\n        [] no instances for thing D ▼<br>\n          [instances] #[]<br>\n      [synthInstance] ❌ thing D ▶<br>\n     ....</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>That's probably <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a></p>",
        "id": 341552941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678734992
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/6f2b42f1aafa2e47304d7515c10523f85655bec8/Mathlib/CategoryTheory/Preadditive/Basic.lean#L203\">https://github.com/leanprover-community/mathlib4/blob/6f2b42f1aafa2e47304d7515c10523f85655bec8/Mathlib/CategoryTheory/Preadditive/Basic.lean#L203</a></p>",
        "id": 341552985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678735006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341552941\">said</a>:</p>\n<blockquote>\n<p>That's probably <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a></p>\n</blockquote>\n<p>I think we're on to something here...</p>",
        "id": 341553404,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678735137
    },
    {
        "content": "<p>Only about 20000 repeated failures here</p>",
        "id": 341554289,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678735418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you know if the diamond in the <code>BadClass</code> example from <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> is really necessary?</p>",
        "id": 341554499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678735480
    },
    {
        "content": "<p>There's a diamond?</p>",
        "id": 341555250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678735720
    },
    {
        "content": "<p>not in <code>BadClass</code>, but in <code>CommRing</code></p>",
        "id": 341555488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678735788
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>With trace.Meta.isDefEq true </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[Meta.isDefEq] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> ?F.map ?f =?= <a href=\"http://F.map\">F.map</a> (f + g) <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.Tactic.simp.unify] @CategoryTheory.Discrete.functor_map_id:1000, failed to unify<br>\n      ?F.map ?f<br>\n    with<br>\n<a href=\"http://F.map\">F.map</a> (f + g)</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?F.map ?f =?= <a href=\"http://F.map\">F.map</a> (f + g) <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> CategoryTheory.Category C =?= CategoryTheory.Category D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C =?= CategoryTheory.Category C</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2200 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁴ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category C =?= CategoryTheory.Category C</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁴ =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁴</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D =?= CategoryTheory.Category D</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2207 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Category D =?= CategoryTheory.Category D</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³</p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Limits.HasZeroObject D =?= CategoryTheory.Limits.HasZeroObject ?m.2217 <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2214 =?= CategoryTheory.Limits.hasZeroObject_of_hasFiniteBiproducts D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Limits.HasZeroMorphisms D =?= CategoryTheory.Limits.HasZeroMorphisms ?m.2226 <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2219 =?= CategoryTheory.Preadditive.preadditiveHasZeroMorphisms <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> CategoryTheory.Preadditive D =?= CategoryTheory.Preadditive D <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2228 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>¹ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2228 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>¹ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.2219 =?= CategoryTheory.Preadditive.preadditiveHasZeroMorphisms <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> CategoryTheory.Limits.HasFiniteBiproducts D =?= CategoryTheory.Limits.HasFiniteBiproducts ?m.2238 ▼<br>\n  [] ✅ D =?= ?m.2238 ▶<br>\n  [] ✅ inst✝³ =?= ?m.2239 ▶<br>\n  [] 💥 CategoryTheory.Preadditive.preadditiveHasZeroMorphisms =?= CategoryTheory.Preadditive.preadditiveHasZeroMorphisms ▼<br>\n    [] ✅ D =?= D<br>\n    [] ✅ inst✝³ =?= inst✝³<br>\n    [] ❌ inst✝¹ =?= thing.toPreadditive ▶<br>\n    [] 💥 <a href=\"http://CategoryTheory.Limits.HasZeroMorphisms.mk\">CategoryTheory.Limits.HasZeroMorphisms.mk</a> =?= <a href=\"http://CategoryTheory.Limits.HasZeroMorphisms.mk\">CategoryTheory.Limits.HasZeroMorphisms.mk</a> ▼<br>\n      [] 💥 @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1 D inst✝³<br>\n            inst✝¹ =?= @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1 D inst✝³ thing.toPreadditive ▼<br>\n        [] 💥 ∀ {X Y : D} (f : X ⟶ Y) (R : D),<br>\n              ↑(CategoryTheory.Preadditive.leftComp R f) 0 =<br>\n                0 =?= ∀ {X Y : D} (f : X ⟶ Y) (R : D), ↑(CategoryTheory.Preadditive.leftComp R f) 0 = 0 ▼<br>\n          [] ✅ D =?= D<br>\n          [] ✅ D =?= D<br>\n          [] ✅ X✝ ⟶ Y✝ =?= X✝ ⟶ Y✝<br>\n          [] ✅ D =?= D<br>\n          [] 💥 ↑(CategoryTheory.Preadditive.leftComp R f) 0 = 0 =?= ↑(CategoryTheory.Preadditive.leftComp R f) 0 = 0 ▼<br>\n            [] 💥 ↑(CategoryTheory.Preadditive.leftComp R f) 0 =?= ↑(CategoryTheory.Preadditive.leftComp R f) 0 ▼<br>\n              [] found messy fun a =&gt; (fun x =&gt; X✝ ⟶ R) a =?= fun a =&gt; (fun x =&gt; X✝ ⟶ R) a<br>\n              [] ❌ CategoryTheory.Preadditive.leftComp R f =?= CategoryTheory.Preadditive.leftComp R f ▼<br>\n                [] ✅ R =?= R<br>\n                [] ✅ f =?= f<br>\n                [] ✅ D =?= D<br>\n                [] ✅ inst✝³ =?= inst✝³<br>\n                [] ❌ inst✝¹ =?= thing.toPreadditive ▶<br>\n                [] ❌ <a href=\"http://AddMonoidHom.mk\">AddMonoidHom.mk</a>' (fun g =&gt; f ≫ g)<br>\n                      (_ :<br>\n                        ∀ (g g' : Y✝ ⟶ R),<br>\n                          f ≫ (g + g') =<br>\n                            f ≫ g +<br>\n                              f ≫<br>\n                                g') =?= <a href=\"http://AddMonoidHom.mk\">AddMonoidHom.mk</a>' (fun g =&gt; f ≫ g)<br>\n                      (_ : ∀ (g g' : Y✝ ⟶ R), f ≫ (g + g') = f ≫ g + f ≫ g') ▶<br>\n              [] 💥 AddHomClass.toFunLike.1 (CategoryTheory.Preadditive.leftComp R f)<br>\n                    0 =?= AddHomClass.toFunLike.1 (CategoryTheory.Preadditive.leftComp R f) 0 ▼<br>\n                [] 💥 ZeroHom.toFun (↑(CategoryTheory.Preadditive.leftComp R f))<br>\n                      0 =?= ZeroHom.toFun (↑(CategoryTheory.Preadditive.leftComp R f)) 0 ▼<br>\n                  [] ❌ ↑(CategoryTheory.Preadditive.leftComp R f) =?= ↑(CategoryTheory.Preadditive.leftComp R f) ▶<br>\n                  [] 💥 (↑(CategoryTheory.Preadditive.leftComp R f)).1 0 =?= (↑(CategoryTheory.Preadditive.leftComp R f)).1 0 ▼<br>\n                    [] 💥 f ≫ 0 =?= f ≫ 0 ▼<br>\n                      [] ✅ f =?= f<br>\n                      [] ❌ 0 =?= 0 ▶<br>\n                      [] 💥 CategoryTheory.Category.toCategoryStruct.3 f 0 =?= CategoryTheory.Category.toCategoryStruct.3 f 0 ▼<br>\n                        [] ✅ CategoryTheory.Category.toCategoryStruct.3 =?= CategoryTheory.Category.toCategoryStruct.3<br>\n                        [] ✅ f =?= f<br>\n                        [] 💥 0 =?= 0 ▼<br>\n                          [] ✅ 0 =?= 0<br>\n                          [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                          [] 💥 Zero.toOfNat0 =?= Zero.toOfNat0 ▼<br>\n                            [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                            [] 💥 NegZeroClass.toZero =?= NegZeroClass.toZero ▼<br>\n                              [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                              [] 💥 SubNegZeroMonoid.toNegZeroClass =?= SubNegZeroMonoid.toNegZeroClass ▼<br>\n                                [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                                [] ❌ SubtractionMonoid.toSubNegZeroMonoid =?= SubtractionMonoid.toSubNegZeroMonoid ▶<br>\n                                [] 💥 <a href=\"http://NegZeroClass.mk\">NegZeroClass.mk</a> (_ : -0 = 0) =?= <a href=\"http://NegZeroClass.mk\">NegZeroClass.mk</a> (_ : -0 = 0) ▼<br>\n                                  [] 💥 SubNegZeroMonoid.neg_zero =?= SubNegZeroMonoid.neg_zero ▼<br>\n                                    [] 💥 -0 = 0 =?= -0 = 0 ▼<br>\n                                      [] 💥 -0 =?= -0 ▼<br>\n                                        [] ❌ 0 =?= 0 ▼<br>\n                                          [] ✅ 0 =?= 0<br>\n                                          [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                                          [] ❌ Zero.toOfNat0 =?= Zero.toOfNat0 ▶<br>\n                                          [] ❌ Zero.toOfNat0.1 =?= Zero.toOfNat0.1 ▶<br>\n                                        [] 💥 SubNegMonoid.toNeg.1 0 =?= SubNegMonoid.toNeg.1 0 ▼<br>\n                                          [] 💥 SubNegMonoid.toNeg.1 =?= SubNegMonoid.toNeg.1 ▼<br>\n                                            [] 💥 SubNegMonoid.toNeg =?= SubNegMonoid.toNeg ▼<br>\n                                              [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                                              [] 💥 SubNegZeroMonoid.toSubNegMonoid =?= SubNegZeroMonoid.toSubNegMonoid ▼<br>\n                                                [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                                                [] 💥 SubtractionMonoid.toSubNegZeroMonoid =?= SubtractionMonoid.toSubNegZeroMonoid ▼<br>\n                                                  [] ✅ Y✝ ⟶ R =?= Y✝ ⟶ R<br>\n                                                  [] ❌ SubtractionCommMonoid.toSubtractionMonoid =?= SubtractionCommMonoid.toSubtractionMonoid ▶<br>\n                                                  [] 💥 let src := SubtractionMonoid.toSubNegMonoid;<br>\n<a href=\"http://SubNegZeroMonoid.mk\">SubNegZeroMonoid.mk</a><br>\n                                                        (_ : -0 = 0) =?= let src := SubtractionMonoid.toSubNegMonoid;<br>\n<a href=\"http://SubNegZeroMonoid.mk\">SubNegZeroMonoid.mk</a> (_ : -0 = 0) ▼<br>\n                                                    [] 💥 <a href=\"http://SubNegZeroMonoid.mk\">SubNegZeroMonoid.mk</a> (_ : -0 = 0) =?= <a href=\"http://SubNegZeroMonoid.mk\">SubNegZeroMonoid.mk</a> (_ : -0 = 0) ▼<br>\n                                                      [] 💥 SubtractionMonoid.toSubNegZeroMonoid.proof_1 =?= SubtractionMonoid.toSubNegZeroMonoid.proof_1 ▼<br>\n                                                        [] 💥 -0 = 0 =?= -0 = 0 ▼<br>\n                                                          [] 💥 -0 =?= -0 ▶</p>\n</div></div>",
        "id": 341555848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678735881
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>With pp all </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> @CategoryTheory.Limits.HasZeroMorphisms.mk.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n          (@inferInstance.{max (?u.224 + 1) (?u.232 + 1)}<br>\n            ((X Y : D) →<br>\n              Zero.{?u.232}<br>\n                (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                  (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                    (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                  X Y))<br>\n            fun (X Y : D) =&gt;<br>\n            @NegZeroClass.toZero.{?u.232}<br>\n              (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                  (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                X Y)<br>\n              (@SubNegZeroMonoid.toNegZeroClass.{?u.232}<br>\n                (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                  (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                    (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                  X Y)<br>\n                (@SubtractionMonoid.toSubNegZeroMonoid.{?u.232}<br>\n                  (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                    (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                      (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                    X Y)<br>\n                  (@SubtractionCommMonoid.toSubtractionMonoid.{?u.232}<br>\n                    (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                      (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                        (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                      X Y)<br>\n                    (@AddCommGroup.toDivisionAddCommMonoid.{?u.232}<br>\n                      (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                        (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                          (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                        X Y)<br>\n                      (@CategoryTheory.Preadditive.homGroup.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>¹ X Y))))))<br>\n          (@CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>¹)<br>\n          (@CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_2.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n            inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>¹) =?= @CategoryTheory.Limits.HasZeroMorphisms.mk.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n          (@inferInstance.{max (?u.224 + 1) (?u.232 + 1)}<br>\n            ((X Y : D) →<br>\n              Zero.{?u.232}<br>\n                (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                  (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                    (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                  X Y))<br>\n            fun (X Y : D) =&gt;<br>\n            @NegZeroClass.toZero.{?u.232}<br>\n              (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                  (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                X Y)<br>\n              (@SubNegZeroMonoid.toNegZeroClass.{?u.232}<br>\n                (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                  (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                    (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                  X Y)<br>\n                (@SubtractionMonoid.toSubNegZeroMonoid.{?u.232}<br>\n                  (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                    (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                      (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                    X Y)<br>\n                  (@SubtractionCommMonoid.toSubtractionMonoid.{?u.232}<br>\n                    (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                      (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                        (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                      X Y)<br>\n                    (@AddCommGroup.toDivisionAddCommMonoid.{?u.232}<br>\n                      (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                        (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                          (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³))<br>\n                        X Y)<br>\n                      (@CategoryTheory.Preadditive.homGroup.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n                        (@thing.toPreadditive.{?u.224, ?u.232} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ ?m.2240) X Y))))))<br>\n          (@CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n            (@thing.toPreadditive.{?u.224, ?u.232} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ ?m.2240))<br>\n          (@CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_2.{?u.232, ?u.224} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³<br>\n            (@thing.toPreadditive.{?u.224, ?u.232} D inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³ ?m.2240)) ▼<br>\n      [] 💥 @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1.{?u.232, ?u.224} D inst✝³<br>\n            inst✝¹ =?= @CategoryTheory.Preadditive.preadditiveHasZeroMorphisms.proof_1.{?u.232, ?u.224} D inst✝³<br>\n            (@thing.toPreadditive.{?u.224, ?u.232} D inst✝³ ?m.2240) ▼<br>\n        [] 💥 ∀ {X Y : D}<br>\n              (f :<br>\n                @Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                  (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                    (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst✝³))<br>\n                  X Y)<br>\n              (R : D),<br>\n              @Eq.{?u.232 + 1}<br>\n                ((fun<br>\n                      (x :<br>\n                        @Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                          (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                            (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst✝³))<br>\n                          Y R) =&gt;<br>\n                    @Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                      (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                        (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst✝³))<br>\n                      X R)<br>\n                  (@OfNat.ofNat.{?u.232}<br>\n                    (@Quiver.Hom.{?u.232 + 1, ?u.224} D<br>\n                      (@CategoryTheory.CategoryStruct.toQuiver.{?u.232, ?u.224} D<br>\n                        (@CategoryTheory.Category.toCategoryStruct.{?u.232, ?u.224} D inst✝³))<br>\n                      Y R)</p>\n</div></div>",
        "id": 341557667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678736427
    },
    {
        "content": "<p>I don't think this gets fixed soon. What sounds like a good workaround until a fix is possible?</p>",
        "id": 341559039,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678736851
    },
    {
        "content": "<p>/poll <br>\n<code>nolint simpNF</code><br>\nremove <code>hasZeroObject_of_hasFiniteBiproducts</code> as an instance<br>\nremove <code>IsZero.map</code> from the simp set</p>",
        "id": 341559188,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678736892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341554499\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> do you know if the diamond in the <code>BadClass</code> example from <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> is really necessary?</p>\n</blockquote>\n<p>o_O it doesn't seem to be! Hang on</p>",
        "id": 341561348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678737501
    },
    {
        "content": "<p>I updated the issue: you can get a smaller amount of chaos if you break the diamond (which you can upgrade to a much bigger amount of chaos by adding an instance of BadClass Nat.</p>",
        "id": 341562543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678737775
    },
    {
        "content": "<p>The other option is to just get rid of <code>Additive</code> altogether and make it a mixin of the form <code>Preadditive</code> + <code>HasFiniteBiproducts</code>. That would probably require a refactor of mathlib3 before porting.</p>",
        "id": 341569378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740116
    },
    {
        "content": "<p>Do you want Abelian categories for Denmark?</p>",
        "id": 341570158,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740403
    },
    {
        "content": "<p>Not necessarily but it would be nice to have</p>",
        "id": 341570265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740448
    },
    {
        "content": "<p>FWIW I don’t think the refactor I suggested would be that bad</p>",
        "id": 341570293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740467
    },
    {
        "content": "<p><code>Abelian</code> too?</p>",
        "id": 341570317,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740479
    },
    {
        "content": "<p>Does abelian extend additive? I thought it does not</p>",
        "id": 341570439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740518
    },
    {
        "content": "<p>No but it extends <code>Preadditive</code> and <code>HasFiniteBiproducts</code></p>",
        "id": 341570535,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740549
    },
    {
        "content": "<p>Oh so that would cause similar issues</p>",
        "id": 341570731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740620
    },
    {
        "content": "<p>Yeah I guess we would refactor that as well</p>",
        "id": 341570748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678740633
    },
    {
        "content": "<p>It is the other PR in the title</p>",
        "id": 341570749,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740632
    },
    {
        "content": "<p>I would pause at refactoring and porting at the same time though within reason</p>",
        "id": 341571148,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740836
    },
    {
        "content": "<p>Other the Denmark school, I can't think of any hard constraints for these files (and their dependents)</p>",
        "id": 341571260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678740882
    },
    {
        "content": "<p>Since <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> is causing issues for others (cf. <a href=\"#narrow/stream/287929-mathlib4/topic/can't.20infer.20.60ContinuousNeg.60/near/341558284\">this</a>) I think the right solution is to wait for this issue to be resolved, unfortunately.</p>\n<p>Let me also ping to see what <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thinks about this issue.</p>",
        "id": 341586765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678746875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232797.20.2F.20!4.232769/near/341586765\">said</a>:</p>\n<blockquote>\n<p>Since <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> is causing issues for others (cf. <a href=\"#narrow/stream/287929-mathlib4/topic/can't.20infer.20.60ContinuousNeg.60/near/341558284\">this</a>) I think the right solution is to wait for this issue to be resolved, unfortunately.</p>\n<p>Let me also ping to see what <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> thinks about this issue.</p>\n</blockquote>\n<p>Since you seem to be free from porting anything at the moment, why not work on <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a>?</p>",
        "id": 341622764,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678770899
    },
    {
        "content": "<p>Our future depends on solving the above</p>",
        "id": 341622918,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678771035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> please calm down a bit! We appreciate your help with porting, but people have many obligations!<br>\nYou only recently showed up on zulip. Please avoid sounding like you are bossing people around.</p>",
        "id": 341638029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678778737
    }
]