[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span> <span class=\"c1\">-- \"tactic 'aesop' failed, failed to prove the goal after exhaustive search.\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is <code>continuity</code>not supposed to work for goals of the shape <code>ContinuousOn ...</code>?<br>\nHow can I massage the goal so that <code>continuity</code>works?</p>",
        "id": 402068747,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699995657
    },
    {
        "content": "<p>If your function actually is everywhere continuous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.continuousOn</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 402069054,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699995744
    },
    {
        "content": "<p>And what if it isn't?</p>",
        "id": 402069153,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699995775
    },
    {
        "content": "<p>My use case is more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(and I can show that <code>1 + t * z</code> does not vanish on the relevant interval).</p>",
        "id": 402069806,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699996019
    },
    {
        "content": "<p>You can apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.continuousOn#doc\">docs#ContinuousAt.continuousOn</a> and then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.mul#doc\">docs#ContinuousAt.mul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt#doc\">docs#ContinuousAt</a>.inv₀. An automated tactic could possibly solve this by just \"unfolding\" the definition of ContinuousOn (<code>intro t ht</code>) and apply the ContinuousWithinAt lemmas.</p>",
        "id": 402080368,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700000289
    },
    {
        "content": "<p>I know how I can do it by hand. Ideally, <code>continuity</code> would essentially do what you suggest and leave the side goals that need to be closed for things like divisions to be filled later. But I assume that does not work with <code>aesop</code>, as <code>aesop</code> is a finishing tactic?</p>",
        "id": 402225419,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700051506
    },
    {
        "content": "<p>I believe it's possible to turn off backtracking in Aesop. In this case I believe it can be used as a non-finishing tactic.</p>",
        "id": 402262118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700060369
    },
    {
        "content": "<p>You can also look into <code>apply_rules</code> for an overlapping set of functionality.</p>",
        "id": 402262321,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700060411
    },
    {
        "content": "<p>In my opinion, the best way to make a non-finishing tactic for this kind of task is to make it be fairly opinionated but to offer a pattern syntax which makes it easy for the user to specify a non-default desired level of operation on the tree of the expression. This is what <code>gcongr</code> does.</p>",
        "id": 402263240,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700060605
    },
    {
        "content": "<p>So you could say <code>continuity log (?_ + 1)</code> to get it to use the log, add and const lemmas and present the rest as a goal.</p>",
        "id": 402263488,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700060667
    },
    {
        "content": "<p>It would be nice if somebody could do that :-)</p>",
        "id": 402278718,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700064639
    },
    {
        "content": "<p>I'm in favour of a pattern syntax for this too</p>",
        "id": 403188547,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700492509
    },
    {
        "content": "<p>Could <code>continuity</code> be made to work here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>(The problem likely is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.const_cpow#doc\">docs#Continuous.const_cpow</a> needs that 2 is not zero...)</p>",
        "id": 409023892,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703023646
    },
    {
        "content": "<p>Unlikely to help but you could put a proof of  <code>(2 : \\C) \\ne 0</code> into the context and try again...</p>",
        "id": 409047162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703034405
    }
]