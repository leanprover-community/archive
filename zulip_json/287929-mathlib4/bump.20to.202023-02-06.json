[
    {
        "content": "<p>This bump will bring <a href=\"https://github.com/leanprover/lean4/pull/2093\">https://github.com/leanprover/lean4/pull/2093</a> to mathlib.</p>\n<p>First error is in <code>Data.Rat.Defs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">isDomain</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">‚Ñö</span> <span class=\"o\">:=</span>\n  <span class=\"n\">NoZeroDivisors.to_isDomain</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- failed to synthesize</span>\n<span class=\"c1\">--   NoZeroDivisors ‚Ñö</span>\n<span class=\"c1\">-- (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option</span>\n<span class=\"c1\">-- synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n</code></pre></div>",
        "id": 326099902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675683075
    },
    {
        "content": "<p>Do you have a branch/PR for this already?</p>",
        "id": 326100561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675683292
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2105\">!4#2105</a> -- <code>bump-2023-02-06</code></p>",
        "id": 326100643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675683326
    },
    {
        "content": "<p>I'll have a look once the cache is ready</p>",
        "id": 326101500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675683598
    },
    {
        "content": "<p>Failing trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Ring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">?</span><span class=\"n\">m.28264</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">?</span><span class=\"n\">m.28265</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommGroupWithZero.toNontrivial</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toNoZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.noZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">IsDomain</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toNoZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.noZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">IsDomain</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"n\">‚Ñö</span>\n</code></pre></div>\n<p>Start of succesful trace (with maxHeartbeats):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Ring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">?</span><span class=\"n\">m.28264</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"bp\">?</span><span class=\"n\">m.28265</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommGroupWithZero.toNontrivial</span> <span class=\"bp\">‚ñ∂</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toNoZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚âü</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29337</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29337</span> <span class=\"bp\">‚ñº</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29337</span> <span class=\"bp\">‚ñ∂</span>\n        <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">CanonicallyOrderedCommSemiring.toMul</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.2</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing</span>\n                <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">‚Ñö</span>\n                <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">‚Ñö</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">‚Ñö</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring.2</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span>\n                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span>\n                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CanonicallyOrderedCommSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Mul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Mul.mul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñº</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚ñº</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"n\">a</span> <span class=\"bp\">‚ñº</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚ñº</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚ñº</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.instMulRat</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n                                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.mul</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span> <span class=\"bp\">‚ñº</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Mul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñ∂</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Mul.mul</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.mul</span> <span class=\"bp\">‚ñº</span>\n                                    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.mul</span> <span class=\"bp\">‚ñº</span>\n                                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.mul</span>\n                                  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.mul</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.instMulRat.1</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚ñº</span>\n                                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">‚ñº</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.mul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"bp\">‚ñº</span>\n                                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.mul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span>\n                                  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span>\n                                  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.mul</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2.1</span> <span class=\"n\">x</span><span class=\"bp\">‚úù¬π</span> <span class=\"n\">x</span><span class=\"bp\">‚úù</span>\n                  <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29338.2</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29337</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29337</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrderedRing.noZeroDivisors</span> <span class=\"n\">to</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚âü</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29351</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"bp\">?</span><span class=\"n\">m.29351</span> <span class=\"bp\">‚ñº</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29351</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"n\">‚Ñö</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29351</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.29335</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Ring.toNonAssocRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toNonAssocRing</span> <span class=\"bp\">‚ñº</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">‚Ñö</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">StrictOrderedRing.toRing</span> <span class=\"bp\">‚ñº</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.commRing.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">LinearOrderedRing.toStrictOrderedRing.1</span> <span class=\"bp\">‚ñº</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Rat.commRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CommRing.mk</span> <span class=\"n\">Rat.mul_comm</span> <span class=\"bp\">=?=</span> <span class=\"n\">LinearOrderedRing.toStrictOrderedRing</span> <span class=\"bp\">‚ñº</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span>\n                        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span>\n                        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CommRing.mk</span> <span class=\"n\">Rat.mul_comm</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29352.1</span> <span class=\"bp\">‚ñº</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚ñº</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span>\n                          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span>\n                          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">StrictOrderedRing</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñö</span>\n                        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CommRing.mk</span> <span class=\"n\">Rat.mul_comm</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.29352.1</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Ring.mk</span> <span class=\"n\">zsmulRec</span> <span class=\"n\">Rat.add_left_neg</span> <span class=\"bp\">=?=</span> <span class=\"n\">LinearOrderedRing.toStrictOrderedRing.1</span> <span class=\"bp\">‚ñº</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Ring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring</span> <span class=\"n\">‚Ñö</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">Rat.one_mul</span> <span class=\"n\">Rat.mul_one</span> <span class=\"n\">npowRec</span> <span class=\"bp\">‚ñº</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Semiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring</span> <span class=\"n\">‚Ñö</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">Rat.mul_assoc</span> <span class=\"bp\">‚ñº</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">‚Ñö</span>\n                        <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring.mk</span> <span class=\"n\">Rat.mul_add</span> <span class=\"n\">Rat.add_mul</span> <span class=\"n\">Rat.zero_mul</span>\n                              <span class=\"n\">Rat.mul_zero</span> <span class=\"bp\">‚ñº</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">‚Ñö</span>\n                          <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommMonoid.mk</span> <span class=\"n\">Rat.add_comm</span> <span class=\"bp\">‚ñº</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">‚Ñö</span>\n                            <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">AddCommMonoid.toAddMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoid.mk</span> <span class=\"n\">Rat.zero_add</span> <span class=\"n\">Rat.add_zero</span> <span class=\"n\">nsmulRec</span> <span class=\"bp\">‚ñº</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">‚Ñö</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">AddMonoid.toAddSemigroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddSemigroup.mk</span> <span class=\"n\">Rat.add_assoc</span> <span class=\"bp\">‚ñº</span>\n                                <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">‚Ñö</span>\n                                <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">AddSemigroup.toAdd</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Add</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">=?=</span> <span class=\"n\">Add</span> <span class=\"n\">‚Ñö</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">Add.add</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span> <span class=\"bp\">‚ñ∂</span>\n                                  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">AddMonoid.toAddSemigroup.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">‚ñº</span>\n</code></pre></div>",
        "id": 326102322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675683861
    },
    {
        "content": "<p>I don't if this is now 2003 kicking in?</p>",
        "id": 326102363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675683878
    },
    {
        "content": "<p>I was able to fix one of the 8 timeouts by locally bumping the <code>set_option synthInstance.maxHeartbeat</code> setting; maybe that's a reasonable thing to do while waiting for <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a></p>",
        "id": 326104691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675684655
    },
    {
        "content": "<p>I'm doing that in a score of files now</p>",
        "id": 326106930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685399
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git diff --stat\n<span class=\"go\"> Mathlib/Algebra/Module/Basic.lean            | 1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Module/LinearMap.lean        | 3 +++</span>\n<span class=\"go\"> Mathlib/Algebra/Order/Archimedean.lean       | 4 ++++</span>\n<span class=\"go\"> Mathlib/Algebra/PUnitInstances.lean          | 1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Ring/Prod.lean               | 1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Star/SelfAdjoint.lean        | 2 ++</span>\n<span class=\"go\"> Mathlib/Data/Fin/Basic.lean                  | 4 ++++</span>\n<span class=\"go\"> Mathlib/Data/Int/AbsoluteValue.lean          | 1 +</span>\n<span class=\"go\"> Mathlib/Data/Int/GCD.lean                    | 1 +</span>\n<span class=\"go\"> Mathlib/Data/Int/Parity.lean                 | 4 ++++</span>\n<span class=\"go\"> Mathlib/Data/Multiset/Basic.lean             | 1 +</span>\n<span class=\"go\"> Mathlib/Data/Nat/Bitwise.lean                | 2 ++</span>\n<span class=\"go\"> Mathlib/Data/Nat/ModEq.lean                  | 1 +</span>\n<span class=\"go\"> Mathlib/Data/Rat/Defs.lean                   | 3 ++-</span>\n<span class=\"go\"> Mathlib/Data/ZMod/Defs.lean                  | 1 +</span>\n<span class=\"go\"> Mathlib/GroupTheory/GroupAction/ConjAct.lean | 1 +</span>\n<span class=\"go\"> Mathlib/RingTheory/Congruence.lean           | 3 +++</span>\n<span class=\"go\"> Mathlib/Tactic/Abel.lean                     | 1 +</span>\n<span class=\"go\"> Mathlib/Tactic/Linarith/Parsing.lean         | 3 +++</span>\n<span class=\"go\"> Mathlib/Tactic/Positivity/Basic.lean         | 1 +</span>\n<span class=\"go\"> 20 files changed, 38 insertions(+), 1 deletion(-)</span>\n</code></pre></div>",
        "id": 326107066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685434
    },
    {
        "content": "<p>But this is clearly not sustainable.</p>",
        "id": 326107206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685502
    },
    {
        "content": "<p>I don't think we should merge this PR with all those <code>maxHeartbeats</code>.</p>",
        "id": 326107230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685517
    },
    {
        "content": "<p>I'd argue that having slow typeclass resolution is better than having typeclass resolution that never works in some cases (as in mathlib4 master); so if it unblocks the port, I think adding these while waiting for 2003 is reasonable</p>",
        "id": 326108412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675685886
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">_root_.MulAut.conjNormal_apply</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">H.Normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">MulAut.conjNormal</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">‚Åª¬π</span> <span class=\"o\">:=</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  ‚ÜëMulAut.conjNormal g</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  (fun x =&gt; MulAut { x // x ‚àà ?m.294870 }) g</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 326108461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685910
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> is not solved by increasing heartbeats</p>",
        "id": 326108489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675685922
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAut.conjNormal#doc\">docs4#MulAut.conjNormal</a></p>",
        "id": 326108538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675685938
    },
    {
        "content": "<p>Does <code>(MulAut.conjNormal g : MulAut H) h</code> work in place of <code>MulAut.conjNormal g h</code>?</p>",
        "id": 326108741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686002
    },
    {
        "content": "<p>yes it does, and it's quite fast</p>",
        "id": 326108860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686032
    },
    {
        "content": "<p>do you understand why this change is needed by the bump?</p>",
        "id": 326108891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686044
    },
    {
        "content": "<p>I would guess that it found a different instance to the one it did before, and the new one is less helpful for unification</p>",
        "id": 326108969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686069
    },
    {
        "content": "<p>And that somehow, that unification failure is preventing the CoeFun instance from firing; maybe because the metavariable wasn't filled in</p>",
        "id": 326109088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686110
    },
    {
        "content": "<p>We have similar problems in mathlib3 where sometimes <code>map_mul F x y</code> fails but <code>map_mul (F : some_annotation) x y</code> works</p>",
        "id": 326109239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686150
    },
    {
        "content": "<p>It hasn't happened for <code>has_coe_to_fun</code> in Lean3, but Lean4 is sufficiently different that it wouldn't be too surprising for a similar thing to occur there</p>",
        "id": 326109328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686175
    },
    {
        "content": "<p>I pushed a commit that changes 24 files. It doesn't look like I'm almost done.</p>",
        "id": 326109688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686282
    },
    {
        "content": "<p>This looks like serious problems to me.</p>",
        "id": 326109720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686293
    },
    {
        "content": "<p>Can we change the default hearbeats globally?</p>",
        "id": 326110050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686411
    },
    {
        "content": "<p>I don't like that idea. mathlib 4 shouldn't be slower than mathlib 3.</p>",
        "id": 326110308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686496
    },
    {
        "content": "<p>I think we should fix these problems before pouring more person-weeks into the port.</p>",
        "id": 326110380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675686520
    },
    {
        "content": "<p>The default hearbeat limit in lean4 is 5x smaller than the value in Lean3 I think</p>",
        "id": 326110387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bump.20to.202023-02-06/near/326110380\">said</a>:</p>\n<blockquote>\n<p>I think we should fix these problems before pouring more person-weeks into the port.</p>\n</blockquote>\n<p>My worry is that if we don't make these workarounds, people will make worse workaround when porting that are harder to undo</p>",
        "id": 326110528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675686573
    },
    {
        "content": "<p><code>Order.Partition.Finpartition</code> is really bad, around L525. With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: this is too slow</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: this is too slow</span>\n</code></pre></div>\n<p>it just sits there and blankly stares you in the face.</p>",
        "id": 326115694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675688154
    },
    {
        "content": "<p>Is there a wiki page on diagnosing these timeouts (what trace options to set, how to expand the tree view entirely, etc...)</p>",
        "id": 326116024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675688250
    },
    {
        "content": "<p>Not that I know of</p>",
        "id": 326116389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675688353
    },
    {
        "content": "<p>I think what's happening is the version bump is allowing TC synthesis to explore some options that it previously couldn't, and then other TC issues is making these branches very expensive</p>",
        "id": 326119969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675689339
    },
    {
        "content": "<p><code>Order.Partition.Finpartition</code> has now been staring blankly in my face for &gt; 20 minutes.</p>",
        "id": 326121219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675689702
    },
    {
        "content": "<p>So this PR is very non-mergeable.</p>",
        "id": 326121249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675689712
    },
    {
        "content": "<p>Yuchai!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: this is too slow</span>\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: haha</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 326125053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675690785
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>git diff master... --stat\n<span class=\"go\"> Mathlib/Algebra/BigOperators/Finsupp.lean     |  2 +-</span>\n<span class=\"go\"> Mathlib/Algebra/BigOperators/Intervals.lean   |  2 ++</span>\n<span class=\"go\"> Mathlib/Algebra/DirectSum/Basic.lean          |  2 ++</span>\n<span class=\"go\"> Mathlib/Algebra/GeomSum.lean                  |  2 ++</span>\n<span class=\"go\"> Mathlib/Algebra/Module/Basic.lean             |  1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Module/LinearMap.lean         |  7 +++++++</span>\n<span class=\"go\"> Mathlib/Algebra/Module/Submodule/Basic.lean   |  2 ++</span>\n<span class=\"go\"> Mathlib/Algebra/Module/ULift.lean             |  4 ++++</span>\n<span class=\"go\"> Mathlib/Algebra/Order/Archimedean.lean        |  4 ++++</span>\n<span class=\"go\"> Mathlib/Algebra/PUnitInstances.lean           |  1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Periodic.lean                 |  4 ++++</span>\n<span class=\"go\"> Mathlib/Algebra/Quandle.lean                  |  2 ++</span>\n<span class=\"go\"> Mathlib/Algebra/Ring/Prod.lean                |  1 +</span>\n<span class=\"go\"> Mathlib/Algebra/Star/SelfAdjoint.lean         |  2 ++</span>\n<span class=\"go\"> Mathlib/Data/Fin/Basic.lean                   |  4 ++++</span>\n<span class=\"go\"> Mathlib/Data/Finsupp/Order.lean               |  2 ++</span>\n<span class=\"go\"> Mathlib/Data/Int/AbsoluteValue.lean           |  1 +</span>\n<span class=\"go\"> Mathlib/Data/Int/GCD.lean                     |  1 +</span>\n<span class=\"go\"> Mathlib/Data/Int/Parity.lean                  |  4 ++++</span>\n<span class=\"go\"> Mathlib/Data/Multiset/Basic.lean              |  1 +</span>\n<span class=\"go\"> Mathlib/Data/Nat/Bitwise.lean                 |  2 ++</span>\n<span class=\"go\"> Mathlib/Data/Nat/ModEq.lean                   |  1 +</span>\n<span class=\"go\"> Mathlib/Data/Rat/Defs.lean                    |  3 ++-</span>\n<span class=\"go\"> Mathlib/Data/Real/Basic.lean                  |  1 +</span>\n<span class=\"go\"> Mathlib/Data/Sign.lean                        |  6 ++++++</span>\n<span class=\"go\"> Mathlib/Data/UInt.lean                        |  2 ++</span>\n<span class=\"go\"> Mathlib/Data/ZMod/Defs.lean                   |  1 +</span>\n<span class=\"go\"> Mathlib/GroupTheory/GroupAction/ConjAct.lean  | 10 +++++++---</span>\n<span class=\"go\"> Mathlib/GroupTheory/Subgroup/Pointwise.lean   |  1 +</span>\n<span class=\"go\"> Mathlib/GroupTheory/Submonoid/Pointwise.lean  |  2 ++</span>\n<span class=\"go\"> Mathlib/Order/Partition/Finpartition.lean     | 16 ++++++++++------</span>\n<span class=\"go\"> Mathlib/RingTheory/Congruence.lean            |  3 +++</span>\n<span class=\"go\"> Mathlib/RingTheory/Subsemiring/Pointwise.lean |  3 ++-</span>\n<span class=\"go\"> Mathlib/Tactic/Abel.lean                      |  1 +</span>\n<span class=\"go\"> Mathlib/Tactic/Linarith/Parsing.lean          |  3 +++</span>\n<span class=\"go\"> Mathlib/Tactic/Positivity/Basic.lean          |  1 +</span>\n<span class=\"go\"> lean-toolchain                                |  2 +-</span>\n<span class=\"go\"> 37 files changed, 94 insertions(+), 13 deletions(-)</span>\n</code></pre></div>",
        "id": 326125383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675690866
    },
    {
        "content": "<p>This branch now builds.... <span aria-label=\"turtle\" class=\"emoji emoji-1f422\" role=\"img\" title=\"turtle\">:turtle:</span> <span aria-label=\"turtle\" class=\"emoji emoji-1f422\" role=\"img\" title=\"turtle\">:turtle:</span> <span aria-label=\"turtle\" class=\"emoji emoji-1f422\" role=\"img\" title=\"turtle\">:turtle:</span></p>",
        "id": 326125484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675690891
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> you might be interested in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2105\">!4#2105</a> (aka <code>bump-2023-02-06</code>). It is the mathlib fallout of the eta for structures PR.</p>",
        "id": 326127245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675691394
    },
    {
        "content": "<p>Ooh noes! CI is now complaining about a lot of linting failures because of timeouts.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4104664586/jobs/7080448378\">https://github.com/leanprover-community/mathlib4/actions/runs/4104664586/jobs/7080448378</a></p>",
        "id": 326146411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675694662
    },
    {
        "content": "<p>Do you dare try merging master into 2003 and seeing if it helps?</p>",
        "id": 326147214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675694834
    },
    {
        "content": "<p>Do you mean merging 2003 into the bump branch?</p>",
        "id": 326147357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675694874
    },
    {
        "content": "<p>I would have to figure out how to build my own Lean 4.</p>",
        "id": 326147478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675694896
    },
    {
        "content": "<p>Yeah I mean maybe 2003 helps</p>",
        "id": 326147510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675694903
    },
    {
        "content": "<p>I'm just an optimist</p>",
        "id": 326147621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675694926
    },
    {
        "content": "<p>I think there is a decent chance, because there were some failures from 2003 which might be fixed by the new patch.</p>",
        "id": 326147809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675694974
    },
    {
        "content": "<p>I'll see if I can convince my computer to build 2003 (after merging master into it) and then convince elan to use that build</p>",
        "id": 326147848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675694986
    },
    {
        "content": "<p>Merging master into <a href=\"https://github.com/leanprover/lean4/pull/2003\">leanprover/lean4#2003</a> should be done anyway, right?</p>",
        "id": 326147971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675695013
    },
    {
        "content": "<p>Oh I guess</p>",
        "id": 326148078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675695044
    },
    {
        "content": "<p>/me doesn't have a working <code>cmake</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 326150606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675695656
    },
    {
        "content": "<p>I can give it a shot.</p>",
        "id": 326151841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675695973
    },
    {
        "content": "<p><code>nix-shell -A nix</code> seems to work (-;</p>",
        "id": 326151977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675696012
    },
    {
        "content": "<p>Ok, I have a local build of (2003 + lean4 master). How should I instruct elan to use that build to build mathlib 4?</p>",
        "id": 326156127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675696948
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># set up the Lean 4 toolchain</span>\nelan toolchain link lean4-master build/release/stage1\n<span class=\"c1\"># use the toolchain as an override in the mathlib4 directory</span>\nelan override <span class=\"nb\">set</span> lean4-master\n</code></pre></div>",
        "id": 326156673,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675697091
    },
    {
        "content": "<p>aha, thanks!</p>",
        "id": 326156741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675697109
    },
    {
        "content": "<p>hmm, nix probably has different ideas about where <code>stage1</code> ends up</p>",
        "id": 326156915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675697160
    },
    {
        "content": "<p>Ah yes, sorry, I was assuming the <code>cmake</code> build.</p>",
        "id": 326159491,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675697798
    },
    {
        "content": "<p>I can't find instructions in the manual for using a Nix-based Lean 4 build to build a project. However, you might be able to get a working <code>cmake</code> via <code>nix-shell</code>.</p>",
        "id": 326160110,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675697985
    },
    {
        "content": "<p>anyway, 2003 seems to build fine after merging master. But the PR is from Gabriel's fork, so I can't update the PR anyways.</p>",
        "id": 326160420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675698065
    },
    {
        "content": "<p>And it's about time I start catching a train, so I don't think I can do a mathlib build with that local toolchain today either.</p>",
        "id": 326160555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675698092
    },
    {
        "content": "<p>There are still the same errors.</p>",
        "id": 326196490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675704172
    },
    {
        "content": "<p>I think they are likely related to <a href=\"https://github.com/leanprover-community/mathlib/pull/2055\">#2055</a></p>",
        "id": 326196692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675704241
    },
    {
        "content": "<p>hmm, actually probably not</p>",
        "id": 326199482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675704966
    },
    {
        "content": "<p>ftr <a href=\"https://github.com/leanprover/lean4/pull/2055\">leanprover/lean4#2055</a></p>",
        "id": 326201657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675705591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is there any way I can help making <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> easier to diagnose at the dev end?</p>",
        "id": 326208954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675707784
    },
    {
        "content": "<p>What's going on in Data.Rat.Defs:</p>\n<ol>\n<li>We are trying to process <code>instance isDomain : IsDomain ‚Ñö := NoZeroDivisors.to_isDomain _</code></li>\n<li>So we need <code>lemma NoZeroDivisors.to_isDomain [Ring Œ±] [h : Nontrivial Œ±] [NoZeroDivisors Œ±] : IsDomain Œ± := [...]</code></li>\n<li>So we need <code>Nontrivial ‚Ñö</code>.</li>\n<li>Now we try out <code>instance [AddMonoidWithOne Œ±] [CharZero Œ±] : Nontrivial Œ± := [...]</code>. <strong>Note</strong>: Of course ‚Ñö actually does have characteristic zero, but we don't know that at this point of Data.Rat.Defs.</li>\n<li>Next we try <code>instance (priority := 100) StrictOrderedSemiring.to_charZero [StrictOrderedSemiring Œ±] : CharZero Œ±</code>. Note however that <code>CharZero</code> has type <code>class CharZero (R) [AddMonoidWithOne R] : Prop</code>, so it has an implicit instance argument derived from the <code>StrictOrderedSemiring</code> one. At this point we also don't know anything about the compatibility of the ring structure and ordering of ‚Ñö.</li>\n<li>To apply this instance we unify <code>@CharZero ‚Ñö (AddMonoidWithOne instance for ‚Ñö) =?= @CharZero ?t (... (?i : StrictOrderedSemiring ‚Ñö))</code>. We deduce <code>?t = ‚Ñö</code> and then try to make some more reductions but eventually realize we need to synthesize <code>?i</code>.</li>\n<li>This fails quickly because we don't have this instance yet. <strong>But</strong>, that doesn't cause the defeq problem we were working on to fail.</li>\n<li>Now it spends a huge amount of time trying to solve a failing defeq problem for some reason.</li>\n</ol>",
        "id": 326209589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675707987
    },
    {
        "content": "<p>There is probably a lot of room for improvement here but I think the most unexpected thing here is in 7</p>",
        "id": 326210319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675708203
    },
    {
        "content": "<p>Is it hard to minimise 7 and 8?</p>",
        "id": 326214221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675709368
    },
    {
        "content": "<p>What instance are we expecting to find here?</p>",
        "id": 326218007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675710531
    },
    {
        "content": "<p>It never gets that far, so I don't know, but I trust that it follows from <code>CommGroupWithZero</code> somehow.</p>",
        "id": 326218814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675710791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bump.20to.202023-02-06/near/326214221\">said</a>:</p>\n<blockquote>\n<p>Is it hard to minimise 7 and 8?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A'</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">A'</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">A'.a'</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">I</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">_y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">T</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Relevant section of trace output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">I</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">I</span> <span class=\"n\">to</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">Œ±</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"kt\">Type</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">B</span> <span class=\"n\">Œ±</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">B</span> <span class=\"n\">Œ±</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance.instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A.mk</span> <span class=\"n\">Œ±</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">Œ±</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                        <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">Œ±</span>\n                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A.mk</span> <span class=\"n\">Œ±</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">A</span> <span class=\"n\">Œ±</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">Œ±</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                      <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"n\">a</span>\n                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">Œ±</span>\n                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                        <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"n\">x</span>\n                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                          <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"n\">Œ±</span>\n                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">A.a</span> <span class=\"n\">Œ±</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1.1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1.1</span>\n                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1.1</span>\n                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1.1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1.1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">A.mk</span> <span class=\"n\">Œ±</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                    <span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A'.a'</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Œ±</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.306.1</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instA</span> <span class=\"n\">Œ±</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B.toA</span> <span class=\"bp\">?</span><span class=\"n\">m.305</span> <span class=\"bp\">?</span><span class=\"n\">m.306</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 326219239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675710925
    },
    {
        "content": "<p>So this is unrelated to <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a>, right?</p>",
        "id": 326220844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675711417
    },
    {
        "content": "<p>Is it one of the other issues that Kevin has created over the past few weeks?</p>",
        "id": 326220916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675711437
    },
    {
        "content": "<p>Or is it something new altogether?</p>",
        "id": 326220996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675711448
    },
    {
        "content": "<p>I don't recognize it as an existing issue</p>",
        "id": 326223486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675712237
    },
    {
        "content": "<p>From what I can tell this is a somewhat unfortunate collaboration with the 2003 issue.</p>\n<ol>\n<li>Due to 2003, we get lots of unification problems like <code>(... : StrictOrderedRing ‚Ñö).1 =?= Ring.mk ...</code></li>\n<li>Structure eta then thinks \"maybe we can solve it by adding another projection\" and generates the new problem <code>(... : StrictOrderedRing ‚Ñö).1.toSemiring =?= ...</code></li>\n<li>Note that <code>.1</code> is a primitive projection and <code>.toRing</code> is a definition, so this cleverly disables caching.</li>\n</ol>",
        "id": 326223768,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675712322
    },
    {
        "content": "<p>Well, it probably has something similarity to 2055 because that one also involves a failing defeq test doing a lot of work.</p>",
        "id": 326224022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675712405
    },
    {
        "content": "<p>I was inspired by this conversation to try and minimise 2055 a bit more, and think I succeeded. I've also posted on github; hopefully this new version is much easier to grok. Reid can you minimise even further? I don't know how to remove <code>simp</code> but maybe you do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A2</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A1</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A3</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A2</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A4</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A3</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">B1</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">A4</span> <span class=\"n\">M</span>\n\n<span class=\"c1\">-- given `CommRing R` there are two distinct routes to `Mul R`:</span>\n<span class=\"c1\">-- CommRing -&gt; B1 -&gt; Mul</span>\n<span class=\"c1\">-- CommRing -&gt; A4 -&gt; A3 -&gt; A2 -&gt; A1 -&gt; Mul</span>\n\n<span class=\"c1\">-- random extra bad class plus simp lemma which causes all the trouble</span>\n<span class=\"kd\">class</span> <span class=\"n\">BadClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">A4</span> <span class=\"n\">M</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mul_right_eq_self</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">BadClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- use the two multiplications to say a * b = c ‚Üî a * b = c</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A1.toMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A2.toA1</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A3.toA2</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A4.toA3</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toA4</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">))))))</span>\n    <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">B1.toMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toB1</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ‚ä¢ a * b = c ‚Üî a * b = c</span>\n  <span class=\"c1\">-- exact Iff.rfl -- works</span>\n  <span class=\"n\">simp</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n\n<span class=\"cm\">[Meta.synthInstance] ‚ùå BadClass R ‚ñ∂</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">307 times</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 326226818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675713416
    },
    {
        "content": "<p>I still think it is surprising that we get to step 8 at all. It breaks the conception of the TC system as a little Prolog language. In addition to the facts that are added as instances, there's whatever facts Lean can \"deduce\" by unification.</p>",
        "id": 326227007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Are you saying that adding 2003 to the current situation is only going to make things worse <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> ?</p>",
        "id": 326227069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675713492
    },
    {
        "content": "<p>I spent a lot of time trying to game the numbers. Increasing the B string does very little. Increasing the A string does lots. The optimal (in the sense that it makes the number of failures largest) place to put the bad class is coming off the last A class. No idea if this helps.</p>",
        "id": 326227070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675713493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you try using <code>mul_right_eq_self</code> as the whole proof?</p>",
        "id": 326227140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bump.20to.202023-02-06/near/326227069\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> Are you saying that adding 2003 to the current situation is only going to make things worse <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> ?</p>\n</blockquote>\n<p>No completely the opposite.</p>",
        "id": 326227164,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675713537
    },
    {
        "content": "<p>My messages this evening are with the patch for 2003 applied on top of current master.</p>",
        "id": 326227212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713554
    },
    {
        "content": "<p>Ah, then my interpretation of your use of the word \"unfortunate\" was somewhat unfortunate.</p>",
        "id": 326227287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675713578
    },
    {
        "content": "<p>If we don't have eta for classes then the failing TC problems will fail faster. Here, that's good.</p>",
        "id": 326227465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713633
    },
    {
        "content": "<p>Or not even \"the failing TC problems\", but rather any sort of failing unification</p>",
        "id": 326227514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713659
    },
    {
        "content": "<p>Ooh, aha. So you're saying that yesterday's PR is making the 2003 situation worse?</p>",
        "id": 326227557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675713669
    },
    {
        "content": "<p>Or not even that?</p>",
        "id": 326227582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675713678
    },
    {
        "content": "<p>Yes, the two issues have great synergies.</p>",
        "id": 326227600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675713685
    },
    {
        "content": "<p>Or at least, the issue which would be fixed by 2003 makes yesterday's PR much worse.</p>",
        "id": 326227679,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675713715
    },
    {
        "content": "<p>I will test but I think the issue with Data.Rat.Defs discussed here is basically the same whether or not 2003 is included.</p>",
        "id": 326228234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713880
    },
    {
        "content": "<p>I feel like we're making progress in our understanding though, which is great.</p>",
        "id": 326228259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675713887
    },
    {
        "content": "<p>The tricky thing about these issues is that there are many opportunities to do better on each one, but also each change we could make to Lean affects many other things.</p>",
        "id": 326228415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675713935
    },
    {
        "content": "<p>Currently, in Lean 4, if you apply a lemma that has an <code>[instance]</code> argument, does Lean insist on TC synthesizing the argument, or can it solve for it by unification?</p>",
        "id": 326228936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675714093
    },
    {
        "content": "<p>I believe it insists on TC, at least based on the fact that changing <code>[Foo]</code> to <code>{_ : Foo}</code> changes whether some simp lemmas are able to be applied (TC fails but unification succeeds) (assuming no recent lean 4 PR‚Äôs have changed this, and assuming this is not actually a property of <code>simp</code>)</p>",
        "id": 326234249,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675716068
    },
    {
        "content": "<p>In that case it really doesn't make sense to me that the TC synthesis failure in step 7 doesn't end the defeq test immediately.</p>",
        "id": 326241177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675718644
    },
    {
        "content": "<p>I looked at 2055 more closely and actually it is the same as what we are seeing here.</p>",
        "id": 326385142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675782801
    },
    {
        "content": "<p>Thank you all and Johan in particular for all the effort in adapting mathlib to the change.  It was very helpful to see where things break.  I have reverted <a href=\"https://github.com/leanprover/lean4/pull/2093\">lean4#2093</a> for the moment so that we can continue to deploy other bugfixes.</p>",
        "id": 326904121,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675972344
    }
]