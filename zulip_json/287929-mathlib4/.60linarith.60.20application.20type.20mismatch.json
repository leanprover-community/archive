[
    {
        "content": "<p>Is it normal that <code>linarith</code> gives me \"application type mismatch\"?<br>\nMy previous experience is that, if <code>linarith</code> fails, the message is \"linarith failed to find a contradiction\".</p>",
        "id": 395655278,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696843448
    },
    {
        "content": "<p>Could be a bug. Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 395655342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696843471
    },
    {
        "content": "<p>No, I didn't MWE it.<br>\nHowever, if you suspect it is bug, I will.</p>",
        "id": 395655495,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696843519
    },
    {
        "content": "<p>Well,  I applied <code>linarith</code> to example that had only a partial order.<br>\nWhat should be the error message there?</p>",
        "id": 395656573,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696843824
    },
    {
        "content": "<p>I haven't found MWE for the original problem yet, but the following code might give a context here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- \"linarith failed to find a contradiction\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> tactic 'apply' failed, failed to unify</span>\n<span class=\"cm\">    ?a ≤ ?b</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    x ≤ z -/</span>\n</code></pre></div>",
        "id": 395658072,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696844341
    },
    {
        "content": "<p>That's a pretty unhelpful error message, indeed.</p>",
        "id": 395660063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696844952
    },
    {
        "content": "<p>PR welcome? :-)</p>",
        "id": 395660156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696844993
    },
    {
        "content": "<p>I think the \"application type mismatch\" was a mistake on my side (two orderings in the scope).<br>\nPlease consider only the MWE in my last comment.</p>",
        "id": 395676154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696850649
    }
]