[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4120\">!4#4120</a> there's one error left here, who can fix it?</p>",
        "id": 359753744,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684525328
    },
    {
        "content": "<p>Last line of this – simp doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">affineIsometryOfStrictConvexSpace</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PF</span> <span class=\"bp\">→</span> <span class=\"n\">PE</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Isometry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">PF</span> <span class=\"bp\">→ᵃⁱ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">PE</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">AffineMap.ofMapMidpoint</span> <span class=\"n\">f</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">eq_midpoint_of_dist_eq_half</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_left_midpoint</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_of_nonneg</span> <span class=\"n\">zero_le_two</span><span class=\"o\">,</span> <span class=\"n\">div_eq_inv_mul</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist_midpoint_right</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_of_nonneg</span> <span class=\"n\">zero_le_two</span><span class=\"o\">,</span> <span class=\"n\">div_eq_inv_mul</span><span class=\"o\">])</span>\n      <span class=\"n\">hi.continuous</span> <span class=\"k\">with</span>\n    <span class=\"n\">norm_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AffineMap.ofMapMidpoint</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359761013,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684527884
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AffineMap.ofMapMidpoint</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works (but obviously isn't mathlib-ready)</p>",
        "id": 359761959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528236
    },
    {
        "content": "<p>For some reason <code>hi.dist_eq</code> isn't triggering with <code>simp</code> but it works with <code>rw</code>. This is becoming a common occurrence.</p>",
        "id": 359762004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528260
    },
    {
        "content": "<p>We need to be collecting minimised examples...</p>",
        "id": 359765465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684529578
    },
    {
        "content": "<p>We've been having a go at understanding an example of this <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works\">here</a></p>",
        "id": 359767134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530219
    },
    {
        "content": "<p>This works, and is what I have now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">AffineMap.ofMapMidpoint</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">dist_vadd_left</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 359797234,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684548589
    },
    {
        "content": "<p>Did you see that in the other thread I noted that changing <code>Type _</code> to <code>Type u</code> made the original proof work?</p>",
        "id": 359813791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684563007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234120.20Analysis.2EConvex.2EStrictConvexSpace/near/359813791\">said</a>:</p>\n<blockquote>\n<p>Did you see that in the other thread I noted that changing <code>Type _</code> to <code>Type u</code> made the original proof work?</p>\n</blockquote>\n<p>Is this (losing universe polymorphism) preferred over <code>rw [hi.dist_eq, dist_vadd_left]</code>?</p>",
        "id": 359820945,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684566941
    },
    {
        "content": "<p>Changing _ to u isn't losing polymorphism as long as you change each _ to a different name</p>",
        "id": 359821150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684567024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234120.20Analysis.2EConvex.2EStrictConvexSpace/near/359821150\">said</a>:</p>\n<blockquote>\n<p>Changing _ to u isn't losing polymorphism as long as you change each _ to a different name</p>\n</blockquote>\n<p>Right, I've changed it to <code>Type u</code></p>",
        "id": 359822004,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684567467
    }
]