[
    {
        "content": "<p>I'm seeing the following error, but only in the ci, locally with <code>#lint</code> in the file there are 0 errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Topology.ContinuousFunction.Ideals</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">ContinuousFunction</span><span class=\"bp\">/</span><span class=\"n\">Ideals.lean</span><span class=\"o\">:</span><span class=\"mi\">203</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ContinuousMap.idealOfSet_of_ideal_eq_closure.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">LINTER</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n<span class=\"n\">simplify</span> <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">IsClosed</span> <span class=\"bp\">↑</span><span class=\"n\">I</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any ideas how to fix it? (Or before that perhaps reproduce it locally?)</p>",
        "id": 364532268,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1686224625
    },
    {
        "content": "<p>I tried to disable it, adding <code>nolint simpNF</code>, which worked in one case, but not in the other. <br>\nReally a bit strange.</p>",
        "id": 364790502,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1686303381
    },
    {
        "content": "<p>I've diagnosed the problem as being the result of the <code>simp</code> lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.closure_eq_of_isClosed#doc\">docs4#Ideal.closure_eq_of_isClosed</a>. The problem is that in this lemma <code>isClosed (I : set R)</code> is an instance argument. In doing <code>simpNF</code> linting on <code>ContinuousMap.idealOfSet_ofIdeal_eq_closure</code>, Lean applies <code>simp</code> which sees the <code>Ideal.closure I</code> and tries to apply <code>Ideal.closure_eq_of_isClosed</code>, which makes it go looking for an <code>isClosed I</code> instance. With all the hypotheses in the context of <code>ContinuousMap.idealOfSet_ofIdeal_eq_closure</code>, Lean spends too much time failing to find this instance (because it honestly can't, but it takes a long time to figure that out).</p>\n<p>I suspect that the issue is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.closure_eq_of_isClosed#doc\">docs4#Ideal.closure_eq_of_isClosed</a> should just take the <code>isClosed</code> argument explicitly instead of as an instance, and it should not be marked <code>simp</code>. I expect this would be a problem that could crop up repeatedly. Thoughts?</p>",
        "id": 365962539,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686682094
    },
    {
        "content": "<p>I think this doesn't show up with <code>#lint</code> in the file <code>Topology.ContinuousFunction.Ideals</code> by itself only because the class hierarchy isn't as large. The <code>simpNF</code> linter only needs <code>set_option synthInstance.maxHeartbeats 26000</code> in order to succeed here, so it isn't a huge timeout.</p>",
        "id": 365963388,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686682318
    },
    {
        "content": "<p>Why is <code>IsClosed</code> a typeclass in the first place ? Shouldn't we just use <code>[Fact (IsClosed s)]</code>?</p>",
        "id": 365966858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686683075
    },
    {
        "content": "<p>that looks strictly worse to me</p>",
        "id": 365967327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686683166
    },
    {
        "content": "<p>I'm not sure exactly why it was done originally, but one way it's important is that when you quotient a Banach space by a closed subspace, you want to conclude it is normed, not just seminormed. And if you want this to be an instance, you need the fact that the subspace is closed to be an instance too.</p>",
        "id": 365968854,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686683531
    },
    {
        "content": "<p>FYI: I've made the change I suggested above and marked it <code>awaiting-review</code></p>",
        "id": 365969914,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686683844
    },
    {
        "content": "<p><code>IsClosed</code> is a typeclass precisely because it is what is needed to make sure that one gets a norm on the quotient, and it's important that typeclass inference can find it. <code>fact</code> would also work, but it is just worse because there it is a completely generic instance, so it would be harder to find.</p>",
        "id": 365971596,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686684325
    }
]