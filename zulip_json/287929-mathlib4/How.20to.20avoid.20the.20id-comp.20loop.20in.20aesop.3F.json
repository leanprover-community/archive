[
    {
        "content": "<p>I am in the process of porting <code>Topology.ContinuousFunction.Basic</code>, which makes quite some use of the <code>continuity</code> tactic and if I remember correctly, we wanted to replace that by <code>aesop</code>. In <code>continuity</code> there was the issue that the naive implementation would try <code>refine continuous_id.comp _</code> forever. How does <code>aesop</code> avoids this and how do I have to tag the identity and comp lemmas?</p>",
        "id": 325777952,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675495135
    },
    {
        "content": "<p>AFAIK, we don't have the <code>continuity</code> tactic, so I'm just replacing tags with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: todo: restore @[continuity]</span>\n</code></pre></div>",
        "id": 325778459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675495569
    },
    {
        "content": "<p>Clearly, the answer to your question depends on how the <code>continuity</code> tactic will be implemented in Lean 4.</p>",
        "id": 325778503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675495612
    },
    {
        "content": "<p>Moritz, I was considering trying to port the continuity tactic earlier today, but I'm not exactly sure how to make the right kind of attribute. If you want we can try to find some time to work on it together this weekend. Just DM me if so.</p>",
        "id": 325778692,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675495784
    },
    {
        "content": "<p>Isn't the naive implementation working now that <code>function.comp</code> is semireducible?</p>",
        "id": 325780939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675497600
    },
    {
        "content": "<p>I have no idea. I am trying to get aesop to fail, but it seems to totally fine even when the <code>comp</code> and <code>id</code> lemmas have higher priority</p>",
        "id": 325781310,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675497759
    },
    {
        "content": "<p>The original implementation would literally just try to use <code>refine continuous.comp _ _</code>, so no it doesn't matter that <code>function.comp</code> is semireducible.</p>",
        "id": 325781518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675497879
    },
    {
        "content": "<p>Or hmm, I guess maybe it depends on how the details of higher-order unification work, but if it does matter, then it probably also breaks some cases in which <code>continuity</code> works in mathlib 3</p>",
        "id": 325782068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675498188
    },
    {
        "content": "<p>The one example from the comments in the Lean 3 tactic works just fine, is there a nontrivial example that has higher chance of breaking?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n<span class=\"n\">declare_aesop_rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[aesop norm apply (rule_sets [Continuous]</span><span class=\"o\">)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">continuous_id'</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_id</span>\n\n<span class=\"kd\">@[aesop safe apply (rule_sets [Continuous]</span><span class=\"o\">)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Continuous.comp'</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Continuous.comp</span> <span class=\"n\">hg</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">@[aesop unsafe 10% apply (rule_sets [Continuous]</span><span class=\"o\">)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">continuous_const'</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_const</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 325782789,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675498659
    },
    {
        "content": "<p>(attributes are stupid, I really want to see aesop fail)</p>",
        "id": 325782860,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675498690
    },
    {
        "content": "<p>Can it prove <code>Continuous (fun x =&gt; g (f x))</code> from <code>Continuous f</code>, <code>Continuous g</code>?</p>",
        "id": 325783068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675498841
    },
    {
        "content": "<p>nope, that fails</p>",
        "id": 325784237,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675499542
    },
    {
        "content": "<p>If you add this lemma as a <code>Continuous.comp''</code>, then do you end up with loops?</p>",
        "id": 325784725,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675499869
    },
    {
        "content": "<p>(I mean add as an aesop lemma alongside the ones you have already)</p>",
        "id": 325784942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675499979
    },
    {
        "content": "<p>no loops for the triple composition at least</p>",
        "id": 325787093,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675500980
    },
    {
        "content": "<p>I'm not sure about the specifics here, but conceptually, there are two ways to deal with a lemma that always applies:</p>\n<ul>\n<li>You can register it as a very low-probability unsafe rule, so Aesop will only use it as a last resort. This is generally fine if Aesop succeeds, but if Aesop can't prove the goal, it'll only fail after it has reached 200 rule applications or search depth 30. (The limits are configurable.)</li>\n<li>You can make a little special-purpose tactic that applies <code>continuous_id.comp _</code> only if the conditions from Lean 3 are met, then register that as an Aesop rule.</li>\n</ul>\n<p>I'd be very happy to help with this; replacing <code>continuity</code> and similar tactics was one of the original motivations for Aesop.</p>",
        "id": 326132073,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675692638
    },
    {
        "content": "<p>I played around with <code>aesop</code> as a replacement for <code>continuity</code> over the weekend, and in my tests it seemed to do okay. I even heinously marked all the basic things as <code>safe</code> (<code>continuous_id</code>, <code>Continuous.comp</code>, <code>continuous_const</code> and variants to get around reducibility issues) and I couldn't make it fail or loop.</p>",
        "id": 326224173,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675712457
    },
    {
        "content": "<p>I've started a PR in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2145\">!4#2145</a>, feel free change my macros if you have something more sophisticated.</p>",
        "id": 326331640,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675766989
    },
    {
        "content": "<p>I've now restored all the <code>continuity</code> attributes and the except for two cases all the <code>by continuity</code> proofs. in one case <code>continuity!</code> was used and in the other we need to change the aesop config, so that it unfolds the definition. I will not continue to work on that branch this evening, so if anyone wants to do stuff they are very welcome to do so</p>",
        "id": 326342861,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675770533
    }
]