[
    {
        "content": "<p>I tried to run <code>lake exe graph</code> and got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">UInt64.ofNatCore'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375409812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689378066
    },
    {
        "content": "<p>OS: NixOS Linux</p>",
        "id": 375409826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689378080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 375412339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689379532
    },
    {
        "content": "<p>I doubt this is due to anything specific to <code>graph</code>. Could you try minimizing <code>ImportGraph/Main.lean</code>, seeing if the error goes away as you remove dependencies?</p>",
        "id": 375413076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689379910
    },
    {
        "content": "<p>Minimized to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2023 Scott Morrison. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Scott Morrison</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Imports</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.IO.Process</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># `lake exe graph`</span>\n\n<span class=\"cm\">This is a replacement for Lean 3's `leanproject import-graph` tool.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- Write an import graph, represented as a `NameMap (Array Name)` to the \".dot\" graph format. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">asDotGraph</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NameMap</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"import_graph\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Core</span> <span class=\"n\">System</span>\n\n<span class=\"c1\">-- Next two declarations borrowed from `runLinter.lean`.</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">FilePath</span> <span class=\"n\">where</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">FilePath</span>\n  <span class=\"n\">toExpr</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">FilePath.mk</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toExpr</span> <span class=\"n\">path.1</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"compileTimeSearchPath\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">return</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">searchPathRef.get</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">IO.FS</span> <span class=\"n\">IO.Process</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- `lake exe graph` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">searchPathRef.set</span> <span class=\"n\">compileTimeSearchPath</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe</span> <span class=\"n\">withImportModules</span> <span class=\"o\">[{</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span><span class=\"o\">}]</span> <span class=\"o\">{}</span> <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1024</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"n\">asDotGraph</span> <span class=\"n\">env.importGraph</span>\n</code></pre></div>",
        "id": 375431225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689387526
    },
    {
        "content": "<p>Try setting <code>supportInterpreter := true</code> in the <code>lake_exe graph</code> section of the lakefile</p>",
        "id": 375464382,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1689405815
    },
    {
        "content": "<p>Does it switch from \"compile&amp;run\" to \"interpret\"? If yes, then this sounds like a workaround, not a solution.</p>",
        "id": 375509306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689418435
    },
    {
        "content": "<p>I mean, probably there is a bug in <code>lake</code> or <code>lean</code> behind this and while we can run small executables like <code>graph</code> in interpreted mode, the bug may appear later in a larger executable where running it in the interpreted mode will not be desirable.</p>",
        "id": 375510008,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689418596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20graph/near/375509306\">said</a>:</p>\n<blockquote>\n<p>Does it switch from \"compile&amp;run\" to \"interpret\"? If yes, then this sounds like a workaround, not a solution.</p>\n</blockquote>\n<p>It does not: <a href=\"https://github.com/leanprover/lake#binary-executables\">https://github.com/leanprover/lake#binary-executables</a></p>",
        "id": 375526294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689422205
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 375526465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689422246
    },
    {
        "content": "<p>I added <code>supportInterpreter := true</code>. Now it works better but it needs <code>olean</code>s. Is this intentional? Lake should have all the information about dependencies somewhere. Can't we just ask it?</p>",
        "id": 375583508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689436885
    },
    {
        "content": "<p>What do you mean? Anything that uses <code>withImportModules</code> or similar has to read olean files on disk. These are found via the search path, but since you are using a compile time search path it will only work if the program is run from the project root and the files are in the same place as they were at compile time</p>",
        "id": 375620638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689451628
    },
    {
        "content": "<p>I mean that <code>lake</code> somehow knows dependencies of all files before they're compiled. I wonder if we can ask it instead about this information instead of whatever API is used now.</p>",
        "id": 375625962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689454765
    },
    {
        "content": "<p>I <em>think</em> Lake doesn't have an API to build the dependency graph out of the box.</p>\n<p>One possibility, however, is doing what <code>Cache</code> does to figure out (and traverse) the dependency tree. It basically parses text files. You can look at the source code for the hashing routine.</p>",
        "id": 375626457,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689455036
    },
    {
        "content": "<p>So, <code>lake</code> parses source files, builds the dependency graph but doesn't have an API to query this information?</p>",
        "id": 375626811,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689455230
    },
    {
        "content": "<p>Yes</p>",
        "id": 375628609,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689456389
    },
    {
        "content": "<p>So, the proper fix is to add this API to <code>lake</code>?</p>",
        "id": 375628628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689456408
    },
    {
        "content": "<p>It's not needed by Lake. Lake does its job by traversing dependencies on demand, like Cache</p>",
        "id": 375628726,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689456484
    },
    {
        "content": "<p>Unless there's a design decision to refactor Lake so it precomputes the whole DAG before doing anything. Then it would make sense to add such API (since it's needed)</p>",
        "id": 375628850,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689456576
    },
    {
        "content": "<p>But it has functions like \"give me all dependencies of this file\" or \"give me all goals in this module\".</p>",
        "id": 375628861,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689456580
    },
    {
        "content": "<p>Yes</p>",
        "id": 375628876,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689456590
    },
    {
        "content": "<p>lean already has the API, <code>Lean.parseImports'</code></p>",
        "id": 375628980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689456630
    },
    {
        "content": "<p>Why doesn't <code>withImportGraph</code> use this?</p>",
        "id": 375629005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689456659
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 375629024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689456667
    },
    {
        "content": "<p>I don't see a <code>withImportGraph</code> function in mathlib4, lean4 or lake</p>",
        "id": 375629113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689456724
    },
    {
        "content": "<p>I'm sorry, it doesn't exist.</p>",
        "id": 375629224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689456806
    },
    {
        "content": "<p>I mean, why doesn't <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.importGraph#doc\">docs#Lean.Environment.importGraph</a> parse files instead of using oleans.</p>",
        "id": 375629295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689456846
    },
    {
        "content": "<p>because it's way more expensive?</p>",
        "id": 375629631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689457124
    },
    {
        "content": "<p>if you already have oleans it's probably better to use them than to parse text files</p>",
        "id": 375629680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689457160
    },
    {
        "content": "<p>I think I timed this at one point</p>",
        "id": 375629689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689457166
    },
    {
        "content": "<p>And if you don't have oleans then you don't have a guarantee that your imports exist</p>",
        "id": 375630165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689457454
    },
    {
        "content": "<p>Or that the graph they form is acyclic</p>",
        "id": 375630170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689457461
    },
    {
        "content": "<p>Thank you for the explanation.</p>",
        "id": 375631652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689458426
    },
    {
        "content": "<p>I tried <code>lake exe graph</code>. While it generates a dot file for my project dependencies (Mathlib, etc) fine, it doesn't generate entries for my project itself. How do I make it recognize the module in my project? </p>\n<p>Note that my <code>.olean</code> files are under <code>build/lib</code>. Do I need to specify this path anywhere?</p>",
        "id": 376220217,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1689653699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360581\">Sorawee Porncharoenwase</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20graph/near/376220217\">said</a>:</p>\n<blockquote>\n<p>Note that my <code>.olean</code> files are under <code>build/lib</code>. Do I need to specify this path anywhere?</p>\n</blockquote>\n<p>unlikely, most lean processing tools already know this and should be able to find the oleans without any additional hints as long as they are run using <code>lake env</code>, <code>lake exe</code>, or <code>lake run</code></p>",
        "id": 376220484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689653864
    },
    {
        "content": "<p>looking at the code it appears that if you don't specify a main module it defaults to <code>Mathlib</code></p>",
        "id": 376221093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689654237
    },
    {
        "content": "<p><code>lake exe graph --to MyProject</code> seems to work</p>",
        "id": 376221441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689654438
    },
    {
        "content": "<p>I read the the <code>--help</code> page and thought that <code>:</code> is a part of the command-line syntax, and so I wrote <code>lake exe graph --to : MyProject</code>. /facepalm</p>\n<p>Anyhow, <code>lake exe graph --to MyProject</code> doesn't work either (empty digraph), but I now know why: I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">MyProject</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`</span><span class=\"n\">MyProject</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in <code>lakefile.lean</code>, and <code>MyProject.lean</code> is essentially an empty file. If I directly specify a path to a module that has actual Lean content, it works as expected!</p>\n<p>So I guess the <code>globs</code> trick doesn't play well with <code>lake exe graph</code>, and it's better to generate a main file that imports everything instead.</p>",
        "id": 376230818,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1689659250
    },
    {
        "content": "<p>that sounds like it is working as expected</p>",
        "id": 376231103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689659311
    },
    {
        "content": "<p>if the <code>MyProject</code> module doesn't have any dependencies, then you should just get a single node</p>",
        "id": 376231166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689659338
    },
    {
        "content": "<p>Right. And thank you! Really appreciate the help.</p>",
        "id": 376231706,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1689659574
    },
    {
        "content": "<p>How is <code>lake exe graph</code> meant to work in a project depending on mathlib. I was expecting it to generate a graph of the project file, excluding mathlib, but it doesn't. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 397147116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697560934
    },
    {
        "content": "<p>Nevermind, I noticed this topic already existed and contains the answer. So let's turn this into a documentation question. How is this meant to be documented?</p>",
        "id": 397147293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697561020
    },
    {
        "content": "<p>(on the linux app when you start a topic which already exists, a right-arrow appears by the topic and if you click on it you can see previous messages sent to the topic. This is a relatively recent addition)</p>",
        "id": 397183914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697577750
    },
    {
        "content": "<p>Can we access the name of the current project?</p>",
        "id": 397205855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7738\">#7738</a></p>",
        "id": 397206242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591297
    },
    {
        "content": "<p>I don't understand the new doc, or the option name really.</p>",
        "id": 397206339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697591368
    },
    {
        "content": "<p>I would rather expect that <code>--from</code> would achieve this.</p>",
        "id": 397206380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697591395
    },
    {
        "content": "<p>I have always understood import graphs to have edges consistent with the \"upstream\" and \"downstream\" naming scheme: i.e. edges point to downstream files, from upstream files.</p>",
        "id": 397206528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591456
    },
    {
        "content": "<p>But maybe you have the opposite orientation in mind?</p>",
        "id": 397206559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591474
    },
    {
        "content": "<p>The root files of a project should appear at the top of the displayed graph, and the most complicated at the bottom, and the edges should point down the screen.</p>",
        "id": 397206605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591513
    },
    {
        "content": "<p>hence <code>--to MyProject</code></p>",
        "id": 397206666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591530
    },
    {
        "content": "<p>Ideally someone would move <code>graph</code> out of Mathlib into its own project depending only on <code>Std</code> and <code>Cli</code>, so that it is usable elsewhere.</p>",
        "id": 397206740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591583
    },
    {
        "content": "<p>In the same PR, I just added a more helpful message if <code>graphviz</code> is missing.</p>",
        "id": 397207365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697591917
    },
    {
        "content": "<p>I agree with all that, but I don't understand why <code>--to MyProject</code> removes Mathlib which is way upstream of <code>MyProject</code>.</p>",
        "id": 397210317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697593727
    },
    {
        "content": "<p>ah, this happened in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6151\">#6151</a>. Initially it was proposed as a <code>--noDeps</code> flag, but I suggested, apparently incorrectly, that it would be better as a default.</p>",
        "id": 397211265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697594315
    },
    {
        "content": "<p>Would you like me to switch that?</p>",
        "id": 397211271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697594322
    },
    {
        "content": "<p>I had assumed that Mathlib was so enormous that no one would ever want to see all of it.</p>",
        "id": 397211290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697594338
    },
    {
        "content": "<p>Oh I agree that <code>--noDeps</code> is a good default.</p>",
        "id": 397212186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697594866
    },
    {
        "content": "<p>And now I understand your sentence!</p>",
        "id": 397212259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697594893
    },
    {
        "content": "<p>Let me know if I should further change the docs!</p>",
        "id": 397212325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697594954
    },
    {
        "content": "<p>I think part of my confusion is that I'm not used to the <code>Mathlib</code> module being all of Mathlib, and same with <code>MyProject</code>.</p>",
        "id": 397212337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697594965
    },
    {
        "content": "<p>But I don't have a clearer wording.</p>",
        "id": 397212352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697594976
    },
    {
        "content": "<p>Maybe I'm simply a bit tired.</p>",
        "id": 397212367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697594986
    },
    {
        "content": "<p>Yes. I'm a bit worried that encouraging people to use globs rather than a file that imports everything is bifurcating our standard setups, and this is going to bite us down the track.</p>",
        "id": 397212431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595011
    },
    {
        "content": "<p>But I appreciate that having to maintain a file that imports everything is beyond tedious.</p>",
        "id": 397212450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595028
    },
    {
        "content": "<p>Another question: is there a way to discover the existence of this <code>graph</code> function?</p>",
        "id": 397212457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595031
    },
    {
        "content": "<p>It's not only tedious, it's also not clear at all for beginners.</p>",
        "id": 397212489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595054
    },
    {
        "content": "<p>I guess it is mentioned in the <code>lakefile.lean</code> as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"n\">graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">ImportGraph.Main</span>\n</code></pre></div>\n<p>but otherwise: no, not at all. :-)</p>",
        "id": 397212539,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595086
    },
    {
        "content": "<p>Part of the answer here is: it should be its own repo, separate from Mathlib, with a README</p>",
        "id": 397212587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595118
    },
    {
        "content": "<p>Otherwise, what should we add?</p>",
        "id": 397212635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595127
    },
    {
        "content": "<p>No <code>lake exe --list</code> or <code>lake exe --help</code>?</p>",
        "id": 397212649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595135
    },
    {
        "content": "<p>There should be a doc-string in the lakefile. (In fact, that should be a requirement!!)</p>",
        "id": 397212659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595141
    },
    {
        "content": "<p>I mean <code>lake</code> should have a command listing everything you can put after exe in the current project.</p>",
        "id": 397212684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595166
    },
    {
        "content": "<p>And maybe it has this command.</p>",
        "id": 397212695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595174
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2708\">lean4#2708</a></p>",
        "id": 397212746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, is there any way we can run the linter on the <code>lakefile.lean</code> itself? e.g. here it would be nice if I had not been allowed to add this <code>exe</code> without a doc-string.</p>",
        "id": 397212912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595323
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7738\">#7738</a> now includes doc-strings on all the <code>lean_exe</code> declarations in our lakefile</p>",
        "id": 397213239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697595520
    },
    {
        "content": "<p><code>/-- `lake exe cache` retrieves precompiled `.olean` files from a central server. -/</code> is a bit too simple.</p>",
        "id": 397213630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595777
    },
    {
        "content": "<p><code>lake exe cache</code> alone does nothing, right?</p>",
        "id": 397213658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697595794
    },
    {
        "content": "<p>Good point. It prints a help message! I will change to doc-string to include <code>get</code>, on the basis that this is 99.9% of usage.</p>",
        "id": 397214195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697596114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20graph/near/397212912\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span>, is there any way we can run the linter on the <code>lakefile.lean</code> itself? e.g. here it would be nice if I had not been allowed to add this <code>exe</code> without a doc-string.</p>\n</blockquote>\n<p>I would think you could run it on <code>lakefile.lean</code> the same way you run it on any other Lean file.  Has that not worked?</p>",
        "id": 397216962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697597973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, sorry, should have included that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">runMathlibLinter</span> <span class=\"n\">lakefile</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">lakefile'</span>\n</code></pre></div>",
        "id": 397217910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697598567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Oh, so the linter imports modules oleans rather than elaborating the lean files? In that case, it could probably read the module data of the top-level olean directly rather than importing it to support loading <code>lakefile.olean</code> (since we almost definitely do not want the lakefiles to generally be in the <code>LEAN_PATH</code>) .</p>",
        "id": 397224661,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697601729
    },
    {
        "content": "<p>Hmm, I see. Low priority, I guess. :-)</p>",
        "id": 397224815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697601795
    },
    {
        "content": "<p>Is the result of <code>lake exe graph</code> published somewhere for Mathlib? Is it expected to generate something like Dependency graph in blueprint, i.e. assigning background colors and border colors according to whether it's sorry-free or whether all its prerequisites are sorry-free?</p>\n<p><a href=\"/user_uploads/3121/4GEbojccbSMHvg67VB90GQl5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4GEbojccbSMHvg67VB90GQl5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4GEbojccbSMHvg67VB90GQl5/image.png\"></a></div>",
        "id": 397225226,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697602005
    },
    {
        "content": "<p>Oh, so far it seems to be only about modules, not declarations.</p>",
        "id": 397226041,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697602490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, there are no sorries in Mathlib! :-)</p>",
        "id": 397228316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697603746
    },
    {
        "content": "<p><code>lake exe graph</code> for all of Mathlib is already extremely large and unreadable, at the module level. I can't imagine what the 150000 declaration graph would look like ...</p>",
        "id": 397228410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697603791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20graph/near/397228316\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span>, there are no sorries in Mathlib! :-)</p>\n</blockquote>\n<p>Yes, but I thought we are also talking about formalization projects that depend on Mathlib.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20graph/near/397228410\">said</a>:</p>\n<blockquote>\n<p><code>lake exe graph</code> for all of Mathlib is already extremely large and unreadable, at the module level. I can't imagine what the 150000 declaration graph would look like ...</p>\n</blockquote>\n<p>Also inspired by this topic, no one wants a full graph, but a graph with branch pruning (only the transitively used declarations, not the unused ones imported along with them, and you can select from or to which module level that you are interested) would be quite useful, even for Mathlib.</p>",
        "id": 397233532,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697606854
    },
    {
        "content": "<p>There will be plenty of sorries in FLT corresponding to hard theorems from pre-Wiles which we will be initially ignoring</p>",
        "id": 397239791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697610362
    },
    {
        "content": "<p>I think a nice red \"we are cheating here\" would be fine</p>",
        "id": 397239885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697610397
    },
    {
        "content": "<p>Oh except I wouldn't want that to pollute \"we are currently working on this and will finish in a few months\"</p>",
        "id": 397239942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697610433
    }
]