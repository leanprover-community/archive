[
    {
        "content": "<p>I am wondering if the documented type in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Fin.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Fin.html</a> for methods ilke <code>Finset.sum_range</code> is a little too terse?  More precisely, I don't think the stated type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.sum_range</span><span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.sum</span> <span class=\"n\">Finset.univ</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span>\n</code></pre></div>\n<p>can actually be synthesized unambiguously; one needs something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.sum_range</span><span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.sum</span> <span class=\"n\">Finset.univ</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span>\n</code></pre></div>\n<p>instead.  Is this sort of terseness intentional in the Mathlib documentation?  There are several further examples of this in Fin.html alone.</p>",
        "id": 400333645,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699139530
    },
    {
        "content": "<p>This is a general issue with what's called \"pretty-printing\".</p>",
        "id": 400333675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699139590
    },
    {
        "content": "<p>Lean code is parsed using <em>elaborators</em>, which turn it into Lean <em>syntax</em>, represented as an abstract syntax tree. Tactics can do arbitrary manipulations on that AST. Then the AST is processed by <em>delaborators</em> to be pretty-printed in the infoview, or in the mathlib docs.</p>",
        "id": 400333806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699139741
    },
    {
        "content": "<p>We had really hoped to have \"round-tripping\" pretty printing in Lean 4, i.e. anything that the pretty printer produced could be parsed correctly. As Mario said recently, that feature didn't ship. :-(</p>\n<p>That said, the flexibility of the delaborator framework means we can usually make things better.</p>",
        "id": 400333884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699139792
    },
    {
        "content": "<p>Going from Lean code to Lean syntax and back to Lean code in a way that preserves the meaning is what's called <em>round-tripping</em>. One of the selling points of Lean 4 was that it would solve the round-tripping issues of Lean 3, but it hasn't so far.</p>",
        "id": 400333890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699139806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Documented.20type.20for.20Finset.2Esum_range.20etc.2E/near/400333806\">said</a>:</p>\n<blockquote>\n<p>Lean code is parsed using <em>elaborators</em>, which turn it into Lean <em>syntax</em>, represented as an abstract syntax tree. Tactics can do arbitrary manipulations on that AST. Then the AST is processed by <em>delaborators</em> to be pretty-printed in the infoview, or in the mathlib docs.</p>\n</blockquote>\n<p>I see.  I have noticed similar issues in directly using types from the infoview, mostly involving ambiguity in the <code>↑</code> operation.  OK, I can work around this (though it adds to the pile of \"minor stuff nobody tells you about that you have to figure out on your own\".)</p>",
        "id": 400333917,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699139863
    },
    {
        "content": "<p>Personally, I don't mind too much the lack of type ascription here, since one can easily reconstruct it from the lemma name. I find much more alarming the fact that the lemma doesn't get pretty-printed with <code>∑</code> notation. This is in my experience a much more annoying transformation to perform by hand (when done over many lemmas).</p>",
        "id": 400333996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699139955
    },
    {
        "content": "<p>I find it very difficult to teach the pile of minor stuff which nobody tells you about, because it's a pretty big pile. Furthermore I am a victim of the phenomenon that I know most of the stuff in the pile and am forgetting what life was like when I didn't know it, making it more difficult to actually create a list of interesting things on the pile. This is why in my undergrad class I just get people writing Lean code by themselves ASAP and discovering this stuff themselves.</p>",
        "id": 400334023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699140002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Documented.20type.20for.20Finset.2Esum_range.20etc.2E/near/400333996\">said</a>:</p>\n<blockquote>\n<p>Personally, I don't mind too much the lack of type ascription here, since one can easily reconstruct it from the lemma name. I find much more alarming the fact that the lemma doesn't get pretty-printed with <code>∑</code> notation.</p>\n</blockquote>\n<p>But maybe I care about the latter more because I know it's actionable.</p>",
        "id": 400334076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699140030
    },
    {
        "content": "<p>I actually started documenting what I could find of this pile while I learned Lean, before the \"<a href=\"https://en.wikipedia.org/wiki/Missing_stair\">missing stair</a>\" effect kicked in: <a href=\"https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=0\">https://docs.google.com/spreadsheets/d/1Gsn5al4hlpNc_xKoXdU6XGmMyLiX4q-LFesFVsMlANo/edit#gid=0</a> (in the \"troubleshooting\" tab mostly) .  Will add this one to the list now.</p>",
        "id": 400334181,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699140178
    }
]