[
    {
        "content": "<p>Could I ask someone to look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1991\">!4#1991</a>?</p>\n<p>There are a few remaining issues that all appear to be defeq issues:</p>\n<ol>\n<li><code>lookupFinsupp</code> has <code>simp_rw</code> that do nothing despite type apparently matching</li>\n<li>\n<p>In <code>lookupFinsupp_apply</code> and <code>lookupFinsupp_support</code> I replaced <code>by convert rfl</code> with a <code>simp</code> that leaves the goal state<br>\n<code>Option.getD (lookup a l) 0 = Option.getD (lookup a l) 0</code> but doesn't close</p>\n</li>\n<li>\n<p><code>singleton_lookupFinsupp</code> is timing out at <code>isDefEq</code></p>\n</li>\n</ol>",
        "id": 325252796,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675280573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> re 1: does it help if you pass more arguments to the lemmas in the <code>simp_rw</code>?<br>\nre 2: does <code>rfl</code> close the goal after <code>simp</code>? If not, what does <code>congr</code> do?</p>",
        "id": 325254093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675280974
    },
    {
        "content": "<ol start=\"2\">\n<li><code>rfl</code> does not close, but <code>congr</code> does....</li>\n</ol>",
        "id": 325254368,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281047
    },
    {
        "content": "<p>scratch that -- <code>congr</code> closes in one place, but not the other...</p>",
        "id": 325254527,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281105
    },
    {
        "content": "<p>but does it make progress?</p>",
        "id": 325254574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675281119
    },
    {
        "content": "<p>Sort of?</p>\n<p>I get to</p>\n<p><code>(fun x =&gt; decide ¬x.snd = 0) = fun x =&gt; decide ¬x.snd = 0</code> which <code>rfl</code> doesn't close, and <code>(fun a b =&gt; Classical.decEq α a b) = fun a b =&gt; inst✝¹ a b</code></p>\n<p><code>inst✝¹</code> is <code>DecidableEq α</code></p>",
        "id": 325255211,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281285
    },
    {
        "content": "<p>On the first <code>simp_rw</code> issue, I moved <code>mem_toFinset</code> to <code>@mem_toFinset _ _</code> and got a close...</p>",
        "id": 325255916,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281495
    },
    {
        "content": "<p>which seems...odd</p>",
        "id": 325256023,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281535
    },
    {
        "content": "<p>After <code>congr</code>, try <code>apply Subsingleton.elim</code></p>",
        "id": 325256421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675281651
    },
    {
        "content": "<p>Unfortunately <code>congr</code> doesn't do that on its own. In Lean 3 it did.</p>",
        "id": 325256504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675281673
    },
    {
        "content": "<p>huh, that closes <strong>one</strong> subgoal, but leaves <code>(fun x =&gt; decide ¬x.snd = 0) = fun x =&gt; decide ¬x.snd = 0</code> unclosed</p>",
        "id": 325256840,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281743
    },
    {
        "content": "<p><code>funext</code> and another <code>congr</code>?</p>",
        "id": 325257017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675281788
    },
    {
        "content": "<p>Now just the timeout....</p>",
        "id": 325257654,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675281980
    },
    {
        "content": "<p>There should be a <code>congr!</code> that does those <code>funext</code>s and <code>apply Subsingleton.elim</code>s for us.</p>",
        "id": 325257784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282036
    },
    {
        "content": "<p>Can you paste a bit of context for that timeout?</p>",
        "id": 325257909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">singleton_lookupFinsupp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lookupFinsupp</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.single</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">AList.insert_empty</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 325258711,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675282367
    },
    {
        "content": "<p>let me see if I can minimize the full context.</p>",
        "id": 325258803,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675282400
    },
    {
        "content": "<p>Hmm, now I get a <code>whnf</code> timeout rather than an <code>isDefEq</code> timeout...</p>",
        "id": 325259000,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675282468
    },
    {
        "content": "<p>Can you push? I'll try to load the PR here.</p>",
        "id": 325259070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282494
    },
    {
        "content": "<p>it's all up to date...</p>",
        "id": 325259178,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675282536
    },
    {
        "content": "<p>ok, I'll take a look</p>",
        "id": 325259559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282659
    },
    {
        "content": "<p>Here's the full context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.AList</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">AList.lookupFinsupp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">l.1.filter</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sigma.snd</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">keys.toFinset</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"n\">l.lookup</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mem_support_toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">classical</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">List.mem_toFinset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">List.mem_keys</span><span class=\"o\">,</span> <span class=\"n\">List.mem_filter</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mem_lookup_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lookup</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">singleton_lookupFinsupp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">AList.singleton</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lookupFinsupp</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.single</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">classical</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">AList.insert_empty</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 325260685,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675283024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> I pushed a fix. Here's what I did:</p>\n<ol>\n<li>replace the proof by <code>_</code>. This showed that the statement didn't give errors, so the problem was with the proof.</li>\n<li>aha, so probably <code>simp</code> is looping, or so.</li>\n<li>put the tactics on their own line</li>\n<li>what does <code>simp?</code> do? -- nothing</li>\n<li>does <code>simp only [← AList.insert_empty]</code> make progress? -- Yes!</li>\n<li>what does <code>simp?</code> do now? -- It closes the goal</li>\n<li>clean up</li>\n</ol>",
        "id": 325261195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675283183
    },
    {
        "content": "<p>Nice heuristics!</p>",
        "id": 325262086,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675283460
    }
]