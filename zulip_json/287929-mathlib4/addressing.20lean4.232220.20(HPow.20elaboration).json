[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6852\">#6852</a> is an experiment for addressing this <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> issue, in a bid to remove all these <code>local macro_rules | `($x ^ $y) =&gt; `(HPow.hPow $x $y)</code> fixes</p>\n<p>It has a modification of the core elaborator for arithmetic operations. The short of it is that in <code>x ^ y</code> it'll use <code>x</code> for its type information when computing coercions, and it won't try to force <code>y</code> to have the same type. It's also got the mirror image of this logic for <code>x • y</code>, where it'll use <code>y</code> and ignore <code>x</code>.</p>",
        "id": 388098195,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693399516
    },
    {
        "content": "<p>An example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Elaborating <code>+</code> means it looks at both sides to find a common coercion. Elaborating <code>r • n</code> means it looks only at <code>n</code> to find a common coercion. So we have <code>m : M</code> and <code>n : N</code>, and these both coerce to <code>M</code>. Hence, this elaborates as <code>m + r • ↑n : M</code>. Before, it would have elaborated as <code>m + ↑(r • n) : M</code> since <code>SMul</code> didn't participate in the protocol.</p>",
        "id": 388098207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693399523
    },
    {
        "content": "<p>It'd be nice to get some eyes on the changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6852\">#6852</a> to see if these are acceptable modifications. I generally referred back to mathlib3 to make sure the coercions ended up in the right places. I didn't remove all the <code>local macro_rules</code>, but I tried to do enough to understand the impact of the changes to the elaborator.</p>\n<p>If we like how it looks, then I could start working on contributing the elaborator changes back to Lean 4.</p>",
        "id": 388098946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693399715
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/syntax.20for.20powers.3F\">#mathlib4 &gt; syntax for powers?</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 388099837,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693399933
    },
    {
        "content": "<p>This is very nice! The logic is probably also useful for the less commonly used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=VAdd#doc\">docs#VAdd</a> / <code>+ᵥ</code>.</p>",
        "id": 388155123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1693413709
    },
    {
        "content": "<p>In case you don't follow the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream (<a href=\"#narrow/stream/270676-lean4/topic/RFC.20for.20fixing.20lean4.232220/near/401254024\">link</a>), there is now an RFC <a href=\"https://github.com/leanprover/lean4/pull/2854\">lean4#2854</a> and a PR <a href=\"https://github.com/leanprover/lean4/pull/2778\">lean4#2778</a> for fixing this <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> issue. There's a mathlib PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8284\">#8284</a> that removes all these <code>local macro_rules | `($x ^ $y) =&gt; `(HPow.hPow $x $y)</code> and adjusts things to elaborate correctly.</p>",
        "id": 401255429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699574042
    },
    {
        "content": "<p>Something I have done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8284\">#8284</a> is also change <code>HSMul</code> to use the new <code>leftact%</code> elaborator, which makes it participate in the algorithm that figures out where all the coercions go.</p>\n<p>This is technically a new feature, and I don't want to push it through as if it's just part of a big bundle of fixes. I personally think it's nice and it integrates smul into how other operators elaborate, but if we think it's not ready for mathlib this can be split into a separate PR. (There's still time to review this change to smul within this PR though, as <a href=\"https://github.com/leanprover-community/lean/pull/2854\">lean#2854</a> hasn't been accepted yet. Pinging <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> whom I remember having mentioned HSMul problems in the past.)</p>\n<p>Some fixes I inserted switch a coercion arrow to <code>(... :)</code> notation to avoid some timeouts. I'm not sure yet, but I <em>think</em> it's related to issue <a href=\"https://github.com/leanprover/lean4/pull/2831\">lean4#2831</a>. It shouldn't be an issue with using <code>leftact%</code> per se.</p>",
        "id": 401258476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699575650
    },
    {
        "content": "<p>What's the situation here? I've just tried updating LeanAPAP and <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/LeanAPAP/Prereqs/LpNorm.lean\"><code>Prereqs.LpNorm</code></a> completely broke.</p>",
        "id": 405673760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701616509
    },
    {
        "content": "<p>Every time there is a real ^ real expression, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405673785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701616542
    },
    {
        "content": "<p>Nevermind! I see the fix that made it to core was badly interfering with the temporary fix that Kyle gave me several months ago! Deleting the latter makes everything work <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 405675955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701618424
    }
]