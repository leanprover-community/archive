[
    {
        "content": "<p>I would like to complete </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Tropical.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TropicallyBoundPolynomials</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Tropical</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">//</span> <span class=\"n\">p.1.natDegree</span> <span class=\"bp\">≤</span> <span class=\"n\">p.2.untrop</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">TropicallyBoundPolynomials</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there some way I can do this just by proving that the subtype is closed under <code>0</code>, <code>+</code> and <code>*</code>?</p>",
        "id": 399796556,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698869489
    },
    {
        "content": "<p>Construct a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsemiring#doc\">docs#Subsemiring</a> with the set<br>\n<code>{ p : (Polynomial R × Tropical (OrderDual ℕ)) | p.1.natDegree ≤ p.2.untrop }</code><br>\nas the carrier, and it automatically gets a Semiring instance.</p>",
        "id": 399798166,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698870229
    },
    {
        "content": "<p>Hmm, unfortunately this turned out not to be a <code>Semiring</code> like I thought. Is there something similar for <code>Distrib</code>?</p>",
        "id": 399802587,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698872397
    },
    {
        "content": "<p>I'm afraid mathlib doesn't have subdistribs. But distrib is a Prop-valued class so what even would that mean?</p>",
        "id": 399908734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698923016
    },
    {
        "content": "<blockquote>\n<p>But distrib is a Prop-valued class</p>\n</blockquote>\n<p>No it isn't: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Distrib#doc\">docs#Distrib</a></p>",
        "id": 399909315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698923164
    }
]