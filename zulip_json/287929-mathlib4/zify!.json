[
    {
        "content": "<p>The current <code>zify</code> tactic is nice, but it is not good enough, as illustrated from the following code extracted from Terence Tao's work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">f₁</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"n\">f₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>where the full proof should be <code>zify! ; linarith</code>. The algorithm to write the above proof is pretty simple: look for every <code>Nat</code> subtraction <code>a - b</code> in the target expressions (here the goal and all assumptions), create a list of goal <code>a \\le b</code>, putting the most deeply nested subtractions first. Try to prove these goals using <code>zify [every nat le around] ; linarith</code> (we could allow other dischargers instead of <code>linarith</code>). Discard those new goals that couldn't be proved, run the original <code>zify</code> call with all successfully proven inequalities (on top of any existing proof terms). Does anyone feels like implementing this?</p>",
        "id": 398966255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698439611
    }
]