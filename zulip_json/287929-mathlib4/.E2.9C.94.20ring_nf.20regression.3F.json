[
    {
        "content": "<p>When I was working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5203\">!4#5203</a>, I noticed that <code>ring_nf</code> reduced the goal to <code>True</code>. Here's my attempt at a smaller example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- reduced to `True`</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>In Lean 3, <code>ring_nf</code> is enough to finish both examples, and didn't encounter the <code>True</code> problem.<br>\nIs this a regression in <code>ring_nf</code>, and is this worth fixing?</p>",
        "id": 367477101,
        "sender_full_name": "Jason Yuen",
        "timestamp": 1687134849
    },
    {
        "content": "<p>Does <code>ring</code> work?</p>",
        "id": 367485439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687139060
    },
    {
        "content": "<p>I would not expect it to, the goal is not an equality</p>",
        "id": 367499403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687148037
    },
    {
        "content": "<p>It looks like the result is not actually <code>True</code> but rather <code>[mdata noImplicitLambda True]</code>, which is why the <code>True</code>-checker fails</p>",
        "id": 367499687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687148201
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5246\">!4#5246</a></p>",
        "id": 367500096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687148483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255580\">Jason Yuen</span> has marked this topic as resolved.</p>",
        "id": 367515437,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687154842
    }
]