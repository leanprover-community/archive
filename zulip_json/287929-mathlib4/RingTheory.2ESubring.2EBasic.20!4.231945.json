[
    {
        "content": "<p>This is a massive red carpet. I guess not so surprising, since there is <code>Basic</code> in the filename.</p>",
        "id": 325236839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675276183
    },
    {
        "content": "<p>It starts with all sorts of TC timeouts.</p>",
        "id": 325236866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675276194
    },
    {
        "content": "<p>First timeout is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">509188</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">ðŸ’¥</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">âˆˆ</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">â‰Ÿ</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">âˆˆ</span> <span class=\"bp\">?</span><span class=\"n\">m.11435</span> <span class=\"o\">}</span> <span class=\"bp\">â–¼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000336</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">âœ…</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span> <span class=\"bp\">â–¶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000433</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">âœ…</span> <span class=\"n\">SubsemiringClass</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">â–¶</span>\n</code></pre></div>\n<p>and this is hard to diagnose because this says \"I'm taking 5 seconds to do something, but all I'm going to tell you about what I did was two things which happened super-quickly</p>",
        "id": 325254158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675280994
    },
    {
        "content": "<p>If you turn on <code>set_option trace.Meta.isDefEq true</code> you will see what's going on.</p>",
        "id": 325256986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675281780
    },
    {
        "content": "<p>Wow this is a ride.  In order to check that <code>*</code> is <code>*</code>, we check that the two semirings are the same.  In order to do that, we check that the types of the distributivity axioms match (!!).  In order to check the distributivity axioms, we check that <code>+</code> is <code>+</code> (presumably also <code>*</code> but we never get there).  In order to check <code>+</code>, we check that the two additive monoids are the same.  And in order to check the additive monoids, ... I think you get the idea.</p>",
        "id": 325259106,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675282508
    },
    {
        "content": "<p>Related: <a href=\"#narrow/stream/341532-lean4-dev/topic/isDefEq.20on.20structures/near/324548803\">https://leanprover.zulipchat.com/#narrow/stream/341532-lean4-dev/topic/isDefEq.20on.20structures/near/324548803</a></p>",
        "id": 325259225,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675282555
    },
    {
        "content": "<p>Surely <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a> will solve that?</p>",
        "id": 325259589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675282672
    },
    {
        "content": "<p>In cases like this, is it possible for Lean to detect that it only needs to check that the data fields are defeq?</p>",
        "id": 325259775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282729
    },
    {
        "content": "<p>That's not what 2003 does, right? I thought it fixed a different issue.</p>",
        "id": 325259841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675282751
    },
    {
        "content": "<p>no, that's reid's proposal in the related thread</p>",
        "id": 325259886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675282770
    },
    {
        "content": "<p>2003 fixes the \"In order to check that <code>*</code> is <code>*</code>, we check that the two semirings are the same.\" part</p>",
        "id": 325259947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675282795
    },
    {
        "content": "<p>Per the <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a> meme, does it also fix the issue described <a href=\"#narrow/stream/270676-lean4/topic/.5BtryResolve.5D.20fails.20on.20defeq.20instances\">here</a>? I assume not because I think that's about unification.</p>",
        "id": 325265769,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675284886
    },
    {
        "content": "<p>That issue is now <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> BTW.</p>",
        "id": 325269011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675286142
    },
    {
        "content": "<p>This PR is now moving again!</p>",
        "id": 327229764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676113939
    },
    {
        "content": "<p>I need to do something else for a bit. But the amount of red errors left is now really small</p>",
        "id": 327229806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676113965
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/subring/basic\">port-status#ring_theory/subring/basic</a> says the PR is already out of sync; can we pull in the latest mathport?</p>",
        "id": 327231485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676114699
    },
    {
        "content": "<p>I think the change in question was a backport specifically to fix this file, so it might be as simple as updating the SHA</p>",
        "id": 327231544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676114726
    },
    {
        "content": "<p>1 error left, which is quite mysterious to me</p>",
        "id": 327258152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676124786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Lean can find this instance already</span>\n<span class=\"sd\">/-- The action by a subring is the action by the underlying ring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">S</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">SMulWithZero</span> <span class=\"n\">S.toSubsemiring</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- Porting note: Lean can *not* find this instance already</span>\n<span class=\"sd\">/-- The action by a subring is the action by the underlying ring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">S</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subsemiring.mulActionWithZero</span> <span class=\"n\">S.toSubsemiring</span> <span class=\"c1\">-- works</span>\n  <span class=\"c1\">-- inferInstanceAs (MulActionWithZero S.toSubsemiring Î±) -- Porting note: does not work</span>\n\n<span class=\"c1\">-- Porting note: Lean can *not* find this instance already</span>\n<span class=\"sd\">/-- The action by a subring is the action by the underlying ring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Module</span> <span class=\"n\">S.toSubsemiring</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: does not work</span>\n</code></pre></div>",
        "id": 327258243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676124843
    },
    {
        "content": "<p>Incoming hack</p>",
        "id": 327261226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676126081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The action by a subring is the action by the underlying ring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- inferInstanceAs (Module S.toSubsemiring Î±) -- Porting note: does not work</span>\n  <span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n      <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span>\n    <span class=\"n\">infer_instance</span>\n  <span class=\"n\">aux</span> <span class=\"n\">S.toSubsemiring</span>\n</code></pre></div>",
        "id": 327261230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676126085
    },
    {
        "content": "<p>This works <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 327261249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676126093
    },
    {
        "content": "<p>The file is error free, the linter seems happy</p>",
        "id": 327261278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676126106
    },
    {
        "content": "<p>It seems that <code>let</code> can help with a lot of the silly unification issues that pop up in lean4 which did not happen in lean3</p>",
        "id": 327261502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676126197
    },
    {
        "content": "<p>Looking at the trace for the first failure, Lean wants to use <code>Subsemiring.mulActionWithZero</code> but it can't solve <code>x âˆˆ S =?= x âˆˆ ?m.260191</code> because <code>?m.260191 : Subsemiring ?m.260186</code> and <code>S : Subring R</code>. I would go on a minimisation binge but I need to get a bunch of marking done urgently.</p>",
        "id": 327269682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676129436
    },
    {
        "content": "<p>I think naming the instance directly like you do in your first code block is better than the <code>aux</code> hack</p>",
        "id": 327270094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676129596
    },
    {
        "content": "<p>The <code>aux</code> hack is localised</p>",
        "id": 327270660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676129828
    },
    {
        "content": "<p>My impression was that naming instances is considered evil.</p>",
        "id": 327270703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676129850
    },
    {
        "content": "<p>Isn't adding extra terms to unfold in an instance more evil?</p>",
        "id": 327270733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676129865
    },
    {
        "content": "<p>It certainly was considered so in lean 3</p>",
        "id": 327270872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676129911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingTheory.2ESubring.2EBasic.20!4.231945/near/327270094\">said</a>:</p>\n<blockquote>\n<p>I think naming the instance directly like you do in your first code block is better than the <code>aux</code> hack</p>\n</blockquote>\n<p>Done</p>",
        "id": 327272944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676130705
    },
    {
        "content": "<p>A related problem is that a lot of our docstrings say <code>Foo.semiring</code> is a main result; if we don't name our instances they're hard to link from docstrings</p>",
        "id": 327274737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676131380
    },
    {
        "content": "<p>We could mention <code>Semiring Foo</code> as the main result. But it wouldn't result in a hyperlink in the docs.</p>",
        "id": 327274816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676131428
    },
    {
        "content": "<p>Naming instances was considered evil in Lean 3 because the automatic naming algorithm was usually doing a better job at it than us. I'm not sure we can pretend the same about the Lean 4 one <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 327275087,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1676131534
    },
    {
        "content": "<p>The hyperlink is often pretty valuable given the instance usually holds under assumptions not mentioned in the module docstring.</p>",
        "id": 327279130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676133453
    }
]