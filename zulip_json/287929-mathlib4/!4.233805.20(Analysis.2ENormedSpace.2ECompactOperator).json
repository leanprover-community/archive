[
    {
        "content": "<p>I had a stab at porting <code>Analysis.NormedSpace.CompactOperator</code>, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/3805\">!4#3805</a>. I fixed all the failures in the auto-port except one, which I can't solve. The error message is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ContinuousLinearMap</span> <span class=\"n\">σ₁₂</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">σ₁₂</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"bp\">𝕜₁</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.358606</span> <span class=\"bp\">?</span><span class=\"n\">u.358609</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"bp\">𝕜₁</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.358606</span> <span class=\"bp\">?</span><span class=\"n\">u.358609</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This looks like the sort of thing that <code>etaExperiment</code> usually fixes, but enabling it for this theorem brings up a different error which I don't pretend to understand. Can anyone help me finish this off?</p>",
        "id": 356097771,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683300916
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Ring.toNonAssocRing</span>\n</code></pre></div>\n<p>might fix this</p>",
        "id": 356098642,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683301100
    },
    {
        "content": "<p>It doesn't see</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233805.20.28Analysis.2ENormedSpace.2ECompactOperator.29/near/356098642\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Ring.toNonAssocRing</span>\n</code></pre></div>\n<p>might fix this</p>\n</blockquote>\n<p>It doesn't, sadly (either with or without <code>etaExperiment</code> as well) -- it just gives a different error message. But Kevin has pointed out on the PR that <a href=\"https://github.com/leanprover-community/mathlib4/pull/3809\">!4#3809</a> might solve the problem (edit: typo)</p>",
        "id": 356099866,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683301362
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 356099921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683301375
    },
    {
        "content": "<p>What's the \"different error\"?</p>",
        "id": 356100068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683301412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233805.20.28Analysis.2ENormedSpace.2ECompactOperator.29/near/356100068\">said</a>:</p>\n<blockquote>\n<p>What's the \"different error\"?</p>\n</blockquote>\n<p><code>failed to synthesize instance  TopologicalSpace (M₁ →SL[σ₁₂] M₂)</code></p>",
        "id": 356100291,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683301454
    },
    {
        "content": "<p>That sounds like the thing to try to fix</p>",
        "id": 356100405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683301476
    },
    {
        "content": "<p>See if you can synthesize it manually with <code>#synth</code></p>",
        "id": 356100529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683301500
    },
    {
        "content": "<p>(The declaration that causes the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">compactOperator_topologicalClosure</span> <span class=\"o\">{</span><span class=\"bp\">𝕜₁</span> <span class=\"bp\">𝕜₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜₁</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜₁</span> <span class=\"bp\">→+*</span> <span class=\"bp\">𝕜₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">M₁</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">𝕜₁</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformAddGroup</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">ContinuousConstSMul</span> <span class=\"bp\">𝕜₂</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"bp\">𝕜₂</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">compactOperator</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">topologicalClosure</span> <span class=\"bp\">=</span> <span class=\"n\">compactOperator</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SetLike.ext'</span> <span class=\"n\">isClosed_setOf_isCompactOperator.closure_eq</span>\n</code></pre></div>\n<p>)</p>",
        "id": 356100558,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683301506
    },
    {
        "content": "<p>Setting <code>etaExperiment true</code> gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.371016</span> <span class=\"bp\">?</span><span class=\"n\">u.371017</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">u_3</span> <span class=\"n\">u_4</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>which can perhaps be fixed with the new TypeMax hack</p>",
        "id": 356101198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683301650
    },
    {
        "content": "<p>I would guess setting explicit universes solves the problem</p>",
        "id": 356105626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683302645
    },
    {
        "content": "<p>That is, using <code>{A : Type u} {B : Type v}</code> instead of <code>{A B : Type _}</code></p>",
        "id": 356105904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683302712
    },
    {
        "content": "<p>I've made some experiments to see if one could solve some needs for eta in linear algebra by tweaking priorities. The outcome is is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3809\">!4#3809</a>, and it seems pretty good.</p>",
        "id": 356113095,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683304508
    },
    {
        "content": "<p>Here is what I did there. In linear algebra, you have modules (the definition of modules depends on a <code>Semiring R</code>) and semilinear maps, based on some map of kind <code>-&gt;+*</code> (where the definition of these maps depends on a <code>NonAssocSemiring R</code>). The main issue comes from the fact that, when you have <code>Ring R</code>, then the path found by instance search to <code>NonAssocSemiRing R</code> goes currently through <code>NonAssocRing R</code> instead of going through <code>Semiring R</code> (and the diamond does not seem to be defeq without eta, for reasons I don't really understand). What I've done in the PR is tweak the priorities so that the path found by instance search now goes through <code>Semiring R</code>. And apparently this solves a lot of issues with linear algebra (including the <a href=\"https://github.com/leanprover-community/mathlib4/pull/3805\">!4#3805</a> one).</p>",
        "id": 356114435,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683304846
    },
    {
        "content": "<p>Of course, it doesn't \"solve\" everything (because it's impossible to solve everything without eta or flat structures). But even if we eventually make eta perform better, my guess is that it would still be a good move to do, to make sure that most of the time Lean follows the same path in instances and so everything becomes trivially defeq.</p>",
        "id": 356115013,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683304987
    },
    {
        "content": "<p>(And I have to use a roundabout trick to change the priorities, because right now one can not change these priorities because of <a href=\"https://github.com/leanprover/lean4/pull/2115\">lean4#2115</a> -- instead, I changed the order of declarations, as the last declared one is tried first).</p>",
        "id": 356115474,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683305079
    },
    {
        "content": "<blockquote>\n<p>And apparently this solves a lot of issues with linear algebra (including the <a href=\"https://github.com/leanprover-community/mathlib4/pull/3805\">!4#3805</a> one).</p>\n</blockquote>\n<p>Indeed. Not only does this fix the one problem I couldn't solve in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3805\">!4#3805</a>, it also allows me to remove the 17 instances of <code>etaExperiment</code> I needed to add to get the rest of the file to compile.</p>",
        "id": 356116145,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683305231
    },
    {
        "content": "<p>You shouldn't feel particularly guilty about adding those</p>",
        "id": 356116757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683305396
    },
    {
        "content": "<p>I wasn't losing sleep over it, but it is nice to remove them since it gives a noticeable speedup</p>",
        "id": 356116987,
        "sender_full_name": "David Loeffler",
        "timestamp": 1683305455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233805.20.28Analysis.2ENormedSpace.2ECompactOperator.29/near/356115474\">said</a>:</p>\n<blockquote>\n<p>(And I have to use a roundabout trick to change the priorities, because right now one can not change these priorities because of <a href=\"https://github.com/leanprover/lean4/pull/2115\">lean4#2115</a> -- instead, I changed the order of declarations, as the last declared one is tried first).</p>\n</blockquote>\n<p>Let's make sure to add a porting note about that</p>",
        "id": 356117324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683305541
    },
    {
        "content": "<p>Though we could even try backporting and see if it helps lean3</p>",
        "id": 356117374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683305556
    },
    {
        "content": "<p>Thanks a lot Sebastien! I had a try at doing something similar but I couln't make it work. This should help to unstuck <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> too.</p>",
        "id": 356129055,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683308637
    },
    {
        "content": "<p>I should mention I started from the minimized file you provided some days ago: without it, I would never have understood what was going on.</p>",
        "id": 356130993,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683309154
    },
    {
        "content": "<p>Is that aimed at Anatole or me?</p>",
        "id": 356132229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683309518
    },
    {
        "content": "<p>It was aimed at <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> . I was thinking of <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20observations.20on.20eta.20experiment/near/354981202\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Some.20observations.20on.20eta.20experiment/near/354981202</a></p>",
        "id": 356134567,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683310179
    }
]