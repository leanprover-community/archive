[
    {
        "content": "<p>The file <code>probability.independence.basic</code> has several definitions  or lemmas containing <code>Indep</code>, eg. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.Indep\">docs#probability_theory.Indep</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.Indep.Indep_sets\">docs#probability_theory.Indep.Indep_sets</a>. To deal with those, Mathport has been adding <code>Cat</code> at the end of the names but that is obviously wrong. So what would be the right naming scheme here?</p>",
        "id": 362823239,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685638793
    },
    {
        "content": "<p>I think the naming scheme for the various flavours of Union should work.</p>",
        "id": 362823677,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685638876
    },
    {
        "content": "<p>To come up with the names Indep/indep, I copied Union/union for sets. So whatever is used for those.</p>",
        "id": 362823730,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1685638890
    },
    {
        "content": "<p>So that would give <code>iIndep</code> to replace <code>Indep</code> then</p>",
        "id": 362825108,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685639178
    },
    {
        "content": "<p>In the same file, the following lemma </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[symm]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">IndepFun.symm</span> <span class=\"o\">{</span><span class=\"n\">mβ</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">IndepFun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IndepFun</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">hfg.symm</span>\n</code></pre></div>\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">ProbabilityTheory.IndepFun.symm</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">ProbabilityTheory.IndepFun.symm'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">take</span> <span class=\"n\">any</span> <span class=\"o\">(</span><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">fixed</span><span class=\"o\">)</span> <span class=\"n\">arguments</span>\n</code></pre></div>\n<p>In Mathlib3, it was stated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[symm]</span> <span class=\"kd\">lemma</span> <span class=\"n\">indep_fun.symm</span> <span class=\"o\">{</span><span class=\"n\">mβ</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">indep_fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">indep_fun</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"n\">hfg.symm</span>\n</code></pre></div>\n<p>so essentially the same...</p>",
        "id": 363043363,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685711156
    },
    {
        "content": "<p>you want to add <code>nonrec</code> in front of you theorem</p>",
        "id": 363045453,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685711525
    },
    {
        "content": "<p>Lean 4 tries to apply <code>IndepFun.symm</code> for <code>hfg.symm</code>, whereas Lean 3 used something else</p>",
        "id": 363045666,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685711574
    }
]