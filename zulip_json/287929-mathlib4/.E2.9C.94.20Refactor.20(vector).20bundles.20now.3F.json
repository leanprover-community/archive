[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4514\">#4514</a>, the fact that the fibers are not <strong>reducibly</strong> equal to <code>E x -&gt;L[K] F x</code> causes lots of problems.</p>",
        "id": 370600526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687996861
    },
    {
        "content": "<p>Currently we use a type tag to attach information about model fiber spaces so that we have access to <code>FiberBundle</code> instances, thus can use trivializations to define topology on the total space.</p>",
        "id": 370600669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687996926
    },
    {
        "content": "<p>I suggest that we move the type tag from the fibers to the <code>TotalSpace</code> and do it in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle.TotalSpace#doc\">docs#Bundle.TotalSpace</a>.</p>",
        "id": 370600846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687997029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 370600863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687997042
    },
    {
        "content": "<p>If you agree, then I'll do the refactor in <code>mathlib3</code> tomorrow, then we'll merge it and forward-port to <code>mathlib4</code>.</p>",
        "id": 370600941,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687997069
    },
    {
        "content": "<p>I find it a little hard to predict whether this will work.  If you have done the typeclass inference in your head and you believe it, I'm sure you're right :). Anyway, if it works I have no objection.</p>",
        "id": 370601174,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687997195
    },
    {
        "content": "<p>I'll try it tomorrow.</p>",
        "id": 370602002,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687997647
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19221\">!3#19221</a></p>",
        "id": 370969369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688091131
    },
    {
        "content": "<p>The default linkifier already switched to mathlib 4, so perhaps you forgot the prefix?</p>",
        "id": 371025752,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1688109176
    },
    {
        "content": "<p>The dependency is merged and CI is green.</p>",
        "id": 371260725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688148532
    },
    {
        "content": "<p>It would be nice to have <a href=\"https://github.com/leanprover-community/mathlib/pull/19221\">!3#19221</a> reviewed today so that we have less \"type synonyms vs <code>simp</code>\" issues in the remaining files about vector bundles.</p>",
        "id": 371260977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688148588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/19221#issuecomment-1615768793\">says on Github</a>:</p>\n<blockquote>\n<p>Can you explain with more details why you needed to add the model fiber as an unused parameter to total_space? I.e., what goes wrong if you don't put it there?</p>\n</blockquote>\n<p>As far as I understand, we can't (at least, don't know how to) introduce topology on the total space of the <code>Hom</code> bundle without access to trivializations of the original vector bundles and we can't access trivializations unless we know the model fiber. The current solution puts a tag on the fibers but it doesn't work well in Lean 4.</p>",
        "id": 371478254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217054
    },
    {
        "content": "<p>IIRC, indeed what we used to do is make sure that when we define the <code>Hom</code> bundle, the fibers take as an unused parameter the original model fiber. Can you explain what makes this approach unsuitable in mathlib 4?</p>",
        "id": 371479381,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688217303
    },
    {
        "content": "<p>In Lean 4, <code>simp</code> can't see through semireducible type tags.</p>",
        "id": 371479778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217392
    },
    {
        "content": "<p>Because of the discrimination trees.</p>",
        "id": 371479807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217402
    },
    {
        "content": "<p>E.g., it can't apply <code>ContinuousLinearMap.comp_apply</code> to composition of a <code>ContinuousLinearMap</code> and a <code>Bundle.ContinuousLinearMap</code>.</p>",
        "id": 371479984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217441
    },
    {
        "content": "<p>So, I suggest that we move the tag to the total space.</p>",
        "id": 371480033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217456
    },
    {
        "content": "<p>This fact about <code>simp</code> causes a lot of troubles with <code>ModelProd</code> too.</p>",
        "id": 371480498,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217553
    },
    {
        "content": "<p>E.g., it fails to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalEquiv.prod_symm#doc\">docs#LocalEquiv.prod_symm</a> on a local equivalence between <code>ModelProd X Y</code> and <code>Prod X Y</code>.</p>",
        "id": 371480767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688217608
    },
    {
        "content": "<p>Isn't it something that we should try to fix on <code>simp</code>? Or is the idea that we have some workarounds now, and we remove the hacks later on?</p>",
        "id": 371487293,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688219089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Refactor.20.28vector.29.20bundles.20now.3F/near/371479778\">said</a>:</p>\n<blockquote>\n<p>In Lean 4, <code>simp</code> can't see through semireducible type tags.<br>\nBecause of the discrimination trees.</p>\n</blockquote>\n<p>Is it for instance impossible to let <code>simp</code> reduce the types which are semireducible before checking in the discrimination tree?</p>",
        "id": 371490768,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688219889
    },
    {
        "content": "<ol>\n<li>\n<p>We should fix it somehow in <code>simp</code>. One of the suggested approaches was to create a new reducibility setting which will be reducible to <code>rw</code> and <code>simp</code> but not for class instances. However, this creates new questions: what if simplifying using <code>comp_apply</code> replaces a <code>Bundle.ContinuousLinearMap</code> with a <code>ContinuousLinearMap</code>, then Lean picks up an instance based on the new type?</p>\n</li>\n<li>\n<p>I'm not sure that this refactor is necessarily a workaround. We explicitly tell Lean that in our constructions the fibers only depend on fibers but instances on the total space can depend on the model space.</p>\n</li>\n</ol>",
        "id": 371493873,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688220597
    },
    {
        "content": "<p>Ping here.</p>",
        "id": 371569858,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688243996
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5720\">#5720</a></p>",
        "id": 372460032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688531154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> has marked this topic as resolved.</p>",
        "id": 372932723,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688656068
    }
]