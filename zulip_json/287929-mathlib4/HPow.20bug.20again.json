[
    {
        "content": "<p>Firstly, my lean version is <code>Lean (version 4.3.0-rc2, commit 8e5cf6466061, Release)</code> and Mathlib is on commit <code>0f76a69bf023c58dfd2201fcd61d48a4e6d32452</code> (HEAD of <code>origin/staging</code>, apparently).</p>\n<p>I think the following behaviour should've been fixed by <a href=\"https://github.com/leanprover/lean4/issues/2220\">lean4/2220</a> here, but it seems not. I don't know how to minimise it to not use Mathlib, so I am reporting here instead of #lean4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"c\">/-</span><span class=\"cm\"> import Mathlib.Data.Matrix.Basic -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">M</span>                          <span class=\"c1\">-- works</span>\n<span class=\"k\">#eval</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>                      <span class=\"c1\">-- works</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>                <span class=\"c1\">-- fails</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>          <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>                <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 403122677,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700470492
    },
    {
        "content": "<p><code>(M ^ 2 :) 0 0</code> is the shortest workaround here</p>",
        "id": 403128241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700472541
    }
]