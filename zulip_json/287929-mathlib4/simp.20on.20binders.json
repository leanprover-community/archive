[
    {
        "content": "<p>This works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.simp_rw</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- goal is ∀ (h_1 : B), f _ = 0</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the <code>simp only</code> does nothing in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- goal is unchanged</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Are we missing a <code>congr</code> lemma?</p>",
        "id": 339224450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677799604
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_congr'#doc\">docs4#forall_prop_congr'</a> is not tagged <code>congr</code>, because of an error</p>",
        "id": 339224627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677799703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ERat.2EDefs/near/315862217\">said</a>:</p>\n<blockquote>\n<p>and would you look at that:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: `@[congr]` commented out for now.</span>\n<span class=\"c1\">-- @[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">forall_prop_congr</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 339224847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677799817
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1926\">lean4#1926</a></p>",
        "id": 339225131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677799982
    },
    {
        "content": "<p>This works in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- goal is now `∀ (a : α) (hp : Q a),`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but fails in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(relates to <a href=\"https://github.com/leanprover-community/mathlib4/pull/5349\">!4#5349</a>)</p>",
        "id": 368331028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687372665
    },
    {
        "content": "<p>It seems <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_congr%27#doc\">docs#forall_prop_congr'</a> doesn't get used in Lean 4</p>",
        "id": 368331426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687372766
    },
    {
        "content": "<p>Ah, this is a repeat of an old thread</p>",
        "id": 368331721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687372840
    },
    {
        "content": "<p>The example in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/5349\">!4#5349</a> is much worse than the previous one which was worked around with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- porting note: workaround for lean4#1926, was `simp_rw [pow_succ']`</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h_lean4_1926</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">])</span> <span class=\"k\">from</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_lean4_1926</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_succ'</span><span class=\"o\">])</span>\n  <span class=\"c1\">-- porting note: end workaround</span>\n</code></pre></div>",
        "id": 368332952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687373148
    },
    {
        "content": "<p>\"rewrite the whole goal in a suffices\" is very unpleasant when the goal contains proof terms</p>",
        "id": 368333095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687373187
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2732\">lean4#2732</a>. I've verified on the <code>lean-pr-testing-2732</code> branch that this resolves all porting notes tagged with <a href=\"https://github.com/leanprover/lean4/pull/1926\">lean4#1926</a>.</p>\n<p>There were probably many more regressions during porting as people worked around <code>lean4#1926</code>, but without tagging them.</p>\n<p>If anyone would like to add changes to the <code>lean-pr-testing-2732</code>, I've opened it as a PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7845\">#7845</a>.</p>",
        "id": 397978459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698016387
    }
]