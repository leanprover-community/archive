[
    {
        "content": "<p>Looking at port of <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Order/Category/Semilat.lean\">SemiLatSup</a>.  The original by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  is <a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/order/category/Semilat.lean\">here</a>.  I got up to here in the port (this typechecks up to but excluding the last line):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Category.PartOrdCat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Lattice</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeSup</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderBot</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">SemilatSup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatInf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeInf</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeInf</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderTop</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">SemilatInf</span> <span class=\"n\">SemilatInf</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SemilatSup</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SemilatSup.X</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The Lean 3 text of the last line is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">SemilatSup</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SemilatSup.X</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Note I had to add this in the text above to get to line 52:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>instance</code> fails in Lean 4 with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Semilat.lean</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span><span class=\"mi\">19</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">implicit</span> <span class=\"n\">argument</span>\n  <span class=\"bp\">@</span><span class=\"n\">SemilatSup</span> <span class=\"bp\">?</span><span class=\"n\">m.1223</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1222</span>\n\n<span class=\"n\">when</span> <span class=\"n\">the</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">is</span> <span class=\"n\">explicitly</span> <span class=\"n\">provided</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">holes</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">header</span> <span class=\"n\">are</span> <span class=\"n\">resolved</span> <span class=\"n\">before</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span> <span class=\"n\">is</span> <span class=\"n\">processed</span>\n<span class=\"n\">Semilat.lean</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span><span class=\"mi\">43</span>\n<span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">SemilatSup</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.1235</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I need a hint.</p>",
        "id": 361846926,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685328179
    },
    {
        "content": "<p>Do <code>instance : CoeSort SemilatSup.{u} (Type u)</code> or something like that.</p>",
        "id": 361864514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685341179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> the mathport script <a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/order/category/Semilat.lean\">took</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"o\">[</span><span class=\"n\">is_semilattice_sup</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_order_bot</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatInf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"o\">[</span><span class=\"n\">is_semilattice_inf</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">is_order_top</span> <span class=\"o\">:</span> <span class=\"n\">order_top</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Order/Category/Semilat.lean\">to</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeSup</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderBot</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatInf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeInf</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeInf</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderTop</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so <code>(X : Type.{u})</code> becomes <code>pt: Type u</code> but other fields are still referring to <code>X</code> like <code> [isOrderBot : OrderBot X]</code>.  If I change the port to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeSup</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderBot</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">SemilatSup</span>\n\n<span class=\"sd\">/-- The category of inf-semilattices with a top element. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatInf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeInf</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeInf</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderTop</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">SemilatInf</span> <span class=\"n\">SemilatInf</span>\n</code></pre></div>\n<p>then <code>instance : CoeSort SemilatSup (Type _) := ⟨SemilatSup.X⟩</code> typechecks.</p>",
        "id": 361947099,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685365658
    },
    {
        "content": "<p>So revert <code>pt</code> back to <code>X</code>?</p>",
        "id": 361947452,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685365735
    },
    {
        "content": "<p>Yes, that's the fix.  I don't know why it change it to <code>pt</code>.</p>",
        "id": 361947555,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685365759
    },
    {
        "content": "<p>Where did you get that first codeblock?</p>",
        "id": 361947595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685365770
    },
    {
        "content": "<p>That's because <code>X</code> was renamed to <code>pt</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Cone#doc\">docs4#CategoryTheory.Cone</a>, I believe?</p>",
        "id": 361947650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685365788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  follow this link:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/order/category/Semilat.lean\">https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/order/category/Semilat.lean</a></p>",
        "id": 361947809,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685365820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  if there is a precedent for <code>pt</code> I can alternatively change all my <code>X</code>'s to <code>pt</code>s.</p>",
        "id": 361947981,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685365863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Why did you write <code>Type.{u}</code> in that file? I guess it works, but I think we usually always write <code>Type u</code>...</p>",
        "id": 361948363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685365960
    },
    {
        "content": "<p>Uuuh. Looks like I autofixed a max universe issue the way I fixed all the other ones: by appending <code>.{u}</code>.</p>",
        "id": 361949909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685366352
    },
    {
        "content": "<p>Never mind... the port seems to have an \"autocorrect\" feature <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 361950028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685366385
    },
    {
        "content": "<p>Which is more consistent with other files, <code>pt</code> or <code>X</code>?</p>",
        "id": 361975510,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685372752
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/basic.lean\">mathlib</a>, <code>category</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">extends</span> <span class=\"n\">category_struct.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">id_comp'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp_id'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc'</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Note the use of ' character after <code>id_comp</code> and <code>comp_id</code>.   In <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/CategoryTheory/Category/Basic.lean\">Mathlib4</a> <code>Category</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CategoryStruct.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Identity morphisms are left identities for composition. -/</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"sd\">/-- Identity morphisms are right identities for composition. -/</span>\n  <span class=\"n\">comp_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"sd\">/-- Composition in a category is associative. -/</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>Note that the ' character has been dropped in <code>id_comp</code> and <code>comp_id</code>.  The <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Order/Category/Semilat.lean\">mathlib3port of Semilat.lean</a> keeps the ' characters, which I guess can be dropped</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LargeCategory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SemilatSup</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_comp'</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_id</span>\n  <span class=\"n\">comp_id'</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id_comp</span>\n  <span class=\"n\">assoc'</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Just curious if there is a style guide going one way another on the ' characters.</p>",
        "id": 362008565,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685383597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  I need help on line 49 of Semilat.lean. In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/category/Semilat.lean\">Lean 3</a> this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">large_category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_hom.id</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_hom.comp_id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_hom.id_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_hom.comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Order/Category/Semilat.lean\">lean 4 port</a> this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LargeCategory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SemilatSup</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_comp'</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_id</span>\n  <span class=\"n\">comp_id'</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id_comp</span>\n  <span class=\"n\">assoc'</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The <code> comp X Y Z f g := g.comp f</code> line doesn't work.  I tried correcting this to</p>\n<p>This gives me error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kt\">Type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2915</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">SupBotHom</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2916</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2917</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"n\">SupBotHom</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2922</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2916</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"n\">SupBotHom</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2922</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2917</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.2747</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.2756</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.2757</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.2758</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"bp\">✝</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"kd\">variables</span> <span class=\"k\">have</span> <span class=\"n\">been</span> <span class=\"n\">introduced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">implicit</span> <span class=\"n\">lambda</span> <span class=\"n\">feature</span>\n  <span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">SemilatSup</span>\n  <span class=\"n\">Y</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">SemilatSup</span>\n  <span class=\"n\">Z</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">SemilatSup</span>\n<span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">disable</span> <span class=\"n\">implicit</span> <span class=\"n\">lambdas</span> <span class=\"n\">using</span> <span class=\"bp\">`@`</span> <span class=\"n\">or</span> <span class=\"n\">writing</span> <span class=\"n\">a</span> <span class=\"n\">lambda</span> <span class=\"n\">expression</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"o\">{}</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">[]</span><span class=\"bp\">`</span> <span class=\"n\">binder</span> <span class=\"n\">annotations.</span>\n</code></pre></div>\n<p>I am stuck there.</p>",
        "id": 362016306,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685386451
    },
    {
        "content": "<p>The answer is in the error message. Use <code>@fun</code>.</p>",
        "id": 362022387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685388992
    },
    {
        "content": "<p>Even better, use <code>comp f g := g.comp f</code></p>",
        "id": 362023858,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685389571
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  and <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , the following typechecks.  I'm not sure why I need the <code>_ _ _</code> on the last one rather than eliding it on LHS and RHS, but it needs it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LargeCategory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_id</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id_comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 362050653,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685405655
    },
    {
        "content": "<p>This Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">concrete_category</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">forget</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">coe_fn</span> <span class=\"o\">},</span>\n  <span class=\"n\">forget_faithful</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">fun_like.coe_injective</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gets mathported to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"n\">SemilatSup</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">forget</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">coeFn</span> <span class=\"o\">}</span>\n  <span class=\"n\">forget_faithful</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe_injective</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The  <code>obj := SemilatSup.X</code> gives a long error after what appears to be two invocations of tactic <code>aesop</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Semilat.lean</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">aesop'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"n\">after</span> <span class=\"n\">exhaustive</span> <span class=\"n\">search.</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SemilatSup</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span> <span class=\"n\">sorryAx</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.X</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">𝟙</span> <span class=\"o\">({</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span> <span class=\"n\">sorryAx</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.X</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">Semilat.lean</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">aesop'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"n\">after</span> <span class=\"n\">exhaustive</span> <span class=\"n\">search.</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SemilatSup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span> <span class=\"n\">sorryAx</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.X</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span> <span class=\"n\">sorryAx</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.X</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span>\n      <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↦</span> <span class=\"n\">sorryAx</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X.X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.X</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>The <code>fun X Y =&gt; coeFn X </code> fails with <code>unknown identifier 'coeFn'</code>.  In the Lean 3 version,  the <code>coe_fn</code> refers to  line 83 of <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean\">coe.lean</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">coe_fn</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_coe_to_fun.coe</span>\n</code></pre></div>\n<p>I was unable to find a corresponding coe_fn or coeFn or CoeFn or CoeFN in Lean 4.</p>\n<p>I would greatly appreciate two hints.</p>",
        "id": 362052626,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685407434
    },
    {
        "content": "<p>Part of the nice aspect of working with Lean + mathlib is the <em>interactive</em> theorem proving part. Usually, that is facilitated by an IDE like VSCode or emacs. It's really hard to debug these types of issues, like the ones you're posting, without that IDE, at least for me (I've been spoiled by it). I could venture a guess as to what's going wrong, but it's pretty hard without the goal state and other assistance from the IDE. It'd be much easier if you could also link to a branch that has these current states in a WIP state. Otherwise, asking for hints is like asking the people who have had experience solving Rubik's cubes to send the solution moves just based on a photo.</p>",
        "id": 362054919,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685409534
    },
    {
        "content": "<p>I'm sharing this thought not to stress anything, but to help find a way that makes it easier for you and for others to feel successful here</p>",
        "id": 362054941,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685409559
    },
    {
        "content": "<p>In your error, I see <code>sorryAx</code>, which looks like something is being provided which just isn't a term. In this case, what's going on mathematically is that the instance proving that <code>SemilatSup</code> is a concrete category is that you provide the data describing the functor of how the category can be interpreted as just a category over types.</p>",
        "id": 362055068,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685409694
    },
    {
        "content": "<p>In particular, that means how an object becomes a type, and how a hom becomes a function (I think). So, in mathlib3, the map is <code>coe_fn</code>, which, in a pointfree fashion, maps a hom to a function. Here, maybe you can write it in \"pointfull\" style: <code>map := fun X Y f =&gt; f</code> or <code>\\uparrow f</code>.</p>",
        "id": 362055151,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685409773
    },
    {
        "content": "<p>This is purely my guess based on my very amateur understanding of category theory and the way it is formalized in mathlib</p>",
        "id": 362055176,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685409813
    },
    {
        "content": "<p>In this Lean 4 expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">where</span>\n  <span class=\"n\">forget</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">coeFn</span>\n      <span class=\"o\">}</span>\n  <span class=\"n\">forget_faithful</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe_injective</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>the <code>forget_faithful</code> typechecks and the problem is in the <code>forget</code>. The <code>forget</code>is declared as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">forget</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n  <span class=\"o\">[</span><span class=\"n\">forget_faithful</span> <span class=\"o\">:</span> <span class=\"n\">Faithful</span> <span class=\"n\">forget</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So the <code>forget</code> is a structure of type <code>C ⥤ Type w</code> where <code>C : Type u</code> and <code>⥤</code> denotes a functor between categories defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ⥤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n    <span class=\"kd\">extends</span> <span class=\"n\">Prefunctor</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p><code>map</code> and <code>obj</code> are declared in <code>Prefunctor</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Prefunctor</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">W</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here is a self-contained fully reproducible snippet in Lean 4, from <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  file <code>Semilat.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Category.PartOrdCat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Lattice</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">SupBotHom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeSup</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderBot</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SemilatInf</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"o\">[</span><span class=\"n\">isSemilatticeInf</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeInf</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isOrderTop</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SemilatSup</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">SemilatSup</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SemilatSup.X</span><span class=\"o\">⟩</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">isSemilatticeSup</span> <span class=\"n\">isOrderBot</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LargeCategory.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">id_comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_id</span> <span class=\"n\">f</span>\n  <span class=\"n\">comp_id</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.id_comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">SupBotHom.comp_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"n\">SemilatSup</span> <span class=\"n\">where</span>\n  <span class=\"n\">forget</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">SemilatSup.X</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">coeFn</span>\n      <span class=\"o\">}</span>\n  <span class=\"n\">forget_faithful</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe_injective</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The <code>coe_fn</code> in Lean 3 <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean\">is defined as</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">coe_fn</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_coe_to_fun.coe</span>\n</code></pre></div>\n<p>I can't find the equivalent definition in Lean 4.  The Lean 3 <code>coe_fn</code> definition above is not in <code>mathlib</code>, it is in an implementation layer below that.   I don't know where that layer lives in Lean 4.</p>\n<p><strong>Question:</strong> what is the equivalent in Lean 4 for <code>coe_fn</code> in this context.</p>",
        "id": 362162066,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685448371
    }
]