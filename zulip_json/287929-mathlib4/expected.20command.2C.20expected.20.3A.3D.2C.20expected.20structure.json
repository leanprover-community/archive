[
    {
        "content": "<p>There have been several reports of people getting bugs like <code>expected command</code> or <code>expected structure</code>:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Nat.2Emod_def/near/319688334\">1</a> <a href=\"#narrow/stream/287929-mathlib4/topic/Parsing.20error/near/320805392\">2</a> <a href=\"#narrow/stream/287929-mathlib4/topic/GroupTheory.2EGroupAction.2ESubMulAction.2EPointwise/near/324157532\">3</a> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EBigOperators.2EFinprod.20mathlib4.231766/near/322991933\">4</a> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20instance.20that.20fails.20linting/near/319661520\">5</a></p>\n<p>I now have one of my own, on the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems to be a feature of this bug that it is not reproducible, so I don't know if it's even worth reporting, but thought I would try!</p>",
        "id": 324533117,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675060112
    },
    {
        "content": "<p>Locally, for me, it persisted through some mwe-ification, descending from <code>expected :=</code> to <code>expected |</code> to <code>expected command</code>.  And I have the impression that initially it was connected to poor focusing (e.g. having multiple goals around in a way that good <code>·</code> would prevent), but haven't confirmed this yet (and now I need to go to bed!).</p>",
        "id": 324533378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675060302
    },
    {
        "content": "<p>I can replicate this. I think the issue is that <code>Mathlib.Init.ZeroOne</code> doesn't import the <code>lemma</code> command</p>",
        "id": 324533578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675060399
    },
    {
        "content": "<p>that doesn't explain the other error messages so you might have MWE'd too far</p>",
        "id": 324533727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675060481
    },
    {
        "content": "<p>Oops! ... I'll try again tomorrow.</p>",
        "id": 324534021,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675060630
    },
    {
        "content": "<p>I got an <code>expected }</code> once too, at top level, between <code>variable</code> statements</p>",
        "id": 324541260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064180
    },
    {
        "content": "<p>that was baffling</p>",
        "id": 324541264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064182
    },
    {
        "content": "<p>OK, second try.  Not minimized yet but I'll return to this in an hour if someone doesn't fix it first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Cast</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span>\n  <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"c1\">-- expected ':='</span>\n</code></pre></div>",
        "id": 324759807,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675106858
    },
    {
        "content": "<p>I think the next to last line should be indented, if the tactic block is to continue after <code>calc</code></p>",
        "id": 324761329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675107353
    },
    {
        "content": "<p>Ah, nice!  That's an easy rule to remember.</p>",
        "id": 324766934,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675109216
    },
    {
        "content": "<p>I am not actually sure how Lean interprets what you wrote above, but it must think the <code>calc</code> block is either 1 or 3 lines, and not exactly 2.</p>",
        "id": 324767888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675109568
    }
]