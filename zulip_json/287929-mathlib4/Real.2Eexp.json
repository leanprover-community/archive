[
    {
        "content": "<p>Have a look at this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">exp</span> <span class=\"n\">x</span>      <span class=\"o\">:=</span> <span class=\"n\">exp_pos</span> <span class=\"n\">_</span> <span class=\"c1\">-- 250ms</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.exp</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">exp_pos</span> <span class=\"n\">_</span> <span class=\"c1\">-- 2ms</span>\n</code></pre></div>",
        "id": 401485920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699684752
    },
    {
        "content": "<p>Even with <code>open Real</code>, Lean tries <code>_root_.exp</code> first, and tries to coerce <code>x : ℝ</code> to a type.<br>\nThis typeclass search goes haywire, and takes a long time to fail.</p>",
        "id": 401485922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699684755
    },
    {
        "content": "<p>This definitely needs fixing.</p>",
        "id": 401485930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699684766
    },
    {
        "content": "<p>I think the correct solution is just to namespace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>. Suggestions?</p>",
        "id": 401485945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699684789
    },
    {
        "content": "<p>(Ah, this is the same as <a href=\"#narrow/stream/287929-mathlib4/topic/Crazy.20unification.20quests\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Crazy.20unification.20quests</a>)</p>",
        "id": 401486118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699684960
    },
    {
        "content": "<p><code>NormedSpace.exp</code>? <code>TopologicalRing.exp</code>? <code>formalExp</code>? <code>banachExp</code>?</p>",
        "id": 401486253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699685123
    },
    {
        "content": "<p>Ideally we just merge them, but maybe we need your suggestion as a short-term fix</p>",
        "id": 401487051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699686000
    },
    {
        "content": "<p>I think people are still going to want to be able to write <code>Real.exp x</code> rather than <code>exp \\bbR x</code>.</p>",
        "id": 401487175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686070
    },
    {
        "content": "<p>But yes, I think we should fix this first.</p>",
        "id": 401487195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686080
    },
    {
        "content": "<p>I think my preferred solution is just the namespace the entire file either <code>NormedSpace</code> or <code>Analysis.NormedSpace</code>.</p>",
        "id": 401487248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686116
    },
    {
        "content": "<p>(This might be considered as setting a good example. :-)</p>",
        "id": 401487388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686211
    },
    {
        "content": "<p>(Although I guess the good example would be namespacing it <code>Mathlib.Analysis.NormedSpace</code>. :-)</p>",
        "id": 401487450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699686248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401487175\">said</a>:</p>\n<blockquote>\n<p>I think people are still going to want to be able to write <code>Real.exp x</code> rather than <code>exp \\bbR x</code>.</p>\n</blockquote>\n<p>Yes, part of the task of merging them is to remove the (hopefully?) useless argument!</p>",
        "id": 401487950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699686842
    },
    {
        "content": "<p><code>NormedSpace</code> feels like a bit of a lie, since some results don't require a norm at all; but maybe that's no worse than \"module\" being a semimodule or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ring.inverse#doc\">docs#Ring.inverse</a> working on monoids with zero</p>",
        "id": 401488195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699687102
    },
    {
        "content": "<p>/poll How should we rename <code>_root_.exp</code>?</p>",
        "id": 401549243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699744940
    },
    {
        "content": "<p>I'd like to fix this, as currently with <code>import Mathlib</code> and <code>open Real</code>, <code>exp</code> is pretty much unusable.</p>",
        "id": 401549280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699745006
    },
    {
        "content": "<p>(My intention, if we move this into a namespace, is that all the lemmas about it in the same file will move to the same namespace.)</p>",
        "id": 401550474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699746380
    },
    {
        "content": "<p>Note that we already have a workaround, which is to use the <code>rexp</code> notation</p>",
        "id": 401550600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699746563
    },
    {
        "content": "<p>Yes, but that requires special knowledge, and there's no way to deliver it to someone who writes <code>import Mathlib</code> <code>open Lean</code>, and then observes that Lean doesn't work. :-)</p>",
        "id": 401550665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699746622
    },
    {
        "content": "<p>(An alternative solution would be to protect <code>Real.exp</code>??)</p>",
        "id": 401550690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699746674
    },
    {
        "content": "<p>I don't think we need <em>both</em> <code>rexp</code> notation <em>and</em> unprotected <code>Real.exp</code>, but I think that's more of an argument for removing the notation.</p>",
        "id": 401552436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699748130
    },
    {
        "content": "<p>I'll just say that I would really prefer <em>not</em> to namespace the current <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>, but as yet I don't have an alternative solution to propose. Protecting <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.exp#doc\">docs#Real.exp</a> is not my favorite idea either.</p>",
        "id": 401561504,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699754005
    },
    {
        "content": "<p>I'm hesitant to get derailed onto long-term solutions, because I would like a short-term fix first.</p>\n<p>Nevertheless, I appreciate Jireh's unhappiness about this, so:</p>\n<ol>\n<li>Could we change Lean's name resolution so it tries the \"deeper-namespaced\" alternatives first?</li>\n<li>Could we change Lean's name resolution so it doesn't even try <code>_root_.X</code> if <code>Y.X</code> is available and <code>Y</code> is open?</li>\n<li>Could we remove <code>Real.exp</code> and <code>Complex.exp</code> entirely, in favour of the current <code>_root_.exp</code>?</li>\n<li>Could we decide we want to namespace everything, and then <code>NormedSpace.exp</code> would not feel so lonely?</li>\n</ol>\n<p>I think 1. and 2. sound fragile and complicated and unlikely to win the relevant hearts and minds. :-)</p>\n<p>Number 4. sounds great to me, but that is a battle for another day!</p>\n<p>Number 3. may well work, but someone would need to do the work in Mathlib. I'm actually a bit confused why there is the field argument of <code>_root_.exp</code> in the first place. Couldn't we just fix <code>K = Q</code>? Do we say anything interesting about exp outside of that situation?</p>",
        "id": 401562878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699754986
    },
    {
        "content": "<p><del>I think your list got mangled.</del> Fixed!</p>",
        "id": 401601410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699784787
    },
    {
        "content": "<p>The K=Q thing always comes around to p-adics (we have at least one thread about this)</p>",
        "id": 401601436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699784821
    },
    {
        "content": "<p>I think the answer is that the definitions don't need K, but most of the lemmas do</p>",
        "id": 401601458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699784836
    },
    {
        "content": "<p>It would help a lot of someone could write some basic results for exp on p-adics so that they can act as a sanity check for any refactors!</p>",
        "id": 401601532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699784887
    },
    {
        "content": "<p>A toy API would be that if p is prime and q=4 if p=2 and q=p otherwise, then exp and log are inverse group isomorphisms between (qZ_p,+) and (1+qZ_p,*). The correct API would be that if K is a nonarchimedean local field of characteristic zero then there are neighborhoods of 0 and 1 for which the same holds.</p>",
        "id": 401601954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699785265
    },
    {
        "content": "<p>Unfortunately we don't have <code>log</code> yet so that looks a bit out of reach</p>",
        "id": 401602055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699785364
    },
    {
        "content": "<p>Isn't it still K=Q for the p-adics, though?</p>",
        "id": 401602101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699785418
    },
    {
        "content": "<p>The source is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">q\\Z_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. I'm not sure I understand the question.</p>",
        "id": 401602134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699785448
    },
    {
        "content": "<p>No, it's <code>K = WithADifferentNorm ℚ</code></p>",
        "id": 401602146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699785465
    },
    {
        "content": "<p>(Sorry, Kevin, wasn't responding to your post.)</p>",
        "id": 401602204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699785489
    },
    {
        "content": "<p>But like I said earlier, that only matters in the lemmas, since the def doesn't even need the topology on K, let alone the norm</p>",
        "id": 401602218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699785509
    },
    {
        "content": "<p>I see, so we could plausibly remove K as an argument for <code>exp</code> itself, and just use the non-normed rationals there.</p>",
        "id": 401602245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699785556
    },
    {
        "content": "<p>(note that the power series defining exp doesn't converge in general over the p-adics)</p>",
        "id": 401602249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699785564
    },
    {
        "content": "<p>And then lemmas would refer to a possibly-non-standard norm on the rationals? Or a type synonym for the rationals? That sounds a bit icky.</p>",
        "id": 401602274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699785601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401602245\">said</a>:</p>\n<blockquote>\n<p>I see, so we could plausibly remove K as an argument for <code>exp</code> itself, and just use the non-normed rationals there.</p>\n</blockquote>\n<p>Yes, and I think I had a branch for this in mathlib3, but it was rather annoying having to write ℚ explicitly in all the lemmas</p>",
        "id": 401602326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699785616
    },
    {
        "content": "<p>Here's the <a href=\"#narrow/stream/113488-general/topic/exponential.20in.20banach.20algebras/near/281505670\">previous thread</a></p>",
        "id": 401605460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788131
    },
    {
        "content": "<p>The branches was <a href=\"https://github.com/leanprover-community/mathlib/compare/eric-wieser/exp-rat\">https://github.com/leanprover-community/mathlib/compare/eric-wieser/exp-rat</a>, where <a href=\"https://github.com/leanprover-community/mathlib/compare/eric-wieser/exp-rat...eric-wieser/exp-very-rat\">https://github.com/leanprover-community/mathlib/compare/eric-wieser/exp-rat...eric-wieser/exp-very-rat</a> added one more commit that probably breaks the p-adics</p>",
        "id": 401608683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699790947
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/pull/19244\">!3#19244</a> which is a bit easier to comment on</p>",
        "id": 401611635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699793769
    },
    {
        "content": "<p>Ported in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8370\">#8370</a></p>",
        "id": 401628328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699810058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You are saying that you want to define <code>exp</code> and <code>log</code> on spaces that are not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-vector spaces, right? Or is there another claim that you make which I'm missing?</p>",
        "id": 401706814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699862575
    },
    {
        "content": "<p>My understanding was that Kevin is still only interested in Q-algebras, but wants to consider normed Q-algebras where the norm on ℚ is not the one induced through the reals</p>",
        "id": 401720970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699867852
    },
    {
        "content": "<p>yeah I have no idea why we have put the real norm on Q. For me Q has no canonical norm. It's R which has the norm.</p>",
        "id": 401724118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699868659
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/8370\">#8370</a> preserves the capability to work with that norm structure, but drops the ability to work with stupid rings where <code>1/n! = 0</code></p>",
        "id": 401725671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699869037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401725671\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/8370\">#8370</a> preserves the capability to work with that norm structure, but drops the ability to work with stupid rings where <code>1/n! = 0</code></p>\n</blockquote>\n<p>isn't this all char-p rings?</p>",
        "id": 401746537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699876101
    },
    {
        "content": "<p>Yes, but is exp (defined via the power series) meaningful in those? <code>1/n! = 0</code> is a junk value; in normal mathematics you'd just declare the whole thing undefined, right?</p>",
        "id": 401746808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699876209
    },
    {
        "content": "<p>I guess <code>exp x</code> would still be defined in a char-p ring if <code>x^p = 0</code></p>",
        "id": 401746980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699876292
    },
    {
        "content": "<p>I guess <a href=\"https://en.wikipedia.org/wiki/Divided_power_structure\">https://en.wikipedia.org/wiki/Divided_power_structure</a> might be relevant</p>",
        "id": 401747420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699876466
    },
    {
        "content": "<p>The fact that it talks about a divided power structure \"on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>\" doesn't bode well; it sounds like that's going to result in another undesirable signature for <code>exp</code></p>",
        "id": 401748122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699876766
    },
    {
        "content": "<p>Yeah, I don't think we should have this in our type signature for <code>exp</code></p>",
        "id": 401748597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699876917
    },
    {
        "content": "<p>I guess we could have a typeclass for the special case where <code>I = top</code></p>",
        "id": 401748736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699876940
    },
    {
        "content": "<p>But at the end of the day, we'd just be replacing <code>Algebra Rat A</code> in  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8370\">#8370</a>  with <code>TopDividedPower A</code>, which could always come in a later refactor</p>",
        "id": 401748947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699876998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401601954\">said</a>:</p>\n<blockquote>\n<p>A toy API would be that if p is prime and q=4 if p=2 and q=p otherwise, then exp and log are inverse group isomorphisms between (qZ_p,+) and (1+qZ_p,*). The correct API would be that if K is a nonarchimedean local field of characteristic zero then there are neighborhoods of 0 and 1 for which the same holds.</p>\n<p>(note that the power series defining exp doesn't converge in general over the p-adics)</p>\n</blockquote>\n<p>So the main question is: do we want to capture examples like this? Or should this just be a different function.</p>",
        "id": 401749775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699877284
    },
    {
        "content": "<p>Can we write that example as a mwe?</p>",
        "id": 401750184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699877455
    },
    {
        "content": "<p>It's not clear to me that even the current <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a> supports it, in which case removing the K argument doesn't make things worse</p>",
        "id": 401750240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699877481
    },
    {
        "content": "<p>I think that's right.</p>",
        "id": 401752178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699878349
    },
    {
        "content": "<p>Hmm, atm <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.exp#doc\">docs#Real.exp</a> is defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.exp#doc\">docs#Complex.exp</a> which is <em>not</em> defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>. So if we refactor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a> by removing the <code>K</code>, what does that buy us again?</p>",
        "id": 401756875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699880101
    },
    {
        "content": "<p>We can then eliminate <code>Real.exp</code> and <code>Complex.exp</code> entirely</p>",
        "id": 401757326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880272
    },
    {
        "content": "<p>Shouldn't we first refactor those two, so that they are defined in terms of <code>_root_.exp</code>?</p>",
        "id": 401757449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699880308
    },
    {
        "content": "<p>It does seem better to do that first, before changing the signature of <code>_root_.exp</code>.</p>",
        "id": 401757744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699880416
    },
    {
        "content": "<p>I think we could do things in either order</p>",
        "id": 401757920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880468
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/leanprover-community/mathlib4/pull/8372\">#8372</a> as the task of merging them</p>",
        "id": 401758200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880537
    },
    {
        "content": "<p>I think the plan is</p>\n<ul>\n<li>someone (me?) is going to move <code>_root_.exp</code> to <code>NormedSpace.exp</code></li>\n<li>perhaps the discussion at <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/401743302\"><code>example (p : P) : Q := p</code></a> means the original problem goes away at some point anyway.</li>\n<li>later, someone refactors <code>Real.exp</code> in terms of <code>NormedSpace.exp</code></li>\n<li>either before or after, someone changes the signature of <code>NormedSpace.exp</code>.</li>\n</ul>",
        "id": 401758310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699880573
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 401758595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699880655
    },
    {
        "content": "<p>Do we ultimately move <code>NormedSpace.exp</code> back to <code>_root_.exp</code>?</p>",
        "id": 401758667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699880682
    },
    {
        "content": "<p>And once we have rings with canonical divided power structures, we can refactor <code>exp</code> so that it also works for <code>Z_p</code></p>",
        "id": 401758684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699880688
    },
    {
        "content": "<p>I think <code>Real.exp</code> and <code>Complex.exp</code> can be removed, at the end of all those refactors</p>",
        "id": 401758806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699880731
    },
    {
        "content": "<p>There is one perhaps significant issue about removing <code>Real.exp</code> and <code>Complex.exp</code> in favor of implementations using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>: it screws with the import hierarchy. Right now, these are defined in <code>Data.Complex.Exponential</code>, whose imports are only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Algebra.GeomSum</span>\n<span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n</code></pre></div>\n<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a> needs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Analysis.Analytic.Basic</span>\n<span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"n\">Mathlib.Data.Finset.NoncommProd</span>\n<span class=\"n\">Mathlib.Topology.Algebra.Algebra</span>\n<span class=\"n\">Mathlib.Analysis.Normed.Field.InfiniteSum</span>\n<span class=\"n\">Mathlib.Data.Nat.Choose.Cast</span>\n</code></pre></div>",
        "id": 401767953,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699883813
    },
    {
        "content": "<p>And by \"screws with the import hierarchy\" I mean that we have to define <code>Real.exp</code> and <code>Complex.exp</code> much later. We may view this as problematic if we want outside users to be using bits of Mathlib.</p>",
        "id": 401768263,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699883913
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a> could use much less for the definition</p>",
        "id": 401771441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699884765
    },
    {
        "content": "<p>fair enough</p>",
        "id": 401774753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699885684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401767953\">said</a>:</p>\n<blockquote>\n<p>There is one perhaps significant issue about removing <code>Real.exp</code> and <code>Complex.exp</code> in favor of implementations using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>: it screws with the import hierarchy. Right now, these are defined in <code>Data.Complex.Exponential</code></p>\n</blockquote>\n<p>And note that Bochner integration depends on <code>rpow</code> which depends on <code>Real.exp</code>.</p>",
        "id": 401802367,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699892585
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2023 Johan Commelin. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Johan Commelin</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.NatAntidiagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Multinomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- C_{n, m} = \\frac{(mn)!}{(m!)^n n!} -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">divpowC</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m.factorial</span> <span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n.factorial</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Let `A` be a commutative semiring with an ideal `I`.</span>\n<span class=\"sd\">A *divided power structure* (or *PD-structure*, after the French \"puissances divisées\") on `I`</span>\n<span class=\"sd\">is a collection of maps `γ n : A → A` for `n : ℕ` such that:</span>\n\n<span class=\"sd\">* `γ 0 x = 1` and `γ 1 x = x` for `x ∈ I`, while `γ n x ∈ I` for `n &gt; 0`.</span>\n<span class=\"sd\">* `γ n (x + y) = ∑_{i+j=n} (γ i x) * (γ j y)` for `x, y ∈ I`.</span>\n<span class=\"sd\">* `γ n (λ • x) = λ^n • γ n x` for `λ : A, x ∈ I`.</span>\n<span class=\"sd\">* `(γ m x) * (γ n x) = ((m, n)) • γ (m+n) x` for `x ∈ I`, where `((m, n)) = \\frac{(m+n)!}{m! n!}` is an integer.</span>\n<span class=\"sd\">* `γ n (γ m x) = C_{n, m} • γ (m * n) x` for `x ∈ I` and `m &gt; 0`,</span>\n<span class=\"sd\">  where `C_{n, m} = divpowC m n = \\frac{(mn)!}{(m!)^n n!}` is an integer.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">DividedPowerStructure</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">divpow</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"n\">divpow_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">divpow_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">divpow</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">Finset.antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">divpow</span> <span class=\"n\">y</span> <span class=\"n\">p.2</span>\n  <span class=\"n\">divpow_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">divpow</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n  <span class=\"n\">divpow_mul_divpow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">divpow_divpow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n    <span class=\"n\">divpow</span> <span class=\"o\">(</span><span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">divpowC</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">divpow_of_not_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DivPow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">divpow</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- TODO: this notation is ambiguous, what are good alternatives?</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span><span class=\"s2\">\"^[\"</span><span class=\"n\">n</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DivPow.divpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DividedPowerRing</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">DividedPowerStructure</span> <span class=\"n\">I</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DividedPowerRing</span> <span class=\"n\">A</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DivPow</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">h.divpow</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- Every `ℚ`-algebra is a divided power ring -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DividedPowerRing</span> <span class=\"n\">A</span> <span class=\"bp\">⊤</span> <span class=\"n\">where</span>\n  <span class=\"n\">divpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"n\">divpow_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.factorial_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">inv_one</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n  <span class=\"n\">divpow_add</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">n.factorial_ne_zero</span>\n    <span class=\"n\">apply</span> <span class=\"n\">smul_right_injective</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_inv_smul₀</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Commute.all</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_pow'</span><span class=\"o\">,</span> <span class=\"n\">Finset.smul_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_antidiagonal</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">Algebra.mul_smul_comm</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_mul_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.forall</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_choose_mul_factorial_mul_factorial</span><span class=\"o\">]</span>\n    <span class=\"n\">push_cast</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_left₀</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">Nat.choose_symm_add</span><span class=\"o\">]</span>\n    <span class=\"n\">field_simp</span>\n  <span class=\"n\">divpow_smul</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">divpow_mul_divpow</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Algebra.mul_smul_comm</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span>\n     <span class=\"bp\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">n.factorial_ne_zero</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_choose_mul_factorial_mul_factorial</span><span class=\"o\">]</span>\n  <span class=\"n\">divpow_divpow</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">divpowC</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_natCast</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_smul_cast</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">n.factorial_ne_zero</span>\n    <span class=\"n\">field_simp</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">divpow_of_not_mem</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Submodule.mem_top</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: define `DividedPowerRing` on `ℤₚ`</span>\n</code></pre></div>",
        "id": 401825074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699901038
    },
    {
        "content": "<p>Here's a start on divided power rings. One sorry left, but I really need to start grading exams again.</p>",
        "id": 401825143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699901057
    },
    {
        "content": "<p>Aren't <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> and <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  working on this?</p>",
        "id": 401827406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699902033
    },
    {
        "content": "<p>Interestingly <a href=\"https://stacks.math.columbia.edu/tag/07GL\">https://stacks.math.columbia.edu/tag/07GL</a> defines them as maps from <code>I</code> to <code>I</code>, but somehow assumes that <code>1</code> is in <code>I</code></p>",
        "id": 401830092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699903159
    },
    {
        "content": "<p>de Jong can't be assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>, because then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> would be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and we definitely want cases where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. Do you mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>γ</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\gamma_0(x)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>? It's only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>γ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\gamma_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n&gt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> which land in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>.</p>",
        "id": 401832035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699903932
    },
    {
        "content": "<p>Yeah <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>γ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\gamma_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is defined just as a convenience</p>",
        "id": 401832140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699903988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401601954\">said</a>:</p>\n<blockquote>\n<p>A toy API would be that if p is prime and q=4 if p=2 and q=p otherwise, then exp and log are inverse group isomorphisms between (qZ_p,+) and (1+qZ_p,*). The correct API would be that if K is a nonarchimedean local field of characteristic zero then there are neighborhoods of 0 and 1 for which the same holds.</p>\n</blockquote>\n<p>and even the explicit neighborhood on which that holds…</p>",
        "id": 401833375,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699904559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401827406\">said</a>:</p>\n<blockquote>\n<p>Aren't <span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> and <span class=\"user-mention silent\" data-user-id=\"406490\">María Inés de Frutos Fernández</span>  working on this?</p>\n</blockquote>\n<p>Yes, <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> and I wrote a lot of stuff on divided power structures. This is  accessible at <a href=\"https://github.com/AntoineChambert-Loir/DividedPowers4\">https://github.com/AntoineChambert-Loir/DividedPowers4</a></p>",
        "id": 401834032,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699904903
    },
    {
        "content": "<p>Accessible to you maybe :-) Is the repo private?</p>",
        "id": 401834254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699904957
    },
    {
        "content": "<p>It seems so…  I don't think it hurts making it public.</p>",
        "id": 401834546,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699905106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401832140\">said</a>:</p>\n<blockquote>\n<p>Yeah <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>γ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\gamma_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is defined just as a convenience</p>\n</blockquote>\n<p>It's actually important to define it in this way, so that the binomial formula holds neatly (without binomial coefficients).</p>",
        "id": 401835453,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699905499
    },
    {
        "content": "<p>Aah, I didn't mean to duplicate efforts! Thanks for posting that repo!</p>",
        "id": 401835485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699905513
    },
    {
        "content": "<p>You've got a fair way to go before you catch up Johan :-)</p>",
        "id": 401836298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699905771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401825143\">said</a>:</p>\n<blockquote>\n<p>Here's a start on divided power rings. One sorry left, but I really need to start grading exams again.</p>\n</blockquote>\n<p>I think grading rings would be much more useful to the mathlib community. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 401857057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699915105
    },
    {
        "content": "<p>Hey, I already graded rings!</p>",
        "id": 401858946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699916126
    },
    {
        "content": "<p>(though if anyone fancies grading a PR that grades more rings, there's <a href=\"https://github.com/leanprover-community/mathlib4/pull/7394\">#7394</a> ...)</p>",
        "id": 401859169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699916255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Real.2Eexp/near/401767953\">said</a>:</p>\n<blockquote>\n<p>There is one perhaps significant issue about removing <code>Real.exp</code> and <code>Complex.exp</code> in favor of implementations using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a>: it screws with the import hierarchy. Right now, these are defined in <code>Data.Complex.Exponential</code>, whose imports are only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Algebra.GeomSum</span>\n<span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n</code></pre></div>\n<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exp#doc\">docs#exp</a> needs:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.Analysis.Analytic.Basic</span>\n<span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"n\">Mathlib.Data.Finset.NoncommProd</span>\n<span class=\"n\">Mathlib.Topology.Algebra.Algebra</span>\n<span class=\"n\">Mathlib.Analysis.Normed.Field.InfiniteSum</span>\n<span class=\"n\">Mathlib.Data.Nat.Choose.Cast</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I am very much against a change that involves this kind of huge import creep. This kind of thing is making it impossible to break mathlib into useful subsets.</p>",
        "id": 401860581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699916944
    },
    {
        "content": "<p>This is a straw man argument, <code>exp</code> can be defined with <code>tsum</code> alone</p>",
        "id": 401860626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699916987
    },
    {
        "content": "<p>If there is a way to do it without the imports, great</p>",
        "id": 401860658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917004
    },
    {
        "content": "<p>All those other files are to prove results about it, but we can evaluate those on a case-by-case basis</p>",
        "id": 401860702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699917018
    },
    {
        "content": "<p>but I consider that a prerequisite to any such refactor</p>",
        "id": 401860708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917021
    },
    {
        "content": "<p>Ah, I guess <code>tsum</code> is still a heavier import than taking the limit of a cauchy series</p>",
        "id": 401860802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699917100
    },
    {
        "content": "<p>I would actually like to have <code>Real.exp</code> without even topological spaces, unsure where it is sitting now</p>",
        "id": 401860887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917132
    },
    {
        "content": "<p>apparently it used to not be a dependency but it has since been introduced via <code>Mathlib.Data.Real.Sqrt</code></p>",
        "id": 401861305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917395
    },
    {
        "content": "<p>not sure why square roots are a dependency of exp though</p>",
        "id": 401861345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917423
    },
    {
        "content": "<p><del>oh <code>Real.Sqrt</code> is a dependency of <code>Complex.Basic</code>, so this is one of those transitive faux dependencies</del> It's used directly, square roots define <code>abs</code> which is part of the cauchy structure on complexes used in the exp proof</p>",
        "id": 401861413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917465
    },
    {
        "content": "<p>What's wrong with topological spaces? (I would redefine reals using generic <code>UniformSpace</code> completion but I remember that you weren't happy about this possible refactor)</p>",
        "id": 401904111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936217
    },
    {
        "content": "<p>We can definitely avoid talking about analytic functions near the definition of <code>exp</code>.</p>",
        "id": 401904643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699936655
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8436\">#8436</a> chore: exp -&gt; NormedSpace.exp</p>",
        "id": 402373739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700105034
    }
]