[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/697\">mathlib4#697</a>, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">OrderTop.ext_top</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which triggers the linter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `synTaut` linter reports:</span>\n<span class=\"cm\">THE FOLLOWING DECLARATIONS ARE SYNTACTIC TAUTOLOGIES. This usually means that they are of the form `∀ a b ... z, e₁ = e₂` where `e₁` and `e₂` are identical expressions. We call declarations of this form syntactic tautologies. Such lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts using `rfl`, when elaboration results in a different term than the user intended. You should check that the declaration really says what you think it does. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">OrderTop.ext_top</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `unusedArguments` linter reports:</span>\n<span class=\"cm\">UNUSED ARGUMENTS. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">OrderTop.ext_top</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3 A : OrderTop α -/</span>\n</code></pre></div>\n<p>Thoughts on how to deal with this are most welcome.</p>\n<p>(Looking into it, I noticed this theorem was only used to prove <code>order_top.ext</code> in mathlib3, and I didn't need it in mathlib4, so the easiest solution may be to just drop it.)</p>",
        "id": 312622867,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669640582
    },
    {
        "content": "<p>Given that it is a syntactic tautology, it seems safe to remove it.</p>",
        "id": 312626769,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669641918
    },
    {
        "content": "<p>Well, that's the thing - is it actually meant to say something substantial, and did it get translated into something trivial accidentally?</p>",
        "id": 312629189,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669642703
    },
    {
        "content": "<p>I suspect it got translated to something trivial accidentally</p>",
        "id": 312631281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669643257
    },
    {
        "content": "<p>In the statement, instead of using <code>haveI</code>, write something starting with @ and use the intended instance.</p>",
        "id": 312632118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669643466
    },
    {
        "content": "<p>I thought I'd tried all variations, but apparently not. Thanks</p>",
        "id": 312635574,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669644445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> has marked this topic as resolved.</p>",
        "id": 312635637,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669644463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> here's how I ported that part of the file (I ported a part of it as part of a bigger project over the weekend):</p>\n<p>1) I added <code>@[ext]</code> to the def of <code>OrderTop</code> (thus creating <code>OrderTop.ext</code> which is not equal to Lean 3's <code>order_top.ext</code>)<br>\n2) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">OrderTop.ext_top</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- must use hA</span>\n    <span class=\"o\">{</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"c1\">-- now we have to be careful of diamonds</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">OrderTop</span> <span class=\"n\">α</span> <span class=\"n\">hB.toPreorder.toLE</span><span class=\"o\">)</span> <span class=\"c1\">-- we ensure B uses hB</span>\n    <span class=\"c1\">-- If the two ≤ s are the same</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">hA.toPreorder.toLE.le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">hB.toPreorder.toLE.le</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- then the two corresponding tops must be the same</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">toHasTop</span> <span class=\"n\">α</span> <span class=\"n\">hA.toPreorder.toLE</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">toHasTop</span> <span class=\"n\">α</span> <span class=\"n\">hB.toPreorder.toLE</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- porting note: `apply le_top` worked after the `rw` in Lean 3</span>\n<span class=\"n\">top_unique</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">le_top</span> <span class=\"n\">_</span> <span class=\"n\">hA.toPreorder.toLE</span> <span class=\"n\">A</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">order_top.ext_top</span> <span class=\"n\">OrderTop.ext_top</span>\n\n<span class=\"c1\">-- renamed from Lean 3</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">OrderTop.ext'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">OrderTop.ext</span>\n  <span class=\"n\">apply</span> <span class=\"n\">OrderTop.ext_top</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">order_top.ext</span> <span class=\"n\">OrderTop.ext'</span>\n</code></pre></div>",
        "id": 312722322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669670033
    },
    {
        "content": "<p>Thanks - it's already been merged by now, so I think I'll leave it</p>",
        "id": 312724961,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669671050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> one last thing: did you change the tracking mathlib commit on the Wiki or in the PR? You started porting <code>Order.BoundedOrder</code> when it was 4 times as long. <code>mathlib3port</code> has now picked up on the splitting of the files and in the README right now it says <code>1fc36cc9c8264e6e81253f88be7fb2cb6c92d76a</code>.</p>",
        "id": 312731287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669673773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20OrderTop.2Eext_top/near/312731287\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> one last thing: did you change the tracking mathlib commit on the Wiki or in the PR? You started porting <code>Order.BoundedOrder</code> when it was 4 times as long. <code>mathlib3port</code> has now picked up on the splitting of the files and in the README right now it says <code>1fc36cc9c8264e6e81253f88be7fb2cb6c92d76a</code>.</p>\n</blockquote>\n<p>Oh! No, I think I forgot. I'll check in a bit</p>",
        "id": 312732834,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669674421
    },
    {
        "content": "<p>No worries, I'll change it now. I just checked the diff between the autoported file and the merged file and looks like you did a great job :-)</p>",
        "id": 312733443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669674638
    }
]