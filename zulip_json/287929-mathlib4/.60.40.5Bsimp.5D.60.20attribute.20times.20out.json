[
    {
        "content": "<p>In the forward-port <a href=\"https://github.com/leanprover-community/mathlib4/pull/3750\">!4#3750</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3750/files#diff-4f0b966949ea4ec5268c8b26b9877d78728ccaca3d4aaeb1fad033222bea0f2aR795-R800\">the lemma <code>quot_quot_equiv_comm_symmₐ</code></a> should be <code>@[simp]</code> but adding this attribute causes a timeout. What is happening here?</p>\n<p>Does this have something to do with the fact that the proof is supposed to be <code>rfl</code> but that also causes a timeout?</p>",
        "id": 360297082,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684767310
    },
    {
        "content": "<p>I've seen this in another PR too</p>",
        "id": 360298208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684767563
    },
    {
        "content": "<p><code>rfl</code> works fine, it just takes slightly over the max heartbeats. Similarly the simp attribute works fine, you just have to wait a little longer than we'd like.</p>",
        "id": 360300244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684767969
    },
    {
        "content": "<p>The trace looks quick, the profiler says <code>type checking took 11.7s</code>  so this is the kernel I guess?</p>",
        "id": 360300387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684768000
    },
    {
        "content": "<p>So should I just add a <code>set_option maxHeartbeats 300000</code> here?</p>",
        "id": 360304100,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684768826
    },
    {
        "content": "<p>This proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"c1\">-- TODO: why is the `@[simp]` attribute (and nothing else) timing out?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">quot_quot_equiv_comm_symmₐ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- LHS type `((A ⧸ J) ⧸ map (Quotient.mkₐ R J) I) ≃ₐ[R] (A ⧸ I) ⧸ map (Quotient.mkₐ R I) J`</span>\n  <span class=\"c1\">-- RHS type `((A ⧸ J) ⧸ map (Quotient.mkₐ R J) I) ≃ₐ[R] (A ⧸ I) ⧸ map (Quotient.mkₐ R I) J`</span>\n  <span class=\"n\">apply</span> <span class=\"n\">AlgEquiv.ext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">q</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotQuotEquivCommₐ</span><span class=\"o\">]</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">delta</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">EmbeddingLike.toFunLike</span>\n  <span class=\"n\">delta</span> <span class=\"n\">EquivLike.toEmbeddingLike</span>\n  <span class=\"n\">congr</span>\n</code></pre></div>\n<p>is quick and I'm sure highly golfable</p>",
        "id": 360306243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684769288
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">quot_quot_equiv_comm_symmₐ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">AlgEquiv.ext</span>\n  <span class=\"n\">congr</span>\n</code></pre></div>\n<p>is immediate <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 360306691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684769384
    },
    {
        "content": "<p>I'm actually getting an unsolved goals error on the second proof and replacing <code>apply AlgEquiv.ext</code> with <code>ext</code> still gives a timeout :(</p>",
        "id": 360307747,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684769615
    },
    {
        "content": "<p>The first one does work for me, thanks!</p>",
        "id": 360307775,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684769622
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">quotQuotEquivComm_symmₐ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Porting note: should just be `rfl` but `AlgEquiv.toRingEquiv` and `AlgEquiv.ofRingEquiv`</span>\n  <span class=\"c1\">-- involve repacking everything in the structure, so Lean ends up unfolding `quotQuotEquivComm`</span>\n  <span class=\"c1\">-- and timing out.</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">quotQuotEquivCommₐ</span>\n  <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 360308315,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684769757
    },
    {
        "content": "<p>This proof works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"c1\">-- TODO: why is the `@[simp]` attribute (and nothing else) timing out?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">quot_quot_equiv_comm_symmₐ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">AlgEquiv.ext</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">quotQuotEquivCommₐ</span><span class=\"o\">]</span>\n  <span class=\"n\">delta</span> <span class=\"n\">FunLike.coe</span> <span class=\"c1\">-- times out without this</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but if you don't unfold <code>FunLike.coe</code> then it takes 10 seconds again.</p>",
        "id": 360308764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684769810
    },
    {
        "content": "<p>Apologies about second proof -- I had a <code>by</code> off the end of the screen and didn't notice the red underline :-(</p>",
        "id": 360308930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684769841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">quotQuotEquivComm_symmₐ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">quotQuotEquivCommₐ</span> <span class=\"n\">R</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">quotQuotEquivCommₐ</span>\n  <span class=\"c1\">-- `congr` now quick to finish, `rfl` slow</span>\n  <span class=\"n\">delta</span> <span class=\"n\">FunLike.coe</span>\n  <span class=\"c1\">-- now both are quick</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>So that's the heart of the matter. Why is <code>rfl</code> being derailed?</p>",
        "id": 360310207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684770120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.40.5Bsimp.5D.60.20attribute.20times.20out/near/360304100\">said</a>:</p>\n<blockquote>\n<p>So should I just add a <code>set_option maxHeartbeats 300000</code> here?</p>\n</blockquote>\n<p>Doing this would make it eligible for dsimp</p>",
        "id": 360391345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684796464
    }
]