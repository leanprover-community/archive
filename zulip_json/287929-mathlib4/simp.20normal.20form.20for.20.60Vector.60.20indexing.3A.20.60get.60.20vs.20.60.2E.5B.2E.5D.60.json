[
    {
        "content": "<p>In a <a href=\"https://github.com/leanprover-community/mathlib4/pull/4994/files/83029e04ff40f1c09dd708c6b4bb64e4a641356d#diff-9d6c2eff8e964215615a9f59bfa09637e60715ad1240789a252e37b49fb4559f\">recent PR</a> the question came up of what we want the simp normal form of indexing a <code>Vector \\a n</code> by a <code>Fin n</code> to be, either <code>Vector.get</code> or the <code>.[.]</code> notation.</p>\n<p>For <code>Array</code>, we take the <code>.[.]</code> notation as the normal form, while for <code>List</code> we use <code>List.get</code>.<br>\nBut, we generally don't index <code>List</code>'s as much.</p>\n<p>So, two questions for the community:</p>\n<ul>\n<li>Do we want to standardize on a consistent simp normal form, using either a <code>get</code> function or the <code>.[.]</code> notation, accros <code>List</code>, <code>Vector</code>, <code>Array</code>, and any other potential collections? And</li>\n<li>Which of the two forms should we use as the simp normal form for <code>Vector</code> in particular?</li>\n</ul>",
        "id": 367620676,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687177733
    },
    {
        "content": "<p>I would propose we use <code>.get</code> for <code>List</code> and <code>[.]</code> for <code>Array</code> and <code>Vector</code>.</p>",
        "id": 367622116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687178001
    },
    {
        "content": "<p>In fact, I'd propose we consider changing the definition of <code>Vector</code> to be in terms of <code>Array</code> rather than <code>List</code>!</p>",
        "id": 367622209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687178020
    },
    {
        "content": "<p>It turns out that <code>Std</code> has the following simp-lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">getElem_fin</span> <span class=\"o\">[</span><span class=\"n\">GetElem</span> <span class=\"n\">Cont</span> <span class=\"n\">Nat</span> <span class=\"n\">Elem</span> <span class=\"n\">Dom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i.1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Meaning that the actual simp normal form will be <code>x[i.1]</code>/<code>x[Fin.val i]</code>. This seems like quite a footgun to me: it's not immediately apparent that a goal with <code>x[i]</code> got rewritten to <code>x[↑i]</code> (the arrow is quite small in my vscode font, at least), making it surprising to see that a simp-lemma which accidentally used the <code>x[i]</code> form is not actually firing.</p>\n<p>How is this problem avoided with <code>Array</code>? Should we maybe get rid of the <code>Fin</code> instance of <code>GetElem</code> entirely, so that simp-lemmas can not use the wrong form?</p>",
        "id": 367972638,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687275477
    },
    {
        "content": "<p>The linter will catch that.</p>",
        "id": 367987172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687278318
    },
    {
        "content": "<p>Which linter? It doesn't seem to be working for me (I'm not seeing any indication in vscode at least) in a theorem where I wrote <code>v[i.succ.1]</code>, even though it seems the normal form for that one should rather be <code>v[i.1 + 1]'i.succ.2</code></p>",
        "id": 368131540,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687330694
    },
    {
        "content": "<p>that one is in simp normal form though?</p>",
        "id": 368133401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687331242
    },
    {
        "content": "<p>well maybe <code>i.succ.1</code> should be rewritten to <code>i.1 + 1</code> but maybe there is no such simp lemma (or it's not a dsimp lemma, which would be required in this case since there is a dependency)</p>",
        "id": 368133788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687331317
    },
    {
        "content": "<p>Is it? The following makes me believe that there is already such a lemma, or am I misunderstanding what simp normal form means?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i.succ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- Goal is: `⊢ v[↑i + 1] = z`</span>\n</code></pre></div>\n<p>EDIT: added imports for an MWE</p>\n<p>EDIT2: Hmm, <code>by dsimp</code> doesn't rewrite the goal, so I guess your point about it not being a dsimp lemma is true. I'm afraid I don't entirely know how that relates to determining what the simp normal form is/should be. I'm just seeing that my goals with <code>v[i.succ.1]</code> got rewritten to <code>v[i.1 + 1]</code> by simp, so I concluded the latter should be the normal form. Is this wrong?</p>",
        "id": 368135824,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687331896
    },
    {
        "content": "<p>You just wrote something different than your previous message. The example has <code>v[i.succ]</code> but you are talking about <code>v[i.succ.1]</code></p>",
        "id": 368162002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687337952
    },
    {
        "content": "<p>Ah, you're right, it seems I minimized wrongly, sorry about that. Changing it to <code>v[i.succ.1]</code> doesn't actually change anything, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i.succ.1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- Goal is: `⊢ v[↑i + 1] = z`</span>\n</code></pre></div>\n<p>Back to my original question about the linter: the following is also not showing any indication, even though this one I am 100% sure it is not in simp-normal form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bad_theorem</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- Goal: ⊢ v[↑i] = v[↑j]</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is this linter supposed to run interactively, or do I need to explicitly run something?</p>",
        "id": 368181767,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687342161
    },
    {
        "content": "<p>You need to put <code>#lint</code> at the bottom of your file for the simp linters</p>",
        "id": 368214556,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687349366
    },
    {
        "content": "<p>Also, <code>bad_theorem</code> is not a simp theorem no matter how you write the indices, since the rhs has more variables than the lhs so simp won't know what to rewrite to.  Syntactically, it could be a <code>@[congr]</code> lemma--but there's no need to add it since the built-in congruences work just fine for <code>getElem</code>.</p>",
        "id": 368291212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687363591
    },
    {
        "content": "<p>Sure, I wasn't actually proposing to add <code>bad_theorem</code> as a simp-lemma, I just wanted an example of something which is definitely not in simp normal form.</p>",
        "id": 368850214,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687518170
    },
    {
        "content": "<p>Regardless, I now have 2 PRs for mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4994\">#4994</a> makes the change to <code>v[i.1]</code> as normal form, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5421\">#5421</a> is an alternate proposal that removes the <code>simp</code> attribute from <code>getElem_fin</code> and use <code>v[i]</code> as the normal form. (I've also submitted a PR to <code>std</code> which removes the simp attribute directly at the declaration).</p>\n<p>For both PRs I've only made the changes in <code>Vector</code> files, so CI is still failing on downstream files. But, I wanted to first get some more opinions and reach consensus on which direction to go in. So far, there are three options:</p>\n<ol>\n<li>Stick with the status quo: <code>Vector.get</code> (my personal preference, but there does seem consensus that we want to move away from it)</li>\n<li>Use <code>getElem</code> with <code>Fin</code>, i.e., <code>v[i]</code>. This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/5421\">#5421</a></li>\n<li>Use <code>getElem</code> with <code>Nat</code>, i.e., <code>v[i.1]</code>. This is the original PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4994\">#4994</a></li>\n</ol>\n<h2>Benefits of option 1</h2>\n<p>I like <code>get xs i</code> because it has less implicit variables and no type class synthesis. <br>\nThus, it plays nicer with type inference. Then again, there is no harm in specifying types a bit more, so I don't particularly mind this point.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xs.get</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>More importantly, moving to <code>getElem</code> causes a few simp lemmas to no longer infer their arguments automatically.<br>\nCompare the three versions of <code>scanl_get</code> (Admittedly, by far the most affected proof, most proofs were fine).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The original/Option 1: `get v i` -/</span>\n<span class=\"o\">(</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i.succ</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">i.elim0</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">i0</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.eq_zero</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">scanl_singleton</span><span class=\"o\">,</span> <span class=\"n\">i0</span><span class=\"o\">,</span> <span class=\"n\">get_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get_eq_get</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cons_head_tail</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">scanl_cons</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">Fin.cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_zero</span><span class=\"o\">,</span> <span class=\"n\">scanl_head</span><span class=\"o\">,</span> <span class=\"n\">Fin.castSucc_zero</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i'</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Fin.castSucc_fin_succ</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Option 2: `v[i]` -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">scanl_get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)[</span><span class=\"n\">i.succ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)[</span><span class=\"n\">Fin.castSucc</span> <span class=\"n\">i</span><span class=\"o\">])</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">i.elim0</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">i0</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.eq_zero</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">scanl_singleton</span><span class=\"o\">,</span> <span class=\"n\">i0</span><span class=\"o\">,</span> <span class=\"n\">get_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get_eq_get</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cons_head_tail</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">scanl_cons</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">Fin.cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">get_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">scanl_head</span><span class=\"o\">,</span> <span class=\"n\">Fin.castSucc_zero</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i'</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Fin.castSucc_fin_succ</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">get_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)]</span>\n\n<span class=\"sd\">/-- Option 3: `v[i.1]` -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">scanl_get</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)[</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">i.succ.2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">scanl</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">)[</span><span class=\"n\">i.1</span><span class=\"o\">])</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i.1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">i.elim0</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">scanl_singleton</span><span class=\"o\">,</span> <span class=\"n\">get_zero</span><span class=\"o\">,</span> <span class=\"n\">get_eq_get</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">cons_head_tail</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">scanl_cons</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i.1</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">Fin.cases</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get_zero_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">get_zero_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">scanl_head</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i'</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_succ</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">get_cons_succ_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">get_cons_succ_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>In particular, notice how in option 1 <code>simp[get_zero]</code> and <code>simp[get_cons_succ]</code> just work, but in the other two we have to specify the value of <code>n</code> for it to do the rewrite.</p>\n<h2>Benefits of Option 2 (vs. option 3)</h2>\n<p>My reason for suggesting the alternative PR, is that for option 3 the normal form of what used to be <code>get xs i.succ</code> should now be spelled <code>xs[i.1 + 1]'i.succ.2</code>, which felt a bit to verbose to me. <br>\nI think the effect of sticking with option 3 (<code>v[i.1]</code>) would be that the easiest way to state theorems would be to avoid <code>Fin</code> entirely, and state them as <code>v[i]'h</code> where <code>i : Nat</code> and <code>h : i &lt; n</code>. I quite like the <code>Fin</code> abstraction, so I would prefer to keep it!</p>",
        "id": 368861585,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687520458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I'd like your opinions on this in particular!</p>",
        "id": 368862671,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687520679
    },
    {
        "content": "<p>The part I don't understand re: the std change is that std doesn't define <code>Vector</code> or <code>Bitvec</code> at all, the theorems under discussion are about arrays</p>",
        "id": 368863323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687520814
    },
    {
        "content": "<p>Well, <code>Std</code> provides a generic <code>GetElem \\a (Fin n) _ _</code> instance for any implementors of <code>GetElem \\a Nat _ _</code>. We want to index <code>Vector</code>s with both <code>Nat</code> and <code>Fin n</code>, so we define <code>GetElem (Vector a n) Nat</code>, which gives us <code>GetElem (Vector a n) (Fin n) _ _</code> (but also <code>GetElem (Vector a n) (Fin m) _ _</code>, with appropriate side conditions ) from this generic instance in <code>Std</code>. The lemma in question, that rewrites <code>v[i]</code> for <code>i : Fin n</code> into <code>v[i.1]</code> applies to all versions of this generic <code>GetElem cont (Fin n)</code> instance, so also Vectors</p>",
        "id": 368866192,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687521355
    },
    {
        "content": "<p>I guess an alternative would be to restrict that <code>GetElem</code> instance to just Arrays. In fact, I would be in favour of that, so that we can have a more specialized instance for <code>Vector</code>, only allowing a <code>Fin n</code> to index a <code>Vector \\a n</code> if the indices match.</p>",
        "id": 368866502,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687521413
    },
    {
        "content": "<p>Actually, part way through the change I've had to define a specialized <code>GetElem</code> instance anyway</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">GetElem</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">elem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n      <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">elem</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span> <span class=\"n\">where</span>\n    <span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">GetElem</span>\n</code></pre></div>\n<p>Which makes the std change no longer necessary. Still, I do think we should restrict that generic instance from <code>std</code> to just Arrays anyway.<br>\nIf we have both then the following is accepted, but refers to the generic instance (the indices don't match), and rewrites that do use the new instance won't apply.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Since the pretty printer does not show which instance is used by default, this makes for very painful debugging</p>",
        "id": 368872355,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687522497
    },
    {
        "content": "<p>I think you should stick with <code>Vector.get</code>. The generic instance is supposed to unfold in this way, while the <code>Vector.get</code> function can assert that the indices match</p>",
        "id": 368883521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687524639
    },
    {
        "content": "<p>the reasons seem to be similar as to why <code>List</code> uses a <code>get</code> function</p>",
        "id": 368883844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687524701
    },
    {
        "content": "<p>I think <code>List</code> can't even define the stricter <code>GetElem</code> function, since the approriate index type <code>Fin (xs.length)</code> depends on the concrete list being indexed, whereas for <code>Vector</code> we know the index from the vector type alone.</p>",
        "id": 368891858,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687526105
    },
    {
        "content": "<p>would that mean there'd be no <code>GetElem</code> for <code>Fin n</code> for <code>Array</code> at all? Because one thing I've always found confusing with this is that something like a classical loop in <code>do</code> notation won't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Array.range</span> <span class=\"n\">a.size</span> <span class=\"k\">do</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">res</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"n\">return</span> <span class=\"n\">res</span>\n</code></pre></div>\n<p>and thought if there was a similar function <code>range'  (a : Array) -&gt; Array (Fin a.size)</code> then that should work with the <code>GetElem</code> instance the way you'd expect it to</p>",
        "id": 368914774,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687530246
    },
    {
        "content": "<p>There is one, it's the problematic generic instance, but it effectively ignores the index <code>n</code>. Instead, it takes as side-condition a proof that the value <code>i.val</code> is less than the size of the array/vector.</p>",
        "id": 368915511,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687530401
    },
    {
        "content": "<p>So that you can index an array of size 2 with <code>1 : Fin 4</code>, even though the index is too high (because the actual value is still in bounds)</p>",
        "id": 368915685,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687530436
    },
    {
        "content": "<p>I see, yeah that sounds more problematic for sure, maybe it makes sense to just have an instance for the case that <code>n</code> is the size of the array? I'm not sure I understand why the instance by itself is problematic for simp normal form?</p>",
        "id": 368916500,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687530587
    },
    {
        "content": "<p>Because if you write <code>v[Fin.succ i]</code>, then the side condition is sometimes inferred as <code>(Fin.succ i).1 &lt; n</code> and other times as <code>i.1 + 1 &lt; n</code>. These are different types, so if your lemma used on side condition, and your goal another, then the rewrite fails</p>",
        "id": 368917129,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687530703
    },
    {
        "content": "<p>oh I guess you mean if you have an instance you want to be able to reason about it and thus need a simp normal form, yeah that makes sense</p>",
        "id": 368918009,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687530871
    },
    {
        "content": "<p>I have a strong preference for either Option 1 or Option 2 as a simp normal form. Using <code>Fin</code> is usually much better than using a <code>Nat</code> and a proof. The proof term can make rewriting difficult, since it depends on the <code>Nat</code>, and we can define operations on <code>Fin</code> which bundle the proofs, and avoid us having to write the same proofs over again. We've already moved away from <code>List.NthLE</code> in the transition from mathlib3 to mathlib4.</p>",
        "id": 368919867,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687531183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form.20for.20.60Vector.60.20indexing.3A.20.60get.60.20vs.20.60.2E.5B.2E.5D.60/near/368916500\">said</a>:</p>\n<blockquote>\n<p>I see, yeah that sounds more problematic for sure, maybe it makes sense to just have an instance for the case that <code>n</code> is the size of the array? I'm not sure I understand why the instance by itself is problematic for simp normal form?</p>\n</blockquote>\n<p>Also, for arrays it's not possible to only have an instance for <code>Fin (xs.size)</code>, since the index type is not able to depend on the concrete array being indexed. I guess that's why the current instance is set up with the side condition</p>",
        "id": 368923485,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687531801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form.20for.20.60Vector.60.20indexing.3A.20.60get.60.20vs.20.60.2E.5B.2E.5D.60/near/368919867\">said</a>:</p>\n<blockquote>\n<p>I have a strong preference for either Option 1 or Option 2 as a simp normal form. Using <code>Fin</code> is usually much better than using a <code>Nat</code> and a proof. The proof term can make rewriting difficult, since it depends on the <code>Nat</code>, and we can define operations on <code>Fin</code> which bundle the proofs, and avoid us having to write the same proofs over again. We've already moved away from <code>List.NthLE</code> in the transition from mathlib3 to mathlib4.</p>\n</blockquote>\n<p>I guess with Mario preferring not to make the changes to Std needed to make Option 2 not be a big footgun, that leaves only Option 1 (sticking with <code>Vector.get</code>)?</p>",
        "id": 368923956,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687531884
    },
    {
        "content": "<p>Cool. Option 1 seems to be a good one.</p>",
        "id": 368927912,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1687532586
    },
    {
        "content": "<p>Allright, then I'll restore the PR to using <code>get</code></p>",
        "id": 368930220,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687532964
    }
]