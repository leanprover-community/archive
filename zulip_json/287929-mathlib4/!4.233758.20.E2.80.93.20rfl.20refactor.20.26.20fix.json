[
    {
        "content": "<p>I want to check something before I go forward. The following is the <code>for</code> loop with surrounding commands in <code>rfl (goal : MVarId) : MetaM Unit</code> in the present state of the PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">reflExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getMatch</span> <span class=\"n\">rel</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">goal.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"n\">lem</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"o\">()</span> <span class=\"k\">else</span>\n        <span class=\"n\">logError</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MessageData.tagged</span> <span class=\"bp\">`</span><span class=\"n\">Tactic.unsolvedGoals</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unsolved goals</span><span class=\"se\">\\n</span>\n<span class=\"s2\">          {goalsToMessageData gs}\"</span>\n    <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">s.restore</span>\n      <span class=\"n\">throw</span> <span class=\"n\">e</span>\n  <span class=\"n\">throwError</span> <span class=\"s2\">\"rfl failed, no lemma with @[refl] applies\"</span>\n</code></pre></div>\n<p>The following is the original, in <code>TacticM</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">for</span> <span class=\"n\">lem</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">reflExt.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getMatch</span> <span class=\"n\">rel</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"n\">lem</span><span class=\"o\">))</span>\n      <span class=\"n\">return</span>\n    <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">s.restore</span>\n      <span class=\"n\">throw</span> <span class=\"n\">e</span>\n  <span class=\"n\">throwError</span> <span class=\"s2\">\"rfl failed, no lemma with @[refl] applies\"</span>\n</code></pre></div>\n<p>Questions I have:</p>\n<ol>\n<li>\n<p>Why do we <code>throw e</code> from the <code>catch</code> block? Does this exit the <code>for</code> loop early? It seems not to. If not, why <code>throw</code> it at all, since we don't catch and use it?</p>\n</li>\n<li>\n<p>Should we restore the state if <code>apply</code> fails to close the goal? That is, should we exit to the catch with</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n     <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">goal.apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"n\">lem</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"o\">()</span> <span class=\"k\">else</span>\n        <span class=\"n\">logError</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MessageData.tagged</span> <span class=\"bp\">`</span><span class=\"n\">Tactic.unsolvedGoals</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unsolved goals</span><span class=\"se\">\\n</span>\n<span class=\"s2\">          {goalsToMessageData gs}\"</span>\n        <span class=\"n\">failure</span>\n</code></pre></div>\n<p>Though, does <code>try</code> not automatically restore the state? (I was under the impression it did...)</p>",
        "id": 355006450,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682990802
    },
    {
        "content": "<ol>\n<li>Yes, it exits early. Why throw? Because we want to report the apply failure as the error message, not \"no <code>@[refl]</code> lemma applies\"</li>\n</ol>",
        "id": 355006611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682990899
    },
    {
        "content": "<ol start=\"2\">\n<li>No we should not restore the state, the state at an error should reflect whatever was happening at the time as an aid to debugging. No, <code>try</code> does not automatically restore the state. <code>&lt;|&gt;</code> does.</li>\n</ol>",
        "id": 355006857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991069
    },
    {
        "content": "<p>Ah, ok. But, re (1)...why would we want to exit the for loop early if a single lemma in the loop failed to be applied? Wouldn't we want to try the rest and continue the loop?</p>",
        "id": 355006963,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991143
    },
    {
        "content": "<p>I guess we're betting on the <code>getMatch</code> meaning that <code>apply</code> always succeeds (in <code>MetaM</code>), and if it doesn't, tell us.</p>",
        "id": 355007132,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991271
    },
    {
        "content": "<p>that's a fair point. Both <code>throw</code> and <code>return</code> mean we will exit early, so the loop is not a loop</p>",
        "id": 355007220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991336
    },
    {
        "content": "<p>better would be to stash the first error and report it if we fall out of the loop</p>",
        "id": 355007306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991391
    },
    {
        "content": "<p>Makes sense—just the first one, or all of them in e.g. an Array?</p>",
        "id": 355007383,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991457
    },
    {
        "content": "<p>just the first</p>",
        "id": 355007386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991464
    },
    {
        "content": "<p>Ok, cool!</p>",
        "id": 355007390,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991473
    },
    {
        "content": "<p>you can't report multiple errors like that</p>",
        "id": 355007395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991480
    },
    {
        "content": "<p>if this mattered more, we might want to consider putting in those structured trace messages so that you can get a tree of emoji explosions and see all the errors</p>",
        "id": 355007513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991550
    },
    {
        "content": "<p>ah, gotcha! So wait, is reporting this kind of error something we'd want to log or <code>throw</code>? I can see <code>logError</code> doesn't fail/except out, but I'm not sure when we want to use each</p>",
        "id": 355007708,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991707
    },
    {
        "content": "<p>Or, is logging even compatible with <code>Exception</code>s?</p>",
        "id": 355007806,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682991747
    },
    {
        "content": "<p><code>throw</code> means early exit. Use it if you can't complete the task given by the type signature</p>",
        "id": 355008225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682991998
    },
    {
        "content": "<p>logging and Exceptions are mostly orthogonal. <code>logError</code> means put a red squiggle, <code>throw</code> means early exit until you get caught by something, like a tactic control flow operator like <code>repeat</code> / <code>try</code>, or the default handler that turns the exception into a <code>logError</code> otherwise</p>",
        "id": 355008436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682992139
    },
    {
        "content": "<p>actually thinking about control flow manipulation is probably the easiest way to understand things here. If you use <code>logError</code> and continue on failure, then if the user uses <code>try rfl</code> when it doesn't apply they will get a red squiggle on <code>rfl</code> anyway</p>",
        "id": 355008634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682992242
    },
    {
        "content": "<p>Ah, ok—thanks for clearing that up, I didn't know how red squiggles were born!</p>",
        "id": 355008700,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682992297
    },
    {
        "content": "<p>So I guess the stashing-exception approach has us manipulate control flow when the loop ends, but varies <em>why</em> (i.e. \"because the loop ended\" or \"because the loop ended and some <code>apply</code> failed in the middle of it\")</p>",
        "id": 355009185,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682992582
    },
    {
        "content": "<p>re (2): good to have the <code>try</code> behavior cleared up! :) Having the state reflect what was happening at the error suggests that if we stash the first exception and fall out of the loop, we actually want to <em>save</em> the state when the exception is encountered, then restore it before throwing that exception (if we do)</p>",
        "id": 355009370,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682992710
    },
    {
        "content": "<p>Is there any reason to restore the <code>MetaM</code> state before each round of the <code>for</code> loop just under normal (successful) circumstances? Tbh I'm a little unclear on what state <code>MetaM</code> carries—mvar assignments, for one, I'm guessing? Seems like this gets by without worrying about that, though...and I'm a little unclear on how.</p>",
        "id": 355009633,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682992895
    },
    {
        "content": "<p>In both cases, <code>rfl</code> has \"failed\". (More precisely, <code>rfl</code> fails whenever no <code>@[refl]</code> lemma applies.) The only difference is the error message we produce</p>",
        "id": 355009636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682992900
    },
    {
        "content": "<p>the mvar assignments are the important thing. If the apply fails we want to roll back any partial unification that happened when applying the next lemma</p>",
        "id": 355009730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682992949
    },
    {
        "content": "<p>That 's what I would expect! But, why does it seem to work if we don't do that?</p>",
        "id": 355009822,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682992996
    },
    {
        "content": "<p>because the loop wasn't a loop?</p>",
        "id": 355009839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682993009
    },
    {
        "content": "<p>I don't think the multiple refl lemma case has been tested at all</p>",
        "id": 355009904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682993048
    },
    {
        "content": "<p>the discrimination tree is good enough to avoid needing it most of the time</p>",
        "id": 355009933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682993069
    },
    {
        "content": "<p>ahh ok! makes sense.</p>",
        "id": 355009987,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682993107
    },
    {
        "content": "<p>Ok, I think that's sufficient for me to fix it up! :) ty!</p>",
        "id": 355010102,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682993193
    },
    {
        "content": "<p>One last thing: is the raw <code>throw e</code> in the case of an <code>apply</code> exception what we want? Seems like it might be mysterious. Or do we want something more descriptive, involving <code>throwError \"... {e.toMessageData}\"</code>? (Currently it just <code>throw</code>s.)</p>",
        "id": 355037274,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683007680
    },
    {
        "content": "<p>the error message from apply is pretty okay, something like <code>couldn't match 2 + 2 = 5 with ?a &lt;= ?a</code>, I don't see much reason to put a header on that</p>",
        "id": 355134176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683030384
    },
    {
        "content": "<p>Ok, so the benchmark says:</p>\n<blockquote>\n<p>There were significant changes against commit 42f68ca:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Benchmark</span>                      <span class=\"n\">Metric</span>         <span class=\"n\">Change</span>\n  <span class=\"bp\">====================================================</span>\n<span class=\"bp\">-</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Tactic.Relation.Rfl</span>   <span class=\"n\">instructions</span>    <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>in red—does this mean that that file took 13.9% longer (which is fine, since it’s very quick in absolute time), or that instructions(?) “from” that file took longer?</p>",
        "id": 355244990,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683054826
    },
    {
        "content": "<p>There were 13.9% more CPU instructions, which essentially means it got 13.9% slower</p>",
        "id": 355245300,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683054922
    },
    {
        "content": "<p>But, just while processing that file, or overall, <em>because</em> of that file?</p>",
        "id": 355245483,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683054969
    },
    {
        "content": "<p>(Well, not quite “overall”, but what I mean is—are these instructions that will be reused when declarations in <code>Mathlib.Tactic.Relation.Rfl</code> are used in <em>other</em> files?)</p>",
        "id": 355246954,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683055441
    },
    {
        "content": "<p>While processing that specific file</p>",
        "id": 355248105,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683055789
    },
    {
        "content": "<p>Ok, ty! :)</p>",
        "id": 355248268,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683055817
    }
]