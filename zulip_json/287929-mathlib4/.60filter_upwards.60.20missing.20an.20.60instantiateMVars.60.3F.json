[
    {
        "content": "<p>Can someone take a look at the error on <code>filter_upwards</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4396\">!4#4396</a>? It looks to me like that tactic is missing an <code>instantiateMVars</code> (assuming my understanding of the associated repercussions is correct). I apologize, I don't have time to minimize right now, and probably won't until Sunday at least.</p>",
        "id": 361374041,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685117203
    },
    {
        "content": "<p>I can look at it (at a quick glance I can only say that there are some things about the tactic that look fishy), but my meta-todo list is growing pretty quickly, so it might take me a bit to get to this.</p>",
        "id": 361452307,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685141724
    },
    {
        "content": "<blockquote>\n<p>at a quick glance I can only say that there are some things about the tactic that look fishy</p>\n</blockquote>\n<p>ðŸ«£</p>",
        "id": 361457213,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685144639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> If I understand it correctly, the issue has something to do with how <code>Filter.mp_mem</code> was being partially elaborated in the tactic monad. I pushed some changes that seem to work to get at least past the calc block in <code>tendsto_div_of_monotone_of_exists_subseq_tendsto_div</code>, and hopefully the rest of mathlib still compiles!</p>",
        "id": 361463401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685149546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> The only real functional change I made to <code>filter_upwards</code> was to stay within a single <code>TermElabM</code> monad execution when elaborating <code>Filter.mp_mem</code> and its arguments. I don't <em>really</em> know why it was failing, but the feeling I have is that <code>Tactic.elabTerm</code> is safe if you know you'll get a fully elaborated term, but there are still some lingering metavariables here. The other changes were mostly to take advantage of some Lean 4 features. (<span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> I know we should all be able to take criticism of code quality in stride, but I tend to think working together works out better if we make concrete suggestions and observations rather than mentioning our thoughts on general quality. Most code smells, so no need to point it out <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 361515268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685178742
    },
    {
        "content": "<p>I think it's a bit confusing that there are two <code>elabTerm</code>s: one in <code>Lean.Elab.Tactic</code> and one in <code>Lean.Elab.Term</code>.</p>",
        "id": 361515418,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685178790
    },
    {
        "content": "<p>Thanks a lot for the explanation <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>! <br>\nNo worries about code criticism, it's pretty much the only tactic I wrote in Lean4 so it's not surprising that it's badly written <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 361549683,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685187503
    },
    {
        "content": "<p>I am sorry if it came across as 'this tactic is badly written', I meant to say 'I cannot diagnose the problem right away, but I have some ideas how to improve the tactic'. I have certainly written worse meta-code. There not a lot of documentation about writing tactics and it is sometimes very hard to find out which are the correct functions to use.</p>",
        "id": 361609952,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685205081
    },
    {
        "content": "<p>Also I find it very impressive to do this as a first tactic!</p>",
        "id": 361610153,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685205151
    }
]