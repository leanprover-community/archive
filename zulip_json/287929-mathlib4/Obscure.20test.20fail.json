[
    {
        "content": "<p>Can somebody help me understand what went wrong in <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6959383845/job/18936498084\">https://github.com/leanprover-community/mathlib4/actions/runs/6959383845/job/18936498084</a> ? I don't understand the logs (or rather what's expected and what's not), nor why any of my PR would have made the test suite fail.</p>",
        "id": 403647614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700678776
    },
    {
        "content": "<p>It seems the failing file is <code>test.LibrarySearch.basic</code>, but I can't reproduce locally. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, since you authored most of the file, any idea?</p>",
        "id": 403648098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700679024
    },
    {
        "content": "<p>(this is PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7712\">#7712</a>)</p>",
        "id": 403652577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700680809
    },
    {
        "content": "<p>I think that tests have been silenced recently: I wonder whether this has something to do with that.</p>",
        "id": 403662641,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700685783
    },
    {
        "content": "<p>Some tests are not quiet on your branch:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>test/SimpRw.lean\ntest/SimpRw.lean:37:0:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>declaration<span class=\"w\"> </span>uses<span class=\"w\"> </span><span class=\"s1\">'sorry'</span>\n\ntest/apply_fun.lean\ntest/apply_fun.lean:271:2:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>this<span class=\"w\"> </span>tactic<span class=\"w\"> </span>is<span class=\"w\"> </span>never<span class=\"w\"> </span>executed<span class=\"w\"> </span><span class=\"o\">[</span>linter.unreachableTactic<span class=\"o\">]</span>\n\ntest/convert2.lean\ntest/convert2.lean:10:2:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>this<span class=\"w\"> </span>tactic<span class=\"w\"> </span>is<span class=\"w\"> </span>never<span class=\"w\"> </span>executed<span class=\"w\"> </span><span class=\"o\">[</span>linter.unreachableTactic<span class=\"o\">]</span>\ntest/convert2.lean:11:2:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>this<span class=\"w\"> </span>tactic<span class=\"w\"> </span>is<span class=\"w\"> </span>never<span class=\"w\"> </span>executed<span class=\"w\"> </span><span class=\"o\">[</span>linter.unreachableTactic<span class=\"o\">]</span>\n\ntest/norm_cast.lean\ntest/norm_cast.lean:143:9:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>unused<span class=\"w\"> </span>variable<span class=\"w\"> </span><span class=\"sb\">`</span>h<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">[</span>linter.unusedVariables<span class=\"o\">]</span>\n</code></pre></div>\n<p>Ironically, I do not think that the culprit is <code>LibrarySearch</code>.</p>",
        "id": 403663900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700686449
    },
    {
        "content": "<p>Yes, but... why?</p>",
        "id": 403664117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700686579
    },
    {
        "content": "<p>I don't know: the files on your branch look identical to the ones on master...</p>",
        "id": 403664452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700686787
    },
    {
        "content": "<p>However, I am pretty sure that it is the script in <code>GNUmakefile</code> that is responsible for the failure.</p>",
        "id": 403664605,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700686843
    },
    {
        "content": "<p>In fact, the files appear to be noisy on master as well.</p>",
        "id": 403665446,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700687237
    },
    {
        "content": "<p>If you look at current master, the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6962561238/job/18946513386\">tests fail</a>, but CI passes anyway.</p>",
        "id": 403666093,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700687621
    },
    {
        "content": "<p>Maybe the failure is enough to get the branch CI complain, but not the one of master?  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<p>The PR was <a href=\"https://github.com/leanprover-community/mathlib4/pull/8438\">#8438</a>.</p>",
        "id": 403666160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700687644
    },
    {
        "content": "<p>Oh I see it, I think</p>",
        "id": 403666890,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688089
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span>lake<span class=\"w\"> </span>env<span class=\"w\"> </span>lean<span class=\"w\"> </span>test/<span class=\"nv\">$*</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>test/<span class=\"nv\">$*</span>.log\n<span class=\"w\">    </span>@if<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-s<span class=\"w\"> </span>test/<span class=\"nv\">$*</span>.log<span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"Error: Test output is not empty\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>cat<span class=\"w\"> </span>test/<span class=\"nv\">$*</span>.log<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span>rm<span class=\"w\"> </span>-f<span class=\"w\"> </span>test/<span class=\"nv\">$*</span>.log<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">        </span><span class=\"nb\">exit</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span><span class=\"k\">fi</span>\n<span class=\"w\">    </span>@rm<span class=\"w\"> </span>-f<span class=\"w\"> </span>test/<span class=\"nv\">$*</span>.log\n</code></pre></div>",
        "id": 403666916,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688106
    },
    {
        "content": "<p>Is it the <code>exit</code> instead of <code>return</code>?</p>",
        "id": 403666920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688109
    },
    {
        "content": "<p>It's trying to <code>rm</code> a file called <code>exit</code> because there's no semicolon</p>",
        "id": 403667010,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 403667016,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688149
    },
    {
        "content": "<p>But then why is it failing for <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 403667136,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688231
    },
    {
        "content": "<p>Something is weird, but very good catch with the <code>;</code>.</p>",
        "id": 403667198,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688256
    },
    {
        "content": "<p>Maybe the test is actually failing? Or crashing?</p>",
        "id": 403667246,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688287
    },
    {
        "content": "<p>And the output thing is just a red herring</p>",
        "id": 403667279,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688310
    },
    {
        "content": "<p>On master and on Yaël PR the test files are identical, they also fail on master, but CI is happy with the errors...</p>",
        "id": 403667360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688361
    },
    {
        "content": "<p>On my computer, <code>rm -f nonexistentfile</code> does nothing with exit code <code>0</code>.</p>",
        "id": 403667564,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688449
    },
    {
        "content": "<p>Yeah, I was about to mention that.</p>",
        "id": 403667601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700688477
    },
    {
        "content": "<p>But maybe, the computers where the branch CIs and the master CI run have different options?</p>",
        "id": 403667662,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688499
    },
    {
        "content": "<p>Thanks for catching that semicolon <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> : <a href=\"https://github.com/leanprover-community/mathlib4/pull/8580\">#8580</a></p>",
        "id": 403667973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700688659
    },
    {
        "content": "<p>As far as I can tell, <code>rm</code> has a non-zero exit code almost exclusively if it is trying to remove a file that cannot be deleted due to issues with permissions.</p>",
        "id": 403667996,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688671
    },
    {
        "content": "<p>Maybe the \"user\" running the two CIs, on master and on CIs, have different permissions?  I am really not sure.</p>",
        "id": 403668060,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Obscure.20test.20fail/near/403667973\">said</a>:</p>\n<blockquote>\n<p>Thanks for catching that semicolon <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> : <a href=\"https://github.com/leanprover-community/mathlib4/pull/8580\">#8580</a></p>\n</blockquote>\n<p>Still not passing the tests!  How ironic...</p>",
        "id": 403668175,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688763
    },
    {
        "content": "<p><code>rm</code> seems to be unrelated to the noisy tests error. I'm seeing <code>test/norm_cast.lean</code> for example having an unused variable locally</p>",
        "id": 403668198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700688778
    },
    {
        "content": "<p>Oh yes, there are 4 test files that are noisy.</p>",
        "id": 403668266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Obscure.20test.20fail/near/403668175\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Obscure.20test.20fail/near/403667973\">said</a>:</p>\n<blockquote>\n<p>Thanks for catching that semicolon <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> : <a href=\"https://github.com/leanprover-community/mathlib4/pull/8580\">#8580</a></p>\n</blockquote>\n<p>Still not passing the tests!  How ironic...</p>\n</blockquote>\n<p>Tests that don't run in CI fail, that's pretty much a given :)</p>",
        "id": 403668270,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">convert2.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">this</span> <span class=\"n\">tactic</span> <span class=\"n\">is</span> <span class=\"n\">never</span> <span class=\"n\">executed</span> <span class=\"o\">[</span><span class=\"n\">linter.unreachableTactic</span><span class=\"o\">]</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">convert2.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">this</span> <span class=\"n\">tactic</span> <span class=\"n\">is</span> <span class=\"n\">never</span> <span class=\"n\">executed</span> <span class=\"o\">[</span><span class=\"n\">linter.unreachableTactic</span><span class=\"o\">]</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">apply_fun.lean</span><span class=\"o\">:</span><span class=\"mi\">271</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">this</span> <span class=\"n\">tactic</span> <span class=\"n\">is</span> <span class=\"n\">never</span> <span class=\"n\">executed</span> <span class=\"o\">[</span><span class=\"n\">linter.unreachableTactic</span><span class=\"o\">]</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">norm_cast.lean</span><span class=\"o\">:</span><span class=\"mi\">143</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">unused</span> <span class=\"kd\">variable</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">linter.unusedVariables</span><span class=\"o\">]</span>\n<span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">SimpRw.lean</span><span class=\"o\">:</span><span class=\"mi\">37</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 403668377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700688871
    },
    {
        "content": "<p>I guess I'll just silence these tests and add the fixes to the PR</p>",
        "id": 403668422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700688910
    },
    {
        "content": "<p>Those same files are noisy on master as well.</p>",
        "id": 403668437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700688920
    },
    {
        "content": "<p>One day, there will be a formally verified CI...</p>",
        "id": 403668842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700689151
    },
    {
        "content": "<p>I've noticed strange things with linter errors becoming noisy on my own branches before, especially the unused variable linter. Not in tests, but inside theory files.</p>",
        "id": 403668848,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700689153
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8580\">#8580</a> managed to silence the tests, and Damiano put it on the maintainer merge queue.</p>",
        "id": 403672578,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700691171
    },
    {
        "content": "<p>My apologies about the missing semicolon. :-(</p>",
        "id": 403683062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697778
    },
    {
        "content": "<p>I guess you are contractually forced to do propaganda in favor of white-space sensitivity instead of end of line marks.</p>",
        "id": 403684427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700698786
    },
    {
        "content": "<p>It is not clear that the semicolon was the issue though.  The tests still failed with the semicolon added.  They only stopped failing when Kyle silenced them.</p>",
        "id": 403685821,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700699935
    },
    {
        "content": "<p>It still fails, it seems: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6966936788/job/18957910162\">https://github.com/leanprover-community/mathlib4/actions/runs/6966936788/job/18957910162</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 403790506,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700746634
    },
    {
        "content": "<p>Have you tried bisecting which changes are causing the failure?</p>",
        "id": 403791111,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700746842
    },
    {
        "content": "<p>Is that stray <code>.run</code> after what looks like a lean file-path correct?  I'm on mobile, so limited capabilities!</p>",
        "id": 403791249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700746896
    },
    {
        "content": "<p>Yeah, that's the make target, that's fine</p>",
        "id": 403791384,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700746932
    },
    {
        "content": "<p>Sorry no I haven't. I'm already overtime on Lean stuff and I don't want the police (my director of studies) to find out.</p>",
        "id": 403792220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700747253
    },
    {
        "content": "<p>Happening again: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6978507007/job/18990033890\">https://github.com/leanprover-community/mathlib4/actions/runs/6978507007/job/18990033890</a></p>",
        "id": 404012091,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700854100
    },
    {
        "content": "<p>Is it hitting just me somehow?</p>",
        "id": 404012106,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700854111
    },
    {
        "content": "<p>Wait, on a completely different pr? Do they have anything in common?</p>",
        "id": 404018254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700858774
    },
    {
        "content": "<p>They touch the same files.</p>",
        "id": 404018701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700859182
    },
    {
        "content": "<p>Do your PRs include a file in <code>test</code> with extension <code>.log</code>?  <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 404021857,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700861641
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7810\">#7810</a> hit this too - should we disable the test?</p>",
        "id": 404419066,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701093909
    },
    {
        "content": "<p>I don't understand why it doesn't print \"Error: Test output is not empty\" or the output, unless lean itself causing the makefile to exit?</p>",
        "id": 404474803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701112588
    },
    {
        "content": "<p>Should be be teeing the file instead so that we actually see any errors?</p>",
        "id": 404479780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701114802
    },
    {
        "content": "<p>Could we come to a conclusion? This is blocking my PRs with no actionable solution from my part.</p>",
        "id": 404861575,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701263195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Obscure.20test.20fail/near/404479780\">said</a>:</p>\n<blockquote>\n<p>Should be be teeing the file instead so that we actually see any errors?</p>\n</blockquote>\n<p>Yes, that's a good idea. As Kyle mentioned, lean itself returns 1 in case <code>#guard_msgs</code> sees an unexpected message.</p>",
        "id": 404866229,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701264697
    },
    {
        "content": "<p>I guess we should enable a Makefile <code>pipefail</code> equivalent (if it exists) so we don't lose Lean's exit code, though.</p>",
        "id": 404867290,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701265002
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8716\">#8716</a></p>",
        "id": 404880807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701268861
    },
    {
        "content": "<p>I can confirm this fixed the issue, and now the actual failure message can be seen again</p>",
        "id": 405122125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701352435
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/exact.3F.20test.20failure.3A.20le_antisymm.20vs.20ge_antisymm\">#mathlib4 &gt; exact? test failure: le_antisymm vs ge_antisymm</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 405139808,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701357582
    },
    {
        "content": "<p>I'm not sure how <code>exact?</code> could be nondeterministic here, or how these changes could have affected <code>exact?</code>, sorry.</p>",
        "id": 405264586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701401860
    },
    {
        "content": "<p>Remove the offending test??</p>",
        "id": 405264593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701401865
    }
]