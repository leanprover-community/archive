[
    {
        "content": "<p>I'm preparing some teaching/demo and decided to do something other than real analysis (next week I need to introduce a bunch of young algebraic geometer to Lean). After a lot of thinking about what would be a simple algebra theorem that everybody likes, I settled on the Chinese remainder theorem. So my target was to prepare a Lean file with a proof outline and sorries. I went to mathlib4 and was shocked to see the length of <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/RingTheory/Ideal/Quotient.lean#L375-L440\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/RingTheory/Ideal/Quotient.lean#L375-L440</a>. The docstring says <code>/-- Chinese Remainder Theorem. Eisenbud Ex.2.6. Similar to Atiyah-Macdonald 1.10 and Stacks 00DT -/</code> so I thought: \"let's see if Bourbaki can cut this in half\". And indeed they can. But elaboration is slow. Does anyone understand why <code>coprime_infᵢ_of_coprime</code> is so slow in the code below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Quotient</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PiNotation</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span> <span class=\"n\">Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kd\">@[scoped term_parser]</span>\n<span class=\"kd\">def</span> <span class=\"n\">piNotation</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span><span class=\"o\">:</span><span class=\"n\">leadPrec</span>\n  <span class=\"n\">unicodeSymbol</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"Pi\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">many1</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">binderIdent</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">optType</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n\n<span class=\"kd\">@[scoped macro PiNotation.piNotation]</span> <span class=\"kd\">def</span> <span class=\"n\">replacePiNotation</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">_</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Term.forall</span> <span class=\"n\">args</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">@[scoped delab forallE]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabPi</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabForall</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">←</span>\n    <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PiNotation</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">PiNotation</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.sum_univ_eq_single</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span>  <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_single</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">tauto</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finset.mem_univ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">chinese</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Ideal</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ideal.add_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_eq_top</span><span class=\"o\">,</span> <span class=\"n\">eq_top_iff_one</span><span class=\"o\">,</span> <span class=\"n\">add_eq_sup</span><span class=\"o\">,</span> <span class=\"n\">Submodule.mem_sup</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">chineseMap</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→+*</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.lift</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">ringHom</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.mem_inf</span><span class=\"bp\">ᵢ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Quotient.eq_zero_iff_mem.2</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chineseMap_mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">chineseMap</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chineseMap_mk'</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">chineseMap</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chineseMap_injective</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">chineseMap</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">apply</span>  <span class=\"n\">Quotient.eq.2</span>\n  <span class=\"n\">apply</span>  <span class=\"o\">(</span><span class=\"n\">Submodule.mem_inf</span><span class=\"bp\">ᵢ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Quotient.eq.1</span>\n  <span class=\"n\">change</span> <span class=\"n\">chineseMap</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">chineseMap</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hxy</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_of_coprime</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">J</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hf</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"bp\">⨅</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">J</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Finset.induction_on</span> <span class=\"n\">_</span> <span class=\"n\">P</span> <span class=\"n\">_</span> <span class=\"n\">s</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.not_mem_empty</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_neg</span><span class=\"o\">,</span> <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_top</span><span class=\"o\">,</span> <span class=\"n\">Submodule.add_eq_sup</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span>\n               <span class=\"n\">top_le_iff</span><span class=\"o\">,</span> <span class=\"n\">le_top</span><span class=\"o\">,</span> <span class=\"n\">sup_of_le_right</span><span class=\"o\">,</span> <span class=\"n\">one_eq_top</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"n\">_hi</span> <span class=\"n\">hs</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_insert</span><span class=\"o\">,</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span> <span class=\"n\">one_eq_top</span><span class=\"o\">,</span> <span class=\"n\">eq_top_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_eq_top</span><span class=\"o\">]</span>\n    <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">J</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_insert_of_mem</span> <span class=\"n\">hj</span><span class=\"o\">)</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">this.symm</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_insert_self</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add</span> <span class=\"n\">mul_le_left</span> <span class=\"n\">mul_le_inf</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chineseMap_surjective_aux</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.erase</span> <span class=\"n\">Finset.univ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hI</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ne_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hj</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">Ideal.add_eq_one_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">coprime_inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_of_coprime</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">hue</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_of_add_eq'</span> <span class=\"n\">hue</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">Ideal.Quotient.eq_zero_iff_mem.mpr</span> <span class=\"n\">hu</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ideal.Quotient.eq_zero_iff_mem.mpr</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">he</span>\n    <span class=\"n\">tauto</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chineseMap_surjective</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">chineseMap</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.out'</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">choose</span> <span class=\"n\">e</span> <span class=\"n\">he</span> <span class=\"n\">using</span> <span class=\"n\">chineseMap_surjective_aux</span> <span class=\"n\">hI</span>\n  <span class=\"n\">use</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">chineseMap_mk'</span><span class=\"o\">,</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_univ_eq_single</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">he</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Quotient.out_eq'</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">he</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span> <span class=\"n\">hj.symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">chineseIso</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≃+*</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Equiv.ofBijective</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">chineseMap_injective</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">chineseMap_surjective</span> <span class=\"n\">hI</span><span class=\"o\">⟩,</span> <span class=\"n\">chineseMap</span> <span class=\"n\">I</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Ideal</span>\n<span class=\"kd\">end</span> <span class=\"n\">chinese</span>\n</code></pre></div>",
        "id": 355858022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683225309
    },
    {
        "content": "<p>Note the beginning of the file is Kyle's Pi notation from <a href=\"#narrow/stream/287929-mathlib4/topic/Add.20pi.20notation.20back.20.3F/near/355787931\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Add.20pi.20notation.20back.20.3F/near/355787931</a></p>",
        "id": 355858134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683225352
    },
    {
        "content": "<p>Note also the line <code>simp only [Finset.not_mem_empty, not_false_eq_true, infᵢ_neg, infᵢ_top, Submodule.add_eq_sup, ge_iff_le,\n               top_le_iff, le_top, sup_of_le_right, one_eq_top]</code> is me desperately trying to make things faster. This should be <code>simp</code></p>",
        "id": 355858912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683225556
    },
    {
        "content": "<p>On the math side, to be totally fair, this isn't exactly how this proof is written in Bourbaki. Bourbaki is a bit shy when it comes to using the <code>SemiRing</code> structure on <code>Ideal R</code> and they use elements of <code>R</code> instead of the neat</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">this.symm</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">J</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_insert_self</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">⊓</span> <span class=\"n\">J</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add</span> <span class=\"n\">mul_le_left</span> <span class=\"n\">mul_le_inf</span>\n</code></pre></div>",
        "id": 355859636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683225734
    },
    {
        "content": "<p>But of course they don't assume any commutativity, I did it only because we don't have a nice theory of ring quotients in the non-commutative case.</p>",
        "id": 355859900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683225808
    },
    {
        "content": "<p>It's just the usual problem:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>        [] [3.441595s] ✅ instHAdd =?= instHAdd ▼\n          [] [0.000000s] ✅ Ideal R =?= Ideal R\n          [] [3.441552s] ✅ Distrib.toAdd =?= AddZeroClass.toAdd ▼\n            [] [3.441306s] ✅ NonUnitalNonAssocSemiring.toDistrib.2 =?= AddMonoid.toAddZeroClass.2 ▼\n              [] [3.441276s] ✅ AddSemigroup.toAdd =?= AddSemigroup.toAdd ▼\n                [] [0.000000s] ✅ Ideal R =?= Ideal R\n                [] [0.000001s] ✅ OrderedAddCommMonoid (Ideal R) =?= OrderedAddCommMonoid (Ideal R)\n                [] [3.441196s] ✅ AddMonoid.toAddSemigroup =?= AddMonoid.toAddSemigroup ▼\n                  [] [3.441171s] ✅ AddCommMonoid.toAddMonoid.1 =?= AddCommMonoid.toAddMonoid.1 ▼\n                    [] [3.440987s] ✅ AddMonoid.toAddSemigroup =?= AddSemigroup.mk (_ : ∀ (a b c : Submodule R R), a + b + c = a + (b + c)) ▼\n                      [] [3.440971s] ✅ AddCommMonoid.toAddMonoid.1 =?= AddSemigroup.mk (_ : ∀ (a b c : Submodule R R), a + b + c = a + (b + c)) ▼\n                        [] [3.440939s] ✅ AddSemigroup.mk\n                              (_ :\n                                ∀ (x x_1 x_2 : Submodule R R),\n                                  x ⊔ x_1 ⊔ x_2 =\n                                    x ⊔\n                                      (x_1 ⊔\n                                        x_2)) =?= AddSemigroup.mk\n                              (_ : ∀ (a b c : Submodule R R), a + b + c = a + (b + c)) ▼\n                          [] [2.729004s] ✅ Submodule.pointwiseAddCommMonoid.proof_1 =?= Submodule.instCanonicallyOrderedAddMonoidSubmodule.proof_1 ▼\n                            [] [2.728993s] ✅ ∀ (x x_1 x_2 : Submodule R R),\n                                  x ⊔ x_1 ⊔ x_2 = x ⊔ (x_1 ⊔ x_2) =?= ∀ (a b c : Submodule R R), a + b + c = a + (b + c) ▶\n</code></pre></div>\n<p>etc etc, the typeclass inference system is checking that zillions of proofs are defeq to other proofs of the same theorem.</p>",
        "id": 355860424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683225947
    },
    {
        "content": "<p>Here's the profiler output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>typeclass inference of HAdd took 327ms\ntypeclass inference of HAdd took 322ms\ntypeclass inference of OfNat took 313ms\ntypeclass inference of HAdd took 334ms\ntypeclass inference of HAdd took 267ms\ntypeclass inference of HAdd took 265ms\ntypeclass inference of OfNat took 256ms\ntypeclass inference of HAdd took 229ms\ntypeclass inference of OrderTop took 371ms\ntypeclass inference of OrderTop took 127ms\nsimp took 3.1s\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 386ms\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 167ms\ntypeclass inference of HAdd took 257ms\ntypeclass inference of HAdd took 258ms\ntypeclass inference of OfNat took 232ms\ntypeclass inference of HAdd took 251ms\ntypeclass inference of HAdd took 252ms\ntypeclass inference of HAdd took 247ms\ntypeclass inference of HAdd took 227ms\ntypeclass inference of HAdd took 227ms\ntypeclass inference of HAdd took 250ms\ntypeclass inference of Add took 248ms\ntypeclass inference of CovariantClass took 8.38s\ntypeclass inference of CovariantClass took 5.2s\ntypeclass inference of MulOneClass took 159ms\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 178ms\ntypeclass inference of CharZero took 1.02s\ntypeclass inference of AddMonoidWithOne took 140ms\nring took 257ms\ntactic execution of calcTactic took 1.45s\n</code></pre></div>\n<p>I think <code>CovariantClass</code> is Gabriel's least favourite typeclass.</p>",
        "id": 355861493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683226228
    },
    {
        "content": "<p>Switching eta experiment on creates a huge new problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">12</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CharZero</span> <span class=\"n\">took</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>which is interesting</p>",
        "id": 355862778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683226616
    },
    {
        "content": "<p>On the <code>reenableeta</code> branch the <code>simp only</code> call breaks but if you just change it back to <code>simp</code> then the entire file compiles very quickly, all issues are gone.</p>",
        "id": 355865488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683227488
    },
    {
        "content": "<p>Thanks a lot for investigating this Kevin!</p>",
        "id": 355867276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683228116
    },
    {
        "content": "<p>Is the <code>reenableeta</code> usable for all purposes?</p>",
        "id": 355867343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683228134
    },
    {
        "content": "<p>There's a rebased <code>reenableeta-230503</code> branch (<a href=\"https://github.com/leanprover-community/mathlib4/pull/3780\">!4#3780</a>) too</p>",
        "id": 355867565,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683228229
    },
    {
        "content": "<p>Does anyone has instruction on how to use that <code>reenableeta</code> in a project? Say I want to run a Lean tutorial nextweek using a project depending on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3780\">!4#3780</a>. What is the procedure? What should I write in the <code>lakefile.lean</code> and <code>lean-toolchain</code> of my project?</p>",
        "id": 356140535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683311918
    },
    {
        "content": "<p><code>gebner/lean4:reenableeta-230411</code> is the toolchain I think</p>",
        "id": 356141269,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683312141
    },
    {
        "content": "<p>But you might have to spend a little time rectifying the desired files in mathlib with it</p>",
        "id": 356141444,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683312211
    },
    {
        "content": "<p>My understanding is that the PR I linked does the rectifying for me</p>",
        "id": 356143080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683312721
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 356143232,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683312760
    },
    {
        "content": "<p>Ok. I am way behind the times. <code>semorrison/lean4:reenableeta230503</code> for the toolchain and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"45c211377067ed816d18ce60a1c06688dbfb1e4e\"</span>\n</code></pre></div>\n<p>seem to be working for me</p>",
        "id": 356145390,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683313448
    },
    {
        "content": "<p>I have to build everything though</p>",
        "id": 356145483,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683313477
    },
    {
        "content": "<p>Thank you very much for investigating this. I'll try here.</p>",
        "id": 356145767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683313566
    },
    {
        "content": "<p>I give up, I can't get anything to build with this branch.</p>",
        "id": 356149112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683314727
    },
    {
        "content": "<p>I just merged that branch with <code>SG_test3</code> (to do some unrelated experiment) and the resulting thing compiled fine for me.</p>",
        "id": 356149424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683314835
    },
    {
        "content": "<p>For instance I get an error at the very end of Data.Quot</p>",
        "id": 356149553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683314877
    },
    {
        "content": "<p>I'll try to build mathlib directly rather than as a dependency of my project</p>",
        "id": 356149814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683314961
    },
    {
        "content": "<p>Oh! I was using mathlib4's <code>origin/reenableeta-230503</code></p>",
        "id": 356149831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683314967
    },
    {
        "content": "<p>I can't say I master the mysteries of updating the dependencies of a project using lake.</p>",
        "id": 356150078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315042
    },
    {
        "content": "<p>Yeah I wasn't doing that at all, I was entirely within mathlib just switching between different branches, merging and compiling manually.</p>",
        "id": 356150222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683315094
    },
    {
        "content": "<p>Ok, I can see lake didn't even manage to git pull mathlib correctly.</p>",
        "id": 356150244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315103
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">test</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"45c211377067ed816d18ce60a1c06688dbfb1e4e\"</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Test</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>is the full contents of my <code>lakefile.lean</code></p>",
        "id": 356150266,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683315111
    },
    {
        "content": "<p>That require line is not enough for lake to use the correct commit from mathlib</p>",
        "id": 356150455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315170
    },
    {
        "content": "<p>I seem to be building something with the <code>semorrison/lean4:reenableeta230503</code> toolchain</p>",
        "id": 356150678,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683315244
    },
    {
        "content": "<p>I'll try a different random combination of <code>lake update</code>, <code>lake exe cache get</code> and <code>lake build</code>. I miss <code>leanproject up</code> so much...</p>",
        "id": 356150692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315247
    },
    {
        "content": "<p>It works!</p>",
        "id": 356151007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315377
    },
    {
        "content": "<p>I ran </p>\n<ul>\n<li><code>lake update</code> </li>\n<li><code>lake exe cache get!</code> (failed silently)</li>\n<li><code>lake build</code> (multiple times for some reason)</li>\n</ul>",
        "id": 356151038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683315391
    },
    {
        "content": "<p>Thanks everybody. I'll try to use that. Next step will be to to bring in the linarith PRs in this branch</p>",
        "id": 356151105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683315417
    },
    {
        "content": "<p>I like the fact that <code>lake</code> is much quicker to type than <code>leanproject</code> though :-)</p>",
        "id": 356165754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683321150
    },
    {
        "content": "<p>I delegated the cancel_denoms PR, hopefully that helps.</p>",
        "id": 356203665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683343812
    },
    {
        "content": "<p>I need to lint <a href=\"https://github.com/leanprover-community/mathlib4/pull/3780\">!4#3780</a>, but may not have an opportunity for 48 hours.</p>",
        "id": 356203692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683343846
    },
    {
        "content": "<p>I think it lints now, and has been bumped again to master.</p>",
        "id": 356230241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683358769
    }
]