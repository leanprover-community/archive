[
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib4/issues/5348\">https://github.com/leanprover-community/mathlib4/issues/5348</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.WLOG</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"c1\">-- works as expected if this line is commented out</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hxy'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">H</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"bp\">;</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hxy'</span> <span class=\"bp\">↦</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span>\n    <span class=\"n\">z</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 368314649,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687368759
    },
    {
        "content": "<p>I'm going to try to debug this.</p>",
        "id": 368314731,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687368783
    },
    {
        "content": "<p>If anyone has ideas about what might be going wrong, please let me know.</p>",
        "id": 368314805,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687368795
    },
    {
        "content": "<p><code>wlog</code> is absorbing the <code>let z := 10</code> into the context that it's generalizing.</p>",
        "id": 368317114,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687369347
    },
    {
        "content": "<p>Hm... maybe we should filter out <code>ldecl</code>s here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/ee000bf3b049cd25914bfa67960159c9c51d2827/Mathlib/Tactic/WLOG.lean#L79\">https://github.com/leanprover-community/mathlib4/blob/ee000bf3b049cd25914bfa67960159c9c51d2827/Mathlib/Tactic/WLOG.lean#L79</a></p>",
        "id": 368318943,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687369770
    },
    {
        "content": "<p>Seems reasonable. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 368319271,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687369838
    },
    {
        "content": "<p>I don't think I'm equipped to debug/fix this issue</p>",
        "id": 368353171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687378680
    },
    {
        "content": "<p><code>revertedFVars</code> is used for the later <code>introNP</code>, the <code>tryClearMany</code>, and the <code>mkAppN</code>; I do agree we ought to filter out the ldecls, but just for the <code>mkAppN</code> application, as they're still relevant for the <code>introNP</code> and <code>tryClearMany</code> usages. I'll try this and make a PR! :)</p>",
        "id": 368401131,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687401570
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5362\">!4#5362</a>, once it passes CI</p>",
        "id": 368403279,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687402820
    }
]