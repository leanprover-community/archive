[
    {
        "content": "<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Support</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Lift</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Continuity</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">class</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ConvergenceSpace</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuousAt</span> <span class=\"o\">[</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">F</span><span class=\"o\">⦄,</span> <span class=\"n\">converges</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">continuousAt</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_le_dom</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_</span> <span class=\"n\">p'</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_inf_dom_left</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ConvergenceSpace</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">continuous_</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intros</span> <span class=\"n\">hcont</span>\n<span class=\"n\">exact</span> <span class=\"n\">continuous_le_dom</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">hcont</span> <span class=\"c1\">-- THIS PART IS COMPLANING</span>\n</code></pre></div>\n<p>For some reason, <code>inf_le_left</code> doesn't work as written - I have to qualify it with using <code>@inf_le_left</code>. The Lean 3 version of this code was working without having to use <code>@inf_le_left</code>, so I am scratching my head wondering what happened. Help.</p>",
        "id": 394014482,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696027603
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inf_le_left#doc\">docs#inf_le_left</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_le_left\">docs3#inf_le_left</a></p>",
        "id": 394015923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696028518
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is a diamond, right? If you filled in the sorries, does your problem still exist?</p>",
        "id": 394016407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696028815
    },
    {
        "content": "<p>The error (which you could have posted, rather than just saying that Lean is complaining) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">continuous_le_dom</span> <span class=\"n\">inf_le_left</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">inf_le_left</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Preorder.toLE</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">LE.le</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">instLEConvergenceSpace</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊓</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which just says \"you have defined two different &lt;='s on the same object\"</p>",
        "id": 394016534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696028898
    },
    {
        "content": "<p>Just removing the <code>LE</code> instance makes the code compile.</p>",
        "id": 394016598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696028953
    },
    {
        "content": "<p>In the real code, I have instances for basically every every lattice related class.</p>",
        "id": 394016995,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696029205
    },
    {
        "content": "<p>I can't remove the LE instance because that's where I am defining what &lt;= means. The CompleteLattice instance should be making use of this instance. I'm not defining another one.</p>",
        "id": 394017226,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696029358
    },
    {
        "content": "<p>If my understanding is correct then CompleteLattice does not require LE, it extends LE, so I believe your claim that the complete lattice instance should be making use of the LE instance is false. If however your two definitions of LE coincide then the problem will go away. In your example above, they don't.</p>",
        "id": 394018695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696030277
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CompleteLattice#doc\">docs#CompleteLattice</a></p>",
        "id": 394018745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696030319
    },
    {
        "content": "<p>Huh, I literally cannot see the definition in the docs on mobile because of some scrolling issue so I can't check if what I'm claiming above is true</p>",
        "id": 394018903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696030434
    },
    {
        "content": "<p>One bit of the hierarchy is <code>CompleteLattice &gt; Lattice &gt; SemilatticeSup &gt; PartialOrder &gt; Preorder &gt; LE</code>, where <code>&gt;</code> denotes <code>extends</code>.</p>",
        "id": 394019167,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696030581
    },
    {
        "content": "<p>So indeed <code>CompleteLattice</code> transitively extends <code>LE</code>.</p>",
        "id": 394019181,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696030594
    },
    {
        "content": "<p>Kevin's initial point is that the act of using <code>sorry</code> to turn your code into a mwe is actually the cause of the problem</p>",
        "id": 394019841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696031139
    },
    {
        "content": "<p>Perhaps the problem exists in your sorry-free code too, but the mwe you posted doesn't represent that any more (and so we need a new one without the <code>sorry</code>s)</p>",
        "id": 394019916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696031180
    },
    {
        "content": "<p>In general you can almost always replace <em>proofs</em> with sorries when making a mwe, but replacing data with sorries often ruins things</p>",
        "id": 394020008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696031280
    },
    {
        "content": "<p>Yes, that code would not work in lean 3 either.</p>",
        "id": 394051159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696052663
    },
    {
        "content": "<p>OK, here is the code: <a href=\"https://gist.github.com/berndlosert/c04746c0b552b7cd5f620f2152e3edad\">https://gist.github.com/berndlosert/c04746c0b552b7cd5f620f2152e3edad</a>. I tried making a MWE but it didn't have problem I am experiencing with the full code.</p>",
        "id": 394062837,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696061437
    },
    {
        "content": "<p>Your problem is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 394064184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696062672
    },
    {
        "content": "<p>Without the @, lean is filling the F and x arguments</p>",
        "id": 394064194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696062690
    },
    {
        "content": "<p>You want </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">ConvergenceSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 394064204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696062711
    },
    {
        "content": "<p>(or the unicode for that)</p>",
        "id": 394064209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696062718
    },
    {
        "content": "<p>Oh really? Wow, I would have never guessed that.</p>",
        "id": 394065435,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696063722
    },
    {
        "content": "<p>So {{ }} prevents lean from autoinfering those arguments? I don't remember.</p>",
        "id": 394065559,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696063826
    },
    {
        "content": "<p>Using {{ }} breaks some of the intros where I declare F x.</p>",
        "id": 394065647,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696063923
    },
    {
        "content": "<p>The {{ }} brackets mean that the implicit arguments will be filled only when the next argument is filled. Normal { } brackets fill the implicit arguments immediately.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">⦃</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">foo</span> <span class=\"c1\">-- fun a =&gt; a</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">bar</span> <span class=\"c1\">-- fun ⦃α⦄ a =&gt; a</span>\n</code></pre></div>\n<p>In the second example, using <code>bar</code> doesn't immediately try to fill in the value of <code>α</code>, but will only do so when given an argument.</p>",
        "id": 394071225,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696068717
    },
    {
        "content": "<p>The mechanics still baffles me. Suppose I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n<span class=\"n\">p</span> <span class=\"bp\">≤'</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and I am in a context with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span>\n<span class=\"n\">hle'</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤'</span> <span class=\"n\">q</span>\n<span class=\"n\">hconv</span> <span class=\"o\">:</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>How does<code>hle hconv</code> differ from <code>hle' hconv</code>?</p>",
        "id": 394072348,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696069590
    },
    {
        "content": "<p>I don't think there should be any difference. If there's a problem, can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">le'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">⦄,</span> <span class=\"n\">p</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">le'</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type checks</span>\n</code></pre></div>",
        "id": 394072632,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696069822
    },
    {
        "content": "<p>Well, there is a difference because I was just told to use {{ }} instead.</p>",
        "id": 394072708,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696069876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Problem.20inferring.20usage.20of.20inf_le_left/near/394071225\">said</a>:</p>\n<blockquote>\n<p>The {{ }} brackets mean that the implicit arguments will be filled only when the next argument is filled. Normal { } brackets fill the implicit arguments immediately.</p>\n</blockquote>\n<p>The difference is only <em>before</em> you fill in any arguments. Once you supply <code>hconv</code> to <code>hle</code> or <code>hle'</code>, everything behaves the same.</p>",
        "id": 394072804,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696069935
    },
    {
        "content": "<p>The reason {{ }} is better here is because you will never end up with a context in which</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hle'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>This is because Lean will fill in the <code>F</code> and <code>x</code> arguments for you, so you'll be left with a context of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hle'</span> <span class=\"o\">:</span> <span class=\"n\">converges_</span> <span class=\"n\">p</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"n\">converges_</span> <span class=\"n\">q</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 394072893,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696070003
    },
    {
        "content": "<p>That's what I though too, but it still complains like in this example:<br>\n<a href=\"/user_uploads/3121/ZbZ6GXaq6bIkaWOUxw8s41L6/Screenshot-2023-09-30-at-12.37.38.png\">Screenshot-2023-09-30-at-12.37.38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZbZ6GXaq6bIkaWOUxw8s41L6/Screenshot-2023-09-30-at-12.37.38.png\" title=\"Screenshot-2023-09-30-at-12.37.38.png\"><img src=\"/user_uploads/3121/ZbZ6GXaq6bIkaWOUxw8s41L6/Screenshot-2023-09-30-at-12.37.38.png\"></a></div>",
        "id": 394073235,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696070277
    },
    {
        "content": "<p>In order to fix that problem, I have to use <code>@hle F x</code> and <code>@hle' F x</code>.</p>",
        "id": 394073309,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696070311
    },
    {
        "content": "<p>In that case, it might be easier to just make the arguments explicit, or make a lemma <code>converges_of_le</code> that turns the {{ }} brackets into { } ones (i.e. filling the first two arguments). I think that using <code>hle</code> to mean two things (converges implies converges for all F and x, and converges implies converges for a particular F and x) is not good practice.</p>",
        "id": 394073462,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696070462
    },
    {
        "content": "<p>Yes, I'm also thinking of just making the arguments explicit to avoid all these problems.</p>",
        "id": 394073537,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696070511
    },
    {
        "content": "<p>Thank you everyone for your help.</p>",
        "id": 394073641,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696070597
    },
    {
        "content": "<p>One last question: It seems that the behavior with implicit arguments changed from Lean 3 to Lean 4 because I did not have these problems in the Lean 3 version of this code. Is this change in behavior documented somewhere?</p>",
        "id": 394075496,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696072189
    },
    {
        "content": "<p>Lean 3 and Lean 4 both had the same system for handling implicit arguments, but there might have been a difference in the way <code>LE</code> is elaborated.</p>",
        "id": 394076079,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696072692
    },
    {
        "content": "<p>It might not even have been <code>LE</code>, there are a few things in the code that could have subtly changed.</p>",
        "id": 394076259,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1696072831
    },
    {
        "content": "<p>I see. Would mathport have caught this kind of problem and automagically fixed them?</p>",
        "id": 394076896,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1696073334
    },
    {
        "content": "<p>I guess you could try and find out, but certainly in general mathport output would not compile and sometimes a large amount of work needed to be done to fix it. This is why the port of a million lines of code took 8 months.</p>",
        "id": 394077506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696073879
    }
]