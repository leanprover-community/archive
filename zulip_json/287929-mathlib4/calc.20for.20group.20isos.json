[
    {
        "content": "<p>I was rubbish at <code>calc</code> in Lean 3 for years and right now I feel the same about Lean 4 <code>calc</code>. Should this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBC</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">hAB</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">hBC</span>\n</code></pre></div>\n<p>because right now I get two errors:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>scratch3.lean:6:2\ninvalid 'calc' step, left-hand-side is\n  Type ?u.1742 : Type (?u.1742 + 1)\nprevious right-hand-side is\n  MulOneClass.toMul : Mul B\n\nscratch3.lean:4:98\napplication type mismatch\n  MulEquiv ?m.1744\nargument\n  ?m.1744\nhas type\n  Mul B : Type\nbut is expected to have type\n  Type ?u.1742 : Type (?u.1742 + 1)\n</code></pre></div>",
        "id": 359072891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684354190
    },
    {
        "content": "<p>This probably needs a <code>Trans</code> instance</p>",
        "id": 359090614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684361254
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv#doc\">docs4#MulEquiv</a></p>",
        "id": 359090639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684361270
    },
    {
        "content": "<p>How do I insert <code>[Mul A]</code> into the <code>Trans</code> machinery?</p>",
        "id": 359091521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684361647
    },
    {
        "content": "<p><del>I think it's getting confused, and the answer is you don't? Just insert MulEquiv into it</del></p>",
        "id": 359092231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362019
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs4#Trans</a></p>",
        "id": 359092249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362029
    },
    {
        "content": "<p>Uh oh, this looks impossible</p>",
        "id": 359092316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362072
    },
    {
        "content": "<p><code>Trans (@MulEquiv A B) (@MulEquiv B C) (@MulEquiv A C)</code> maybe?</p>",
        "id": 359092752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">MulEquiv.trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBC</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">calc</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">hAB</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">hBC</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">scratch4.lean:8:2</span>\n<span class=\"cm\">invalid 'calc' step, left-hand-side is</span>\n<span class=\"cm\">  Type ?u.2425 : Type (?u.2425 + 1)</span>\n<span class=\"cm\">previous right-hand-side is</span>\n<span class=\"cm\">  MulOneClass.toMul : Mul B</span>\n\n<span class=\"cm\">scratch4.lean:6:98</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  MulEquiv ?m.2427</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  ?m.2427</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Mul B : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type ?u.2425 : Type (?u.2425 + 1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It looks like a parsing error to me?</p>",
        "id": 359093646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684362756
    },
    {
        "content": "<p>Can you turn on pp.explicit?</p>",
        "id": 359094216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363035
    },
    {
        "content": "<p>I think though this an indication that it's doomed after all</p>",
        "id": 359094338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363089
    },
    {
        "content": "<p>Well I only wanted it for that other thread and it looks like you've found a better solution anyway ;-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span><span class=\"bp\">-</span><span class=\"n\">side</span> <span class=\"n\">is</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2425</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.2425</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">previous</span> <span class=\"n\">right</span><span class=\"bp\">-</span><span class=\"n\">hand</span><span class=\"bp\">-</span><span class=\"n\">side</span> <span class=\"n\">is</span>\n  <span class=\"bp\">@</span><span class=\"n\">MulOneClass.toMul</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toMulOneClass</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivInvMonoid.toMonoid</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Group.toDivInvMonoid</span> <span class=\"n\">B</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>This is on <code>_ ≃* C</code></p>",
        "id": 359094425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363156
    },
    {
        "content": "<p>I think it's parsing <code>A ≃* B</code> as <code>(A) (≃) (* B)</code> maybe?</p>",
        "id": 359094472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363192
    },
    {
        "content": "<p>I don't think that's it</p>",
        "id": 359094574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363221
    },
    {
        "content": "<p>It can't be because that doesn't even typecheck</p>",
        "id": 359094590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363225
    },
    {
        "content": "<p>I think it needs A and B to be the last arguments of the relation</p>",
        "id": 359094616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363242
    },
    {
        "content": "<p>But they're not, the Mul A and Mul B arguments are</p>",
        "id": 359094634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363259
    },
    {
        "content": "<p>This worked in lean 3, though possibly only the community version</p>",
        "id": 359094724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363304
    },
    {
        "content": "<p>Basically any typeclass that expects something of the form <code> α → Sort*</code> as an argument becomes useless when you have side conditions like \"α is a group\" or \"equality on α is decidable\"</p>",
        "id": 359095210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363539
    },
    {
        "content": "<p>(another example is not being able to use the monad typeclasses for computable finsets)</p>",
        "id": 359095445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363640
    },
    {
        "content": "<p>Yeah, one error goes away if I add <code>instance : ∀ (G : Type _), Mul G := sorry</code>, but this is probably not a good instance for mathlib...</p>",
        "id": 359095551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363694
    },
    {
        "content": "<p>Working with category theory isos should also solve the problem, as there the typeclass is bundled</p>",
        "id": 359095618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363734
    },
    {
        "content": "<p>But I think it would be better to fix calc...</p>",
        "id": 359095645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363751
    },
    {
        "content": "<p>I'll open an issue but I guess it's low-priority?</p>",
        "id": 359095692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363787
    },
    {
        "content": "<p>It might be worth checking if mathlib ever uses calc in this way, and that I'm not hallucinating that it used to work in lean 3</p>",
        "id": 359095813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684363838
    },
    {
        "content": "<p>Huh,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_equiv.trans</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_mul</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 359096069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684363962
    },
    {
        "content": "<p>Lol, guess I imagined it</p>",
        "id": 359096272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684364059
    },
    {
        "content": "<p>Works fine with regular equivs in lean 3 (and this is used)</p>",
        "id": 359096295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684364073
    },
    {
        "content": "<p>I don't know how to search for a calc block with mul_equiv in (or indeed any equiv other than unadorned equiv)</p>",
        "id": 359096374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684364119
    },
    {
        "content": "<p><code>calc.*≃</code> in regex mode is good enough to find examples though (with calc on the same line as the first iso) (and none are adorned)</p>",
        "id": 359096416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684364148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20for.20group.20isos/near/359096295\">said</a>:</p>\n<blockquote>\n<p>Works fine with regular equivs in lean 3 (and this is used)</p>\n</blockquote>\n<p>This works in lean 4 too</p>",
        "id": 359096719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684364292
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2217\">lean4#2217</a> . Thanks for the help.</p>",
        "id": 359097930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684364927
    }
]