[
    {
        "content": "<p>Terence Tao was disappointed that Lean cannot provide numerical estimates for common functions. He specifically points out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rexp</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">rexp</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">quadratic_le_exp_of_nonneg</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">sqrt</span> <span class=\"mi\">7</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the first example works but requires an idea. I guess the second example would be doable pretty quickly deducing from concavity of <code>sqrt</code>that <code>sqrt x ≤ (x-9)/6+3</code> (the right-hand side is the first-order approximation at (9, 3)). And I don't want to think about the third example. But really all three examples should be <code>by norm_num</code>. How far are we from that? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 398953701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698433340
    },
    {
        "content": "<p>I’m working on fixed point interval arithmetic now, which could be one attack on this problem if it’s lifted to floating point (fixed point works only if one is willing do to manual work to pick the exponent).</p>",
        "id": 398956856,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698434783
    },
    {
        "content": "<p>I agree this kind of thing should be automated, but I'm not convinced <code>norm_num</code> is the tool. This sounds like a numeric approximation tactic, not numeral normalization.</p>",
        "id": 398958143,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698435380
    },
    {
        "content": "<p>Ok, I would be happy with  <code>approx_num</code>.</p>",
        "id": 398960041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698436446
    },
    {
        "content": "<p>I’ll share my interval arithmetic code once it’s in reasonable shape.  Unless someone else has a better version, in which case I’ll switch to that. :)</p>",
        "id": 398960332,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698436608
    },
    {
        "content": "<p>It uses only <code>UInt64</code> arithmetic, so no additional axioms (though it’ll be fastest with <code>reduce_bool</code>).</p>",
        "id": 398960408,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698436660
    },
    {
        "content": "<p>Incidentally, I tried this (thinking of a sequence of lemmas for <code>rexp 1</code> parallel to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.pi_gt_three#doc\">docs#Real.pi_gt_three</a>) and it failed. Looks like <code>linarith</code>'s parser needs to learn about <code>ofScientific</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_lt_rexp_1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rexp</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">rexp</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">rexp</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">two_lt_rexp_1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398960970,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1698436923
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Trivial.20calculations.20with.20Reals.3F/near/382244663\">Here</a> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> mentions he has some version of an <code>approx</code> tactic, but it's not clear to me if it is still in Lean 3, ported to Lean 4, almost ready for a PR, or what.</p>",
        "id": 398970376,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698441916
    },
    {
        "content": "<p>It's not almost ready for a PR. In lean 3 it was almost ready as a backend (there was no frontend to speak of), and since <a href=\"https://gist.github.com/digama0/fd3be96cd82e92535dbb420e86a8b1be\">mathporting</a> there is still a lot of stuff that has to be done manually to port the tactic part, and after that one also has to design a usable frontend. I tried to give this out as a project but it wasn't a good choice at the time, and right now I think there are other projects higher on the priority list for me.</p>",
        "id": 398977686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698446914
    },
    {
        "content": "<p>You could no doubt prove the third inequality along the lines of my Lean 3 example of bounding powers - <a href=\"#narrow/stream/208328-IMO-grand-challenge/topic/IMO.202020/near/212247641\">https://leanprover.zulipchat.com/#narrow/stream/208328-IMO-grand-challenge/topic/IMO.202020/near/212247641</a> (the bounds for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> are now in mathlib) - though of course an <code>approx</code> tactic would be much better.</p>",
        "id": 398994757,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1698457857
    },
    {
        "content": "<p>The square root example is at least straightforward by squaring both sides.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">7</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nonneg_le_nonneg_of_sq_le_sq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 399045561,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1698495580
    },
    {
        "content": "<p>For what it's worth this bound is loose enough that you can get away with some pretty bad estimates for the exponential case. That said this really should be a one-liner.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expon_help</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">exp</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Real.one_sub_div_pow_le_exp_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_le_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Real.one_sub_div_pow_le_exp_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inv_le_inv</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Real.exp_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">exp_le_exp.mpr</span> <span class=\"n\">expon_help</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">help</span>\n</code></pre></div>",
        "id": 399046465,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1698496259
    },
    {
        "content": "<p>A tactic like this has been desired for <a href=\"#narrow/stream/144837-PR-reviews/topic/.237214/near/243326068\">a while</a>.</p>",
        "id": 399048500,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698497821
    },
    {
        "content": "<p>I think for these lemmas one possible way is to evaluate <code>exp</code> and other terms to some precision using the taylor series using <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Complex/Exponential.html#Complex.exp_bound\\'\">Complex.exp_bound'</a> or their Real equivalent, then use <code>linarith</code> to handle the rest?</p>",
        "id": 399062635,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698507870
    },
    {
        "content": "<p>For the general tactic, maybe the approach used for the <a href=\"https://coqinterval.gitlabpages.inria.fr/\">Coq Interval</a> library is an idea?</p>\n<p><del>There's also something confusing me about <code>linarith</code></del> Never mind, it just can't deal with decimal notation... Replace the goal <code>4.96 =&gt; 496 / 100</code> and it works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"c1\">-- Note `exp (8/5) ≈  4.953032424395114803654286356423964256413`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">help</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">96</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Real.one_sub_div_pow_le_exp_neg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"mi\">9999</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:=</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inv_le_inv</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Real.exp_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- the bound obtained is `exp (8/5) ≤ 4.953666584191391635467168979...`</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- so maybe this could work?</span>\n</code></pre></div>",
        "id": 400038459,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698971190
    }
]