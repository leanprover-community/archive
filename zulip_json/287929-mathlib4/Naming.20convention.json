[
    {
        "content": "<p>I am still a bit confused about some name conventions... For example, are these names (from Algebra.BigOperators.RingEquiv <a href=\"https://github.com/leanprover-community/mathlib4/pull/1647\">mathlib4#1647</a>) correct: <code>RingEquiv.map_list_prod</code>,  <code>RingEquiv.map_multiset_prod</code>? <br>\nThat is, even though <code>List</code> and <code>Multiset</code> are types, they are not capitalised here because lowerCamelCase(?). I believe they are correct because I found similar examples, see for eg. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_list_prod#doc\">docs4#map_list_prod</a>.</p>",
        "id": 322083531,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1674056354
    },
    {
        "content": "<p>Yes, those are correct.</p>",
        "id": 322084867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674056668
    },
    {
        "content": "<p>Ok. Thanks!</p>",
        "id": 322084978,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1674056697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> has marked this topic as resolved.</p>",
        "id": 322084992,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674056701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> has marked this topic as unresolved.</p>",
        "id": 322233057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674120817
    },
    {
        "content": "<p>Is this the right name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">truncEquivFin_of_cardEq</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">truncEquivFin</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.trans</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n</code></pre></div>",
        "id": 322233063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674120819
    },
    {
        "content": "<p>Or should it be <code>truncEquivFinOfCardEq</code>?</p>",
        "id": 322233124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674120833
    },
    {
        "content": "<p>Also, shouldn't it be <code>FinType</code>/<code>FinSet</code>, with the second word capitalized as well?</p>",
        "id": 322287238,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674136998
    },
    {
        "content": "<p><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 322287509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674137076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span>, the rule we're using is that if we wrote it as <code>oneword</code> it remains as <code>Oneword</code>, but <code>two_words</code> goes to <code>TwoWords</code></p>",
        "id": 322287725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think we decided to prefer the <code>Of</code> name in a previous meeting; maybe see if you can find any matches for <code>Of</code> in existing lemma names?</p>",
        "id": 322287898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137167
    },
    {
        "content": "<p>So, <code>Zmod</code> or <code>ZMod</code>?</p>",
        "id": 322474290,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674209932
    },
    {
        "content": "<p>We have <code>Int.ModEq</code> so maybe <code>ZMod</code> for parallelism?</p>",
        "id": 322551595,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674231138
    },
    {
        "content": "<p>Any other thoughts on that? <a href=\"https://github.com/leanprover-community/mathlib4/pull/1713\">mathlib4#1713</a> is otherwise ready to go, but currently uses <code>Zmod</code> not <code>ZMod</code></p>",
        "id": 322998111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674473924
    },
    {
        "content": "<p>Does anyone know how I should handle a case where a class has a field <code>foo</code> but there's also a theorem <code>foo</code>?</p>",
        "id": 323300246,
        "sender_full_name": "zbatt",
        "timestamp": 1674578545
    },
    {
        "content": "<p>As in this case <a href=\"https://github.com/leanprover-community/mathlib4/pull/1817/files#diff-0fcce737a4ee880e8708637b10c88032ae1433cd34ad8623d1034a733e139e39R138\">here</a></p>",
        "id": 323300513,
        "sender_full_name": "zbatt",
        "timestamp": 1674578628
    },
    {
        "content": "<p>Here they are in different namespaces; is the issue just that you need to use <code>nonrec</code> or <code>_root_</code>, so that Lean doesn't think it's recursive?</p>",
        "id": 323301027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578750
    },
    {
        "content": "<p>to be honest I'm not entirely sure how nonrec or <code>_root_</code> work I'll look into it now</p>",
        "id": 323301262,
        "sender_full_name": "zbatt",
        "timestamp": 1674578791
    },
    {
        "content": "<p>Actually since you already wrote <code>Shelf.self_distrib</code> as the proof, it should Just Work with <code>theorem self_distrib [...]</code></p>",
        "id": 323302037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578990
    },
    {
        "content": "<p>since we're now in <code>namespace Rack</code></p>",
        "id": 323302075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579000
    },
    {
        "content": "<p>sorry what goes in the <code>[...]</code>? This currently doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">self_distrib</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span> <span class=\"bp\">◃</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">◃</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Shelf.self_distrib</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">rack.self_distrib</span> <span class=\"n\">Rack.self_distrib</span>\n</code></pre></div>",
        "id": 323302422,
        "sender_full_name": "zbatt",
        "timestamp": 1674579076
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 323302574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579109
    },
    {
        "content": "<p><code>invalid declaration name 'Rack.self_distrib', structure 'Rack' has field 'self_distrib'</code></p>",
        "id": 323302619,
        "sender_full_name": "zbatt",
        "timestamp": 1674579119
    },
    {
        "content": "<p>Oh sorry, that wasn't obvious and I thought the issue was something else.</p>",
        "id": 323302790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579148
    },
    {
        "content": "<p>sorry, my bad</p>",
        "id": 323302831,
        "sender_full_name": "zbatt",
        "timestamp": 1674579156
    },
    {
        "content": "<p>My impression now is that this theorem is not needed in Lean 4 at all, because of the difference between Lean 3 (new-style!) structures and Lean 4 structures</p>",
        "id": 323303405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579304
    },
    {
        "content": "<p>I would check that the output of <code>#check Rack.self_distrib</code> matches <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rack.self_distrib\">docs#rack.self_distrib</a>, and then #align the latter to the former, and add a porting note</p>",
        "id": 323303791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579394
    },
    {
        "content": "<p>it can't find it</p>",
        "id": 323304096,
        "sender_full_name": "zbatt",
        "timestamp": 1674579467
    },
    {
        "content": "<p>wait this is strange</p>",
        "id": 323304206,
        "sender_full_name": "zbatt",
        "timestamp": 1674579489
    },
    {
        "content": "<p>it was originally complaining that <code>'Rack' has field 'self_distrib'</code>, but if I get rid of the theorem and do <code>#check Rack.self_distrib</code> it tells me its unknown</p>",
        "id": 323304423,
        "sender_full_name": "zbatt",
        "timestamp": 1674579549
    },
    {
        "content": "<p>I'm trying to remember what the point of <code>rack.self_distrib</code> was. I <em>think</em> it's just meant to be a synonym for <code>shelf.self_distrib</code> but in the <code>rack</code> namespace, since structure extension can't help you with this.</p>",
        "id": 323304493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674579565
    },
    {
        "content": "<p>You might be able to replace it with <code>export Shelf (self_distrib)</code> (if I got that syntax right)</p>",
        "id": 323304653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674579602
    },
    {
        "content": "<p>that seems to have worked, thanks!</p>",
        "id": 323304817,
        "sender_full_name": "zbatt",
        "timestamp": 1674579635
    },
    {
        "content": "<p>though you run into the same issue with <code>act</code> and you don't seem able to export that in the same way</p>",
        "id": 323305693,
        "sender_full_name": "zbatt",
        "timestamp": 1674579873
    },
    {
        "content": "<p>It's fine renaming <code>rack.act</code> to <code>Rack.act'</code>. It's not used much, and its main purpose is to be an equivalence version of <code>shelf.act</code> if you need it.</p>",
        "id": 323306395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674580079
    },
    {
        "content": "<p>gotcha</p>",
        "id": 323306476,
        "sender_full_name": "zbatt",
        "timestamp": 1674580093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/323304653\">said</a>:</p>\n<blockquote>\n<p>You might be able to replace it with <code>export Shelf (self_distrib)</code> (if I got that syntax right)</p>\n</blockquote>\n<p>Hmm, but we don't want it to be accessible from the root namespace, do we?</p>",
        "id": 323309068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674580804
    },
    {
        "content": "<p>It won't be. In context, that's done within the <code>Rack</code> namespace.</p>",
        "id": 323309179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674580835
    },
    {
        "content": "<p>Oh, does <code>export</code> know about the namespace it's in? I alwasy it was just stripping away namespaces.</p>",
        "id": 323309962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674581058
    },
    {
        "content": "<p>The <code>export</code> and <code>open</code> commands create aliases (which are not the same sort of thing as what you get from the alias command, confusingly)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n<span class=\"kn\">export</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- unknown identifier</span>\n<span class=\"k\">#check</span> <span class=\"n\">B.x</span> <span class=\"c1\">-- A.x : Nat</span>\n</code></pre></div>",
        "id": 323311235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674581413
    },
    {
        "content": "<p>The difference between <code>export</code> and <code>open</code> is whether these aliases work outside the current namespace.</p>",
        "id": 323311434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674581488
    },
    {
        "content": "<p>Why do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_Icc#doc\">docs4#Set.mem_Icc</a> instead of <code>Set.mem_icc</code>? I don't recall seeing a discussion about this.</p>",
        "id": 323524099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674662711
    },
    {
        "content": "<p>probably because that is the Lean 3 name. I don't know if that is a good enough reason.</p>",
        "id": 323524238,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674662750
    },
    {
        "content": "<p>Okay, it would be good to know if we're going to buck the convention on this. It also appears in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1754\">mathlib4#1754</a> for the finset version, which is what caused me to notice.</p>",
        "id": 323524963,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674662889
    },
    {
        "content": "<p>The new naming convention would also advocate renaming Set.Icc to Set.icc</p>",
        "id": 323543864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674667831
    },
    {
        "content": "<p>So I think the lemma is consistent with the def as is</p>",
        "id": 323544098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674667893
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">AddTorsor</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">AddAction</span> <span class=\"n\">G</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">VSub</span> <span class=\"n\">G</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"sd\">/-- Torsor subtraction and addition with the same element cancels out. -/</span>\n  <span class=\"n\">vsub_vadd'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span>\n  <span class=\"sd\">/-- Torsor addition and subtraction with the same element cancels out. -/</span>\n  <span class=\"n\">vadd_vsub'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>Shouldn't the field name <code>Nonempty</code> be lowercase?</p>",
        "id": 326866696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675962002
    },
    {
        "content": "<p>Should <code>Filter.EventuallyLe</code> be <code>Filter.EventuallyLE</code>?</p>",
        "id": 328860791,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676840438
    },
    {
        "content": "<p>What is the correct Lean 4 name for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.lt_iff_exists_nnreal_btwn\">docs#ennreal.lt_iff_exists_nnreal_btwn</a>?</p>",
        "id": 329099067,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676950515
    },
    {
        "content": "<p>We use <code>NNReal</code> and <code>ENNReal</code> for types.</p>",
        "id": 329099098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676950552
    },
    {
        "content": "<p>I think I would follow the \"lowercase as a group\" convention, and get either <code>ENNReal.lt_iff_exists_nnreal_btwn</code>, or possibly <code>ENNReal.lt_iff_exists_nnReal_btwn</code></p>",
        "id": 329099316,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676950721
    },
    {
        "content": "<p>Personally, the latter makes more sense to me.</p>",
        "id": 329099357,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676950775
    },
    {
        "content": "<p>I prefer the former slightly</p>",
        "id": 329170710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676980603
    },
    {
        "content": "<p>I personally prefer the latter <em>but</em> I’m fairly certain the former is what would be consistent with mathlib4 naming, so that’s what I think we should do (an initial group of same-cased letters is (de)capitalized together, with the group taken to be as large as possible)</p>",
        "id": 329265126,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677005162
    },
    {
        "content": "<p>I don't think \"as large as possible\" is the correct interpretation. I think it's uppercased letters which are part of a semantic group get lowercased together. For example, if you had something like <code>LEOfFoo</code> (if this were some type) I think it would be camelCased as <code>leOfFoo</code>.</p>",
        "id": 329275122,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677008073
    },
    {
        "content": "<p>So I picked <code>nnReal</code> because \"nonnegative\" is a semantic block, whereas \"non\" isn't, and \"nonnegative real\" isn't an (atomic) semantic block.</p>",
        "id": 329275595,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677008234
    },
    {
        "content": "<p>That’s my inclination too, but I was told otherwise <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315709880\">here</a>. In fact <code>ennReal</code> vs. <code>ennreal</code> was the example being discussed</p>\n<p>(I think <code>leOfReal</code> could still be handled differently under this rule because it’s not simply a semantic block but an existing lean name being referenced, and maybe there are component boundaries at name references…either way the rule I gave is indeed not quite correct, though)</p>",
        "id": 329276789,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677008589
    },
    {
        "content": "<p>I stand corrected, <code>nnreal</code> is consistent.</p>",
        "id": 329277461,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677008801
    },
    {
        "content": "<p>We have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Two elements `x` and `y` are complements of each other if `x ⊔ y = ⊤` and `x ⊓ y = ⊥`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsCompl</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- If `x` and `y` are to be complementary in an order, they should be disjoint. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">Disjoint</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"sd\">/-- If `x` and `y` are to be complementary in an order, they should be codisjoint. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">Codisjoint</span> <span class=\"o\">:</span> <span class=\"n\">Codisjoint</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Shouldn't those two fields be lowercase?</p>",
        "id": 329334158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677035833
    },
    {
        "content": "<p>the <code>BoundedContinuousFunction</code> file will be available in a while. I propose we take the opporunity while porting to change the name to <code>BoundedContinuousMap</code>. It shortens an already long name, and it agrees with <code>ContinuousMap</code>. Opinions?</p>",
        "id": 329511325,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677093825
    },
    {
        "content": "<p>I think it might be easiest to rename it in mathlib 3 where we don't have to replace both the CamelCase and snake_case versions in lemma names</p>",
        "id": 329511540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677093882
    },
    {
        "content": "<p>Yeah, there is a slightly tricky bit that it's sometimes abbreviated to <code>bcf</code>, but agreed, easier to make this change in mathlib3</p>",
        "id": 329514876,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677094899
    },
    {
        "content": "<p>We port <code>linear_independent_theorem</code> to <code>linearIndependent_theorem</code>.<br>\nShould we port <code>linear_dependent_theorem</code> to <code>linearDependent_theorem</code> in the same way?</p>",
        "id": 329670522,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1677145675
    },
    {
        "content": "<p>Seems reasonable to me</p>",
        "id": 329687885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677150362
    },
    {
        "content": "<p>I couldn't bring myself to do it initially but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.limits.cone</span> <span class=\"n\">CategoryTheory.Limits.Cone</span>\n</code></pre></div>\n<p>Should be an <code>x</code>?  I was conflicted because <code>(X:C)</code> is everywhere else in the file for a parameter.</p>",
        "id": 329725934,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677160850
    },
    {
        "content": "<p>IMHO, this is a reasonable place to have an exception to the convention.</p>",
        "id": 329726552,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677161013
    },
    {
        "content": "<p>Yeah, I think the upper-case <code>X</code> should remain in this case.</p>",
        "id": 329728168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677161424
    },
    {
        "content": "<p>One can also complain about the genericity of the field name. Another option is <code>pt</code></p>",
        "id": 329735970,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677163171
    },
    {
        "content": "<p>Have you met <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled\">docs#category_theory.bundled</a> ?</p>",
        "id": 329736378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677163258
    },
    {
        "content": "<p>How about <code>Hom</code> as a field for categories?</p>",
        "id": 329741930,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1677164485
    },
    {
        "content": "<p><code>Hom</code> for cats is a type, so uppercase seems fine to me.</p>",
        "id": 329742503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677164642
    },
    {
        "content": "<p>That at least has <code>Sort v</code> in the signature</p>",
        "id": 329742597,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677164655
    },
    {
        "content": "<p>I don't know... personally I think the new naming convention is not a convention but rather <em>all</em> the conventions</p>",
        "id": 329742710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677164689
    },
    {
        "content": "<p>I don't really understand the rules for <code>Prop</code>-valued fields. According to the wiki, they should be capitalized, but for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership.mem#doc\">docs4#Membership.mem</a> is lower-case.</p>\n<p>The wiki's convention leads to the adjacency relation in a simple graph being capitalized like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">Adj</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">Irreflexive</span> <span class=\"n\">Adj</span>\n</code></pre></div>\n<p>What is the justification for this rule?</p>",
        "id": 329751806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677166895
    },
    {
        "content": "<p>I thought props should <em>not</em> be capitalized, as opposed to sorts</p>",
        "id": 329752167,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1677166978
    },
    {
        "content": "<p>I think if the term has type <code>Sort _</code> then it's meant to be capitalized, but terms of props are lowercase?</p>",
        "id": 329752223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677166989
    },
    {
        "content": "<p>Again, \"all the conventions\"</p>",
        "id": 329752250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677166993
    },
    {
        "content": "<p>I was going by item 2 at <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention</a></p>\n<p>Would it be OK to make <code>Adj</code> lower-case then?</p>",
        "id": 329753460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677167266
    },
    {
        "content": "<p><code>Adj x y</code> is a <code>Sort 0</code>, so it should indeed be CamelCase, no?</p>",
        "id": 329754284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677167433
    },
    {
        "content": "<p>Yeah, only things of type <code>p</code> where <code>p : Prop</code> are lowercase</p>",
        "id": 329754503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677167480
    },
    {
        "content": "<p>But indeed <code>Membership.mem</code> doesn't fit this convention, and this has been raised multiple times</p>",
        "id": 329754717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677167524
    },
    {
        "content": "<p>I don't really get why this is how it is for <code>Prop</code> -- if I change <code>Prop</code> to <code>Bool</code>, why should I have to change the capitalization?</p>",
        "id": 329754747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677167531
    },
    {
        "content": "<p>Because you write <code>p : SomeProp</code> but never <code>b : someBool</code></p>",
        "id": 329755068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677167606
    },
    {
        "content": "<p>That's true, but it doesn't address why that's more important than making <code>Prop</code> and <code>Bool</code> be somewhat interchangeable.</p>\n<p>The best justification I can come up with for this is that you're wanting to parallel how it's <code>True &lt;-&gt; true</code> and <code>False &lt;-&gt; false</code>, which is I think a stronger argument than the fact that props have terms.</p>",
        "id": 329755474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677167713
    },
    {
        "content": "<p>But I think it's still a shame that making a change to whether something is a <code>Bool</code> or a <code>Prop</code> entails going through everything and reviewing naming conventions. Hopefully that's relatively rare.</p>",
        "id": 329755849,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677167792
    },
    {
        "content": "<p>Yes, this has also been raised before, and in particular Leo is not interested in changing <code>Membership.mem</code> to match the mathlib4 naming convention for this reason</p>",
        "id": 329757316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677168156
    },
    {
        "content": "<p>I would just like us to have <em>a</em> convention, I'm not too fussed about the details</p>",
        "id": 329757431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677168183
    },
    {
        "content": "<p>the compromise proposal was to have structure fields use the lowerSnakeCase convention if they would otherwise be UpperCased for being types</p>",
        "id": 329757750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677168250
    },
    {
        "content": "<p>The reason this is awkward is that it suggests that a definition wrapping a structure field would be capitalized differently than a structure field directly</p>",
        "id": 329757899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677168298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/329755068\">said</a>:</p>\n<blockquote>\n<p>Because you write <code>p : SomeProp</code> but never <code>b : someBool</code></p>\n</blockquote>\n<p>Indeed, but you will most definitely write <code>b : coe_sort someBool</code> at some point.</p>",
        "id": 329765651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677170068
    },
    {
        "content": "<p>I get value from being able to separate data from proofs from the names themselves. But I am with Mario, in that having a convention with very broad coverage is most beneficial.</p>",
        "id": 329766161,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677170206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/329757750\">said</a>:</p>\n<blockquote>\n<p>the compromise proposal was to have structure fields use the lowerSnakeCase convention if they would otherwise be UpperCased for being types</p>\n</blockquote>\n<p>I'd maybe argue that we don't need to make the compromise, and can just use a different convention in mathlib to what core uses</p>",
        "id": 329769836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677171157
    },
    {
        "content": "<p>that's also confusing, because people will repeatedly ask this same question</p>",
        "id": 329776745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677172871
    },
    {
        "content": "<p>it is an option but I'd prefer to have some cohesion here. If we were going to part ways naming convention wise we should have just stuck to snake case everything</p>",
        "id": 329776980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677172935
    },
    {
        "content": "<p>Well, with that compromise you can't know what the name is without first knowing whether it's a projection and therefore knowing the implementation details</p>",
        "id": 329781868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677174361
    },
    {
        "content": "<p>How did we port <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bundled#doc\">docs4#CategoryTheory.Bundled</a> ?</p>",
        "id": 329782007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677174391
    },
    {
        "content": "<p>Oh, it's Greek so I guess not relevant</p>",
        "id": 329782201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677174469
    },
    {
        "content": "<p>Circling back to the concrete question, <a href=\"https://github.com/leanprover-community/mathlib4/pull/2337\">!4#2337</a> has its dependencies cleared and should be ready to go except for the naming issue mentioned here.</p>",
        "id": 329794325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677178040
    },
    {
        "content": "<p>/poll What should the cone point be called? <br>\nX <br>\nx <br>\npt <br>\nother</p>",
        "id": 329794815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677178191
    },
    {
        "content": "<p>apex?!</p>",
        "id": 329795231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677178327
    },
    {
        "content": "<p><code>apex</code> doesn't really make sense for the cocone point ;)</p>",
        "id": 329795333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677178373
    },
    {
        "content": "<p>that's true</p>",
        "id": 329795383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677178389
    },
    {
        "content": "<p>I guess it would be the coapex?</p>",
        "id": 329795422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677178398
    },
    {
        "content": "<p><a href=\"https://words.bighugelabs.com/antapex\">https://words.bighugelabs.com/antapex</a></p>",
        "id": 329795582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677178445
    },
    {
        "content": "<p>whatever name we choose, I think it should be the same for both cones and cocones.</p>",
        "id": 329795705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677178486
    },
    {
        "content": "<p>And my only reasoning for staying with <code>X</code> is muscle memory, which isn't the best argument. I think <code>pt</code> is a very natural choice.</p>",
        "id": 329795842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677178527
    },
    {
        "content": "<p>Clearly xepa</p>",
        "id": 329796359,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677178703
    },
    {
        "content": "<p>not that it will affect things, but imo being able to read off some basic info from the name itself is great, and the benefit of avoiding capital letters after <code>.</code> seems far less than the benefit of being able to consistently get info about something’s role from its name. conflating terms of types with sort-like terms <em>only</em> when they appear as structure fields is at least a very peculiar rule</p>",
        "id": 329809770,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677183054
    },
    {
        "content": "<p>(but, by my personal preferences, still better than having Props be lowerCamelCase in general)</p>",
        "id": 329811192,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677183609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/329757899\">said</a>:</p>\n<blockquote>\n<p>The reason this is awkward is that it suggests that a definition wrapping a structure field would be capitalized differently than a structure field directly</p>\n</blockquote>\n<p>Speaking of structures, one awkwardness associated to the current naming convention is that there is a difference in capitalization between a term of a type and a term of a type that wraps that type.</p>\n<p>For example, with this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyProp</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>you have <code>Q : Prop</code> but <code>q : MyProp</code>. Maybe if there's a coercion from <code>MyProp</code> to <code>Prop</code> you'd still be expected to capitalize <code>Q : MyProp</code>?</p>",
        "id": 336511510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677252293
    },
    {
        "content": "<p>It looks like <code>pt</code> is it. Incoming soon</p>",
        "id": 336519859,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677254331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/336511510\">said</a>:</p>\n<blockquote>\n<p>For example, with this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyProp</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>you have <code>Q : Prop</code> but <code>q : MyProp</code>.</p>\n</blockquote>\n<p>Doesn't this depend whether <code>MyProp : Prop</code>?</p>",
        "id": 336544415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677260402
    },
    {
        "content": "<p>No, we don't capitalize objects that have a structure as type whether these structures are types or propositions. E.g. we're capitalizing neither <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nonempty.intro#doc\">docs4#Nonempty.intro</a> nor <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Inhabited.default#doc\">docs4#Inhabited.default</a>.</p>",
        "id": 336549438,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677261788
    },
    {
        "content": "<p>Oh hey, those linkifiers work! Thanks <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>!</p>",
        "id": 336549686,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677261850
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompl.Disjoint#doc\">docs4#IsCompl.Disjoint</a> shouldn't exist, right?</p>",
        "id": 336550387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677262075
    },
    {
        "content": "<p>Getting here late but does anyone actually say \"point\" for this? <code>pt</code> would have been my last choice--ok, it ranks ahead of <code>other</code>.</p>",
        "id": 336553053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677262832
    },
    {
        "content": "<p>I think it's okay ;)<br>\n<a href=\"#narrow/stream/267928-condensed-mathematics/topic/LocallyConstant.20preserves.20colimits/near/236834837\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/LocallyConstant.20preserves.20colimits/near/236834837</a></p>",
        "id": 336554829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677263381
    },
    {
        "content": "<p>I wanted to play around with making lints, so I wrote a lint that tries to detect when things are wrongly named (<a href=\"https://github.com/alexkeizer/lean-naming-lint/\">https://github.com/alexkeizer/lean-naming-lint/</a>).</p>\n<p>Currently, the output is chock full of definitions like (With all different kind of variations on <code>Ioi</code>, <code>Iio</code>, and some others)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">comap_coe_Ioi_nhdsWithin_Ioi</span>\n</code></pre></div>\n<p>Complaining that <code>Ioi</code> should be lowerCamelCase <code>ioi</code> by the rule that UpperCamelCase names that are part of snake_case names should be spelled as lowerCamelCase.</p>\n<p>Is that right, are these names misspelled, or is this an exception?</p>",
        "id": 336555630,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677263636
    },
    {
        "content": "<p>I was going to say that maybe it makes sense to refer to the extra object of the <em>indexing</em> category as the \"cone point\", but definitely not its image under the actual functor</p>",
        "id": 336555769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677263679
    },
    {
        "content": "<p>Well, I still think <code>pt</code> is a step up from <code>X</code>.</p>",
        "id": 336556408,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677263881
    },
    {
        "content": "<p>I mean, statistically the vertex of the cone is more likely to be called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> than its \"point\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 336556935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677264040
    },
    {
        "content": "<p>Anyways, it wouldn't be the first time mathlib makes choices I find strange.</p>",
        "id": 336557009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677264067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/336555630\">said</a>:</p>\n<blockquote>\n<p>Is that right, are these names misspelled, or is this an exception?</p>\n</blockquote>\n<p>I think we are keeping <code>Ioi</code> and all its variants capitalized as a special case. So these would need to maybe be added as <code>nolints</code> to whatever linter you are writing.</p>",
        "id": 336558522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677264516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/336553053\">said</a>:</p>\n<blockquote>\n<p>Getting here late but does anyone actually say \"point\" for this?</p>\n</blockquote>\n<p>I suggest searching for <code>\"_ of the cone\" \"colimit\"</code> for <code>_</code> = <code>apex</code>, <code>point</code>, <code>tip</code>, <code>vertex</code></p>",
        "id": 336559982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677264974
    },
    {
        "content": "<p>Is it true that we use <code>emod</code> for <code>%</code> on integers? If yes, then why?</p>",
        "id": 336569692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677268325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/336550387\">said</a>:</p>\n<blockquote>\n<p>So <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompl.Disjoint#doc\">docs4#IsCompl.Disjoint</a> shouldn't exist, right?</p>\n</blockquote>\n<p>Looks to me like these fields should have been <code>disjoint</code> and <code>codisjoint</code> under any convention, right? What was the rationale for capitalizing them?</p>",
        "id": 336571128,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677268856
    },
    {
        "content": "<p>Should we have a <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>-conventions stream? It looks like there are intermingled discussions here</p>",
        "id": 337905866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677280930
    },
    {
        "content": "<p>Probably just a document with explanations, examples and known idiosyncrasies would be good enough</p>",
        "id": 337912898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677284592
    },
    {
        "content": "<p>And then when someone asks a question which isn't covered they're encouraged to add to the document</p>",
        "id": 337912948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677284621
    },
    {
        "content": "<p>We kind of have that on the porting wiki, no? (Maybe it could be more complete, though—and eventually I imagine it should leave the porting wiki anyway.) I think the issue is that there are lots of such questions that keep arising and need to be discussed.</p>",
        "id": 337914250,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677285274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/336569692\">said</a>:</p>\n<blockquote>\n<p>Is it true that we use <code>emod</code> for <code>%</code> on integers? If yes, then why?</p>\n</blockquote>\n<p>I think this is waiting on the definition change for <code>Int.mod</code> in core</p>",
        "id": 337924196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677291950
    },
    {
        "content": "<p>Naming adjudication:</p>\n<p>We have an implementation of derangements of a permutation in <code>Combinatorics.Derangements.Basic</code></p>\n<p>mathport ported it as <code>derangements</code>, I overrode to <code>Derangements</code> and Eric's asked me to follow the mathport decision, which follows the strict rules on the wiki. I have no super strong opinion either way, but before I go flip it back, <code>Derangements</code> follows the same naming convention as, for example <code>PNat</code> - it's effectively a hardwired constraint on an existing type, and it's subsequently used \"typelike\" -- it's functionally a \"newtype with constraint\"</p>\n<p>Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">PNat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Derangements</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 339961519,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678134289
    },
    {
        "content": "<p>Those aren't the same though</p>",
        "id": 339962921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678134831
    },
    {
        "content": "<p>The first is a <code>Type</code>, the second is a <code>Set</code></p>",
        "id": 339962950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678134842
    },
    {
        "content": "<p>It would be clearer if we'd written <code>def PNat : Type := ...</code> but I guess we didn't do that in mathlib 3 either.</p>",
        "id": 339963141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678134910
    },
    {
        "content": "<p>Are you confusing <code>{x | p x}</code> with <code>{x // p x}</code>?</p>",
        "id": 339963250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678134956
    },
    {
        "content": "<p>I understand the difference, but I think of <code>Derangements</code> in this case as being a fixed subtype of <code>Perm</code> -- it's a <code>Set</code>, sure, but the effect is to put a constraint on <code>Perm α</code></p>\n<p>It's also possible I still live in a set theoretical foundations view of the world :-)</p>",
        "id": 339967175,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678136442
    },
    {
        "content": "<p>I think there’s a case to be made for treating sets as types naming-convention-wise, but I also think that would be something we’d want to apply uniformly to all sets (and therefore not a change we’d want to make mid-port at least)</p>",
        "id": 339967558,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678136587
    },
    {
        "content": "<p>We really get to make this decision once, right? It's going to be a mechanical chore to undo.</p>\n<p>If <code>derangements</code> were a function on <code>Perm α</code>,  I'd be there, but here we have a function from type to type.</p>",
        "id": 339968446,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678136970
    },
    {
        "content": "<p>Imo the important info you get from the naming convention is the role something can play with respect to other terms. Anything in UpperCamelCase can be on the right side of a <code>:</code> judgment. So the question would be: is <code>∈</code> similar enough in role to <code>:</code> to induce similar naming conventions? Do we <em>lose</em> info by enforcing that analogy? And is <code>∈</code> prominent enough to warrant a carve-out?</p>\n<p>I think these are all questions for after the port and that we shouldn’t make an exception now even for a very Type-like set—because arguably all sets are Type-like in some way :)</p>",
        "id": 339968578,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678137015
    },
    {
        "content": "<p>(I don’t think it’s a function from Type to Type; it’s a function from Type to <em>a</em> Type)</p>",
        "id": 339968736,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678137098
    },
    {
        "content": "<p>Right, by this argument Fintype.card should be Fintype.Card, which I've seen no argument for elsewhere</p>",
        "id": 339969470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678137432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/339968446\">said</a>:</p>\n<blockquote>\n<p>here we have a function from type to type.</p>\n</blockquote>\n<p>The function from type to type is <code> fun α =&gt; coeSort (derangements α)</code></p>",
        "id": 339969678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678137526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/339968736\">said</a>:</p>\n<blockquote>\n<p>(I don’t think it’s a function from Type to Type; it’s a function from Type to <em>a</em> Type)</p>\n</blockquote>\n<p><code>derangements</code> it is (again probably a set theoretical bias to see the set of all <code>Perm α</code> such that there are no fixed points as essentially a subtype of <code>Perm α</code>).</p>",
        "id": 339969732,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678137551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/339969470\">said</a>:</p>\n<blockquote>\n<p>Right, by this argument Fintype.card should be Fintype.Card, which I've seen no argument for elsewhere</p>\n</blockquote>\n<p>That's pretty clearly a function on <code>Fintype</code> :-).</p>",
        "id": 339969773,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678137577
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitary\">docs#unitary</a> will fall into a similar naming rule as <code>derangements</code>, I don't know if that's ported yet (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs4#unitary</a>)</p>",
        "id": 339969814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678137597
    },
    {
        "content": "<p>I see where you're coming from with the uppercase, but I think you're really proposing the addition of a special case to the existing convention.</p>",
        "id": 339970007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678137658
    },
    {
        "content": "<p>Fwiw I <em>do</em> think it’s useful to view it as essentially a subtype in the way you mention, but <em>every</em> set is essentially a subtype of the type used to index it in a similar way, which is why I think there’s some merit to asking whether we want to UpperCamelCase sets—it’s just that this ought to be a general rule instead of an exception for derangements in particular</p>",
        "id": 339970305,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678137795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/339970007\">said</a>:</p>\n<blockquote>\n<p>I see where you're coming from with the uppercase, but I think you're really proposing the addition of a special case to the existing convention.</p>\n</blockquote>\n<p>That's right -- &amp; we'd have to language lawyer the exact rules.</p>",
        "id": 339970973,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678138094
    },
    {
        "content": "<p>Would it be <code>def Derangement : Perm α → Prop := </code> in uppercase?</p>",
        "id": 339971673,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1678138387
    },
    {
        "content": "<p>Along with  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs4#unitary</a> we also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=selfAdjoint#doc\">docs4#selfAdjoint</a> I think <code>derangements</code> is the way to go here.</p>",
        "id": 339976226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678140252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/329794815\">said</a>:</p>\n<blockquote>\n<p>/poll What should the cone point be called? <br>\nX <br>\nx <br>\npt <br>\nother</p>\n</blockquote>\n<p>Is this related to the weirdness in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2931#discussion_r1139150725\">https://github.com/leanprover-community/mathlib4/pull/2931#discussion_r1139150725</a>? Have we accidentally taught mathport to replace all fields named <code>X</code> with <code>pt</code>? cc <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span></p>",
        "id": 342399697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678993289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MeasurableSingletonClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- A singleton is a measurable set. -/</span>\n  <span class=\"n\">measurableSet_singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Should the field be measurable_set_singleton?</p>",
        "id": 348079386,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681066316
    },
    {
        "content": "<p>No, the current name is correct</p>",
        "id": 348080421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681066928
    },
    {
        "content": "<p>I guess the reason is that we have \"def MeasurableSet [MeasurableSpace α] (s : Set α) : Prop\".</p>\n<p>But why it's MeasurableSet instead of measurableSet?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nullMeasurableSet</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">NullMeasurableSpace</span> <span class=\"n\">α</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">s</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">measure_theory.null_measurable_set</span> <span class=\"n\">MeasureTheory.nullMeasurableSet</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aeDisjoint</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">measure_theory.ae_disjoint</span> <span class=\"n\">MeasureTheory.aeDisjoint</span>\n</code></pre></div>\n<p>Should I name them \"def NullMeasurableSet ...\" and \"def AeDisjoint ....\"?</p>\n<p>The auto translation from mathlib3port did return NullMeasurableSet and AeDisjoint</p>",
        "id": 348084472,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681069137
    },
    {
        "content": "<p>Yes, those <code>def</code>s should both be CamelCase because they are Props</p>",
        "id": 348086580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681070541
    },
    {
        "content": "<p>But your original example is a <em>proof</em> so should be lowerCamel_snake</p>",
        "id": 348086634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681070589
    },
    {
        "content": "<p>I see. Thank you!</p>",
        "id": 348087433,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681071098
    },
    {
        "content": "<p>I am porting a category theory file, and most of the errors made by the autoporter are issues with capitalisation etc coming from the changes in the naming convention. I am fixing them in a mundane way (typically searching for <code>#align</code>'s) but this does make me conscious that I really still don't have the first clue about the lean 4 naming convention. Is there a document for dummies which explains it anywhere? (assuming I understand the lean 3 naming convention)</p>",
        "id": 350298226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681645029
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention</a></p>",
        "id": 350298804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645357
    },
    {
        "content": "<p>Ironically I had just re-read the porting wiki up to not far before that point as preparation for getting back into porting.</p>",
        "id": 350298960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681645452
    },
    {
        "content": "<p>We have decided to keep <code>LE</code> and <code>LT</code> capitalised even in camel case names, right? mathlib4 is currently quite inconsistent, with <code>Le[A-Z]</code> and <code>LE[A-Z]</code> both producing plenty of hits.</p>",
        "id": 350418574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681713681
    },
    {
        "content": "<p>e.g. we have <code>ofMapLEIff</code> (correctly), but <code>linearIndependentFintypeOfLeSpanFintype</code> (incorrect?)</p>",
        "id": 350418753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681713744
    },
    {
        "content": "<p>I think LE/LT was the conclusion, yes, but mathport doesn't know that (yet?)</p>",
        "id": 350422367,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681714866
    },
    {
        "content": "<p><code>ofMapLEIff</code> looks pretty unreadable, though. Are we sure of that decision?</p>",
        "id": 350426895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681716316
    },
    {
        "content": "<p>I'm not sure if we're sure of anything :)</p>",
        "id": 350427652,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681716548
    },
    {
        "content": "<p>Why is it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Localization#doc\">docs4#Localization</a> but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=addLocalization#doc\">docs4#addLocalization</a> ?</p>",
        "id": 352198531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682324652
    },
    {
        "content": "<p>It's a mistake for sure</p>",
        "id": 352199814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682324986
    },
    {
        "content": "<p>Also, docs4# consuming ? is <em>really</em> annoying</p>",
        "id": 352199874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682325000
    },
    {
        "content": "<p>Not if you're <span aria-label=\"flag france\" class=\"emoji emoji-1f1eb-1f1f7\" role=\"img\" title=\"flag france\">:flag_france:</span> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 352200932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682325238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/352199874\">said</a>:</p>\n<blockquote>\n<p>Also, docs4# consuming ? is <em>really</em> annoying</p>\n</blockquote>\n<p>to be fair, lean identifiers consuming ? is also annoying in many cases</p>",
        "id": 352201230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682325306
    },
    {
        "content": "<p>Changing the linkifier to drop <code>?</code>s that match <code>\\?$</code> would probably help</p>",
        "id": 352202028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682325521
    },
    {
        "content": "<p>Let's be honest: the English typography idea to remove all spaces before punctuation is just plain wrong.</p>",
        "id": 352206822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682326776
    },
    {
        "content": "<p>Not as bad as the bizarre convention that I refuse to acknowledge with quotes, that \"puts a trailing comma here,\" or a \"trailing period.\"</p>",
        "id": 352207662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682326953
    },
    {
        "content": "<p>I can only hope that the people who think this is a good idea have no intersection with people who add punctuation after equations, to avoid writing<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi></mrow><mrow><mi>x</mi><mo separator=\"true\">,</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{x^2+x}{x,}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.499em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0179em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mpunct mtight\">,</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> or worse</p>",
        "id": 352208120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682327073
    },
    {
        "content": "<p>What about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.back?#doc\">docs4#Array.back?</a></p>",
        "id": 352209421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682327402
    },
    {
        "content": "<p>Don't you mean \"What about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.back?#doc\">docs4#Array.back?</a>?\"?</p>",
        "id": 352210197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682327604
    },
    {
        "content": "<p>For people interested in the names of categories, I have just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3730\">!4#3730</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/3731\">!4#3731</a>.</p>",
        "id": 354445098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682783468
    },
    {
        "content": "<p>I agree it would be nice to not have unnecessary <code>Cat</code> suffixes, but for now this is what the porting-wiki asks for. Yaël's <a href=\"https://github.com/leanprover-community/mathlib4/pull/3730\">!4#3730</a> removes <code>Cat</code> from the end of some order category names, following changes they made in mathlib3 as <a href=\"https://github.com/leanprover-community/mathlib/pull/18657\">#18657</a>.</p>\n<p>I think it would be good to come up with a consistent rule, and update the decision in the porting-wiki, before proceeding here.</p>\n<p>Is \"slightly abbreviate the name of the bundled typeclass\" enough? e.g.</p>\n<ul>\n<li>the category of bundled <code>Lattice</code>s is <code>Lat</code></li>\n<li>the category of bundled <code>Algebra</code>s is <code>Alg</code></li>\n</ul>\n<p>etc. I worry slightly that it is harder for a reader to determine quickly whether they are looking at the unbundled (\"we work with elements\") or bundled (\"we work with morphisms\") version, but I think it is okay. I think this naming scheme would be closer to informal conventions.</p>",
        "id": 354574169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682808041
    },
    {
        "content": "<p>I assume using <code>Lᴀᴛᴛɪᴄᴇ</code> (Lᴀᴛᴛɪᴄᴇ for Android users who can't read Unicode in code blocks) as the spelling of the category is a bad idea?</p>",
        "id": 354578301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682809011
    },
    {
        "content": "<p>Is that unicode smallcaps!?</p>",
        "id": 354578435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682809045
    },
    {
        "content": "<p>Do those work in idents?</p>",
        "id": 354595942,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682820940
    },
    {
        "content": "<p>Note that not all smallcaps letters are in Unicode, and those that are usually have different styles because they are meant for different purposes. I wouldn't want smallcaps for cat names</p>",
        "id": 354596510,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682821383
    },
    {
        "content": "<p>Yes, they render pretty unevenly for me, and are also presumably a pain to type. I would prefer not to use unicode smallcaps!</p>",
        "id": 354601838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682825536
    },
    {
        "content": "<p>In the case of the order theory category names, the abbreviated names I came up with match what there's on nLab, except <code>Lat</code> which corresponds to our <code>DistLat</code>and <code>Ord</code> which corresponds to our <code>Preord</code>.</p>",
        "id": 354627532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682841563
    },
    {
        "content": "<p>The \"painful to type\" can be fixed by adding a <code>\\name_of_the_category</code> abbreviation outputting the small caps name for each category we have. But that only fixes it inside VScode, not when looking up lemmas in the docs <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 354627556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682841571
    },
    {
        "content": "<p>yeah I think that the snarky remarks regarding the naming convention will only get worse if a lemma can simultaneously contain upper and lowercase camel case components, snake case, and small caps in the middle, e.g. <code>CategoryTheory.ʟᴀᴛ_dualEquiv_inverse</code> (where of course <code>ʟᴀᴛ</code> is the lowercase small caps form of <code>Lᴀᴛ</code>)</p>",
        "id": 354629542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682842389
    },
    {
        "content": "<p>The category of quivers could be named <code>QuiverCat</code> or <code>Quiv</code>, but the current <code>QuivCat</code> is in between, so that changing the name either way would be very much ok for me. As it seems <code>Quiv</code> is in use in the math community, it is probably better. Similarly for other bundled categories, we could see whether there is a very well established category name used by mathematicians, or otherwise fall back to the addition of the suffix <code>Cat</code> to the instance name of the mathematical structure. No fancy Unicode characters please!</p>",
        "id": 354633228,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682843770
    },
    {
        "content": "<p>my guess is that in mathlib3 it was named <code>Quiv</code> and so mathport stuck a <code>Cat</code> on the end</p>",
        "id": 354633399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843845
    },
    {
        "content": "<p>Was mathport instructed to add the <code>Cat</code> suffixes? How does it know what's a category and what's not?</p>",
        "id": 354634003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682844091
    },
    {
        "content": "<p>It just looked for TitleCase names</p>",
        "id": 354635194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844535
    },
    {
        "content": "<p><code>module.End</code> was auto-translated to <code>Module.EndCat</code> (then fixed manually)</p>",
        "id": 354635248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844558
    },
    {
        "content": "<p>Ah right!</p>",
        "id": 354635287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682844576
    },
    {
        "content": "<p>Another hot take; what about calling the category <code>UnbundledTypeclass.Cat</code>, and then having <code>𝒞 UnbundledTypeclass</code> or similar as notation to refer to the category?</p>",
        "id": 354635453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844636
    },
    {
        "content": "<p>That's much longer to type in general. cf the stupidly long category names in LTE.</p>",
        "id": 354635612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682844708
    },
    {
        "content": "<p>And some categories do not come from bundling typeclasses, so I'm not sure how your approach would handle those. I'm thinking that whether a category comes from a typeclass or not is an implementation detail.</p>",
        "id": 354635761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682844761
    },
    {
        "content": "<p>actually for bundling typeclasses it would be nice if there was a one-liner to define the category and supporting lemmas</p>",
        "id": 354636016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844849
    },
    {
        "content": "<p>I know that there was <code>bundled</code> for doing most of the work but a macro could automate the lemma construction as well</p>",
        "id": 354636072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354636016\">said</a>:</p>\n<blockquote>\n<p>actually for bundling typeclasses it would be nice if there was a one-liner to define the category and supporting lemmas</p>\n</blockquote>\n<p>This should be relatively easy with a macro. I played around with such a thing some time ago. I’ll try to dig it up when I have some computer time.</p>",
        "id": 354698573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682865403
    },
    {
        "content": "<p>A more advanced one liner would also add the various forgetful functors to intermediate bundled categories (like the forgetful functor from Groups to Monoids). I guess for this to be automated one would have to extract some information from the corresponding type class hierarchy. That’s something I haven’t figured out how to do. Mario, do you some feeling for how difficult that would be?</p>",
        "id": 354700022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682865813
    },
    {
        "content": "<p>What's hard is that we don't want <em>all</em> forgetful functors, but only the direct ones.</p>",
        "id": 354700486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682865927
    },
    {
        "content": "<p>No, I think you want all of them, together with the corresponding lemmas/isoms showing their compatibility w.r.t. compositions of forgetful functors</p>",
        "id": 354701014,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682866043
    },
    {
        "content": "<p>Recall that we have this <code>forget_2</code> class</p>",
        "id": 354701139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682866068
    },
    {
        "content": "<p>In a hierarchy of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> typeclasses, that's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> forgetful functors and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> compatibility lemmas. Isn't that too much?</p>",
        "id": 354702499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682866487
    },
    {
        "content": "<p>Ok, maybe not <em>all of them</em> but there should at least be some way of specifying which we want as part of the automation.</p>",
        "id": 354702876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682866595
    },
    {
        "content": "<p>Yeah that sounds more reasonable. But at least that means we can't hope for the system to come up with them all. We need manual input at some point during the chain.</p>",
        "id": 354703308,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682866755
    },
    {
        "content": "<p>Oh yes of course. I was envisioning some command that you have to call manually (with some options)</p>",
        "id": 354703617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682866858
    },
    {
        "content": "<p>Actually, we might not need those $O(n^3)$ compatibility lemmas if instead we have a tactic that does them all (it basically amount to rewriting with <code>rfl</code> after all).</p>",
        "id": 354705255,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682867340
    },
    {
        "content": "<p>Getting back to the actual naming issue for a moment:</p>\n<p>Today's porting meeting was initially enthusiastic about just making the change <code>Group</code> → <code>Grp</code> and similarly.</p>\n<p>We then worried slightly about what to do with <code>CommRing</code>, with the only viable option seeming to be <code>CRing</code>. (Which is perhaps <em>too</em> short / ambiguous, although I think consistent with the mathematics literature?)</p>\n<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> then made the very interesting suggestion of just appending an <code>s</code>, hence <code>Groups</code> for the category of bundled <code>Group</code>s, and so on. This matches how mathematics speak these things, although not how they write them. We couldn't think of cases where there is already a trailing <code>s</code>. The fact that there are some categories like <code>Top</code> that we presumably don't want to name this way means that this couldn't be a universal rule.</p>",
        "id": 354981366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682976895
    },
    {
        "content": "<p>Actually, worse than <code>CommRing</code> is of course just <code>Ring</code>.</p>",
        "id": 354981510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682976962
    },
    {
        "content": "<p>I guess <code>Rng</code> is viable, and used in the literature (in fact, GPT4 suggests this when asked \"How do mathematicians write the category of rings?\" :-)</p>",
        "id": 354981711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977073
    },
    {
        "content": "<p>Yeah, I was thinking so too, although we'll need a big warning that its elements do have a unit.</p>",
        "id": 354981803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977104
    },
    {
        "content": "<p>/poll How to name categories:<br>\n<code>Lat</code>, <code>Rng</code>, <code>CRng</code> (<code>CRing?</code>), <code>Grp</code>, <code>Top</code><br>\n<code>Lattices</code>, <code>Rings</code>, <code>CommRings</code>, <code>Groups</code>, (? not sure for <code>Top</code>)</p>",
        "id": 354981915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977174
    },
    {
        "content": "<p>I quite like the idea of appending a <code>s</code>, but I would rather do that as a second option after shortening since category names come up in lemma names <em>a lot</em> (at least for my order categories experience of things) and every single character saved here is tens of lines that are saved from the 100 chars limit.</p>",
        "id": 354982058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977246
    },
    {
        "content": "<p>Do we have an example where appending <code>s</code> would be used, even if shortening was the default?</p>",
        "id": 354982212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, in the <code>s</code> scenario, presumably we'd just allow exceptions for e.g. <code>Top</code>?</p>",
        "id": 354982251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977354
    },
    {
        "content": "<p><code>Ring</code> is a good example, if we listen to the non-unital people.</p>",
        "id": 354982263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977364
    },
    {
        "content": "<p>In particular, it's not a name that really needs shortening.</p>",
        "id": 354982290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977380
    },
    {
        "content": "<p>Yeah I'd propose <code>TopSpaces</code> for <code>Top</code>, so indeed some sort of semi-shortened but with the s still</p>",
        "id": 354982306,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682977389
    },
    {
        "content": "<p><code>BoundedDistribLattice</code>/<code>BoundedDistribLattices</code> however is a mouthful.</p>",
        "id": 354982312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354982306\">said</a>:</p>\n<blockquote>\n<p>Yeah I'd propose <code>TopSpaces</code> for <code>Top</code>, so indeed some sort of semi-shortened but with the s still</p>\n</blockquote>\n<p>I'd be a little sad to lose <code>Top</code>, which is pretty ingrained in the literature, I think.</p>",
        "id": 354982378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977432
    },
    {
        "content": "<p><code>BddDistribLat</code> is the alternative Yaël?</p>",
        "id": 354982434,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682977444
    },
    {
        "content": "<p><code>BddDistLat</code> rather, but yeah close enough.</p>",
        "id": 354982456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977459
    },
    {
        "content": "<p>or <code>BddDLat</code></p>",
        "id": 354982467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682977463
    },
    {
        "content": "<p><code>DistLat</code> has the advantage of already existing in the literature, but I don't feel so strongly about removing the extra three letters.</p>",
        "id": 354982502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977482
    },
    {
        "content": "<p>as a metamath aficionado I am an expert at making just barely readable abbreviations for things</p>",
        "id": 354982544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682977506
    },
    {
        "content": "<p>I do prefer <code>Rings</code> over <code>Rng</code>, for sure (even without any regard for the needs of non-unital ring theorists, which I don't actually believe in :-).</p>",
        "id": 354982567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977522
    },
    {
        "content": "<p>We should also consider that some category names were <em>already</em> shortened in mathlib, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/NonemptyFinLinOrd\">docs#NonemptyFinLinOrd</a> (albeit I shortened it, it was already shorter than <code>NonemptyFiniteLinearOrder</code>)</p>",
        "id": 354982678,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354982378\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354982306\">said</a>:</p>\n<blockquote>\n<p>Yeah I'd propose <code>TopSpaces</code> for <code>Top</code>, so indeed some sort of semi-shortened but with the s still</p>\n</blockquote>\n<p>I'd be a little sad to lose <code>Top</code>, which is pretty ingrained in the literature, I think.</p>\n</blockquote>\n<p>Maybe Top could be its own exception indeed then. I'm coming round to Yael's suggestion more. Even in the informal literature we use CGHaus etc.</p>",
        "id": 354982680,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682977569
    },
    {
        "content": "<p>I think Yaël's suggestion gives:</p>\n<ul>\n<li><code>Lat</code>, <code>Rings</code>, <code>CommRings</code>, <code>Grp</code>, <code>Top</code></li>\n</ul>\n<p>for the examples above?</p>",
        "id": 354982932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977705
    },
    {
        "content": "<p>I think <code>s</code> for short names that can't meaningfully be shortened does make sense, and for the ones that can be shortened, let's cut them up!</p>",
        "id": 354982972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977726
    },
    {
        "content": "<p>Alternatively, <code>CRings</code> or <code>CRing</code> instead of <code>CommRings</code>. Not sure that clashes with anything else.</p>",
        "id": 354983025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977761
    },
    {
        "content": "<p>I think whatever we do for <code>Ring</code> should be reflected in what we do for <code>CommRing</code>. Hence if <code>Ring</code> becomes <code>Rings</code>, then <code>CommRing</code> must become either <code>CommRings</code> or <code>CRings</code>, but cannot become <code>CRing</code>?</p>",
        "id": 354983180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977825
    },
    {
        "content": "<p>Sounds reasonable, yes.</p>",
        "id": 354983360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682977902
    },
    {
        "content": "<p>Okay, if we shorten <code>Comm</code> to <code>C</code>, does that cause problems for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">C^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>-rings?</p>",
        "id": 354983467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977939
    },
    {
        "content": "<p>They will presumably be called <code>CStarRings</code>, so there's no actual clash, just potential difficulty interpreting the <code>C</code>.</p>",
        "id": 354983532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682977977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, do you feel strongly about the difference between <code>CommRings</code> and <code>CRings</code> for the category of commutative rings? (And you aren't allowed to say that we should just drop the <code>C</code> entirely. :-)</p>",
        "id": 354983606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682978033
    },
    {
        "content": "<p>Do people care about the category of <code>CommSemiring</code>s?</p>",
        "id": 354983682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682978053
    },
    {
        "content": "<p>I have met a real live person who cared about this category, but it is pretty niche. :-)</p>",
        "id": 354983717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682978075
    },
    {
        "content": "<p>In a more distant hierarchy-builder future, I can imagine also wanting a name for the category of <code>NonUnitalNonAssocSemiring</code>s...</p>",
        "id": 354983828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682978132
    },
    {
        "content": "<p>There's a mini industry of trying to do algebraic geometry over (commutative) semirings, hoping to have applications to various positivity questions?</p>",
        "id": 354983873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682978151
    },
    {
        "content": "<p>I'm not bothered about any naming conventions, I am happy to just go with anything, I think it's all a bit bikesheddy (just personal opinion)</p>",
        "id": 354984784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682978483
    },
    {
        "content": "<p>I'd be happy with <code>GROUP</code> as well</p>",
        "id": 354985248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682978659
    },
    {
        "content": "<p>Personally I would keep <code>Comm</code> instead of shortening, just for the sake of clarity.</p>",
        "id": 354986217,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682979123
    },
    {
        "content": "<p>One danger with <code>CommRings</code> is it's easy to misread/write as <code>CommRing</code>, which presumably gives confusing errors</p>",
        "id": 354987354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682979729
    },
    {
        "content": "<p><code>CommRing.s</code> is more visibly different, though also a bit weird</p>",
        "id": 354987390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682979759
    },
    {
        "content": "<p>Clearly we need <code>(X :: C)</code>, which asserts that there is a category instance on <code>C</code> available. :-)</p>",
        "id": 354987488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682979828
    },
    {
        "content": "<p>With the possible exception of <code>CommRings</code>, I think we have pretty good agreement that shortening is the preferred default. I will</p>\n<ul>\n<li>go edit the wiki</li>\n<li>merge some of Yael's renaming PRs</li>\n</ul>",
        "id": 354987607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682979887
    },
    {
        "content": "<p>(Now that someone has said the word \"bikeshed\" we have to stop discussion. :-)</p>",
        "id": 354987639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682979906
    },
    {
        "content": "<p>We could now discuss specific names. Here are a few I haven't touched in my PRs:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonCat#doc\">docs4#MonCat</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleCat#doc\">docs4#ModuleCat</a></li>\n</ul>",
        "id": 354988612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682980385
    },
    {
        "content": "<p>For the first, <code>Mon</code> risks clashing with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Mon_\">docs#Mon_</a>, but I guess we had the same clash in mathlib.<br>\nFor the second, is <code>Mod</code> alright?</p>",
        "id": 354988864,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682980523
    },
    {
        "content": "<p>Yes, I think <code>Mon</code> and <code>Mod</code> are great. The clash with <code>Mon_</code> is \"by design\", <code>Mon_ C</code> is meant to be read as \"monoids in C\".</p>",
        "id": 354989103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682980678
    },
    {
        "content": "<p>I think we also have <code>Mod_ A</code> given <code>A : Mon_ C</code>.</p>",
        "id": 354989174,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682980712
    },
    {
        "content": "<p>I cannot find <code>Mod_</code> but its existence would indeed be a strong proponent for \"it's not a bug, it's a feature\" (of our naming convention)!</p>",
        "id": 354989393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682980826
    },
    {
        "content": "<p>Maybe that one never made it to a PR, sorry.</p>",
        "id": 354989427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682980845
    },
    {
        "content": "<p>Oh, it is there, but without the <code>_</code>. :-(</p>",
        "id": 354989522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682980900
    },
    {
        "content": "<p>I will rename it in mathlib, to avoid any porting trouble.</p>",
        "id": 354989612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682980932
    },
    {
        "content": "<p>Oh, I didn't see this.</p>",
        "id": 354990764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682981531
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18911\">#18911</a></p>",
        "id": 354990766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682981533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354989103\">said</a>:</p>\n<blockquote>\n<p>I think <code>Mon</code> and <code>Mod</code> are great.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3730\">!4#3730</a> and !#3731 are now updated to reflect your enthusiasm. But behold of merging both simultaneously because the <code>Mathlib</code> file will conflict, I'm afraid.</p>",
        "id": 354991064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682981722
    },
    {
        "content": "<p><code>Anneuax</code>?</p>",
        "id": 354995592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682984570
    },
    {
        "content": "<p>If it's not too late to toss in more suggestions: Some books write things like <code>𝒢roup</code> for the category of groups, etc. I am not a huge fan myself, but it's relatively inoffensive to type at least (and certainly better than unicode small caps)</p>",
        "id": 355449924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683121886
    },
    {
        "content": "<p>Isn't <code>Mod</code> the core library name for the class with <code>%</code>?</p>",
        "id": 355451257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683122165
    },
    {
        "content": "<p>And similarly for <code>Top</code>? Sorry if these were already pointed out and I missed it</p>",
        "id": 355451559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683122242
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mod#doc\">docs4#Mod</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Top#doc\">docs4#Top</a></p>",
        "id": 355460306,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683123934
    },
    {
        "content": "<p><code>TOP</code>? Or is this too Fortran?</p>",
        "id": 355569456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683136315
    },
    {
        "content": "<p>It does have a somewhat antique feel but I think it's okay</p>",
        "id": 355570218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683136499
    },
    {
        "content": "<p>If we go for <code>TopCat</code> then I will forever think of <a href=\"https://www.google.com/search?q=topcat&amp;tbm=isch\">this</a></p>",
        "id": 355571411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683136777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Definition of OuterMeasure</span>\n<span class=\"kd\">structure</span> <span class=\"n\">OuterMeasure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">measure_of</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span>\n  <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">measure_of</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mono</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">},</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">measure_of</span> <span class=\"n\">s₁</span> <span class=\"bp\">≤</span> <span class=\"n\">measure_of</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">union</span><span class=\"bp\">ᵢ</span><span class=\"n\">_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ofFunction</span> <span class=\"o\">:</span> <span class=\"n\">OuterMeasure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">boundedBy</span> <span class=\"o\">:</span> <span class=\"n\">OuterMeasure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">inducedOuterMeasure</span> <span class=\"o\">:</span> <span class=\"n\">OuterMeasure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infₛGen</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">OuterMeasure</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>there is no structure or class named OfFunction/BoundedBy/InducedOuterMeasure</p>\n<p>Should the name be of_function bounded_by induced_outer_measure?</p>\n<p>for infₛGen, the lean 3 name is Inf_gen, should the lean 4 name be infₛ_gen?</p>",
        "id": 355629701,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1683159909
    },
    {
        "content": "<p><code>infₛGen</code> is correct. <code>camelCase</code> for defs is the basic rule.</p>",
        "id": 355633972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683162332
    },
    {
        "content": "<p>(The others above are correct as well, <code>inducedOuterMeasure</code>, etc)</p>",
        "id": 355634087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683162372
    },
    {
        "content": "<p><code>measure_of</code> should be <code>measureOf</code>, right?</p>",
        "id": 355634546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683162612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/355634546\">said</a>:</p>\n<blockquote>\n<p><code>measure_of</code> should be <code>measureOf</code>, right?</p>\n</blockquote>\n<p>It's measureOf in master. I copied it from my old files.</p>",
        "id": 355637814,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1683164877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/355451559\">said</a>:</p>\n<blockquote>\n<p>And similarly for <code>Top</code>? Sorry if these were already pointed out and I missed it</p>\n</blockquote>\n<p>So either <code>Tops</code> or maybe <code>Topol</code>?</p>",
        "id": 355692623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683187349
    },
    {
        "content": "<p><code>submodule.fg</code> in Lean 3 is an acronym of \"finitely generated\", so this should be ported as <code>Submodule.FG</code> following the naming convention.<br>\nIndeed, this is ported as <code>Submodule.Fg</code>, and many related definitions like <code>Ideal.Fg</code> are so.<br>\nShould we admit <code>Fg</code> as a counter-example of the naming convention?</p>",
        "id": 357712556,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1683846034
    },
    {
        "content": "<p>/poll <code>fg</code> should be ported as<br>\nFg<br>\nFG</p>",
        "id": 357712651,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1683846085
    },
    {
        "content": "<p>Henceforth, we port <code>fg</code> to <code>FG</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3948\">!4#3948</a></p>",
        "id": 357976458,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1683921957
    },
    {
        "content": "<p>I am confused about the naming convention. </p>\n<p>We changed <code>unionᵢ</code> to <code>iUnion</code>. </p>\n<p>Why did we do that? </p>\n<p>I think it would be better if we followed the same naming convention as Rust. </p>\n<p>In Rust, all structures and classes are PascalCase, and all other identifiers are snake_case. </p>\n<p>This would make the code more consistent and easier to read.</p>\n<p>Do you think this is a good idea?</p>",
        "id": 358963061,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1684324433
    },
    {
        "content": "<blockquote>\n<p>Why did we do that?</p>\n</blockquote>\n<p>See <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/sup.2FSup\">#mathlib4 &gt; sup/Sup</a>. The <code>ᵢ</code> was too hard to distinguish from the subscript s.</p>",
        "id": 358964135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684324751
    },
    {
        "content": "<blockquote>\n<p>In Rust, all structures and classes are PascalCase, and all other identifiers are snake_case. </p>\n</blockquote>\n<p>In Lean, local variables and functions are camelCase. Changing this would be a massive refactor at this point</p>",
        "id": 358992489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684332175
    },
    {
        "content": "<p>Do we have a #naming4 yet?</p>",
        "id": 358994897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684332745
    },
    {
        "content": "<p>It's on the porting wiki page</p>",
        "id": 359035361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684343059
    },
    {
        "content": "<p>Yeah, I think the question was do we have a linkifier to it :-) (it's <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention</a> )</p>",
        "id": 359038135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684343787
    },
    {
        "content": "<p>I would vote for redirecting <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> . I think Lean 4 is in the lead now. Or maybe we just switch over all the linkifiers at the same time?</p>",
        "id": 359038231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684343811
    },
    {
        "content": "<blockquote>\n<p>Yeah, I think the question was do we have a linkifier to it </p>\n</blockquote>\n<p>That and promoting it to a more permanent page that isn't just scoped to porting work</p>",
        "id": 359042260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684344837
    },
    {
        "content": "<p>Shall I make a PR with the following renamings?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">infNndist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">infNNDist</span>\n<span class=\"n\">infEdist</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">infEDist</span>\n</code></pre></div>\n<p>following the naming convention of <code>ENNReal</code>?</p>",
        "id": 360306078,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684769260
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib4/pull/4214\">!4#4214</a> do the right thing. Renaming <code>aemeaurable</code> to <code>aeMeasurable</code> in lemmas?</p>",
        "id": 360316103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684771530
    },
    {
        "content": "<p>Does this mean that lemmas about <code>NNDist</code> should be named things like <code>nnDist_smul</code>?</p>",
        "id": 360316323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684771572
    },
    {
        "content": "<p>I would say so, but maybe I misremembered the convention</p>",
        "id": 360316715,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684771670
    },
    {
        "content": "<p>I don't think so, <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> certainly knows</p>",
        "id": 360322297,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684773165
    },
    {
        "content": "<p>Uppercased initial collections get lowercased as a group. So SMul becomes smul, and NNDist becomes nndist.</p>",
        "id": 360323280,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684773423
    },
    {
        "content": "<p>So to answer <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>' question, <code>AEMeasurable</code> becomes <code>aemeasurable</code> not <code>aeMeasurable</code>?</p>",
        "id": 360328769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684774809
    },
    {
        "content": "<p>Do we agree with the following names?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">AEMeasurable</span>\n<span class=\"n\">AEStronglyMeasurable</span>\n<span class=\"n\">AEStronglyMeasurable.aemeasurable</span>\n<span class=\"n\">aestronglyMeasurable_id</span>\n</code></pre></div>\n<p>There is still an <code>ae_eq</code> in many Lean 4 lemma names. This is a bit of a special case, since <code>ae_eq</code> is not a definition, just notation for <code>filter.eventually_eq</code>, and probably <code>ae_eq</code> is more readable than <code>aeeq</code> inside lemma names...</p>",
        "id": 360366438,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684786449
    },
    {
        "content": "<p><code>aeEq</code> is presumably the other option</p>",
        "id": 360366804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684786573
    },
    {
        "content": "<p>since <code>ae_eq</code> is not a definition but it is used like one in theorems, I'm also inclined to call it <code>aeEq</code></p>",
        "id": 360369017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684787442
    },
    {
        "content": "<p>Yeah, I feel like the cap after the <code>ae</code> shouldn't be lower-cased, so <code>aeEq</code>, <code>aeMeasurable</code>.</p>",
        "id": 360369274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684787501
    },
    {
        "content": "<p>Ah, but the point is that if it were a definition it would be <code>AEEq</code> and so would lowercase as <code>aeeq</code></p>",
        "id": 360370972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684788146
    },
    {
        "content": "<p>And if we think <code>aeEq</code> is the right name then <code>ENNReal</code> would lowercase to <code>ennReal</code> not <code>ennreal</code>, and <code>SMul</code> to <code>sMul</code>.</p>",
        "id": 360373174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684789005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/360370972\">said</a>:</p>\n<blockquote>\n<p>Ah, but the point is that if it were a definition it would be <code>AEEq</code> and so would lowercase as <code>aeeq</code></p>\n</blockquote>\n<p>Yes, that was my thought...</p>",
        "id": 360373483,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684789111
    },
    {
        "content": "<p>I'd prefer not to use this example as motivation to change all the others. frankly having a one off exception sounds better than that, especially if it is in the name of readability</p>",
        "id": 360374599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684789499
    },
    {
        "content": "<p>I didn't mean that it would be treated as the lowercased version of a definition that doesn't exist, but rather as a non-definition label segment like <code>trans</code>, which could be either snake cased or camel cased</p>",
        "id": 360375006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684789623
    },
    {
        "content": "<p>I'm with Mario on that one. I see <code>ae</code> as a modifier, just like <code>u</code>, <code>i</code>, <code>c</code> before <code>Icc</code>.</p>",
        "id": 360376573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684790051
    },
    {
        "content": "<p>Well <code>enn</code> is a modifier too...</p>",
        "id": 360378941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684790802
    },
    {
        "content": "<p>The main difference being that <code>uIcc</code> and <code>iUnion </code>etc aren't types, so we don't have to re-case them</p>",
        "id": 360379034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684790841
    },
    {
        "content": "<p><code>aeEq</code> isn't a type either IIUC</p>",
        "id": 360379557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684791050
    },
    {
        "content": "<p>it's just a thing we say on theorems about a.e. equality</p>",
        "id": 360379605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684791070
    },
    {
        "content": "<p>and I'm also not talking about modifiers like <code>u</code> <code>i</code> which go inside definition names, I mean label fragments that show up in theorem names that are not a symbol reading label, like <code>refl</code>, <code>trans</code>, <code>assoc</code>, <code>comm</code> etc</p>",
        "id": 360379927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684791196
    },
    {
        "content": "<p>I'm saying we could categorize <code>aeEq</code> as such a label fragment, in which case we have more flexibility on casing it (basically it should consist of 1 or more camel cased components separated by <code>_</code>)</p>",
        "id": 360380111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684791274
    },
    {
        "content": "<p>I think we should maintain a list of exceptions to the naming convention, or else write it in the docstring. That way a future person (maybe even one of us) doesn't come along and say: \"oh, this is misnamed, PR'd\"</p>",
        "id": 360384500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684793403
    },
    {
        "content": "<p>Trying to catch up with the naming convention. Can someone remind me why we have <code>Tendsto</code> with a capital, but <code>interior</code> without a capital?</p>",
        "id": 374279254,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689084303
    },
    {
        "content": "<p>The first is a Sort, the second is not.</p>",
        "id": 374279450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689084339
    },
    {
        "content": "<p>BTW, should we rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.coprime#doc\">docs#Nat.coprime</a> to <code>Nat.Coprime</code>?</p>",
        "id": 374297541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689087620
    },
    {
        "content": "<p>Wouldn't that mean it's a Sort?</p>",
        "id": 374299987,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689088082
    },
    {
        "content": "<p>The rule's not that the constant itself is a <code>Sort</code>, but whether after applying all the arguments you get a <code>Sort</code></p>",
        "id": 374300697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689088214
    },
    {
        "content": "<p>(and if something is <code>Set</code>-valued, you're supposed to ignore that <code>Set X = X -&gt; Prop</code>, since sets aren't meant to be treated as functions.)</p>",
        "id": 374300972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689088274
    },
    {
        "content": "<p>E.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsOpen#doc\">docs#IsOpen</a> is a predicate too.</p>",
        "id": 374305386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689089065
    },
    {
        "content": "<p>I don't really understand how <code>Tendsto</code> is supposed to be a Sort, but I can definitely live with the rule that Prop-valued stuff are capitalized, and Set-valued stuff are not.</p>",
        "id": 374314006,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689090474
    },
    {
        "content": "<p><code>Tendsto</code> is Prop-valued. <code>Prop = Sort 0</code>. That's all we're saying.</p>",
        "id": 374315440,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689090745
    },
    {
        "content": "<p>The rule is that types begin with capital letters and terms begin with small letters, apart from functions, where you have to look at the target. <code>Tendsto</code> is a function which takes some inputs and returns a type (or more precisely a Prop) so it's capital.</p>",
        "id": 374548794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689154515
    },
    {
        "content": "<p>And the rule doesn't apply for <code>t : Set X</code> because you're not allowed to unfold <code>Set</code></p>",
        "id": 374549004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689154552
    },
    {
        "content": "<p>Is this the right document to go by: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#naming-convention</a> ?<br>\nIf so, I'm not sure if I follow rule three \"Functions are named the same way as their return values (e.g. a function of type A → B → C is named as though it is a term of type C).\" in regards to \"<code>Tendsto</code> is a function which takes some inputs and returns a type (or more precisely a Prop) so it's capital.\". Should the rule read \"as though it is type C\" instead of \"as though it is a term of type C\"? For example should I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NotFree</span>\n  <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">VarName</span> <span class=\"bp\">×</span> <span class=\"n\">MetaVarName</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">not_free</span>\n  <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">VarName</span> <span class=\"bp\">×</span> <span class=\"n\">MetaVarName</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is there, or is it possible to have, a linter for the naming convention?</p>",
        "id": 382425205,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691348097
    },
    {
        "content": "<p>The first one is right! I think the wording is right too—we want to name <code>NotFree</code> as though it is a term of type <code>Prop</code>, i.e. as though <code>NotFree : Prop</code>. Though, is there a chance the phrase “<code>a</code> is a term of type <code>C</code>” could get interpreted as anything other than <code>a : C</code>? If so maybe we should clarify!</p>",
        "id": 382426449,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691348662
    },
    {
        "content": "<p>If it is a term of type <code>Prop</code> then wouldn't that go to rule 1 \"Terms of Props (e.g. proofs, theorem names) are in snake_case.\"?</p>",
        "id": 382426844,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691348806
    },
    {
        "content": "<p>Hmm, I think that has to do with calling things which have type <code>A</code> simply <code>A</code>s. So the phrase “Terms of Props” ~ “Terms of {things <code>a</code> which have type <code>Prop</code>}” ~ “things which have type <code>a</code>, where <code>a</code> has type Prop” ~ “things <code>h</code> where <code>h : a</code> and <code>a : Prop</code>”. Also, in general, “a term of <code>A</code>” means the same as “a term of type <code>A</code>”.</p>\n<p>Afaik this lingo is type-theoretically standard but can be confusing…maybe we should stick to a single way to phrase things in the naming conventions/most important docs?</p>",
        "id": 382427842,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691349244
    },
    {
        "content": "<p>(Also, tangent: we should probably move/copy the naming convention into a page called “contribution guidelines” or something like that. I know it’s also in Lean 4 survival guide for Lean 3 users, but this applies to everyone now! :) )</p>",
        "id": 382428156,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691349372
    },
    {
        "content": "<p>Is it possible to make a linter for this?</p>",
        "id": 382428671,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691349609
    },
    {
        "content": "<p>Or to write the guide using some kind of pattern matching on the result of running <code>#check</code> on the expression?</p>",
        "id": 382429239,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691349859
    },
    {
        "content": "<p>A linter would be neat imo! (I’m trying to see if it’s been discussed before…)</p>",
        "id": 382430173,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691350318
    },
    {
        "content": "<p>the logic is already implemented in mathport but not as a linter</p>",
        "id": 382433011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691351773
    },
    {
        "content": "<p>What would need to be done to turn it into a linter?</p>",
        "id": 382444211,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691357947
    },
    {
        "content": "<p>I should probably learn how to do this kind of programming in Lean.</p>",
        "id": 382444607,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691358265
    },
    {
        "content": "<p>Do I have this right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lower_snake_case</span> <span class=\"o\">:</span> <span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">lowerCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>?</p>",
        "id": 382447907,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691360374
    },
    {
        "content": "<p>Yup! :) (And the first two naming conventions there also ignore initial <code>A → B → …</code>’s, as well—e.g. <code>lower_snake_case : A → B → UpperCamelCase</code>, where <code>UpperCamelCase : Prop</code>)</p>",
        "id": 382448170,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691360604
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 382448432,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691360863
    },
    {
        "content": "<p>Ie,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">lower_snake_case</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">lowerCamelCase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"n\">lower_snake_case</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"n\">lowerCamelCase</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">UpperCamelCase</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 382449049,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691361360
    },
    {
        "content": "<p>Yup! The rule is that <code>h : Foo</code> should always be named the same way as <code>h' : A → Foo</code>, no matter what <code>Foo</code> is. Arguments/hypotheses don’t affect naming.</p>",
        "id": 382450421,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691362549
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 382450567,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691362671
    },
    {
        "content": "<p>What is the status of the naming convention regarding terms of type <code>List.TFAE</code>? Per the naming convention, I would expect them to be lowercase, but <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> pointed out that we have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=t1Space_TFAE#doc\">docs#t1Space_TFAE</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsGalois.tfae#doc\">docs#IsGalois.tfae</a>. Do we have an exception for this, or do we want to make one, or just go with <code>tfae</code>?</p>",
        "id": 383372035,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691602886
    },
    {
        "content": "<p>(I think currently we even have more instances of <code>TFAE</code>, but that shouldn't have any importance)</p>",
        "id": 383372961,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691603093
    },
    {
        "content": "<p>Surely <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.limsSup#doc\">docs#Filter.limsSup</a> should be <code>Filter.sLimsup</code>? It currently reads as <code>lims</code> + <code>sup</code>.</p>",
        "id": 387898616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693320617
    },
    {
        "content": "<p>And leave <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.limsup#doc\">docs#Filter.limsup</a> alone, correct?</p>",
        "id": 387904132,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693322197
    },
    {
        "content": "<p>Yes. Another option would be to also rename <code>limsup</code> to <code>iLimsup</code>, but I think that's unnecessary.</p>",
        "id": 387906708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693322921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/383372035\">said</a>:</p>\n<blockquote>\n<p>What is the status of the naming convention regarding terms of type <code>List.TFAE</code>? Per the naming convention, I would expect them to be lowercase, but <span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> pointed out that we have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=t1Space_TFAE#doc\">docs#t1Space_TFAE</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsGalois.tfae#doc\">docs#IsGalois.tfae</a>. Do we have an exception for this, or do we want to make one, or just go with <code>tfae</code>?</p>\n</blockquote>\n<p>Seems like we have six of one, half a dozen of the other. How about a poll?</p>",
        "id": 390718024,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694609972
    },
    {
        "content": "<p>/poll What should the naming convention be?<br>\ntfae<br>\nTFAE<br>\ntFAE</p>",
        "id": 390718041,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694609979
    },
    {
        "content": "<p>Doesn't the naming convention indicate that \"TFAE\" should be capitalized because it's <code>Prop</code>-valued?</p>",
        "id": 390726091,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694612471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, I think the question is how it should be used in lemmas that are of the form <code>theorem foo : List.TFAE [X, Y, Z]</code>. I don't think the proposal is to rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TFAE#doc\">docs#List.TFAE</a> itself.</p>",
        "id": 390727913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694612994
    },
    {
        "content": "<p>Oh. Then I change my vote to <code>tfae</code> only.</p>",
        "id": 390728421,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694613147
    },
    {
        "content": "<p>Exactly, thanks for clarifying Eric</p>",
        "id": 390728541,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694613186
    },
    {
        "content": "<p>Currently we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetTheory.PGame.leLfDecidable#doc\">docs#SetTheory.PGame.leLfDecidable</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">leLfDecidable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PGame.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">Short</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Short</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⧏</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetTheory.PGame.Lf#doc\">docs#SetTheory.PGame.Lf</a> should be renamed to <code>SetTheory.PGame.LF</code>, then</p>",
        "id": 391087162,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694757856
    },
    {
        "content": "<p>/poll leLfDecidable should be renamed to<br>\nleLFDecidable<br>\nlelfDecidable</p>",
        "id": 391087170,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694757862
    },
    {
        "content": "<p>I want to port my project respecting the new naming conventions but am confused by the example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- follows rules 2 and 6</span>\n<span class=\"kd\">class</span> <span class=\"n\">LT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- follows rule 4 and 6</span>\n</code></pre></div>\n<p>where said rules are:<br>\n2) <code>Prop</code>s and <code>Type</code>s (or <code>Sort</code>) (inductive types, structures, classes) are in <code>UpperCamelCase</code>.<br>\n4) All other terms of <code>Type</code>s (basically anything else) are in <code>lowerCamelCase</code>.<br>\n6) Acronyms like <code>LE</code> are written upper-/lowercase as a group, depending on what the first character would be.</p>\n<p>However there is also rule 3 which should in theory have priority over rule 4?<br>\n3) Functions are named the same way as their return values (e.g. a function of type <code>A → B → C</code> is named as though it is a term of type <code>C</code>).</p>\n<p>Then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- follows rules 2 and 6</span>\n<span class=\"kd\">class</span> <span class=\"n\">LT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">LT</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"c1\">-- follows rule 3 and 6</span>\n</code></pre></div>",
        "id": 395698303,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1696857668
    },
    {
        "content": "<p>This is because <code>LT</code> (and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership#doc\">docs#Membership</a>) are in Lean core, and are not subject to mathlib's naming conventions</p>",
        "id": 395698730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696857791
    },
    {
        "content": "<p>Core appears to have it's own \"things in a structure / class are never <code>UpperCamelCase</code>\" rule that conflicts with mathlib's rules.</p>",
        "id": 395698855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696857833
    },
    {
        "content": "<p>Some previous discussion on that point:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/naming.20conventions/near/320927863\">said</a>:</p>\n<blockquote>\n<p>Because it's in core. I had a conversation with Leo about this; one of the points he disagrees with on the current style guide is that structure fields being capitalized is too weird (examples given include <code>Membership.mem</code> and <code>LE.le</code>). I've been putting off what to do about this situation, but there is an open PR <a href=\"https://github.com/leanprover/lean4/pull/1897\">lean4#1897</a> about it. Leo has indicated that he doesn't want to lose hair in naming convention discussions, which I totally understand. I'm not really sure how best to approach the situation, but it would be good if we could find a compromise which isn't just special casing these classes.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/329751806\">said</a>:</p>\n<blockquote>\n<p>I don't really understand the rules for <code>Prop</code>-valued fields. According to the wiki, they should be capitalized, but for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership.mem#doc\">docs4#Membership.mem</a> is lower-case.</p>\n</blockquote>",
        "id": 395699098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696857907
    },
    {
        "content": "<p>Thanks! But even in Mathlib.Logic.Basic we have things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dec_em'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dec_em</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Shouldn't <code>p</code> be uppercase here?</p>",
        "id": 395699482,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1696858013
    },
    {
        "content": "<p>Yes, but I think we're pretty lazy about naming conventions when it comes to naming hypotheses</p>",
        "id": 395699865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858135
    },
    {
        "content": "<p>I'd be happy to merge a PR that upper-cases all the <code>Prop</code> arguments in that file</p>",
        "id": 395699901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858150
    },
    {
        "content": "<p>But it's probably not the best use of your time!</p>",
        "id": 395699921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858157
    },
    {
        "content": "<p>Naming matters most for the things that people need to be able to guess the name of; and you very rarely need to guess the name of a hypothesis.</p>",
        "id": 395699968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858177
    },
    {
        "content": "<p>I do think that if <code>LT</code>/<code>lt</code> doesn't actually conform to Mathlib naming conventions then it probably shouldn't be used as an example on the Mathlib naming conventions page!</p>",
        "id": 395700279,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1696858273
    },
    {
        "content": "<p>A PR to fix that sounds like a much better use of your time!</p>",
        "id": 395700662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858410
    },
    {
        "content": "<p>Oh no, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Dvd.dvd#doc\">docs#Dvd.dvd</a> has the same problem... (and isn't in core)</p>",
        "id": 395700924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696858498
    },
    {
        "content": "<p>I think there are probably a lot of these discrepancies.</p>",
        "id": 395727670,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696866790
    },
    {
        "content": "<p>I would go so far as to say that local variables in definitions don't follow the usual naming convention for declarations, they have their own thing (mostly TBD). For programming, this basically means using lowercase camel case for variable names</p>",
        "id": 395730149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696867658
    },
    {
        "content": "<p>but mathlib has a bunch of additional stuff about names of types denoting rings etc</p>",
        "id": 395730273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696867695
    },
    {
        "content": "<p>Do you think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Dvd.dvd#doc\">docs#Dvd.dvd</a> should be renamed? As it's not in core, we have the power to rename it</p>",
        "id": 395733132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696868998
    },
    {
        "content": "<p>Then we'll just have people saying \"Why is it <code>Add.add</code> but <code>Dvd.Dvd</code>?\" which is probably worse.</p>",
        "id": 395733917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696869256
    },
    {
        "content": "<p>It would cause naming conflicts with the parent class to have <code>Dvd.Dvd</code>. In the similar case of subset we used <code>HasSubset.Subset</code> to address this</p>",
        "id": 395734041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/395733917\">said</a>:</p>\n<blockquote>\n<p>Then we'll just have people saying \"Why is it <code>Add.add</code> but <code>Dvd.Dvd</code>?\" which is probably worse.</p>\n</blockquote>\n<p>At least in this case we have a coherent and documented answer for the 'why' question though</p>",
        "id": 395734451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869438
    },
    {
        "content": "<p>Yeah but it's also a pretty crap answer: why should a mathematician care about what is in core and what is not?</p>",
        "id": 395734846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696869554
    },
    {
        "content": "<p>no I mean the 'read the naming convention' answer</p>",
        "id": 395735136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869705
    },
    {
        "content": "<p><code>Add.add</code> is following the conventions</p>",
        "id": 395735145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869713
    },
    {
        "content": "<p><code>LE.le</code> and <code>Membership.mem</code> are not</p>",
        "id": 395735230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869742
    },
    {
        "content": "<p>because <code>Add.add</code> returns a value in an arbitrary type aka \"data\", while <code>Dvd.dvd</code> returns a <code>Prop</code></p>",
        "id": 395735351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696869817
    },
    {
        "content": "<p>Oh yes of course!</p>",
        "id": 395737695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696870933
    },
    {
        "content": "<p>Why not just <code>HasDvd</code>?</p>",
        "id": 395744911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696874940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/395734041\">said</a>:</p>\n<blockquote>\n<p>It would cause naming conflicts with the parent class to have <code>Dvd.Dvd</code>.</p>\n</blockquote>\n<p>Why is there a conflict?</p>",
        "id": 395745157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696875108
    },
    {
        "content": "<p>if one of them is open or exported then you can't refer to them separately</p>",
        "id": 395745241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696875142
    },
    {
        "content": "<p>for notation typeclasses it is not uncommon to export them</p>",
        "id": 395745288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696875170
    },
    {
        "content": "<p>Should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalHomeomorph.eq_of_eq_on_source_univ#doc\">docs#LocalHomeomorph.eq_of_eq_on_source_univ</a> be renamed to <code>eq_of_eqOnSource_univ</code>? Note that the hypothesis includes an <code>EqOnSource</code> hypothesis (it's not an equality of functions on some set).</p>\n<p>Same question for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalEquiv.eq_of_eq_on_source_univ#doc\">docs#LocalEquiv.eq_of_eq_on_source_univ</a>.</p>",
        "id": 399950699,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698935571
    },
    {
        "content": "<p>Yes.</p>",
        "id": 399951002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698935646
    },
    {
        "content": "<p>Will PR later today (unless objections come up).</p>",
        "id": 399951101,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698935678
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover-community/mathlib4/pull/8121\">#8121</a></p>",
        "id": 399959485,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698937410
    },
    {
        "content": "<p>How to name lemmas containing a hypothesis of the form <code>IsOpen s</code>? Currently, <a href=\"https://loogle.lean-lang.org/?q=%22of_open%22\">mathlib</a> <a href=\"https://loogle.lean-lang.org/?q=%22of_isOpen%22\">mixes</a> <code>of_open</code> and <code>of_isOpen</code>; @sgouezel suggested I use the latter in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8057\">#8057</a>. In my understanding,</p>\n<ul>\n<li>\"of_isOpen\" matches naming conventions on the nose (the definition is called IsOpen, after all)</li>\n<li>at first sight, \"preimage_open_of_open\" reads nicer to me than \"preimage_isOpen_of_isOpen\" (but I certainly can get used to both)</li>\n</ul>\n<p>Is a PR to rename all these welcome? (Right now, mathlib has only 47 lemmas named like this, so it wouldn't be a <em>huge</em> PR.)</p>",
        "id": 402672476,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700218984
    },
    {
        "content": "<p>Same question for IsClosed, IsCompact, IsSigmaCompact, IsNowhereDense, etc.</p>",
        "id": 402672501,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700218994
    },
    {
        "content": "<p>How many of those other examples? :)</p>",
        "id": 402673142,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700219190
    },
    {
        "content": "<p><a href=\"https://loogle.lean-lang.org/?q=%22of_closed%22\">Loogle</a> counts 43 hits for \"of_closed\", at least one false positive, <a href=\"https://loogle.lean-lang.org/?q=%22of_compact%22\">44 hits</a> for \"of_compact\" (with some being definitely false positives and fine).<br>\nI get 30 hits for \"of_bounded\" (unverified), IsSigmaCompact is all fine; 3 for \"IsNowhereDense\".</p>",
        "id": 402679426,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700221499
    },
    {
        "content": "<p>I think <code>preimage_isOpen_of_isOpen</code> reads very nicely!</p>",
        "id": 402702026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700228713
    },
    {
        "content": "<p>I am <em>strongly</em> in favor of normalizing all these names to use <code>isOpen</code>. It is super annoying to remember which lemmas are named wrong to shorten them.<br>\nThe name of something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousOn.preimage_open_of_open#doc\">docs#ContinuousOn.preimage_open_of_open</a> is a mess: it doesn't even mention <code>inter</code> in the name. I would go for <code>ContinuousOn.isOpen_inter_preimage</code> (and only add <code>of_isOpen</code> if needed to disambiguate with another lemma).</p>",
        "id": 402702125,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700228752
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Closeds.closed#doc\">docs#TopologicalSpace.Closeds.closed</a> should also be renamed to <code>TopologicalSpace.Closeds.isClosed</code>.</p>",
        "id": 402702316,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700228810
    },
    {
        "content": "<p>(<code>isOpen</code> certainly reads nicer than <code>is_open</code> would have done)</p>",
        "id": 402703616,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700229266
    },
    {
        "content": "<p>For LFTCM 2024 we should do a name-parsing pubquiz. You get a mathlib lemma name, and you have to guess the statement of the lemma.</p>",
        "id": 402704668,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700229617
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8229\">#8229</a> does the first ten lemma names for \"isOpen\" (all about (f)deriv). More to follow tonight.</p>",
        "id": 402705645,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700229854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/402704668\">said</a>:</p>\n<blockquote>\n<p>For LFTCM 2024 we should do a name-parsing pubquiz. You get a mathlib lemma name, and you have to guess the statement of the lemma.</p>\n</blockquote>\n<p>I have thought about doing this for my course too. I don't see why it should be LFTCM 2024, I think it should be up on the community website, should be large, and should start with some easy ones and then attempt to teach some principles with later questions. And it should go in both directions: statement -&gt; name and name -&gt; statement. Anyone fancy taking this on?</p>",
        "id": 402711098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700231605
    },
    {
        "content": "<p>I went over all lemmas with \"of_open\" in their name and renamed as appropriate. Pushed all of those to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8229\">#8229</a>. I appreciate ideas on a better name for <code>continuousOn_isOpen_of_generateFrom</code>; I find the current name somewhat confusing.</p>",
        "id": 402759351,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700247897
    },
    {
        "content": "<p>New question: do we prefer \"of_open_cover\" or \"of_openCover\"?</p>",
        "id": 402759382,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700247907
    },
    {
        "content": "<p>Is it about something called <code>OpenCover</code>?</p>",
        "id": 402759585,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700247995
    },
    {
        "content": "<p>No, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=T0Space.of_open_cover#doc\">docs#T0Space.of_open_cover</a> is not - so it should be \"of_open_cover\", right?</p>",
        "id": 402769450,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700250373
    },
    {
        "content": "<p>Exactly</p>",
        "id": 402771254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700251228
    },
    {
        "content": "<p>Well, we can make non-definitions be atomic names in the grand (naming) scheme of things. But this decision has to be recorded <em>somewhere</em> in the documentation.</p>",
        "id": 402789526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700260017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8492\">#8492</a> has three more renames</p>",
        "id": 402878049,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700315137
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addNsmul</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">projIcc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Should this be <code>addNSMul</code>?</p>",
        "id": 405151803,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701361021
    },
    {
        "content": "<p>Nsmul appears 14 times while <del>NSmul only appears in the definition of the class once</del><br>\n<a href=\"/user_uploads/3121/XDb8tWGwIIhxszLcu78Y2cZL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XDb8tWGwIIhxszLcu78Y2cZL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XDb8tWGwIIhxszLcu78Y2cZL/image.png\"></a></div>",
        "id": 405153492,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701361593
    },
    {
        "content": "<p>Looks like <code>to_additive</code> agrees with the capitals, though</p>",
        "id": 405154303,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701361841
    },
    {
        "content": "<p>Sorry, it seems NSMul does appear a lot more times (38):<br>\n<a href=\"/user_uploads/3121/DOXKb-5IFmxvHmGa48xwoiqB/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/qlAw0Ylk_Dqi0OI7QHHGLBdn/image.png\">image.png</a><br>\nI searched the wrong capitalization NSmul (and there's one result in to_additive)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DOXKb-5IFmxvHmGa48xwoiqB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DOXKb-5IFmxvHmGa48xwoiqB/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qlAw0Ylk_Dqi0OI7QHHGLBdn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qlAw0Ylk_Dqi0OI7QHHGLBdn/image.png\"></a></div>",
        "id": 405156338,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701362439
    },
    {
        "content": "<p>Let me fix it in a subsequent PR (about homotopy lifting); it's not very likely it will get used elsewhere soon, so no rush I guess...</p>",
        "id": 405159909,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701363461
    }
]