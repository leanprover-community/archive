[
    {
        "content": "<p><code>to_additive</code> doesn't seem to  like the use of the equation compiler in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2046\">!4#2046</a> (a forward-port). Is this a problem we already know about?</p>",
        "id": 326390232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675784056
    },
    {
        "content": "<p>The error there is <a href=\"https://github.com/leanprover-community/mathlib4/pull/2046/files#diff-85059824b1e928b1e837ac778960d991bfe9d6cb1809f5c4fdc4151432967790R168-R174\">on these lines</a>, and is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">GroupPower</span><span class=\"bp\">/</span><span class=\"n\">Order.lean</span><span class=\"o\">:</span><span class=\"mi\">168</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 326390368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675784099
    },
    {
        "content": "<p>Replacing <code>1</code> in the match with <code>Nat.succ 0</code> seems to fix it</p>",
        "id": 326391402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675784387
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_bar</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 326391969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675784529
    },
    {
        "content": "<p>This one is indeed new.</p>\n<p>The problem is that the elaborated term contains <code>motive 1</code>, where <code>1</code> is a pure natural number literal, not within a <code>ofNat</code> application (which the elaborator inserts in all other cases we've encountered so far).<br>\nThis means we do not know what type this literal is supposed to be in.<br>\nI'll try to add the rule that a variable applied to a literal should never be changed. Hopefully that will not break other cases.</p>",
        "id": 326412639,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675789851
    },
    {
        "content": "<p>Could this be an elaboration bug?</p>",
        "id": 326420173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675791769
    },
    {
        "content": "<p>I expect this is intended behavior. But the fix is easy <a href=\"https://github.com/leanprover-community/mathlib4/pull/2153\">!4#2153</a> and seems to have no bad side-effects</p>",
        "id": 326447487,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675800325
    }
]