[
    {
        "content": "<p>In this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Derivative</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dual</span>\n\n<span class=\"c1\">-- uncomment this line to fix the file</span>\n<span class=\"c1\">--attribute [-instance] Module.Dual.instFunLikeDual</span>\n\n<span class=\"c1\">--set_option trace.Meta.synthInstance true in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Polynomial.derivative</span> <span class=\"n\">f</span> <span class=\"c1\">-- error: function expected at derivative</span>\n</code></pre></div>\n<p>the example doesn't work, but if you remove the instance which is breaking it then it does work. With the \"bad\" instance removed, <code>set_option trace.Meta.synthInstance</code> finds <code>LinearMap.instFunLikeLinearMap</code>. But with the bad instance present Lean seems to use it and then give up. Any ideas about how to fix this?</p>",
        "id": 377016781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689865714
    },
    {
        "content": "<p>Kevin, see also <a href=\"#narrow/stream/287929-mathlib4/topic/notation.20capturing.20type.20information\">this thread</a>. The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual.instFunLikeDual#doc\">docs#Module.Dual.instFunLikeDual</a> instance is not actually necessary (because <code>Module.Dual</code> is reducible), but it still shouldn't cause this breakage. I think there are other instances like this breaking things in the library.</p>",
        "id": 377026612,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689867318
    },
    {
        "content": "<p>Oh weird that we both found this issue this week!</p>",
        "id": 377027732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689867496
    },
    {
        "content": "<p>At some point during porting in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3659\">#3659</a>, <code>Module.dual</code> went from being semireducible (like in mathlib3) to reducible, just in case anyone is wondering why this instance exists.</p>",
        "id": 377028840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689867676
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.dual\">docs3#module.dual</a> is also reducible (but in mathlib3 it was changed to be so during the port)</p>",
        "id": 377030249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689867911
    },
    {
        "content": "<p>Right, I meant to say \"like in mathlib3 at the time\". It was backported in <a href=\"https://github.com/leanprover-community/mathlib/pull/18963\">mathlib#18963</a></p>",
        "id": 377030618,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689867974
    }
]