[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Monotone.comp</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 339457942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677883368
    },
    {
        "content": "<p>It seems that Lean <code>intro</code>s as many variables as it can before looking for new style dot notation. Is it intentional? Is it documented?</p>",
        "id": 339458014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677883405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 339490016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677906177
    },
    {
        "content": "<p>it doesn't sound intentional</p>",
        "id": 339490154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677906287
    },
    {
        "content": "<p>it does sound like there is a pretty large search space of potential interpretations though</p>",
        "id": 339490178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677906305
    },
    {
        "content": "<p>Do you often have many stages with named output type?</p>",
        "id": 339490791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677906810
    },
    {
        "content": "<p>is it related to implicit lambdas?</p>",
        "id": 339490805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677906829
    },
    {
        "content": "<p>No, Lean just <code>intro</code>s everything it can before trying new style dot notation.</p>",
        "id": 339490903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677906892
    },
    {
        "content": "<p>I'm OK with \"try <code>NS.name</code> if the current goal is a named type <code>NS</code>, then intro everything we can\".</p>",
        "id": 339491021,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677907000
    },
    {
        "content": "<p>This doesn't increase the search space too much.</p>",
        "id": 339491035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677907027
    }
]