[
    {
        "content": "<p>Is there a tactic for fraction cancellation? I want to discharge the following goal by a single command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xnn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_self</span> <span class=\"n\">xnn</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 329790117,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677176763
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#field_simp\">tactic#field_simp</a></p>",
        "id": 329790613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677176913
    },
    {
        "content": "<p>I don't know if it's in lean4 yet</p>",
        "id": 329790662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677176932
    },
    {
        "content": "<p>Yes!<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/0a70c6a60b7e7fd01509d729b3dd2394c10c476b/Mathlib/Tactic/FieldSimp.lean\">https://github.com/leanprover-community/mathlib4/blob/0a70c6a60b7e7fd01509d729b3dd2394c10c476b/Mathlib/Tactic/FieldSimp.lean</a></p>",
        "id": 329796104,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677178618
    },
    {
        "content": "<p>Is there a tactic that wouldn't require the first line to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span>\n  <span class=\"n\">field_simp</span>\n</code></pre></div>",
        "id": 329797300,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677178982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 329800287,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677179843
    },
    {
        "content": "<p>Is there an automatic tactic?</p>",
        "id": 329800371,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677179881
    },
    {
        "content": "<p>Does <code>group</code> work here?</p>",
        "id": 329813942,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677184633
    },
    {
        "content": "<p><code>group</code> shouldn't work, since <code>R</code> is not a multiplciative group</p>",
        "id": 329814796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677184955
    },
    {
        "content": "<p>No. It just changes the goal to <code>x ^ 2 * x ^ (-1) = x</code>.</p>",
        "id": 329814805,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677184960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/329800287\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How could a student who doesn't know names of mathlib lemmata solve it? I cannot convince <code>library_search</code> to give me anything meaningful. And I don't know any tactic to solve it automatically.</p>",
        "id": 337900368,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677278531
    },
    {
        "content": "<p>Practice and asking questions.</p>",
        "id": 337904167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677280149
    },
    {
        "content": "<p>That's a beautifully universal answer, but I wish there was a way for students to prove <code>x^2 / x = x</code> using just the IDE.</p>",
        "id": 337904626,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677280373
    },
    {
        "content": "<p>One trick is to analyse why library search might not be finding something (is it not imported, what format should the library lemma be in, how can you break the problem down). In this case it could be because your lemma is too specialized or not in the most atomic form, it should really be a combination of <code>x^n/x^m = x^(n-m)</code> and then a norm_num call.</p>",
        "id": 337904969,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677280531
    },
    {
        "content": "<p>Also worth mentioning that of course mathlib 4 library search only knows what is already ported, while we are in this transition I often look things up in lean 3 and then check if that file is ported rather than searching directly in lean 4</p>",
        "id": 337905125,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677280588
    },
    {
        "content": "<p>I just realized I can't even prove <code>x^2 / x = x</code> in Lean 3 without writing a lemma name.</p>",
        "id": 337907299,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677281628
    },
    {
        "content": "<p>Which is really embarrassing. I can't imagine teaching it to other people.</p>",
        "id": 337907764,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677281845
    },
    {
        "content": "<p>I wanted to give my students a small set of tactics such that they would be able to solve all easy problems by combination of these tactics, without having to learn how stuff is named and organized in mathlib.</p>",
        "id": 337908006,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677281976
    },
    {
        "content": "<p>My first idea was to tell them to alternate between <code>convert_to</code> and <code>library_search</code> until they solve the problem. It turns out to be a very naïve idea.</p>",
        "id": 337908308,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282130
    },
    {
        "content": "<p>If there was a super simple recipe that solved all \"easy\" problems I think someone would have turned it into a tactic by now, and we'd all be using it</p>",
        "id": 337908409,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677282196
    },
    {
        "content": "<p>I don't mean an <em>algorithm</em> to solve all <em>easy</em> problems.</p>",
        "id": 337908551,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282251
    },
    {
        "content": "<p>It kinda sounds like it? A \"small set of tactics such that they would be able to solve all easy problems by combination of these tactics\" is pretty close to an algorithm surely</p>",
        "id": 337908636,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677282304
    },
    {
        "content": "<p>I wanted to teach them that if they come up with good intermediate goals for <code>convert_to</code> they will eventually beat the problem.</p>",
        "id": 337908674,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282328
    },
    {
        "content": "<p>Creative thinking would be still needed, but the amount of technicalities they would need would be very limited.</p>",
        "id": 337908712,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282359
    },
    {
        "content": "<p>Anyway I think you are doing the right thing by trying to ensure that the problems you give are solvable by students. But it may not be that what is easy on paper (because it is intuitively obvious) is easy in lean + mathlib, because of how the libraries are intended to be used</p>",
        "id": 337908786,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677282383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337908674\">said</a>:</p>\n<blockquote>\n<p>I wanted to teach them that if they come up with good intermediate goals for <code>convert_to</code> they will eventually beat the problem.</p>\n</blockquote>\n<p>Which by no means implies an existence of an algorithm or a possibility of a tactic to do it automatically.</p>",
        "id": 337908848,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282434
    },
    {
        "content": "<p>What are you trying to teach them, mathematics or how to formalize mathematics / cs that they know already?</p>",
        "id": 337909026,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677282518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337908786\">said</a>:</p>\n<blockquote>\n<p>Anyway I think you are doing the right thing by trying to ensure that the problems you give are solvable by students. But it may not be that what is easy on paper (because it is intuitively obvious) is easy in lean + mathlib, because of how the libraries are intended to be used</p>\n</blockquote>\n<p>Of course I will carefully select the problems for my students. The issue is that subproblems like <code>x^2 / x = x</code> can easily pop up when students choose an unexpected way to solve a problem (a way that was not intended but should work but they won't be able to make it work in Lean).</p>",
        "id": 337909081,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337909026\">said</a>:</p>\n<blockquote>\n<p>What are you trying to teach them, mathematics or how to formalize mathematics / cs that they know already?</p>\n</blockquote>\n<p>The latter is a better description.</p>",
        "id": 337909198,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677282617
    },
    {
        "content": "<p>Of course I can provide a list of useful lemmas for every problem or problem set. However, I think it would be less fun this way.</p>",
        "id": 337910792,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677283393
    },
    {
        "content": "<p>I think either 1) <code>field_simp</code> should collect powers or at least 2) <code>ring</code> should be able to handle the resulting expression (which I believe is the plan, <code>ring</code> just doesn't know about zpow yet)</p>",
        "id": 337912512,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677284375
    },
    {
        "content": "<p>I tried to prove <code>x &gt; 0  →  x + 1/x ≥ 2</code> without writing any lemma name (i.e., I can only use tactics, but if <code>library_search</code> spills something, then I can keep it in my code). I didn't have a good time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">this</span>\n    <span class=\"n\">ring</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_sub_nonneg</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">left_numerator_nneg</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">nlinarith</span>\n    <span class=\"k\">have</span> <span class=\"n\">wtf</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_le_div</span> <span class=\"n\">left_numerator_nneg</span> <span class=\"n\">this</span> <span class=\"n\">xpos</span> <span class=\"n\">wtf</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring_nf</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">convert_to</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n    <span class=\"n\">ring</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">this</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">LT.lt.ne'</span> <span class=\"n\">xpos</span>\n      <span class=\"n\">exact</span> <span class=\"n\">div_self</span> <span class=\"n\">this</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span>\n    <span class=\"n\">field_simp</span>\n</code></pre></div>\n<p>Do you have any tips how I could have made it less exhausting?<br>\nKeep in mind that you cannot use any knowledge of mathlib apart from tactics.<br>\nThis is definitely not something I wish upon my students.</p>",
        "id": 337912835,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677284538
    },
    {
        "content": "<p>Clearly this should be solved with AM-GM and clearly there's not an AM-GM tactic because the way to apply AM-GM is to invoke the lemma from mathlib</p>",
        "id": 337913124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677284713
    },
    {
        "content": "<p>All you're doing is reproving AM-GM in your proof using the standard trick.</p>",
        "id": 337913253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677284770
    },
    {
        "content": "<p>BTW you should stick to &lt; rather than &gt; because everything is designed to work better with &lt;</p>",
        "id": 337913417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677284855
    },
    {
        "content": "<p>I had a go at this, following your rules I think and got an ok result I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">xne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 337913768,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285033
    },
    {
        "content": "<p>The only part that I think really required some library knowledge is the first line, I predicted (correctly) that some later parts of the proof might rely on nonzeroness of x explicitly rather than positivity (though I didn't know which).</p>",
        "id": 337913967,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285130
    },
    {
        "content": "<p>Oops this proof is subtly broken lol</p>",
        "id": 337914243,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337913768\">said</a>:</p>\n<blockquote>\n<p>I had a go at this, following your rules I think and got an ok result I think</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">xne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>On your computer, what goal did the first <code>suffices</code> emit?</p>",
        "id": 337914287,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285293
    },
    {
        "content": "<p>What do you mean? Suffices just changes the goal to what you write?</p>",
        "id": 337914390,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285351
    },
    {
        "content": "<p>I thought so.</p>",
        "id": 337914469,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285371
    },
    {
        "content": "<p>(aside: this topic should be moved to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> , right?)</p>",
        "id": 337914471,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677285372
    },
    {
        "content": "<p>Or to <a class=\"stream\" data-stream-id=\"187764\" href=\"/#narrow/stream/187764-Lean-for-teaching\">#Lean for teaching</a> I'm not sure.</p>",
        "id": 337914515,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337914390\">said</a>:</p>\n<blockquote>\n<p>What do you mean? Suffices just changes the goal to what you write?</p>\n</blockquote>\n<p>On my computer, however, the first open goal after the <code>suffices</code> line is still <code>x + 1 / x ≥ 2</code> and then <code>library_search</code> fails.</p>",
        "id": 337914763,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285519
    },
    {
        "content": "<p>Actually it was dumb of me to point out the first fact.</p>",
        "id": 337914953,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285622
    },
    {
        "content": "<p>The second fact is relevant tho.</p>",
        "id": 337914978,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285641
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">xne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>is a fixed version, the first one stopped showing the red underlines and was broken</p>",
        "id": 337915160,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285746
    },
    {
        "content": "<p>Looks like having too many <code>library_search</code> calls still in the code causes problems</p>",
        "id": 337915198,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677285779
    },
    {
        "content": "<p>If you do the following, what does <code>library_search</code> give you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">xne</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>  <span class=\"n\">LT.lt.ne'</span> <span class=\"n\">xpos</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"n\">library_search</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 337915467,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677285939
    },
    {
        "content": "<p>Oh lol nothing sorry, I got tricked by library_search returning a bunch of stuff even when it doesnt solve the goal</p>",
        "id": 337916011,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677286204
    },
    {
        "content": "<p><code>nlinarith</code> does do that goal though, and the other one that failed in the same way</p>",
        "id": 337917024,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677286726
    },
    {
        "content": "<p>I got lost. Can you post the whole code that works?</p>",
        "id": 337917810,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677287167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337913124\">said</a>:</p>\n<blockquote>\n<p>Clearly this should be solved with AM-GM and clearly there's not an AM-GM tactic because the way to apply AM-GM is to invoke the lemma from mathlib</p>\n</blockquote>\n<p>I tried to do it your way and failed miserably.<br>\nThen I tried to do it with rationals and failed again.</p>",
        "id": 337918763,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677287668
    },
    {
        "content": "<p>First and foremost, even if I write the intermediate goal <code>am_gm</code> in precisely the way that <code>two_mul_le_add_sq</code> requires, still <code>library_search</code> gives me nothing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">am_gm</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x.sqrt</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"bp\">≤</span> <span class=\"n\">x.sqrt</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">library_search</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 337920005,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677288545
    },
    {
        "content": "<p>Another problem is that Mathlib4 doesn't seem to have the lemmas about <code>Rat.sqrt</code> that I would need for the remaining part of the proof.</p>",
        "id": 337920138,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677288651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation/near/337914471\">said</a>:</p>\n<blockquote>\n<p>(aside: this topic should be moved to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> , right?)</p>\n</blockquote>\n<p>Can you please move it? I don't have the rights.</p>",
        "id": 337997646,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677330260
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Tactic.20for.20fraction.20cancellation\">#lean4 &gt; Tactic for fraction cancellation</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 338045709,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677349784
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.sqrt\">docs#rat.sqrt</a> a thing? It doesn't strike me as very well behaved!</p>",
        "id": 338069569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677366008
    },
    {
        "content": "<p>I can't really think of a useful application.</p>",
        "id": 338069667,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677366078
    },
    {
        "content": "<p>It may be handy when you know that your rational number is a square. But even this is doubtful...</p>",
        "id": 338069917,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677366230
    },
    {
        "content": "<p>it is intended for that situation</p>",
        "id": 338070008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677366279
    },
    {
        "content": "<p>you can see from the theorems that it is pretty much only well defined in that case</p>",
        "id": 338070094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677366346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.sqrt_eq\">docs#rat.sqrt_eq</a></p>",
        "id": 338070159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677366369
    },
    {
        "content": "<p>... as Mario just said.</p>",
        "id": 338070193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677366393
    },
    {
        "content": "<p>And the next one too I guess</p>",
        "id": 338070205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677366412
    },
    {
        "content": "<p>Haha, I couldn't find <code>Real.sqrt</code> so I used <code>Rat.sqrt</code> instead and didn't even realize it was a weird thing.</p>",
        "id": 338119805,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677404796
    },
    {
        "content": "<p>I guess a better way to go would be to write <code>x = a/b</code>, and then use <code>(a - b)^2 &gt;= 0</code></p>",
        "id": 338123215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677406381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20for.20fraction.20cancellation/near/337920005\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">am_gm</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x.sqrt</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"bp\">≤</span> <span class=\"n\">x.sqrt</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">library_search</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>My attempt using <code>Rat.sqrt</code> was really dumb.</p>",
        "id": 338152332,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677419627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20for.20fraction.20cancellation/near/337908006\">said</a>:</p>\n<blockquote>\n<p>I wanted to give my students a small set of tactics such that they would be able to solve all easy problems by combination of these tactics, without having to learn how stuff is named and organized in mathlib.</p>\n</blockquote>\n<p>I'd like to revisit this general question.</p>",
        "id": 338152561,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677419705
    },
    {
        "content": "<p>This is a bad way to ask, but...<br>\nDo you think Mathlib4 will have a tactic for proving identities like <code>x^2 / x = x</code> automatically by 2023-08?</p>",
        "id": 338153844,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677420206
    },
    {
        "content": "<p>I think we're just hoping to finish porting by then. So if mathlib3 didn't have a tactic to do that, then I doubt mathlib4 will by that time either (unless you write it).</p>",
        "id": 338158361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677421861
    },
    {
        "content": "<p>x^2/x=x is a pathological question in the sense that if x=0 then it's only true by coincidence; one side is a junk value and the other isn't. I'm not sure this is a great example of a test case. Most mathematicians would say that the assertion is meaningless if x=0.</p>",
        "id": 338159641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677422383
    },
    {
        "content": "<p>Actually, if I provide the assumption that we are not in the pathological case, it can be proved without writing any lemma name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xnz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I should rather ask whether it will go down to a single tactic call in near future.</p>",
        "id": 338161013,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677423006
    },
    {
        "content": "<p>Why do you think that there should be one tactic which does this? <code>field_simp, ring</code> is quite common in code I write. If you want one tactic you could write it yourself, call it <code>field</code>, and just make it do <code>field_simp</code> then <code>ring</code>. I'm not a tactic writer but my impression is that the tactic people rather tend to having tactics which do smaller well-defined jobs rather than one big tactic which is supposed to do everything.</p>",
        "id": 338162438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677423639
    },
    {
        "content": "<p>When I started trying to figure out what tactics did I was also trying to persuade tactic-writers to make their tactics do more and more (e.g. \"why doesn't <code>linarith</code> solve <code>P \\and Q</code> if it can solve both <code>P</code> and <code>Q</code>?\") and my understanding of the responses was that the moment you make <code>linarith</code> do that then it saves you having to call <code>split</code> but it makes <code>linarith</code> run a bit slower for everyone else, and it's not clear that this is a win.</p>",
        "id": 338162740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677423765
    },
    {
        "content": "<p>All right, I get it, it wasn't useful to ask for solving <code>x^2 / x = x</code> by a single tactic.<br>\nMy second suggestion would be to make it a lemma that <code>library_search</code> would find automatically, but I see it isn't general enough for mathlib.<br>\nI guess I will have to cope with the inconvenience and hope that my students will not get discouraged by it.</p>",
        "id": 338164311,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677424365
    },
    {
        "content": "<p>Here's your tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eq_zero</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_zero.zero</span> <span class=\"o\">[],</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find_div</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"s2\">\"h\"</span> <span class=\"bp\">++</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"{y}\"</span><span class=\"o\">),</span>\n    <span class=\"n\">eeq</span> <span class=\"bp\">←</span> <span class=\"n\">eq_zero</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">eeq</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.find_div'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"n\">t.mfold</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic.find_div</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.find_div</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">find_div'</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">find_div</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338164766,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677424509
    },
    {
        "content": "<p>I want to help take you from a point-of-view of \"mathlib doesn't have / will need to have X\" to \"we have the tools to build X right now\"</p>",
        "id": 338165422,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677424736
    },
    {
        "content": "<p>Will this tactic be the fastest? The most robust? Is it bug-free? No. But I think it's a pretty direct expression of the implied algorithm described so far, which is \"for all things in denominators, assume they're zero. simplify using that. and if they're not zero, simplify using that\"</p>",
        "id": 338165833,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677424904
    },
    {
        "content": "<p>For example, this breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring_exp</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eq_zero</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_zero.zero</span> <span class=\"o\">[],</span>\n  <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find_div</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"s2\">\"h\"</span> <span class=\"bp\">++</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"{y}\"</span><span class=\"o\">),</span>\n    <span class=\"n\">trace</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">eeq</span> <span class=\"bp\">←</span> <span class=\"n\">eq_zero</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">eeq</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.find_div'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"n\">t.mfold</span> <span class=\"o\">()</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic.find_div</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">interactive.find_div</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">find_div'</span><span class=\"bp\">;</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring_exp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">find_div</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338166211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677425005
    },
    {
        "content": "<p>But then one can think about why it breaks, etc etc</p>",
        "id": 338166252,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677425026
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Proving.20elementary-algebra.20identities.3A.20now.20or.20later.3F\">#mathlib4 &gt; Proving elementary-algebra identities: now or later?</a> by <span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span>.</p>",
        "id": 338168122,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677425801
    },
    {
        "content": "<p>Are you <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> going to upload your tactic to GitHub?</p>",
        "id": 338169283,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677426310
    },
    {
        "content": "<p>Definitely not. This is a proof of concept. I don't have a clear use case, so I haven't thought about the design aspect (what arguments it should take, how it should handle error reporting), I don't have good test cases for it. And it's mathlib3 -- I don't know how to write the equivalent mathlib4 tactic yet. What I'm trying to indicate to you is that you can switch from being a consumer to being a producer. When Rob wanted a tactic for solving linear equations, he wrote it. The promise of lean and ITPs in general is that they're not black boxes of magic invocations, it's only code -- it's proof by algorithm. So I came up with a shoddy algorithm that worked for one use case, and it worked.</p>",
        "id": 338169605,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677426473
    },
    {
        "content": "<p>One promise that Lean emphasizes over some other languages is that the algorithm is written in the same language (albeit a mostly disjoint library) to the maths</p>",
        "id": 338175312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677429012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20for.20fraction.20cancellation/near/338070159\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.sqrt_eq\">docs#rat.sqrt_eq</a></p>\n</blockquote>\n<p>Is the square root of a real number in Lean4 / Std4 / Mathlib4 already?</p>",
        "id": 338176728,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677429689
    },
    {
        "content": "<p>I was searching for it quite extensively; I think it hasn't been ported yet. Still I better ask.</p>",
        "id": 338177504,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677430076
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/real/sqrt\">port-status#data/real/sqrt</a></p>",
        "id": 338177947,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677430257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 338180534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677431546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> you said: \"but I see it isn't general enough for mathlib.\" </p>\n<p>A few comments about this:</p>\n<ol>\n<li>I'm not sure that's true, but I think in many places mathlib just tends to prefer <code>\\-1</code> to <code>/</code>.</li>\n<li>Why do you want this lemma? Are you needing to do this simplification repeatedly? If so, then either (a) there's another way to write things so that you don't have to or (b) maybe this lemma would be useful and you should PR it.</li>\n<li>I could see <code>x ^ (n + 2) / x = x ^ (n + 1)</code> being a reasonable <code>simp</code> lemma if we don't already have it (for <code>group_with_zero</code>).</li>\n<li>If this is for pedagogical purposes, then just keeping it in the project for your course is an alternative. Then you can guide the students with the paths you prefer them to take.</li>\n</ol>",
        "id": 338199209,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677441636
    },
    {
        "content": "<p>Why is <code>x ^ (n + 2) / x = x ^ (n + 1)</code> a good lemma?</p>",
        "id": 338202854,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677444020
    },
    {
        "content": "<p>I suppose because there are simp lemmas (probably called <code>pow_succ</code> or something) that would simplify the RHS further</p>",
        "id": 338202930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677444080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> has marked this topic as resolved.</p>",
        "id": 338202939,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677444090
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/port.20progress\">#mathlib4 &gt; port progress</a> by <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>.</p>",
        "id": 338202940,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677444090
    },
    {
        "content": "<p>(I don't know why zulip is claiming I marked this as resolved...)</p>",
        "id": 338203034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677444130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20Tactic.20for.20fraction.20cancellation/near/338202930\">said</a>:</p>\n<blockquote>\n<p>I suppose because there are simp lemmas (probably called <code>pow_succ</code> or something) that would simplify the RHS further</p>\n</blockquote>\n<p>Can you please elaborate?</p>",
        "id": 338204147,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677444895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20Tactic.20for.20fraction.20cancellation/near/338203034\">said</a>:</p>\n<blockquote>\n<p>(I don't know why zulip is claiming I marked this as resolved...)</p>\n</blockquote>\n<p>I think I did. Zulip seems to be buggy.</p>",
        "id": 338204213,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677444926
    },
    {
        "content": "<p>I assume <code>x ^ (n + 1) / x = x^n</code> is problematic because it needs one of x or n to be non-zero?</p>",
        "id": 338205924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677446026
    },
    {
        "content": "<p>I didn't necessarily say it's a <em>good</em> simp lemma, only a reasonable one because I could see it coming up not terribly infrequently. Note also, with other simp lemmas (pow_one) you would get the one you want.</p>",
        "id": 338222843,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677460281
    }
]