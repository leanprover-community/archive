[
    {
        "content": "<p><code>library_search</code> fails here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prime_of_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>I expect it to find <code>exact Nat.prime_iff.symm</code>. In mathlib3, it does succeed at finding that.</p>\n<p>Is this a bug in <code>library_search</code>?</p>",
        "id": 362472254,
        "sender_full_name": "David Renshaw",
        "timestamp": 1685542738
    },
    {
        "content": "<p>Does <code>rewrites</code> do it? I'm not sure what we consider in scope for library search now that that exists also</p>",
        "id": 362486382,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685545661
    },
    {
        "content": "<p>I did change how library_search handles the <code>symm</code> versions of lemmas between mathlib3 and mathlib4, so this is likely a regression.</p>",
        "id": 362538885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685557476
    },
    {
        "content": "<p><code>rewrites</code> gives me an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Messages</span> <span class=\"n\">here</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">irreducible_iff_prime_of_exists_unique_irreducible_factors'</span>\n</code></pre></div>",
        "id": 362555141,
        "sender_full_name": "David Renshaw",
        "timestamp": 1685561941
    },
    {
        "content": "<p>Oh, that is definitely a bug, where <code>rewrites</code> is trying to use a lemma that hasn't been imported yet!</p>",
        "id": 362565294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685565020
    },
    {
        "content": "<p>(which it knows about because of the global cache generated by CI)</p>",
        "id": 362565367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685565045
    },
    {
        "content": "<p>Okay, the original problem is solved in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4534\">!4#4534</a>. Still looking at the error from <code>rewrites</code>.</p>",
        "id": 362600890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685579868
    },
    {
        "content": "<p>The error from <code>rewrites</code> is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4537\">!4#4537</a>, which also results in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prime_of_prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrites</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>closing the goal.</p>",
        "id": 362610307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685585055
    }
]