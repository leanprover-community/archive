[
    {
        "content": "<p>I'm puzzled by these examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>The first one works and the second one doesn't.  Now, I thought that linarith worked by adding the negation of the goal to the hypotheses and then searching for a contradiction.  Wouldn't that make these examples essentially the same?  If it can solve the first, shouldn't it be able to solve the second?</p>",
        "id": 390786695,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1694632555
    },
    {
        "content": "<p>I don't think it is strange. There is a representation of everything but <code>¬a = b</code> using linear inequalities.</p>",
        "id": 390786943,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694632675
    },
    {
        "content": "<p>How does it prove <code>a = b</code> in the first example?</p>",
        "id": 390787056,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1694632729
    },
    {
        "content": "<p>case split</p>",
        "id": 390787084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694632750
    },
    {
        "content": "<p>The first example is essentially this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 390787119,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694632776
    },
    {
        "content": "<p>I think linarith should be able to get this</p>",
        "id": 390787243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694632819
    },
    {
        "content": "<p>You mean it should be able to get the second one?</p>",
        "id": 390787293,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1694632849
    },
    {
        "content": "<p>it's possible that it doesn't split in the hypotheses because that could be a lot of splitting and we don't really know yet whether this is an interesting hypothesis</p>",
        "id": 390787817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694633084
    },
    {
        "content": "<p>Yes, this is always Rob's answer to this question.</p>",
        "id": 390788113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694633207
    },
    {
        "content": "<p>I just found this in the Frontend file:</p>\n<p><code>linarith</code> will attempt to prove equality<br>\ngoals by splitting them into two weak inequalities and running twice. But it does not split<br>\ndisequality hypotheses, since this would lead to a number of runs exponential in the number of<br>\ndisequalities in the context.</p>\n<p>I guess that's what Mario just said, and that explains it.</p>",
        "id": 390788134,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1694633217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453098\">Dan Velleman</span> has marked this topic as resolved.</p>",
        "id": 390790416,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694634147
    },
    {
        "content": "<p>Maybe the <code>linarith</code> docs could explain how you can set up the case split yourself. I didn't test it, but I'd expect something like this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 390790962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694634415
    },
    {
        "content": "<p>PR to add that suggestion to the docs very welcome!</p>",
        "id": 390819033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694648116
    },
    {
        "content": "<p>Better yet to add the suggestion to use the <code>removeNe</code> preprocessor for linarith so that it does it for you (assuming the preprocessor works that is)</p>",
        "id": 390917678,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694694039
    },
    {
        "content": "<p>I would never expect <code>(h2 : ¬a = b)</code> to be picked up by <code>linarith</code> in the first place.<br>\nThe current optimization makes sense to me.</p>",
        "id": 390918053,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694694155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> That's good to know about the <code>removeNe</code> preprocessor -- something I was thinking is that if <code>linarith</code> fails it could scan the scope for an Ne and give that sort of suggestion conditionally.</p>",
        "id": 390922657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694695667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> Alex pointed out there's a configuration option to get <code>linarith</code> to proceed with case splitting. It's got a small bug however it's specifically looking for <code>a ≠ b</code> and not <code>¬a = b</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">splitNe</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 390930878,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694698182
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7255\">#7255</a> fixes this and adds documentation about splitNe</p>",
        "id": 391913445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695130322
    }
]