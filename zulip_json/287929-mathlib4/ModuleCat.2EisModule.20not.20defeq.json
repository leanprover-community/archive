[
    {
        "content": "<p>In the library <code>ModuleCat</code> has this comment about instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The category of R-modules and their morphisms.</span>\n\n<span class=\"sd\"> Note that in the case of `R = ℤ`, we can not</span>\n<span class=\"sd\">impose here that the `ℤ`-multiplication field from the module structure is defeq to the one coming</span>\n<span class=\"sd\">from the `isAddCommGroup` structure (contrary to what we do for all module structures in</span>\n<span class=\"sd\">mathlib), which creates some difficulties down the road. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ModuleCat</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the underlying type of an object in `ModuleCat R` -/</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"o\">[</span><span class=\"n\">isAddCommGroup</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">isModule</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">carrier</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is there any way to work around these \"difficulties down the road\"? In particular I tried to define an isomorphism between the category of ℤ-Modules and the category of abelian groups</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">obj</span> <span class=\"c1\">-- in here we have `ModuleCat.isModule`</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"c1\">-- This implicitely uses `ULift.module`</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">types_id_apply</span><span class=\"o\">,</span> <span class=\"n\">types_comp_apply</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ModuleCat.forget₂_obj</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- From now on it's all debugging</span>\n    <span class=\"n\">change</span> <span class=\"n\">ModuleCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ModuleCat.mk</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ModuleCat.mk</span> <span class=\"n\">A</span>\n    <span class=\"n\">change</span> <span class=\"n\">ModuleCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.of</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span>\n    <span class=\"c1\">-- THIS SUCKS</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- ULift.module = isModule✝</span>\n    <span class=\"n\">done</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"c1\">--BUG? When I do `ext A` instead, I get `A : ?α` when I hover over it.</span>\n    <span class=\"n\">simp</span><span class=\"bp\">?</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I tried to read the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Category/ModuleCat/Basic.html\">file's docstring</a>, but I'm not quite sure what to do. I guess the inverse <code>inv</code> does not work like that because it uses <code>ULift.module</code> which will eventually not be defeq to the instance bundled into an <code>A : ModuleCat</code></p>",
        "id": 371754124,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688311291
    },
    {
        "content": "<p>Do we have an <code>ext</code> for <code>ModuleCat</code>?</p>",
        "id": 371758301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688312320
    },
    {
        "content": "<p>It should say that projections to <code>AddCommGroupCat</code> and <code>SMul.smul</code> agree.</p>",
        "id": 371758667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688312435
    },
    {
        "content": "<p>Then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zsmul_eq_smul_cast#doc\">docs#zsmul_eq_smul_cast</a></p>",
        "id": 371759519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688312662
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.intModule.unique#doc\">docs#AddCommGroup.intModule.unique</a></p>",
        "id": 371762446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688313519
    },
    {
        "content": "<p>You may need a version with <code>ULift Int</code></p>",
        "id": 371762558,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688313551
    },
    {
        "content": "<p>BTW, why not use modules over <code>Int</code>, not <code>ULift Int</code>?</p>",
        "id": 371763132,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688313709
    },
    {
        "content": "<p>Then you can have a generic isomorphism between modules over <code>R</code> and <code>ULift R</code> (or, more generally, modules over two isomorphic rings), if needed.</p>",
        "id": 371763337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688313770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2EisModule.20not.20defeq/near/371763132\">said</a>:</p>\n<blockquote>\n<p>BTW, why not use modules over <code>Int</code>, not <code>ULift Int</code>?</p>\n</blockquote>\n<p>I mean I used that because we have an instance <code>#synth MonoidalCategory &lt;| ModuleCat.{u} (ULift.{u} ℤ)</code> which I wanted to transport to <code>Ab.{u}</code> using <code>Monoidal.transport</code>, but you're saying I should start from <code>ModuleCat.{u} ℤ</code>? </p>\n<p>We do not have an instance <code>#synth MonoidalCategory &lt;| ModuleCat.{u} ℤ</code> yet though.</p>",
        "id": 371771404,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688316147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2EisModule.20not.20defeq/near/371762446\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.intModule.unique#doc\">docs#AddCommGroup.intModule.unique</a></p>\n</blockquote>\n<p>Thanks, havent had this result on the radar</p>",
        "id": 371771741,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688316259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2EisModule.20not.20defeq/near/371758301\">said</a>:</p>\n<blockquote>\n<p>Do we have an <code>ext</code> for <code>ModuleCat</code>?<br>\nIt should say that projections to <code>AddCommGroupCat</code> and <code>SMul.smul</code> agree.</p>\n</blockquote>\n<p>Hmm wouldn't know of it, but that means nothing</p>",
        "id": 371773394,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688316839
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommGroup.intModule.unique#doc\">docs#AddCommGroup.intModule.unique</a> lets you prove that two <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a> over <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int#doc\">docs#Int</a> are equal. You should add a similar lemma about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleCat#doc\">docs#ModuleCat</a></p>",
        "id": 371777050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688318065
    },
    {
        "content": "<p>Ill try, thanks!</p>",
        "id": 371779909,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688319113
    },
    {
        "content": "<p>So I got this working with <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> 's hint to use <code>AddCommGroup.intModule.unique</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>Now, is there a fundamental reason I should generally work with <code>ModuleCat.{u, 0} ℤ</code> instead of <code>ModuleCat.{u, u} (ULift.{u, 0} ℤ)</code>? As mentioned, I only used the latter because it has all the instances I need, while they are missing for the former. But am I right that the difference between the two is purely tautological?</p>\n<p>So would it be better if I added all the instances I need for <code>ModuleCat.{u, 0} ℤ</code> copying/generalising what there is for <code>ModuleCat.{u, u} (ULift.{u, 0} ℤ)</code>?</p>",
        "id": 372045328,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688397488
    },
    {
        "content": "<p>I suggest that you construct your isomorphism for <code>ULift Int</code> in two steps:</p>\n<ul>\n<li>the existing isomorphism for <code>Int</code>;</li>\n<li>isomorphism between module categories over isomorphic rings.</li>\n</ul>",
        "id": 372048105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688397962
    },
    {
        "content": "<p>Note: I know nothing about category theory in mathlib.</p>",
        "id": 372048375,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688398003
    },
    {
        "content": "<p>I would not make data-carrying instances on a category by saying \"oh these instances are already on some equivalent category, I'll just push them over\"; I would define the data directly and then copy over the proofs.</p>",
        "id": 372050718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688398382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2EisModule.20not.20defeq/near/372050718\">said</a>:</p>\n<blockquote>\n<p>I would not make data-carrying instances on a category by saying \"oh these instances are already on some equivalent category, I'll just push them over\"; I would define the data directly and then copy over the proofs.</p>\n</blockquote>\n<p>Hmm, concretely the tensor product for ℤ-modules (in mathlib) is the one coming from linear maps: <code>ModuleCat.of R (M ⊗[ℤ] N)</code> and I'd hoped that the transport would end up being the same thing. If I defined the tensor product of abelian groups directly, I'd probably still define it by regarding my group as ℤ-module. Is there a more direct way?</p>\n<p>Are you therefore suggesting that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Monoidal.transport#doc\">docs#CategoryTheory.Monoidal.transport</a> should generally not be used?</p>",
        "id": 372054494,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688399093
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has something to add, but this was something I learnt from her: I think she tried using this to move a monoidal category structure between two categories in representation theory and ended up refactoring later because it was just hard to use. If the transport really is \"the same thing\" and <code>rfl</code> can prove it then maybe it's OK. But \"the same thing\" can mean all sorts of other things too.</p>",
        "id": 372058900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688400008
    },
    {
        "content": "<p>I see. So I'll read up on what we actually want the tensor product of abelian groups to look like and see if that's defeq to the defined transport</p>",
        "id": 372060761,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688400295
    },
    {
        "content": "<p>I think that would be a wise way to start thinking about this design decision</p>",
        "id": 372062116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688400558
    },
    {
        "content": "<p>I think transporting a monoidal structure across an equivalence can be okay, certainly if it gives a structure defeq to what you want. It was transporting a monoidal <em>closed</em> instance across an equivalence that ended up very slow for me. <br>\n<del>A complication in this instance is that the equivalence between ℤ-modules and abelian groups is defined by showing that the forgetful functor is full, faithful and essentially surjective instead of constructing an explicit inverse, so the ℤ-module corresponding to an abelian group <code>X</code> isn't definitionally isomorphic to <code>ModuleCat.of ℤ X</code>.</del> Edit: I was talking about the mathlib equivalence - yours looks like it might be nicer to transport.</p>",
        "id": 372065959,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1688401365
    },
    {
        "content": "<p>That's a good heads up, thanks!</p>\n<p>Mines now this: which is sorry-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">moduleCat_int_equiv_ab</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≅</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- data</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">obj</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.of</span> <span class=\"n\">ℤ</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- props</span>\n  <span class=\"n\">hom_inv_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- TODO: Golf this proof</span>\n    <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">types_id_apply</span><span class=\"o\">,</span> <span class=\"n\">types_comp_apply</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ModuleCat.forget₂_obj</span><span class=\"o\">]</span>\n    <span class=\"n\">change</span> <span class=\"n\">ModuleCat.of</span> <span class=\"n\">ℤ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">ModuleCat.mk</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ModuleCat.mk</span> <span class=\"n\">A</span>\n    <span class=\"n\">change</span> <span class=\"n\">ModuleCat.of</span> <span class=\"n\">ℤ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">ModuleCat.of</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span>\n    <span class=\"c1\">-- Here we use that all instances `Module ℤ A` are identical</span>\n    <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">AddCommGroup.intModule.unique</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">uniq</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddCommGroup.intModule</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddCommGroupCat.of</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n    <span class=\"n\">rename_i</span> <span class=\"n\">a</span> <span class=\"n\">_b</span> <span class=\"n\">_c</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n  <span class=\"n\">inv_hom_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">types_id_apply</span><span class=\"o\">,</span> <span class=\"n\">types_comp_apply</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ModuleCat.forget₂_obj</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>in particular, I think both <code>hom</code> and <code>inv</code> are just re-bundling things in an explicit way. Therefore I was hopeful that things should be reasonably close to being defeq.</p>\n<p>I thought about redefining the tensor product on abelian groups (monoids) but I'm a bit reluctant to copy that much API just to remove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">of_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">Eqv</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>in the equivalence relation defining the tensor product <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 372070495,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688402335
    }
]