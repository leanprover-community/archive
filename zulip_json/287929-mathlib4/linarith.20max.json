[
    {
        "content": "<p>Is it possible to make <code>linarith</code> solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 398879247,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698405952
    },
    {
        "content": "<p>Rewrite with the definition of <code>max</code> and then split ifs? This is outside the scope of <code>linarith</code>, although if we put a bit more effort into nice configuration of pre-processors there's not reason you couldn't have a preprocessor for this.</p>",
        "id": 398879750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698406150
    },
    {
        "content": "<p>Yeah, what I meant was to patch <code>linarith</code> to solve it directly. It seems that it fails to find a contradiction in <code>a &gt; max a b</code>, but that sounds feasible if as you said, you unfold the definition and the and.</p>",
        "id": 398880466,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698406445
    },
    {
        "content": "<p>But if you said it's out of scope for the tactic, then nevermind :)</p>",
        "id": 398880479,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698406453
    },
    {
        "content": "<p>If you look at the code for <code>linarith</code>, you'll see that the core code tries to do something very simple: just inequalities over a linearly ordered field. Anything beyond that is a \"pre-processor\". You could add one that unfolds and splits <code>max</code> and <code>min</code>, I think.</p>",
        "id": 398881967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698407017
    },
    {
        "content": "<p>It would not be useful here, but you may help <code>linarith</code> by providing some extras facts it can use, like <code>linarith [le_max_left a b]</code>: this would help getting more intricate inequalities for which we need to know <code>a ≤ max a b</code>.</p>",
        "id": 398900779,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698413907
    },
    {
        "content": "<p>Yep I know that, thanks though!</p>",
        "id": 398902936,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698414699
    }
]