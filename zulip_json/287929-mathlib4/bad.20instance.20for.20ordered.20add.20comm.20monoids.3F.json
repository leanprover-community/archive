[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictOrderedSemiring.to_charZero#doc\">docs#StrictOrderedSemiring.to_charZero</a> generalizes to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span><span class=\"o\">)</span> <span class=\"n\">AddMonoidWithOne.instCharZero</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CharZero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"n\">StrictMono.injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">strictMono_nat_of_lt_succ</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span>\n</code></pre></div>\n<p>Is there an obvious reason that this should cause timeouts for the <code>ring</code> tactic? I mean, I realize I'm replacing just the one instance <code>StrictOrderedSemiring α</code> with a collection of 5 instances, so maybe it's just that? But perhaps you have added insight.</p>\n<p>This generalization isn't totally insane by the way: it's essentially a <code>StrictOrderedAddCommMonoidWithOne</code> (that doesn't exist, but it could) where <code>0 ≠ 1</code>. This is satisfied by nontrivial star ordered rings (and their subtypes of selfadjoint and positive elements).</p>",
        "id": 380495076,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690837989
    },
    {
        "content": "<p>This is causing me headaches in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a>.</p>",
        "id": 380495130,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838011
    },
    {
        "content": "<p>I don't think we should be using <code>ZeroLEOneClass</code>. Can you try defining <code>StrictOrderedAddCommMonoidWithOne</code>?</p>",
        "id": 380712185,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690898487
    },
    {
        "content": "<p>Yaël, my hesitation with that is we only have two examples at the moment: star ordered rings and ordered rings.</p>",
        "id": 380716958,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690899276
    },
    {
        "content": "<p>Seems like not enough to justify this addition to the algebra-order hierarchy.</p>",
        "id": 380717143,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690899311
    },
    {
        "content": "<p>Ordered semirings, you mean? <code>ℕ</code> certainly is one.</p>",
        "id": 380718382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690899517
    },
    {
        "content": "<p>Sure, <code>ℕ</code> is an ordered semiring, but that's the point: it satisfies the stronger condition. My question is: what examples do we have of ordered add comm monoids with one besides star ordered semirings and ordered semirings? If we have no other examples, is that enough to justfiy adding this concept?</p>",
        "id": 380721743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690900078
    },
    {
        "content": "<p>Strictly ordered add comm monoids with one, you mean? Sorry for being picky, but there are many classes around this area of the library.</p>",
        "id": 380928815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690960963
    },
    {
        "content": "<p>I think it's enough to justify adding this concept, yes</p>",
        "id": 380928936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690960996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/6310\">#6310</a>, but there are some issues which I am currently trying to sort out. Sorry for not being precise, let me try to be more so:</p>\n<ol>\n<li><code>OrderedAddCommMonoidWithOne</code> = <code>AddCommMonoidWithOne</code> + <code>PartialOrder</code> + <code>CovariantClass (+) (≤)</code> + <code>0 ≤ 1</code></li>\n<li><code>OrderedAddCommGroupWithOne</code> = <code>AddCommGroupWithOne</code> + <code>PartialOrder</code> + <code>CovariantClass (+) (≤)</code> + <code>0 ≤ 1</code></li>\n</ol>\n<p>These classes are provided in the PR, and are satisfied by <code>OrderedSemiring</code>, <code>OrderedRing</code>, respectively, as well as <code>StarOrderedRing R</code> (where the underlying ring is a <code>Semiring</code>, or <code>Ring</code>, respectively), and even the subtypes <code>selfAdjoint R</code> and <code>{x : R // 0 ≤ x}</code>.</p>\n<ol start=\"3\">\n<li><code>OrderedAddCommMonoidWithOne</code> + <code>CovariantClass (+) (&lt;)</code> + <code>NeZero 1</code> suffices to establish the conclusion of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictOrderedSemiring.to_charZero#doc\">docs#StrictOrderedSemiring.to_charZero</a>.</li>\n</ol>\n<p>One might call the thing listed in (3) above a <code>StrictOrderedAddCommMonoidWithOne</code>, but I have not defined that class.</p>",
        "id": 381221380,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690993588
    }
]