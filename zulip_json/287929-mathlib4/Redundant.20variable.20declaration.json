[
    {
        "content": "<p>There are places in Mathlib where the same variable is declared twice. For example here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/cc016b6463c62bb4ae5ddb751734ee4d41a6f811/Mathlib/Algebra/Group/Basic.lean#L255\">https://github.com/leanprover-community/mathlib4/blob/cc016b6463c62bb4ae5ddb751734ee4d41a6f811/Mathlib/Algebra/Group/Basic.lean#L255</a></p>\n<p>First, the variables <code>a</code> and <code>b</code> are declared for the section:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">InvolutiveInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Then a theorem repeats the same arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Are we going to going to remove these redundant variable declarations in an organized/automated manner, or should I just create a cleanup PR (chore) whenever I stumble across such a declaration?</p>",
        "id": 388062720,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693386387
    },
    {
        "content": "<p>The duplicates in the <code>theorem</code> often aren't redundant, sometimes they change the order of the variables to something more desirable (yours is not an example of this)</p>",
        "id": 388062925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693386469
    },
    {
        "content": "<p>The one in the <code>variable</code> line can be removed safely, but probably it's used by another lemma</p>",
        "id": 388063104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693386527
    },
    {
        "content": "<p>Most theorems use the \"global\" ones in this section. I wanted to remove them from here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 388063194,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693386563
    },
    {
        "content": "<p>What is the general recommendation? When I notice an undesirably redundancy, should I create a PR to remove it?</p>",
        "id": 388063363,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693386611
    },
    {
        "content": "<p>I would say leave it be, unless it annoys you enough to write a linter to prevent it happening in future</p>",
        "id": 388063444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693386643
    },
    {
        "content": "<p>I don't have skills to write a linter. I only have skills to manually remove it when I see it.</p>",
        "id": 388063766,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693386753
    },
    {
        "content": "<p>The problem with these redundancies is that there are two directions they can be resolved, and deciding is a game of bike-shedding</p>",
        "id": 388067922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693388146
    },
    {
        "content": "<p>I am not going to make a general policy, but I think I can safely say that whenever both global and local declaration exist and the global declaration is actually used =&gt; remove the local declaration.</p>",
        "id": 388068550,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693388335
    },
    {
        "content": "<p>If one lemma uses the global declaration and the other 10 in the section use local declarations, are you sure that approach makes sense?</p>",
        "id": 388068902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693388440
    },
    {
        "content": "<p>Don't we want to use global declarations in precisely these situations?<br>\n(when the same local declaration repeats many times)</p>",
        "id": 388069078,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693388497
    },
    {
        "content": "<p>What if you have a section like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t3</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 388069355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693388603
    },
    {
        "content": "<p>What would your proposed fix be?</p>",
        "id": 388069371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693388617
    },
    {
        "content": "<p>As I said, I don't have ambitions to make a general policy about that.<br>\nHowever, my gut feeling says that all local <code>{a b : X}</code> should be removed.</p>",
        "id": 388069651,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693388709
    },
    {
        "content": "<p>That changes the type of <code>t3</code>, breaks consistency between <code>t2</code> and <code>t1</code>, and results in a larger patch</p>",
        "id": 388069846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693388777
    },
    {
        "content": "<p>I see your point; I am just saying what my gut feeling is.</p>",
        "id": 388070048,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693388862
    }
]