[
    {
        "content": "<p>To solve this problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>it appears necessary to apply two <code>ring</code> and one <code>norm_cast</code> tactic in precisely the order indicated here; any shorter combination does not seem to work.  I am aware of the real powers bug but I don't think it is to blame for this issue.  Is this expected behavior?</p>",
        "id": 397969801,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698005979
    },
    {
        "content": "<p>Interesting. The issue is that <code>ring</code> needs to collect the <code>n</code>s on both sides into a power to allow <code>norm_cast</code> to move the cast out of the power. Incidentally, this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue lean4#2220</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 397970024,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698006232
    },
    {
        "content": "<p>There is an open PR to support automatically pushing ring homs inwards when using ring, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7601\">#7601</a>, but even that wouldn't quite do this in one fell swoop yet, its a step in the right direction though I think</p>",
        "id": 397970336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698006577
    }
]