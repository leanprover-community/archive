[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6795\">#6795</a> is an experiment with having <code>∑ x ∈ s, f x</code> mean what you think it should mean. Here, <code>s</code> can be a <code>Finset</code> or a <code>Set</code> that has a <code>Fintype</code> instance (in which case it inserts <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a>).</p>\n<p>It has <code>∑ (x ∈ s) (y ∈ t), f x y</code> for <code>Finset.sum (s ×ˢ t) (fun ⟨x, y⟩ ↦ f x y)</code>, which gives limited support for products and destructuring. (The <code>extBinders</code> notation doesn't let you write <code>∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y</code> since it requires an identifier or a <code>_</code> for a binder name, not <code>⟨x, y⟩</code>.) For nested sums, you can just use nested sums like <code>∑ x ∈ s, ∑ y ∈ t, f x y</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> were suggesting that it's useful for their work being able to easily add a condition to the domain, so there's also a <code>with</code> clause, for example <code>∑ (x ∈ Finset.range 5) (y ∈ Finset.range 5) with x &lt; y, x * y</code>. They pointed out that, switching <code>∑</code> to an expectation operator, it being a product that's filtered is essential and it can't be a nested big operator.</p>\n<p>The PR also adds support for a handful of inequalities, like <code>∑ x &lt; 37, x</code> instead of <code>∑ x ∈ Finset.Iio 37, x</code>. This is ad hoc since it needs to give custom Finset interpretations of each extended binder.</p>",
        "id": 387352818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693003668
    },
    {
        "content": "<p>This has already been mentioned privately, but it would be nice to allow the second set to depend on the first variable with <code>Finset.sigma</code>. Since I'm not good at reading Lean4 meta code yet, I'll ask directly - does this work for sums of more than two things?</p>",
        "id": 387357897,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693007914
    },
    {
        "content": "<p>It only supports non-dependent sums at the moment (and it does work for more than two things). I think it should be possible to choose <code>Finset.sigma</code> vs <code>SProd.sprod</code> depending on whether the binders are dependent or not. (Or should it <em>always</em> use <code>Finset.sigma</code>?)</p>",
        "id": 387358443,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693008255
    },
    {
        "content": "<p>I mentioned it <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384344815\">on another thread</a>, but to keep track of it, I'll mention here that I pushed an additional change to let you do <code>∑ ⟨x, y⟩ ∈ s ×ˢ t, f x y</code>.</p>\n<p>This took making a version of <code>extBinder</code> that lets it start with <code>term:max</code> rather than just <code>ident &lt;|&gt; hole</code>. It seems like this is safe enough to contribute back to std, but for now it's a mathlib experiment.</p>",
        "id": 387367323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693012971
    }
]