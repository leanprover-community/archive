[
    {
        "content": "<p>Sorry that this code is not exactly minimal, but it's kind of hard to golf.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Projection map -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a.val</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">lt_succ.mp</span> <span class=\"n\">a.isLt</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Embeds a n-tuple into an (n + 1)-tuple where the final value is k -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.univ.filter</span> <span class=\"n\">StrictMono</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">26</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">StrictMono</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">26</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">StrictMono</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">25</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Finset.card_congr</span> <span class=\"n\">f₂</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">mem_univ</span> <span class=\"c1\">-- maximum recursion depth has been reached</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It says maximum recursion depth has been reached at the annotated point, even though the goal is literally <code>f₂ a ha✝ ∈ univ</code>, and I am not sure why.</p>",
        "id": 397053989,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697530668
    },
    {
        "content": "<p>Also though not related to the error, if anyone has a better proof idea or to rewrite the statement please tell me :D</p>",
        "id": 397054140,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697530711
    },
    {
        "content": "<p>it will probably help to generalize the \"big number\" <code>26</code> because lean is probably computing something 26 or 26^2 times</p>",
        "id": 397056984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697531706
    },
    {
        "content": "<p>Oh that worked, if I replace 26 with <code>k</code> or something. That's interesting..</p>",
        "id": 397057977,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697532063
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 397057990,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697532066
    },
    {
        "content": "<p>MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- expensive to whnf</span>\n  <span class=\"k\">if</span> <span class=\"mi\">100</span> <span class=\"bp\">∈</span> <span class=\"n\">List.range</span> <span class=\"mi\">1000000</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n              <span class=\"c1\">-- ^^^^^</span>\n<span class=\"c1\">-- maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n</code></pre></div>",
        "id": 397061364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697533155
    },
    {
        "content": "<p>Generalising the numbers to variables is probably the correct way, but is there a \"no whnf\" tag / option?</p>",
        "id": 397082087,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697539943
    },
    {
        "content": "<p>another trick I noticed was to use <code>have : Fintype (Fin 2 → Fin 26) := inferInstance</code> at the beginning of the proof</p>",
        "id": 397082775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697540216
    },
    {
        "content": "<p>I just ran into something similar when porting, since it (including Mario's mwe) works in Lean 3 :/</p>",
        "id": 397312991,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697635622
    }
]