[
    {
        "content": "<p>Hello!<br>\nI'm trying to perform a rewrite inside an <code>IsLittleO</code> statement. For the sake of example, let's say I had two functions f and g, and I knew that f(h)=g(h). Suppose I also knew that f(h)=o(h) and wanted to prove that g(h)=o(h). I would like to rewrite g(h) in the goal, but it's not so easy because h is not a variable. I figured out how to do this with <code>conv</code>, but it doesn't seem very efficient... How should I do this?</p>\n<p>Here is the example code with my inefficient solution.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Asymptotics.Asymptotics</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Asymptotics.IsLittleO</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">Asymptotics.IsLittleO</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ho</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hfg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ho</span>\n</code></pre></div>",
        "id": 409026691,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1703025098
    },
    {
        "content": "<p>For the case you mention, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=funext#doc\">docs#funext</a> and then the rewrite should work</p>",
        "id": 409026935,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703025217
    },
    {
        "content": "<p>I see, thank you! I did <code>rw[funext hfg]</code> and that works perfectly. Thanks!</p>",
        "id": 409027352,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1703025446
    },
    {
        "content": "<p><code>simp_rw [hfg]</code> also works.</p>",
        "id": 409106313,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703055767
    }
]