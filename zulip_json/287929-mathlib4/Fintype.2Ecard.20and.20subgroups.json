[
    {
        "content": "<p>I'd like to add to mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_bot_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_bot_iff_forall</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">change</span> <span class=\"o\">((⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"o\">(⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Fintype</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_bot_iff_card</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq_bot_iff_forall</span><span class=\"o\">,</span> <span class=\"n\">card_eq_one_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">S.one_mem</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">hy'</span><span class=\"o\">⟩</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hy'</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">_</span>      <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hy'</span> <span class=\"mi\">1</span> <span class=\"n\">S.one_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>But mathlib complains <code>Finset</code> should not be defined too early. What is the natural home for those lemmas?</p>",
        "id": 395934935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696961667
    },
    {
        "content": "<p><code>#find_home! eq_bot_iff_card</code> suggests:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Mathlib.Data.Finsupp.Defs</span><span class=\"o\">,</span>\n <span class=\"n\">Mathlib.Algebra.Category.MonCat.Limits</span><span class=\"o\">,</span>\n <span class=\"n\">Mathlib.Topology.Algebra.Order.Archimedean</span><span class=\"o\">,</span>\n <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span><span class=\"o\">,</span>\n <span class=\"n\">Mathlib.GroupTheory.Submonoid.Membership</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395936557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962255
    },
    {
        "content": "<p>Does it take into accounts the interdictions?</p>",
        "id": 395936622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696962281
    },
    {
        "content": "<p>I do not think so, nor does it really take into account tactics... but maybe it is a start?</p>",
        "id": 395936743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962328
    },
    {
        "content": "<p>This is a stupid question actually.</p>",
        "id": 395936768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696962340
    },
    {
        "content": "<p>If it suggests these are possible homes then it means those files import <code>Fintype</code> without upsetting Lean.</p>",
        "id": 395936863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696962365
    },
    {
        "content": "<p>Well, probably the tactic could do that, but right now it is not too refined: it is a spin-off of the tactic that generates import graphs, so it has those functionalities in mind.</p>",
        "id": 395936940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962403
    },
    {
        "content": "<p>What the command <em>should</em> do is give a list of all the files where the given declaration could be placed without having to add any import, listing only the minimal such files.</p>\n<p>It actually does not return <em>exactly</em> this, but a good approximation.</p>",
        "id": 395937211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962510
    },
    {
        "content": "<p>In reality, it checks that all the <em>constants</em> that are appear in the proof term of the given declaration are available in the files of the given list (listing the import-minimal ones).  However, if you use notation or tactics that are unavailable in those files, the command will not know this.</p>",
        "id": 395937658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962614
    },
    {
        "content": "<p>Don't we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.card_eq_one#doc\">docs#Subgroup.card_eq_one</a> ?</p>",
        "id": 395938880,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1696962864
    },
    {
        "content": "<p>Also, the other lemma produces this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find_home</span><span class=\"bp\">!</span> <span class=\"n\">eq_bot_of_subsingleton</span>\n<span class=\"o\">[</span><span class=\"n\">Mathlib.GroupTheory.Submonoid.Operations</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395938889,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962865
    },
    {
        "content": "<p>Oh, I thought that this was in <code>namespace Submonoid</code>...</p>",
        "id": 395939089,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962910
    },
    {
        "content": "<p>Oh, sorry, these are submonoid lemmas</p>",
        "id": 395939186,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1696962935
    },
    {
        "content": "<p>If only Patrick knew about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>...</p>",
        "id": 395939377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696962971
    },
    {
        "content": "<p>Actually I was originally interested in the subgroup version and I failed to find this. The reason is of course cardinal hell: your lemma is about <code>Nat.card</code> and I was looking at <code>Fintype.card</code>.</p>",
        "id": 395940591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696963234
    },
    {
        "content": "<p>I've found that <code>Nat.card</code> works quite well for subgroups, since the junk value of 0 is perfect for divisibility</p>",
        "id": 395947436,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1696965696
    },
    {
        "content": "<p>(For instance, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.card_mul_index#doc\">docs#Subgroup.card_mul_index</a>)</p>",
        "id": 395947545,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1696965738
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/7614\">#7614</a>.</p>",
        "id": 395961807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696972589
    }
]