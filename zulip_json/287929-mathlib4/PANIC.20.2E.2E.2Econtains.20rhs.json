[
    {
        "content": "<p>Around the marked lines <a href=\"https://github.com/leanprover-community/mathlib4/pull/2534/files#diff-dbac9e254ec82565831843ba6c9b622e4a210161ec9c7f4ce6d99d8e04d8571aR140-R144\">https://github.com/leanprover-community/mathlib4/pull/2534/files#diff-dbac9e254ec82565831843ba6c9b622e4a210161ec9c7f4ce6d99d8e04d8571aR140-R144</a> in a PR about CategoryTheory.Category.Pairwise, the Lean server produces an error <code>PANIC at _private.Lean.Meta.Match.MatchEqs.0.Lean.Meta.Match.SimpH.substRHS Lean.Meta.Match.MatchEqs:167:2: assertion violation: ( __do_lift._@.Lean.Meta.Match.MatchEqs._hyg.2199.0 ).xs.contains rhs</code>. I have no idea what this means. See <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4301463837/jobs/7498718508\">https://github.com/leanprover-community/mathlib4/actions/runs/4301463837/jobs/7498718508</a> for the full output</p>",
        "id": 338884012,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677686492
    },
    {
        "content": "<p>some issue with hygiene, maybe?</p>",
        "id": 338886580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677687037
    },
    {
        "content": "<p>it seems that the inductive type defining homs is the root of the issue, or maybe just <code>diagramMap</code>?</p>",
        "id": 338886618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677687049
    },
    {
        "content": "<p>maybe not... turning off hygiene doesn't resolve the error.</p>",
        "id": 338888538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677687487
    },
    {
        "content": "<p>Does explicitly filling the other fields of the functor help?</p>",
        "id": 338890073,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677687812
    },
    {
        "content": "<p>yeah, filling in the fields as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diagram</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">diagramObj</span> <span class=\"n\">U</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">diagramMap</span> <span class=\"n\">U</span> <span class=\"n\">f</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>gets rid of the error.<br>\nIt looks like an application of simp (either via aesop_cat or directly) is causing the error somehow</p>",
        "id": 338892119,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677688246
    },
    {
        "content": "<p>Maybe it should be <code>contains?</code>?</p>",
        "id": 338893203,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677688494
    },
    {
        "content": "<p>Thanks! It seems it was <code>aesop_cat</code> which was causing the error. Filling the proofs for this definition (and another in the end of the file) fixes the problem.</p>",
        "id": 338899402,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677689834
    },
    {
        "content": "<p>I was also seeing PANICs which were conjecturally tracked down to <code>aesop_cat</code> in a recent thread.</p>",
        "id": 338900201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677690034
    },
    {
        "content": "<p>See <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/PSA.3A.20using.20Aesop.20for.20auto-params\">#mathlib4 &gt; PSA: using Aesop for auto-params</a>; fix is on the way.</p>",
        "id": 338901033,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677690202
    },
    {
        "content": "<p>In this case, it's not <code>aesop</code> specifically, it's simp.<br>\nE.g. this gives the same error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diagram</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span> <span class=\"bp\">⥤</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">diagramObj</span> <span class=\"n\">U</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">diagramMap</span> <span class=\"n\">U</span> <span class=\"n\">f</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 338905298,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677691203
    },
    {
        "content": "<p><code>dsimp</code> is fine though <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 338905450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677691234
    },
    {
        "content": "<p>I'll extract a mwe</p>",
        "id": 338906490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677691488
    },
    {
        "content": "<p>okay, the last <code>by simp</code> gives the same error in the following not-so-minimal code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Pairwise</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id_single</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id_pair</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Hom</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">o</span> <span class=\"n\">o</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_single</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id_pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">diagramObj</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">U</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pair</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"bp\">⊓</span> <span class=\"n\">U</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">diagramMap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span><span class=\"o\">),</span> <span class=\"n\">diagramObj</span> <span class=\"n\">U</span> <span class=\"n\">o₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">diagramObj</span> <span class=\"n\">U</span> <span class=\"n\">o₂</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id_single</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id_pair</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">homOfLE</span> <span class=\"n\">inf_le_left</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">homOfLE</span> <span class=\"n\">inf_le_right</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">diagramMap_id</span> <span class=\"o\">:</span>\n  <span class=\"n\">diagramMap</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">Pairwise.id</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Pairwise</span>\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>",
        "id": 338909245,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677692107
    },
    {
        "content": "<p>OTOH, <code>rfl</code> works just fine</p>",
        "id": 338909405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677692152
    }
]