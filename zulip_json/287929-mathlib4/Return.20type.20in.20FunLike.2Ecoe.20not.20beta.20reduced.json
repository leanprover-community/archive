[
    {
        "content": "<p><strong>edit</strong>: the question is moot ... I'm not running latest mathlib and this seems to be fixed :)</p>\n<p><del>The return type in <code>FunLike.coe</code> does not seem to be beta reduced. Why is that and can we do something about it? I believe there is some custom elaborator for <code>FunLike</code>/coercion to function, where can I find it?</del></p>\n<p>Example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- FunLike.coe F Nat (fun (a : Nat) =&gt; (fun (x : Nat) =&gt; Nat) a) inst f x : (fun (x : Nat) =&gt; Nat) x</span>\n</code></pre></div>\n<p>The issue is the type <code>(fun (a : Nat) =&gt; (fun (x : Nat) =&gt; Nat) a)</code> which just beta reduces to <code>fun (x : Nat) =&gt; Nat</code>. </p>\n<p>I run into this issue when using <code>simp</code> with <code>dsimp:=false</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"c1\">-- fails to simplify `id`</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">:=</span><span class=\"n\">false</span><span class=\"o\">,</span><span class=\"n\">failIfUnchanged</span><span class=\"o\">:=</span><span class=\"n\">false</span><span class=\"o\">})</span>\n    <span class=\"n\">trace_state</span> <span class=\"c1\">-- f (id x)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">dsimp</span><span class=\"o\">:=</span><span class=\"n\">true</span><span class=\"o\">})</span>\n    <span class=\"n\">trace_state</span> <span class=\"c1\">-- f x</span>\n</code></pre></div>",
        "id": 404701507,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1701199100
    },
    {
        "content": "<p>Yep :-) I think it might be this commit: <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/402340291\">https://leanprover.zulipchat.com/#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/402340291</a></p>",
        "id": 404702954,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701199529
    }
]