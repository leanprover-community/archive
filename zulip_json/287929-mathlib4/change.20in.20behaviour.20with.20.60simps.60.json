[
    {
        "content": "<p>I don't know anything about Kan extensions but I've traced back a failure with <code>simp</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3703\">!4#3703</a> (which I haven't yet fixed) to the following issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.KanExtension</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.lan_map_app</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">‚ä¢ ‚àÄ {S : Type u‚ÇÅ} {L : Type u‚ÇÇ} {D : Type u‚ÇÉ} [inst : CategoryTheory.Category S] [inst_1 : CategoryTheory.Category L]</span>\n<span class=\"cm\">  [inst_2 : CategoryTheory.Category D] (Œπ : S ‚•§ L)</span>\n<span class=\"cm\">  [inst_3 : ‚àÄ (X : L), CategoryTheory.Limits.HasColimitsOfShape (CategoryTheory.CostructuredArrow Œπ X) D] {X X' : S ‚•§ D}</span>\n<span class=\"cm\">  (f : X ‚ü∂ X') (x : L),</span>\n<span class=\"cm\">  ((CategoryTheory.lan Œπ).map f).app x =</span>\n<span class=\"cm\">    CategoryTheory.Limits.colimit.desc (CategoryTheory.Lan.diagram Œπ X x)</span>\n<span class=\"cm\">      { pt := CategoryTheory.Limits.colimit (CategoryTheory.Lan.diagram Œπ X' x),</span>\n<span class=\"cm\">        Œπ :=</span>\n<span class=\"cm\">          CategoryTheory.NatTrans.mk fun i ‚Ü¶</span>\n<span class=\"cm\">            (f.app i.left ‚â´</span>\n<span class=\"cm\">+                (‚Üë(CategoryTheory.Lan.equiv Œπ X' (CategoryTheory.Lan.loc Œπ X')) (ùüô (CategoryTheory.Lan.loc Œπ X'))).app</span>\n<span class=\"cm\">+                  i.left) ‚â´</span>\n<span class=\"cm\">              CategoryTheory.Limits.colimit.pre (CategoryTheory.Lan.diagram Œπ X' x)</span>\n<span class=\"cm\">                (CategoryTheory.CostructuredArrow.map i.hom) }</span>\n<span class=\"cm\">                -/</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Lean 3:</span>\n\n<span class=\"cm\">category_theory.Lan_map_app :</span>\n<span class=\"cm\">  ‚àÄ (Œπ : ?M_1 ‚•§ ?M_2)</span>\n<span class=\"cm\">  [_inst_4 :</span>\n<span class=\"cm\">    ‚àÄ (X : ?M_2), category_theory.limits.has_colimits_of_shape (category_theory.costructured_arrow Œπ X) ?M_3]</span>\n<span class=\"cm\">  (X X' : ?M_1 ‚•§ ?M_3) (f : X ‚ü∂ X') (x : ?M_2),</span>\n<span class=\"cm\">    ((category_theory.Lan Œπ).map f).app x =</span>\n<span class=\"cm\">      category_theory.limits.colimit.desc (category_theory.Lan.diagram Œπ X x)</span>\n<span class=\"cm\">        {X := category_theory.limits.colimit (category_theory.Lan.diagram Œπ X' x) _,</span>\n<span class=\"cm\">         Œπ := {app := Œª (i : category_theory.costructured_arrow Œπ x),</span>\n<span class=\"cm\">                        (f.app i.left ‚â´</span>\n<span class=\"cm\">+                             category_theory.limits.colimit.Œπ (category_theory.Lan.diagram Œπ X' (Œπ.obj i.left))</span>\n<span class=\"cm\">+                                 (category_theory.costructured_arrow.mk (ùüô (Œπ.obj i.left))) ‚â´</span>\n<span class=\"cm\">+                               ùüô</span>\n<span class=\"cm\">+                                 (category_theory.limits.colimit</span>\n<span class=\"cm\">+                                    (category_theory.Lan.diagram Œπ X' (Œπ.obj i.left)))) ‚â´</span>\n<span class=\"cm\">                          category_theory.limits.colimit.pre (category_theory.Lan.diagram Œπ X' x)</span>\n<span class=\"cm\">                            (category_theory.costructured_arrow.map i.hom),</span>\n<span class=\"cm\">               naturality' := _}}</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I've posted both the Lean 4 and Lean 3 types of <code>lan_map_app</code> and noted the lines where they differ definitionally with <code>+</code> on the left. I tried to prove the equality of these two subterms with <code>simp</code> but I couldn't get it to work so I'm stuck, but I am prepared to work more on this if someone can suggest anything productive to investigate.</p>",
        "id": 354350606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682770064
    },
    {
        "content": "<p>Aah, progress: the proof that the two marked areas are equal is not <code>rfl</code> but <code>Category.comp_id</code>. This should get me through.</p>",
        "id": 354826545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682933684
    }
]