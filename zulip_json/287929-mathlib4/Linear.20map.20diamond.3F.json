[
    {
        "content": "<p>I wanted to port <code>LinearPMap</code>, but the definition already fails miserably:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Prod</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">LinearPmap</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">E</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>throws the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">RingHom.id</span> <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>It is probably the same issue as <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2ESpan.20!4.232248\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2ESpan.20!4.232248</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EBasic.20!4.231979/near/327458361\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EBasic.20!4.231979/near/327458361</a><br>\nAm I correct in assuming that we have to wait for the long-term solution before porting more linear algebra?</p>",
        "id": 329317126,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677024431
    },
    {
        "content": "<p>You can try locally turning off instances to cut off one side of the problematic diamond, but otherwise this issue is indeed a show-stopper as far as I can tell.</p>",
        "id": 329318675,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1677025218
    },
    {
        "content": "<p>This definitely looks like <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> to me</p>",
        "id": 329321880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677026963
    },
    {
        "content": "<p>Well what are you waiting for -- try <code>set_option synthInstance.etaExperiment true</code>!</p>",
        "id": 329322109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677027086
    },
    {
        "content": "<p>Oh, you're waiting for this to find its way into mathlib I guess</p>",
        "id": 329322161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677027121
    },
    {
        "content": "<p>I just tried it and yes, it does not exist yet in mathlib4.</p>",
        "id": 329322262,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677027146
    },
    {
        "content": "<p>I was waiting for the github notification to make me aware that we now had that!</p>",
        "id": 329324733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677028614
    },
    {
        "content": "<p>I guess we'll have a new nightly in a few hours</p>",
        "id": 329332151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677034408
    }
]