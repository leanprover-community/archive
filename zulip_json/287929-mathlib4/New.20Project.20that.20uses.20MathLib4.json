[
    {
        "content": "<p>Using \"leanprover/lean4:nightly-2021-12-01\" and mathlib, I get this error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Defs.lean</span><span class=\"o\">:</span><span class=\"mi\">54</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.710</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.713</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">p</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>which makes sense, because the project and the master don't use the same lean toolchain. (Master is using 2021-12-19 right now, and passes the tests). But when I change my project to use that toolchain, lake itself does not work (not build nor clean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">alcides</span><span class=\"bp\">@</span><span class=\"n\">Alcidess</span><span class=\"bp\">-</span><span class=\"n\">MacBook</span><span class=\"bp\">-</span><span class=\"n\">Pro</span> <span class=\"bp\"></span> <span class=\"bp\">~/</span><span class=\"n\">Desktop</span><span class=\"bp\">/</span><span class=\"n\">LeanGenetic</span> <span class=\"bp\"></span> <span class=\"bp\"></span> <span class=\"n\">master</span> <span class=\"bp\"></span> <span class=\"n\">lake</span> <span class=\"n\">clean</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">alcides</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2021-12-19/lib/lean/Lean/Data/Name.olean' of module Lean.Data.Name does not exist</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"bp\">`./</span><span class=\"n\">lakefile.lean</span><span class=\"bp\">`</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 265690882,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1640097058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284775\">Alcides Fonseca</span> has marked this topic as unresolved.</p>",
        "id": 265690888,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640097063
    },
    {
        "content": "<p>That's very odd, the file exists in the tarball</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">tar</span> <span class=\"n\">tf</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"bp\">-</span><span class=\"n\">darwin.tar.zst</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Name.olean</span>\n<span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2021</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"bp\">-</span><span class=\"n\">darwin</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Name.olean</span>\n</code></pre></div>",
        "id": 265691845,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640097579
    },
    {
        "content": "<p>I went back to mathlib4 commit \"559d1ea67b9ad3f18effcef642097ed0118a118c\" with \"leanprover/lean4:nightly-2021-12-08\", and it works.</p>",
        "id": 265696422,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1640100026
    },
    {
        "content": "<p>Is the file in fact missing? Could you try removing and re-adding the toolchain?</p>",
        "id": 265699589,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1640101511
    },
    {
        "content": "<p>it works by reinstaling the toolchain. I must have control+c'ed or lost internet during the instalation.</p>",
        "id": 265725561,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1640115155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> has marked this topic as unresolved.</p>",
        "id": 324490126,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675027202
    },
    {
        "content": "<p>It would be nice to have a reliable process to create a project that depends on mathlib4. The lake documentation says to run <code>lake new &lt;package-name&gt; math</code> but this does not work. In particular it creates a project whose <code>lean-tool-chain</code> is not the relevant one for mathlib.</p>",
        "id": 324490234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027282
    },
    {
        "content": "<p>And of course it doesn't include getting the cached oleans for mathlib.</p>",
        "id": 324490269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027302
    },
    {
        "content": "<p>you should open an issue for that</p>",
        "id": 324490413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675027393
    },
    {
        "content": "<p>Where?</p>",
        "id": 324490418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027399
    },
    {
        "content": "<p>lake</p>",
        "id": 324490424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675027403
    },
    {
        "content": "<p>Is there any hope to get a version of mathlib4 using a Lean4 that includes <a href=\"https://github.com/leanprover/lean4/commit/18297d8d918cc808c37c23ad497bca7f98dbe973\">https://github.com/leanprover/lean4/commit/18297d8d918cc808c37c23ad497bca7f98dbe973</a> before Tuesday?</p>",
        "id": 324490503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027451
    },
    {
        "content": "<p>I need to give a short Lean demo on Tuesday and I was about to decide to show Lean 4 when I remembered this fix didn't reach mathlib yet.</p>",
        "id": 324490533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027490
    },
    {
        "content": "<p>I opened a lake issue.</p>",
        "id": 324490680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027600
    },
    {
        "content": "<p>have you tried just bumping the <code>lean-toolchain</code> of your project depending on mathlib? I guess you won't get caches that way though</p>",
        "id": 324490739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675027634
    },
    {
        "content": "<p>This is what I involuntarily tried when I tried to follow the lake README and nothing worked.</p>",
        "id": 324490792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027680
    },
    {
        "content": "<p>what broke?</p>",
        "id": 324490853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675027695
    },
    {
        "content": "<p>aesop didn't build and <code>calc</code> failed in mathlib.</p>",
        "id": 324490880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Building</span> <span class=\"n\">Aesop.Tree.Check</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-29/lib:./lake-packages/aesop/build/lib /home/pmassot/.elan/toolchains/leanprover--lean4---nightly-2023-01-29/bin/lean ./lake-packages/aesop/././Aesop/Tree/ExtractProof.lean -R ./lake-packages/aesop/./. -o ./lake-packages/aesop/build/lib/Aesop/Tree/ExtractProof.olean -i ./lake-packages/aesop/build/lib/Aesop/Tree/ExtractProof.ilean -c ./lake-packages/aesop/build/ir/Aesop/Tree/ExtractProof.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">write</span> <span class=\"bp\">'./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Aesop</span><span class=\"bp\">/</span><span class=\"n\">Tree</span><span class=\"bp\">/</span><span class=\"n\">ExtractProof.olean'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-29/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 324490900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-29/lib:./lake-packages/mathlib/build/lib /home/pmassot/.elan/toolchains/leanprover--lean4---nightly-2023-01-29/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./lake-packages/mathlib/././Mathlib/Algebra/Group/Semiconj.lean -R ./lake-packages/mathlib/./. -o ./lake-packages/mathlib/build/lib/Mathlib/Algebra/Group/Semiconj.olean -i ./lake-packages/mathlib/build/lib/Mathlib/Algebra/Group/Semiconj.ilean -c ./lake-packages/mathlib/build/ir/Mathlib/Algebra/Group/Semiconj.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Semiconj.lean</span><span class=\"o\">:</span><span class=\"mi\">124</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span><span class=\"bp\">-</span><span class=\"n\">side</span> <span class=\"n\">is</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">expected</span>\n  <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Semiconj.lean</span><span class=\"o\">:</span><span class=\"mi\">140</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span><span class=\"bp\">-</span><span class=\"n\">side</span> <span class=\"n\">is</span>\n  <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">expected</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-29/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 324490932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027766
    },
    {
        "content": "<p>I guess I could use the stopgap from <a href=\"#narrow/stream/270676-lean4/topic/Unexpander.20for.20function.20composition\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Unexpander.20for.20function.20composition</a>  and show Lean 4 anyway.</p>",
        "id": 324491214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675027976
    },
    {
        "content": "<p>I'm playing the human-mathport game on a Lean 3 tutorial. The really nice part is deleting all those commas. The really really sad one is adding all those square brackets for single rewrites. This super painful and hurts the eye so much...</p>",
        "id": 324492200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675028813
    },
    {
        "content": "<p>by the way you can define your own <code>rw</code> as a macro for the normal one if you want to get rid of the brackets</p>",
        "id": 324492849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675029314
    },
    {
        "content": "<p>Is mathlib4 meant to weight more than 850Mb already?</p>",
        "id": 324493016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029447
    },
    {
        "content": "<p>I guess this ends the idea of using it for my interactive demo. Participants will have machines with limited storage.</p>",
        "id": 324493097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029500
    },
    {
        "content": "<p>In Lean 3 I could distribute a demo package including lean itself and enough mathlib to get <code>data.real.basic</code> in 133Mb. It seems the price in Lean 4 without including Lean 4 itself is 1.2Gb.</p>",
        "id": 324493294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029684
    },
    {
        "content": "<p>Surely I have messed up something</p>",
        "id": 324493309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029713
    },
    {
        "content": "<p>Is <a href=\"https://github.com/xubaiw/Unicode.lean\">https://github.com/xubaiw/Unicode.lean</a> really needed? This alone is already 102Mb</p>",
        "id": 324493425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029841
    },
    {
        "content": "<p>what are you measuring?</p>",
        "id": 324493484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675029877
    },
    {
        "content": "<p>Folder size on hard drive</p>",
        "id": 324493514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029904
    },
    {
        "content": "<p>after build?</p>",
        "id": 324493525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675029915
    },
    {
        "content": "<p>After enough build so that you can use it, yes.</p>",
        "id": 324493532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675029931
    },
    {
        "content": "<p>I'm seeing similar numbers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dwrensha</span><span class=\"bp\">@</span><span class=\"n\">hafnium</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">du</span> <span class=\"bp\">-</span><span class=\"n\">hs</span> <span class=\"bp\">.</span>\n<span class=\"mi\">865</span><span class=\"n\">M</span>    <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 324493612,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675029990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324493425\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://github.com/xubaiw/Unicode.lean\">https://github.com/xubaiw/Unicode.lean</a> really needed? This alone is already 102Mb</p>\n</blockquote>\n<p>This is only downloaded as part of the doc-gen4 dependency...It would be cool if lake had a feature to only download dependencies that are actually required with the current configuration (i.e. if -Kdoc=on is false it doesn't download) but sadly that's not the case yet.</p>\n<p>Quite a few of the files are also unnecessarily big due to our compiler efforts...we are storing basically unused compilation output in the .olean files so the new compiler can alreayd run on all files in hopes that we might catch errors before making it the new default after its development is done.</p>\n<p>So overall yes there is definitely quite a lot of stuff that does not have to be in there.</p>",
        "id": 324493614,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675029992
    },
    {
        "content": "<p>That demo project is basically the first half of <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a>. In Lean 3, you can download 133Mb, including lean itself, and do the exercices. In Lean 4 it seems to be 1.2Gb.</p>",
        "id": 324493621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675030000
    },
    {
        "content": "<p>Is it possible to turn off  the new compiler output stuff?</p>",
        "id": 324493923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675030284
    },
    {
        "content": "<p>Not directly but I might have an idea for a hack <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> ...</p>",
        "id": 324494196,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675030554
    },
    {
        "content": "<p>So in theory with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Compiler.LCNF.Main</span>\n\n<span class=\"kd\">@[cpass]</span>\n<span class=\"kd\">def</span> <span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Compiler.LCNF.PassInstaller</span> <span class=\"n\">where</span>\n  <span class=\"n\">install</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>you can tell the new compiler that it should just drop its list of pre-configured compiler passes and do nothing. And this does actually work...the only issue is that this does of course need to run before we process the files so it would need to be an extra import everywhere which I didn't think about before  :(</p>",
        "id": 324494690,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675030952
    },
    {
        "content": "<p>You mean in every mathlib file for instance?</p>",
        "id": 324494804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675031068
    },
    {
        "content": "<p>Yes...unless there is another way to run this piece of code before the compiler is run on each file. I unfortunately don't know much about how the new compiler hooks into the elaborator, Leo just did that at some point.</p>",
        "id": 324494874,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675031148
    },
    {
        "content": "<p>I think a better approach would be an option to disable the old and/or new compiler</p>",
        "id": 324495011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675031244
    },
    {
        "content": "<p>then you could set it in the lakefile</p>",
        "id": 324495020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675031259
    },
    {
        "content": "<p>Yeah for sure it would</p>",
        "id": 324495026,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675031268
    },
    {
        "content": "<p>You could hook either into the calls that are made to this function: <a href=\"https://github.com/leanprover/lean4/blob/5349a089e5bb6905eaca1a09e2b587488f8e4715/src/Lean/CoreM.lean#L299-L299\">https://github.com/leanprover/lean4/blob/5349a089e5bb6905eaca1a09e2b587488f8e4715/src/Lean/CoreM.lean#L299-L299</a> or directly into <a href=\"https://github.com/leanprover/lean4/blob/5349a089e5bb6905eaca1a09e2b587488f8e4715/src/Lean/Compiler/LCNF/Main.lean#L87-L88\">https://github.com/leanprover/lean4/blob/5349a089e5bb6905eaca1a09e2b587488f8e4715/src/Lean/Compiler/LCNF/Main.lean#L87-L88</a> this function. I'm afraid I need to go to bed now though since I have to get up early and won't be able to make a PR for this until tomorrow evening/night so if you want this quickly someone else will have to insert the option. I don't think it should be too hard though.</p>",
        "id": 324495251,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675031439
    },
    {
        "content": "<p>Thank you very much for having  spent time to think about this!</p>",
        "id": 324495454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675031620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324490503\">said</a>:</p>\n<blockquote>\n<p>Is there any hope to get a version of mathlib4 using a Lean4 that includes <a href=\"https://github.com/leanprover/lean4/commit/18297d8d918cc808c37c23ad497bca7f98dbe973\">https://github.com/leanprover/lean4/commit/18297d8d918cc808c37c23ad497bca7f98dbe973</a> before Tuesday?</p>\n</blockquote>\n<p>not sure if you talked yourself out of it anyway, but mathlib + deps are now on 01-29.</p>",
        "id": 324501338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675036253
    },
    {
        "content": "<p>Thank you very much Mario! I still don't know whether I'll use Lean 4 tomorrow. I'm waiting to hear about how much storage space is available. Initially I announced that I would need about 200Mb and now I need at least 850Mb (I managed to save 400Mb by removing doc-gen that lake thought was useful for anyone relying on mathlib).</p>",
        "id": 324539744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675063555
    },
    {
        "content": "<p>That one is <a href=\"https://github.com/leanprover/lake/issues/149\">https://github.com/leanprover/lake/issues/149</a> fwiw</p>",
        "id": 324552485,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675068329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324539744\">said</a>:</p>\n<blockquote>\n<p>Thank you very much Mario! I still don't know whether I'll use Lean 4 tomorrow. I'm waiting to hear about how much storage space is available. Initially I announced that I would need about 200Mb and now I need at least 850Mb (I managed to save 400Mb by removing doc-gen that lake thought was useful for anyone relying on mathlib).</p>\n</blockquote>\n<p>Actually that estimate was completely wrong, I forgot to look at my <code>.elan</code> folder. Lean alone is 875Mb per toolchain. So being able to check a Lean 4 file containing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n</code></pre></div>\n<p>seems to require at least 1.6 Gb of disk space after optimizing mathlib4 but without trying to optimize the toolchain folder. I guess there is no hope to bring this below 500Mb, so I'll give up the idea to organize a \"let's try Lean 4 session\" until this massive duplication issue is fixed.</p>",
        "id": 324603482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675084598
    },
    {
        "content": "<p>I'm writing this for future reference if someone else is tempted, I do not mean to complain.</p>",
        "id": 324603619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675084637
    },
    {
        "content": "<p>adding to this thread: I notice that every time I start a new project with mathlib, (and run lake update), mathlib is built from scratch. This takes a solid 20 minutes, and my laptop fans cry for dear life. Is it possible to get the precached oleans when lake clones mathlib and avoid this build somehow?</p>",
        "id": 324625326,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675089899
    },
    {
        "content": "<p>It makes no sense to rebuild mathlib when one is not even editing it. Just using it.</p>",
        "id": 324625786,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675089995
    },
    {
        "content": "<p>especially when one already needs to match the lean toolchain version with mathlib</p>",
        "id": 324626141,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675090092
    },
    {
        "content": "<p>Based on an extremely unscientific sample (one file) the mathlib 4 oleans seem to be about 5-6 times as large as the corresponding mathlib 3 oleans</p>",
        "id": 324629270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675090877
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2075\">https://github.com/leanprover/lean4/pull/2075</a> for enabling/disabling the new compiler.</p>\n<p>The effects seem to be certainly significant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span> <span class=\"n\">array_test.lean</span> <span class=\"k\">with</span> <span class=\"n\">new</span> <span class=\"n\">compiler</span>\n<span class=\"bp\">λ</span> <span class=\"n\">du</span> <span class=\"n\">out.olean</span>\n<span class=\"mi\">332</span>     <span class=\"n\">out.olean</span>\n<span class=\"bp\">#</span> <span class=\"n\">array_test.lean</span> <span class=\"n\">without</span> <span class=\"n\">new</span> <span class=\"n\">compiler</span>\n<span class=\"bp\">λ</span> <span class=\"n\">du</span> <span class=\"n\">out.olean</span>\n<span class=\"mi\">200</span>     <span class=\"n\">out.olean</span>\n</code></pre></div>",
        "id": 324646785,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675094953
    },
    {
        "content": "<p>That sounds like it might be a problem for our Azure costs in the long run, although<code>lake exe cache</code> is arguably better at reducing duplication than <code>leanproject get-cache</code> was</p>",
        "id": 324646810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675094965
    },
    {
        "content": "<p>CC: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> if you can still be fancied :P</p>",
        "id": 324647303,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675095099
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 324718443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675095187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324646810\">said</a>:</p>\n<blockquote>\n<p>That sounds like it might be a problem for our Azure costs in the long run, although<code>lake exe cache</code> is arguably better at reducing duplication than <code>leanproject get-cache</code> was</p>\n</blockquote>\n<p>How about local caches?  The same version of mathlib might be used in many projects. So why not download a given version of mathlib and compile it the first time, and store them alongwith the object files in some central place, like toolchains are at the moment. Then a new version is downloaded and compiled only if required.</p>",
        "id": 324719462,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675095439
    },
    {
        "content": "<p>I have about 50 Lean 3 projects on the computer I'm writing this on and I am highly confident that they will use 50 different versions of mathlib 3 (most of which are costing me 700MB of storage). The issue is that mathlib3 updates about 10 times a day!</p>",
        "id": 324720182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675095611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324720182\">said</a>:</p>\n<blockquote>\n<p>I have about 50 Lean 3 projects on the computer I'm writing this on and I am highly confident that they will use 50 different versions of mathlib 3 (most of which are costing me 700MB of storage). The issue is that mathlib3 updates about 10 times a day!</p>\n</blockquote>\n<p>But you would still save space if they were stored centrally even if in the future, two projects used each version.</p>",
        "id": 324720726,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675095735
    },
    {
        "content": "<p>and compile time</p>",
        "id": 324720735,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675095739
    },
    {
        "content": "<p><del>The only upside I can see for downloading a local copy for each project is getting reproducible builds for your project. But this might not be a requirement for most use cases.</del> I am not sure it is necessary for even that on second thought.</p>",
        "id": 324721492,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675095942
    },
    {
        "content": "<p>All I'm saying is \"the same version of mathlib might be used in many projects\" is an extremely optimistic hope, given that when you make a new project you just clone mathlib master which is different to mathlib master from 2 hours ago.</p>",
        "id": 324722403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675096187
    },
    {
        "content": "<p>Hmm... makes sense if that is your use case. Does it make sense for everyone to use the latest version that is released every two hours? Not all changes might be bug fixes, so if someone is using mathlib for some part of it that has been stable for some time, does it make sense for them to recompile it for some additional results, that are extraneous to their needs?</p>",
        "id": 324724116,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675096610
    },
    {
        "content": "<p>Kevin, note that caches are now per-file rather than global; so it's likely that your two projects on mathlib versions a few weeks apart can use the same cache for <code>Logic.Basic</code> even if they can't use the same cache for downstream files</p>",
        "id": 324724294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675096653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324724116\">said</a>:</p>\n<blockquote>\n<p>Does it make sense for everyone to use the latest version that is released every two hours? Not all changes might be bug fixes, so if someone is using mathlib for some part of it that has been stable for some time, does it make sense for them to recompile it for some additional results, that are extraneous to their needs?</p>\n</blockquote>\n<p>We're not talking about users upgrading every two hours, we're talking about two users starting their own projects two hours apart from each other.</p>",
        "id": 324724546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675096723
    },
    {
        "content": "<p>My original issue was about one user (in this case me), having to recompile mathlib because of either 1. no changes or 2. some changes that are not relevant to me).</p>",
        "id": 324724691,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675096781
    },
    {
        "content": "<p>and then storing it twice.</p>",
        "id": 324724721,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675096790
    },
    {
        "content": "<p>Maybe in the future these issues are resolved when there are stable releases and each mathlib user has a central folder containing the versions they need with the respective caches after first compile.</p>",
        "id": 324725059,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675096877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, if you're working on a downstream project you should never have to \"recompile mathlib\", and should be running <code>lake exe cache</code>. Are you talking about working on mathlib itself?</p>",
        "id": 324725273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675096928
    },
    {
        "content": "<p>(or did we never implement <code>lake exe cache</code> for downstream projects?)</p>",
        "id": 324725499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675097004
    },
    {
        "content": "<p>I recall that discussion: it was suggested that we need something that just works for mathlib4 for the moment.</p>",
        "id": 324725611,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675097041
    },
    {
        "content": "<p>I can't use it anyway because my curl version is too low or something</p>",
        "id": 324726255,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675097209
    },
    {
        "content": "<p>Even if <code>lake exe cache</code> works, that only solves the compile issue, not the massive storage issue.</p>",
        "id": 324726642,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675097305
    },
    {
        "content": "<p><code>lake exe cache</code> works for downstream projects if you set the dependency properly. And it uses an unified cache folder for multiple projects in your computer</p>",
        "id": 324728771,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675097850
    },
    {
        "content": "<p>(it wasn't originally implemented like that, but Johan asked for this change because he had multiple copies of mathlib4 on his machine and he was doing too many downloads of the same files to different folders)</p>",
        "id": 324729392,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675097998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324728771\">said</a>:</p>\n<blockquote>\n<p><code>lake exe cache</code> works for downstream projects if you set the dependency properly. And it uses an unified cache folder for multiple projects in your computer</p>\n</blockquote>\n<p>But that's just the tarballs, no? Since this discussion was mainly about storage size, we would have to store the .oleans there as well and hard- or symlink them into the projects. At which point there would be no need for keeping around the tarballs anymore.</p>",
        "id": 324739361,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675100679
    },
    {
        "content": "<p>Is it possible, if either curl doesn't work (version issues), or if there is no internet, to locally build the required version of mathlib once and store the locally built files in the cache with <code>lake exe cache</code>?</p>",
        "id": 324750256,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675103764
    },
    {
        "content": "<p>Yes, that's <code>lake exe cache mk</code>. Then you can unpack with <code>lake exe cache unpack</code>. Try <code>lake exe cache</code> for more options</p>",
        "id": 324751196,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675104043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324739361\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324728771\">said</a>:</p>\n<blockquote>\n<p><code>lake exe cache</code> works for downstream projects if you set the dependency properly. And it uses an unified cache folder for multiple projects in your computer</p>\n</blockquote>\n<p>But that's just the tarballs, no? Since this discussion was mainly about storage size, we would have to store the .oleans there as well and hard- or symlink them into the projects. At which point there would be no need for keeping around the tarballs anymore.</p>\n</blockquote>\n<p>Sorry, I don't understand your point. the compressid olean files are in the tarbals. So is two projects need the same olean, <code>lake exe cache</code> makes use of the same tar file</p>",
        "id": 324752100,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675104321
    },
    {
        "content": "<p>I think the point is that there are n+1 copies of the olean; one in each project and one in the original tarball</p>",
        "id": 324752285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675104378
    },
    {
        "content": "<p>Rather than a single copy and a lot of symlinks</p>",
        "id": 324752357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675104404
    },
    {
        "content": "<p>But symlinks are hard on windows</p>",
        "id": 324752381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675104413
    },
    {
        "content": "<p>Ah, I get it now. I've thought of an unified folder for oleans in the past, instead of putting built files inside a <code>build</code> folder for each project. But that's in the scope of Lake, of course.</p>\n<p>I mean, Lake could implement something similar to what <code>cache</code> is doing: have a target <code>lake_store</code> folder and put everything there, named by hash. But then a better hash would be even more advised.</p>\n<p>As a bonus, that would make the implementation of <code>lake exe cache</code> simpler because the target folder of cached files would be trivial</p>",
        "id": 324752758,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675104541
    },
    {
        "content": "<p>Thanks for the tip btw, I just deleted 8 gigs of lean4 toolchains from 2022</p>",
        "id": 324761519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675107406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/.elan$ du -sh\n26G .\n</code></pre></div>",
        "id": 324762100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675107595
    },
    {
        "content": "<p>is there an elan issue for garbage collection?</p>",
        "id": 324762756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675107815
    },
    {
        "content": "<p>I know Jannis has implemented an independent script that does that. I usually just do it by hand via the <code>elan toolchain</code> CLI</p>",
        "id": 324763144,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675107943
    },
    {
        "content": "<p>and coincidentally</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects$ du -sh\n26G .\n</code></pre></div>",
        "id": 324763354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675108003
    },
    {
        "content": "<p>I would like to have elan do garbage collection automatically given some user-configurable caching policy (even if the default is to keep everything). It is very easy not to realize that your elan folder is ballooning, so a manually triggered script doesn't really solve the problem</p>",
        "id": 324763664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675108119
    },
    {
        "content": "<p>not to mention that it can't help all the people who don't know how to work a console</p>",
        "id": 324763733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675108151
    },
    {
        "content": "<p>last I recall just deleting folders in the elan directory puts it in a weird state</p>",
        "id": 324763824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675108193
    },
    {
        "content": "<p>and that's the most obvious thing to do in response to giant folders on your HD</p>",
        "id": 324763937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675108221
    },
    {
        "content": "<p>yeah, just deleting directories in <code>.elan/toolchains</code> messes things up (you can't use the toolchain again IIRC); you also have to delete the corresponding 87-or-so byte file in <code>.elan/update-hashes</code>.</p>",
        "id": 324765332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675108699
    },
    {
        "content": "<p>I wonder whether we can put that file in the directory as well so that one folder deletion just works</p>",
        "id": 324765454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675108745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324724294\">said</a>:</p>\n<blockquote>\n<p>Kevin, note that caches are now per-file rather than global; so it's likely that your two projects on mathlib versions a few weeks apart can use the same cache for <code>Logic.Basic</code> even if they can't use the same cache for downstream files</p>\n</blockquote>\n<p>Can we gather data about how often a file had its cache invalidated over, say, the past year? My guess is \"often\", because files have many imports and even basic files change regularly.</p>",
        "id": 324767505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675109419
    },
    {
        "content": "<p>That's a tricky query but can be done by navigating the commit history, computing the hashes and counting the number of hashes each file has had</p>",
        "id": 324769132,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675109991
    },
    {
        "content": "<p>But each toolchain bump is a guaranteed invalidation of the entire cache folder. So while the toolchain isn't stable enough, we should expect 1 or two complete wipes every week I think. So, again, remember to <code>lake exe cache clean</code> once in a while</p>",
        "id": 324769616,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675110129
    },
    {
        "content": "<p>Idea: make any call to <code>lake exe cache</code> print a suggestion to <code>lake exe cache clean</code> once the number of cached files reaches, say, 4 times the number of files that are actually relevant at the moment</p>",
        "id": 324771252,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675110739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324751196\">said</a>:</p>\n<blockquote>\n<p>Yes, that's <code>lake exe cache mk</code>. Then you can unpack with <code>lake exe cache unpack</code>. Try <code>lake exe cache</code> for more options</p>\n</blockquote>\n<p><code>lake exe cache mk</code> fails if I have the wrong version of <code>curl</code>.</p>",
        "id": 324783543,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675115400
    },
    {
        "content": "<p>is curl necessary if I don't want the remotely cached oleans?</p>",
        "id": 324783770,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675115495
    },
    {
        "content": "<p>Good point. I'm baking a quick fix</p>",
        "id": 324785002,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675115931
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1956\">!4#1956</a></p>",
        "id": 324787392,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675116789
    },
    {
        "content": "<p>Deleted wrong message</p>",
        "id": 324859809,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1675156606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20Project.20that.20uses.20MathLib4/near/324763144\">said</a>:</p>\n<blockquote>\n<p>I know Jannis has implemented an independent script that does that. I usually just do it by hand via the <code>elan toolchain</code> CLI</p>\n</blockquote>\n<p>This one: <a href=\"https://github.com/JLimperg/elan-cleanup\">https://github.com/JLimperg/elan-cleanup</a></p>",
        "id": 324886253,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675164553
    }
]