[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Function.swap</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">f.swap</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- application type mismatch</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Why cannot I write <code>f.swap</code> (the second example)?</p>",
        "id": 404702094,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701199250
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1629\">lean4#1629</a></p>",
        "id": 404702865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701199488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 404703133,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701199597
    }
]