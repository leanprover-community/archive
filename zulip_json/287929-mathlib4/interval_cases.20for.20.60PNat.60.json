[
    {
        "content": "<p>While working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2155\">!4#2155</a>, I noticed that the ported interval_cases tactic currently doesn't work on PNat. The corresponding line  is commented out <a href=\"https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/IntervalCases.lean#L287\">https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/IntervalCases.lean#L287</a><br>\nIs this a TODO that should be fixed? Does this depend on something that is still missing, like some features of <code>norm_num</code> or can the tactic in principle be adapted to work for PNat now?</p>",
        "id": 326670514,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1675885190
    },
    {
        "content": "<p>Is it just that <code>PNat</code> wasn't ported when <code>interval_cases</code> was? Probably we just need to port the relevant <code>pnatMethods</code> code.</p>",
        "id": 326670989,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675885350
    },
    {
        "content": "<p>Let me look into this briefly.</p>",
        "id": 326671193,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675885440
    },
    {
        "content": "<p>Sorry, I think you are right that we're missing a <code>PNat</code> plugin for <code>norm_num</code>. I think once we have it this should be all that's needed for <code>interval_cases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.PNat.add_one_le_of_not_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">PNat.coe_lt_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.gt_of_not_le</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.PNat.le_sub_one_of_not_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">PNat.coe_le_coe</span><span class=\"o\">,</span> <span class=\"n\">PNat.sub_coe</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">((</span><span class=\"n\">PNat.one_le</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">h</span><span class=\"o\">))]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_sub_iff_add_le</span> <span class=\"n\">b.prop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">PNat.coe_lt_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A `Methods` implementation for `ℕ+`.</span>\n<span class=\"sd\">This tells `interval_cases` how to work on positive natural numbers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pnatMethods</span> <span class=\"o\">:</span> <span class=\"n\">Methods</span> <span class=\"n\">where</span>\n  <span class=\"n\">initLB</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PNat.one_le</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">NormNum.derive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)))</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRawIntEq.get</span><span class=\"bp\">!</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">proveLE</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">mkDecideProof</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">lhs</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n  <span class=\"n\">proveLT</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">mkDecideProof</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">¬$</span><span class=\"n\">rhs</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span><span class=\"o\">)</span>\n  <span class=\"n\">roundUp</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">¬$</span><span class=\"n\">rhs</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PNat.add_one_le_of_not_le</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">roundDown</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">¬$</span><span class=\"n\">rhs</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">lhs</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PNat.le_sub_one_of_not_le</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">mkNumeral</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n</code></pre></div>",
        "id": 326683000,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675889769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you give me a hint about how to include <code>PNat</code> handling in <code>norm_num</code> I would be happy to give it a shot.</p>",
        "id": 326685031,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675890436
    },
    {
        "content": "<p>it can't be done, at least not until pnat has numerals</p>",
        "id": 326685093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675890464
    },
    {
        "content": "<p>Sorry, what do you mean by \"numerals\"? We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOfNatPNatHAddNatInstHAddInstAddNatOfNat#doc\">docs4#instOfNatPNatHAddNatInstHAddInstAddNatOfNat</a></p>",
        "id": 326686082,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675890827
    },
    {
        "content": "<p>I see. Even then it is quite hard because pnat doesn't have an <code>AddMonoidWithOne</code> instance, which is required for norm_num</p>",
        "id": 326698274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675895690
    },
    {
        "content": "<p>the best alternative I can think of is to have norm_num extensions for things like <code>PNat.val (a + b)</code></p>",
        "id": 326698577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675895826
    },
    {
        "content": "<p>So for <code>interval_cases</code> we'll need to do something more like mathlib 3 then? I didn't see any special handling of <code>nat</code>, <code>int</code> or <code>pnat</code> there.</p>",
        "id": 326707553,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675900094
    },
    {
        "content": "<p><code>interval_cases</code> was completely rewritten for lean 4</p>",
        "id": 326710340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675901826
    },
    {
        "content": "<p>The old implementation is not good at all, it used <code>#reduce</code> instead of <code>norm_num</code></p>",
        "id": 326710449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675901887
    },
    {
        "content": "<p>The lean 3 version was super slow (and presumably this is why)</p>",
        "id": 326768048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675935591
    },
    {
        "content": "<p>Hey, so is <code>interval_cases</code> way faster on lean 4?</p>",
        "id": 336428020,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677230062
    },
    {
        "content": "<p>yes</p>",
        "id": 336438966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677233318
    }
]