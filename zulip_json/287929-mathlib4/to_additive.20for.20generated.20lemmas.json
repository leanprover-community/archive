[
    {
        "content": "<p>In porting Data.Finset.Pointwise (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1911\">!4#1911</a>), an innocuous <code>to_additive</code>attribute on the following theorem is throwing an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_npow</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">npowRec</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">npowRec._eq_1</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Finset.zero</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">npowRec</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><code>set_option trace.to_additive true</code> indeed reveals that <code>to_additive</code> generates a translation of the theorem that contains <code>npowRec._eq_1</code>, despite <code>npowRec</code> itself being marked with the <code>to_additive</code> attribute. I imagine ideally we'd like <code>to_additive</code> to also be inherited by the generated lemmas, right? Is this a bug? Could try to work out an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if necessary.</p>",
        "id": 324576835,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675076368
    },
    {
        "content": "<p>I'll investigate.</p>",
        "id": 324577328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675076516
    },
    {
        "content": "<p>This went deeper than I thought.<br>\nThis has to do with the fact that Lean doesn't generate equation lemmas for definitions eagerly anymore. Instead, it generates them when used (at most once per file, I think). However, I just realized that even if we do generate the equation lemmas eagerly, Lean doesn't use them, and just generates a new one anyway.</p>",
        "id": 324607422,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675085682
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Test1.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Command</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">nm</span> <span class=\"n\">true</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{d}\"</span> <span class=\"c1\">-- some ([_private.Mathlib.Test1.0.foo._eq_1])</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Test2.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Test1</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Command</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">nm</span> <span class=\"n\">true</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{d}\"</span> <span class=\"c1\">-- some ([_private.Mathlib.Test2.0.foo._eq_1])</span>\n</code></pre></div>",
        "id": 324607470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675085700
    },
    {
        "content": "<p>And <code>rw</code> uses <code>getEqnsFor?</code> to generate the equation lemmas. I'm confused that <code>simp</code> doesn't have the same behavior: I thought that <code>simp</code> uses the original equation lemma. Let me figure out if that is true. If so, maybe <code>rw</code> can use the same behavior as <code>simp</code>...</p>",
        "id": 324608168,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675085884
    },
    {
        "content": "<p>Or maybe it's possible to add all eagerly generated equation lemmas (i.e. in the same file as the original declaration) to the environment extension <code>eqnsExt</code>, so that they can be found again (that should also save of generating a bunch of equation lemmas many times).</p>",
        "id": 324608328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675085926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563290\">@Lukas Miaskiwskyi</span> this is going to be a nontrivial <code>to_additive</code> fix, or a core change. If you want to work-around this in the meantime: don't use <code>rw</code> on a definition. Instead, use something like <code>simp [npowRec]</code> or <code>rw [npowRec_zero]</code> (if that exists)</p>",
        "id": 324608547,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675085991
    },
    {
        "content": "<p>Very interesting as far as I understand it, thank you for looking into it! That workaround sounds doable.</p>",
        "id": 324609612,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675086304
    },
    {
        "content": "<p>Apparently the difference is that <code>rw</code> uses <code>getEqnsFor? declName (nonRec := true)</code> when rewriting with a definition, and <code>simp</code> uses <code>getEqnsFor?</code> with <code>nonRec</code> set to false. For non-recursive definitions this does nothing, and simp instead uses a separate list of declarations that should be unfolded, and unfolds them using <code>unfoldDefinition?</code></p>",
        "id": 324617616,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675088314
    },
    {
        "content": "<p>So I guess we need <code>to_additive</code> to generate the equation lemmas for the additive declarations on the fly (like <code>rw</code> does for the multiplicative declaration).</p>",
        "id": 324620161,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675088861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you have time: do you know if there is a reason for this distinction in the behaviors of <code>rw</code> and <code>simp</code>?</p>",
        "id": 324620166,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675088862
    },
    {
        "content": "<p>These lazily generated equation lemmas also cause issues for Aesop. I'm not sure how much sense this makes, but maybe equation lemmas could be added to the environment as 'lazy constants' with a specific name and type, but without a proof, and then the proof is computed once the constant is actually used?</p>",
        "id": 324620920,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675089024
    },
    {
        "content": "<p>Of course this would require substantial core changes, so probably not a near-term solution.</p>",
        "id": 324622059,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675089284
    },
    {
        "content": "<p>Is the laziness just for better performance here?</p>",
        "id": 324647212,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1675095072
    },
    {
        "content": "<p>The laziness is to avoid generating lots of useless and unused theorems in a programming project like lean core</p>",
        "id": 324720405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675095665
    },
    {
        "content": "<p>I think the most sensible way to control equation generation is with a <code>set_option</code>, so that we can enable it in proofy parts and disable it in meta parts</p>",
        "id": 324720710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675095728
    },
    {
        "content": "<p>It would still require a change in <code>getEqnsFor?</code>, because currently it will keep generating equation lemmas for <code>foo</code> in every file, even if you generated an equation lemma for <code>foo</code> when you defined it.</p>",
        "id": 324725962,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675097133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563290\">@Lukas Miaskiwskyi</span> the original problem can be solved in a similar way as we solve the lemmas that <code>simp</code> generated, so I pushed a fix in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1948\">!4#1948</a></p>",
        "id": 324727241,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675097465
    }
]