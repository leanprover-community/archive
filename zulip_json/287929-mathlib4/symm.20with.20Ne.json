[
    {
        "content": "<p>This seems not to work in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">symmetry</span> <span class=\"n\">lemmas</span> <span class=\"n\">only</span> <span class=\"n\">apply</span> <span class=\"n\">to</span> <span class=\"n\">binary</span> <span class=\"n\">relations</span><span class=\"o\">,</span> <span class=\"n\">not</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>It feels like it <em>should</em> work...</p>",
        "id": 344031472,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679588359
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib4/blob/1b8e1c63532fa93dcad032a58501cac042d94b56/Mathlib/Tactic/Relation/Symm.lean#L101\">implementation of <code>symm</code></a> uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.getType'#doc\">docs4#Lean.MVarId.getType'</a>, which uses <code>whnf</code> on the goal type. The definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ne#doc\">docs4#Ne</a> is marked reducible, so in the end <code>symm</code> is seeing <code>b = a → False</code>.</p>\n<p>I wonder if there are any cases where you really want to unfold definitions, or whether there should be a <code>withReducible</code> in front of <code>getType'</code>.</p>",
        "id": 344036755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679589420
    },
    {
        "content": "<p>Or maybe <code>symm</code> could be extended to handle also negations of symmetric binary relations?</p>",
        "id": 344037253,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1679589529
    },
    {
        "content": "<p>Perhaps, but that's not a complete solution here since <code>symm</code> would cause <code>b ≠ a</code> to become <code>a = b → False</code>.</p>",
        "id": 344039201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679590010
    }
]