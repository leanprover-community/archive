[
    {
        "content": "<p>I have somehow written a very slowly-failing <code>decreasing_tactic</code> extension, featuring a solve-by-elim call.  Does an expert (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?) have time to debug it for me?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Tactic</span> <span class=\"n\">SolveByElim</span>\n\n<span class=\"kd\">@[default_instance]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Int.natAbs</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"apply_decreasing_rules\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply_decreasing_rules</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Config.noBackTracking</span> <span class=\"k\">with</span> <span class=\"n\">failAtMaxDepth</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">solveByElim.processSyntax</span> <span class=\"n\">cfg</span> <span class=\"n\">false</span> <span class=\"n\">false</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">dummy_label_attr</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.sizeOf_lt_sizeOf_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination1a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination2a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination1b</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.sizeOf_lt_sizeOf_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">termination1a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination2b</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.sizeOf_lt_sizeOf_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">termination2a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n\n<span class=\"c1\">-- /-! # Fails-slowly version (uncomment only one of these) -/</span>\n\n<span class=\"c1\">-- attribute [dummy_label_attr] termination1a termination2a</span>\n\n<span class=\"c1\">-- macro_rules</span>\n<span class=\"c1\">-- | `(tactic| decreasing_tactic) =&gt; `(tactic| simp_wf ; (try rw [Int.sizeOf_lt_sizeOf_iff]) ; apply_decreasing_rules)</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Suceeds-quickly version (uncomment only one of these) -/</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">dummy_label_attr</span><span class=\"o\">]</span> <span class=\"n\">termination1b</span> <span class=\"n\">termination2b</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">decreasing_tactic</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp_wf</span> <span class=\"bp\">;</span> <span class=\"n\">apply_decreasing_rules</span><span class=\"o\">)</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Test -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">n</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">d</span> <span class=\"k\">then</span>\n    <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">n</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 342963236,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679243977
    },
    {
        "content": "<p>(Uncomment the \"Fails-slowly version\" for the problem, uncomment the \"Suceeds-quickly version\" for correct code that explains why I thought it should work.)</p>",
        "id": 342963373,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679244037
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Abs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination1a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">termination1a</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 342968271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679246751
    },
    {
        "content": "<p>Okay, I'll take a look. :-)</p>",
        "id": 342991507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679261798
    },
    {
        "content": "<p>Not <code>solve_by_elim</code>s fault: the problem is there just with <code>apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Abs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination1a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">termination1a</span> <span class=\"c1\">-- fails, but takes 16.5 seconds to do so</span>\n</code></pre></div>",
        "id": 342996156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679265567
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>one sees everything is taking alarmingly long.</p>",
        "id": 342996798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679265996
    },
    {
        "content": "<p>it's a bit hard to tell who the culprit is, although</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">145704</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>occurs many many times.</p>",
        "id": 342996844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679266024
    },
    {
        "content": "<p>Thank you both!  Partial further minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Int.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">LinearOrder.toLattice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·≤·</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·&lt;·</span><span class=\"o\">)</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Abs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Neg.toHasAbs</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Abs</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sup.sup</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">termination1a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Abs.abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Abs.abs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">termination1a</span> <span class=\"c1\">-- fails, but takes 44.3 seconds to do so</span>\n</code></pre></div>",
        "id": 343018271,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679283023
    },
    {
        "content": "<p>Mathlib-free, taking 49.9 seconds to fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Max.max</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Max.max</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 343020047,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679284376
    },
    {
        "content": "<p>Even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>is ridiculously slow.</p>",
        "id": 343051846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679300900
    },
    {
        "content": "<p>The \"main branch\" of the <code>isDefEq</code> trace looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">167012</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087260</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">079658</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.instLTInt.1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.instLTInt.1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">079602</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.lt</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.lt</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">085383</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">994142</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">412086</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">581948</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.instLEInt.1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.instLEInt.1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">581897</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.le</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.le</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">407221</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">174606</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">174537</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000031</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">415747</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">758657</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">instHSub.1</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">instHSub.1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">758614</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Sub.sub</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Sub.sub</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">409153</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">349361</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.instSubInt.1</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.instSubInt.1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">349338</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.sub</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.sub</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000014</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">410425</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">938839</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">649717</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">288936</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">instHAdd.1</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">instHAdd.1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">288893</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Add.add</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Add.add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000016</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int</span> <span class=\"bp\">=?=</span> <span class=\"n\">Nat</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">538192</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">750569</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.instAddInt.1</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.instAddInt.1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">750549</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.add</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">401068</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">349408</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">match</span> <span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n                                        <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                      <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">234129</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000013</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">=?=</span> <span class=\"n\">n</span> <span class=\"bp\">▶</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">115088</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n                                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000006</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">match</span> <span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n                                          <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n                                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000005</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">match</span> <span class=\"bp\">?</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n                                          <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.negSucc</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n              <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000006</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n              <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.NonNeg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 343053585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679301440
    },
    {
        "content": "<p>Note that over and over again we try (and fail) to solve <code>-(?d - ?d + 1) + 1 =?= -(-d - d + 1) + 1</code>.</p>",
        "id": 343053632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679301454
    },
    {
        "content": "<p>This looks like the same issue underlying <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a>: <a href=\"https://github.com/leanprover/lean4/blob/8650804b025c9e69cd7f491eeb1ba988e6969367/src/Lean/Meta/ExprDefEq.lean#L1133-L1136\">the heuristic</a> that tries to unify application arguments before resorting to unfolding the function can lead to exponential behavior without proper caching</p>",
        "id": 343064692,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679304795
    },
    {
        "content": "<p>If this is indeed solved by <a href=\"https://github.com/leanprover/lean4/pull/2152\">lean4#2152</a>, could this very example be added as a test to std4, to avoid future regressions?</p>",
        "id": 343072500,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1679306984
    },
    {
        "content": "<p>It still takes 5.5s on my machine using lean4 master, so the redundant work must be outside of typeclass synthesis in this case. Currently there is no caching of nested defeq problems.</p>",
        "id": 343075115,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679307615
    },
    {
        "content": "<p>Here is a reference to the identical problem in Coq, apparently unsolved: <a href=\"https://github.com/coq/coq/issues/2264#issuecomment-377633737\">https://github.com/coq/coq/issues/2264#issuecomment-377633737</a></p>",
        "id": 343113444,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679317518
    },
    {
        "content": "<p>That particular example fails quickly in Lean 3.  Would you expect that there do exist examples with this bad behaviour in Lean 3?  If so, why are the evil examples not the same between Lean 3 and Lean 4?</p>",
        "id": 343130788,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679321586
    },
    {
        "content": "<p>Is it also fast in Lean 4? <code>succ</code> is probably special-cased here by Lean, so this is not a representative example.</p>",
        "id": 343132492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679321957
    },
    {
        "content": "<p>Scott's example takes about 1s for me in Lean 3, so noticeably faster, probably because Lean 3 has a cache for mvar-free defeq problems, but the fundamental issue of exponential behavior should be the same</p>",
        "id": 343133174,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679322102
    },
    {
        "content": "<p>Do you have a sense for how critical this issue is? I'm assuming it affects mostly incomplete in-progress definitions, not committed code in mathlib</p>",
        "id": 343142891,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679324033
    },
    {
        "content": "<p>There is a useability issue to have things that mysteriously fail slowly, but I think the concern for mathlib would be how it affects tactics built on top of <code>apply_rules</code> or <code>solve_by_elim</code> or <code>aesop</code> which consist of throwing a family of lemmas at a goal.  That's how I encountered it.</p>",
        "id": 343143432,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679324134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[aesop safe]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[aesop unsafe 70%]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- 5.67 seconds to succeed</span>\n</code></pre></div>\n<p>(edit: more pointed example)</p>",
        "id": 343143451,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679324138
    },
    {
        "content": "<p>Are there particular classes of lemmas which we should avoid tagging for <code>aesop</code>/<code>continuity</code>/etc for this reason?</p>",
        "id": 343143768,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679324195
    },
    {
        "content": "<p>Very hard to say in general. It depends on how deeply nested the mismatch between the theorem and your goal is. So \"flatter\" theorems should generally be safer.</p>",
        "id": 343146568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679324783
    },
    {
        "content": "<p>Apart from heuristics and optimizations, a more fundamental solution would be to make sure none of these functions can be unfolded in the first place -- the code becomes instantaneous with <code>with_reducible(_and_instances)</code>. I don't know what the correct reducibility default for Aesop should be /cc <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>.</p>",
        "id": 343147507,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679324994
    },
    {
        "content": "<p>Probably it depends very much on the topic, with mathematicians being less reliant on reduction than computer scientists</p>",
        "id": 343147873,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679325072
    },
    {
        "content": "<p>We don't have a profiler metric for Aesop yet btw, do we?</p>",
        "id": 343148244,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679325150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Slowly-failing.20solve-by-elim.20call/near/343147873\">said</a>:</p>\n<blockquote>\n<p>Probably it depends very much on the topic, with mathematicians being less reliant on reduction than computer scientists</p>\n</blockquote>\n<p>One data point against that generalization, IIUC: I recently had a bug from trying to use <code>positivity</code> at reducible transparency, and <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.60positivity.60.3F/near/340245652\">Gabriel told me</a> that I could only expect that tactic to work at default transparency (so it can unfold instance arguments to get them to match).</p>",
        "id": 343156258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679326812
    },
    {
        "content": "<p>Hmm, I would have hoped that \"reducible and instances\" would be enough for that, but I don't know what declarations are involved</p>",
        "id": 343159010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679327405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Slowly-failing.20solve-by-elim.20call/near/343147507\">said</a>:</p>\n<blockquote>\n<p>Apart from heuristics and optimizations, a more fundamental solution would be to make sure none of these functions can be unfolded in the first place -- the code becomes instantaneous with <code>with_reducible(_and_instances)</code>. I don't know what the correct reducibility default for Aesop should be /cc <span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>.</p>\n</blockquote>\n<p>Also unclear to me. In principle I'm not opposed to what I would call the general Lean philosophy: perform reduction explicitly via <code>simp</code> and <code>reducible</code> is the transparency of choice. But I imagine the reality is much more messy. It would be interesting to do some experiments with stuff like this now that there is a decent collection of Aesop calls.</p>",
        "id": 343224562,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679345762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Slowly-failing.20solve-by-elim.20call/near/343148244\">said</a>:</p>\n<blockquote>\n<p>We don't have a profiler metric for Aesop yet btw, do we?</p>\n</blockquote>\n<p>Not that I know. Would be much appreciated of course!</p>",
        "id": 343224629,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679345781
    },
    {
        "content": "<p>You simply need to include a <code>profileitM</code> call :), see e.g. <a href=\"https://github.com/leanprover-community/mathlib4/blob/fc708bb9da8a15e1fd7666931f264738aca9f7c5/Mathlib/Tactic/NormNum/Core.lean#L521\">https://github.com/leanprover-community/mathlib4/blob/fc708bb9da8a15e1fd7666931f264738aca9f7c5/Mathlib/Tactic/NormNum/Core.lean#L521</a></p>",
        "id": 343310257,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679389470
    },
    {
        "content": "<p>Note though that any nested existing metrics such as \"typeclass inference\" will be subtracted from the Aesop metric. I'd like to have a better hierarchical model at some point.</p>",
        "id": 343310567,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679389554
    },
    {
        "content": "<p>Will do, thanks!</p>",
        "id": 343324240,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679393330
    }
]