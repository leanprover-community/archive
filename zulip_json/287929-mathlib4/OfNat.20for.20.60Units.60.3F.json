[
    {
        "content": "<p>I want to add an instance that will allow us to write <code>(n : Rˣ)</code> assuming <code>[Invertible (n : R)]</code>. Are there any objections?</p>",
        "id": 370497823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687969916
    },
    {
        "content": "<p>One related construction would be the one here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EqualCharZero.pnatCast#doc\">docs#EqualCharZero.pnatCast</a> </p>\n<p>I had to write a bunch of auxilary stuff to be able to write a function <code>x ↦ (x.num : R) /ₚ ↑x.pnatDen : ℚ → R</code>, so maybe your new instance would help simplify that, so that one could simply write <code>x ↦ (x.num : R) /ₚ ↑x.den : ℚ → R</code> after proving that in the setting of this file we always have such an <code>Invertible</code> instance <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 372227794,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1688460798
    },
    {
        "content": "<p>I was thinking about literals, not <code>cast</code>. Cast has to be a globally defined function.</p>",
        "id": 372329409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688480888
    }
]