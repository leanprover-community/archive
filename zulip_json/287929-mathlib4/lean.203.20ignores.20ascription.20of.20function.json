[
    {
        "content": "<p>I just encountered a weird error while porting that I thought was a mathport bug, but turned out to be something obscene in mathlib3/lean3:<br>\nIf you look <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/continuous_function/ordered.lean#L102-L105\">here</a>, you will see this declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup'_coe</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sup'</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sup'_apply</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which at first glance looks reasonable, until you notice that this is an equality between terms of type <code>β → γ</code>, and on the left-hand side the type ascription to <code>ι → β</code>. This is strange because, without any type ascription Lean complains, but you can even add the type ascription <code>ℕ → ℤ</code> to the left-hand side in place of <code>ι → β</code> and Lean is happy. What the <em>hell</em> is going on here?</p>\n<p>I think <em>maybe</em> I understand, which is that Lean does unification, figures out that the right-hand side is a bare function, coerces the left-hand side to a function without paying attention the precise types and proceeds happily. But without any type ascription, the unification path goes down a different way and gets stuck. But this is hellishly weird, and if that's not a bug, I don't know what is. (I'm not saying we should necessarily bother to fix it.)</p>",
        "id": 329509144,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677093117
    },
    {
        "content": "<p>I'm put this in the mathlib4 stream just so people porting might see this in case it comes up again, but if someone wants to move it to a different stream that's fine.</p>",
        "id": 329509310,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677093172
    },
    {
        "content": "<p>Lean 3 a bit more minimised:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 329512725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677094243
    },
    {
        "content": "<p>I would just PR the fix to the mathlib3 file I guess?</p>",
        "id": 329513160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677094374
    },
    {
        "content": "<p>It's not necessary, I've already ported the file.</p>",
        "id": 329514272,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677094704
    },
    {
        "content": "<p>Mainly I just wanted other people to be aware that this is a thing.</p>",
        "id": 329514397,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677094741
    },
    {
        "content": "<p>But actually your minimized example kind of wrecks my theory about what is going on.</p>",
        "id": 329514492,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677094779
    },
    {
        "content": "<p>I would guess this is a bug in C-land</p>",
        "id": 329576903,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677096521
    },
    {
        "content": "<p>Adding a type ascription maybe causes coe to fn to be inserted, but not with the type asked for?</p>",
        "id": 329579431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677097474
    },
    {
        "content": "<p>Adding a type ascription maybe causes coe to fn to be inserted, but not with the type asked for?</p>",
        "id": 329579500,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677097506
    },
    {
        "content": "<p>Well, what's <em>really</em> weird is that <code>_ → _</code> <em>doesn't</em> work.</p>",
        "id": 329579522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677097517
    },
    {
        "content": "<p>I believe that if you give the type ascription <code>_ → _</code>, Lean still respects the possibility that this is a dependent function (that the second <code>_</code> depends on the first one). Maybe that is related.</p>",
        "id": 329581879,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677098382
    },
    {
        "content": "<p>I opened it in Lean, and that seems to be the issue exactly.</p>",
        "id": 329582194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677098499
    }
]