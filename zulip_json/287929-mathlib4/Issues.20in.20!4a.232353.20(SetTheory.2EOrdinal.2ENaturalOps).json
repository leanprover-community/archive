[
    {
        "content": "<p>There are two big issues in this PR:</p>\n<p>1) Previously in Lean 3 one could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">ordinal.to_nat_ordinal</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">nat_ordinal</span> <span class=\"o\">:=</span> <span class=\"n\">order_iso.refl</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">nat_ordinal.to_ordinal</span> <span class=\"o\">:</span> <span class=\"n\">nat_ordinal</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">ordinal</span> <span class=\"o\">:=</span> <span class=\"n\">order_iso.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat_ordinal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat_ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">to_ordinal_to_nat_ordinal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat_ordinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.to_ordinal.to_nat_ordinal</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In Lean 4, the equivalent of the theorem generates errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"bp\">'</span><span class=\"n\">NatOrdinal.toOrdinal'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">argument</span> <span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">NatOrdinal</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">that</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">explicit</span> <span class=\"n\">or</span> <span class=\"n\">implicit</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">unique</span> <span class=\"n\">name</span>\n</code></pre></div>\n<p>If I'm following the error, Lean wants a named parameter, but I haven't been able to figure out how to create one that typechecks for OrderIso</p>\n<ol start=\"2\">\n<li>Lean 4 does not like <code>scoped[NaturalOps] infixl:65 \" ♯ \" =&gt; Ordinal.nadd</code>. Subsequent reference to <code>♯ </code> gives an <code>unexpected token</code> error</li>\n</ol>",
        "id": 328597406,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676687772
    },
    {
        "content": "<p>I think the problem is that Lean 4 doesn't recognize the order iso (or more generally any equiv) as a function when you are calling it with dot notation.</p>",
        "id": 328601954,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676691178
    },
    {
        "content": "<p>Ah, that's it</p>\n<p><code>Ordinal.toNatOrdinal (NatOrdinal.toOrdinal a) = a</code> works.</p>\n<p>Not pretty....</p>",
        "id": 328613700,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676701089
    },
    {
        "content": "<p>The fix for the second issue is <code>ooen NaturalOps</code></p>",
        "id": 328614136,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676701341
    }
]