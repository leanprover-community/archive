[
    {
        "content": "<p>I ported Logic.Function.Iterate, modulo two errors.  I will make MWEs of the errors if needed, but thought I would toss the output here wholesale in case they are particular gotchas that someone will immediately recognize.  One is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  Function.RightInverse.iterate\nwith errors\nstructural recursion cannot be used\n\nwell-founded recursion cannot be used, 'Function.RightInverse.iterate' does not take any (non-fixed) arguments\n</code></pre></div>\n<p>and the other is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>code generator does not support recursor 'Nat.rec' yet, consider using 'match ... with' and/or structural recursion\n</code></pre></div>",
        "id": 308473026,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667854976
    },
    {
        "content": "<p>The second one should be self-explanatory, just avoid <code>*.rec</code>.</p>",
        "id": 308480190,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857946
    },
    {
        "content": "<p>(This might be solved at some point in the future, but don't hold your breath.)</p>",
        "id": 308480219,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857966
    },
    {
        "content": "<p>The <code>RightInverse.iterate</code> is a change in how name resolution works in recursive calls:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RightInverse.iterate</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.iterate</span> <span class=\"c1\">-- refers to `RightInverse.iterate`</span>\n</code></pre></div>\n<p>while in Lean3 this referred to <code>left_inverse.iterate</code></p>",
        "id": 308480966,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667858285
    },
    {
        "content": "<p>In response to an error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>code generator does not support recursor 'Nat.rec' yet, consider using\n'match ... with' and/or structural recursion\n</code></pre></div>\n<p>Gabriel suggested<br>\n<span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/308480190\">said</a>:</p>\n<blockquote>\n<p>just avoid <code>*.rec</code>.</p>\n</blockquote>\n<p>I think I can avoid using <code>*.rec</code> in the proof, but the name of the lemma itself is <code>Iterate.rec</code>.  (See <a href=\"https://github.com/leanprover-community/mathlib3port/blob/6b8613f2d840e5fe39d283f8dd76ef0d11c92474/Mathbin/Logic/Function/Iterate.lean#L184\">the mathport version</a>).  So should the lemma itself be deleted?</p>",
        "id": 309413852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668312242
    },
    {
        "content": "<p>Another option if the compiler gives you trouble is to mark the lemma as <code>noncomputable</code></p>",
        "id": 309414334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668312841
    },
    {
        "content": "<p>The fact that the lemma is named <code>*.rec</code> doesn't matter that much. The issue is only that built-in recursors are not code-genned properly</p>",
        "id": 309414496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668312978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/309414334\">said</a>:</p>\n<blockquote>\n<p>Another option if the compiler gives you trouble is to mark the lemma as <code>noncomputable</code></p>\n</blockquote>\n<p>Thanks, this works!</p>",
        "id": 309414689,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668313242
    },
    {
        "content": "<p>If you can make it computable, by writing it as a recursive function instead, that is preferable since it will keep downstream things computable</p>",
        "id": 309414778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668313345
    },
    {
        "content": "<p>I don't know how to do that (my intuition for computability is poor), but anyone should feel free to push to the branch: it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/585\">mathlib4#585</a> and the declaration is <code>Iterate.rec</code>.</p>",
        "id": 309415362,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668314081
    },
    {
        "content": "<p>How about implementing <code>.rec</code> manually for some important types before built-in recursors are supported?</p>",
        "id": 320057252,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673172782
    },
    {
        "content": "<p>Also <code>to_additive</code> does not seem to support <code>match ... with</code>. It complains <code>code generator does not support recursor '*.brecOn' ...</code>.</p>",
        "id": 320057410,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673172902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/320057252\">said</a>:</p>\n<blockquote>\n<p>How about implementing <code>.rec</code> manually for some important types before built-in recursors are supported?</p>\n</blockquote>\n<p>Like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n</code></pre></div>",
        "id": 320080444,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673186775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/308480219\">said</a>:</p>\n<blockquote>\n<p>(This might be solved at some point in the future, but don't hold your breath.)</p>\n</blockquote>\n<p>Would it be easier to implement this in core than it is to change every use of <code>rec</code> to a match in the port?</p>",
        "id": 320093587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/320057410\">said</a>:</p>\n<blockquote>\n<p>Also <code>to_additive</code> does not seem to support <code>match ... with</code>. It complains <code>code generator does not support recursor '*.brecOn' ...</code>.</p>\n</blockquote>\n<p>Oh, that is a bug, and I'm not sure how easy it is to fix. As a workaround, explicitly write down the addivite definition as well (and then additivize the multiplicative one) (and include a porting note, mentioning the tracking issue I created: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1428\">mathlib4#1428</a>).</p>",
        "id": 320100830,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673198931
    },
    {
        "content": "<p>I'm having trouble understanding the <code>code generator does not support recursor …</code> problem:</p>\n<ul>\n<li>The way I thought I understood things, is that the recursor is what any inductive construction compiles down to, eventually: pattern matching uses brec or well-founded recursion, which in turn is defined in terms of a recursor, which is just the induction principle of the type.</li>\n<li>I also thought I understood that if you want to compile some code to something that you can run, it makes sense (for performance and probably simplicity of the generated assembler/bytecode) to instead drop the recursor and have \"unchecked\" recursive calls, which you know will behave well because the type is right.</li>\n</ul>\n<p>So, since lean4 is also meant to be used as a programming language and be efficient at it, I would guess the compiler checks that the code is correct by way of my first bullet, and makes it compute by way of the second, but \"it should be trivial\" to also translate calls of <code>rec</code> to dumb \"unchecked\" recursive calls, no?</p>",
        "id": 339074755,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677757327
    },
    {
        "content": "<p>Conceptually it's trivial, yes. The devs have indicated that they won't do it in the near future because they don't need it, but they would take a PR (though there seems to be a PR freeze atm, so this is probably not a good time).</p>",
        "id": 339078610,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677758276
    },
    {
        "content": "<p>Note that you can manually implement compiler support for the missing recursors; we do this for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.recC#doc\">docs4#List.recC</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.recC#doc\">docs4#Nat.recC</a></p>",
        "id": 339088592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677761195
    },
    {
        "content": "<p>is <code>csimp</code> some kind of a compiler hint?</p>",
        "id": 339091879,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762137
    },
    {
        "content": "<p>Actually, I'm still a bit confused:</p>\n<ul>\n<li>How does the lean kernel/elaborator ensure that a definition by pattern matching is well-defined? Is the kernel still <code>.rec</code> all the way down?</li>\n<li>As far as I understand, defining stuff without explicitly using <code>.rec</code> can sometimes lead to bad defeqs. How does it work around this?<br>\nAh, I guess having nice defeqs is solely a typechecking problem, which you don't care when compiling?</li>\n</ul>",
        "id": 339092715,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762337
    },
    {
        "content": "<p>Do you have a specific <code>rec</code> in mind?</p>",
        "id": 339094272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677762718
    },
    {
        "content": "<p>Yes, <code>csimp</code> says \"use this lemma to exchange a computation-unfriendly function with nice defeqs with this efficient / computable one\"</p>",
        "id": 339094449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677762770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/339094272\">said</a>:</p>\n<blockquote>\n<p>Do you have a specific <code>rec</code> in mind?</p>\n</blockquote>\n<p>Relative to my \"claim\" that not using <code>rec</code> can lead to bad defeqs? Well, I experienced a few such instances.</p>",
        "id": 339094629,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762831
    },
    {
        "content": "<p>No, I mean a case where the Lean3 code used <code>rec</code>, and during porting you were coerced into using something else?</p>",
        "id": 339094767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677762861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/339078610\">said</a>:</p>\n<blockquote>\n<p>Conceptually it's trivial, yes. The devs have indicated that they won't do it in the near future because they don't need it, but they would take a PR (though there seems to be a PR freeze atm, so this is probably not a good time).</p>\n</blockquote>\n<p>Note that <a href=\"https://github.com/leanprover/lean4/pull/2049\">lean4#2049</a> tracks the missing compiler support for <code>rec</code></p>",
        "id": 339094805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677762869
    },
    {
        "content": "<p>ah, yes, that's a problem I had with <code>PathCategory</code> (see thread).</p>",
        "id": 339094932,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762911
    },
    {
        "content": "<p>I just added <code>noncomputable</code></p>",
        "id": 339094953,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762919
    },
    {
        "content": "<p>You could instead define <code>Quiver.Path.recC</code></p>",
        "id": 339095048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677762956
    }
]