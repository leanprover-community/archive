[
    {
        "content": "<p>Sometimes I get <code>OfNat.ofNat 2</code> instead of <code>2</code> in the info view (failed to minimize so far). Does it mean that this <code>2</code> is different from a \"normal\" <code>2</code>?</p>",
        "id": 375582206,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689436488
    },
    {
        "content": "<p>I think this is actually <code>OfNat.ofNat (OfNat.ofNat &lt;a raw 2 literal&gt;)</code></p>",
        "id": 375586411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689437735
    },
    {
        "content": "<p>Whereas a normal 2 is <code>OfNat.ofNat &lt;a raw 2 literal&gt;</code></p>",
        "id": 375586557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689437763
    },
    {
        "content": "<p>How can I test this?</p>",
        "id": 375593234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689439739
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span>                <span class=\"c1\">-- 1 : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">))</span>  <span class=\"c1\">-- OfNat.ofNat 1 : ℕ</span>\n</code></pre></div>",
        "id": 375593354,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689439796
    },
    {
        "content": "<p>I mean test in the actual non-minimal example.</p>",
        "id": 375593563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689439865
    },
    {
        "content": "<p><code>set_option ? ?</code></p>",
        "id": 375593602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689439891
    },
    {
        "content": "<p>What's the tactic that makes it appear?</p>",
        "id": 375593619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689439897
    },
    {
        "content": "<p><code>simp</code></p>",
        "id": 375594509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689440232
    },
    {
        "content": "<p>But AFAIR (can test in an hour), <code>set_option pp.all true</code> doesn't show nested <code>OfNat.ofNat</code>.</p>",
        "id": 375594582,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689440259
    },
    {
        "content": "<p>Apparently <code>set_option pp.coercions false</code> should turn off hiding <code>OfNat.ofNat</code></p>",
        "id": 375596527,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689440896
    },
    {
        "content": "<p>Can you squeeze the simp to find the bad lemma?</p>",
        "id": 375596621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689440927
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover/lean4/blob/d37bbf4292c72798afdff8bf5488df09193fde58/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L600\">source code</a> is consistent with only the innermost <code>OfNat.ofNat</code> being hidden if they're nested.</p>",
        "id": 375596749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689440968
    },
    {
        "content": "<p>Does the pretty-printer distinguish raw literals (which should never appear) from \"regular\" literals?</p>",
        "id": 375597153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689441101
    },
    {
        "content": "<p>No, raw literals get printed in the same way: <a href=\"https://github.com/leanprover/lean4/blob/d37bbf4292c72798afdff8bf5488df09193fde58/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L592\">https://github.com/leanprover/lean4/blob/d37bbf4292c72798afdff8bf5488df09193fde58/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L592</a></p>",
        "id": 375598018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689441380
    },
    {
        "content": "<p>The only difference would be what you see when you hover over it in the infoview (is it just a nat? or does it have an <code>OfNat.ofNat</code>?)</p>",
        "id": 375598104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689441408
    },
    {
        "content": "<p>With <code>pp.coercions false</code>, it's just a usual <code>OfNat.ofNat 2</code>, not <code>OfNat.ofNat (OfNat.ofNat 2)</code>.</p>",
        "id": 375608322,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689445192
    },
    {
        "content": "<p>The (very non-minimal) example is at the end of <code>Mathlib/Geometry/Euclidean/Inversion/Calculus.lean</code> in <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-inversion-fderiv\">branch#YK-inversion-fderiv</a></p>",
        "id": 375608471,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689445265
    },
    {
        "content": "<p>Here's a little delaborator to help debug this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[delab lit]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabLit</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">natVal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It prints natural number literals as <code>nat_lit 37</code> for example</p>",
        "id": 375612804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689447361
    },
    {
        "content": "<p>I see what the issue is though: the <code>OfNat.ofNat</code> delaborator doesn't expect numbers to be functions, and in your example the number is a function that's being applied to an argument</p>",
        "id": 375612940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689447423
    },
    {
        "content": "<p>So there's not really anything wrong with the expression, it's just not pretty printing right</p>",
        "id": 375612961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689447446
    },
    {
        "content": "<p>Here's the offending expression: <code>OfNat.ofNat 2 y</code></p>",
        "id": 375613085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689447505
    },
    {
        "content": "<p>The easiest way to determine whether you are looking at a double ofNat vs a single ofNat or a raw numeral is to hover over the expression in the infoview. Hovering over raw numeral <code>2</code> shows <code>2</code> in the hover, and hovering over a <code>2</code> ofNat expression shows <code>ofNat 2 ...</code> in the hover</p>",
        "id": 375621667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689452254
    },
    {
        "content": "<p>it would be nice if raw numerals were printed as <code>nat_lit 2</code></p>",
        "id": 375621753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689452306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfNat.2EofNat.20visible/near/375598104\">said</a>:</p>\n<blockquote>\n<p>The only difference would be what you see when you hover over it in the infoview (is it just a nat? or does it have an <code>OfNat.ofNat</code>?)</p>\n</blockquote>\n<p>Yeah, I was doing that but wanted to be sure nothing weird was going on (and I got tired of hovering over all the numbers in the goal state), before I noticed the <code>y</code> argument</p>",
        "id": 375622382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689452654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfNat.2EofNat.20visible/near/375621753\">said</a>:</p>\n<blockquote>\n<p>it would be nice if raw numerals were printed as <code>nat_lit 2</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/d37bbf4292c72798afdff8bf5488df09193fde58/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L596\">This line</a> would just need to be <code>| Literal.natVal n =&gt; `(nat_lit $(quote n))</code>. Should that be behind a <code>pp.nat_lit</code> option?</p>",
        "id": 375622593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689452806
    },
    {
        "content": "<p>Wouldn't that break the delaboration of <code>ofNat (nat_lit 2)</code> to print as <code>nat_lit 2</code>?</p>",
        "id": 375623436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689453359
    },
    {
        "content": "<p>No, <code>OfNat.ofNat</code> isn't implemented as an <code>app_unexpander</code>, but as a delaborator</p>",
        "id": 375623793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689453588
    },
    {
        "content": "<p>I linked the source code, but I'll paste it here. It does a pattern match on the <code>Expr</code>. Delaborators go outside-in and, for applications, app unexpanders go inside-out. This runs before the <code>lit</code> delaborator or the <code>app</code> delaborator.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtin_delab app.OfNat.ofNat]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabOfNat</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">getPPCoercions</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">natVal</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">quote</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 375624086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689453747
    }
]