[
    {
        "content": "<p>I ran into some issues in porting this file. It seems like the definition of <code>SemiNormedGroup‚ÇÅ</code> now allows morphisms to be norm-non-increasing up to a constant, while the description says that morphisms should be norm-non-increasing. This also makes a theorem at the end of the file fail. <br>\nIt might be good for someone experienced with this file to take a look <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <br>\nThis is also my first time porting, so please excuse the probably numerous blunders...<br>\nPR here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4047\">https://github.com/leanprover-community/mathlib4/pull/4047</a></p>",
        "id": 359859680,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684579756
    },
    {
        "content": "<p>Porting from mathlib3 to mathlib4 shouldn't result in a true statement becoming false. By \"now allows\", are you comparing mathlib3 with mathlib4, or code with docs?</p>",
        "id": 359860855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684580143
    },
    {
        "content": "<p>I've commented on the problem; you should be _very_ wary of changing <code>def</code>s and <code>instances</code> when porting, as doing so can change whether later results are true</p>",
        "id": 359861313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684580274
    },
    {
        "content": "<p>Ah great, thanks! Yeah, now it makes sense. I'll roll it back to there and try again.</p>",
        "id": 359867751,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684581721
    },
    {
        "content": "<p>There seems to be a missing coercion from  Homs in<code>SemiNormedGroup‚ÇÅ</code> to <code>NormedAddGroupHom</code>  which is needed in this Lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- If `coe_fn_coe_base` fires before `coe_comp`, `coe_comp'` puts us back in normal form.</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_comp'</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddGroupHom</span> <span class=\"n\">M</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">NormedAddGroupHom</span> <span class=\"n\">N</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">‚Üë</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">SemiNormedGroup‚ÇÅ.coe_comp'</span> <span class=\"n\">SemiNormedGroup‚ÇÅ.coe_comp'</span>\n</code></pre></div>\n<p>Should this coercion be added manually, and if so as what type of instance?</p>",
        "id": 359909932,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684594510
    },
    {
        "content": "<p>This is another result that doesn't work anymore due to missing coercions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_id</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This gives the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"mi\">ùüô</span> <span class=\"n\">V</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">V</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.11927</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">‚Üë</span><span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚Üë</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.11893</span>\n</code></pre></div>\n<p>unless I manually add a <code>CoeFun</code> instance before (which I now believe one shouldn't do?).</p>",
        "id": 359940179,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684606747
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemiNormedGroup#doc\">docs4#SemiNormedGroup</a></p>",
        "id": 359954286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684614341
    },
    {
        "content": "<p>lololol<br>\n<a href=\"/user_uploads/3121/hEigZoXn0I7st1apGXBcsSWy/instance.png\">instance.png</a><br>\nSurely someone should actually do something about this?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hEigZoXn0I7st1apGXBcsSWy/instance.png\" title=\"instance.png\"><img src=\"/user_uploads/3121/hEigZoXn0I7st1apGXBcsSWy/instance.png\"></a></div>",
        "id": 359954444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684614426
    },
    {
        "content": "<p>I assume asking <span class=\"user-mention silent\" data-user-id=\"395550\">Henrik B√∂ving</span> to make this display nicely would be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem!</p>",
        "id": 359960378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684618212
    },
    {
        "content": "<p>I started a new thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> <a href=\"#narrow/stream/270676-lean4/topic/ridiculous.20instance.20names\">here</a> , I don't want to derail this one.</p>",
        "id": 359960450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684618262
    }
]