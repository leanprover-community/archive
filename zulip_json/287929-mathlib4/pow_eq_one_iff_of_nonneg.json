[
    {
        "content": "<p>Do we really not have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Order</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_eq_one_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">((</span><span class=\"n\">pow_le_one_iff_of_nonneg</span> <span class=\"n\">hx</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h.le</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"n\">one_le_pow_iff_of_nonneg</span> <span class=\"n\">hx</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h.ge</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_pow</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 401604737,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699787472
    },
    {
        "content": "<p>Nope. Missing. The lemmas around this are a real mess. I currently have a gitpod open fixing a few lemma names and it touches &gt; 150 files.</p>",
        "id": 401605341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788029
    },
    {
        "content": "<p>Wold you like to include adding this to your future PR?</p>",
        "id": 401605378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699788077
    },
    {
        "content": "<p>Sure. I'll dump it in LeanCamCombi and it will get PRed in due course.</p>",
        "id": 401605492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788162
    },
    {
        "content": "<p>Since I needed it, I added that in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8449\">#8449</a> .</p>",
        "id": 402866198,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700306192
    }
]