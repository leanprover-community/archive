[
    {
        "content": "<p>Should <code>@[continuity, to_additive]</code> be <code>@[to_additive (attr := continuity)]</code> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.smul?#doc\">docs4#Continuous.smul?</a></p>",
        "id": 327494393,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676278366
    },
    {
        "content": "<p>The first one does not copy the attribute? Then it should be the second one.</p>",
        "id": 327496254,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676279017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2252\">!4#2252</a></p>",
        "id": 327501747,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676280789
    },
    {
        "content": "<p>Yes.<br>\nAll occurrences of <code>@[&lt;attr&gt;, to_additive]</code> and <code>@[to_additive, simps]</code> in mathlib4 should have an explicit comment/porting note that we don't want to copy the attribute. Without such a comment, it's safe to assume it was a porting mistake.</p>",
        "id": 327604966,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309508
    },
    {
        "content": "<p><code>@[to_additive, &lt;attr&gt;]</code> is suspicious, but at least it is the case that neither Lean 3 nor Lean 4 copied the attribute (when <code>&lt;attr&gt; != simps</code>)</p>",
        "id": 327605178,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309563
    },
    {
        "content": "<p>Isn't there a linter that checks for this?</p>",
        "id": 327605179,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676309563
    },
    {
        "content": "<p>Only partially, for some common attributes. There is no functionality in Lean 4 to return all attributes associated to declaration <code>foo</code>.</p>",
        "id": 327605339,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676309609
    },
    {
        "content": "<p>Is that because it's impossible to write something like that given the extensibility of attributes?</p>",
        "id": 327606713,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676309988
    },
    {
        "content": "<p>I don't think it's impossible to write something like that, but it doesn't currently exist. And it is indeed tricky what API you exactly want given all the different types of attributes we have.</p>",
        "id": 327608056,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676310401
    },
    {
        "content": "<p>Also, the linter is not actually a linter yet, it just prints some info messages. This is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1819\">!4#1819</a>, which is awaiting review for 3 weeks.</p>",
        "id": 327625020,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676315487
    },
    {
        "content": "<p>I would be happy to, but I don't think I understand enough to review it well.</p>",
        "id": 327628950,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676316609
    }
]