[
    {
        "content": "<p>These are the changes: <a href=\"https://github.com/leanprover-community/mathlib4/compare/6d86a6ac7aa6eae79181b6bae1fca53be16d2379..090a8a08255671e5d06f2b22131421871f2b373f\">https://github.com/leanprover-community/mathlib4/compare/6d86a6ac7aa6eae79181b6bae1fca53be16d2379..090a8a08255671e5d06f2b22131421871f2b373f</a></p>",
        "id": 321269913,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673648958
    },
    {
        "content": "<p>Not yet sure what's going on here.  After the update mathport takes about two hours and fails in <code>data.polynomial.mirror</code> <a href=\"https://github.com/leanprover-community/mathport/actions/runs/3913731949/jobs/6689971655\">https://github.com/leanprover-community/mathport/actions/runs/3913731949/jobs/6689971655</a></p>",
        "id": 321270108,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673649045
    },
    {
        "content": "<p>Are we sure this is due to mathlib4 and not mathlib3?</p>",
        "id": 321270327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673649135
    },
    {
        "content": "<p>We update mathlib4 12x more frequently than mathlib3.  There was no mathlib3 update between the succeeding and failing mathport runs.</p>",
        "id": 321270404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673649182
    },
    {
        "content": "<p>Looks like checking the definition in the kernel takes forever.  Unfortunately we can't set a timeout, because the timeout is reported as an uncatchable C++ exception.  <a href=\"https://github.com/leanprover/lean4/pull/2036\">https://github.com/leanprover/lean4/pull/2036</a></p>",
        "id": 321295828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673666763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Is there anything that stands out to you?</p>",
        "id": 321297293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673668363
    },
    {
        "content": "<p>I wouldn't know where to start looking for an issue. Is it worth bisecting the failure, to see which of these files exactly is causing a problem?</p>",
        "id": 321297386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673668493
    },
    {
        "content": "<p>With the dubious translations, I expect this failure mode to occur again sooner or later.</p>",
        "id": 321297486,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673668597
    },
    {
        "content": "<p>Aha, so you think it might be an issue of a missing <code>â‚“</code>?</p>",
        "id": 321297591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673668710
    },
    {
        "content": "<p>How was this resolved last time? It seems to be happening again.</p>\n<p>The mathport CI is <a href=\"https://github.com/leanprover-community/mathport/actions/runs/4167315722/jobs/7212755144#step:11:1729\">giving the error</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">port</span> <span class=\"o\">{</span> <span class=\"n\">package</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathbin\"</span><span class=\"o\">,</span> <span class=\"n\">mod3</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">ring_theory.subring.basic</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(edit: filed as <a href=\"https://github.com/leanprover-community/mathport/issues/228\">https://github.com/leanprover-community/mathport/issues/228</a> to link things on github)</p>",
        "id": 327661706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676329006
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/actions/runs/4152515984\">this run</a> seems to be the first one to have failed.</p>",
        "id": 327661896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676329085
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/1945\">!4#1945</a> was the change that broke it, based on the timing and <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/subring/basic\">https://leanprover-community.github.io/mathlib-port-status/file/ring_theory/subring/basic</a></p>",
        "id": 327662265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676329237
    },
    {
        "content": "<p>These are the last few lines in the output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[apply] &lt;decl:subring.gi&gt;\n[addDecl] START REFINE ring_theory.subring.basic subring.gi\n[refineDef] Subring.gi\n[translateName] subring.gi -&gt; Subring.gi\n[addDecl] FOUND DUBIOUS ring_theory.subring.basic Subring.gi\n[apply] position subring.gi\n[apply] protected\n[apply] &lt;decl:subring.gi.equations._eqn_1&gt;\n[addDecl] START REFINE ring_theory.subring.basic subring.gi.equations._eqn_1\n[refineThm] Subring.gi.equations._eqn_1\n[translateName] subring.gi.equations._eqn_1 -&gt; Subring.gi.equations._eqn_1\n[addDecl] START CHECK  ring_theory.subring.basic Subring.gi.equations._eqn_1\n[kernel] skipping proof of theorem\n[addDecl] stubbing value of Subring.gi.equations._eqn_1\n[addDecl] stubbing type of Subring.gi.equations._eqn_1\n[addDecl] END CHECK    ring_theory.subring.basic Subring.gi.equations._eqn_1\n[apply] position subring.gi.equations._eqn_1\n[apply] &lt;decl:subring.closure_eq&gt;\n[addDecl] START REFINE ring_theory.subring.basic subring.closure_eq\n[refineThm] Subring.closure_eq\n</code></pre></div>",
        "id": 327857159,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676402969
    },
    {
        "content": "<p>And a stacktrace:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>#115 0x000000000377609d in lean::type_checker::lazy_delta_reduction_step(lean::expr&amp;, lean::expr&amp;) ()\n#116 0x0000000003776d2b in lean::type_checker::lazy_delta_reduction(lean::expr&amp;, lean::expr&amp;) ()\n#117 0x0000000003776919 in lean::type_checker::is_def_eq_core(lean::expr const&amp;, lean::expr const&amp;) ()\n#118 0x0000000003776ac0 in lean::type_checker::is_def_eq_core(lean::expr const&amp;, lean::expr const&amp;) ()\n#119 0x0000000003775006 in lean::type_checker::is_def_eq_app(lean::expr const&amp;, lean::expr const&amp;) ()\n#120 0x0000000003776aee in lean::type_checker::is_def_eq_core(lean::expr const&amp;, lean::expr const&amp;) ()\n#121 0x0000000003774117 in lean::type_checker::is_def_eq_binding(lean::expr, lean::expr) ()\n#122 0x0000000003774458 in lean::type_checker::quick_is_def_eq(lean::expr const&amp;, lean::expr const&amp;, bool) ()\n#123 0x00000000037767d6 in lean::type_checker::is_def_eq_core(lean::expr const&amp;, lean::expr const&amp;) ()\n#124 0x00000000037792d8 in std::__1::__function::__func&lt;lean_kernel_is_def_eq::$_4, std::__1::allocator&lt;lean_kernel_is_def_eq::$_4&gt;, lean_object* ()&gt;::operator()() ()\n#125 0x000000000377b764 in lean_object* lean::catch_kernel_exceptions&lt;lean_object*&gt;(std::__1::function&lt;lean_object* ()&gt; const&amp;) ()\n#126 0x0000000003777f82 in lean_kernel_is_def_eq ()\n#127 0x00000000011fd3f0 in l_Mathport_Binary_refineLean4Names_isDefEqUpto___lambda__1 ()\n#128 0x00000000011fd9e4 in l_Mathport_Binary_refineLean4Names_isDefEqUpto ()\n#129 0x0000000001201f85 in l_Mathport_Binary_refineLean4Names_refineThm ()\n#130 0x0000000001214f6b in l_Mathport_Binary_refineLean4NamesAndUpdateMap ()\n#131 0x00000000015681f8 in l_Mathport_Binary_refineAddDecl ()\n#132 0x000000000158287f in l_Mathport_Binary_applyTheoremVal ()\n#133 0x00000000015bfeef in l_Array_forInUnsafe_loop___at_Mathport_binport1___spec__1 ()\n#134 0x00000000015c0975 in l_Mathport_binport1 ()\n</code></pre></div>",
        "id": 327857303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676403008
    },
    {
        "content": "<p>i.e., an effectively infinite loop in the kernel defeq function</p>",
        "id": 327857409,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676403056
    },
    {
        "content": "<p>While parsing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subring.closure_eq#doc\">docs4#Subring.closure_eq</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.closure_eq\">docs#subring.closure_eq</a>, right?</p>",
        "id": 327858508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403413
    },
    {
        "content": "<p>Yes.</p>",
        "id": 327862551,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676404682
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/commit/b515f2fb449110ef1010041691f43437c05ebd34\">https://github.com/leanprover-community/mathport/commit/b515f2fb449110ef1010041691f43437c05ebd34</a></p>",
        "id": 327862628,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676404696
    }
]