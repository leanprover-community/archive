[
    {
        "content": "<p>Some weirdness in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2960\">!4#2960</a>; this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">SMatrix</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">SMatrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M.elem</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">N.elem</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>but this doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Matrix</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.ext</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"c1\">-- doesn't work</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>  <span class=\"c1\">-- `j` wasn't introd!</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 342651528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679081830
    },
    {
        "content": "<p>Presumably <code>ext</code> is getting confused because <code>Matrix</code> is defeq to the type of functions</p>",
        "id": 342651743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679081900
    },
    {
        "content": "<p>But it feels like a bug, since even on functions it would intro both variable!</p>",
        "id": 342651817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679081926
    },
    {
        "content": "<p>This is merely a hack, but it might illustrate well what's wrong with <code>ext</code>: If you change the <code>ext</code>-Lemma so that it only<br>\nintroduces one variable then it works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Matrix</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Matrix.ext'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- does work!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>  <span class=\"c1\">-- now `j` is introduced as well</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 343983019,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1679578934
    },
    {
        "content": "<p>I think what's happening is the following:</p>\n<ol>\n<li>Using <code>Matrix.ext</code> the tactic turns <code>M = N</code> into <code>∀ i j, M i j = N i j</code></li>\n<li>In <code>TryIntros</code> (see source, <a href=\"https://github.com/leanprover/std4/blob/a63a023a081ef3471a7903ce8d5f0884375223a8/Std/Tactic/Ext.lean#L116-L119\">Std/Tactic/Ext.lean, l.116-119</a>) in the case <code>| p::ps =&gt;</code> it only introduces the first variable and then tries to apply the next <code>ext</code>-lemma to <code>∀ j, M i j = N i j</code> which fails as that's not an equality. (note: <code>p</code> is the first name and <code>ps</code> is the list of all further names, <code>[j]</code> in this case.)</li>\n</ol>\n<p>I'm not quite confident enough to fix this myself, but I'd hope with that any meta-programmer would be able to help <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 343983032,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1679578937
    },
    {
        "content": "<p>I think it's more complicated than that, because it works fine above for <code>SMatrix</code>, the structure</p>",
        "id": 343983225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679578974
    },
    {
        "content": "<p>So it's something to do with the fact that <code>Matrix</code> is being confused for a function type somewhere within ext</p>",
        "id": 343983308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679578991
    },
    {
        "content": "<p>That is probably true. I still think the above might not quite be the expected behaviour of <code>ext</code>. The following fails as well because the <code>bad_ext_lemma</code> introducing two variables at once takes priority over the correct <code>ext</code>-Lemma for functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">@[ext 1001]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bad_ext_lemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"c1\">-- fails to introduce `j` if priority of the `bad_ext_lemma` is `&gt; 1000`.</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"c1\">-- but it works if the variables are not given names</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 343987089,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1679579888
    },
    {
        "content": "<p>I realised my suggestion would be a quite simple change: <a href=\"https://github.com/leanprover/std4/pull/111\">std4#111</a> . We can discuss over there if it makes sense at all or not.</p>",
        "id": 343997092,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1679581833
    },
    {
        "content": "<p>I think the <code>isForall</code> test might be to blame</p>",
        "id": 344005912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679583461
    },
    {
        "content": "<p>And that its misfiring on matrices</p>",
        "id": 344005973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679583475
    },
    {
        "content": "<p>I'm not convinced that allowing custom ext lemmas on functions is really sensible</p>",
        "id": 344006072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679583489
    }
]