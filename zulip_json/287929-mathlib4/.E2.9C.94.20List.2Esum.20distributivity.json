[
    {
        "content": "<p>Is there a code for something like it or similar?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_list_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 349344157,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1681471559
    },
    {
        "content": "<p>Does <code>library_search</code> find it?</p>",
        "id": 349344582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681471633
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.sum_map_mul_left#doc\">docs4#List.sum_map_mul_left</a></p>",
        "id": 349344601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681471637
    },
    {
        "content": "<p>It does not.</p>",
        "id": 349344731,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1681471655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 349345716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681471831
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> regarding <code>library_search</code> failure</p>",
        "id": 349346024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681471883
    },
    {
        "content": "<p>In the meantime, you can always library_search in Lean3 first :)</p>",
        "id": 349346067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681471894
    },
    {
        "content": "<p>It's not an exact match, right?</p>",
        "id": 349346183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681471910
    },
    {
        "content": "<p>Ah, good point</p>",
        "id": 349355939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681473689
    },
    {
        "content": "<p>Arguably the simpler lemma without the extra <code>map</code> in it should be in the library?</p>",
        "id": 350051685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681508808
    },
    {
        "content": "<p>The existing lemma already matches in the forward direction, inferring <code>f = id</code></p>",
        "id": 350054691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681510322
    },
    {
        "content": "<p>Note it's not simp, presumably for the same reason that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_add\">docs#mul_add</a> isn't</p>",
        "id": 350054752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681510364
    },
    {
        "content": "<p>Ah, but it doesn't match for <code>library_search</code>. :-)</p>",
        "id": 350070007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681518454
    }
]