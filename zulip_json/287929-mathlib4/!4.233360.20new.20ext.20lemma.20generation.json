[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3360\">!4#3360</a> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">NonemptyInterval</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst_le_snd</span> <span class=\"o\">:</span> <span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">snd</span>\n</code></pre></div>\n<p>The generated ext-lemma looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">NonemptyInterval.ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyInterval</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">x.toProd.fst</span> <span class=\"bp\">=</span> <span class=\"n\">y.toProd.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">x.toProd.snd</span> <span class=\"bp\">=</span> <span class=\"n\">y.toProd.snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>while translating the mathlib3 version one-to-one, it would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">NonemptyInterval.ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyInterval</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.toProd</span> <span class=\"bp\">=</span> <span class=\"n\">y.toProd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and there was another Lemma <code>Prod.ext</code> so that using the tactic <code>ext</code> it would chain the two and using <code>ext1</code> it would only do one step.</p>\n<p>This change seems to come from the use of <code>getStructureFieldsFlattened</code> instead of <code>getStructureFields</code> in <code>WithExtHyps</code>. Is this the desired way <code>ext</code> works now? It seems to me that <code>ext1</code> becomes a bit less useful that way.</p>",
        "id": 351102875,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1681922769
    },
    {
        "content": "<p>I think this behavior is an effort to make the generated ext lemma not depend on the order of the base classes</p>",
        "id": 351104097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923083
    },
    {
        "content": "<p>That is, it emulates what <code>ext</code> would do to old-style structures in Lean 3</p>",
        "id": 351104164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923101
    },
    {
        "content": "<p>Unfortunately, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty_interval\">docs#nonempty_interval</a> was a new-style structure, so this is a behavior change,</p>",
        "id": 351104254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923123
    },
    {
        "content": "<p>A reasonable compromise would be to have <code>@[ext (flat := ff)]</code> to recover the old new-style structure behavior</p>",
        "id": 351104478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923187
    },
    {
        "content": "<p>I see, thanks for the explanation!</p>",
        "id": 351111379,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1681924977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233360.20new.20ext.20lemma.20generation/near/351104478\">said</a>:</p>\n<blockquote>\n<p>A reasonable compromise would be to have <code>@[ext (flat := ff)]</code> to recover the old new-style structure behavior</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you think <a href=\"https://github.com/leanprover/std4/pull/122\">std4#122</a> would be reasonable? It introduces an option <code>tactic.ext.flatten</code> that toggles this behaviour, with<br>\ndefault being the current state (i.e. flatten structures)</p>",
        "id": 351670069,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682092328
    },
    {
        "content": "<p>I think a bit of syntax on the attribute makes more sense than an option. I don't like options that change the semantics of tactics / commands (as opposed to just turning off generation of things or affecting presentation)</p>",
        "id": 351672544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682092963
    },
    {
        "content": "<p>Also I would prefer for lean 4 docs not to talk about \"old-style structures\" in favor of things like \"fields are flattened\"</p>",
        "id": 351673156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682093101
    },
    {
        "content": "<p>Thanks for the comment, that makes sense. I'll change both of it quickly <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 351673745,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682093232
    }
]