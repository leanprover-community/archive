[
    {
        "content": "<p>I have a <code>simp</code> that timeouts with \"maximum recursion depth has been reached\". How do I debug/trace which lemmas does it apply? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 327838597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676397418
    },
    {
        "content": "<p>I tried some random <code>set_option trace.Compiler.simp.* true</code>, didn't work.</p>",
        "id": 327839012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676397544
    },
    {
        "content": "<p>I'm talking about <a href=\"https://github.com/leanprover-community/mathlib4/pull/2270\">!4#2270</a></p>",
        "id": 327852268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676401383
    },
    {
        "content": "<p>Probably, I introduced a <code>simp</code> cycle somewhere (why we don't see it elsewhere?)</p>",
        "id": 327852420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676401423
    },
    {
        "content": "<p>I think you want one or both of these instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 327852642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676401480
    },
    {
        "content": "<p>Thanks! I found a cycle. Not sure if I have time to break it now.</p>",
        "id": 327853095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676401615
    },
    {
        "content": "<p>The cycle is between <code>MulHom.coe_mk</code> and <code>MulHom.toFun_eq_coe</code>. It appears when it is applied to a <code>MulHom</code> which is reducibly equal to <code>MulHom.mk _ _</code>.</p>",
        "id": 327853611,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676401779
    },
    {
        "content": "<p>(in this case, it is <code>MulEquiv.toMulHom _</code>)</p>",
        "id": 327853667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676401797
    },
    {
        "content": "<p>Why does <code>MulHom.coe_mk</code> simplify <code>(e.toMulHom : _ → _)</code> to <code>e.toMulHom.toFun</code>, not to <code>e.toEquiv.toFun</code>?</p>",
        "id": 327854839,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676402131
    },
    {
        "content": "<p><code>MulEquiv.toMulHom</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">MulEquiv.toMulHom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">self</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">self.toEquiv.toFun</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">Equiv.toFun</span> <span class=\"n\">self.toEquiv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Equiv.toFun</span> <span class=\"n\">self.toEquiv</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">Equiv.toFun</span> <span class=\"n\">self.toEquiv</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 327854997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676402181
    },
    {
        "content": "<p>And <code>MulHom.coe_mk</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := simp)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MulHom.coe_mk</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MulHom.mk</span> <span class=\"n\">f</span> <span class=\"n\">hmul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">mul_hom.coe_mk</span> <span class=\"n\">MulHom.coe_mk</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">add_hom.coe_mk</span> <span class=\"n\">AddHom.coe_mk</span>\n</code></pre></div>",
        "id": 327855078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676402214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 327856832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676402864
    }
]