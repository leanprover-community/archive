[
    {
        "content": "<p>I was experimenting with how far one could simp NNG away (starting at 1 just for fun). The last <code>simp_all</code> takes over 4 seconds on my machine with mathlib imported, and 0.2 seconds without it. I know it's not an appropriate goal for <code>simp_all</code> but when I look at the logs with mathlib imported they are really wild, talking about advanced stuff which is absolutely nothing to do with anything. Is this expected? Have I just committed too much <code>simp</code> abuse for some reason? Sample trace output then mathlib code:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>...\n          [Meta.Tactic.simp.unify] @HilbertBasis.coe_mk:1000, failed to unify\n                fun i =&gt; ↑(LinearIsometryEquiv.symm (HilbertBasis.mk ?hv ?hsp).repr) (lp.single 2 i 1)\n              with\n                k * b = c * k → b = c\n          [Meta.Tactic.simp.unify] @HilbertBasis.coe_mkOfOrthogonalEqBot:1000, failed to unify\n                fun i =&gt; ↑(LinearIsometryEquiv.symm (HilbertBasis.mkOfOrthogonalEqBot ?hv ?hsp).repr) (lp.single 2 i 1)\n              with\n                k * b = c * k → b = c\n          [Meta.Tactic.simp.unify] @OrthonormalBasis.coe_toHilbertBasis:1000, failed to unify\n                fun i =&gt; ↑(LinearIsometryEquiv.symm (OrthonormalBasis.toHilbertBasis ?b).repr) (lp.single 2 i 1)\n              with\n                k * b = c * k → b = c\n          [Meta.Tactic.simp.unify] @coe_fourierBasis:1000, failed to unify\n                fun i =&gt; ↑(LinearIsometryEquiv.symm fourierBasis.repr) (lp.single 2 i 1)\n              with\n                k * b = c * k → b = c\n          [Meta.Tactic.simp.unify] @Combinatorics.Line.map_apply:1000, failed to unify\n                (fun x i =&gt; Option.getD (Combinatorics.Line.idxFun (Combinatorics.Line.map ?f ?l) i) x) (?f ?x)\n              with\n                k * b = c * k → b = c\n          [Meta.Tactic.simp.unify] @Combinatorics.Line.vertical_apply:1000, failed to unify\n                (fun x i =&gt; Option.getD (Combinatorics.Line.idxFun (Combinatorics.Line.vertical ?v ?l) i) x) ?x\n              with\n                k * b = c * k → b = c\n...\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span> <span class=\"c1\">-- if you dare</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">MyNatNotation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"s2\">\"ℕ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ofNat</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">MyNat</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n\n<span class=\"c1\">-- test</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_eq_1</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- use it for `one`</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">one_def</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">one</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">S</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.add</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">S_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_left_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.mul</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"c1\">-- I only want it simp for now</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_S</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">S_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_S</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_S</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"c1\">--set_option trace.Meta.Tactic.simp true in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MyNat</span>\n</code></pre></div>",
        "id": 399149414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698582903
    },
    {
        "content": "<p>I think there are many lemmas/typeclass searches contributing here:</p>\n<ul>\n<li>Mathlib/Algebra/GroupWithZero/Basic.lean has six simp lemmas in section <code>CancelMonoidWithZero</code> (assuming <code>[CancelMonoidWithZero M₀]</code>), and they all slow things down a bit. It feels as if some cache is being reset often.</li>\n<li>Of the other half, the four simp lemmas in Mathlib/Algebra/Group/Basic.lean which take <code>LeftCancelMonoid</code> or <code>RightCancelMonoid</code> instances seem to be responsible for a lot of the search time, in the same manner as described above (each of the four lemmas cause a fourth of the total slowdown attributable to this file).</li>\n</ul>",
        "id": 399153097,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698585624
    },
    {
        "content": "<p>Oh nice detective work!</p>",
        "id": 399153556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698585985
    },
    {
        "content": "<p>Updated the first bullet point (I had previously claimed a <code>NeZero</code> instance was causing slowdowns, which wasn't the case).</p>",
        "id": 399153681,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698586113
    },
    {
        "content": "<p>Ironically, zero is the one thing I don't have in this file :-)</p>",
        "id": 399153953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698586308
    },
    {
        "content": "<p>So this is probably a mathlib issue?</p>",
        "id": 399165114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698594401
    },
    {
        "content": "<p>I'm way out of my depth here, but I'd say this is a Lean issue. Mathlib adds many simp lemmas whose conclusions would be useful in your example, but Lean spends an unreasonable amount of time figuring out that the required instances aren't available. the Meta.synthInstance trace reports a lot of cache hits but there must be some expensive uncached steps (probably unrelated to typeclass inference). Let me try to record a perf trace.</p>",
        "id": 399168252,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698596998
    },
    {
        "content": "<p>I inadvertently profiled with a debug build (which is slower for everything) and got a big surprise: <a href=\"https://gist.github.com/collares/a5cad26f73072c09694250ba6a21d5a0\">https://gist.github.com/collares/a5cad26f73072c09694250ba6a21d5a0</a> -- you can simulate this with <code>set_option trace.profiler true</code> and <code>set_option trace.profiler.threshold 1</code>.</p>",
        "id": 399173475,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698601685
    },
    {
        "content": "<p>Look at how many essentially-equal <code>isDefEq</code> checks! I know there probably is no caching due to the metavariables, but it's still a very surprising number of calls.</p>",
        "id": 399173518,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698601734
    },
    {
        "content": "<p>In total, there are 2091 very similar isDefEq checks. <code>?a * ?b = ?a =?= k * (k * b) = c * k</code> and <code>?a * ?b = ?b =?= k * (k * b) = c * k</code> are the leaders with 104 times each.</p>",
        "id": 399173890,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698602102
    },
    {
        "content": "<p>Probably best to use <code>set_option pp.all true</code> to see stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001818</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulZeroClass.toMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulZeroOneClass.toMulZeroClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toMulZeroOneClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CancelMonoidWithZero.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.10505</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">M₀</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)))))</span>\n                <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">)</span>\n              <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">MyNat</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat.MyNat.instMulMyNat</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">MyNat</span> <span class=\"n\">MyNat.MyNat.instMulMyNat</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399175723,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698603746
    }
]