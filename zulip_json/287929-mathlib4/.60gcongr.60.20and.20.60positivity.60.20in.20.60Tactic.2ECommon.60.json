[
    {
        "content": "<p>I think it would be nice to have <code>gcongr</code> and <code>positivity</code> imported in <code>Mathlib.Tactic.Common</code>.</p>\n<p>In both cases, this would require rearranging imports a bit, and moving some extensions and attributes out to the files where the underlying material is developed.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, what do you think?</p>",
        "id": 405595060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701572198
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8795\">#8795</a> just adds a note explaining why they can not currently in imported into <code>Tactic.Common</code>.</p>",
        "id": 405595090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701572223
    },
    {
        "content": "<p>At the time we wrote <code>gcongr</code>, I put all the <code>gcongr</code> tagging in a <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/GCongr.lean\">single file with large imports</a> because there are some subtleties to what should be and not be tagged <code>gcongr</code>, particularly as compared to <code>mono</code> (see discussion in <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/358186090\">this message</a>), and I wanted to have all the <code>gcongr</code> tagging of basic functions done at once so that the tagging scheme was clear.</p>\n<p>Now that the tactic is widely used, the whole library effectively serves as a test, so maybe this consideration is no longer relevant, and the lemma tagging can move to the lemmas themselves?</p>",
        "id": 405602966,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701578721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, maybe there would be a way to query the <code>gcongr</code> attribute to print all lemmas tagged with a given relation and head function?  Then it would be possible to convert the current neatly-organized tagging file with the large imports into a test file, so that any PR adding/subtracting a tag for one of the most important relation/function pairs (like <code>*</code>, <code>≤</code>) also had to modify this test file, hopefully attracting extra scrutiny during review.</p>",
        "id": 405603650,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701579375
    },
    {
        "content": "<p>I don't see any particular need to centralize all the lemmas into a test file any more than we do this for <code>simp</code></p>",
        "id": 405604276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701579836
    },
    {
        "content": "<p>True, but <code>simp</code> has numerous linters to check the correctness of the tagging.</p>",
        "id": 405604323,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701579859
    },
    {
        "content": "<p>we can certainly have a thing to print out the state, although this will break a lot as you say if we assert it in a test file</p>",
        "id": 405604365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701579925
    },
    {
        "content": "<p>To make concrete my concern: I'm worried that someone will tag</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_le_mul_of_nonpos_left</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b2</span> <span class=\"bp\">≤</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha_neg</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b2</span>\n</code></pre></div>\n<p>to be <code>gcongr</code>.  This kind of thing was (is?) a mono lemma and is part of the reason why mono often didn't make progress.</p>",
        "id": 405604462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701580014
    },
    {
        "content": "<p>Can't you have a test file with <code>import Mathlib</code>, to guard against regressions?</p>",
        "id": 405604502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701580081
    },
    {
        "content": "<p>We were just talking about how tests import too much... anything which does <code>import Mathlib</code> is a lint</p>",
        "id": 405604566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580114
    },
    {
        "content": "<p>Well, that example would probably break existing <code>gcongr</code> uses in the library, so it would fail the implicit \"must let Mathlib build\" test, even without needing a special test file.</p>",
        "id": 405604610,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701580156
    },
    {
        "content": "<p>I forget if we allow multiple lemmas with the same key but it seems like something we could plausibly error for</p>",
        "id": 405604671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580214
    },
    {
        "content": "<p>I mean, you can call it a linter I guess, but it seems the test we want is that no one breaks certain \"blessed\" invocations of <code>gcongr</code> by changing attributes.</p>",
        "id": 405604692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701580242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60gcongr.60.20and.20.60positivity.60.20in.20.60Tactic.2ECommon.60/near/405604671\">said</a>:</p>\n<blockquote>\n<p>I forget if we allow multiple lemmas with the same key but it seems like something we could plausibly error for</p>\n</blockquote>\n<p>We do, and sometimes this is valid, like there's a lemma for <code>*</code>, <code>≤</code> for <code>ENNReal</code> in addition to the one that works for linear ordered rings.</p>",
        "id": 405604706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701580262
    },
    {
        "content": "<p>Maybe the ideal (given infinite time from meta experts) would be a linter which flagged the existence of multiple lemmas with the same key, so that pairs like this attracted extra scrutiny but could be nolinted.</p>\n<p>... in which case maybe the correct behaviour now is to open an issue for that linter to be written?</p>",
        "id": 405604808,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701580363
    },
    {
        "content": "<p>That doesn't even have to be a linter exactly, we can have the attribute flag that like the error I was suggesting, except that it is a warning instead of an error and we add a linter option to turn it off</p>",
        "id": 405604910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580464
    },
    {
        "content": "<p>I assure you it does not take infinite time to implement that ;)</p>",
        "id": 405604933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580492
    },
    {
        "content": "<p>Does the attribute flag work if neither of the two files where the two lemmas are tagged imports the other?</p>",
        "id": 405604935,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701580495
    },
    {
        "content": "<p>no</p>",
        "id": 405604952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580505
    },
    {
        "content": "<p>well</p>",
        "id": 405604954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580507
    },
    {
        "content": "<p>it could work on <code>import</code> as well but this is not a very good time to be giving warnings</p>",
        "id": 405604972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701580527
    }
]