[
    {
        "content": "<p>I'm trying to convert my code for Legendre's Theorem on ternary quadratic forms to lean4+mathlib4. One problem I found with the <code>mathport</code>ed code comes down to the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- leaves `h: a = b` and `h': 0 = 0` in the context</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I would expect <code>h : 0 = b</code> and <code>h' : a = 0</code> (at least this seems to be the behavior I remember from lean3).</p>\n<p>Is this a known pitfall or a bug?</p>",
        "id": 388701289,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693667050
    },
    {
        "content": "<p>Yeah, I think I filed it somewhere... Or at least left a porting note?</p>",
        "id": 388705021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693669150
    },
    {
        "content": "<p>That is even worse than what I expected -- the known issue in my head changes h' in the silly way but still manages to change h. You have exhibited the worst of all possible worlds here, this should definitely be an issue. On the other hand I can definitely see the logic in what happens to h' :-)</p>",
        "id": 388706402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693670076
    },
    {
        "content": "<p>If <code>a</code> is a variable, then alternative to <code>rw [h'] at *</code> is <code>subst h'</code> (or equivalently <code>subst a</code>). This tactic does the substitution all at once, vs one-at-a-time, and I find it to be more reliable.</p>",
        "id": 388707348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693670657
    },
    {
        "content": "<p>Does <code>rw [id h'] at *</code> or maybe just <code>rw [(h')] at *</code> do any better?</p>",
        "id": 388707633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693670852
    },
    {
        "content": "<p>Eric, no, neither one of your suggestions works.</p>",
        "id": 388707857,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693671007
    },
    {
        "content": "<p>I worked around the problem by specifying the hypotheses at which to rewrite explicitly. But it was a bit annoying...</p>",
        "id": 388708082,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693671175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20at.20*/near/388707857\">said</a>:</p>\n<blockquote>\n<p>Eric, no, neither one of your suggestions works.</p>\n</blockquote>\n<p>It looks like lean re-elaborates the rewrite expression after each step, rather than doing so just once</p>",
        "id": 388711511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693673839
    },
    {
        "content": "<p>Ah, Eric your comment made me try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- leaves `h: 0 = b` and `h': 0 = 0` in the context</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>now <code>rw</code> acts on both!  Note that I switched the order of the hypotheses in the statement.</p>",
        "id": 388711852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693674066
    },
    {
        "content": "<p><del>(so the comment is wrong: it leaves <code>h: 0 = b</code>)</del></p>",
        "id": 388714984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693676640
    },
    {
        "content": "<p>Ah, Kevin, you are right: I had edited the statement, but not the comment!  I fixed the comment now.</p>",
        "id": 388716788,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693678224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20at.20*/near/388701289\">said</a>:</p>\n<blockquote>\n<p>I would expect <code>h : 0 = b</code> and <code>h' : a = 0</code> (at least this seems to be the behavior I remember from lean3).</p>\n</blockquote>\n<p>Indeed, this is a regression from Lean 3.<br>\n<a href=\"https://github.com/leanprover/lean4/issues/2320\">https://github.com/leanprover/lean4/issues/2320</a></p>",
        "id": 405774571,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701679686
    }
]