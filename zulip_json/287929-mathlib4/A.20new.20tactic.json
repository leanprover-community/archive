[
    {
        "content": "<p>I have a new tactic, which is a forwards-reasoning analogue of the backwards-reasoning <code>library_search</code>.</p>\n<p>It is tentatively called <code>propose</code> at the moment, but suggestions are welcome. (One option would be to fold it into <code>library_search</code>.)</p>\n<p>Here are two examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Propose</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">L.Disjoint</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">propose</span> <span class=\"n\">using</span> <span class=\"n\">w</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">K.Disjoint</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span> <span class=\"c1\">-- `propose` added the hypothesis `List.disjoint_of_subset_left m w`</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Propose</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Associated</span>\n\n<span class=\"c1\">-- From Mathlib.Algebra.Associated:</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Prime</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dvd_of_dvd_pow</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"c1\">-- In mathlib, we proceed by two `have` statements:</span>\n    <span class=\"c1\">-- have := isUnit_of_dvd_one  h</span>\n    <span class=\"c1\">-- have := not_unit hp</span>\n    <span class=\"c1\">-- `propose` successfully guesses them both:</span>\n    <span class=\"n\">propose</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n    <span class=\"n\">propose</span> <span class=\"n\">using</span> <span class=\"n\">hp</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">dvd_or_dvd</span> <span class=\"n\">hp</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">dvd_a</span> <span class=\"n\">dvd_pow</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">dvd_pow</span>\n</code></pre></div>",
        "id": 341952283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678850763
    },
    {
        "content": "<p>How does it work? It's pretty simple. Just like <code>library_search</code>, we traverse all declarations in the environment, and stick them into a discrimination tree, but this time indexed by (each of the) hypotheses, rather than by the conclusion. As with library_search after <a href=\"https://github.com/leanprover-community/mathlib4/pull/2888\">!4#2888</a>, we discard any where the discrimination key is just <code>#[*]</code>. Now, when the user calls <code>propose using a, b, c</code>, we retrieve a list of all the lemmas that take as an argument something of shape <code>a</code> (notice the first argument after <code>using</code> is treated specially). Now, for each such lemma, we use <code>solve_by_elim</code> (augmented by typeclass search) to try to fill in all the arguments. We only accept solutions that use each of <code>a, b, c</code>, backtracking as necessary. Finally, we add up to 10 successful results as new hypotheses.</p>",
        "id": 341952525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678850976
    },
    {
        "content": "<p>This is not intended as a \"leave in place\" tactic: you should replace it with a <code>have</code> statement, and probably we should add some <code>Try this:</code> functionality.</p>",
        "id": 341952607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851008
    },
    {
        "content": "<p>I haven't done a lot of testing (the two examples!) but it seems to work pretty nicely, and seems useful when you know that some handful of hypotheses should be useful together, but you're not quite sure how (or maybe you are, and just want to know the name).</p>",
        "id": 341952818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851142
    },
    {
        "content": "<p>One question: should this be a separate tactic?</p>",
        "id": 341952834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851159
    },
    {
        "content": "<p>Or just roll it into <code>library_search at a, b, c</code>?</p>",
        "id": 341952849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851173
    },
    {
        "content": "<p>I don't like the idea of using something other than a <code>location</code> after the <code>at</code> keyword</p>",
        "id": 341952891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851212
    },
    {
        "content": "<p>Oh, I intended here that <code>a, b, c</code> are each hypotheses?</p>",
        "id": 341952907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851238
    },
    {
        "content": "<p>well there wouldn't be commas at least</p>",
        "id": 341952962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851254
    },
    {
        "content": "<p>if you do use the location grammar, does <code>at h |-</code> and <code>at *</code> make sense?</p>",
        "id": 341953007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851289
    },
    {
        "content": "<p>Ah. It could still be a <code>location</code>, I guess. If it includes <code>⊢</code>, it would use the usual backwards-reasoning library_search (and require that any named hypotheses are used in the result, like the current <code>library_search using</code>).</p>",
        "id": 341953042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851310
    },
    {
        "content": "<p>If it doesn't include <code>⊢</code>, it would use the new forwards-reasoning search.</p>",
        "id": 341953057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851324
    },
    {
        "content": "<p>I worry that it would be confusing that <code>library_search at a b c</code> (i.e. without an ⊢) would not be looking at the goal at all.</p>",
        "id": 341953089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851353
    },
    {
        "content": "<p>that's not too unusual for other tactics using <code>at h</code></p>",
        "id": 341953166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851374
    },
    {
        "content": "<p>indeed</p>",
        "id": 341953178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851381
    },
    {
        "content": "<p>what is more unusual is that it doesn't modify those hypotheses</p>",
        "id": 341953189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851389
    },
    {
        "content": "<p>Why not <code>library_search using a b c</code>?</p>",
        "id": 341953212,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678851407
    },
    {
        "content": "<p>I would prefer to leave it as a separate tactic. And I think <code>propose</code> is a good name.</p>",
        "id": 341953217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678851410
    },
    {
        "content": "<p>and also that it treats the first hyp specially</p>",
        "id": 341953219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>, that already means something: it says \"find me a lemma that closes the goal, but only if you can do so in a way that we use a b c as arguments to that lemma\"</p>",
        "id": 341953252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851451
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"n\">using</span> <span class=\"n\">f</span> <span class=\"c1\">-- partitionMap f l</span>\n</code></pre></div>",
        "id": 341953273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851481
    },
    {
        "content": "<p>maybe <code>propose</code> should consider the goal for relevance filtering purposes?</p>",
        "id": 341953341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851505
    },
    {
        "content": "<p>Ah good to know, obviously I haven't used <code>library_search</code> that much, but hopefully it becomes useful again with Lean 4 and your recent speedup.</p>",
        "id": 341953349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678851518
    },
    {
        "content": "<p>Considering the goal for relevance sounds awesome, but maybe for later. :-)</p>",
        "id": 341953408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851570
    },
    {
        "content": "<p>maybe <code>propose</code> shouldn't actually change the goal state at all, but only give a bunch of \"try this\" style suggestions</p>",
        "id": 341953519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851664
    },
    {
        "content": "<p>Personally I find it easier to remember what different tactics with different names do as opposed to remembering what different grammars do for a single tactic</p>",
        "id": 341953528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678851668
    },
    {
        "content": "<p>as described it is almost impossible to guess what the state looks like after <code>propose</code></p>",
        "id": 341953562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851709
    },
    {
        "content": "<p>and you also can't name the introduced variables</p>",
        "id": 341953629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851731
    },
    {
        "content": "<p>I agree that it should just give <code>Try this</code>.</p>",
        "id": 341953645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851755
    },
    {
        "content": "<p>Harder to write the tests :-)</p>",
        "id": 341953654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678851768
    },
    {
        "content": "<p><code>propose (im_feeling_lucky := true)</code></p>",
        "id": 341953681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678851794
    },
    {
        "content": "<p>Okay, <code>propose</code> now generates <code>have : t := e</code> suggestions. (I think having the type in the suggestion is very helpful for deciding if you like the suggestion! A user can remove it if they like.)</p>",
        "id": 341955912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678853585
    },
    {
        "content": "<p>There's also <code>propose!</code> for \"I'm feeling lucky\". It still prints the suggestions, so it will always be noisy.</p>",
        "id": 341955925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678853611
    },
    {
        "content": "<p>Some further features: you can write things like <code>propose : X using Y, Z</code>, and it will only return lemmas whose type matches <code>X</code> (which may contain metavariables).</p>",
        "id": 341961838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678858320
    },
    {
        "content": "<p>A minor comment: is this exactly <em>instantiation</em> by the given hypothesis where applicable? If so:</p>\n<ul>\n<li>is <code>instantiate</code> a better name?</li>\n<li>why not allow terms, not just hypotheses : <code>instantiate [n, m + n]</code>?</li>\n<li>can one use a <em>slug</em> of the type as a name?</li>\n</ul>",
        "id": 341964410,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678859959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/A.20new.20tactic/near/341961838\">said</a>:</p>\n<blockquote>\n<p>Some further features: you can write things like <code>propose : X using Y, Z</code>, and it will only return lemmas whose type matches <code>X</code> (which may contain metavariables).</p>\n</blockquote>\n<p>That sounds a lot like the <code>observe</code> that I hacked together for ml3.</p>",
        "id": 341969238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678862406
    },
    {
        "content": "<p>(can I request this get into Std? would be super super useful for program verification stuff I'm playing around with!)</p>",
        "id": 341983341,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678867675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>, yes, you can use terms. I'm not sure why <code>instantiate</code> would be relevant/helpful here. It's going and finding some lemma from the lemma, whose arguments can be filled by local hypotheses (perhaps recursively).</p>\n<p>And I'm not sure what <code>slug</code> means here?</p>",
        "id": 341991329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678870109
    },
    {
        "content": "<p>re: Std, I think it's best that it has a shake out period in mathlib initially. library_search should also move to Std eventually.</p>",
        "id": 341991423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678870140
    },
    {
        "content": "<p>Yes, it is really the dual of instantiate (or <code>use</code> as in the tactic), i.e., one is finding a lemma which can be instantiated. So <code>instantiate_with</code> may be better but not that good and a little long.</p>\n<p>By <em>slug</em> I mean something that is done by, for example, static site generators where a sentence is converted into a legal identifier, url in that case (also mapped to lowercase etc) as in <a href=\"https://jekyllrb.com/docs/liquid/filters/\">https://jekyllrb.com/docs/liquid/filters/</a>. It seems nice to have in some cases, typically if a proof is auto-generated by forward reasoning then it can be named by <em>slugifying</em> the type.</p>",
        "id": 341993426,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678870759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/A.20new.20tactic/near/341991423\">said</a>:</p>\n<blockquote>\n<p>re: Std, I think it's best that it has a shake out period in mathlib initially. library_search should also move to Std eventually.</p>\n</blockquote>\n<p>I agree with this. As long as the implementation doesn't impose a cost for people who don't use it, I think it would be nice to have <code>library_search</code> available in Std.</p>",
        "id": 341993898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678870877
    },
    {
        "content": "<p>Why not add an alias <code>couse</code> or <code>library_cosearch</code> for duality enthusiasts?</p>",
        "id": 341997253,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678871883
    },
    {
        "content": "<p><code>library_searchᵒᵖ</code></p>",
        "id": 341998912,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678872380
    }
]