[
    {
        "content": "<p>Hi I'm new here, so please correct me if this isn't the right location for the topic.</p>\n<p>I was just playing around with inequalities involving Int's, when this happened</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Order.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transIntContradiction</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Int.lt_trans</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Int.le_of_lt</span> <span class=\"n\">hh</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>it highlights transIntContradiction red with the message</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  LE.le a\nargument has type\n  ℤ\nbut function has type\n  ℕ → ℕ → PropLean 4\n</code></pre></div>\n<p>replacing <code>simp_arith</code>with <code>simp</code> solves the issue.<br>\nIs this behavior expected and if so why?</p>\n<p>I'm using Mathlib <code>b0cc02</code> and <code>lean4:nightly-2023-05-31</code>.</p>",
        "id": 364303475,
        "sender_full_name": "N.J. Lohmann",
        "timestamp": 1686149167
    },
    {
        "content": "<p>It looks like <code>simp_arith</code> applies lemmas about natural numbers without looking at the actual types.</p>",
        "id": 364326242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686153645
    },
    {
        "content": "<p>if this is a bug, for which modules should I look out, to try a fix (although I'm not sure if that's in my reach yet)?</p>",
        "id": 364331255,
        "sender_full_name": "N.J. Lohmann",
        "timestamp": 1686154712
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 364332878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686155092
    },
    {
        "content": "<p>Sorry, this was a bad answer.</p>",
        "id": 364333113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686155147
    },
    {
        "content": "<p>There is a TODO in <code>Lean.Meta.Tactic.LinearArith.Simp</code> saying \"TODO: add support for <code>Int</code> and arbitrary ordered comm rings\"</p>",
        "id": 364334867,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686155497
    },
    {
        "content": "<p>So,</p>\n<ul>\n<li>the tactic is in the core Lean;</li>\n<li>the developers know about the bug;</li>\n<li>you can try to fix it but this is going to involve quite some metaprogramming and you should ask someone else to help.</li>\n</ul>",
        "id": 364335559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686155636
    },
    {
        "content": "<p>In the meantime, I think that information about this limitation of <code>simp_arith</code> should be added to <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a>. Feel free to make a PR to <a href=\"https://github.com/leanprover/theorem_proving_in_lean4\">https://github.com/leanprover/theorem_proving_in_lean4</a></p>",
        "id": 364343361,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686157302
    },
    {
        "content": "<p>bug reports aside, isn't the real answer here just to use <code>linarith</code>?</p>",
        "id": 364348644,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686158595
    },
    {
        "content": "<p>I assumed that the question was \"what's wrong with <code>simp_arith</code>\", not \"how do I prove it\".</p>",
        "id": 364349095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686158708
    },
    {
        "content": "<p>Yeah, but \"I'm new here\" makes me suspect the OP is just unaware of linarith.</p>",
        "id": 364350095,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686158970
    },
    {
        "content": "<p>thanks for the update! So I guess, this is indeed out of my scope. Yes I'm aware of linarith, but wanted to try some of the syntax from the new docs (theorem proving in lean), so the main question was if the behavior is intentional or a bug.</p>",
        "id": 367994206,
        "sender_full_name": "N.J. Lohmann",
        "timestamp": 1687279822
    }
]