[
    {
        "content": "<p>This file defines a local notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">R</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"n\">x</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, it does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conductor</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"bp\">&lt;</span><span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>gives an error at <code>x</code>: <code>expected term</code>. Hovering over the symbols:  <code>&lt;</code> is recognised as the first part of the notation, but <code>&gt;</code> is recognised as the strict inequality symbol.</p>",
        "id": 367525235,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687157730
    },
    {
        "content": "<p>Does using <code>x:ident</code> in the notation help?  Untested, as I am on mobile.</p>",
        "id": 367538476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687160770
    },
    {
        "content": "<p>Use <code>x:max</code> to prevent it from parsing the token as an operator. This of course limits what you can write for <code>x</code> without using parentheses</p>",
        "id": 367540552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687161211
    },
    {
        "content": "<p>Yes, that works. Thanks!</p>",
        "id": 367540778,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687161260
    },
    {
        "content": "<p>Does <code>max</code> mean that the syntax will end as soon as <code>&gt;</code> is found?</p>",
        "id": 367545252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687162177
    },
    {
        "content": "<p>it means the syntax will end as soon as anything with precedence less than <code>max</code> is found, which basically means only atomic expressions and parentheses-enclosed expressions are allowed</p>",
        "id": 367702803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687193823
    },
    {
        "content": "<p>a more targeted fix would be to set the precedence one higher than that of <code>&gt;</code></p>",
        "id": 367702908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687193851
    }
]