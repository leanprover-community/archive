[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4352\">!4#4352</a> there are 3 uses of <code>apply_congr</code>, two of which currently fail. One with the rather concise error message \"<code>failed</code>\" and the other with \"<code>Left-hand side must be an application of a constant.</code>\"<br>\nShould we try to work around this avoiding <code>apply_congr</code> or would it be better to try to make <code>apply_congr</code> work here?</p>",
        "id": 364551716,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1686228765
    },
    {
        "content": "<p>There were several issues at play here, I have fixed them on the branch:</p>\n<ul>\n<li>Pushed a fix for at least one apply_congr bug (the one with the helpful error message).</li>\n<li>I made a more helpful error message for the second one, which reveals the the proof structure is actually wrong before, due to the following issue:</li>\n<li>I think mathport is generating skips in convs in a way that doesn't make sense, in</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">blah</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>should become</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">.</span> <span class=\"n\">skip</span>\n  <span class=\"bp\">.</span> <span class=\"n\">blah</span>\n</code></pre></div>\n<p>not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">skip</span>\n  <span class=\"n\">blah</span>\n</code></pre></div>\n<ul>\n<li>I added nonrec, so that lean realizes the correct <code>sum_bernoulli</code> lemma to be used is not the one being proved</li>\n<li>we dont have <code>apply_congr with h</code> or a conv mode rename_i <a href=\"https://github.com/leanprover-community/mathlib/issues/2882\">https://github.com/leanprover-community/mathlib/issues/2882</a> so one has to be sneaky to apply the lemmas without naming the arguments by hand, turns out there were some golfs anyway</li>\n</ul>",
        "id": 364916845,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686329768
    }
]