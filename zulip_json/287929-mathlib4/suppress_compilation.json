[
    {
        "content": "<p>For the record, I have just tried the brand new <code>suppress_compilation</code> tactic in the tensor product file on master, and it breaks notation: if you open the file <code>Mathlib.LinearAlgebra.TensorProduct</code>, and add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SuppressCompilation</span>\n<span class=\"n\">supress_compilation</span>\n</code></pre></div>\n<p>then a few lines below </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">TensorProduct</span><span class=\"o\">]</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\" ⊗ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TensorProduct</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">TensorProduct.term_</span><span class=\"bp\">⊗</span><span class=\"n\">_'</span>\n<span class=\"n\">invalid</span> <span class=\"n\">syntax</span> <span class=\"n\">node</span> <span class=\"n\">kind</span> <span class=\"bp\">'</span><span class=\"n\">TensorProduct.</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">⊗</span><span class=\"n\">_</span><span class=\"bp\">»'</span>\n</code></pre></div>\n<p>So it will be hard to use <code>suppress_compilation</code> on a larger scale in mathlib, unless some wizard (<span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ?) understands what is going on here.</p>",
        "id": 394632932,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696338799
    },
    {
        "content": "<p>The problem is certainly that the notation expands to a <code>def</code> (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct#doc\">docs#TensorProduct</a>.«term_⊗_») , but we don't want <code>suppress_compilation</code> to act on this def.</p>",
        "id": 394634082,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696339153
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover/lean4/pull/2619\">lean4#2619</a> as another approach</p>",
        "id": 394636819,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696339976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suppress_compilation/near/394636819\">said</a>:</p>\n<blockquote>\n<p>I made <a href=\"https://github.com/leanprover/lean4/pull/2619\">lean4#2619</a> as another approach</p>\n</blockquote>\n<p>I am confused. Wouldn't that approach break in the same way for situations like this?</p>",
        "id": 394668498,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696349762
    },
    {
        "content": "<p>You are correct.</p>",
        "id": 394669168,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696349993
    },
    {
        "content": "<p>Didn't read carefully and thought it was problem parsing the syntax</p>",
        "id": 394669366,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696350062
    },
    {
        "content": "<p>But you can <code>set_option compiler.suppress false in</code> to work around.</p>",
        "id": 394669493,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696350118
    },
    {
        "content": "<p>Not great still though</p>",
        "id": 394669580,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696350144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> There are two ways I can think of to solve this at the moment:</p>\n<ul>\n<li>Sprinkle an <code>unsupress_compilation in</code> through the file on definitions like these that should still be compiled.</li>\n<li>Reorganized the file so that <code>suppress_compilation</code> can be used in the pure math <code>section</code>s but not in the places where computational components (like notation) are defined.</li>\n</ul>",
        "id": 394669651,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696350174
    },
    {
        "content": "<p>Couldn't <code>notation</code> trigger the <code>unsupress_compilation</code> all by itself? (for instance set some flag that would desactivate the <code>suppress_compilation</code> behavior?)</p>",
        "id": 394670480,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696350530
    },
    {
        "content": "<p>We could try it with notation3 but I don't think that will cover all of the cases. Can you parse the declName for <code>«</code>?</p>",
        "id": 394681549,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696355090
    },
    {
        "content": "<p>Would something as silly as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">containsSubstr</span> <span class=\"s2\">\"«\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span> <span class=\"k\">then</span>\n    <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">mkNullNode</span><span class=\"o\">⟩)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n      <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 394705964,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696365641
    },
    {
        "content": "<p>I remember a time where \"silly\" meant something else here... <span aria-label=\"older man\" class=\"emoji emoji-1f474\" role=\"img\" title=\"older man\">:older_man:</span></p>",
        "id": 394709184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696366049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/suppress_compilation/near/394670480\">said</a>:</p>\n<blockquote>\n<p>Couldn't <code>notation</code> trigger the <code>unsupress_compilation</code> all by itself? (for instance set some flag that would desactivate the <code>suppress_compilation</code> behavior?)</p>\n</blockquote>\n<p>Yes, if more special casing is desirable. Here is extended version of my previous example which now excludes <code>notation</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabSuppressCompilationDecl</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\"unsuppress_compilation\"</span> <span class=\"o\">(</span><span class=\"s2\">\" in \"</span> <span class=\"n\">command</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expandSuppressCompilationNotation</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">notation</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prec</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">items</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">defn</span> <span class=\"bp\">←</span> <span class=\"n\">expandNotation</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">notation</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prec</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">items</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unsuppress_compilation</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">defn</span><span class=\"o\">⟩):</span><span class=\"n\">command</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unsuppress_compilation</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">cmd</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">declElab</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaMacro</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">expandSuppressCompilationNotation</span>\n  <span class=\"k\">let</span> <span class=\"n\">attrCmds</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">command_elab</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">declElab</span>\n    <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">macro</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">notaMacro</span>\n  <span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">cmd</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">section</span> <span class=\"bp\">$</span><span class=\"n\">attrCmds</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"bp\">$</span><span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">attrCmds</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">declKind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">declaration</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaKind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``«</span><span class=\"kd\">notation</span><span class=\"bp\">»</span>\n  <span class=\"k\">let</span> <span class=\"n\">declElab</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaMacro</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">expandSuppressCompilationNotation</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">command_elab</span> <span class=\"bp\">$</span><span class=\"n\">declKind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">declElab</span>\n  <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"bp\">$</span><span class=\"n\">notaKind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">notaMacro</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">suppress_compilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/\"</span>\n<span class=\"sd\">/-- hi -/</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"n\">where</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"†\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.anonymous</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">ex2.foo</span> <span class=\"c1\">-- properly noncomputable (should error)</span>\n</code></pre></div>",
        "id": 394747384,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696388006
    },
    {
        "content": "<p>Your code works great 99% of the time. I have extended it to also deal with <code>example</code> and <code>abbrev</code>, copying your pattern. There are still a few cases where it doesn't, though. One is with <code>notation3</code>, but this is not really surprising. Another one is with local notations: in the <code>ex2</code> namespace of your post just above,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"boubou\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.anonymous</span>\n<span class=\"k\">#check</span> <span class=\"n\">boubou</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>doesn't work. I don't understand why, because you are forwarding <code>attrKind</code>.</p>",
        "id": 394850831,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696428925
    },
    {
        "content": "<p>(Current state of things is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7504\">#7504</a>)</p>",
        "id": 394852071,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696429294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <code>local</code> does not work because <code>unsuppress_compilation</code> uses a <code>section</code>. Here is approach without that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabSuppressCompilationDecl</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\"unsuppress_compilation\"</span> <span class=\"o\">(</span><span class=\"s2\">\" in \"</span> <span class=\"n\">command</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">expandSuppressCompilationNotation</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">notation</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prec</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">items</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">defn</span> <span class=\"bp\">←</span> <span class=\"n\">expandNotation</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">notation</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prec</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">items</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unsuppress_compilation</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">defn</span><span class=\"o\">⟩):</span><span class=\"n\">command</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">declKind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">declaration</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaKind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``«</span><span class=\"kd\">notation</span><span class=\"bp\">»</span>\n  <span class=\"k\">let</span> <span class=\"n\">declElab</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaMacro</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">expandSuppressCompilationNotation</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n  <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">command_elab</span> <span class=\"bp\">$</span><span class=\"n\">declKind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">declElab</span>\n  <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">macro</span> <span class=\"bp\">$</span><span class=\"n\">notaKind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">notaMacro</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unsuppress_compilation</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">cmd</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">declElab</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">notaMacro</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">expandSuppressCompilationNotation</span>\n  <span class=\"k\">let</span> <span class=\"n\">attrCmds</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">command_elab</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">declElab</span>\n    <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">macro</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">notaMacro</span>\n  <span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">cmd</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">attrCmds</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"bp\">$</span><span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"n\">suppress_compilation</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">attrCmds</span>\n\n<span class=\"n\">suppress_compilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/\"</span>\n<span class=\"sd\">/-- hi -/</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"n\">where</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"†\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.anonymous</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"†'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Name.anonymous</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">ex2.foo</span> <span class=\"c1\">-- properly noncomputable (should error)</span>\n</code></pre></div>",
        "id": 394857494,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696430753
    },
    {
        "content": "<p>Of course, thanks!</p>",
        "id": 394860040,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696431486
    },
    {
        "content": "<p>For the record, I have benched the current version of the PR in which I suppress compilation in the tensor product file and downstream files. There are several files where the change is by -80% or better. This means that a very large proportion of the time spent on these files is currently for a useless step doing compilation to executable(?) code...</p>",
        "id": 394865367,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696433067
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7504#issuecomment-1747091342\">https://github.com/leanprover-community/mathlib4/pull/7504#issuecomment-1747091342</a></p>",
        "id": 394865416,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696433083
    },
    {
        "content": "<p>(All this can already be seen in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7281\">#7281</a>, of course).</p>",
        "id": 394866201,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696433310
    },
    {
        "content": "<p>Just to say that I agree with you that this fix is better than <a href=\"https://github.com/leanprover-community/mathlib4/pull/7281\">#7281</a>, which was why I didn't even fix the merge conflict yet (well, that and the 320 undergraduates who I'm teaching for the next month...)</p>",
        "id": 394868111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696433947
    }
]