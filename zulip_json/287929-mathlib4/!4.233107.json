[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3107\">!4#3107</a> there are a lot of these errors related to the use of <code>.map i</code>:</p>",
        "id": 344595245,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679807595
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">map</span> <span class=\"n\">i</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344595271,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679807630
    },
    {
        "content": "<p>How can I fix these errors?</p>",
        "id": 344595281,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679807640
    },
    {
        "content": "<p>probably <code>attribute [-instance] Ring.toNonAssocRing</code></p>",
        "id": 344596035,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679808301
    },
    {
        "content": "<p>What porting note should I add then?</p>",
        "id": 344614066,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679819668
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/Lean4/pull/2074\">Lean4#2074</a> is to blame</p>",
        "id": 344615457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679820433
    },
    {
        "content": "<p>That link doesn't work for me. Is it <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> ? Edit: yes</p>",
        "id": 344632733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679827082
    },
    {
        "content": "<p>More accurately, I think the fact that we worked around 2074 in a previous file is likely the cause, though I'm speculating without having opened Lean</p>",
        "id": 344642628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679831111
    },
    {
        "content": "<p>At some places after placing <code>attribute [-instance] Ring.toNonAssocRing</code> I'm now getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">roots</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">map</span> <span class=\"n\">i</span> <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Polynomial</span> <span class=\"n\">L</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Polynomial</span> <span class=\"n\">L</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>Which new line should I put?</p>",
        "id": 344671743,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679841022
    },
    {
        "content": "<p><code>set_option synth.etaExperiment true in</code> might be an easier fix for this file</p>",
        "id": 344674233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679841794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Most definitions do get solved by the eta experiment, but <code>splits_of_splits_id</code> actually causes a timeout when eta is enabled</p>",
        "id": 344678221,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679843190
    },
    {
        "content": "<p>(I've pushed my latest round of fixes btw)</p>",
        "id": 344678242,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679843199
    },
    {
        "content": "<p>Then there's this error on line 283:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">splits_prod_iff</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Splits</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Splits</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n    <span class=\"n\">Finset.induction_on</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">splits_one</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"c1\">-- here</span>\n      <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">hat</span> <span class=\"n\">ih</span> <span class=\"n\">ht</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.forall_mem_insert</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_insert</span> <span class=\"n\">hat</span><span class=\"o\">,</span> <span class=\"n\">splits_mul_iff</span> <span class=\"n\">i</span> <span class=\"n\">ht.1</span> <span class=\"o\">(</span><span class=\"n\">Finset.prod_ne_zero_iff.2</span> <span class=\"n\">ht.2</span><span class=\"o\">),</span> <span class=\"n\">ih</span> <span class=\"n\">ht.2</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.splits_prod_iff</span> <span class=\"n\">Polynomial.splits_prod_iff</span>\n</code></pre></div>",
        "id": 344678655,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679843343
    },
    {
        "content": "<p>By inspecting the Lean 3 code I know <code>h</code> is of a type <code>x✝ ∈ ∅</code>. This should simplify to <code>False</code> which has <code>elim</code> as a property, but it doesn't simplify</p>",
        "id": 344679017,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679843489
    },
    {
        "content": "<p>oh wait...</p>",
        "id": 344679321,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679843607
    },
    {
        "content": "<p>Use <code>set_option synth.etaExperiment true in</code> (note the <code>in</code>) so that you can set it per-decl</p>",
        "id": 344679666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679843749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344678221\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> Most definitions do get solved by the eta experiment, but <code>splits_of_splits_id</code> actually causes a timeout when eta is enabled</p>\n</blockquote>\n<p>You should only enable it on the declarations where it's necessary. Don't enable it globally.</p>",
        "id": 344679693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679843760
    },
    {
        "content": "<p>I'm not enabling it globally</p>",
        "id": 344680499,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679844071
    },
    {
        "content": "<p>Are you saying that you don't know what to do with <code>splits_of_splits_id</code> because you have 0 solutions right now, or are you just remarking the known fact that enabling eta_experiment causes some things to time out?</p>",
        "id": 344680887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679844196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To put it clearly: <em>as it is in my PR right now</em>, <code>splits_of_splits_id</code> can't synth <code>UniqueFactorizationMonoid K[X]</code> and it doesn't have eta enabled for it. But if I enable eta, it causes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344681813,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679844490
    },
    {
        "content": "<p><code>exists_root_of_splits'</code> has about the same problem; <code>mem_lift_of_splits_of_roots_mem_range</code> is perhaps the most heinous theorem of all</p>",
        "id": 344682007,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679844586
    },
    {
        "content": "<p><code>splits_comp_of_splits</code> apparently has an unknown tactic</p>",
        "id": 344682144,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679844634
    },
    {
        "content": "<p>There are also places where I'd like to see <em>in Lean 3, using the Lean Web Editor</em> what a particular <code>_</code> expands to, particularly in the case where Lean 4 can't infer it. What do I do with that <code>_</code>?</p>",
        "id": 344682703,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679844912
    },
    {
        "content": "<p>Now I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: gets around lean4#2074</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_rootSet</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">p.rootSet</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">p.rootSet</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rootSet</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.coe_image</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Multiset.toFinset_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">f.coe_toRingHom</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">roots_map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">splits_id_iff_splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">f.comp_algebra_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">root_set</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 344685195,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679846168
    },
    {
        "content": "<p>You can click on a <code>_</code> in the infoview.</p>",
        "id": 344685221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846183
    },
    {
        "content": "<p>After <code>classical</code> you don't have to indent two (edit: from Eric's reaction apparently I'm wrong? I'm pretty sure you didn't have to indent two in Lean 3)</p>",
        "id": 344685254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846209
    },
    {
        "content": "<p>At <code>rw [← roots_map ...</code> I have this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">↑?</span><span class=\"n\">m.331329</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">roots</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Multiset.toFinset</span> <span class=\"o\">(</span><span class=\"n\">Multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">↑↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">roots</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">rootSet</span> <span class=\"n\">p</span> <span class=\"n\">L</span>\n</code></pre></div>\n<p>Why is the system not finding the pattern despite it being there to the human eye?</p>",
        "id": 344685306,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679846242
    },
    {
        "content": "<p>For the synth, try inserting the line <code>haveI : UniqueFactorizationMonoid K[X] := inferInstance</code> at some point in the proof before the problem.</p>",
        "id": 344685341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846274
    },
    {
        "content": "<p>Another possible approach is to enable eta and also increase heartbeats in the declaration</p>",
        "id": 344685414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846300
    },
    {
        "content": "<blockquote>\n<p>Why is the system not finding the pattern despite it being there to the human eye?</p>\n</blockquote>\n<p>There can be several reasons for this. Either it doesn't actually match but you can only see this with <code>pp.all true</code>, or the hypotheses of the lemma (e.g. typeclass assumptions) can't be found. Did it work in lean 3, i.e. is this what the porting program is suggesting, or are you going off on a limb trying to fix something?</p>",
        "id": 344685497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344685254\">said</a>:</p>\n<blockquote>\n<p>After <code>classical</code> you don't have to indent two</p>\n</blockquote>\n<p>I think it might be good practice though, since <code>classical</code> now starts a scope</p>",
        "id": 344685562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679846413
    },
    {
        "content": "<p>Did the lean 3 goal have two up-arrows in that failed rewrite? That might be the issue. Try <code>dsimp</code> first or something?</p>",
        "id": 344685678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679846499
    },
    {
        "content": "<p>Does <code>simp_rw</code> fail also?</p>",
        "id": 344686252,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679846782
    },
    {
        "content": "<p>I'm busy tinkering with heartbeats. They do make the problematic theorems compile...</p>",
        "id": 344686495,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679846921
    },
    {
        "content": "<p>This might just be the path of least resistance at the end of the day. You are facing issues which are ultimtely going to have to be dealt with by changes in core, so whatever fix you come up with right now may well have to be refactored when MSR have got some momentum going again and start making the fixes to the issues which you and others are currently working around.</p>",
        "id": 344686643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344686252\">said</a>:</p>\n<blockquote>\n<p>Does <code>simp_rw</code> fail also?</p>\n</blockquote>\n<p><code>simp_rw</code> does not eliminate the red line beneath but does shrink it to the <code>\\u f</code>. The error is replaced with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"bp\">?</span><span class=\"n\">m.346410</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.346407</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344686652,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679847022
    },
    {
        "content": "<p>So was the double up-arrow a coercion from an algebra hom to a ring hom and then to a function?</p>",
        "id": 344686723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847071
    },
    {
        "content": "<p>Apparently yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">multiset.map</span> <span class=\"bp\">⇑↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.root_set</span> <span class=\"n\">L</span>\n</code></pre></div>",
        "id": 344686848,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679847135
    },
    {
        "content": "<p>I don't personally know how to fix this but my impression is that this sort of thing is well-understood now by some people. Learning about how Lean 4 does coercions is high on my list of Lean stuff once I've tamed my non-Lean job list (which is now not being added to nearly as fast because term ended two days ago)</p>",
        "id": 344686860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847149
    },
    {
        "content": "<p>You could probably just <code>change</code> the <code>⇑↑f</code> to <code>f</code> and this might make the rewrite succeed.</p>",
        "id": 344686924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847201
    },
    {
        "content": "<p>If giving lean more time works, then it’s running out of time figuring out and matching up the the types. In a <code>rw</code>, I’ve seen this throw the standard can’t rewrite error in this case.</p>",
        "id": 344687078,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847294
    },
    {
        "content": "<p>If you trace and profile, you might see what it is spending so much time on.</p>",
        "id": 344687171,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847349
    },
    {
        "content": "<p>Who exactly are the people at MSR?</p>",
        "id": 344687187,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679847359
    },
    {
        "content": "<p>is it just Leo and Gabriel?</p>",
        "id": 344687426,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679847468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344687171\">said</a>:</p>\n<blockquote>\n<p>If you trace and profile, you might see what it is spending so much time on.</p>\n</blockquote>\n<p>how do I trace and profile?</p>",
        "id": 344687546,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679847529
    },
    {
        "content": "<p><code>set_option trace</code> should give you a menu of options with autocomplete</p>",
        "id": 344687619,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847574
    },
    {
        "content": "<p>Here most relevant is <code>Meta.synthInstance</code> probably</p>",
        "id": 344687739,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847610
    },
    {
        "content": "<p>The only profiling option that I am familiar with from an IDE is <code>set_option profiler</code>. There is a build flag for this also, right?</p>",
        "id": 344687813,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344687426\">said</a>:</p>\n<blockquote>\n<p>is it just Leo and Gabriel?</p>\n</blockquote>\n<p>Right now, yes.</p>",
        "id": 344687908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679847708
    },
    {
        "content": "<p>You can still end up with output that looks “the same” but where lean says no. Then <code>pp.all</code> might help</p>",
        "id": 344688049,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679847768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344686924\">said</a>:</p>\n<blockquote>\n<p>You could probably just <code>change</code> the <code>⇑↑f</code> to <code>f</code> and this might make the rewrite succeed.</p>\n</blockquote>\n<p>hmm... that's not working</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: gets around lean4#2074</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">image_rootSet</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.Splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">p.rootSet</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">p.rootSet</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rootSet</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finset.coe_image</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Multiset.toFinset_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">f.coe_toRingHom</span><span class=\"o\">]</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Multiset.toFinset</span> <span class=\"o\">(</span><span class=\"n\">Multiset.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">roots</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">rootSet</span> <span class=\"n\">p</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">roots_map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">splits_id_iff_splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">f.comp_algebra_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">root_set</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 344692211,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679850142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'll just push what I have done so far. After the heartbeat fixes, 5 errors remain</p>",
        "id": 344692848,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679850562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344679017\">said</a>:</p>\n<blockquote>\n<p>By inspecting the Lean 3 code I know <code>h</code> is of a type <code>x✝ ∈ ∅</code>. This should simplify to <code>False</code> which has <code>elim</code> as a property, but it doesn't simplify</p>\n</blockquote>\n<p>I'm not sure if this is the case, but there's at least one case involving x \\in empty where a definition changed between lean 3 and lean 4 which means that you now need to insert the relevant not_mem_empty lemma (or whatever it's called) explicitly</p>",
        "id": 344692952,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679850620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344692952\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344679017\">said</a>:</p>\n<blockquote>\n<p>By inspecting the Lean 3 code I know <code>h</code> is of a type <code>x✝ ∈ ∅</code>. This should simplify to <code>False</code> which has <code>elim</code> as a property, but it doesn't simplify</p>\n</blockquote>\n<p>I'm not sure if this is the case, but there's at least one case involving x \\in empty where a definition changed between lean 3 and lean 4 which means that you now need to insert the relevant not_mem_empty lemma (or whatever it's called) explicitly</p>\n</blockquote>\n<p>I already solved that with <code>by simp only [Finset.not_mem_empty] at h</code></p>",
        "id": 344693015,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679850663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233107/near/344685221\">said</a>:</p>\n<blockquote>\n<p>You can click on a <code>_</code> in the infoview.</p>\n</blockquote>\n<p>It's not working in the Lean Web Editor (?)</p>",
        "id": 344697559,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679853179
    },
    {
        "content": "<p>Now trying to fix <code>cases h.subst ((mem_roots _).2 hx)</code> (L196), the first of the 5 remaining errors</p>",
        "id": 344697631,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679853224
    },
    {
        "content": "<p>Well this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">roots_ne_zero_of_splits'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Splits</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf0</span> <span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"o\">(</span><span class=\"n\">f.map</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f.map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_root_of_splits'</span> <span class=\"n\">i</span> <span class=\"n\">hs</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hf0</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">natDegree_eq_of_degree_eq_some</span> <span class=\"n\">h</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eval_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f.map</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">simp_all</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h.subst</span> <span class=\"o\">((</span><span class=\"n\">mem_roots</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But is there a neater way?</p>",
        "id": 344699008,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679854038
    },
    {
        "content": "<p>But then the error in <code>natDegree_eq_card_roots'</code> is much more complicated, I need help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">natDegree_eq_card_roots'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hsplit</span> <span class=\"o\">:</span> <span class=\"n\">Splits</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natDegree</span> <span class=\"bp\">=</span> <span class=\"n\">Multiset.card</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.map</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">natDegree_zero</span><span class=\"o\">,</span> <span class=\"n\">roots_zero</span><span class=\"o\">,</span> <span class=\"n\">Multiset.card_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_prod_multiset_X_sub_C_mul</span> <span class=\"o\">(</span><span class=\"n\">p.map</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">splits_id_iff_splits</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hsplit</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">])</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">add_right_eq_self</span><span class=\"o\">]</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natDegree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">roots_ne_zero_of_splits'</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">splits_of_splits_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hsplit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">hr</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">monic_prod_multiset_X_sub_C.ne_zero</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 344700250,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679854751
    },
    {
        "content": "<p>Please help me with this PR, my brain is fried</p>",
        "id": 344703684,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679857110
    }
]