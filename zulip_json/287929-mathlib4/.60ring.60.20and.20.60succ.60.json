[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> has marked this topic as unresolved.</p>",
        "id": 340493202,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678323163
    },
    {
        "content": "<p>2 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20cast_sub.20in.20ring\">#mathlib4 &gt; ✔ cast_sub in ring</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 340493204,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678323164
    },
    {
        "content": "<p>I looked into this example reported by <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> and it seems to me that the reason it worked in mathlib3 was sheer luck.  In mathlib3, <code>ring_nf</code> normalizes <code>n.succ + 2</code> to itself, whereas in mathlib4 it normalizes it to <code>2 + n.succ</code>.  The former is defeq to the normalized form <code>n + 3</code> and the latter is not defeq to the normalized form <code>3 + n</code>.</p>",
        "id": 340493459,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678323355
    },
    {
        "content": "<p>Question: was there design in the mathlib3 version, not just luck?  That is, was there a conscious choice to order the atoms in such a way that numerals got the atom-number that would put them furthest to the right in the normalized form?</p>",
        "id": 340493734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678323512
    },
    {
        "content": "<p>Anyway, this good luck is only occasionally useful: most statements involving <code>nat.succ</code> are <em>not</em> solved by mathlib3 <code>ring</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 340494563,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678324006
    },
    {
        "content": "<p>I think that was by design, although using it to prove things about <code>succ</code> is luck</p>",
        "id": 340495143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678324418
    },
    {
        "content": "<p>The design part is that when normalizing polynomial expressions it prefers to put high degree terms on the left since this matches paper mathematics</p>",
        "id": 340495236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678324481
    },
    {
        "content": "<p>For me a very common idiom in mathlib3 is <code>simp [nat.succ_eq_add_one], ring</code></p>",
        "id": 340552862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678354289
    },
    {
        "content": "<p><code>simp</code> tends to do <code>push_cast</code>y-like stuff, which also really helps here.</p>",
        "id": 340553012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678354331
    },
    {
        "content": "<p>While porting a file, I ran into a similar issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>This is a sillily minimized example: initially, I thought it was a more interesting failure...</p>",
        "id": 361774004,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685286945
    },
    {
        "content": "<p><code>ring</code> doesn't actually know anything about the <code>succ</code> function (in lean 3 or lean 4), so this is mostly an accident of implementation</p>",
        "id": 361786915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685291769
    },
    {
        "content": "<p>I completely understand, although it seems that the final ordering made it likelier to succeed in Lean 3 with <code>succ</code> than it does now.  Anyway, I left a porting note!</p>",
        "id": 361787265,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685291917
    }
]