[
    {
        "content": "<p>I was wondering if there is agreement that we should not rely on default variable names for tactics and name them explicitly. This came up here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8440#discussion_r1398254656\">8440 discussion</a> for the <code>by_cases</code> tactic. I looked in the code and there are quite a few places where we use <code>by_cases</code> without an explicit variable name and then refer to <code>h</code> later.<br>\nShould those places be cleaned up?<br>\nShould <code>by_cases</code> use an inaccessible name by default?</p>",
        "id": 403143341,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700477431
    },
    {
        "content": "<p>Yes and yes, imo, and I've got a branch somewhere that does most of it</p>",
        "id": 403154767,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700481590
    },
    {
        "content": "<p>I also completely agree.</p>",
        "id": 403154886,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700481613
    },
    {
        "content": "<p>I don't really mind whether <code>by_cases</code> produces inaccessible names, but it should be consistent with <code>cases</code>.</p>",
        "id": 403156915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700482343
    },
    {
        "content": "<p>nice, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>!  <a href=\"https://github.com/leanprover-community/mathlib4/tree/by_cases-name-force\">https://github.com/leanprover-community/mathlib4/tree/by_cases-name-force</a></p>",
        "id": 403160791,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700483794
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8533\">#8533</a> for the usage changes</p>",
        "id": 403195247,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700494487
    },
    {
        "content": "<p>I was taking a look at fixing <code>by_cases</code>. I'm wondering, do we want the tactic to use an inaccessible name, or do we want it to use <code>this</code>?</p>",
        "id": 403220331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700503517
    },
    {
        "content": "<p>Hmm, one consideration is that using an inaccessible name encourages/enforces better code readability: the hypothesis has to be explicitly created before it’s explicitly used.</p>",
        "id": 403221000,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700503785
    },
    {
        "content": "<p>We use <code>have := ...</code> to use the <code>this</code> anaphora.</p>\n<p>One point against it for <code>by_cases</code> is that <code>by_cases</code> seems like a tactic version of  <code>if</code>.</p>\n<p>One point for it is that the name-free version is not useful unless you're using <code>assumption</code> or <code>simp [*]</code>.</p>",
        "id": 403221468,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700503962
    },
    {
        "content": "<p>Another point against might be to prevent overlap with <code>have :=</code>!</p>",
        "id": 403222469,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700504388
    },
    {
        "content": "<p>This is all we need, fwiw:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- Mathlib/Tactic/Basic.lean</span>\n<span class=\"gi\">+++ Mathlib/Tactic/Basic.lean</span>\n<span class=\"gu\">@@ -58,13 +58,6 @@ def pushFVarAliasInfo [Monad m] [MonadInfoTree m]</span>\n<span class=\"w\"> </span>      let decl := newLCtx.get! new\n<span class=\"w\"> </span>      pushInfoLeaf (.ofFVarAliasInfo { id := new, baseId := old, userName := decl.userName })\n\n<span class=\"gd\">-/--</span>\n<span class=\"gd\">-`by_cases p` makes a case distinction on `p`,</span>\n<span class=\"gd\">-resulting in two subgoals `h : p ⊢` and `h : ¬ p ⊢`.</span>\n<span class=\"gd\">--/</span>\n<span class=\"gd\">-macro \"by_cases \" e:term : tactic =&gt;</span>\n<span class=\"gd\">-  `(tactic| by_cases $(mkIdent `h) : $e)</span>\n<span class=\"gd\">-</span>\n<span class=\"w\"> </span>syntax \"transitivity\" (ppSpace colGt term)? : tactic\n<span class=\"w\"> </span>set_option hygiene false in\n<span class=\"w\"> </span>macro_rules\n</code></pre></div>",
        "id": 403222477,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700504395
    },
    {
        "content": "<p>Core lean's <code>by_cases</code> actually has <code>h</code> be inaccessible. It's an early mathlib4 tactic (which pre-dates that one I believe) that has it be accessible. <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean#L61C1-L66\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean#L61C1-L66</a></p>",
        "id": 403222495,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700504402
    },
    {
        "content": "<p>(I was just testing this on your branch)</p>",
        "id": 403222588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700504431
    },
    {
        "content": "<p>Do you want to do the followup PR to remove it?</p>",
        "id": 403222598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700504439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60by_cases.60using.20the.20default.20argument/near/403222469\">said</a>:</p>\n<blockquote>\n<p>Another point against might be to prevent overlap with <code>have :=</code>!</p>\n</blockquote>\n<p>Though, on that note, does anything besides <code>have</code> use <code>this</code>? If not it might be nice to keep it a <code>have</code> exclusive.</p>",
        "id": 403222620,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700504452
    },
    {
        "content": "<p>Yeah, I'm planning to make that PR once <a href=\"https://github.com/leanprover-community/mathlib4/pull/8533\">#8533</a> lands</p>",
        "id": 403222670,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700504473
    },
    {
        "content": "<p>(Fwiw, I’m not strictly against <code>this</code>—it just so happens all the points I’ve thought of are points against.)</p>",
        "id": 403222710,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700504498
    },
    {
        "content": "<p><code>suffices</code> uses <code>this</code></p>",
        "id": 403223217,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700504703
    },
    {
        "content": "<p>I'm not sure the fact that <code>this</code> is only used right now with <code>have</code>/<code>suffices</code> is a point against it having other uses, so long as they're similarly binding-like.</p>\n<p>I see <code>by_cases</code> as a binding-like construct, and it's controlled enough that it's clear what <code>this</code> refers to.</p>",
        "id": 403223499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700504825
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8542\">#8542</a></p>",
        "id": 403230504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700507745
    }
]