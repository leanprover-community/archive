[
    {
        "content": "<p>Hi, I think I found a bug. Take a look at the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Asymptotics.Asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.ArithmeticFunction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">Real</span> <span class=\"n\">Asymptotics</span> <span class=\"n\">Filter</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> primes in Ico -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">prime_Ico</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">Nat.Prime</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Primorial of primes &lt; z -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Pr</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">prime_Ico</span> <span class=\"mi\">1</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">card_prod_primes</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Pr</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">atTop</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsBigO</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsBigOWith</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eventually_of_forall</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">nsmul_one</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span><span class=\"n\">sigma_zero_apply</span><span class=\"o\">,</span> <span class=\"n\">Pr</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">card_prod_primes</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">push_cast</span>\n    <span class=\"n\">gcongr</span>\n    <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prime_Ico</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">card_filter_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_Ico</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">sub_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_filter.mp</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">zero_le_two</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">cast_nonneg</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(The proof is necessary for the bug to appear.) On line 19 with <code>example : ...</code>, there is a linter warning</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span>\n<span class=\"n\">unused</span> <span class=\"kd\">variable</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">linter.unusedVariables</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, if you replace <code>d</code> with <code>_</code>, Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">BigOperators.bigsumin'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Pr</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400448353,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699239590
    },
    {
        "content": "<p>Actually, replacing <code>d</code> with <code>__</code> works i.e. gets rid of the error + compiles. Is that intended?</p>",
        "id": 400448449,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699239624
    },
    {
        "content": "<p>Doesn't solve your discovered bug of the elaboration function, but the unused var linter iirc ignores vars with leading underscores</p>",
        "id": 400455204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699243762
    },
    {
        "content": "<p>Oh, that's interesting, thanks :)</p>",
        "id": 400457514,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699244590
    },
    {
        "content": "<p><code>_</code> is classified as a hole instead of a variable, and it's an oversight that summation notation cannot handle holes. I'm hoping to have this fixed soon-ish incidental to some other work on scoped notations like this.</p>",
        "id": 400462864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699246960
    },
    {
        "content": "<p>I see, the fix will be appreciated since it works for e.g. <code>fun _ =&gt; 1</code> :)</p>",
        "id": 400462916,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699247021
    }
]