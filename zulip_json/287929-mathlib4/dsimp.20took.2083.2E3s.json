[
    {
        "content": "<p>After the salacious lede, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3067\">!4#3067</a> currently builds (allowing infinite time) but is extremely slow in two places. (If you thought <a href=\"https://github.com/leanprover-community/mathlib4/pull/2364\">!4#2364</a> was bad...) Any perf whisperers are very welcome to take a look. I will keep poking at it with my primitive instruments.</p>",
        "id": 344938511,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679941512
    },
    {
        "content": "<p>I'm looking at <code>prime_rename_iff</code>, and one thing I've found is that this partial proof elaborates almost instantly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prime_rename_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">s</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">symm</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sumAlgEquiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this one times out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prime_rename_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">s</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">symm</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sumAlgEquiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 344957592,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947289
    },
    {
        "content": "<p>I noticed that also. I tried feeding it things with <code>@</code> and I think it did help a bit.</p>",
        "id": 344957750,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679947343
    },
    {
        "content": "<p>I think you if also change from <code>s^c</code> to just some <code>t</code> is also helps (if memory serves)</p>",
        "id": 344957972,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679947441
    },
    {
        "content": "<p>It looks like it has something to do with how <code>[...]</code> binders get resynthesized from scratch even if they're available from unification?</p>\n<p>This is instant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.AlgEquiv.symm'</span> <span class=\"o\">{</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">A₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">A₂</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A₁</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A₂</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A₁</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prime_rename_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">s</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prime</span> <span class=\"o\">(</span><span class=\"n\">rename</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">eqv1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sumAlgEquiv</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm'</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 344958453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947643
    },
    {
        "content": "<p>Perhaps <code>AlgEquiv.symm</code> should have only implicit arguments since they can all be inferred from <code>e</code>.</p>",
        "id": 344958492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947661
    },
    {
        "content": "<p>I assume the same problem afflicts <code>trans</code>?</p>",
        "id": 344958702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679947741
    },
    {
        "content": "<p>Untested theory: they get resynthesized and they're slightly different, in a way where unification slowly but surely eventually succeeds.</p>",
        "id": 344958723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947751
    },
    {
        "content": "<p>(And if anyone's following along, the <code>classical</code> isn't the culprit. It's slow with or without it.)</p>",
        "id": 344958779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20took.2083.2E3s/near/344958702\">said</a>:</p>\n<blockquote>\n<p>I assume the same problem afflicts <code>trans</code>?</p>\n</blockquote>\n<p>Yeah, I'd guess so.</p>",
        "id": 344958866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679947811
    },
    {
        "content": "<p>Does<code>refine</code> and  <code>?_</code> achieve this effect? (With <code>@</code>)</p>",
        "id": 344958973,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679947859
    },
    {
        "content": "<p>Yeah, I noticed that porting note and couldn't immediately think of what might cause that, but looking at it again, it seems like using <code>(_)</code> instead of <code>?_</code> works too. Could you test it on your computer?</p>",
        "id": 344959391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679948022
    },
    {
        "content": "<p>My understanding is that <code>(_)</code> causes Lean to interpret this as a placeholder for an expression that goes into that argument, rather than a placeholder for an instance argument. (A \"natural metavariable\" vs a \"synthetic metavariable\" -- these are filled in by typeclass inference.)</p>",
        "id": 344959610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679948091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20took.2083.2E3s/near/344958723\">said</a>:</p>\n<blockquote>\n<p>Untested theory: they get resynthesized and they're slightly different, in a way where unification slowly but surely eventually succeeds.</p>\n</blockquote>\n<p>I think that's accurate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">903590</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 344959869,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679948188
    },
    {
        "content": "<p>I think this gives me a sense of how to work around the issue. I will test it out later (unless someone beats me to it!) Thanks for the <code>(_)</code> tip</p>",
        "id": 344960426,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679948398
    },
    {
        "content": "<p>Though I guess we should ask whether the signature of <code>AlgEquiv.symm</code>, <code>AlgEquiv.trans</code>... should change</p>",
        "id": 344961129,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679948607
    },
    {
        "content": "<p>Just to summarize some things I've sort of figured out recently, regarding <code>(_)</code> vs <code>?_</code>, I think neither create synthetic metavariables, but in <code>refine</code> the <code>(_)</code> metavariables must be solved for and the <code>?_</code> are allowed to not be solved for. The <code>?_</code> metavariables are also special in that once they get through <code>refine</code>, they get turned into metavariables that <em>can't</em> be solved for via unification anymore, since they're marked as being unassignable (though tactics can override this using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withAssignableSyntheticOpaque#doc\">docs4#Lean.Meta.withAssignableSyntheticOpaque</a>).</p>",
        "id": 344961475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679948720
    },
    {
        "content": "<p><code>(_)</code> is new behavior for refine in Lean 4 right?</p>",
        "id": 344961758,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679948823
    },
    {
        "content": "<p>I don't think the <code>(_)</code> is refine-specific -- it's just alters how the elaborator deals with placeholders.</p>",
        "id": 344962042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679948927
    },
    {
        "content": "<p>I also think it's new to Lean 4, since Lean 3 didn't have a way to represent <code>(_)</code> before it got to the elaborator.</p>",
        "id": 344962128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679948958
    },
    {
        "content": "<p><code>AlgEquiv.trans</code> is tricky, since if you use the <code>transitivity</code> tactic you want to synthesize typeclasses for the middle term.</p>",
        "id": 344962312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679949022
    },
    {
        "content": "<p>The problem also crops up for <code>MulEquiv.symm</code> in <code>uniqueFactorizationMonoid_of_fintype</code> later on I think</p>",
        "id": 344962515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679949100
    },
    {
        "content": "<p>Eg </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">IsDomain.toCancelCommMonoidWithZero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n<span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>is fine but the condensed version is not</p>",
        "id": 344963142,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679949342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3067\">!4#3067</a> no longer requires infinite time. Ultimately there were some diamonds that Lean could resolve given time. Removing appropriate instances sped things up significantly. Thanks to <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  for the help</p>",
        "id": 345503284,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680119773
    }
]