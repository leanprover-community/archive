[
    {
        "content": "<p>If any meta-expert want to help bumping <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'s book, the first challenge is to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"kn\">hiding</span> <span class=\"n\">Rat</span> <span class=\"n\">mkRat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"sd\">/-- Two integers are congruent modulo `n`, if their difference is a multiple of `n`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int.ModEq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">a</span> <span class=\"s2\">\" ≡ \"</span> <span class=\"n\">b</span> <span class=\"s2\">\" [ZMOD \"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInt_ModEq_true</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hab</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"mi\">0</span>\n      <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInt_ModEq_false</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">≠</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"o\">,</span> <span class=\"n\">hbn</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">change</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">_</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hn</span>\n      <span class=\"n\">replace</span> <span class=\"n\">han</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">han</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hbn</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hbn</span>\n      <span class=\"n\">replace</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">ha</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hb</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hab</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.exists_lt_and_lt_iff_not_dvd</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n      <span class=\"n\">cases'</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">hab</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hab</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"sd\">/-- The `norm_num` extension which identifies expressions of the form `a ≡ b [ZMOD n]`,</span>\n<span class=\"sd\">such that `norm_num` successfully recognises both `a` and `b` and they are small compared to `n`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">norm_num</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalModEq</span> <span class=\"o\">:</span> <span class=\"n\">NormNumExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">rn</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.instRingInt</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">za</span><span class=\"o\">,</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">ra.toInt</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zb</span><span class=\"o\">,</span> <span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rb.toInt</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rn.toInt</span> <span class=\"n\">i</span>\n  <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">=</span> <span class=\"n\">zb</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `true` if `a` and `b` reduce to the same integer</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_true</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `false` if `0 &lt; n`, `a` reduces to `a'` with `0 ≤ a' &lt; n`,</span>\n    <span class=\"c1\">-- and `b` reduces to `b'` with `0 ≤ b' &lt; n`</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">za</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pan</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">zb</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pbn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pa0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zb</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pb0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_false</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pn</span> <span class=\"bp\">$</span><span class=\"n\">pan</span> <span class=\"bp\">$</span><span class=\"n\">pbn</span> <span class=\"bp\">$</span><span class=\"n\">pa0</span> <span class=\"bp\">$</span><span class=\"n\">pb0</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 393932065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994408
    },
    {
        "content": "<p>I'll take a quick look</p>",
        "id": 393932133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994433
    },
    {
        "content": "<p>It would be great if CI were enabled for that repo so that I could see the erro in the PR</p>",
        "id": 393932229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994453
    },
    {
        "content": "<p>More generally, it might be nice if there were a CI template made explicitly somewhere that projects could copy / adapt, to ease the setup for people making Lean 4 projects</p>",
        "id": 393932465,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695994541
    },
    {
        "content": "<p>I think you can just copy the one in mathlib?</p>",
        "id": 393932692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695994619
    },
    {
        "content": "<p>Maybe it isn't clear but the snippet I pasted above <em>is</em> a mwe.</p>",
        "id": 393933000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994740
    },
    {
        "content": "<p>You can paste it into a scratch file in current mathlib.</p>",
        "id": 393933042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695994757
    },
    {
        "content": "<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">pa'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">IsInt</span> <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">na</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pa</span>\n  <span class=\"k\">let</span> <span class=\"n\">pb'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">IsInt</span> <span class=\"bp\">«$</span><span class=\"n\">b</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">nb</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pb</span>\n</code></pre></div>\n<p>seems to fix it</p>",
        "id": 393934849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995436
    },
    {
        "content": "<p>(and using the primed versions later)</p>",
        "id": 393934861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995441
    },
    {
        "content": "<p>The infoview can't be trusted to show the types that Qq actually sees</p>",
        "id": 393934899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995454
    },
    {
        "content": "<p>Hmm, actually somehow that makes an error appear on an earlier line</p>",
        "id": 393935145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995527
    },
    {
        "content": "<p>Working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The `norm_num` extension which identifies expressions of the form `a ≡ b [ZMOD n]`,</span>\n<span class=\"sd\">such that `norm_num` successfully recognises both `a` and `b` and they are small compared to `n`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">norm_num</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalModEq</span> <span class=\"o\">:</span> <span class=\"n\">NormNumExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">rn</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.instRingInt</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">za</span><span class=\"o\">,</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">ra.toInt</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zb</span><span class=\"o\">,</span> <span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rb.toInt</span>\n  <span class=\"k\">let</span> <span class=\"n\">pa'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">IsInt</span> <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">na</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pa</span>\n  <span class=\"k\">let</span> <span class=\"n\">pb'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">IsInt</span> <span class=\"bp\">«$</span><span class=\"n\">b</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">nb</span><span class=\"bp\">»</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pb</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rn.toInt</span> <span class=\"n\">i</span>\n  <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">=</span> <span class=\"n\">zb</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `true` if `a` and `b` reduce to the same integer</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_true</span> <span class=\"bp\">$</span><span class=\"n\">pa'</span> <span class=\"bp\">$</span><span class=\"n\">pb'</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `false` if `0 &lt; n`, `a` reduces to `a'` with `0 ≤ a' &lt; n`,</span>\n    <span class=\"c1\">-- and `b` reduces to `b'` with `0 ≤ b' &lt; n`</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">za</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pan</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">zb</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pbn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pa0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zb</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pb0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_false</span> <span class=\"bp\">$</span><span class=\"n\">pa'</span> <span class=\"bp\">$</span><span class=\"n\">pb'</span> <span class=\"bp\">$</span><span class=\"n\">pn</span> <span class=\"bp\">$</span><span class=\"n\">pan</span> <span class=\"bp\">$</span><span class=\"n\">pbn</span> <span class=\"bp\">$</span><span class=\"n\">pa0</span> <span class=\"bp\">$</span><span class=\"n\">pb0</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 393935265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995579
    },
    {
        "content": "<p>Thanks. Any idea what was the explanation?</p>",
        "id": 393935327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695995607
    },
    {
        "content": "<p><code>let rn : Result q($n) ← derive n</code> was redundant and I guess confused Qq</p>",
        "id": 393935664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995700
    },
    {
        "content": "<p>Otherwise, the problem is that  the destructuring <code>let</code> binding doesn't actually record the type information in a way that Qq can see it</p>",
        "id": 393935713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995721
    },
    {
        "content": "<p>As a general strategy, if something fails in Qq, try adding a <code>let</code> binding with an explicit type somewhere; even if the goal view says Lean already knows the type</p>",
        "id": 393935805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995754
    },
    {
        "content": "<p>I think Qq elaborates the terms before the goal view does, and so gets them in a less-elaborated state</p>",
        "id": 393935886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695995768
    },
    {
        "content": "<p>It doesn't really explained why it worked before, but thanks.</p>",
        "id": 393936707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695996043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Qq.20error.20in.20MOP.20update/near/393932229\">said</a>:</p>\n<blockquote>\n<p>It would be great if CI were enabled for that repo so that I could see the erro in the PR</p>\n</blockquote>\n<p>Looking at the repo again, I think the answer is \"this is a generated repo that is committed to by a script, the real repo is somewhere secret and may or may not have CI\"</p>",
        "id": 393936778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695996062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm sorry you went to all this work, I actually have a bump in the private version which covers the Qq changes, but I didn't want to change the book version mid-semester.</p>",
        "id": 393938536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695996659
    },
    {
        "content": "<p>I'll add you to the private version.</p>",
        "id": 393938607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695996681
    },
    {
        "content": "<p>Are you currently using the book? I thought that would happen next semester.</p>",
        "id": 393938649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695996695
    },
    {
        "content": "<p>I pushed a fully fixed Library folder in my PR.</p>",
        "id": 393938692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695996710
    },
    {
        "content": "<p>Yes, I am teaching the couse three semesters in a row.</p>",
        "id": 393938697,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695996712
    },
    {
        "content": "<p>Tangentially, how does one debug Qq troubles?</p>",
        "id": 393971387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696006646
    }
]