[
    {
        "content": "<p>I'm getting a <code>maxHearbeats</code> error in this PR for the theorem <code>exists_extension_forall_mem_of_closedEmbedding</code>. <br>\nThis is the output of <code>set_option profiler true</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">164</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">282</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">277</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">277</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">283</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">282</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">276</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">275</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">281</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">289</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">281</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">285</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">273</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">275</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">277</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">278</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">280</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">276</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">275</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">278</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">277</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">278</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">276</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">274</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">273</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">274</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">230</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 360435045,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684822171
    },
    {
        "content": "<p>The file builds with <code>set_option maxHeartbeats 250000</code></p>",
        "id": 360435168,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684822205
    },
    {
        "content": "<p>Your replacement for <code>coe</code> should be fine, but have you tried using <code>(↑)</code> instead?</p>",
        "id": 360437398,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684822977
    },
    {
        "content": "<p>Using \\uparrow the next line <code>continuous_toFun := continuous_subtype_val.comp (h.continuous.comp f.continuous)</code> throws an error</p>",
        "id": 360439331,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684823709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Continuous.comp</span> <span class=\"n\">continuous_subtype_val</span> <span class=\"o\">(</span><span class=\"n\">Continuous.comp</span> <span class=\"o\">(</span><span class=\"n\">OrderIso.continuous</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ContinuousMap.continuous</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">∘</span> <span class=\"bp\">↑</span><span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.130576</span> <span class=\"bp\">∘</span> <span class=\"bp\">↑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 360439394,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684823731
    },
    {
        "content": "<p>Something has gone wrong in the toFun field before that</p>",
        "id": 360489033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684837784
    },
    {
        "content": "<p>There shouldn't be a metavariable there</p>",
        "id": 360489051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684837791
    }
]