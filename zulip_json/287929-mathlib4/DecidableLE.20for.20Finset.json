[
    {
        "content": "<p>This is related to PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1600\">mathlib4#1600</a>. In mathlib3, the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/set_family/compression/uv.html#uv.card_compress\">uv.card_compress</a> is able to infer that finset has a <code>[decidable_rel has_le.le]</code> (this is needed for <code>uv.compress</code>). However, nowhere in mathlib3 is an instance <code>decidable_le</code> for finsets explicitly declared, as far as I can tell. There is one for multisets, which I'm guessing this infers, since finsets essentially are multisets. Is that correct?</p>\n<p>Anyway, in mathlib4, this does not work anymore, and when porting uv.card_compress, lean bemoans the lack of a <code>DecidableRel fun x x_1 =&gt; x ≤ x_1</code> instance for the Finset.Le, as seen in the above PR. Should we add such an instance to Data.Finset.Basic, or how can we make lean infer it better?</p>",
        "id": 321924295,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673988920
    },
    {
        "content": "<p>It definitely is not using the one from <code>multiset</code>. Try looking at the corresponding statements in mathlib and inspect them with the infoview to see what instance is inferred.</p>",
        "id": 321935176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673993335
    },
    {
        "content": "<p>I would guess it finds the instance for <code>subset</code></p>",
        "id": 321936133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673993735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thanks, I spent so much time in lean 4 that I forgot that the lean 3 infoview is actually powerful enough to tell me that very easily. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.decidable_dforall_finset\">docs#finset.decidable_dforall_finset</a> is what it finds, which is also ported, so I still don't quite get the problem, but that brings me closer to understanding it (tomorrow after some sleep)</p>",
        "id": 321936670,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673993944
    },
    {
        "content": "<p>Hmm, did the definition of <code>subset</code> change?</p>",
        "id": 321936979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673994094
    },
    {
        "content": "<p>There was a similar change with the definition on <code>set</code></p>",
        "id": 321937012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673994115
    },
    {
        "content": "<p>I would guess that Lean3 just unfolded in places where Lean4 doesn't</p>",
        "id": 321939185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673995031
    },
    {
        "content": "<p>I found a similar problem in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4762\">!4#4762</a> were the following is failing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>  <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>It was synthesizedautomatically in Lean 3.<br>\nIt is of course straightforward to prove but it is strange that Lean 4 cannot do it by itself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>  <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">And.decidable</span>\n</code></pre></div>",
        "id": 366532007,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686841462
    },
    {
        "content": "<p>I don't think this is that strange; typeclass search isn't allowed to unfold definitions</p>",
        "id": 366532716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686841595
    },
    {
        "content": "<p>So why did it work in Lean3?</p>",
        "id": 366532896,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686841630
    },
    {
        "content": "<p>Because in Lean 3 random things did random amounts of unfolding</p>",
        "id": 366532967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686841646
    },
    {
        "content": "<p>So I should just add the instance where it is needed? Or somewhere globally?</p>",
        "id": 366533186,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686841683
    },
    {
        "content": "<p>There should be a global instance as close to where prod.has_le is defined as possible</p>",
        "id": 366533762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686841776
    },
    {
        "content": "<p>The instance should assume <code>Decidable (the implementation of le)</code> and produce <code>Decidable (x ≤ y)</code></p>",
        "id": 366534083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686841820
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5083\">!4#5083</a></p>",
        "id": 366541721,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686843209
    }
]