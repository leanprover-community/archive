[
    {
        "content": "<p>What does <code>⊢ ℤ</code> mean as a goal?</p>",
        "id": 386264033,
        "sender_full_name": "RL",
        "timestamp": 1692570079
    },
    {
        "content": "<p>It means that Lean is expecting you to provide an integer. (So for example <code>exact -37</code> closes that goal in tactic mode. But...)</p>\n<p>Most of the time if you end up with a goal like that you have probably taken a wrong turn (the exception is if you aim to prove that the set of integers is nonempty). That may have been caused by a previous tactic application, for example.</p>",
        "id": 386264309,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692570455
    },
    {
        "content": "<p>So even if Lean says \"No goals\", the proof is wrong in that case?</p>",
        "id": 386264788,
        "sender_full_name": "RL",
        "timestamp": 1692570942
    },
    {
        "content": "<p>No, that should be ok then!</p>\n<p>But it is uncommon to end up with that state in a proof. If you have for example <em>reduced</em> your proof to showing that the integers are a nonempty set, then that might still happen, of course.</p>",
        "id": 386264863,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692571010
    },
    {
        "content": "<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> we can explain how it happened.</p>",
        "id": 386264889,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692571053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20is.20not.20a.20proposition.2E.2E.2E/near/386264889\">said</a>:</p>\n<blockquote>\n<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> we can explain how it happened.</p>\n</blockquote>\n<p>Sure, but my current proof is quite complicated, I will try to post a MWE. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 386264968,
        "sender_full_name": "RL",
        "timestamp": 1692571136
    },
    {
        "content": "<p>Are you sure you are not looking at the expected type panel with your cursor on some expression whose type is Int?</p>",
        "id": 386264991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692571182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20is.20not.20a.20proposition.2E.2E.2E/near/386264889\">said</a>:</p>\n<blockquote>\n<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> we can explain how it happened.</p>\n</blockquote>\n<p>Here is one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.LegendreSymbol.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">legendreSym</span> <span class=\"n\">p</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">legendreSym.eq_pow</span> <span class=\"n\">p</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 386265523,
        "sender_full_name": "RL",
        "timestamp": 1692571772
    },
    {
        "content": "<p>I think Patrick has got the right diagnosis here.</p>",
        "id": 386265926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572234
    },
    {
        "content": "<p>When I look at your example, if I have the cursor on the next line after your proof I see \"no goals\".</p>",
        "id": 386265937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572266
    },
    {
        "content": "<p>With my cursor either before or after the character <code>3</code> I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">No</span> <span class=\"n\">goals</span>\n<span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">pp</span><span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n</code></pre></div>",
        "id": 386266009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20is.20not.20a.20proposition.2E.2E.2E/near/386265926\">said</a>:</p>\n<blockquote>\n<p>I think Patrick has got the right diagnosis here.</p>\n</blockquote>\n<p>Thanks, so the proof is correct and it is just a display issue?</p>",
        "id": 386266298,
        "sender_full_name": "RL",
        "timestamp": 1692572538
    },
    {
        "content": "<p>I don't think it's even a display issue.</p>",
        "id": 386266308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572552
    },
    {
        "content": "<p>There are two separate messages being displayed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">pp</span><span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℤ</span>\n</code></pre></div>",
        "id": 386266326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572588
    },
    {
        "content": "<p>Since you have your cursor still on the <code>3</code>, Lean is telling you what it expects to see at that position.</p>",
        "id": 386266343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572618
    },
    {
        "content": "<p>If you move your cursor to the next line, that message goes away and you just see <code>Tactic state:  no goals</code>.</p>",
        "id": 386266351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572635
    },
    {
        "content": "<p>(If you're seeing something different, perhaps it is a display issue, and you could post a screenshot.)</p>",
        "id": 386266400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692572653
    },
    {
        "content": "<p>Hum ok, thanks !</p>",
        "id": 386266414,
        "sender_full_name": "RL",
        "timestamp": 1692572670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350358\">RL</span> has marked this topic as resolved.</p>",
        "id": 386266424,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692572690
    },
    {
        "content": "<p>RL, if you think this Expected type panel is confusing and you never use it then your can hide it by default in the VSCode Lean extension settings.</p>",
        "id": 386267015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692573308
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/lGgztkZRXIlng5P48Y42my4Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lGgztkZRXIlng5P48Y42my4Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lGgztkZRXIlng5P48Y42my4Z/image.png\"></a></div>",
        "id": 386267102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692573392
    }
]