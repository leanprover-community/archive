[
    {
        "content": "<p>Hi! I was reading the Model Theory section in mathlib4 lately and found an unusual naming in ModelTheory.Basic between lines 288-292:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Structure</span> <span class=\"n\">where</span>\n  <span class=\"n\">funMap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">L.Functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"n\">RelMap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">L.Relations</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I imagine <code>Structure.funMap</code> should be named as <code>Structure.FunMap</code>. Is there a particular reason for this or it is a typo, possible due to the migration of codes from Lean3?</p>",
        "id": 407290804,
        "sender_full_name": "Jin Wei",
        "timestamp": 1702316749
    },
    {
        "content": "<p>I think the current names precisely follow the <a href=\"https://leanprover-community.github.io/contribute/naming.html#general-conventions\">naming conventions</a>:</p>\n<blockquote>\n<p>Props and Types (or Sort) (inductive types, structures, classes) are in UpperCamelCase.<br>\nFunctions are named the same way as their return values (e.g. a function of type A → B → C is named as though it is a term of type C).<br>\nAll other terms of Types (basically anything else) are in lowerCamelCase.</p>\n</blockquote>",
        "id": 407292985,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702317655
    },
    {
        "content": "<p>Thanks! That makes sense now.</p>",
        "id": 407295352,
        "sender_full_name": "Jin Wei",
        "timestamp": 1702318498
    }
]