[
    {
        "content": "<p>Some performance issue both people who like to debug those:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.Haar.OfBasis</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">--set_option synthInstance.maxHeartbeats 100000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance.instances</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SecondCountableTopologyEither</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 388386049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693507346
    },
    {
        "content": "<p>(from the sphere eversion ongoing port)</p>",
        "id": 388386095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693507368
    },
    {
        "content": "<p>22000 suffices on the toolchain from <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> but <code>infer_instance</code> is doing tons of work there</p>",
        "id": 388386827,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693507654
    },
    {
        "content": "<p>Does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">FiniteDimensional.complexToReal</span>\n</code></pre></div>\n<p>suffice on your toolchain?</p>",
        "id": 388390155,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693508958
    },
    {
        "content": "<p>Yes</p>",
        "id": 388391158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693509455
    },
    {
        "content": "<p>Why do you need <code>FiniteDimensional</code> at all?</p>",
        "id": 388400042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693513292
    },
    {
        "content": "<p>Does it try the second space first?</p>",
        "id": 388400058,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693513300
    }
]