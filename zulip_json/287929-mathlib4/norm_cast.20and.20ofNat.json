[
    {
        "content": "<p>Should <code>norm_cast</code> recognize <code>OfNat.ofNat</code> as a coercion so that it can normalize expressions like <code>ENNReall.ofReal (OfNat.ofNat n)</code>?</p>",
        "id": 400182716,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699034496
    },
    {
        "content": "<p>In some sense, <code>ofNat</code> is a cast from nat literals to a type with <code>OfNat</code> instance.</p>",
        "id": 400182911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699034539
    },
    {
        "content": "<p>Isn't the issue more that <code>ENNReal.ofReal</code> isn't a cast? Rather than it being <code>ofNat</code> or any other coercion to reals?</p>",
        "id": 400183595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699034765
    },
    {
        "content": "<p>Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- gets rid of a cast</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- does nothing</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>  <span class=\"c1\">--- same</span>\n</code></pre></div>",
        "id": 400183690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699034802
    },
    {
        "content": "<p>Second example works if you add <code>@[norm_cast]</code>  to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.ofReal_coe_nat#doc\">docs#ENNReal.ofReal_coe_nat</a> (done locally)</p>",
        "id": 400183806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699034859
    },
    {
        "content": "<p>And we don't have a lemma about <code>ofReal</code> and <code>Rat.cast</code>.</p>",
        "id": 400183916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699034890
    },
    {
        "content": "<p>Because we don't have <code>ENNReal.ofRat</code>.</p>",
        "id": 400184095,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699034972
    },
    {
        "content": "<p>So if you add that attribute what goes wrong with <code>ofNat</code>? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>",
        "id": 400185170,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699035466
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.ofReal_ofNat#doc\">docs#ENNReal.ofReal_ofNat</a> can't be a <code>norm_cast</code> lemma.</p>",
        "id": 400185404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699035565
    },
    {
        "content": "<p>I still don't understand what  isn't working that you think should be though?</p>",
        "id": 400185583,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699035641
    },
    {
        "content": "<p>Like this works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">ENNReal.ofReal_coe_nat</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"mi\">7</span>  <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>\n</code></pre></div>",
        "id": 400185622,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699035666
    },
    {
        "content": "<p>If you have <code>ofNat</code>s in the goal applied to anything other than nat literals then I don't know how they would get there</p>",
        "id": 400185699,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699035710
    },
    {
        "content": "<p>I was proving a generic lemma about <code>OfNat.ofNat</code> but probably you're right: all these lemmas should be done by defeq to a <code>Nat.cast</code> lemma.</p>",
        "id": 400185925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699035799
    },
    {
        "content": "<p>I was working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/8163\">#8163</a>. I added <code>norm_cast</code> to <code>ofReal_coe_nat</code>, then tried the next lemma and failed.</p>",
        "id": 400186606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699036117
    }
]