[
    {
        "content": "<p>In Lean 3, one can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">my_lemma</span> <span class=\"n\">f</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and get to goals: one for the main state after <code>obtain</code> and one for filling in the hole <code>_</code>. In Lean 4, there is only 1 goal and the proof is broken.</p>",
        "id": 326500194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675828205
    },
    {
        "content": "<p>does <code>my_lemma f ?_</code> work for you here?</p>",
        "id": 326500516,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1675828493
    },
    {
        "content": "<p>I've encountered this too.</p>",
        "id": 326501431,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675829012
    },
    {
        "content": "<p>No</p>",
        "id": 326501762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675829317
    },
    {
        "content": "<p>For now, I do the following:</p>\n<ol>\n<li>replace <code>obtain</code> with <code>have</code> to see the types of the holes.</li>\n<li>Prove the holes before <code>have</code>.</li>\n<li>Bring back <code>obtain</code>.</li>\n</ol>",
        "id": 326501794,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675829360
    },
    {
        "content": "<p>It would be nice to have <code>?_</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this another <code>withMainContext</code>? From what you say, I have an impression that it usually is.</p>",
        "id": 326501877,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675829428
    },
    {
        "content": "<p>Can you make a MWE?</p>",
        "id": 326685493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675890631
    },
    {
        "content": "<p>Can't make it \"loose\" the goal yet. Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that forces me to supply <code>_</code> right away without a syntax to postpone it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mwe_obtain</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b'</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">b'</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">aux</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 326706147,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675899347
    },
    {
        "content": "<p>Here's an example of this I hit quite early in the port, if it helps:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/526ab32ac62f3b2a9004d911c7ead5f3468d13ed/Mathlib/Order/Zorn.lean#L216\">https://github.com/leanprover-community/mathlib4/blob/526ab32ac62f3b2a9004d911c7ead5f3468d13ed/Mathlib/Order/Zorn.lean#L216</a></p>",
        "id": 326711258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675902427
    },
    {
        "content": "<p>Note: the general pattern here is that any tactic which elaborates a term (and there are a lot of them) has to explicitly collect subgoals from the result and append them after the main tactic results, or else it will have the same no-defer behavior as <code>exact</code></p>",
        "id": 326711656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675902696
    },
    {
        "content": "<p>I looked into this, and it looks like this cannot easily be implemented in <code>RCases</code> because the required function <code>elabTermWithHoles</code> is in <code>TacticM</code> while the main elaboration of rcases is in <code>TermElabM</code>. I think this would need a change to lean4 core</p>",
        "id": 326724750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675913489
    },
    {
        "content": "<p>I'll try to find an example when it makes the goals disappear.</p>",
        "id": 326725652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675914211
    },
    {
        "content": "<p>note that <code>cases</code> also does not support this, or <code>interval_cases</code> or a long list of other tactics</p>",
        "id": 326726188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675914604
    },
    {
        "content": "<p>you should not get dropped goals though</p>",
        "id": 326726229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675914626
    },
    {
        "content": "<p><code>refine</code> (or things that macro expand to it) is basically the only tactic that supports <code>?_</code> -&gt; subgoals</p>",
        "id": 326726279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675914678
    },
    {
        "content": "<p>A non-minimal example: in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2157\">!4#2157</a>, if you change the proof of <code>exists_of_compact</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_of_compat</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteQuotient</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">compat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteQuotient</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">ofLe</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Qs</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Qs</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteQuotient</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Q.proj</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Qs</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">proj</span> <span class=\"n\">Q</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">Qs</span> <span class=\"n\">Q</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span>\n    <span class=\"n\">IsCompact.nonempty_inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_of_directed_nonempty_compact_closed</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteQuotient</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Q.proj</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">Qs</span> <span class=\"n\">_</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">directed_of_inf</span> <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">singleton_nonempty</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">Q.proj_surjective</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">isClosed_preimage</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isCompact</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isClosed_preimage</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">compat</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fiber_subset_of_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>then the first <code>obtain</code> looses a goal.</p>",
        "id": 326730147,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675917678
    },
    {
        "content": "<p>The non-filled in <code>_</code> is in <code>directed_of_inf fun A B h =&gt; _</code></p>",
        "id": 326730224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675917729
    },
    {
        "content": "<p>I ran into this also. It would be great if we could come up with a fix (aside from Yury's <code>have</code> then <code>obtain</code> workaround).</p>",
        "id": 360657496,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684885227
    },
    {
        "content": "<p>Oh actually, I misread Yury's workaround and found another. This works and requires minimal changes to the proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">expression_with_holes</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- this gives us the goal we need.</span>\n<span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">pattern</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 360657822,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684885435
    }
]