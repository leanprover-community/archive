[
    {
        "content": "<p>In mathlib, in order to prove <code>epi g</code>, one could use <code>apply category_theory.epi_of_epi f g</code>, which would create the goal <code>epi (f ≫ g)</code> if this class could not be infered automatically. Is there a way to do the same in mathlib4? (Apart from <code>refine @epi_of_epi _ _ _ _ _ f g ?_</code>.)</p>",
        "id": 329804318,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677181141
    },
    {
        "content": "<p>mathlib3 also had <code>apply_with ... { instances := ff }</code>. I suppose we have something similar in mathlib4?</p>",
        "id": 329806504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181896
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/ApplyWith.html#Mathlib.Tactic.applyWith\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/ApplyWith.html#Mathlib.Tactic.applyWith</a></p>",
        "id": 329806759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181987
    },
    {
        "content": "<p>So I think(hope) that <code>apply (config := { synthAssignedInstances := false }) epi_of_epi f g</code> should work?</p>",
        "id": 329807188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677182156
    },
    {
        "content": "<p>I had just tried this, but it does not seem to work on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2467/files#diff-8fa3d373d90b7fa7d6c162fd2cd095aa9f8b9d8317ccd32b5d3e20e18d361196R105\">https://github.com/leanprover-community/mathlib4/pull/2467/files#diff-8fa3d373d90b7fa7d6c162fd2cd095aa9f8b9d8317ccd32b5d3e20e18d361196R105</a></p>",
        "id": 329808671,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677182640
    },
    {
        "content": "<p>hmmm... that's not great.</p>",
        "id": 329809896,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677183098
    },
    {
        "content": "<p><code>refine</code> probably won't scale for this application. I don't know of any other tricks through.</p>",
        "id": 329810134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677183185
    },
    {
        "content": "<p>A \"trick\" that works well in this and similar situations is to use regular definitions rather than classes.</p>",
        "id": 336560440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677265126
    }
]