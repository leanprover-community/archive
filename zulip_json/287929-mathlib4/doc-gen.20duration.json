[
    {
        "content": "<p>Sooooo...doc-gen is now taking longer than 6 hours to generate documentation: <a href=\"https://github.com/leanprover/doc-gen4/actions/runs/4659085245\">https://github.com/leanprover/doc-gen4/actions/runs/4659085245</a> (quite a surprising increase of duration from ~4h20min to 6 hours, maybe it also just ran on a weaker CPU or something? Regardless this is an issue we will face sooner or later) as I see it we have pretty much 3 options:</p>\n<ol>\n<li>simplest one: somehow increase max duration of the runner</li>\n<li>almost as simple: I've been wondering this for a while, how many people actually use the built-in LeanInk feature? Not running all of the files through LeanInk again would be a tremendous time saver.</li>\n<li>I go figure out some performance increasing stuff within the code of doc-gen4 itself</li>\n</ol>\n<p>What are people's opinions on 1 and 2?</p>",
        "id": 348323492,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681170153
    },
    {
        "content": "<p>I can’t speak for others, but I personally have never used the leanink feature of docs4.</p>",
        "id": 348323713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681170324
    },
    {
        "content": "<p>On a more positive note! Thanks to the shenanigans we figured out for the generation itself doc-gen has now run without a single failure for 3 weeks straight \\o/</p>",
        "id": 348323732,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681170342
    },
    {
        "content": "<p>On a separate note, is it possible to somehow hide instance names (possibly under some option)? With the autogenerated names being so long, the auto populated list under the search bar quickly becomes unwieldy when the instance names are around.</p>",
        "id": 348323886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681170446
    },
    {
        "content": "<p>I've also not used leanink, but I do think it is quite nice, and that not using it is more out of habit than anything else. It definitely is more convenient for quickly checking out a proof than loading lean. So it would be a shame to give up on it completely. Temporarily disabling it is fine if performance improvements would take too long right now.</p>",
        "id": 348323967,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1681170493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  We could also run doc-gen4 on the Hoskinson machines, which are significantly faster.</p>",
        "id": 348324177,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681170666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/348323886\">said</a>:</p>\n<blockquote>\n<p>On a separate note, is it possible to somehow hide instance names (possibly under some option)? With the autogenerated names being so long, the auto populated list under the search bar quickly becomes unwieldy when the instance names are around.</p>\n</blockquote>\n<p>If lean tags them auto generated on its own that would be trivially possible yes. If not I guess I could compare the real name to another run of the name generator and check if the names match up? So yes should be possible. Can you open an issue about it?</p>",
        "id": 348324190,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681170673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/348324177\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>  We could also run doc-gen4 on the Hoskinson machines, which are significantly faster.</p>\n</blockquote>\n<p>Oh sure if that can be arranged it would be nice. doc-gen should also close to linearly profit from more CPUs due to the inherent parallelism of the task.</p>",
        "id": 348324310,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681170746
    },
    {
        "content": "<p>It's as simple as changing the <code>runs-on</code> field in the github actions, but we'd need to move the repo that runs the action to the leanprover-community org.</p>",
        "id": 348324383,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681170831
    },
    {
        "content": "<p>I see...I guess in theory mathlib4 could just run the task on its own? I'll try to patch up a PR for that in the coming days.</p>",
        "id": 348324515,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681170926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/348323492\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>almost as simple: I've been wondering this for a while, how many people actually use the built-in LeanInk feature? Not running all of the files through LeanInk again would be a tremendous time saver.</li>\n</ol>\n</blockquote>\n<p>I think in principle it is nice for the docs to include the full LeanInk output, but the current display is hard to read. Some work on Alectryon would improve this, notably <br>\n<a href=\"https://github.com/leanprover/alectryon/issues/4\">https://github.com/leanprover/alectryon/issues/4</a><br>\nto fix a line length issue, and<br>\n<a href=\"https://github.com/leanprover/alectryon/issues/5\">https://github.com/leanprover/alectryon/issues/5</a><br>\nthe development of a better default syntax highlighting theme for Pygments (currently everything is in shades of grey and orange).</p>",
        "id": 348804401,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681323893
    },
    {
        "content": "<p>It would also be more useful if there were an Alectryon display designed specifically for large projects, with some kind of navigation bar; it's less useful when the only way to navigate between files is to click the \"back\" button and then navigate within the docs.</p>",
        "id": 348808358,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681325069
    },
    {
        "content": "<p>The docs are one of our \"outward-facing\" products, a first point of interaction of newcomers with the standard libraries, and for this reason it's good for them to look polished. I would actually argue for removing the Alectryon links until issues such as the above are fixed.</p>",
        "id": 348809289,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681325339
    },
    {
        "content": "<p>Some other pain points with LeanInk (I have no idea what it would take to fix these):</p>\n<ol>\n<li>when you click the <code>ink</code> link for a declaration, it doesn't take you directly to that declaration (i.e., the anchors don't work, and looking at the source it doesn't seem like there <em>are</em> any anchors).</li>\n<li>Hover works for many things (and that's fantastic!), but not notation, so you can't hover over <code>→ₐ</code> to see that it's an <code>AlgHom</code>.</li>\n</ol>",
        "id": 348816036,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681327463
    },
    {
        "content": "<p>That being said, I have used LeanInk several times to examine proofs without firing up Lean. It's quite handy, so even if we nix it for now, I would certainly like to get it back in the docs at some point. What would be <em>incredibly</em> nice to have eventually, but probably too much to hope for, is to have this embedded in the docs per declaration, so that clicking <code>ink</code> just shows the LeanInk without transfering you to another page.</p>",
        "id": 348817075,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681327778
    },
    {
        "content": "<blockquote>\n<p>and the development of a better default syntax highlighting theme for Pygments (currently everything is in shades of grey and orange).</p>\n</blockquote>\n<p>Does pygments even know about Lean 4 yet?</p>",
        "id": 348821948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681329433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/348816036\">said</a>:</p>\n<blockquote>\n<ol>\n<li>when you click the <code>ink</code> link for a declaration, it doesn't take you directly to that declaration (i.e., the anchors don't work, and looking at the source it doesn't seem like there <em>are</em> any anchors).</li>\n</ol>\n</blockquote>\n<p>Agreed, I opened<br>\n<a href=\"https://github.com/leanprover/alectryon/issues/6\">https://github.com/leanprover/alectryon/issues/6</a><br>\nfor this a few months ago. Maybe the other point you mention is also worth opening an issue for?</p>",
        "id": 348837849,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681335725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/348821948\">said</a>:</p>\n<blockquote>\n<p>Does pygments even know about Lean 4 yet?</p>\n</blockquote>\n<p>I believe Alectryon is bundling its own Lean 4 lexer, it's not in the official Pygments distribution.<br>\n<a href=\"https://github.com/leanprover/alectryon/blob/master/alectryon/pygments_lexer.py\">https://github.com/leanprover/alectryon/blob/master/alectryon/pygments_lexer.py</a></p>",
        "id": 348838153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681335887
    },
    {
        "content": "<p>Huh, that's pretty weird. We should probably just upstream that lexer at some point</p>",
        "id": 348843717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681338407
    },
    {
        "content": "<p><a href=\"https://github.com/pygments/pygments/blob/master/pygments/lexers/theorem.py#L389-L484\">Here's the Lean3 one</a> for comparison</p>",
        "id": 348843921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681338503
    },
    {
        "content": "<p>on a related note, it'd be nice if the mathlib4 docgen was indexed by google and such liek</p>",
        "id": 348849172,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681340934
    },
    {
        "content": "<p>A few things. First things first doc-gen4 does not use alectryon (it uses LeanInk to get the raw data though) because I didn't want to pull in an additional step of complexity with depending on python and 3rd party python libs and so on. Instead it renders the HTML on its own based on raw data from LeanInk. Furthermore it does also not use pygments to do the highlighting it uses the semantic highlighting from the LSP server, if that was improved the highlighting in the render too would be improved. </p>\n<p>Te bug with the going right to the declarations I didn't notice until now. I'll see if I can push an easy fix</p>\n<p>Also note that rolling its own renderer is not really a big thing for doc-gen, the part of alectryon that renders is in fact fairely trivial: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/LeanInk/Output.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/LeanInk/Output.lean</a></p>",
        "id": 349025561,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681371857
    },
    {
        "content": "<p>AH yeah looking at the implementation again I remember why I didn't implement the thing where it jumps straight. Basically LeanInk does not actually do any distinction between almost all of hte tokens in a Lean file, so based on the raw data I am getting from LeanInk it is not really possible to figure out where a declaration actually is. I guess there are ways around this? Like for example I could figure out the line it is on from the environment and try to match that up with a line in the resulting HTML file? But that feels rather hacky. So I guess some work needs to be done on the LeanInk side of things.</p>",
        "id": 349026676,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681372145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/349025561\">said</a>:</p>\n<blockquote>\n<p>doc-gen4 does not use alectryon ... it does also not use pygments to do the highlighting it uses the semantic highlighting from the LSP server, if that was improved the highlighting in the render too would be improved. </p>\n</blockquote>\n<p>The issue I was raising was not about the tagging of tokens for the syntax highlighting, just about the theme, which is very grey- and orange-heavy.  It would be great if someone who knows what they're doing with colour choices developed a nice theme with a wide range of different easy-on-the-eye colours for different token types, or even just manually translated the default VSCode one, which is ok, or used the default Pygments one, which is also ok: that was the issue I posted on the Alectryon repo.<br>\n<a href=\"https://github.com/leanprover/alectryon/issues/5\">https://github.com/leanprover/alectryon/issues/5</a><br>\nEven though doc-gen is not using Alectryon, it seems to be using a <a href=\"https://github.com/leanprover/doc-gen4/blob/main/static/alectryon/pygments.css\">CSS style sheet</a> which is copied from <a href=\"https://github.com/leanprover/alectryon/blob/master/recipes/pygments.css\">Alectryon's one</a>.</p>",
        "id": 349985370,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681487012
    },
    {
        "content": "<p>The line length issue I mentioned, i.e.<br>\n<a href=\"https://github.com/leanprover/alectryon/issues/4\">https://github.com/leanprover/alectryon/issues/4</a><br>\nis also seemingly an issue in an <a href=\"https://github.com/leanprover/alectryon/blob/master/alectryon/assets/alectryon.css\">Alectryon CSS file</a> which has been copied over without change into <a href=\"https://github.com/leanprover/doc-gen4/blob/main/static/alectryon/alectryon.css\">doc-gen</a>.</p>",
        "id": 349988096,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1681487731
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3520\">https://github.com/leanprover-community/mathlib4/pull/3520</a></p>",
        "id": 350970537,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681891612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc-gen.20duration/near/350970537\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3520\">https://github.com/leanprover-community/mathlib4/pull/3520</a></p>\n</blockquote>\n<p>I marked as awaiting-review, hope that's okay</p>",
        "id": 350976555,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681893235
    },
    {
        "content": "<p>Yes</p>",
        "id": 350977490,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681893474
    },
    {
        "content": "<p>The PR is in mathlib4 now with a speedup to ~1h from ~5h ! <span aria-label=\"stock market\" class=\"emoji emoji-1f4b9\" role=\"img\" title=\"stock market\">:stock_market:</span></p>",
        "id": 351749431,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682119048
    },
    {
        "content": "<p>Is this just the result of using more powerful machines or were there other changes?</p>",
        "id": 351781636,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682141165
    },
    {
        "content": "<p>The former for now</p>",
        "id": 351844030,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682160564
    }
]