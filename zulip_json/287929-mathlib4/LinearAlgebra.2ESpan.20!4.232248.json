[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toSpanNonzeroSingleton</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"c1\">-- error on the type</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   RingHomInvPair (RingHom.id K) ?m.479207</span>\n</code></pre></div>",
        "id": 327777866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382093
    },
    {
        "content": "<p>Adding an instance <code>RingHomInvPair (RingHom.id K) (RingHom.id K)</code> doesn't even help.</p>",
        "id": 327778010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382127
    },
    {
        "content": "<p>What does it want with <code>pp.explicit true</code>?</p>",
        "id": 327778239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676382191
    },
    {
        "content": "<p>This is surely still the typeclass eta bug</p>",
        "id": 327778294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676382207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"bp\">@</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">K</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield</span> <span class=\"n\">K</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield</span> <span class=\"n\">K</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingHom.id</span> <span class=\"n\">K</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">K</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toRing</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toDivisionRing</span> <span class=\"n\">K</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)))))</span>\n    <span class=\"bp\">?</span><span class=\"n\">m.479207</span>\n</code></pre></div>",
        "id": 327778471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382246
    },
    {
        "content": "<p>Aha, I see <code>NonAssocRing</code>. So maybe the fix that <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span> found will work here as well</p>",
        "id": 327778557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382266
    },
    {
        "content": "<p>Yep, that helps!</p>",
        "id": 327779181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382449
    },
    {
        "content": "<p>file is now error-free</p>",
        "id": 327779440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382520
    },
    {
        "content": "<p>Do you remember the issue number I'm thinking of?</p>",
        "id": 327779913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676382666
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> ?</p>",
        "id": 327780282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676382762
    }
]