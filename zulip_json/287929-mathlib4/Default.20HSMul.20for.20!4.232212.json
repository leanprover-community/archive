[
    {
        "content": "<p>I <em>think</em> the solution for the instance failure in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2212\">!4#2212</a> is to create a default HSMul instance along the lines of <a href=\"#narrow/stream/287929-mathlib4/topic/Heterogeneous.20scalar.20multiplication/near/320626039\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Heterogeneous.20scalar.20multiplication/near/320626039</a></p>\n<p>Unfortunately, <code>Subsemiring</code>doesn't currently have an <code>HSMul</code> instance -- what would be the right declaration to mirror (in <code>RingTheory.Subsemiring.Basic</code>)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R'</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">S.toSubmonoid.smul</span>\n</code></pre></div>\n<p>I've tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_instance]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hsmul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R'</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"n\">α</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">α</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n</code></pre></div>\n<p>but get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 327337943,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676178671
    },
    {
        "content": "<p>(It's possible I'm getting confused at which is the scalar here).</p>",
        "id": 327338145,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676178887
    },
    {
        "content": "<p>We want <code>(m • S).toSubsemiring = m • S.toSubsemiring</code> to typecheck...</p>",
        "id": 327338263,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676179033
    },
    {
        "content": "<p>And Lean isn't currently understanding that the <code>smul</code> on the rhs is just the ordinary <code>smul</code> on <code>Subsemiring R</code> that's already been defined.</p>",
        "id": 327338687,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676179455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Default.20HSMul.20for.20!4.232212/near/327338263\">said</a>:</p>\n<blockquote>\n<p>We want <code>(m • S).toSubsemiring = m • S.toSubsemiring</code> to typecheck...</p>\n</blockquote>\n<p>This is a very different instance to the one you describe in the previous message.</p>",
        "id": 327362004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676197116
    },
    {
        "content": "<p>This one is the <code>Pointwise</code> <code>smul</code> in <code>RingTheory.Subsemiring.Pointwise</code>?</p>",
        "id": 327405431,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676218129
    },
    {
        "content": "<p>If I do, behind <code>Pointwise</code> the similar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hsmul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n</code></pre></div>\n<p>I get...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But again, I don't understand why Lean isn't seeing <code>m • S.toSubsemiring</code> as using the <code>Pointwise</code> <code>smul</code> instance...</p>",
        "id": 327406820,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676218805
    },
    {
        "content": "<p>Huh, if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pointwise_smul_toSubsemiring</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span> <span class=\"bp\">=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">S.toSubsemiring</span> <span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>despite the <code>open Pointwise</code> previously in the file...</p>",
        "id": 327410624,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676220788
    },
    {
        "content": "<p>which seems to be the root of the problem here?</p>",
        "id": 327410736,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676220835
    },
    {
        "content": "<p>I don't understand why you are writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hsmul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>(also this seems to have two different <code>S</code>s?)</p>",
        "id": 327413047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676221897
    },
    {
        "content": "<p>The instance we're looking for is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hsmul</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subsemiring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 327413066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676221911
    },
    {
        "content": "<p>Again, I <em>think</em> the root of the issue here is that Lean isn't finding the existing <code>Pointwise</code> instance of <code>SMul</code>.</p>",
        "id": 327415103,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676222990
    },
    {
        "content": "<p>I was basing the declaration above on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instHSMul#doc\">docs4#instHSMul</a> but I cheerfully admit that I'm probably very confused...</p>",
        "id": 327415286,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676223097
    },
    {
        "content": "<p>Your declaration works in the sense that it typechecks (<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>) but doesn't work in the sense that we still can't find it in <code>Subsemiring</code></p>",
        "id": 327415605,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676223267
    },
    {
        "content": "<p>OK, so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pointwise_smul_toSubsemiring</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Subsemiring.pointwiseMulAction.smul</span> <span class=\"n\">m</span> <span class=\"n\">S.toSubsemiring</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works just fine, which highlights that the issue here is that Lean can't find the instance of <code>SMul</code> for <code>Subsemiring</code> behind <code>Pointwise</code></p>",
        "id": 327416408,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676223692
    },
    {
        "content": "<p>I would guess this is the  structure eta in typeclas resolution problem</p>",
        "id": 327418818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676225226
    },
    {
        "content": "<p>Can you make a mwe?</p>",
        "id": 327418832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676225236
    },
    {
        "content": "<p>Will work on it…</p>",
        "id": 327422044,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676227127
    },
    {
        "content": "<p>The most trivial <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> does what it says in the label...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.scopedNS</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span>  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- One is the neutral element for `•` -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Pointwise</span>\n<span class=\"kd\">end</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Point</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pointwiseMulAction</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Point</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Point.pointwiseMulAction</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Point</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PointX</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PointX</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pointwiseMulAction</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">PointX</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">PointX.pointwiseMulAction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toPoint</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">:</span> <span class=\"n\">PointX</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Point</span> <span class=\"n\">α</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pointX_smul_toPoint</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">PointX</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPoint</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p.toPoint</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PointX</span>\n</code></pre></div>\n<p>Any pointers to the most effective way to complexify this to make it break would be appreciated...</p>",
        "id": 327651501,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676324580
    },
    {
        "content": "<p>Note that mathport is <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20CI.20is.20failing\">also having problems with subrings</a> at the moment...</p>",
        "id": 327662833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676329477
    }
]