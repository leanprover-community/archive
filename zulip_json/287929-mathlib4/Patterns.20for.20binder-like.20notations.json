[
    {
        "content": "<p>How hard would it be to have pattern matching for binder-like notation like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=iSup#doc\">docs#iSup</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsum%3F#doc\">docs#finsum?</a> I want to write a sum over a triple product and I'm very sad that I have to do things like <code>ijk.2.1</code>. That feels so Lean3 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 376271722,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689670743
    },
    {
        "content": "<p>Here's something that seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"s2\">\"⨆ \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">body</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">iSup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span>\n<span class=\"k\">#check</span> <span class=\"bp\">⨆</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>It needs <code>priority := low</code> so it tries the one defined by <code>notation3</code> first, otherwise you get an ambiguous interpretation error.</p>",
        "id": 376279109,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689672425
    },
    {
        "content": "<p>Thanks a lot Kyle! Could it also be made to work with multiple binders? Sorry I should try to learn these basic things at some point <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 376282495,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689673209
    },
    {
        "content": "<p>Yeah,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"s2\">\"⨆ \"</span> <span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"bp\">*</span> <span class=\"s2\">\", \"</span> <span class=\"n\">body</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">iSup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but be warned that you can't interleave this notation with anything involving extended binders. (Probably we need to extend <code>extBinders</code> to support this correctly.)</p>",
        "id": 376284546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689673685
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/234\">std4#234</a> is a PR that's a first step to get pattern matching for notation defined by <code>notation3</code>. The next step would be to update <a href=\"http://this%20macro_rules\">https://github.com/leanprover-community/mathlib4/blob/289d4614f7ce6887b91265508ba35ff04922b9ba/Mathlib/Mathport/Notation.lean#L40-L55</a> with the new <code>extBinder</code> syntax.</p>",
        "id": 387433063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693061818
    }
]