[
    {
        "content": "<p>Setting up the branch &amp; PR now :)</p>",
        "id": 320590511,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673409570
    },
    {
        "content": "<p>hm, this is weird -- Lean is having trouble showing these recursions are structural induction. Let me push so someone can take a look.</p>",
        "id": 320596090,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412031
    },
    {
        "content": "<p>For <code>List.Perm.symm</code> I genuinely have no clue what is wrong. I'm gonna try to write it directly with <code>rec</code> (like it was in mathlib3) but I feel like the compiler should accept that definition</p>",
        "id": 320596409,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> often it helps if you specify exactly which arguments you want to use in the induction step</p>",
        "id": 320596639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673412278
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>instead of just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320596703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673412309
    },
    {
        "content": "<p>Heh, I'm not even using tactic mode! I'll try writing out all arguments for my recursive calls</p>",
        "id": 320596754,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412338
    },
    {
        "content": "<p>I can get it compiling with a manual rec. Weird.</p>",
        "id": 320599691,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673413531
    },
    {
        "content": "<p>anyone who knows how <code>congr</code> lemmas work: <code>Perm.filter_map</code> and <code>Perm.map</code> were marked <code>@[congr]</code> in mathlib3 but mathlib4 does not like it. thoughts?</p>",
        "id": 320603653,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673415693
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Perm.filter_map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">filterMap</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">filterMap</span> <span class=\"n\">f</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid 'congr' theorem, equality expected</span>\n<span class=\"cm\">  filterMap ?f ?l₁ ~ filterMap ?f ?l₂</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 320603797,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673415750
    },
    {
        "content": "<p>Evidently equivalence relations that aren't equalities are not yet supported.</p>",
        "id": 320603832,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673415772
    },
    {
        "content": "<p>yes, support for congruence with relations other than equality was never that great and they are not a part of simp/congr in lean 4. I don't think they really did anything in lean 3 either, so you can just comment it out (with a porting note).</p>",
        "id": 320619354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673421781
    },
    {
        "content": "<p>Okay, after way too long playing around with it, I figured out what went wrong with <code>perm_inv_core</code> translation</p>\n<p>in lean3 if your goal is <code>∀ {l₁ l₂ r₁ r₂ : list α}, ...</code> and you refine with an elaborator, the motive includes the implicits. but in lean4 doing the same introduces the implicits before generating the motive</p>",
        "id": 320637195,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673425055
    },
    {
        "content": "<p>I fixed it by just making the implicit parameters explicit before refining, but is there a better way to change the elaboration behavior?</p>",
        "id": 320637452,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673425093
    },
    {
        "content": "<p>(and can we do it automatically..? not sure how frequently we're refining by an elaborator though)</p>",
        "id": 320637598,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673425120
    },
    {
        "content": "<p>okay, my brain is tired <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span> feel free to pick it up while I am asleep; otherwise I'll continue in 8hr or so</p>",
        "id": 320641213,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673425756
    },
    {
        "content": "<p>sleep tight!</p>",
        "id": 320641848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673425870
    },
    {
        "content": "<p>What's the lean 4 equiv of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">protected</span><span class=\"o\">]</span> <span class=\"n\">subperm.cons</span>\n</code></pre></div>",
        "id": 320693759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673441135
    },
    {
        "content": "<p>there is no <code>@[protected]</code> attribute, but you can put <code>protected</code> on structure fields and inductive constructors</p>",
        "id": 320715417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673447147
    },
    {
        "content": "<p>What's the syntax for that?</p>",
        "id": 320720286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673448415
    },
    {
        "content": "<p>Huge progress :D thanks Johan!</p>",
        "id": 320741807,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673453965
    },
    {
        "content": "<p>oh wait, Johan and Chris! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 320742025,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673454017
    },
    {
        "content": "<p>I've kicked it on the queue</p>",
        "id": 320744611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673454702
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 320744822,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673454753
    },
    {
        "content": "<p>awesome. I'm now looking into moving stuff from here to Std -- once a file is ported, is it open to PRs that don't align with mathlib3?</p>",
        "id": 320745491,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673454917
    },
    {
        "content": "<p>if it moves to Std, and you leave the <code>#align</code>s in place</p>",
        "id": 320745646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673454954
    }
]