[
    {
        "content": "<p>We currently have three different ways to build an element of <code>Quotient s</code>. Not only is this one more than we had in Lean 3, but the new names are permuted with respect to the old names:</p>\n<table>\n<thead>\n<tr>\n<th><code>Setoid</code> argument</th>\n<th>Lean 3</th>\n<th>Lean 4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(s : setoid _)</code></td>\n<td></td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.mk#doc\">docs#Quotient.mk</a> (core, <code>⟦a⟧</code>)</td>\n</tr>\n<tr>\n<td><code>{s : setoid _}</code></td>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.mk%27\">docs3#quotient.mk'</a></td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.mk%27%27#doc\">docs#Quotient.mk''</a> (mathlib)</td>\n</tr>\n<tr>\n<td><code>[setoid _]</code></td>\n<td><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.mk\">docs3#quotient.mk</a> (<code>⟦a⟧</code>)</td>\n<td><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.mk%27#doc\">docs#Quotient.mk'</a> (core)</td>\n</tr>\n</tbody>\n</table>\n<p>Should we eliminate some of these?</p>",
        "id": 391523295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694964172
    },
    {
        "content": "<p>I started eliminating mk'' in a branch not so long ago, but got distracted</p>",
        "id": 391524668,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694964504
    },
    {
        "content": "<p>Btw, the meaning of ⟦a⟧ also changed between 3 and 4</p>",
        "id": 391554251,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694975800
    },
    {
        "content": "<p>It's now <code>Quotient.mk''</code> but used to be <code>quotient.mk</code>, right?</p>",
        "id": 391554523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694975972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: in mathlib3 this notation took the Setoid as an instance-implicit argument,</span>\n<span class=\"c1\">-- now it's explicit but left as a metavariable.</span>\n<span class=\"c1\">-- We have not yet decided which one works best, since the setoid instance can't always be</span>\n<span class=\"c1\">-- reliably found but it can't always be inferred from the expected type either.</span>\n<span class=\"c1\">-- See also: https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/confusion.20between.20equivalence.20and.20instance.20setoid/near/360822354</span>\n<span class=\"kd\">@[inherit_doc]</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟦\"</span> <span class=\"n\">a</span> <span class=\"s2\">\"⟧\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 391554617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976021
    },
    {
        "content": "<p>I think the problem with <code>Quotient.mk''</code> now is that Lean wants to resynthesize the <code>Setoid</code> instance from scratch, and it refuses to pick it up from the expected type.</p>",
        "id": 391554703,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976111
    },
    {
        "content": "<p>Oh, so <code>mk'' x : Quotient s</code> doesn't work?</p>",
        "id": 391554784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976142
    },
    {
        "content": "<p>I don't believe so</p>",
        "id": 391554791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976150
    },
    {
        "content": "<p>I don't see why <code>mk _</code> would be any different</p>",
        "id": 391554825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976186
    },
    {
        "content": "<p>Lean 4 resynthesizes instances, even for metavariables that have been solved for, and then checks that the value of the metavariable is defeq to the resynthesized instance.</p>",
        "id": 391554915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976238
    },
    {
        "content": "<p>With <code>mk _</code>, it's not an instance argument, so it won't try resynthesizing.</p>",
        "id": 391554994,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976259
    },
    {
        "content": "<p><del><code>mk''</code> also isn't an instance argument</del></p>",
        "id": 391555048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976289
    },
    {
        "content": "<p>Ah sorry, I'm getting my primes confused</p>",
        "id": 391555070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976317
    },
    {
        "content": "<p>The table above was wrong, I've corrected it</p>",
        "id": 391555096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976359
    },
    {
        "content": "<p>Yeah, there's no difference in behavior between using <code>Quotient.mk _ a</code> and <code>Quotient.mk'' a</code>, except perhaps that <code>Quotient.mk''</code> doesn't unfold to <code>Quotient.mk</code></p>",
        "id": 391555219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694976440
    },
    {
        "content": "<p>That seems like a very strong reason to eliminate one of <code>mk</code> and <code>mk''</code> entirely</p>",
        "id": 391555238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/compare/quotient-mk?expand=1\">https://github.com/leanprover-community/mathlib4/compare/quotient-mk?expand=1</a></p>",
        "id": 391555249,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694976482
    },
    {
        "content": "<p>You may as well use the notation there, right?</p>",
        "id": 391555298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694976512
    },
    {
        "content": "<p>Something we've discussed before is making the notation be a notation typeclass. That would help keep <code>Quotient</code> from leaking, if every type that has a quotient could specify exactly how it wants the result type to be represented. Plus this would work for non-<code>Quotient</code> quotients (i.e., types that categorically are a quotient).</p>",
        "id": 391556237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694977215
    },
    {
        "content": "<p>I'm confused about how that would be any different from <code>Setoid</code> being a typeclass, which it already is?</p>",
        "id": 391556331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977297
    },
    {
        "content": "<p>The second part, where you can choose a different type for the quotient than <code>Quotient</code>.</p>",
        "id": 391556350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694977320
    },
    {
        "content": "<p>I don't think mathlib has any places where it wants to do that?</p>",
        "id": 391556479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977365
    },
    {
        "content": "<p>Aren't there at least a lot of abbreviations for <code>Quotient</code>?</p>",
        "id": 391556547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694977392
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingQuot#doc\">docs#RingQuot</a> is the only example that comes to mind</p>",
        "id": 391556548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977392
    },
    {
        "content": "<p>But I was trying to eliminate that in favor of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon#doc\">docs#RingCon</a> anyway</p>",
        "id": 391556602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977405
    },
    {
        "content": "<p>Wherever you have an abbreviation for <code>Quotient</code> and you use the <code>⟦x⟧</code> notation, you get an API leak, since the notation naturally has type <code>Quotient ...</code> rather than your abbreviation.</p>",
        "id": 391556757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694977447
    },
    {
        "content": "<p>One of the issues though is you want some bidirectional communication during elaboration -- an <code>outParam</code> isn't enough (and maybe not even ideal). Given <code>⟦x⟧ : Q</code> you want to derive from <code>Q</code> an <code>X</code> to help elaborate <code>x</code> with expected type <code>X</code>.</p>\n<p>(It's not completely clear that you want <code>X</code> to determine <code>Q</code>, since you might want to use the notation for the quotient into multiple quotient types, though perhaps if you're working with multiple quotient groups you'd want the subgroups you're quotienting by to be explicit in the notation.)</p>",
        "id": 391557727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694977737
    },
    {
        "content": "<p>By \"abbreviation\", do you mean \"<code>def</code> but not <code>abbrev</code>\"?</p>",
        "id": 391558303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977892
    },
    {
        "content": "<p>Because if you're using <code>abbrev</code> then the \"leak\" is by design</p>",
        "id": 391558354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977907
    },
    {
        "content": "<p>I mean the difference between for example <code>QuotientGroup.mk x : G ⧸ s</code> and <code>⟦x⟧ : Quotient someSetoidInst</code></p>",
        "id": 391561545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694978819
    },
    {
        "content": "<p>Even if <code>(⟦x⟧ : G ⧸ s)</code> elaborates, the type of this term is syntactically <code>Quotient ...</code></p>",
        "id": 391561710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694978863
    },
    {
        "content": "<p>Wouldn't it be better if <code>⟦x⟧</code> could have a type that's syntactically what we want in a given context? Seeing a <code>Quotient</code> type in the middle of a proof about groups seems very much like a leaked implementation detail to me.</p>",
        "id": 391561850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694978895
    },
    {
        "content": "<p>Alternatively we could replace <code>HasQuotient</code> with a <code>HasToSetoid</code> class, and make <code>R ⧸ S</code> be notation for <code>Quotient (HasSetoid.toSetoid S)</code></p>",
        "id": 391564669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694980036
    },
    {
        "content": "<p>Was there ever a decision on this?</p>",
        "id": 396355674,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1697140690
    }
]