[
    {
        "content": "<p>How can I prove the following theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.Quiver.Path</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_of_path_heq</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Quiver.Path</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quiver.Path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 387455324,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693081024
    },
    {
        "content": "<p>It seems likely that this isn't provable. Are you able to get <code>x = y</code> by some other means in your application?</p>",
        "id": 387456148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693081895
    },
    {
        "content": "<p>I feared that might be the case. It probably doesn't matter, I don't think the lemma I'm trying to write is technically needed anyway.</p>",
        "id": 387456208,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693081943
    },
    {
        "content": "<p>I guess this is just another consequence of the fact that constructors need not be injective?</p>",
        "id": 387456233,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693081989
    },
    {
        "content": "<p>Type constructors, but yeah. Over in the world of simple graphs we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Walk.copy#doc\">docs#SimpleGraph.Walk.copy</a> to be able to syntactically hold onto equalities on indices and to be able to use <code>Eq</code> rather than <code>HEq</code></p>",
        "id": 387456329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082089
    },
    {
        "content": "<p>Ah, that's interesting. I think I should be able to do something similar - my application only uses thin quivers (i.e. the morphisms lie in <code>Prop</code>).</p>",
        "id": 387456372,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693082156
    },
    {
        "content": "<p>As far as I know quivers only have this implemented for Hom rather than Path: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.cast#doc\">docs#Quiver.Hom.cast</a></p>",
        "id": 387456430,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082191
    },
    {
        "content": "<p>but I suppose you can always concatenate nil paths that have been <code>cast</code>ed</p>",
        "id": 387456455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082220
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Path.cast#doc\">docs#Quiver.Path.cast</a> but (as expected) all the lemmas require equality of endpoints.</p>",
        "id": 387456458,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693082222
    },
    {
        "content": "<p>Ah, ok, good, I forgot Paths have it too.</p>",
        "id": 387456491,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082261
    },
    {
        "content": "<p>The idea with the lemmas is that they can get the endpoint equalities from the term they're being applied to, because the equalities are in the <code>cast</code> term.</p>",
        "id": 387456505,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082282
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 387456548,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693082293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> has marked this topic as resolved.</p>",
        "id": 387456604,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693082394
    }
]