[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/68b9af61cddd38916b471a8050ba69bdd279f140/Mathlib/RingTheory/Localization/FractionRing.lean#L92\">This</a> porting note says that <code>â†‘</code> was useless to automatically cast elements from a domain to its ring of fractions. I wonder if there has been any advance since then. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Localization.FractionRing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>does not type-check, and it seems that the only way to make it work is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFractionRing</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Algebra.cast</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>that looks quite (too?) verbose, no?</p>",
        "id": 401421954,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699640680
    },
    {
        "content": "<p><code>Algebra.cast</code> was an in-progress refactor in mathlib3 (pushed by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>) that was reverted during the port because it conflicted with the lean 4 design of coercions</p>",
        "id": 401422890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699641263
    },
    {
        "content": "<p>For now the canonical spelling is <code>algebraMap _ K a</code>, just like it is for any other algebra</p>",
        "id": 401422926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699641294
    },
    {
        "content": "<p>Fundamentally, it relied on the fact that in Lean 3, <code>Nat.cast</code>, <code>Algebra.cast</code>, <code>Int.Cast</code>, <code>SetLike.coe</code> etc were all \"the same function\"; they were all <code>coe</code> with different instance arguments, but <code>rw</code> and <code>simp</code> do not care about those arguments. As I understand it, the idea was to merge many of the <code>Nat.cast</code> and <code>Int.cast</code> lemmas into <code>Algebra.cast</code>.</p>",
        "id": 401423044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699641380
    },
    {
        "content": "<p>Lean 4 put a spanner in the works by declaring that the <code>coe</code> function no longer exists, forcing these to all be different functions again</p>",
        "id": 401423075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699641408
    },
    {
        "content": "<p>The Lean 4 design isn't stopping us from re-introducing <code>coe</code> in its Lean 3 form, but going against the language design tends not to be liked by the core developers...</p>",
        "id": 401423311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699641548
    },
    {
        "content": "<p>Yes, I can imagine they are not so happy about this. When you say that the canonical spelling is <code>algebraMap _ K a</code>, do you imply that <code>Algebra.cast a</code> (which takes two arguments less, if the type can be inferred) is not good <code>mathlib</code> practice?</p>",
        "id": 401423837,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699641858
    },
    {
        "content": "<p>Yes, because almost all the lemmas are about the <code>algebraMap</code> spelling</p>",
        "id": 401424260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699642109
    },
    {
        "content": "<p>Well, then should I PR a refactor of the above file (and others I might stuble upon) to replace <code>.cast</code> (in the mentioned file, it only occurs once)?</p>",
        "id": 401424373,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699642199
    },
    {
        "content": "<p>It would be reasonable to make a refactor to change them all to .cast at once, but that's a lot of work!</p>",
        "id": 401424419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699642207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> has marked this topic as resolved.</p>",
        "id": 401425228,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699642761
    }
]