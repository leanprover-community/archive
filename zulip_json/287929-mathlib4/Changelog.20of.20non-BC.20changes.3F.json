[
    {
        "content": "<p>After the port-induced refactor ban will be lifted, I expect quite a few refactors. I suggest that every non-bc commit must include a <code>###API Changes</code> section in the description that (a) explains what changed; (b) if needed, gives hints about forward-porting for external projects that depend on <code>mathlib</code>. E.g., \"generalized lemma <code>A</code> to lemma <code>B</code>\".</p>\n<p>Then we can have an autogenerated webpage that lists only these secitons (with \"API Changes\" replaced with the PR title &amp; date).<br>\nWhat do you think about it?</p>",
        "id": 369869836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687830479
    },
    {
        "content": "<p>I'd somewhat rather do the software engineering thing and have <code>@[deprecated \"Use blah.blah.blah instead\"]</code> annotations. But that requires having a deprecation cycle, which is admittedly a bit of a headache.</p>",
        "id": 369871867,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687831636
    },
    {
        "content": "<p>(and prevents using the same name in a refactor, though that might be a good thing)</p>",
        "id": 369871904,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687831665
    },
    {
        "content": "<p>I <em>really</em> don't want to do this via deprecation. Mathlib just changes too fast for that. An <code>API Changes</code> section in each PR description (for which it is relevant) seems reasonable, but why not just use <code>mathlib-changelog</code>? Isn't that what it's for essentially?</p>",
        "id": 369872665,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687832079
    },
    {
        "content": "<p>Mathlib's not afraid to make backwards-incompatible changes (we even have tools like <a href=\"https://mathlib-changelog.org/\">#changelog</a> to help for mathlib3). It's nice that we're able to converge on the \"right\" design for the math library. Most refactors are not a matter of deprecating an old definition or lemma, so I don't think <code>@[deprecated]</code> suffices.</p>\n<p>I like the idea of doing this as messages in PR descriptions, though it'd be nice to have some tooling to help make sure this message actually covers the changes to the API (and helps write the section).</p>",
        "id": 369872769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687832138
    },
    {
        "content": "<p>What about a different annotation that specifies what changed from version X? Something like <code>@[changes_since &lt;commit&gt; \"blah blah blah\"]</code>. Annotations are just so much easier to build tooling for...</p>",
        "id": 369873366,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687832454
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> You mentioned yesterday that you're a non-mathlib user. Mathlib is different from most software engineering projects I think, so beware that wisdom you might have about software engineering may or may not apply here.)</p>",
        "id": 369873427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687832495
    },
    {
        "content": "<p>I've unfortunately become a mathlib user because so many useful tactics are still locked in mathlib land <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> but you're right that I'm almost definitely concerned about a different subset of mathlib than most its users.</p>",
        "id": 369873553,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687832572
    },
    {
        "content": "<p>One big difference is that mathlib is meant to be a mono-repo, and while downstream projects are tolerated, it's preferred that they become part of mathlib.</p>",
        "id": 369873580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687832585
    },
    {
        "content": "<p>Having a changelog is to help users get their projects onto the newest mathlib, to help get things into a state that they can contribute.</p>",
        "id": 369873614,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687832614
    },
    {
        "content": "<p>(I worry about too much math finding its way into Std, because this will make it harder for us to do big refactors. We spent time moving things out of Lean 3 core into mathlib3 for this reason.)</p>",
        "id": 369873720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687832668
    },
    {
        "content": "<p>how was the mathlib3 changelog info for <a href=\"https://mathlib-changelog.org/\">#changelog</a> stored?</p>",
        "id": 369873744,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687832691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Changelog.20of.20non-BC.20changes.3F/near/369873720\">said</a>:</p>\n<blockquote>\n<p>(I worry about too much math finding its way into Std, because this will make it harder for us to do big refactors. We spent time moving things out of Lean 3 core into mathlib3 for this reason.)</p>\n</blockquote>\n<p>I think we should try to restrict the things that are migrated to \"refactor-resistant\" mathematics. It should be something we are pretty okay sticking with long term, because I want Std to have an actual stability policy eventually (maybe not now, but once lean gets a stable release).</p>",
        "id": 369874902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687833253
    },
    {
        "content": "<p>This is also part of the reason I am avoiding the whole mathlib typeclass hierarchy, because this is refactored every tuesday</p>",
        "id": 369875106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687833345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Changelog.20of.20non-BC.20changes.3F/near/369873744\">said</a>:</p>\n<blockquote>\n<p>how was the mathlib3 changelog info for <a href=\"https://mathlib-changelog.org/\">#changelog</a> stored?</p>\n</blockquote>\n<p>My understanding is that this is entirely automated: it parses the <code>git diff</code>s!</p>",
        "id": 369875791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687833542
    },
    {
        "content": "<p>As for parsing <code>git diff</code>s, I can do <code>git log -S lemma_name</code>, find a commit, then try to understand what happened there.</p>",
        "id": 369877325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687834037
    },
    {
        "content": "<p>It would  be nice to have any changelog information right in the editor, though I'm not super sure how you might accomplish that</p>",
        "id": 369878076,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687834320
    },
    {
        "content": "<p>git blame?</p>",
        "id": 369878795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687834605
    },
    {
        "content": "<p>When you port something on top of a new <code>mathlib</code>, a common situation is \"lemma no longer exists\".</p>",
        "id": 370066987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873073
    },
    {
        "content": "<p>A less common situation is \"your notation no longer works\" (see norm notation).</p>",
        "id": 370067220,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873110
    }
]