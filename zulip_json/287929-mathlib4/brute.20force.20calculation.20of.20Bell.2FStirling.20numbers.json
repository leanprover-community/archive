[
    {
        "content": "<p>As part of familiarizing myself with lean4, I am attempting to formalize Bell's and Stirling numbers. With Bhavik, we tried the \"brute force\" counting approach for a small number, like 3. This code works in mathlib3, and doesn't time out up to <code>n = 3</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.partition.finpartition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype_finpartition</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">finpartition</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">a.powerset.powerset.image</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.sup_indep</span> <span class=\"n\">id</span> <span class=\"bp\">∧</span> <span class=\"n\">p.sup</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span><span class=\"o\">),</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_image</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_powerset</span><span class=\"o\">],</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">finset.mem_powerset</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p.le</span> <span class=\"n\">hi</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">],</span>\n      <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p.sup_indep</span><span class=\"o\">,</span> <span class=\"n\">p.sup_parts</span><span class=\"o\">,</span> <span class=\"n\">p.not_bot_mem</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">and_self</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">finpartition</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fintype_finpartition</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">finpartition</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fintype_finpartition</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">finpartition</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fintype_finpartition</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 346438945,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680487195
    },
    {
        "content": "<p>Bhavik also has a version of an explicit partition construction on lists that can go up to <code>n = 8</code>.</p>",
        "id": 346439024,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680487219
    },
    {
        "content": "<p>However, the equivalent code in mathlib4 dies even on the empty partition example!</p>",
        "id": 346439054,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680487234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Finpartition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finpartition.fintype_finset</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">a.powerset.powerset.image</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.SupIndep</span> <span class=\"n\">id</span> <span class=\"bp\">∧</span> <span class=\"n\">p.sup</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p.le</span> <span class=\"n\">hi</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p.supIndep</span><span class=\"o\">,</span> <span class=\"n\">p.supParts</span><span class=\"o\">,</span> <span class=\"n\">p.not_bot_mem</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Finpartition.fintype_finset</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n</code></pre></div>",
        "id": 346439075,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680487259
    },
    {
        "content": "<p>what am I missing/what's the change that causes this \"regression\"?</p>",
        "id": 346439112,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680487272
    },
    {
        "content": "<p>Could it be a missing computable recursor? We've been adding those by hand.</p>",
        "id": 346469387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680505230
    },
    {
        "content": "<p>that's a different kind of computation</p>",
        "id": 346471237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680505901
    },
    {
        "content": "<p>Maybe try with eta experiment? I'm not sure if it would make things better or worse</p>",
        "id": 346471546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680505982
    },
    {
        "content": "<p>That seems to run indefinitely using 100% CPU</p>",
        "id": 346603414,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680535413
    },
    {
        "content": "<p>My guess would be that there's some use of <code>Acc</code> blocking the computation. Either something now uses <code>Acc</code> that didn't before, probably a function defined with pattern matching, or <code>Acc</code> is reducing less often in Lean4 because in general reduction doesn't terminate and the heuristic has slightly changed.</p>",
        "id": 346634271,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1680542413
    },
    {
        "content": "<p>Do you have a suggestion on how to inspect where this could be occurring?</p>",
        "id": 346642795,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680544725
    },
    {
        "content": "<p>I don't know how to \"follow\" a rfl proof in either lean3 or lean4, nor how to interrupt a long running rfl proof</p>",
        "id": 346642902,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680544753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">641187</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.4430</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4430</span>\n</code></pre></div>",
        "id": 346643652,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680544945
    },
    {
        "content": "<p>I turned on </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>but didn't poke it further</p>",
        "id": 346643879,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680544997
    },
    {
        "content": "<p>Just turned off the heart beats bounds to see if it actually finishes</p>",
        "id": 346644369,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680545117
    },
    {
        "content": "<p>It does</p>",
        "id": 346644965,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680545281
    },
    {
        "content": "<p>And now I have 130k lines of output :/</p>",
        "id": 346645836,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680545524
    },
    {
        "content": "<p>This looks like one blocker </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[101.550187s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> 1 =?= List.length<br>\n                          (List.dedup<br>\n                            (<a href=\"http://List.map\">List.map</a><br>\n                              (fun p =&gt;<br>\n                                if h : Finset.SupIndep p id ∧ Finset.sup p id = ∅ ∧ ¬⊥ ∈ p then<br>\n                                  { parts := p, supIndep := (_ : Finset.SupIndep p id),<br>\n                                    supParts := (_ : Finset.sup p id = ∅), not_bot_mem := (_ : ¬⊥ ∈ p) }<br>\n                                else ⊥)<br>\n                              (List.pmap <a href=\"http://Finset.mk\">Finset.mk</a><br>\n                                (Multiset.powersetAux<br>\n                                  (List.pmap <a href=\"http://Finset.mk\">Finset.mk</a> (Multiset.powersetAux [])<br>\n                                    (_ : ∀ (_t : Multiset Unit), _t ∈ Multiset.powerset ∅.val → Multiset.Nodup _t)))<br>\n                                (_ :<br>\n                                  ∀ (_t : Multiset (Finset Unit)),<br>\n                                    _t ∈ Multiset.powerset (Finset.powerset ∅).val → Multiset.Nodup _t)))) ▼<br>\n                      [] </p>\n</div></div>",
        "id": 346647281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680545943
    },
    {
        "content": "<p>This would certainly also take me more than 100 seconds to prove</p>",
        "id": 346650793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680546916
    },
    {
        "content": "<p>Does it break down further into slow things?</p>",
        "id": 346650939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680546960
    },
    {
        "content": "<p>I am tracing instance synthesis to get more info. I have tried <code>set_option trace.Meta.whnf true</code> but I haven't been able to make it work (ever)</p>",
        "id": 346651150,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547016
    },
    {
        "content": "<p>Oh right, there can still be unsolved decidability instance metavariables and stuff while we're doing isDefEq, though I'm not sure why it would be the case here?</p>",
        "id": 346651458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680547120
    },
    {
        "content": "<p>You are putting more thought into than me :)</p>",
        "id": 346651568,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547169
    },
    {
        "content": "<p>I am just assuming they could only occur in the <code>example</code> itself, because ones in the <code>def</code>s it uses would have been solved already.</p>",
        "id": 346651685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680547211
    },
    {
        "content": "<p>The decidability stuff is still not defeq right?</p>",
        "id": 346651815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547265
    },
    {
        "content": "<p>Certainly we need to synthesize some Fintype instance but I guess that happen before everything else</p>",
        "id": 346651840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680547272
    },
    {
        "content": "<p>Hmm</p>",
        "id": 346651924,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547301
    },
    {
        "content": "<p>Going to let this finish but someone else could try using <code>@</code> and <code>(_)</code> on instance argumentsin the meantime</p>",
        "id": 346652115,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547355
    },
    {
        "content": "<p>what do you mean? If you have something like <code>if h then x else y</code> then it really means to call <code>Decidable.rec</code> on the implicit decidability instance for <code>h</code>, with <code>x</code> and <code>y</code> as the other arguments... and all that stuff should show up as intermediate states in <code>isDefEq</code></p>",
        "id": 346652146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680547365
    },
    {
        "content": "<p>And the decidability instance for say <code>Finset.SupIndep p id ∧ Finset.sup p id = ∅ ∧ ¬⊥ ∈ p</code> should have been synthesized already in the definition of whatever contains that.</p>",
        "id": 346652258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680547409
    },
    {
        "content": "<p>Sorry, I was thinking of something else</p>",
        "id": 346652282,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680547421
    },
    {
        "content": "<p>Maybe somewhere down line two different (slowly) defeq instances are being synthesized? But I am not sure where that would be. Only going of my limited experience of very slow but successful checks where this has been the majority of cases</p>",
        "id": 346655022,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680548327
    },
    {
        "content": "<p>I don't think it's about instances. It's having issues proving that <code>{}</code> and <code>{{}}</code> are different</p>",
        "id": 346666069,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680551998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[0.034324s] ✅ Finset.powerset ∅ = {∅} =?= ?m.230 = ?m.230</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[5.022038s] ✅ Finset.powerset (Finset.powerset ∅) = {∅, {∅}} =?= ?m.3885 = ?m.3885 ▼</span>\n<span class=\"cm\">        [] [0.000001s] ✅ Finset (Finset (Finset Unit)) =?= Finset (Finset (Finset Unit))</span>\n<span class=\"cm\">        [] [2.480647s] ✅ {∅,</span>\n<span class=\"cm\">                {∅}}.val =?= Multiset.pmap Finset.mk (Multiset.powerset (Finset.powerset ∅).val)</span>\n<span class=\"cm\">              (_ : ∀ (_t : Multiset (Finset Unit)), _t ∈ Multiset.powerset (Finset.powerset ∅).val → Multiset.Nodup _t) ▶</span>\n<span class=\"cm\">        [] [2.541109s] ✅ {∅, {∅}}.nodup =?= Finset.powerset.proof_2 (Finset.powerset ∅) ▼</span>\n<span class=\"cm\">                  [] [2.540974s] ✅ {∅,</span>\n<span class=\"cm\">                          {∅}}.val =?= Eq.ndrecOn (motive := fun x =&gt;</span>\n<span class=\"cm\">                        (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                          Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                        (_ :</span>\n<span class=\"cm\">                          (Quot.lift</span>\n<span class=\"cm\">                                (Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                  (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                    Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                  fun l H =&gt; ↑(List.pmap Finset.mk l H))</span>\n<span class=\"cm\">                                (_ :</span>\n<span class=\"cm\">                                  ∀ (a b : List (Multiset (Finset Unit))),</span>\n<span class=\"cm\">                                    Setoid.r a b →</span>\n<span class=\"cm\">                                      Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                          (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                            Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                          (fun l H =&gt; ↑(List.pmap Finset.mk l H)) a =</span>\n<span class=\"cm\">                                        Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                          (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                            Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                          (fun l H =&gt; ↑(List.pmap Finset.mk l H)) b)</span>\n<span class=\"cm\">                                (Multiset.powerset (Finset.powerset ∅).val)).fst =</span>\n<span class=\"cm\">                            Multiset.powerset (Finset.powerset ∅).val)</span>\n<span class=\"cm\">                        (Quot.lift</span>\n<span class=\"cm\">                            (Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                              (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                              fun l H =&gt; ↑(List.pmap Finset.mk l H))</span>\n<span class=\"cm\">                            (_ :</span>\n<span class=\"cm\">                              ∀ (a b : List (Multiset (Finset Unit))),</span>\n<span class=\"cm\">                                Setoid.r a b →</span>\n<span class=\"cm\">                                  Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                      (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                        Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                      (fun l H =&gt; ↑(List.pmap Finset.mk l H)) a =</span>\n<span class=\"cm\">                                    Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                      (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                        Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                      (fun l H =&gt; ↑(List.pmap Finset.mk l H)) b)</span>\n<span class=\"cm\">                            (Multiset.powerset (Finset.powerset ∅).val)).snd</span>\n<span class=\"cm\">                        (_ :</span>\n<span class=\"cm\">                          ∀ (_t : Multiset (Finset Unit)),</span>\n<span class=\"cm\">                            _t ∈ Multiset.powerset (Finset.powerset ∅).val → Multiset.Nodup _t) ▼</span>\n<span class=\"cm\">                      [] [2.540100s] ✅ {∅,</span>\n<span class=\"cm\">                              {∅}}.1 =?= (Quot.lift</span>\n<span class=\"cm\">                                (Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                  (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                    Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                  fun l H =&gt; ↑(List.pmap Finset.mk l H))</span>\n<span class=\"cm\">                                (_ :</span>\n<span class=\"cm\">                                  ∀ (a b : List (Multiset (Finset Unit))),</span>\n<span class=\"cm\">                                    Setoid.r a b →</span>\n<span class=\"cm\">                                      Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                          (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                            Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                          (fun l H =&gt; ↑(List.pmap Finset.mk l H)) a =</span>\n<span class=\"cm\">                                        Quot.indep (motive := fun x =&gt;</span>\n<span class=\"cm\">                                          (∀ (a : Multiset (Finset Unit)), a ∈ x → (fun a =&gt; Multiset.Nodup a) a) →</span>\n<span class=\"cm\">                                            Multiset (Finset (Finset Unit)))</span>\n<span class=\"cm\">                                          (fun l H =&gt; ↑(List.pmap Finset.mk l H)) b)</span>\n<span class=\"cm\">                                (Multiset.powerset (Finset.powerset ∅).val)).2</span>\n<span class=\"cm\">                            (_ :</span>\n<span class=\"cm\">                              ∀ (_t : Multiset (Finset Unit)),</span>\n<span class=\"cm\">                                _t ∈ Multiset.powerset (Finset.powerset ∅).val → Multiset.Nodup _t) ▼</span>\n<span class=\"cm\">                                    [] [2.539566s] ✅ List.insert ∅</span>\n<span class=\"cm\">                                          [{∅}] =?= List.pmap Finset.mk</span>\n<span class=\"cm\">                                          (Multiset.powersetAux</span>\n<span class=\"cm\">                                            (List.pmap Finset.mk (Multiset.powersetAux [])</span>\n<span class=\"cm\">                                              (_ :</span>\n<span class=\"cm\">                                                ∀ (_t : Multiset Unit),</span>\n<span class=\"cm\">                                                  _t ∈ Multiset.powerset ∅.val → Multiset.Nodup _t)))</span>\n<span class=\"cm\">                                          (_ :</span>\n<span class=\"cm\">                                            ∀ (_t : Multiset (Finset Unit)),</span>\n<span class=\"cm\">                                              _t ∈ Multiset.powerset (Finset.powerset ∅).val → Multiset.Nodup _t) ▼</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">(deterministic) timeout at 'isDefEq', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">[13.332704s] 💥 Finset.image (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)) = {∅} =?= ?m.467830 = ?m.467830 ▼</span>\n<span class=\"cm\">  [] [0.000013s] ✅ Finset (Finset Unit) =?= ?m.467829 ▶</span>\n<span class=\"cm\">  [] [0.000018s] ✅ Finset.image (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)) =?= ?m.467830 ▶</span>\n<span class=\"cm\">  [] [13.332652s] 💥 {∅} =?= Finset.image (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)) ▼</span>\n<span class=\"cm\">    [] [13.332633s] 💥 {∅} =?= Finset.image (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)) ▼</span>\n<span class=\"cm\">      [] [13.332576s] 💥 {∅} =?= Multiset.toFinset (Multiset.map (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)).val) ▼</span>\n<span class=\"cm\">        [] [13.332540s] 💥 {∅} =?= { val := Multiset.dedup (Multiset.map (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)).val),</span>\n<span class=\"cm\">              nodup :=</span>\n<span class=\"cm\">                (_ :</span>\n<span class=\"cm\">                  Multiset.Nodup</span>\n<span class=\"cm\">                    (Multiset.dedup (Multiset.map (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)).val))) } ▼</span>\n<span class=\"cm\">          [] [0.000001s] ✅ Finset (Finset Unit) =?= Finset (Finset Unit)</span>\n<span class=\"cm\">          [] [7.061364s] ✅ {∅}.val =?= Multiset.dedup (Multiset.map (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)).val) ▶</span>\n<span class=\"cm\">          [] [6.271131s] 💥 {∅}.nodup =?= Multiset.toFinset.proof_1</span>\n<span class=\"cm\">                (Multiset.map (fun p =&gt; ∅) (Finset.powerset (Finset.powerset ∅)).val) ▶</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 346666365,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680552097
    },
    {
        "content": "<p>I would think it would be fast, since it could just execute on the list level, seeing past the quotient...</p>",
        "id": 346666559,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680552163
    },
    {
        "content": "<p>Interesting that it timed out while trying to defeq test two proofs</p>",
        "id": 346668860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680553009
    },
    {
        "content": "<p>More specifically, here is checking the powerset rfl, comparing multiset and finset. I've avoided notation as much as possible to prevent any TC search for EmptyCollection or Singleton:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[0.034324s] ✅ Finset.powerset ∅ = {∅} =?= ?m.230 = ?m.230</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Multiset.zero</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Multiset.cons</span> <span class=\"n\">Multiset.zero</span> <span class=\"o\">(</span><span class=\"n\">Multiset.cons</span> <span class=\"o\">(</span><span class=\"n\">Multiset.cons</span> <span class=\"n\">Multiset.zero</span> <span class=\"n\">Multiset.zero</span><span class=\"o\">)</span> <span class=\"n\">Multiset.zero</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[0.497044s] ✅ Multiset.powerset (Multiset.powerset Multiset.zero) =</span>\n<span class=\"cm\">      Multiset.powerset</span>\n<span class=\"cm\">        (Multiset.powerset</span>\n<span class=\"cm\">          Multiset.zero) =?= Multiset.powerset (Multiset.powerset Multiset.zero) =</span>\n<span class=\"cm\">      Multiset.zero ::ₘ (Multiset.zero ::ₘ Multiset.zero) ::ₘ Multiset.zero</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.empty</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"n\">Finset.empty</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">Finset.empty</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">Finset.empty</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">Finset.empty</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.empty</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"o\">(</span><span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"n\">Finset.empty</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[3.660799s] ✅ Finset.powerset (Finset.powerset Finset.empty) =</span>\n<span class=\"cm\">      Finset.cons Finset.empty</span>\n<span class=\"cm\">        (Finset.cons (Finset.cons Finset.empty Finset.empty (_ : ¬Finset.empty ∈ Finset.empty)) Finset.empty</span>\n<span class=\"cm\">          (_ : ¬Finset.cons Finset.empty Finset.empty (_ : ¬Finset.empty ∈ Finset.empty) ∈ Finset.empty))</span>\n<span class=\"cm\">        (_ :</span>\n<span class=\"cm\">          ¬Finset.empty ∈</span>\n<span class=\"cm\">              Finset.cons (Finset.cons Finset.empty Finset.empty (_ : ¬Finset.empty ∈ Finset.empty)) Finset.empty</span>\n<span class=\"cm\">                (_ :</span>\n<span class=\"cm\">                  ¬Finset.cons Finset.empty Finset.empty (_ : ¬Finset.empty ∈ Finset.empty) ∈</span>\n<span class=\"cm\">                      Finset.empty)) =?= ?m.4628 = ?m.4628</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 346669597,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680553281
    },
    {
        "content": "<p>Is it trying to defeq the proof terms themselves?</p>",
        "id": 346669762,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680553333
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">802547</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span>\n                                        <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span>\n                                          <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)),</span>\n                                            <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">→</span>\n                                              <span class=\"n\">Multiset.Nodup</span>\n                                                <span class=\"n\">_t</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">[</span><span class=\"n\">Finset.empty</span><span class=\"o\">,</span>\n                                        <span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Finset.empty</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)]</span> <span class=\"bp\">▼</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">277031</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span>\n                                            <span class=\"n\">val</span> <span class=\"o\">:=</span>\n                                              <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.foldr</span>\n                                                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                      <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                    <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                          <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                            <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n                                            <span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n                                              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                                                  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.foldr</span>\n                                                        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                          <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                        <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                              <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                                <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">}</span> <span class=\"o\">::</span>\n                                          <span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span>\n                                            <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Multiset.ofList</span>\n                                              <span class=\"o\">[(</span><span class=\"n\">List.foldr</span>\n                                                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                      <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                    <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                          <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                            <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">1</span><span class=\"o\">]])</span>\n                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)),</span>\n                                                <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                                                    <span class=\"n\">List.map</span> <span class=\"n\">Multiset.ofList</span>\n                                                      <span class=\"o\">[(</span><span class=\"n\">List.foldr</span>\n                                                            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                              <span class=\"n\">Array.foldl</span>\n                                                                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                                <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span>\n                                                                <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                            <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                                  <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                                    <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">1</span><span class=\"o\">]]</span> <span class=\"bp\">→</span>\n                                                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                                                    <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">[</span><span class=\"n\">Finset.empty</span><span class=\"o\">,</span>\n                                          <span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Finset.empty</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)]</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 346669978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680553428
    },
    {
        "content": "<p>I can't find what's taking the 1.6 unaccounted for seconds there</p>",
        "id": 346670082,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680553450
    },
    {
        "content": "<p>For what it's worth, <a href=\"https://github.com/leanprover/lean4/pull/2181\">https://github.com/leanprover/lean4/pull/2181</a> should be helpful with such performance investigations in the future</p>",
        "id": 346670930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680553790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/287929-mathlib4/topic/brute.20force.20calculation.20of.20Bell.2FStirling.20numbers/near/346670082\">said</a>:</p>\n<blockquote>\n<p>I can't find what's taking the 1.6 unaccounted for seconds there</p>\n</blockquote>\n<p>Is that the only node nested below <code>List.pmap Finset.mk</code>?</p>",
        "id": 346671145,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680553863
    },
    {
        "content": "<p>There may be hidden TC nodes, try <code>synthInstance</code> as well</p>",
        "id": 346672189,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680554286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">took</span> <span class=\"mi\">211</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">519</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">11</span><span class=\"n\">s</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n    <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00429</span><span class=\"n\">ms</span>\n    <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0254</span><span class=\"n\">ms</span>\n    <span class=\"n\">elaboration</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">66</span><span class=\"n\">s</span>\n    <span class=\"kn\">import</span> <span class=\"mi\">211</span><span class=\"n\">ms</span>\n    <span class=\"n\">initialization</span> <span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"n\">ms</span>\n    <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">37</span><span class=\"n\">s</span>\n    <span class=\"n\">linting</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">349</span><span class=\"n\">ms</span>\n    <span class=\"n\">parsing</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"n\">ms</span>\n    <span class=\"n\">simp</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">04</span><span class=\"n\">ms</span>\n    <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">24</span><span class=\"n\">ms</span>\n    <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">11</span><span class=\"n\">ms</span>\n    <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">35</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>I dumped the output to a file <a href=\"/user_uploads/3121/UCUFZW-O86PZgp3jsGJa3Cl7/output.txt\">output.txt</a>. Have to go to dinner now.</p>",
        "id": 346678498,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680555821
    },
    {
        "content": "<p>There's not subnodes between the 1.9s and 0.2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                   <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">926125</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span>\n                                          <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span>\n                                            <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                  <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))</span>\n                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)),</span>\n                                              <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">→</span>\n                                                <span class=\"n\">Multiset.Nodup</span>\n                                                  <span class=\"n\">_t</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">[</span><span class=\"n\">Finset.empty</span><span class=\"o\">,</span>\n                                          <span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Finset.empty</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)]</span> <span class=\"bp\">▼</span>\n                                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">294699</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span>\n                                              <span class=\"n\">val</span> <span class=\"o\">:=</span>\n                                                <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.foldr</span>\n                                                      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                        <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                      <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                      <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                            <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                              <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n                                              <span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n                                                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                                                    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.foldr</span>\n                                                          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                            <span class=\"n\">Array.foldl</span>\n                                                              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                          <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                                <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                                  <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">}</span> <span class=\"o\">::</span>\n                                            <span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span>\n                                              <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Multiset.ofList</span>\n                                                <span class=\"o\">[(</span><span class=\"n\">List.foldr</span>\n                                                      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                        <span class=\"n\">Array.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                      <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                      <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                            <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                              <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">1</span><span class=\"o\">]])</span>\n                                              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">Unit</span><span class=\"o\">)),</span>\n                                                  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                                                      <span class=\"n\">List.map</span> <span class=\"n\">Multiset.ofList</span>\n                                                        <span class=\"o\">[(</span><span class=\"n\">List.foldr</span>\n                                                              <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span>\n                                                                <span class=\"n\">Array.foldl</span>\n                                                                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array.push</span> <span class=\"o\">(</span><span class=\"n\">Array.push</span> <span class=\"n\">r</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n                                                                  <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">arr</span> <span class=\"mi\">0</span>\n                                                                  <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">arr</span><span class=\"o\">))</span>\n                                                              <span class=\"bp\">#</span><span class=\"o\">[[]]</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">[])</span>\n                                                                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Unit</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">_t</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.powerset</span> <span class=\"n\">Finset.empty.val</span> <span class=\"bp\">→</span>\n                                                                      <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">)))[</span><span class=\"mi\">1</span><span class=\"o\">]]</span> <span class=\"bp\">→</span>\n                                                    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                                                      <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"o\">[</span><span class=\"n\">Finset.empty</span><span class=\"o\">,</span>\n                                            <span class=\"n\">Finset.cons</span> <span class=\"n\">Finset.empty</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Finset.empty</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.empty</span><span class=\"o\">)]</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 346678515,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680555831
    },
    {
        "content": "<p>What's the right way to switch my lean version to try <code>trace.profiler</code>?</p>",
        "id": 346686552,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680559243
    },
    {
        "content": "<p>because the flamegraph is boring otherwise:<br>\n<a href=\"/user_uploads/3121/h-zdsSUyDkZVZZB9RLyxurvX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/h-zdsSUyDkZVZZB9RLyxurvX/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/h-zdsSUyDkZVZZB9RLyxurvX/image.png\"></a></div>",
        "id": 346686609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680559267
    },
    {
        "content": "<p>I think this is also rearing its head even in tactic proofs. In here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">card</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset.powerset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">sum_insert</span><span class=\"o\">]</span> <span class=\"c1\">-- slooow</span>\n</code></pre></div>",
        "id": 348538182,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681238556
    },
    {
        "content": "<p>I'm using <code>rewrite</code> to try to avoid <code>rfl</code> at the end of <code>rw</code>, still</p>",
        "id": 348538228,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681238573
    },
    {
        "content": "<p>Fewer imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 348569448,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681250722
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">Finset.empty_mem_powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)⟩</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.1.card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>",
        "id": 348569457,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681250730
    },
    {
        "content": "<p>I know the statement is false, but I'm not sure why <code>simp only</code> would take so long. It times out on <code>range 3</code></p>",
        "id": 348569511,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681250762
    },
    {
        "content": "<p>Even <code>(config := {decide := false})</code> is slow</p>",
        "id": 348570094,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681251044
    },
    {
        "content": "<p>I think <code>(config := { etaStruct := .none })</code> speeds it up a bit</p>",
        "id": 349348584,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681472347
    },
    {
        "content": "<p>But still:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">192934</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">▶</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.univ_ofSubsingleton</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Finset.univ</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">Finset.univ</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">263717</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">▶</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.univ_of_isEmpty</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Finset.univ</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">Finset.univ</span>\n</code></pre></div>",
        "id": 349353759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681473316
    },
    {
        "content": "<p>That's in this context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Finset.univ_unique</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n      <span class=\"n\">Unique</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">661934</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">▶</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.univ_ofSubsingleton</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Finset.univ</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">Finset.univ</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">900318</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">▶</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.univ_of_isEmpty</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"n\">Finset.univ</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">Finset.univ</span>\n<span class=\"n\">Scratch.lean</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">58</span>\n</code></pre></div>",
        "id": 349355213,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681473556
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">Finset.empty_mem_powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)⟩</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">maxSteps</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">maxDischargeDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">memoize</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">etaStruct</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"n\">iota</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">autoUnfold</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">Finset.mem_attach</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">Finset.univ_eq_attach</span><span class=\"o\">]</span>\n  <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 349355273,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681473567
    },
    {
        "content": "<p>However, just a <code>#synth</code> takes &lt; 0.002 s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Unique</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 349355957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681473693
    },
    {
        "content": "<p>Ah, the Unique thing is fast anyway. It's about Subsingleton and IsEmpty checks</p>",
        "id": 349357087,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681473906
    },
    {
        "content": "<p>Can you make this fast yet?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Powerset</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">3</span><span class=\"o\">)))))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_insert</span><span class=\"o\">]</span> <span class=\"c1\">-- type checking takes 7 seconds on my machine</span>\n                  <span class=\"c1\">-- and running it several times causes a stack overflow on my machine</span>\n                  <span class=\"c1\">-- (or sometimes causes it to hang)</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 349373877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681477091
    },
    {
        "content": "<p>Bump on this - this issue shows up for me fairly often, and it's one of the reasons I need to continue using Lean 3 - do we have a fix yet?</p>",
        "id": 392530600,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695392765
    },
    {
        "content": "<p>Do we have a minimised example? Is there a github issue yet? Is it covered by any of the other slowness issues which have been opened recently? I'd like to get up to speed on this one, I can't remember the details of it any more.</p>",
        "id": 392531463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695393001
    },
    {
        "content": "<p>Not that I know of unfortunately, I was hoping you'd remember!</p>",
        "id": 392532176,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695393184
    },
    {
        "content": "<p>Data/Multiset/Powerset.lean starts with a suspicious TODO:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Porting note: TODO: Write a more efficient version</span>\n<span class=\"sd\">/-- A helper function for the powerset of a multiset. Given a list `l`, returns a list</span>\n<span class=\"sd\">of sublists of `l` as multisets. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">powersetAux</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">sublists</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">multiset.powerset_aux</span> <span class=\"n\">Multiset.powersetAux</span>\n</code></pre></div>",
        "id": 392562946,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695400941
    },
    {
        "content": "<p>I replaced the powersetAux version by a hacky port of the mathlib3 one and it seems to have fixed the timeout. It's at <a href=\"https://github.com/leanprover-community/mathlib4/tree/collares%2Fredefine-powersetAux\">branch#collares/redefine-powersetAux</a>. I'm not sure what to do with the mathlib3 version of sublistsAux (sublistsAux₃ in my branch), and there's a theorem sorried out. Help is very much welcome!</p>",
        "id": 392577043,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695406365
    },
    {
        "content": "<p>What's interesting is that <code>#reduce (@Fintype.card (Finpartition (∅ : Finset Unit)) (Finpartition.fintype_finset _))</code> (inserted after this thread's original example) runs really fast, even with the current definition of powersetAux.</p>",
        "id": 392685721,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695469425
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 392690040,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695471099
    },
    {
        "content": "<p>Cargo-culting <a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a> to std4 seems to fix the timeouts. PR at <a href=\"https://github.com/leanprover/std4/pull/271\">std4#271</a>.<br>\nEDIT: Turns out it didn't, sorry for the noise. See below.</p>",
        "id": 392704396,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695478740
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 392724094,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695489915
    },
    {
        "content": "<p>As pointed out by <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> last week in <a href=\"#narrow/stream/270676-lean4/topic/decide.20regression/near/391860857\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/decide.20regression/near/391860857</a>, the slow instance in Std (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBAll#doc\">docs#List.decidableBAll</a>) is duplicated in mathlib4 (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBall#doc\">docs#List.decidableBall</a>). The mathlib4 version is fast because it contains the workaround to <a href=\"https://github.com/leanprover/lean4/pull/2552\">lean4#2552</a> by <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> introduced in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7232\">#7232</a>; this means disabling the Std instance via <code>attribute [-instance] List.decidableBAll</code> suffices to make the examples in this thread run fast.</p>",
        "id": 392788195,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695537457
    },
    {
        "content": "<p>Wait, apparently it doesn't. How is that possible?</p>",
        "id": 392788517,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695537730
    },
    {
        "content": "<p>Because Bhavik is very good at finding subtle issues (actually Yakov found this one but Bhavik is very good at using these sorts of things in his projects)</p>",
        "id": 392788545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695537766
    },
    {
        "content": "<p>This is undoubtedly true, but it also turned out I made a pretty embarrassing testing mistake by not fully reverting the changes I made while testing <a href=\"https://github.com/leanprover-community/mathlib4/tree/collares%2Fredefine-powersetAux\">branch#collares/redefine-powersetAux</a> and they were responsible for the speedup after all, unfortunately. I'll close the Std4 PR.</p>",
        "id": 392789574,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695538686
    },
    {
        "content": "<p>Okay, let's see if I didn't mess up this time: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7388\">#7388</a></p>",
        "id": 393313396,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695757237
    },
    {
        "content": "<p>I just noticed something really funny about the original example. Suppose we have the original instance, that is, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Finpartition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finpartition.fintype_finset</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">a.powerset.powerset.image</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.SupIndep</span> <span class=\"n\">id</span> <span class=\"bp\">∧</span> <span class=\"n\">p.sup</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p.le</span> <span class=\"n\">hi</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p.supIndep</span><span class=\"o\">,</span> <span class=\"n\">p.supParts</span><span class=\"o\">,</span> <span class=\"n\">p.not_bot_mem</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Now consider the following two snippets: </p>\n<p>1) <code>example : @Fintype.card (Finpartition (∅ : Finset Unit)) (Finpartition.fintype_finset _) = 1 := by rfl</code>.<br>\n2) <code>example : @Fintype.card (Finpartition (∅ : Finset Unit)) (Finpartition.fintype_finset _) = 1 := rfl</code>.</p>\n<p>As reported by <code>count_heartbeats</code>, the first one uses 650 heartbeats and the second one uses 4865061 (!) heartbeats on master. After <a href=\"https://github.com/leanprover-community/mathlib4/pull/7388\">#7388</a>, the first one uses 486 heartbeats and the second uses 3094. I really suspect that I'm doing something wrong, but I've tested a few times and it seems consistent.</p>\n<p>Edit: As a corollary, make sure to use <code>by rfl</code> and not <code>rfl</code> if you're trying the <code>@Fintype.card (Finpartition (range 3)) (Finpartition.fintype_finset _) = 5</code> original example with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7388\">#7388</a>!</p>",
        "id": 393533298,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695833451
    },
    {
        "content": "<p>Can this be done mathlibless?</p>",
        "id": 393535098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695834119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/287929-mathlib4/topic/brute.20force.20calculation.20of.20Bell.2FStirling.20numbers/near/393533298\">said</a>:</p>\n<blockquote>\n<p>I just noticed something really funny about the original example. Suppose we have the original instance, that is, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Finpartition</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finpartition.fintype_finset</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"n\">a.powerset.powerset.image</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.SupIndep</span> <span class=\"n\">id</span> <span class=\"bp\">∧</span> <span class=\"n\">p.sup</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.1</span><span class=\"o\">,</span> <span class=\"n\">h.2.2</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">p</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">p.parts</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p.le</span> <span class=\"n\">hi</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p.supIndep</span><span class=\"o\">,</span> <span class=\"n\">p.supParts</span><span class=\"o\">,</span> <span class=\"n\">p.not_bot_mem</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Now consider the following two snippets: </p>\n<p>1) <code>example : @Fintype.card (Finpartition (∅ : Finset Unit)) (Finpartition.fintype_finset _) = 1 := by rfl</code>.<br>\n2) <code>example : @Fintype.card (Finpartition (∅ : Finset Unit)) (Finpartition.fintype_finset _) = 1 := rfl</code>.</p>\n<p>As reported by <code>count_heartbeats</code>, the first one uses 650 heartbeats and the second one uses 4865061 (!) heartbeats on master. After <a href=\"https://github.com/leanprover-community/mathlib4/pull/7388\">#7388</a>, the first one uses 486 heartbeats and the second uses 3094. I really suspect that I'm doing something wrong, but I've tested a few times and it seems consistent.</p>\n<p>Edit: As a corollary, make sure to use <code>by rfl</code> and not <code>rfl</code> if you're trying the <code>@Fintype.card (Finpartition (range 3)) (Finpartition.fintype_finset _) = 5</code> original example with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7388\">#7388</a>!</p>\n</blockquote>\n<p>Woah! I'd seen examples where <code>rfl</code> and <code>by rfl</code> were different but never this different! Nice find</p>",
        "id": 393576482,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695851908
    },
    {
        "content": "<p>Note Sebastian's comment about this phenomenon <a href=\"#narrow/stream/270676-lean4/topic/rfl.20repeating.20itself/near/390127430\">here</a>.</p>",
        "id": 393583134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695856261
    },
    {
        "content": "<p>Modulo bumping <code>macRecDepth</code>, the <code>by rfl</code>/<code>rfl</code> discrepancy was fixed in <code>9f50f44</code>. Thank you Leo and Sebastian!</p>",
        "id": 395701035,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696858533
    },
    {
        "content": "<p>In the latest master, this now works (but is still slow):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">1500</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Finpartition</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">Finpartition.fintype_finset</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 397932928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697969909
    },
    {
        "content": "<p>(and no need for the maxRecDepth bump if you use <code>by rfl</code> instead)</p>",
        "id": 397932960,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697969952
    }
]