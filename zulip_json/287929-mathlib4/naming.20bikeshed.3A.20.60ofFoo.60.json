[
    {
        "content": "<p>Although undocumented, I believe there's a naming convention that we name <code>ofFoo</code> <code>toFoo</code> etc.</p>\n<ol>\n<li>Should this be documented in the wiki?</li>\n<li>Should <code>Topology.UniformSpace.Separation</code> be updated to conform to the convention?  (e..g., <code>isClosed_of_spaced_out</code> <code>eq_of_separated_of_uniformContinuous</code>)</li>\n</ol>",
        "id": 325737563,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675464351
    },
    {
        "content": "<p>Sorry, can you more explicitly specify what you think this undocumented naming convention is?</p>",
        "id": 325760614,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675479868
    },
    {
        "content": "<p>Sure -- when we have a capitalized object, we often name projections or transformations to/from the object with a <code>toFoo</code> or <code>ofFoo</code>, but we are not consistent with that naming convention. </p>\n<p>e.g., <code>to_setoid</code> -&gt; <code>toSetoid</code>,  <code>to_finset</code> -&gt; <code>toFinset</code></p>",
        "id": 325765435,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675483860
    },
    {
        "content": "<p>but counterexamples above.</p>",
        "id": 325765552,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675484027
    },
    {
        "content": "<p>Does it depend on whether Foo is a Prop(-ish)?</p>",
        "id": 325774935,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675492252
    },
    {
        "content": "<p>I don't know? We <code>ofFoo</code> and <code>toFoo</code> sometimes and not others...</p>",
        "id": 325776202,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675493434
    },
    {
        "content": "<p>I've got to believe there's some <code>mathport</code> support here, but I haven't code dived deeply enough yet.</p>\n<p>Another example:</p>\n<p>Why <code>finprod_eq_prod_pLift_of_mulSupport_toFinset_subset</code> in <code>Algebra.BigOperators.Finprod</code>? We have <code>ofFinset</code> but not <code>ofMulSupport</code>?</p>",
        "id": 325776367,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675493642
    },
    {
        "content": "<p>I want to believe that if <code>Foo</code> is a name that gets an <code>UpperCamelCase</code> name also gets a <code>toFoo</code>/<code>ofFoo</code> name, but I haven't see it formalized that way.</p>",
        "id": 325776479,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675493741
    },
    {
        "content": "<p><code>toFinset</code> is a definition, so we reuse it</p>",
        "id": 325776803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675494053
    },
    {
        "content": "<p>Otherwise we insert <code>_</code></p>",
        "id": 325776817,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675494066
    },
    {
        "content": "<p>This is a strange convention.</p>",
        "id": 325776822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675494075
    },
    {
        "content": "<p>Got it -- so to write back, I mistakenly pattern matched into a convention of <code>is/of/toFoo</code> because in Mathlib3 we do in fact have <code>def</code> and <code>Prop</code>-typed <code>is/of/to_foo</code>s which get naming convention translated into <code>IsFoo</code>/<code>toFoo</code>, etc, but not always, so a theorem that expresses an invariance might be named <code>of_Foo_toBar</code> or <code>ofFoo_toBar</code> or etc., depending on whether there was an underlying definition or not.</p>\n<p>I guess I <em>don't</em> then understand why we have <code>Cycle.toFinset</code> and <code>Cycle.toFinset_toMultiset</code> but also <code>Cycle.nil_to_finset</code>.</p>\n<p>I'm coming at this from the perspective that it's good for naming conventions to have clear rules, and also good for the rules to be discoverable and consistent for an API user.</p>",
        "id": 325849808,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675526581
    },
    {
        "content": "<p>Have you seen the naming rules listed on the porting wiki? Eventually I think the naming convention will work its way into the website.</p>",
        "id": 325850754,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675526919
    },
    {
        "content": "<p>The <code>nil</code> one is just misnamed. You should open a PR to fix it.</p>",
        "id": 325850947,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675527003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/naming.20bikeshed.3A.20.60ofFoo.60/near/325850754\">said</a>:</p>\n<blockquote>\n<p>Have you seen the naming rules listed on the porting wiki? Eventually I think the naming convention will work its way into the website.</p>\n</blockquote>\n<p>I wrote it...</p>",
        "id": 325851020,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675527026
    },
    {
        "content": "<p>That's not quite correct, I edited it for clarity.</p>",
        "id": 325851087,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675527067
    },
    {
        "content": "<p>Anyway, there are a few <code>toFinset</code> things misnamed in that file.</p>",
        "id": 325851228,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675527119
    },
    {
        "content": "<p>But most of my questions here are by way of making sure the rules are clear, and clearly documented...</p>",
        "id": 325851285,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675527128
    },
    {
        "content": "<p>I don't see it mentioned above; but the <code>toFoo</code> naming convention is automatically generated by Lean when using the <code>extends</code> keyword</p>",
        "id": 325854162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675528348
    },
    {
        "content": "<p>Eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOneClass#doc\">docs4#MulOneClass</a> <code>.toMul</code></p>",
        "id": 325854212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675528368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/naming.20bikeshed.3A.20.60ofFoo.60/near/325850947\">said</a>:</p>\n<blockquote>\n<p>The <code>nil</code> one is just misnamed. You should open a PR to fix it.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2057\">!4#2057</a></p>",
        "id": 325854627,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675528547
    }
]