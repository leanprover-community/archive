[
    {
        "content": "<p>I think there is a max universe problem in the port of this file: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">Embedding</span> <span class=\"n\">L</span> <span class=\"bp\">?</span><span class=\"n\">m.69491</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">G</span> <span class=\"n\">j</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.69486</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.69486</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I understand correctly <code>UnivLE</code> is supposed to help with this but I could not figure out how to use it.</p>",
        "id": 372860643,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1688642769
    },
    {
        "content": "<p>That doesn't look like a problem looking for a <code>UnivLE</code> solution to me.</p>",
        "id": 372864103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688643486
    },
    {
        "content": "<p>I have a mysterious situation here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Sufficient conditions for a class to be the age of a countably-generated structure. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_cg_is_age_of</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">K.Nonempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Bundled.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">L.Structure</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"bp\">↔</span> <span class=\"n\">N</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk'</span> <span class=\"bp\">''</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Countable</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Bundled.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">L.Structure</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Structure.FG</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Hereditary</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">jep</span> <span class=\"o\">:</span> <span class=\"n\">JointEmbedding</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Bundled.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">L.Structure</span><span class=\"o\">,</span> <span class=\"n\">Structure.CG</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">L.age</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc.exists_eq_range</span> <span class=\"o\">(</span><span class=\"n\">hn.image</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- &lt;snip&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Embedding.refl</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"c1\">-- dsimp -- Porting note: uncomment this and lots of stuff ↑ ↑ ↑ will break</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hFP</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n</code></pre></div>",
        "id": 373166812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688727544
    },
    {
        "content": "<p>The tactic state looks all reasonable, but if you add a <code>dsimp</code> at the end of the proof, then suddenly many other subproofs start giving errors.</p>",
        "id": 373166995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688727580
    },
    {
        "content": "<p>Is this hinting at a buggy tactic?</p>",
        "id": 373167035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688727592
    },
    {
        "content": "<p>This is now the only remaining error in this file</p>",
        "id": 373186706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688731642
    },
    {
        "content": "<p>Can you use <code>?_</code> on RHS of <code>obtain</code>?</p>",
        "id": 373267290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688746854
    },
    {
        "content": "<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 373269519,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688747349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModelTheory.2EFraisse.20.234565/near/373267290\">said</a>:</p>\n<blockquote>\n<p>Can you use <code>?_</code> on RHS of <code>obtain</code>?</p>\n</blockquote>\n<p>More precisely, this line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">KN</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>did not create a new goal and only errored when all other obligations were discharged</p>",
        "id": 373272818,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688748071
    },
    {
        "content": "<p>aha, thanks for debugging</p>",
        "id": 373273983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688748328
    },
    {
        "content": "<p>I didn't realize that was the problem</p>",
        "id": 373274017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688748336
    },
    {
        "content": "<p>Compare to <code>let</code>. This </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">KN</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>creates a new goal as does <code>have</code></p>",
        "id": 373275467,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688748671
    },
    {
        "content": "<p>We probably don't want that behavior for <code>obtain</code></p>",
        "id": 373275558,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688748692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ModelTheory.2EFraisse.20.234565/near/373267290\">said</a>:</p>\n<blockquote>\n<p>Can you use <code>?_</code> on RHS of <code>obtain</code>?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/5732\">https://github.com/leanprover-community/mathlib4/issues/5732</a></p>\n<p>Wasn't there a porting note with that link?</p>",
        "id": 373285737,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688751139
    },
    {
        "content": "<p>Which link?</p>",
        "id": 373287183,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688751545
    },
    {
        "content": "<p>The link in the exact message you're responding to</p>",
        "id": 373294889,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688753556
    },
    {
        "content": "<p>Ok you mean in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4707\">#4707</a>. Yes.</p>",
        "id": 373298257,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688754436
    }
]