[
    {
        "content": "<p>Hello. I'm studying representation theory of non-commutative algebras. A little over a year ago, I asked questions about how 2-sided ideals, right ideals, bimodules, can be formulated, or were not formulated in mathlib 3.<br>\n I left Lean 3 alone for a while, and I recently got interested in Lean 4 again. As far as I can see in mathlib4 docs, currently:</p>\n<ul>\n<li>Right or two-sided ideals are not defined (but could be implemented easily using <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/Bimodule.html\">subbimodule</a>), so quotient ring is only implemented for commutative ring.</li>\n<li>Tensor product (of right modules and left modules) are only defined for two modules over a commutative ring (so flatness is only defined for commutative case).</li>\n</ul>\n<p>I definitely want them, but for example if I implement and generalize definition to non-commutative setting, lots of works should be done for previous commutative ring statements to work (so maybe making a new project for my own noncommutative purpose is easier). So is there anyone working for this direction? Or maybe there are very few people who want non-commutative things in mathlib4?</p>",
        "id": 389976362,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1694223873
    },
    {
        "content": "<p>I definitely want all the noncommutative ring things, especially two-sided ideals. Unfortunately, I also want them for non-unital rings, so I've been holding off. But I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> may have been working on the tensor product of non-unital algebras. Also pinging <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> since we had a discussion about two-sided ideals in non-unital rings a few months ago.</p>",
        "id": 389979154,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694225511
    },
    {
        "content": "<p>We definitely want all of this, it’s mostly a matter of manpower and finding reasonable APIs (the main point, as you said, is making sure that everything still works transparently in the commutative case)</p>",
        "id": 390008256,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694246675
    },
    {
        "content": "<p>We're still a very long way from tensor products of modules over non-commutative rings; the work I did on this was a lean3 branch that never got merged, and it touches so many files that porting it is essentially starting from scratch.</p>",
        "id": 390008400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694246790
    },
    {
        "content": "<p>However, we can get the tensor product of non-associative and non-unital algebras quite easily</p>",
        "id": 390008437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694246829
    },
    {
        "content": "<p>What always concerns me about the proposals for noncommutative ideals is that people always bring in things like the opposite ring because we have an aversion to right actions, and this isn't at all what the paper literature looks like</p>",
        "id": 390010564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694248611
    },
    {
        "content": "<p>So is it true that currently every action in mathlib is left action, and introducing right action (like right ideals, right modules, etc) is not recommended (and instead use left action of opposite ring) in mathlib community?</p>",
        "id": 390011443,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1694249313
    },
    {
        "content": "<p>I rather like the idea of having a new piece of notation for right actions</p>",
        "id": 390011490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694249363
    },
    {
        "content": "<p>We can have new notation without a new typeclass</p>",
        "id": 390012178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694249883
    },
    {
        "content": "<p>I agree with Eric. We definitely want some notation, but it’s not a big deal if internally it’s implemented as a left action from the opposite ring.</p>",
        "id": 390012262,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694249948
    },
    {
        "content": "<p>The big blocker right now is that we need <code>Algebra</code> to mean \"left and right module\", otherwise nothing we develop for right-modules will work for algebras. That was the goal of the stuck-in-lean3 <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">!3#10716</a></p>",
        "id": 390012291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694249971
    },
    {
        "content": "<p>Actually this goes way beyond rings, it would be nice to have a better notation for right group actions. A naive idea that will probably introduce diamonds would be to have something like <code>instance [SMul G\\mop M] : SMul M G</code>. But another notation would work to</p>",
        "id": 390012513,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694250124
    },
    {
        "content": "<p>Note that \"full\" (i.e. diamond-free) support for right actions (via a new typeclass or otherwise) require us to add <code>right_nsmul</code> and <code>right_zsmul</code> and <code>right_qsmul</code> fields to <code>field</code>, along with the 6 new proof fields to keep them happy, and the 7 corresponding fields about <code>pow</code> and <code>zpow</code> to keep <code>to_additive</code> happy. So a 16-field increase in total.</p>",
        "id": 390012565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694250150
    },
    {
        "content": "<p>I think this kind of long term thing is perfectly suited to GitHub projects, someone who has spent some time thinking about this should make some kind of general blueprint that we can refine over time.</p>",
        "id": 390012630,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694250203
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">!3#10716</a> opted to ignore this and put up with diamonds, to avoid the scope becoming unmanageable</p>",
        "id": 390012635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694250205
    },
    {
        "content": "<p>It would be good to record these thoughts somewhere easy to find, because I'm sure they've come up before but Zulip is now very big to search</p>",
        "id": 390012793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694250307
    },
    {
        "content": "<p>So I personally want right actions, but I'm wondering that if we add right actions (right modules, etc), then should we make a right-action-counterpart of every existing theorem about left actions? Or maybe we can use <code>to_additive</code>-like automation?</p>",
        "id": 390271695,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1694425166
    },
    {
        "content": "<p>We have right actions already via <code>MulOpposite</code>, and a reasonable number of constructions that use them</p>",
        "id": 390280452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428346
    },
    {
        "content": "<p>Perhaps the spelling is ugly, but it's not the main problem here</p>",
        "id": 390280485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428362
    },
    {
        "content": "<p>(as an example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TrivSqZeroExt.semiring#doc\">docs#TrivSqZeroExt.semiring</a> works only on bi-modules)</p>",
        "id": 390280625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428426
    },
    {
        "content": "<p>The idea here is to avoid all duplication by considering a right <code>R</code>-action as a left <code>Rᵐᵒᵖ</code>-action (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite#doc\">docs#MulOpposite</a>).</p>",
        "id": 390280889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694428515
    },
    {
        "content": "<p>(I sent that message an hour ago, rip)</p>",
        "id": 390280937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694428535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390012793\">said</a>:</p>\n<blockquote>\n<p>It would be good to record these thoughts somewhere easy to find, because I'm sure they've come up before but Zulip is now very big to search</p>\n</blockquote>\n<p>I'll make a mathlib4 issue to summarize the changes that went into the mathlib3 PR, and why we need them</p>",
        "id": 390281355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428665
    },
    {
        "content": "<p>I was happy to ignore non-commutative rings for many years because I wanted to push algebraic geometry at least as far as schemes, and there only commutative rings were necessary. But at some point we have to get non-commutative rings working.</p>",
        "id": 390283307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694429382
    },
    {
        "content": "<p>My claim is that the obstacles are, in order:</p>\n<ul>\n<li>making algebras imply right actions without diamonds</li>\n<li>refactoring tensor products to actually be meaningful on left/right modules</li>\n<li>documentation and reducing verbosity</li>\n</ul>",
        "id": 390283784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694429540
    },
    {
        "content": "<p>Until we do that first step, our non-commutative results can't be applied to the commutative setting</p>",
        "id": 390283992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694429612
    },
    {
        "content": "<p>I would exchange your last two points, I don’t think tensor products are the most urgent things here (and we already have plenty of things to do about tensor products in the commutative world). For example being able to quotient an algebra by a bi-ideal feels way more fundamental to me (am I right that we don’t have this?)</p>",
        "id": 390288277,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694431202
    },
    {
        "content": "<p>Yes, last time I checked we didn't have quotients of algebras (or rings). So I believe in Mathlib we cannot currently even <em>state</em> the First Isomorphism Theorem for Algebras (or Rings). <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 390290346,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694431996
    },
    {
        "content": "<p>I think we could state it today using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon#doc\">docs#RingCon</a> instead of  a BiIdeal, but I agree that's not ideal</p>",
        "id": 390290702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432125
    },
    {
        "content": "<p>(I don't think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon.ker#doc\">docs#RingCon.ker</a> exists, but it easily could (as the ring version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid.ker#doc\">docs#Setoid.ker</a>))</p>",
        "id": 390290915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432172
    },
    {
        "content": "<p>To be clear: we have the quotients, just not the ideals</p>",
        "id": 390291005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432214
    },
    {
        "content": "<p>Ok, I agree there are workarounds to state it. But the usual statement is that for an algebra homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>A</mi><mo>→</mo><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\varphi \\colon A \\to A&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, the kernel <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">K</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Ker}(\\varphi) \\subset A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Ker</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an ideal (2-sided), and quotients <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">A/I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> of algebras are defined for ideals (2-sided), and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mrow><mi mathvariant=\"normal\">K</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mo>≅</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><msup><mi>A</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A/\\mathrm{Ker}(\\varphi) \\cong \\varphi(A) \\subset A&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathrm\">Ker</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> as an algebra. I think stating this without ideals (2-sided) and quotients by ideals does not accurately correspond to the <a href=\"https://en.wikipedia.org/wiki/Isomorphism_theorems\">mathematical statement</a>.</p>",
        "id": 390291641,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694432448
    },
    {
        "content": "<p>I think the statement would <em>look</em> pretty much the same whether <code>ker</code> is an ideal or a RingCon, since the two are isomorphic anyway and the syntax wouldn't need to change. I understand it's desirable to talk about <code>ideal</code>s to match the commutative case</p>",
        "id": 390291973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432571
    },
    {
        "content": "<p>Sure. But I think we also do want to match the <a href=\"https://en.wikipedia.org/wiki/Quotient_ring\">math usage</a> of quotients in algebra context (not just type-theoretically / quotients by equivalence relations).</p>",
        "id": 390292391,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694432708
    },
    {
        "content": "<p>Do we actually care about right-/left- ideals, or only two -sided ones?</p>",
        "id": 390292462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432732
    },
    {
        "content": "<p>(that is; are we currently avoiding the two-sided ones because of my first point about the commutative case?)</p>",
        "id": 390292574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432769
    },
    {
        "content": "<p>For quotient algebras 2-sided ideals. For other purposes both. For example you can construct a module over an algebra by quotienting by a one-sided ideal (quotient by a left ideal gives a left module, if I don't have my terminology backwards).</p>",
        "id": 390292594,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694432777
    },
    {
        "content": "<p>But you can also just call that a quotient by a <code>Submodule R R</code>, right?</p>",
        "id": 390292704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432818
    },
    {
        "content": "<p>So quotient left-modules are satisfactory as they are. Quotient algebras don't (in my interpretation) exist in Mathlib yet.</p>",
        "id": 390292966,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694432910
    },
    {
        "content": "<p>I'm asking if we can redefine <code>ideal</code> to only be two-sided, and if anyone will care</p>",
        "id": 390293021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432934
    },
    {
        "content": "<p>(after we refactor algebras; before we do that the answer is \"yes, everyone doing commutative rings\")</p>",
        "id": 390293101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694432960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390293021\">said</a>:</p>\n<blockquote>\n<p>I'm asking if we can redefine <code>ideal</code> to only be two-sided, and if anyone will care</p>\n</blockquote>\n<p>I'm also interested in whether anyone would mind! For the commutative case it doesn't make a difference. In the noncommutative case the 2-sided ideal seems like the most important notion (the kernel of a homomorphism, i.e., the thing you quotient by).</p>\n<p>And at least for algebras and Lie algebras etc. the notion of left ideals is the same as a submodule of the algebra viewed as a module over itself. Are there any situations when left ideals would not be submodules, or where treating them as submodules would not be satisfactory? (I'm assuming the implementation of right modules and right ideals will be figured out and then the same goes for them.)</p>",
        "id": 390294430,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694433411
    },
    {
        "content": "<p>Left ideals are just R-submodules of R, and I guess people care about modules and submodules in the noncommutative case.</p>",
        "id": 390294519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694433448
    },
    {
        "content": "<p>Of course, we might find that people are happy to call them submodules rather than left ideals (I think that dropping the concept of ideal completely and only using submodule language would have had rather more pushback from the commutative people)</p>",
        "id": 390294601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694433477
    },
    {
        "content": "<p>Right ideals are <code>Submodule Rᵐᵒᵖ R</code></p>",
        "id": 390294842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694433553
    },
    {
        "content": "<p>I agree that we don't need left ideals and right ideals (actually in rep theory of algebras, one-sided ideals rarely appear since they're just submodules and rep theory doesn't like ideal theory). So as for ideals, I want only two-sided ideals.<br>\nBut currently ideal in mathlib is defined to be left ideal, so some terminology or definition should be fixed (if we don't need one-sided ideal). For example, ideally we replace the definition of ideal in mathlib to be two-sided?</p>",
        "id": 390298009,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1694434741
    },
    {
        "content": "<p>The <em>definition</em> of group in mathlib contains axioms which follow from other axioms (for example we have both mul_one and one_mul because it extends monoid, but one of these can be dropped in the presence of inverses) so, whilst it would be a big refactor, it would not be inconsistent with our set-up to have ideals defined as two-sided ideals.</p>",
        "id": 390300409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694435526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390291641\">said</a>:</p>\n<blockquote>\n<p>I think stating this without ideals (2-sided) and quotients by ideals does not accurately correspond to the <a href=\"https://en.wikipedia.org/wiki/Isomorphism_theorems\">mathematical statement</a>.</p>\n</blockquote>\n<p>I'm contradicting myself a bit here, but actually I think it does, and I would be very happy(*) if we played with equivalences relations the same game we have for subobjects. But of course we would at least need a proper theory of two-sided ideals to state that such an ideal defines a ring congruence.</p>\n<p>(*) me being happy does not mean it's the right solution, I'm not seriously suggesting we should just work with ring congruences, just that in my mind it's the right concept, and ideals are just a nice way to represent them.</p>",
        "id": 390300834,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694435701
    },
    {
        "content": "<p>Ring congruences also generalize to semirings where quotients by ideals don't</p>",
        "id": 390307473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694437872
    },
    {
        "content": "<p>In the study of elliptic curves, one type of object that naturally appears is an ideal \"connecting\" two subrings R, S of a quaternion algebra, meaning that I is simultaneously a left ideal of R and a right ideal of S. It's not surprising for a paper on this topic such as <a href=\"https://eprint.iacr.org/2022/234\">https://eprint.iacr.org/2022/234</a> to use the word \"ideal\" more than 100 times and to use the word \"module\" exactly 0 times.</p>",
        "id": 390342237,
        "sender_full_name": "D. J. Bernstein",
        "timestamp": 1694447705
    },
    {
        "content": "<p>Also, as I've already stated: we need to think about the non-unital case. For example, Kevin's claim that left ideals are just R-submodules of R is <em>not true</em> whenever you want an ideal of a non-unital ring.</p>\n<p>Now, maybe the answer is to define it in terms of the unitization, but this gets a bit complicated quickly once you want to start talking about 2-sided ideals as subbimodules of the unitization of the tensor product. I'll ping <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> again because I think I convinced him that there's a real issue here a few months back.</p>\n<p>Mainly I'm trying to avoid the need for us to refactor all the two-sided ideal theory again in a few months when we eventually want it for non-unital rings.</p>",
        "id": 390346406,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694448924
    },
    {
        "content": "<p>But this is why I want non-unital tensor products.</p>",
        "id": 390346600,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694448975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390346600\">said</a>:</p>\n<blockquote>\n<p>But this is why I want non-unital tensor products.</p>\n</blockquote>\n<p>Do you mean where the central ring is non-unital, or where the two modules are only slightly rings?</p>",
        "id": 390349211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694449938
    },
    {
        "content": "<p>(I am happy to build the latter, but I want to wrap up <a href=\"https://github.com/leanprover-community/mathlib4/pull/6778\">#6778</a> first so that I don't make it timeout in doing so)</p>",
        "id": 390350009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694450277
    },
    {
        "content": "<p>Right, the latter is what I want. In particular, what I need is the tensor product of two non-unital algebras over a unital (semi)ring.</p>",
        "id": 390352538,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694451260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> , <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't understand the reason for the fear emoji.</p>",
        "id": 390352635,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694451306
    },
    {
        "content": "<p>For me it’s the size of the refactor, and also the fact that algebraists had managed to convince me that everything was just submodules so didn’t even think about this being an issue</p>",
        "id": 390352877,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694451402
    },
    {
        "content": "<p>But I definitely agree we have to do it in some form at some point</p>",
        "id": 390352953,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694451438
    },
    {
        "content": "<p>I guess it's not fear for non-unital rings, but fear induced by the realization that if we aren't careful we will do a boatload of work and then realize that we need to do another boatload of work.</p>",
        "id": 390352997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694451458
    },
    {
        "content": "<p>I was just shocked that ideals weren't the same as submodules :-)</p>",
        "id": 390357718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694453286
    },
    {
        "content": "<p>Kevin, it's only for the stupid technical reason: you can't state <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.one_smul#doc\">docs#Module.one_smul</a> because there is no <code>1</code>. Ideals in non-unital rings are \"non-unital submodules\" (i.e., submodules where you delete all references to <code>1</code>).</p>",
        "id": 390358349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694453526
    },
    {
        "content": "<p>See also <a href=\"https://ncatlab.org/nlab/files/QuillenModulesOverRngs.pdf\">https://ncatlab.org/nlab/files/QuillenModulesOverRngs.pdf</a>, where it is also mentioned that a non-unital module is just a unital module over the unitization.</p>",
        "id": 390359146,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694453853
    },
    {
        "content": "<p>Thinking again about this \"ideal are not submodules\" issue, I think we should just embrace non-unitality and define pseudo-modules (Bourbaki terminology) over non unital rings (which Bourbaki calls pseudo-rings, should we rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonUnitalRing#doc\">docs#NonUnitalRing</a> ?), and generalizing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule#doc\">docs#Submodule</a> to this situation. Fortunately enough the definition of Submodule doesn't mention ones, so we can just keep only one definition. <br>\nThis sound to me like a safe refactor that wouldn't induce significantly more work when we want to move to left-right modules, does that sound good?</p>",
        "id": 390922747,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694695686
    },
    {
        "content": "<p><code>Submodule R M</code> requires <code>R</code> to have a <code>1</code></p>",
        "id": 390924034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694696051
    },
    {
        "content": "<p>Which means that you can't use it for <code>Submodule R R</code> over these pseudo-rings</p>",
        "id": 390924083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694696067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390924034\">said</a>:</p>\n<blockquote>\n<p><code>Submodule R M</code> requires <code>R</code> to have a <code>1</code></p>\n</blockquote>\n<p>Okay, but there's no need to, right?</p>",
        "id": 390924237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694696117
    },
    {
        "content": "<p>My point is exactly that we don’t have to duplicate submodules and linear maps since they don’t mention 1. I think that makes this refactor significantly more manageable</p>",
        "id": 390924640,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694696246
    },
    {
        "content": "<p>Ah, in which case I attempted an easier version of this in <a href=\"https://github.com/leanprover-community/mathlib/pull/6642\">!3#6642</a> and had performance issues</p>",
        "id": 390928327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694697420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390281355\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390012793\">said</a>:</p>\n<blockquote>\n<p>It would be good to record these thoughts somewhere easy to find, because I'm sure they've come up before but Zulip is now very big to search</p>\n</blockquote>\n<p>I'll make a mathlib4 issue to summarize the changes that went into the mathlib3 PR, and why we need them</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7152\">#7152</a> is that issue</p>",
        "id": 390928440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694697456
    },
    {
        "content": "<p>Oh right it even works for <code>DistribMulAction</code></p>",
        "id": 390930366,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694698025
    },
    {
        "content": "<p><code>DistribMulAction</code> still requires <code>1 : R</code></p>",
        "id": 390932059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694698516
    },
    {
        "content": "<p>Note that still doesn't solve the unital issue: even a <code>MulAction</code> requires a <code>1</code>. We have <em>no</em> non-unital smul actions in mathlib (except for just the data <code>SMul</code>). So, in order to solve this problem, you either need to make it work over the unitization, or you need to define an entire hierarchy of non-unital actions. This was the conclusion I came to with Oliver months ago.</p>",
        "id": 390932065,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694698518
    },
    {
        "content": "<p>Presumably the same comment applies to non-associative actions? Or are those nonsense?</p>",
        "id": 390932226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694698564
    },
    {
        "content": "<p>Is there any problem with non-unital actions?</p>",
        "id": 390932292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694698582
    },
    {
        "content": "<p>The fact we have no lemmas about them</p>",
        "id": 390932331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694698593
    },
    {
        "content": "<p>I have never worked with non-associative actions, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 390932378,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694698613
    },
    {
        "content": "<p>The tricky bit about using the unitization is that you need different ones depending on whether you have a semiring or a ring (<code>\\N</code> vs <code>\\Z</code>), which is super annoying.</p>",
        "id": 390933076,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694698817
    },
    {
        "content": "<p>Oh I didn’t realize the issue was that deep. I think there’s no point of trying to rely on the unitization at the level of the actions, we should just rename <code>MulAction</code> to <code>MonoidAction</code> and remove the unit for <code>MulAction</code>. It will take some time, but imo that’s clearly the right approach here. Really the only thing I’m worried about is performance issues</p>",
        "id": 390933425,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694698929
    },
    {
        "content": "<p>If non-unital rings are pseudorings, will semigroup actions be called pseudoactions?</p>",
        "id": 390935413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694699568
    },
    {
        "content": "<p>I would prefer not to change the name to <code>pseudo</code> at all.</p>",
        "id": 390938259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694700403
    },
    {
        "content": "<p>That prefix is overused in general, not used for this in the literature I read, and <code>NonUnital</code> is more informative.</p>",
        "id": 390938460,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694700461
    },
    {
        "content": "<p>I am not strongly attached to <code>Pseudo</code>, but <code>NonUnitalModule</code> sounds a bit weird to me</p>",
        "id": 390939214,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694700608
    },
    {
        "content": "<p>Non-something is almost always bad terminology, especially when a something stuff can be Non-something.</p>",
        "id": 390941836,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694701278
    },
    {
        "content": "<p>Yeah, well I think my head would roll if I proposed we switch <code>Ring</code> to <code>UnitalRing</code>, but for sure my preference is to add the adjectives to the unital version.</p>",
        "id": 390943952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694701867
    },
    {
        "content": "<p>I proposed we switch the notation for <code>RingHom</code> a while back and the poll was more than a little one-sided.</p>",
        "id": 390944203,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694701927
    },
    {
        "content": "<p>I think unital rings are extremely common in many parts of maths, so I wouldn't want to make <code>Ring</code> longer. We already have to live with <code>CommRing</code> even though it's a well-known folklore result that all rings are commutative. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> <br>\n<span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I know that non-unital rings are sometimes called <code>Rng</code>, which I understand might be a bit tongue-in-cheek. But it does have the big advantage that it's a very short name. What do you think of it?</p>",
        "id": 390945911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694702445
    },
    {
        "content": "<p>I hate Rng because I have to look very hard to see that there is no i. I guess it’s less of a problem with a mono space font, but I’m still not a big fan</p>",
        "id": 390946375,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694702564
    },
    {
        "content": "<p>In some of my slides I used <code>NUNARing</code> as shorthand for <code>NonUnitalNonAssocRing</code>; <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> thought this was a good idea to apply to mathlib, but I'm on the fence</p>",
        "id": 390946389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694702566
    },
    {
        "content": "<p>I prefer to avoid acronyms wherever possible. Otherwise people are going to wonder \"what's a NUNA ring? I've never heard of that?\" I'm not saying for sure we shouldn't do it, but that's my concern. One advantage is that it shortens things everywhere, whereas if we use <code>Rng</code> we still need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonUnitalSubalgebra#doc\">docs#NonUnitalSubalgebra</a>.</p>",
        "id": 390947026,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694702755
    },
    {
        "content": "<p><code>NonUARing</code> is possibly a slightly better compromise</p>",
        "id": 390947165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694702784
    },
    {
        "content": "<p><code>MaybeUnitalRing</code>?</p>",
        "id": 390965282,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694705033
    },
    {
        "content": "<p>Johan, to answer your question explicitly, while <code>Rng</code> does have the advantage of being short, I've never been a fan because (a) it makes it hard to pronounce (b) it looks like an abbreviation of <code>Range</code> and (c) that trick doesn't generalize to other objects.</p>",
        "id": 390968671,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694705830
    },
    {
        "content": "<p>How do we feel about the following plan of attack for getting 2-sided ideals of non-unital rings? The idea would be to create a GitHub project to track all the substeps of this if we can agree on the general framework:</p>\n<ol>\n<li>Develop the hierarchy of non-unital actions (or some subset thereof) parallel to the unital ones. Maybe even non-unital versions of <code>MulAction</code> and <code>Module</code> are enough for now.</li>\n<li>Execute a renaming if desired after lots of bikeshedding.</li>\n<li>Generalize the typeclass assumptions of <code>Submodule</code>.</li>\n<li>Define the tensor product of non-unital rings (Eric has already done this I think).</li>\n<li>Define two-sided ideals as subbimodules of this tensor product (over <code>ℕ</code> or <code>ℤ</code>).</li>\n<li>Provide the natural equivalence between left ideals and 2-sided ideals in the commutative case.</li>\n<li>Refactor quotients to use two-sided ideals so that it works for non-commutative rings.</li>\n</ol>",
        "id": 390972315,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694706890
    },
    {
        "content": "<p>That overall strategy looks solid to me.</p>\n<p>I have one question: should the definition of two-sided ideal really depend on tensor products? Or can we just give a hands-on definition?</p>",
        "id": 390975333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694707820
    },
    {
        "content": "<p>Note we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subbimodule.mk#doc\">docs#Subbimodule.mk</a>, but to use it on commutative rings we need <a href=\"https://github.com/leanprover-community/mathlib4/pull/7152\">#7152</a> which is not on your list.</p>",
        "id": 390975420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694707861
    },
    {
        "content": "<p>But indeed, defining things via tensor products worries me; not only does it require a non-canonical typeclass instance, but I worry it will be harder on TC performance too</p>",
        "id": 390975568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694707918
    },
    {
        "content": "<p>If we're not going to define it through tensor products and we're just going to hand roll it, then there's not much point to the above plan.</p>",
        "id": 390975763,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694707979
    },
    {
        "content": "<p>I would have hand-rolled a long time ago but the consensus was: wait for <code>Subbimodule</code></p>",
        "id": 390975888,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694708018
    },
    {
        "content": "<p>I think the claim was that we should hand-roll Subbimodule</p>",
        "id": 390975949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708040
    },
    {
        "content": "<p>Not the special case of two-sided ideals</p>",
        "id": 390975976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708044
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 390976070,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694708075
    },
    {
        "content": "<p>I'm a little surprised we have <code>Subbimodule.mk</code> but not an <code>abbrev</code> for the type itself</p>",
        "id": 390976123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708095
    },
    {
        "content": "<p>Right, I suggest moving 4 to the end of the list. (It's good to do it, but it shouldn't block 5-7.)</p>",
        "id": 390976138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694708100
    },
    {
        "content": "<p>Wait, Johan, you mean move step 4 to the end of the list and put a new step 4' in its place which is: \"redefine subbimodules to be hand-rolled as opposed to using the tensor product.\" Correct?</p>",
        "id": 390976442,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694708190
    },
    {
        "content": "<p>I think we still need \"Make algebras bimodules\" before that step</p>",
        "id": 390976733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708283
    },
    {
        "content": "<p>(It can of course happen in parallel with this action refactor)</p>",
        "id": 390976875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708325
    },
    {
        "content": "<p>Though I suspect the action refactor can't happen until we improve elaboration of <code>with</code> in instances, due to performance problems</p>",
        "id": 390976963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708359
    },
    {
        "content": "<blockquote>\n<p>Eric has already done this I think</p>\n</blockquote>\n<p>Yes, the tensor product of non-unital rings is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7106\">#7106</a></p>",
        "id": 390978018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694708734
    },
    {
        "content": "<p>The writing on the wall here: that change makes <code>Mathlib/RingTheory/Kaehler</code> time out</p>",
        "id": 390993142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694714512
    },
    {
        "content": "<p>What doesn't? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 390993308,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694714575
    },
    {
        "content": "<p>But point taken</p>",
        "id": 390993333,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694714582
    },
    {
        "content": "<p>Do we have any special notation for <code>MulOpposite.op r • x</code>, or any plan?</p>",
        "id": 392040544,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695183279
    },
    {
        "content": "<p>The notation <code>x &lt;• r</code> has been discussed before</p>",
        "id": 392068553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695198972
    },
    {
        "content": "<p>I think one or two files use it locally</p>",
        "id": 392068577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695198985
    },
    {
        "content": "<p>Are they in Mathlib? grep couldn't find them.</p>",
        "id": 392113099,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695215023
    },
    {
        "content": "<p>I can't find it in either mathlib3 or mathlib4. I remember it being proposed, but not adopted. Maybe a few files used it at one time but don't any longer?</p>",
        "id": 392118531,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695216753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390283784\">said</a>:</p>\n<blockquote>\n<p>My claim is that the obstacles are, in order:</p>\n<ul>\n<li>making algebras imply right actions without diamonds</li>\n<li>refactoring tensor products to actually be meaningful on left/right modules</li>\n<li>documentation and reducing verbosity</li>\n</ul>\n</blockquote>\n<p>Note that I consider getting this notation working as much lower priority than making algebras imply right actions. There's no point having nice notation if we still can't use it for anything (without breaking other users)</p>",
        "id": 392118716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216827
    },
    {
        "content": "<p>Some examples of where I'd like to use right actions:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Derivation#doc\">docs#Derivation</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuadraticForm#doc\">docs#QuadraticForm</a></li>\n</ul>\n<p>In both cases, adding the notation and switching to using right actions with it would make those types unusable on things like the complex numbers as a real-vector space!</p>",
        "id": 392119616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695217099
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/orgs/leanprover-community/projects/11/views/1\">https://github.com/orgs/leanprover-community/projects/11/views/1</a></p>",
        "id": 392123088,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695218194
    },
    {
        "content": "<p>I added my previous issue to that page</p>",
        "id": 392123996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695218470
    },
    {
        "content": "<p>I understand the plan. Anyway, I'm glad to know the pre-official notation; I'll use it locally in my project.</p>",
        "id": 392129357,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695219948
    },
    {
        "content": "<p>I'm late to the party, but a few comments:</p>\n<ul>\n<li>I agree that using tensor product as a base ring, while it was a nice trick, doesn't seem scalable enough to make that much things depend on it</li>\n<li>I was surprised by Eric's claim that making algebras bi-modules is the first thing to do, but having a look at the issue I undestand that thing are worse than I expected. Still, I think this doesn't completely block starting to develop the theory of bi-modules and so on, but it means that we can't apply this theory to algebras for now.</li>\n</ul>",
        "id": 392702856,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695477808
    },
    {
        "content": "<blockquote>\n<p>Still, I think this doesn't completely block starting to develop the theory of bi-modules and so on, but it means that we can't apply this theory to algebras for now.</p>\n</blockquote>\n<p>My impression was that in a lot of places, we don't actually want to develop new theory, but instead generalize existing theory. And that's what we can't do until algebras are bimodules, otherwise we're not actually making a true generalization.</p>",
        "id": 392703070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695477925
    },
    {
        "content": "<p>Okay I get your point</p>",
        "id": 392703850,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695478400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/390978018\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Eric has already done this I think</p>\n</blockquote>\n<p>Yes, the tensor product of non-unital rings is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7106\">#7106</a></p>\n</blockquote>\n<p>This has some pretty bizarre benchmark results. Everything got faster except the total build time which is almost 1.5x what it was before!</p>",
        "id": 392715795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695485180
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span> Benchmark                                           Metric         Change\n<span class=\"w\"> </span> =========================================================================\n<span class=\"gd\">- build                                               wall-clock      37.1%</span>\n<span class=\"gi\">+ lint                                                wall-clock      -6.5%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.BaseChange   instructions    -6.3%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.Coevaluation                 instructions    -8.5%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.TensorProduct.Opposite       instructions   -23.4%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.MatrixAlgebra                   instructions   -25.1%</span>\n</code></pre></div>",
        "id": 392715852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695485232
    },
    {
        "content": "<p>wat</p>",
        "id": 392715870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695485243
    },
    {
        "content": "<p>Re-run it. It's probably a fluke thing.</p>",
        "id": 392722435,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695488388
    },
    {
        "content": "<p>That didn't help, but merging master did</p>",
        "id": 392737871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695502030
    },
    {
        "content": "<p>So overall this actually seems to have made performance better!</p>",
        "id": 392737879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695502043
    },
    {
        "content": "<p>While we're waiting for a two-sided ideal type, would this definition be considered harmful?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ideal.IsTwoSided</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span>\n</code></pre></div>\n<p>We could then make definitions such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ring.IsSimple</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">I.IsTwoSided</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>\n<p>and then go on to define central simple algebras, do quaternion algebras properly etc (our current definition of quaternion algebra is wrong in the sense that, like our definition of elliptic curve, it makes sense in more generality than the collection of rings for which it gives the correct answer)</p>",
        "id": 401348459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699614777
    },
    {
        "content": "<p>Can we already write the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ring.IsSimple</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div>",
        "id": 401350032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699615199
    },
    {
        "content": "<p>(ah, this needs <a href=\"https://github.com/leanprover-community/mathlib/pull/18588\">!3#18588</a>, but that should be easy enough to send through mathport)</p>",
        "id": 401350204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699615238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/401350032\">said</a>:</p>\n<blockquote>\n<p>Can we already write the following?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ring.IsSimple</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">RingCon</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sure, if we're happy to have a definition which will completely bamboozle essentially all readers.</p>",
        "id": 401350978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699615446
    },
    {
        "content": "<p>(I guess our definition of group completely banboozles essentially all readers, so it's not like there's no precedence here...)</p>",
        "id": 401351460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699615586
    },
    {
        "content": "<p>A back of an envelope calculation indicates that these two definitions of <code>IsSimple</code> might give different answers in the semiring case (which I definitely don't care about).</p>",
        "id": 401352450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699615839
    },
    {
        "content": "<p>Yes, for <code>Semiring</code> not all equivalence relations that respect the operations come from ideals, I think <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> know an example.</p>",
        "id": 401353218,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699616022
    },
    {
        "content": "<p>Maybe I am wrong, but if you take the \"pre-cyclic\" semiring where addition by 1 results in <code>0 --&gt; 1 --&gt; 2 --&gt; 1 (loop)</code>, then the natural map from <code>Nat</code> to this semiring is not the quotient by an ideal.</p>",
        "id": 401354541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699616341
    },
    {
        "content": "<p>(I guess that the relation in this case is \"being at least 2 and congruent modulo 2\".  All algebraic failures are usually due to analysis messing things up, typically in the form of inequalities.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>  )</p>",
        "id": 401355083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699616472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/401350204\">said</a>:</p>\n<blockquote>\n<p>(ah, this needs <a href=\"https://github.com/leanprover-community/mathlib/pull/18588\">!3#18588</a>, but that should be easy enough to send through mathport)</p>\n</blockquote>\n<p>Done, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8313\">#8313</a></p>",
        "id": 401358224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699617190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/401354541\">said</a>:</p>\n<blockquote>\n<p>Maybe I am wrong, but if you take the \"pre-cyclic\" semiring where addition by 1 results in <code>0 --&gt; 1 --&gt; 2 --&gt; 1 (loop)</code>, then the natural map from <code>Nat</code> to this semiring is not the quotient by an ideal.</p>\n</blockquote>\n<p>Well, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ideal.instHasQuotientIdealToSemiringToCommSemiring#doc\">docs#Ideal.instHasQuotientIdealToSemiringToCommSemiring</a> doesn't even let you take a quotient by an ideal in a semiring, so I don't know if that claim is meaningful to lean!</p>",
        "id": 401362530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699618247
    },
    {
        "content": "<p>The natural map is (maybe?) still a quotient by a <code>RingCon</code></p>",
        "id": 401362698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699618301
    },
    {
        "content": "<p>right, that's the point of a RingCon, surjections between semirings are precisely RingCons.</p>",
        "id": 401414221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699636300
    },
    {
        "content": "<p>If we want to maximize bamboozling, arguably we should drop Ideals entirely and work only with RingCon!</p>",
        "id": 401414906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699636642
    },
    {
        "content": "<p>Even a type of two-sided ideals would be OK, I feel. For rings, they describe exactly the equivalence relations which are compatible with the ring structure, hence define all quotients. For semirings, this is more complicated, it is not even true that the equivalence class of 0 characterizes the equivalence relation.</p>",
        "id": 401415917,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699637179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/401358224\">said</a>:</p>\n<blockquote>\n<p>Done, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8313\">#8313</a></p>\n</blockquote>\n<p>Hopefully should land soon, since it's already maintainer-merged</p>",
        "id": 406986517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702167439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncommutative.20ring.20things/near/392118716\">said</a>:</p>\n<blockquote>\n<p>Note that I consider getting this notation working as much lower priority than making algebras imply right actions. There's no point having nice notation if we still can't use it for anything (without breaking other users)</p>\n</blockquote>\n<p>I caved and the notation is now in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8909\">#8909</a>. I stand by algebras implying right actions being the next step though.</p>",
        "id": 406986672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702167538
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Kh0y8Lr5FHM7TjiEeOdaDjZX/2D6223CB-A04C-40A5-BFBA-2F25483FB09B.jpg\">2D6223CB-A04C-40A5-BFBA-2F25483FB09B.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Kh0y8Lr5FHM7TjiEeOdaDjZX/2D6223CB-A04C-40A5-BFBA-2F25483FB09B.jpg\" title=\"2D6223CB-A04C-40A5-BFBA-2F25483FB09B.jpg\"><img src=\"/user_uploads/3121/Kh0y8Lr5FHM7TjiEeOdaDjZX/2D6223CB-A04C-40A5-BFBA-2F25483FB09B.jpg\"></a></div><p>The last 2 notations are not displayed on iPhone.</p>",
        "id": 407025293,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702195911
    },
    {
        "content": "<p>Hence \"has font issues\"!</p>",
        "id": 407040326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702203256
    }
]