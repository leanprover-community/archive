[
    {
        "content": "<p>With the current structure of mathlib, almost all of integration depends on almost all of differentiation, for the following reason:</p>\n<ul>\n<li>the Bochner integral is defined for integrable functions</li>\n<li>integrable functions are defined to be functions in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> space</li>\n<li>the theory of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> space (for general real <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p\\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) requires a variety of standard inequalities about the functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>these inequalities are proved from the convexity of the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>the convexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is proved by checking its second derivative</li>\n</ul>\n<p>This is mathematically rather inelegant (because we only need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> for the integral, and the convexity of the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> is trivial).  And of course, it also means that the port wouldn't reach the Bochner integral for ages.</p>",
        "id": 358887634,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684294893
    },
    {
        "content": "<p>Here is a picture showing my proposed solution: <br>\n<a href=\"/user_uploads/3121/10zvdkmJv70Ucpby481VUgcC/measure_theory.integral.bochner.pdf\">measure_theory.integral.bochner.pdf</a><br>\nNamely, give direct elementary proofs of the convexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> (and a few other functions), so no differentiation is required.  This brings the length of the chain to the Bochner integral from 108 down to 97, and also cuts the length of the longest chain in mathlib down from 128 to 117.  After this change, the longest unported path to the Bochner integral is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  analysis.special_functions.trigonometric.basic\n- analysis.special_functions.trigonometric.angle\n  analysis.special_functions.complex.arg\n  analysis.special_functions.complex.log\n  analysis.special_functions.pow.complex\n  analysis.special_functions.pow.real\n  analysis.special_functions.pow.nnreal\n  analysis.special_functions.pow.asymptotics\n  analysis.special_functions.pow.continuity\n  measure_theory.function.lp_space\n  measure_theory.function.lp_order\n  measure_theory.function.l1_space\n  measure_theory.function.simple_func_dense_lp\n  measure_theory.integral.set_to_l1\n  measure_theory.integral.bochner\n</code></pre></div>",
        "id": 358887668,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684294923
    },
    {
        "content": "<p>A first PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/19026\">#19026</a>; this just changes the proofs, saving the file structure reorganization for a second PR.</p>\n<p>There is a bit of a cost to this change (400 lines of very technical inequality proofs replacing 150 lines of differentiation, and changes to two already-ported files), but I think it is worth it to let us port integration and differentiation in parallel rather than in sequence.</p>",
        "id": 358887925,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684295113
    },
    {
        "content": "<p>Sounds good to me. Have you checked whether it is worth it splitting <code>measure_theory.function.l1_space</code> into a file that does all the <code>has_finite_integral</code> and <code>integrable</code> stuff and one that relates it to the L^1 space? it looks to me that this might cut down a bit of the dependency tree as well</p>",
        "id": 358891500,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684297847
    },
    {
        "content": "<p><code>integrable</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> by definition, right?  So I don't think that works.</p>",
        "id": 358891547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684297896
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integrable\">docs#measure_theory.integrable</a> says something different</p>",
        "id": 358891727,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684298017
    },
    {
        "content": "<p>the problem might be that the Bochner integral is for elements in L^1, so it does not help for what you want to do.</p>",
        "id": 358892162,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684298291
    },
    {
        "content": "<p>but if one just wants to use integrable, it feels like overkill to have all the L^p things automatically imported.</p>",
        "id": 358892203,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684298330
    },
    {
        "content": "<p>What files use <code>integrable</code> but not <code>integral</code>?</p>",
        "id": 358892517,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684298542
    },
    {
        "content": "<p>Ah, now I understand the issue: simple functions are not used directly to define the integral, but are considered as a additive subgroup of L^1 and this is probably so that one gets continuity of the integral right away.</p>",
        "id": 358894087,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1684299613
    },
    {
        "content": "<p>Would your proposal involve restoring the original proofs after the port</p>",
        "id": 358894275,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684299729
    },
    {
        "content": "<p>I hope not</p>",
        "id": 358894300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684299751
    },
    {
        "content": "<p>Nice! This is a change I started doing two years ago but did not finish because I lost the courage to keep up with the conflicts that kept accumulating because other people were changing files in that area. See the old discussion at <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib</a> . This is where the isolation of derivation in files with names *_deriv originates (exp vs exp_deriv, etc).<br>\nIn summary, I think this change is a good idea :)</p>",
        "id": 358894624,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1684300014
    },
    {
        "content": "<p>Thanks for digging up that thread, I was sure we had discussed this all before but couldn't find it.  Not much has changed in 2 years it seems!</p>",
        "id": 358895458,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684300564
    },
    {
        "content": "<p>I think this is a great change. It's mildly sad to be giving low-level proofs of things we can do slickly with more development. But the plus side here is every single build of mathlib ever in the future being significantly faster.</p>\n<p>Potentially we could even add some documentation, or even a file with a bunch of <code>example</code>s, preserving the original proofs so that people can still see the slick way to do it.</p>",
        "id": 359092442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684362141
    },
    {
        "content": "<p>Does this actually reduce the total build time on finitely-parallel machines?</p>",
        "id": 359093163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362510
    },
    {
        "content": "<p>The \"long pole\" conversation was optimizing for infinite parallelism!</p>",
        "id": 359093237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684362558
    },
    {
        "content": "<p>It's so hard to get good answers about the finitely-parallel case... I once wrote some programs to try to estimate this, but it wasn't particularly convincing. Anyway, I have lots of cores. :-)</p>",
        "id": 359093668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684362771
    },
    {
        "content": "<p>I've hit merge on <a href=\"https://github.com/leanprover-community/mathlib/pull/19026\">#19026</a>.</p>",
        "id": 359093761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684362794
    },
    {
        "content": "<p>I still like 2021-Heather's idea to avoid needing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> at all for the Bochner integral:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/254876142\">said</a>:</p>\n<blockquote>\n<p>Another possibility is</p>\n<ul>\n<li>define <code>[Lp_class f g]</code> where <code>f</code> and <code>g</code> are a pair of inverse functions from <code>ℝ≥0∞</code> to itself satisfying ... some list of properties</li>\n<li>define <code>Lp_space</code> to take <code>(f : ℝ≥0∞ → ℝ≥0∞) (g : ℝ≥0∞ → ℝ≥0∞) [Lp_class f g]</code> rather than <code>p</code></li>\n<li>check that <code>[Lp_class id id]</code> and define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> to be <code>Lp_space id id</code></li>\n<li>much later in the hierarchy, check that <code>[Lp_class (λ x, x ^ p) (λ x, x ^ (1 / p))]</code></li>\n</ul>\n</blockquote>",
        "id": 359094346,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684363096
    },
    {
        "content": "<p>but for the record, here is 2021-Scott's response:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/The.20long.20pole.20in.20mathlib/near/254876483\">said</a>:</p>\n<blockquote>\n<p>Hmm, I feel like this is too far a compromise. Mathlib compiling fast is nice, and I don't mind changing from one mathematically plausible definition to another to achieve this, but <code>[Lp_class]</code> doesn't really have a leg to stand on mathematically. :-)</p>\n</blockquote>",
        "id": 359094399,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684363137
    },
    {
        "content": "<p>As a bonus, does that by any chance give us a strictly greater generality than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> (maybe if we generalize <code>Lp_class</code> further)?</p>",
        "id": 359094459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684363178
    },
    {
        "content": "<p>A silver lining I was seeing to this proof lengthening: it seems more likely that these new proofs (or at least, the helper lemmas they needed) generalize to weirder situations than the old ones did</p>",
        "id": 359096177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684364021
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19031\">#19031</a> is the PR for the split.</p>",
        "id": 359301197,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684379898
    },
    {
        "content": "<p>The build failed on this PR with a timeout but I don't really understand why -- it passed CI on an up-to-date master.</p>",
        "id": 359311088,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684388627
    },
    {
        "content": "<p>The timeout is on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp.simple_func.normed_space\">docs#measure_theory.Lp.simple_func.normed_space</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If `E` is a normed space, `Lp.simple_func E p μ` is a normed space. Not declared as an</span>\n<span class=\"sd\">instance as it is (as of writing) used only in the construction of the Bochner integral. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">normed_space</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">Lp.simple_func</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"bp\">λ</span><span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_subgroup.coe_norm</span><span class=\"o\">,</span> <span class=\"n\">add_subgroup.coe_norm</span><span class=\"o\">,</span> <span class=\"n\">coe_smul</span><span class=\"o\">,</span> <span class=\"n\">norm_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 359311360,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684388870
    },
    {
        "content": "<p>I pushed a merge with master, just in case...</p>",
        "id": 359373838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684410751
    },
    {
        "content": "<p>Everything now passes <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 359403037,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684417951
    },
    {
        "content": "<p>Hot take: Using the second derivative test is shorter but kind of mathematically inelegant, not just inconvenient for the porting effort. When I think of classic measure theory textbooks (e.g. papa Rudin) I can't imagine them using the second derivative test so early (if at all).</p>",
        "id": 359444219,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684427748
    },
    {
        "content": "<p>I agree (although this is probably still a minority view).</p>",
        "id": 359444631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684427869
    }
]