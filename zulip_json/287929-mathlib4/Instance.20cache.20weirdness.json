[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3466\">!4#3466</a>, I have <a href=\"https://github.com/leanprover-community/mathlib4/pull/3466/files#r1171103512\">a place where</a> I have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"c1\">-- porting note: fails without this line</span>\n</code></pre></div>\n<p>It looks like there's some weirdness going on with the instance cache (if that still exists), because the type of <code>fin</code> before and after that line is unchanged.</p>",
        "id": 350994638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681897836
    },
    {
        "content": "<p><code>replace fin : _ := fin</code> doesn't work, so it's something to do with the type annotation being present</p>",
        "id": 350995111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681897975
    },
    {
        "content": "<p>Is it really unchanged including things like universe metavariables and pp.all etc etc?</p>",
        "id": 351000767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681899581
    },
    {
        "content": "<p>I only tested with <code>pp.explicit</code>; but if I use <code>have</code> instead of <code>replace</code> then I get <code>fin fin : FiniteDimensional K V</code> which I assume means they are really the same type</p>",
        "id": 351006992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681901136
    },
    {
        "content": "<p>and does the <code>have</code> instead of <code>replace</code> still solve the issue?</p>",
        "id": 351008157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681901467
    },
    {
        "content": "<p>Yes, <code>have</code> and <code>replace</code> are interchangeable there</p>",
        "id": 351010684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681902144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20cache.20weirdness/near/350994638\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3466\">!4#3466</a>, I have <a href=\"https://github.com/leanprover-community/mathlib4/pull/3466/files#r1171103512\">a place where</a> I have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"c1\">-- porting note: fails without this line</span>\n</code></pre></div>\n<p>It looks like there's some weirdness going on with the instance cache (if that still exists), because the type of <code>fin</code> before and after that line is unchanged.</p>\n</blockquote>\n<p>as far as I know, btw, the instance cache does still exist and tactics have to make sure to reset it if needed; however, resetting it after every <code>have</code> and such like is now sound performance-wise.</p>",
        "id": 351025100,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681905900
    },
    {
        "content": "<p>I see that you use <code>by_cases</code>, I wonder if that's related and it's not been written in this \"correct\" way</p>",
        "id": 351025235,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681905934
    },
    {
        "content": "<p>ok, another theory, Lean doesn't realise to reset the instance cache because it's only _defeq_ to a class, not a class itself</p>",
        "id": 351028490,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681906660
    },
    {
        "content": "<p>there seems to be no way to test this as Lean doesn't allow <code>def</code>s to be classes</p>",
        "id": 351028672,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681906691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342010171\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342006022\">said</a>:</p>\n<blockquote>\n<p>Am I imagining that Lean 4 did away with the instance cache and that therefore casesI isn't needed?</p>\n</blockquote>\n<p>Yes to the second part, no to the first. Lean 4 didn't do away with the instance cache, it now effectively calls <code>resetI</code> whenever the local context changes at all. Some internals had to be changed to make this performant enough</p>\n</blockquote>\n<p>this is where I remember this from</p>",
        "id": 351030043,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681906974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342121059\">said</a>:</p>\n<blockquote>\n<p>Together with <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> I figured out what causes this. </p>\n<ul>\n<li><code>cases</code> and <code>cases'</code> both call <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lean.MVarId.introN\">docs#Lean.MVarId.introN</a></li>\n<li><code>introN</code> (via <code>introNImp</code>) calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withNewLocalInstances#doc\">docs4#Lean.Meta.withNewLocalInstances</a> that checks whether certain fvars are classes using two methods <code>isClassQuick?</code> and <code>isClassExpensive?</code>. These two functions both have some support dealing with metavariables, but it makes the wrong decision in certain cases, not recognizing that <code>Foo T</code> is a class in Kyle's latest example. We tested that <a href=\"https://github.com/leanprover/lean4/compare/master...fpvandoorn:lean4:isClassMVarChange\">this fix</a> fixes Kyle's latest example. Is a PR with this change welcome?</li>\n</ul>\n</blockquote>\n<p>And indeed later on in the thread there's a solution given; Adam notices that <code>rcases</code> and <code>obtain</code> don't have this issue. Sorry for all the incidental pings, but it seems that your solution, Eric, will come in a PR that fixes <code>cases/cases'/by_cases</code>, which hasn't come yet</p>",
        "id": 351031084,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681907208
    },
    {
        "content": "<p>(for now you can use something like <code>  obtain fin | fin := Classical.em (FiniteDimensional K V)</code>)</p>",
        "id": 351031144,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681907221
    },
    {
        "content": "<blockquote>\n<p>Lean 4 didn't do away with the instance cache, it now effectively calls <code>resetI</code> whenever the local context changes at all.</p>\n</blockquote>\n<p>Ironically, in Eric's case the local context doesn't change at all and yet <code>resetI</code> is being called.</p>",
        "id": 351107400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681923905
    },
    {
        "content": "<p>I was just about to mention <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342121059\">Floris's message</a> but I see <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> already mentioned it. It's possible that another workaround is <code>change _ at fin</code> since that will do a <code>revert</code>/<code>intro</code> dance, and <code>intro</code> is what updates the set of local instances.</p>",
        "id": 351143938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681934930
    },
    {
        "content": "<p><code>change _ at fin</code> doesn't work here.</p>",
        "id": 352233547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682333090
    },
    {
        "content": "<p>Thanks for checking. I tried <code>change FiniteDimensional _ _ at fin</code> too, but what I didn't account for is that this doesn't necessarily change the local variable's actual type expression.</p>",
        "id": 352252453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682337944
    },
    {
        "content": "<p>Re the bug Floris is fixing, we can observe what the issue is with the instance cache. If you add the following tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"s2\">\"foo \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">t</span>\n  <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">ty</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">ty</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"term is {toString ty}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n</code></pre></div>\n<p>then if you do <code>foo fin</code> after the <code>by_cases fin : FiniteDimensional K V</code> line, you see a metavariable. This tactic is reproducing some of the code for the instance class computation, and it expects to see an application, not a metavariable, because it forgets to expand metavariables here.</p>",
        "id": 352252947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682338057
    },
    {
        "content": "<p>On the other hand, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">replace</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span>\n    <span class=\"n\">foo</span> <span class=\"n\">fin</span>\n</code></pre></div>\n<p>you see that now <code>fin</code> is no longer a metavariable, and the instance cache computation sees that <code>fin</code> is an application involving <code>FiniteDimensional</code>.</p>",
        "id": 352253173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682338109
    }
]