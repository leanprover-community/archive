[
    {
        "content": "<p>I've found myself wanting to write <code>Y: Type (Same level as X)</code>. I haven't seen an elaborator along those lines. Does this or something similar exist?</p>",
        "id": 382765389,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691444705
    },
    {
        "content": "<p>I guess it would make sense to have <code>level_of%</code> given we have <code>type_of%</code></p>",
        "id": 382770035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691446872
    },
    {
        "content": "<p>Then again, you could also just use <code>Y : type_of% X</code> instead of <code>Y : Type (level_of% X)</code></p>",
        "id": 382770053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691446881
    },
    {
        "content": "<p>My naive attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Parser</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[term_parser]</span> <span class=\"kd\">def</span> <span class=\"n\">levelOf</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"s2\">\"level_of% \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span> <span class=\"n\">maxPrec</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[term_elab levelOf]</span> <span class=\"kd\">def</span> <span class=\"n\">elabLevelOf</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"n\">getLevel</span> <span class=\"n\">e</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>but I realize now that <code>Level</code> is not a \"term\" so this probably can't be fixed</p>",
        "id": 382770682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691447187
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">builtin_initialize</span> <span class=\"n\">Lean.Parser.registerBuiltinDynamicParserAttribute</span> <span class=\"bp\">`</span><span class=\"n\">level_parser</span> <span class=\"bp\">`</span><span class=\"n\">level</span>\n</code></pre></div>\n<p>in a separate file is enough to help thing move</p>",
        "id": 382771077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691447392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/same.20level.20as/near/382770035\">said</a>:</p>\n<blockquote>\n<p>I guess it would make sense to have <code>level_of%</code> given we have <code>type_of%</code></p>\n</blockquote>\n<p>there are no macros in the <code>level</code> category</p>",
        "id": 382772109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691447833
    },
    {
        "content": "<p>Could you give an example of what you mean that isn't <code>(X : Type u) (Y : Type u)</code>?</p>",
        "id": 382775120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691449412
    },
    {
        "content": "<p>Eg <code>(X : Type*)</code> and <code>(Y : type_of% X)</code></p>",
        "id": 382785281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691454228
    },
    {
        "content": "<p>I think probably explicit universes are best there</p>",
        "id": 382786090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691454532
    },
    {
        "content": "<p>How about <code>(X1 X2 X3 ... Xn : Type*)</code> and <code>(Y : type_of% X37)</code>?</p>",
        "id": 382788206,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691455211
    },
    {
        "content": "<p>I had <code>n=6</code> or so in \"real life\"</p>",
        "id": 382788361,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691455266
    },
    {
        "content": "<p>Is making <code>Type*</code> unhygienic by generating a <code>uX37</code> universe variable possible and/or sane?</p>",
        "id": 382788763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691455414
    },
    {
        "content": "<p>Eh, you have kinda convinced me that it should be still be broken out</p>",
        "id": 382789538,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691455666
    }
]