[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3705\">!4#3705</a> (Topology.Category.Profinite.Basic) is hopefully not far from done. Some simp lemmas must be missing at the remaining sorries, because the goal is not as nice as the corresponding point in mathlib3.</p>\n<p>If any of the \"Profinite people\" (<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>?) would like to take over this one I'm done for the day.</p>",
        "id": 353826185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682683436
    },
    {
        "content": "<p>I don’t think I’m <em>totally</em> disconnected, but I can take a look in a couple of hours anyway ;)</p>",
        "id": 353849583,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682686371
    },
    {
        "content": "<p>Okay, I got the file to build by adding the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: This lemma was not needed in mathlib3</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">forget_ContinuousMap_mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ContinuousMap.mk</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Presumably the changes to <code>start-port.sh</code> should be split off to a separate PR?</p>",
        "id": 353888828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682690734
    },
    {
        "content": "<p>I think a similar lemma would be helpful for <code>TopCat</code> and <code>CompHaus</code> as well.</p>",
        "id": 353889386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682690789
    },
    {
        "content": "<p>Yeah that is a good idea</p>",
        "id": 353892139,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682691083
    },
    {
        "content": "<p>In the long run (i.e. after the port) I think we should make homs in concrete categories such as <code>Type</code>, <code>TopCat</code>, etc. into structures so lean doesn't get so easily confused about when something should be a morphism and when it should be a function/continuousMap</p>",
        "id": 353892745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682691144
    },
    {
        "content": "<p>Well, it looks like we still have some linting errors. I think the simp lemmas around coercions to functions need to be shuffled a bit.</p>",
        "id": 353918782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682694008
    }
]