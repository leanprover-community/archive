[
    {
        "content": "<p>There are some obvious things: removing a necessary instance will cause failure. But should I expect that importing additional files causes instance synthesis to change from successful to unsuccessful? Here is an example to play with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you try different subsets of the import list, you can see the different behavior. I don't understand the behavior. Any explanation would be appreciated.</p>",
        "id": 344707689,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679859614
    },
    {
        "content": "<p>Can you explain what the combinations with unexpected observations are?</p>",
        "id": 344710843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679861525
    },
    {
        "content": "<p>The instance this is finding is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRing#doc\">docs4#instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRing</a></p>",
        "id": 344711125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679861679
    },
    {
        "content": "<p>Which is a workaround instance for <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> breaking <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semiring.toModule#doc\">docs4#Semiring.toModule</a></p>",
        "id": 344711202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679861727
    },
    {
        "content": "<p>We should either remove that workaround, or move it to <code>Algebra.Module.Basic</code></p>",
        "id": 344711224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679861751
    },
    {
        "content": "<p>Because right now one solution to <code>Module R R</code> not working (as in your example) is <code>import Mathlib.Topology.Algebra.UniformMulAction</code> and that's ridiculous</p>",
        "id": 344711337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679861811
    },
    {
        "content": "<p>Reordered. No imports fails of course. First, succeeds with <code>Semiring.toModule</code>. Include the second, it fails no matter the heartbeat limit. Include all of Mathlib at it gets the one you said.</p>",
        "id": 344711500,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679861910
    },
    {
        "content": "<p>So something in the second is triggering a diamond?</p>",
        "id": 344711562,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679861957
    },
    {
        "content": "<p><code>attribute [-instance] MvPolynomial.instCommRingMvPolynomialToCommSemiring in</code> causes a difference</p>",
        "id": 344712501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679862635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- comment the next line (equivalent to removing the `CommRing` import) to make this fail</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">MvPolynomial.instCommRingMvPolynomialToCommSemiring</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344712567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679862677
    },
    {
        "content": "<p>This succeeds, so it's not a non-defeq diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">MvPolynomial.instCommRingMvPolynomialToCommSemiring</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toCommSemiring</span> <span class=\"bp\">=</span>\n      <span class=\"n\">MvPolynomial.commSemiring</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 344712893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679862854
    },
    {
        "content": "<p>Did you mean <code>set_option synthInstance.maxHeartbeats 0 in</code> instead of <code>set_option maxHeartbeats 0 in</code>? It seems to succeed with the former</p>",
        "id": 344713082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679863009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/how.20does.20changing.20imports.20affect.20tc.20synthesis/near/344712893\">said</a>:</p>\n<blockquote>\n<p>This succeeds, so it's not a non-defeq diamond:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">MvPolynomial.instCommRingMvPolynomialToCommSemiring</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toCommSemiring</span> <span class=\"bp\">=</span>\n      <span class=\"n\">MvPolynomial.commSemiring</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ! Should I be guessing that this <code>rfl</code> is not succeeding in tc synthesis with <code>CommRing</code> import? </p>\n<p>What about <code>import Mathlib</code> fixes the problem?</p>",
        "id": 344879687,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679926851
    },
    {
        "content": "<p>The <code>CommRing</code> import is what defines <code>MvPolynomial.instCommRingMvPolynomialToCommSemiring</code> so it doesn't make sense to ask if it works without the import</p>",
        "id": 344879921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679926900
    },
    {
        "content": "<p>I think this is just a performance thing, all versions succeed with <code>synthInstance.maxHeartbeats</code> as <code>0</code></p>",
        "id": 344880181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679926939
    },
    {
        "content": "<p>Ah right. Performance I agree with. But I guess I don't understand the underlying algorithm well enough to understand how performance changes with the different instances in the context</p>",
        "id": 344880640,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679927029
    },
    {
        "content": "<p>Having <code>MvPolynomial.instCommRingMvPolynomialToCommSemiring</code> available seems to send it on a wild goose chase</p>",
        "id": 344880850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679927060
    },
    {
        "content": "<p>While having <code>instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRing</code> available gives it a shortcut back to sanity again</p>",
        "id": 344880953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679927080
    },
    {
        "content": "<p>I did not see that in the trace. Did you find it?</p>",
        "id": 344880964,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679927082
    },
    {
        "content": "<p>Did you see my message above where I showed <code>attribute [-instance] MvPolynomial.instCommRingMvPolynomialToCommSemiring</code> fixes the problem?</p>",
        "id": 344881100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679927105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/how.20does.20changing.20imports.20affect.20tc.20synthesis/near/344711337\">said</a>:</p>\n<blockquote>\n<p>Because right now one solution to <code>Module R R</code> not working (as in your example) is <code>import Mathlib.Topology.Algebra.UniformMulAction</code> and that's ridiculous</p>\n</blockquote>\n<p>Can this fix other problems in my life?! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 344881146,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679927113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/how.20does.20changing.20imports.20affect.20tc.20synthesis/near/344881100\">said</a>:</p>\n<blockquote>\n<p>Did you see my message above where I showed <code>attribute [-instance] MvPolynomial.instCommRingMvPolynomialToCommSemiring</code> fixes the problem?</p>\n</blockquote>\n<p>Yes. I did but I would hope the trace had more information about what is going on under the hood</p>",
        "id": 344881353,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679927149
    },
    {
        "content": "<p>I'm not very familiar with those traces, perhaps <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> could take a look</p>",
        "id": 344881494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679927168
    },
    {
        "content": "<p>Is there a shorter way to dump the traces to a file than building it on the command line? For example, is there anything I can specify in my editor?</p>",
        "id": 344882836,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679927444
    },
    {
        "content": "<p>Just saw this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Needed to add the following line</span>\n<span class=\"kn\">private</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n</code></pre></div>",
        "id": 344936077,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679940771
    },
    {
        "content": "<blockquote>\n<p>Is there a shorter way to dump the traces to a file than building it on the command line? For example, is there anything I can specify in my editor?</p>\n</blockquote>\n<p>Filed as <a href=\"https://github.com/leanprover/vscode-lean4/issues/293\">https://github.com/leanprover/vscode-lean4/issues/293</a></p>",
        "id": 344936841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679941012
    },
    {
        "content": "<p><code>private instance</code>? I wonder what the odds are that this does what it was intended to do</p>",
        "id": 344937171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679941112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/how.20does.20changing.20imports.20affect.20tc.20synthesis/near/344936077\">said</a>:</p>\n<blockquote>\n<p>Just saw this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: Needed to add the following line</span>\n<span class=\"kn\">private</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>etaExperiment</code> removes this. Testing now</p>",
        "id": 344939581,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679941824
    },
    {
        "content": "<p>At least for <a href=\"https://github.com/leanprover-community/mathlib4/pull/3067\">!4#3067</a> this change moved <code>dsimp took 408s</code></p>",
        "id": 344953744,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679945902
    },
    {
        "content": "<p>from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/dsimp.20took.2083.2E3s\">#mathlib4 &gt; dsimp took 83.3s</a></p>",
        "id": 344953867,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679945938
    }
]