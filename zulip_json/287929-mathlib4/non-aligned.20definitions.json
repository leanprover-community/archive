[
    {
        "content": "<p>Is it hard to generate the list of definitions that are in ported files but neither <code>align</code>ed, nor <code>noalign</code>ed?</p>",
        "id": 321088277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673590282
    },
    {
        "content": "<p>Probably, we should skip instances.</p>",
        "id": 321088303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673590317
    },
    {
        "content": "<p>Oh that would be nice. And maybe add a linter for this...</p>",
        "id": 321213717,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673630124
    },
    {
        "content": "<p>Do you mean definitions in the corresponding Lean 3 files?</p>",
        "id": 321214322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673630281
    },
    {
        "content": "<p>(I think so because <code>#noalign</code> only involves a Lean 3 identifier)</p>",
        "id": 321214443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673630304
    },
    {
        "content": "<p>Oh wait, I meant a Lean 4 linter, but that's not the most logical direction. We could still lint for declarations that have no aligned Lean 3 declarations to it, but that will have (many?) false positives.</p>",
        "id": 321280086,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673653864
    },
    {
        "content": "<p>Yes I think we would need something that has access to both mathlib3 and mathlib4.</p>",
        "id": 321347532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673698744
    },
    {
        "content": "<p>A CI job that does that comparison is the kind of thing I was hoping we could host in the mathlib-port-status repo</p>",
        "id": 321368953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673708070
    },
    {
        "content": "<p>IMHO, both parts of the \"API diff\" are useful.</p>",
        "id": 321418688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673738881
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/e604a3d06300a0fc31e31276b055403b\">https://gist.github.com/rwbarton/e604a3d06300a0fc31e31276b055403b</a></p>",
        "id": 323054676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489131
    },
    {
        "content": "<p>Missing aligns = definitions in the original files that don't have corresponding <code>#align</code> statements<br>\nPhantom aligns = <code>#align</code> statements about Lean 3 definitions that don't exist (usually because the name is incorrect somehow)</p>",
        "id": 323054962,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489223
    },
    {
        "content": "<p>Currently, 6061 entries total</p>",
        "id": 323055211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489288
    },
    {
        "content": "<p>Can you commit the script you used to generate that to <a href=\"https://github.com/leanprover-community/mathlib-port-status\">the mathlib-port-status repo</a>? It doesn't need to be set up to do anything in CI (yet)</p>",
        "id": 323056090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674489512
    },
    {
        "content": "<p>There are a few (&lt; 100) that are <code>#noalign</code>ed, those should not be in the list.</p>",
        "id": 323056753,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489669
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/align-aligns\">https://github.com/leanprover-community/mathlib4/tree/align-aligns</a> but it relies on some manual input for now</p>",
        "id": 323056860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489701
    },
    {
        "content": "<p>I guess this list will keep people busy for a while</p>",
        "id": 323057000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674489728
    },
    {
        "content": "<p>I'm going to take a whack at some of the \"phantom aligns\" <span aria-label=\"locked\" class=\"emoji emoji-1f512\" role=\"img\" title=\"locked\">:locked:</span></p>",
        "id": 323079597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674495525
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1794\">https://github.com/leanprover-community/mathlib4/pull/1794</a></p>",
        "id": 323102203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674502546
    },
    {
        "content": "<p><span aria-label=\"unlocked\" class=\"emoji emoji-1f513\" role=\"img\" title=\"unlocked\">:unlocked:</span> but I did pretty much all of them, I only ignored some that were clearly do to unsynchronized mathlib 3 changes (uIcc etc)</p>",
        "id": 323102344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674502579
    },
    {
        "content": "<p>It would be a big help if it was an error to put a capital letter on the left side of <code>#align</code>.</p>",
        "id": 323102645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674502680
    },
    {
        "content": "<p>Sure, let's do that. <a href=\"https://github.com/leanprover-community/mathlib4/pull/1796\">mathlib4#1796</a></p>",
        "id": 323106400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674503909
    },
    {
        "content": "<p>I implemented the linter but it's probably best for someone else to handle reviewing all the linter postives and ignoring or fixing them as appropriate</p>",
        "id": 323106559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674503968
    },
    {
        "content": "<p>hmm right</p>",
        "id": 323106632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674503995
    },
    {
        "content": "<p>there's also some small number of actual capital letters in mathlib 3</p>",
        "id": 323106741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674504011
    },
    {
        "content": "<p>I guess those we handle with nolint?</p>",
        "id": 323106776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674504021
    },
    {
        "content": "<p>I'm imagining you would use <code>set_option linter.uppercaseLean3 false</code> either immediately before the affected <code>#align</code> statement or at the top of the file / in a section if it concerns a whole sequence of theorems</p>",
        "id": 323108409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504522
    },
    {
        "content": "<p>(this is a lean 4 style linter not a mathlib linter)</p>",
        "id": 323108465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504541
    },
    {
        "content": "<p>Is the file <code>export.json</code> produced by doc-gen served directly from somewhere?</p>",
        "id": 323258708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674568949
    },
    {
        "content": "<p><a href=\"https://gist.github.com/rwbarton/e604a3d06300a0fc31e31276b055403b\">https://gist.github.com/rwbarton/e604a3d06300a0fc31e31276b055403b</a> updated for today</p>",
        "id": 323259730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674569179
    },
    {
        "content": "<p>It's available for download from the GitHub actions jobs</p>",
        "id": 323261314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674569553
    },
    {
        "content": "<p>Yeah, I was hoping for something in a fixed location</p>",
        "id": 323261460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674569587
    },
    {
        "content": "<p>It is not clear to me how to get the latest version automatically, since the job does not always upload it (I guess if nothing changed?)</p>",
        "id": 323261624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674569616
    },
    {
        "content": "<p>Oh, can you use <code>decls.bmp</code> for what you need?</p>",
        "id": 323261714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674569637
    },
    {
        "content": "<p>I have no idea</p>",
        "id": 323262724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674569881
    },
    {
        "content": "<p>because I don't know what that is</p>",
        "id": 323262862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674569890
    },
    {
        "content": "<p><code>https://leanprover-community.github.io/mathlib_docs/searchable_data.bmp</code></p>",
        "id": 323273183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674572230
    },
    {
        "content": "<p>It's secretly a json file, but github doesn't gzip it unless we pretend it's a bitmap</p>",
        "id": 323273352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674572277
    },
    {
        "content": "<p>I'm using some of the other fields too (notably <code>filename</code>, but also <code>is_meta</code>, <code>attributes</code>)</p>",
        "id": 323275226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674572695
    },
    {
        "content": "<p>Then I think the answer is probably \"modify doc-gen so that it publishes export.json to the webpage\"</p>",
        "id": 323278717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674573433
    },
    {
        "content": "<p>Although it might be too big for that in the current deployment mechanism (committing the outputs to git), in the same way the the Lean web editor was</p>",
        "id": 323278874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674573465
    },
    {
        "content": "<p>Now that, by-file, the port is 100% complete, it might be worth doing another check of the <code>align</code>s to check we've done a reasonable job by-definition</p>",
        "id": 375954431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689587185
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get_or_else_some\">docs3#option.get_or_else_some</a> is not aligned</p>",
        "id": 376016799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689599196
    },
    {
        "content": "<p>Pretty much everything in <code>core: init</code> isn't, apart from the ones I assume mario did by hand</p>",
        "id": 376018065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689599401
    },
    {
        "content": "<p>at that time the convention was to add aligns only when the auto naming convention didn't get the right answer</p>",
        "id": 376024266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689600522
    },
    {
        "content": "<p>Can we teach #lookup3 that convention?</p>",
        "id": 376034258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689602230
    },
    {
        "content": "<p>How hard would it be to teach mathport to dump a json along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"mathlib3_name\"</span><span class=\"o\">:</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"existsInML3\"</span><span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"info\"</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"instance\"</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n        <span class=\"s2\">\"meta\"</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n        <span class=\"s2\">\"ml3_file\"</span><span class=\"o\">:</span> <span class=\"s2\">\"mathlib3.import\"</span>\n    <span class=\"o\">},</span>\n    <span class=\"s2\">\"aligned_with\"</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">RenameMap.toLean4</span><span class=\"o\">},</span>\n   <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 376043194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689603753
    },
    {
        "content": "<p>Obviously <code>RenameMap</code> is trivial to get from lean4 alone, but the extra lean3 metadata either requires me to run lean3 too, or to extract it from mathport</p>",
        "id": 376043458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689603793
    },
    {
        "content": "<p><code>option.get_or_else_some</code> is in <code>data.option.basic</code> and it is not auto aligned to <code>Option.getD_some</code>. I'll open a PR later today. Do we have a list of Lean 3 definitions/lemmas that are not <code>#align</code>ed?</p>",
        "id": 376075549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689608687
    },
    {
        "content": "<p>I was hoping that Mario could produce a nice json file to analyze to save me getting lean3 and lean4 CI co-existing in mathlib-port-status...</p>",
        "id": 376092490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689610672
    },
    {
        "content": "<p>that's mathport-lint, a project I have been meaning to work on for a while. There is stuff that requires accessing the olean files generated by all of mathport (i.e. <code>Mathbin.olean</code>), which is currently not saved and only exists in CI. So we could add another step after that data is generated to construct some jsons or something</p>",
        "id": 376102901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689612602
    },
    {
        "content": "<p>I'm a bit worried that as soon as we say \"mathlib4 is open to refactors\" it becomes too late to meaningfully run such a tool</p>",
        "id": 376107158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689613528
    }
]