[
    {
        "content": "<p>I'm currently trying to port ModelTheory.DirectLimit.lean, and there is a \"cannot find synthesization order\" error on <code>attribute [local instance] DirectLimit.setoid</code>, where <code>DirectLimit.setoid</code> has type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FirstOrder.Language.DirectLimit.setoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">↪</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"o\">:</span> <span class=\"n\">IsDirected</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Setoid</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">DirectLimit.setoid</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n      <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">↪</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)]</span> <span class=\"bp\">→</span>\n                <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">IsDirected</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Setoid</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Structure</span> <span class=\"bp\">?</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">@</span><span class=\"n\">DirectedSystem</span> <span class=\"n\">ι</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm a bit at a loss, I don't know how to solve this.</p>",
        "id": 361460356,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1685146897
    },
    {
        "content": "<p>This came up recently -- search for \"cannot find synthesization order\" on this Zulip and someone I think mentioned a way of overriding this check</p>",
        "id": 361461070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685147489
    },
    {
        "content": "<p>I searched before, but I was very confused by the discussions. The solutions that appeared were:</p>\n<ol>\n<li>Adding <code>set_option synthInstance.checkSynthOrder false</code> but was considered to be just hiding the problem, not solving it.</li>\n<li>Adding (semi)outParam somewhere? I tried to place it at random places, but I don't really understand the confusion in my case, so I don't know where to put it.</li>\n<li>Adding hints, but again, I don't know what Lean wants.</li>\n<li>Remove the instance.<br>\nIt seems to be confused by <code>L</code>, which is supposed to be a <code>Language</code>, and <code>f</code>, which is a function with <code>L</code> as a parameter.</li>\n</ol>",
        "id": 361560578,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1685190360
    },
    {
        "content": "<p>You should look at where the intance is used. If it is used at a very few places, preferably once, you can do as I did in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4228\">!4#4228</a> and just delete the instance and just declare it by hand where it is used.</p>",
        "id": 361561519,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685190609
    },
    {
        "content": "<p>If I try to remove it, I go from 11 to 47 errors, so it is very much used <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 361564464,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1685191420
    },
    {
        "content": "<p>Indeed. Well, I can have a look later on if you want</p>",
        "id": 361570262,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685192893
    },
    {
        "content": "<p>Ok, The problem is that the statement of <code>DirectLimit.setoid</code> is about <code>Σi, G i</code> but Lean needs also to know what is <code>L</code>.   Thus the instance fails because Lean cannot infer that from only <code>Σi, G i</code>. One way to fix that, suggested  <a href=\"#narrow/stream/270676-lean4/topic/cannot.20find.20synthesization.20order.20for.20instance/near/360397556\">there</a>, would be create an alias definition that also contains <code>f</code>( from which all the required information can be inferred) and that is defeq to <code>Σi, G I</code> and use it in the statement of <code>DirectLimit.setoid</code>. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SigmaG</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">↪</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>But that solution would require to make significative change to the rest of this file and I don't know enough about this part of Mathlib to see if it is good idea. </p>\n<p>If somebody with more expertise could give their opinion, that would be great.</p>",
        "id": 361614422,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685206812
    },
    {
        "content": "<p>Thank you!<br>\nInteresting. I will wait on opinion from experts.<br>\nPerhaps <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> ?</p>",
        "id": 361659037,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1685230221
    },
    {
        "content": "<p>This is a direct limit construction - these are unique up to unique isomorphism, so the actual type could easily be a synonym. However, the definition of the setoid only depends on the actual functions underlying the maps, and works the same way as direct limits in algebra. Should we just define the direct limit of a family of functions, and then put different algebraic/first-order structures on that?</p>",
        "id": 361683082,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1685251847
    },
    {
        "content": "<p>Yes, that is probably the best way to solve the problem. But such a major refactor would have to wait for after the port. I would advise to use the simplest fix using <code>set_option synthInstance.checkSynthOrder false</code> and add a porting note explaining the situation and the fact that a proper fix would come later on.</p>",
        "id": 361688289,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685255887
    },
    {
        "content": "<p>It's not a <em>major</em> refactor, is it? That file is almost leaf (only <a href=\"https://tqft.net/mathlib/model_theory/fraisse\">file#model_theory/fraisse</a> depends on it), and adding a type synonym is routine.</p>",
        "id": 361690805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685257346
    },
    {
        "content": "<p>Yes, it is not a <strong>major</strong> refactor but still it requires to change/add some definition, statements and proofs. I am on the phone right now so I can’t really see how much work would be necessary. It depends also if anyone is motivated…  <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> ?</p>",
        "id": 361704154,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685263139
    },
    {
        "content": "<p>I've finished the rest of the porting and just put a <code>set_option synthInstance.checkSynthOrder false</code> for the moment, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/4391\">https://github.com/leanprover-community/mathlib4/pull/4391</a>.</p>",
        "id": 362321838,
        "sender_full_name": "Gabin Kolly",
        "timestamp": 1685492304
    },
    {
        "content": "<p>Don’t forget to add a porting note explaining the situation and the need for a refactor later on.</p>",
        "id": 362337694,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685504764
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4476\">!4#4476</a> is stuck on a synthesization order problem. Basically, part way through the file it has a bit about finite dimensional spaces. We want Lean to automatically conclude these are complete using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.complete#doc\">docs4#FiniteDimensional.complete</a> and in Lean 3 this worked by making this declaration a priority-20 local instance. In Lean 4, it (correctly) triggers the synthesization order problem, but just turning off <code>checkSynthOrder</code> doesn't help because Lean can find the instance when it needs it.</p>\n<p>So, how should we deal with this? I see two options, neither of which are optimal:</p>\n<ol>\n<li>Add <code>optParam</code>s using <code>FiniteDimensional.complete</code>, but this is an actual change to the declarations.</li>\n<li>Insert a bunch of <code>haveI</code>s in the statements and proofs, which does not actually change the declarations.</li>\n</ol>\n<p>Are there other options I'm missing? If not, which of these should we go for?</p>",
        "id": 362575708,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685568272
    },
    {
        "content": "<p>ah, nevermind, I just realized I needed to turn off that check for the entire section.</p>",
        "id": 362591230,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685574081
    },
    {
        "content": "<ol start=\"3\">\n<li>Add <code>[complete V]</code> to the statements (post-port)</li>\n</ol>",
        "id": 362602692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685580903
    },
    {
        "content": "<p>That instance is definitely a bad one, k can't be found other than by exhaustive search!</p>",
        "id": 362602847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685580983
    },
    {
        "content": "<p>Oh never mind, you said _local_ instance</p>",
        "id": 362602965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685581070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20instance.20cannot.20find.20synthesization.20order.20in.20porting/near/361704154\">said</a>:</p>\n<blockquote>\n<p>Yes, it is not a <strong>major</strong> refactor but still it requires to change/add some definition, statements and proofs. I am on the phone right now so I can’t really see how much work would be necessary. It depends also if anyone is motivated…  <span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> ?</p>\n</blockquote>\n<p>I think I solved this at <a href=\"https://github.com/leanprover-community/mathlib/tree/direct_limit_refactor\">branch#direct_limit_refactor</a></p>",
        "id": 364329116,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1686154243
    },
    {
        "content": "<p>Is it worth trying to PR this refactor now?</p>",
        "id": 364330692,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1686154590
    },
    {
        "content": "<p>I think it is fine if you're ready to also forward port the changes to Mathlib4</p>",
        "id": 364334131,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686155363
    }
]