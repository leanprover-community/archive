[
    {
        "content": "<p>In fixing <a href=\"https://github.com/leanprover-community/mathlib4/pull/3242\">!4#3242</a> I think I've found a new record for most heartbeats needed to show definitional equality: <strong>10 MILLION</strong>. 1 million doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000</span> <span class=\"k\">in</span> <span class=\"c1\">-- XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX TODO</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">tendsto_pow_atTop_nhds_0_of_lt_1</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Archimedean</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h₁.eq_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tendsto_add_atTop_iff_nat</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">tendsto_const_nhds_iff</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">tendsto_inv_atTop_zero.comp</span> <span class=\"o\">(</span><span class=\"n\">tendsto_pow_atTop_atTop_of_one_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">one_lt_inv</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this.congr</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 347196205,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680711255
    },
    {
        "content": "<p>Surely <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> can help with this (and perhaps the rest of the file)?</p>",
        "id": 347196732,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680711381
    },
    {
        "content": "<p>/me is currently depreciating an hvac system for taxes</p>",
        "id": 347197982,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680711684
    },
    {
        "content": "<p>/me is testing that feature from Pokémon Showdown</p>",
        "id": 347200930,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680712396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_pow_atTop_nhds_0_of_lt_1</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Archimedean</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h₁.eq_or_lt.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">tendsto_add_atTop_iff_nat</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">_root_.pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">one_lt_inv</span> <span class=\"n\">hr</span> <span class=\"n\">h₂</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">tendsto_pow_atTop_atTop_of_one_lt</span>\n      <span class=\"o\">(</span><span class=\"n\">tendsto_inv_atTop_zero.comp</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">tendsto_pow_at_top_nhds_0_of_lt_1</span> <span class=\"n\">tendsto_pow_atTop_nhds_0_of_lt_1</span>\n</code></pre></div>\n<p>This seems to be fine.</p>",
        "id": 347292848,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680750636
    },
    {
        "content": "<p>All fixed. <a href=\"/user_uploads/3121/j5fDZj3gRwjZlVrQb25jwkyr/Basic.lean\">Basic.lean</a> <br>\nI'll push my commits tonight</p>",
        "id": 347301932,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680756440
    },
    {
        "content": "<p>You have not solved the very last error</p>",
        "id": 347368898,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680778175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_pos_tsum_mul_lt_of_countable</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">w</span> <span class=\"n\">to</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">using</span> <span class=\"n\">hw</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_pos_sum_of_countable</span> <span class=\"n\">hε</span> <span class=\"n\">ι</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">δ'</span><span class=\"o\">,</span> <span class=\"n\">Hpos</span><span class=\"o\">,</span> <span class=\"n\">Hsum</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_lt_one.trans_le</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">δ'</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">Hpos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.tsum_le_tsum</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">Hsum</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_div</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">mul_le_of_le_div'</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.inv_le_inv.2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">coe_le_coe.2</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 347369109,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680778220
    },
    {
        "content": "<p>really? somebody else also pushed. I'll have a look.</p>",
        "id": 347370268,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680778508
    },
    {
        "content": "<p>Though to give you credit, I've incorporated some of your fixes in there</p>",
        "id": 347370598,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680778600
    },
    {
        "content": "<p>I think Komyyy &lt;<a href=\"mailto:pol_tta@outlook.jp\">pol_tta@outlook.jp</a>&gt; pushed another fix independently.</p>",
        "id": 347374178,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680779479
    },
    {
        "content": "<p>I've pushed my version as tmp.lean.</p>\n<p>It's strange that compiler doesn't complain about exists_pos_tsum_mul_lt_of_countable in my version.</p>",
        "id": 347374551,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680779579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span></p>",
        "id": 347374749,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680779636
    },
    {
        "content": "<p>I've fixed the last error. <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span></p>",
        "id": 347381101,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680781398
    },
    {
        "content": "<p>I've traced the problem to the inclusion of <code>algebraMap</code>; adding <code>open algebraMap</code> causes the error, and without it that last error disappears</p>",
        "id": 347381165,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680781427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> why?</p>",
        "id": 347381199,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680781438
    },
    {
        "content": "<p>looks like the ugly fix works</p>\n<p>ugly one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_coe_nat_div_add_atTop</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalDivisionRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Tendsto.congr'</span> <span class=\"o\">((</span><span class=\"n\">eventually_ne_atTop</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">div_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_const_nhds.div</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_nhds.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_const_nhds.mul</span> <span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext1</span> <span class=\"n\">n</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_natCast</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_inv₀</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">continuous_algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_inverse_atTop_nhds_0_nat</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">tendsto_atTop'</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tendsto_atTop'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n    <span class=\"n\">choose</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n    <span class=\"n\">exists</span> <span class=\"n\">a</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ha</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">tendsto_coe_nat_div_add_at_top</span> <span class=\"n\">tendsto_coe_nat_div_add_atTop</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_coe_nat_div_add_atTop</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalDivisionRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Tendsto.congr'</span> <span class=\"o\">((</span><span class=\"n\">eventually_ne_atTop</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_ne_zero.mpr</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebraMap.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">div_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_const_nhds.div</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_nhds.add</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">tendsto_const_nhds.mul</span> <span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ext1</span> <span class=\"n\">n</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_natCast</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_inv₀</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)]</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">continuous_algebraMap</span> <span class=\"n\">ℝ</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">tendsto_inverse_atTop_nhds_0_nat</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">tendsto_coe_nat_div_add_at_top</span> <span class=\"n\">tendsto_coe_nat_div_add_atTop</span>\n</code></pre></div>",
        "id": 347381296,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680781454
    },
    {
        "content": "<p>must be some function name collision shenanigans</p>",
        "id": 347381627,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1680781535
    },
    {
        "content": "<p>There, all done!</p>",
        "id": 347382986,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680781856
    }
]