[
    {
        "content": "<p>When I open the file <code>Mathlib.CategoryTheory.Abelian.Refinements</code> (current mathlib master branch) in VSCode, it becomes very unstable: when I try to see the details of a proof, the infoview would always show \"Error updating: Error fetching goals: Rpc error: InternalError: parenthesize: uncaught backtrack exception. \". Does anyone see the same problem when opening this file? If this is reproducible, would anyone know how to fix the bug?</p>",
        "id": 399558509,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698769279
    },
    {
        "content": "<p>Odd behavior on nvim also. I am missing the state on some (most) proof lines. The exception seems to be goals accomplished messages.</p>",
        "id": 399559411,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698769581
    },
    {
        "content": "<p>Apparently <code>{S₁ S₂ : ShortComplex C}</code> are not used?</p>",
        "id": 399560646,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698770016
    },
    {
        "content": "<p>Here is something I have not seen yet <code>[error when printing message: parenthesize: uncaught backtrack exception]</code></p>",
        "id": 399561031,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698770160
    },
    {
        "content": "<p>Here is a statement with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">epi_iff_surjective_up_to_refinements</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span>  <span class=\"n\">Y</span><span class=\"o\">):</span>\n      <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span>  <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Epi</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span>  <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">--π ≫ y = x ≫ f := by</span>\n</code></pre></div>",
        "id": 399564469,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698771421
    },
    {
        "content": "<p>It goes away if you remove <code>Mathlib.Algebra.Homology.ShortComplex.Exact</code> from the imports</p>",
        "id": 399564548,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698771448
    },
    {
        "content": "<p>Thanks. A more minimal example is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.EpiMono</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Delaborators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">π</span> <span class=\"bp\">≫</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Epi</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">π</span> <span class=\"bp\">≫</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> Error updating: Error fetching goals: Rpc error:</span>\n<span class=\"cm\">    InternalError: parenthesize: uncaught backtrack exception.-/</span>\n</code></pre></div>\n<p>Removing the import to <code>Mathlib.Util.Delaborators</code> makes <code>test2</code> work.</p>",
        "id": 399568506,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698772801
    },
    {
        "content": "<p>You beat me :)</p>",
        "id": 399568926,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698772907
    },
    {
        "content": "<p>The same issue (I think) is being discussed in <a href=\"#narrow/stream/113488-general/topic/doc-gen4.20missing.20declaration\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/doc-gen4.20missing.20declaration</a></p>",
        "id": 399570978,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698773653
    },
    {
        "content": "<p>Minimaler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Delaborators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">),</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> Error updating: Error fetching goals: Rpc error:</span>\n<span class=\"cm\">    InternalError: parenthesize: uncaught backtrack exception.-/</span>\n</code></pre></div>",
        "id": 399573753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698774708
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8070\">#8070</a> fixes Joël's example</p>",
        "id": 399578299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698776387
    },
    {
        "content": "<p>Did you also try with <code>exists_ne_mem_inter_of_not_pairwise_disjoint</code>?</p>",
        "id": 399579378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698776726
    },
    {
        "content": "<p>It does.</p>",
        "id": 399580220,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698777005
    }
]