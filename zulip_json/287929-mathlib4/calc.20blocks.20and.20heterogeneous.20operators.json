[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and I have been working on some teaching materials in Lean 4 and came across some surprising behavior in calc blocks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- good error message</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- bad error message</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- bad error message</span>\n</code></pre></div>\n<p>In the first example, <code>2 ^ n</code> is correctly expected to be an integer, and fails because there's no <code>HPow Nat Nat Int</code> instance yet. But in the other examples, the calc block doesn't seem to propogate the expected type from the previous line. Is this a reasonable thing to expect it to do?</p>\n<p>An additional wrinkle here is that with <code>import Mathlib.Data.Int.Basic</code>, <code>2 ^ n</code> <em>does</em> elaborate as an <code>Int</code>, and the first example works -- it finds <code>instHPow : HPow Int Nat Int</code>. But in fact <code>Int.instHPowIntNat</code> has this type and is available even without the mathlib import. So I'm confused about why the presence of <code>instHPow</code> is able to change the type of <code>2</code> here.</p>",
        "id": 321251032,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1673641750
    },
    {
        "content": "<p>I think it's because <code>instHPow</code> is a default instance, so fills in metavariables if nothing else can be found</p>",
        "id": 321266749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673647648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> There must be some <code>calc</code> issue too, though, right?  Because it's behaving differently in the cases marked \"good error message\" and \"bad error message\".</p>",
        "id": 321267659,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673648004
    },
    {
        "content": "<p>This is now fixed with <a href=\"https://github.com/leanprover/lean4/pull/2066\">lean4#2066</a>.  Thank you <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>!</p>",
        "id": 324193224,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674865500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I started bumping mathlib to pick up the fix <a href=\"https://github.com/leanprover/lean4/pull/2066\">lean4#2066</a> to calc elaboration.  I notice that Lean is now not able to elaborate <code>calc</code> blocks when the goal is not syntactically the same as what the calc block is proving: see<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/compare/hrmacbeth-bump\">https://github.com/leanprover-community/mathlib4/compare/hrmacbeth-bump</a></p>\n<p>I think this is a worthwhile tradeoff but just wanted to check that this behaviour is what you expected?</p>",
        "id": 324369563,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674956626
    },
    {
        "content": "<p>Just to be clear, it doesn't need to be syntactically identical, merely defeq.  But it expects the calc block to go in the same direction as what it's proving.  The motivation here was the same as your bug report, to get the right coercions in <code>calc 42 &lt; n := ..</code> (imagine we're proving an inequality of integers, and <code>n</code> is a natural number; without this change <code>42 &lt; n</code> would be an inequality of natural numbers).</p>",
        "id": 324371209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674957983
    },
    {
        "content": "<p>So the change was very much intentional.  I'm happy to revert if it's the wrong tradeoff.</p>",
        "id": 324371267,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674958024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20blocks.20and.20heterogeneous.20operators/near/324371209\">said</a>:</p>\n<blockquote>\n<p>Just to be clear, it doesn't need to be syntactically identical, merely defeq.  But it expects the calc block to go in the same direction as what it's proving.</p>\n</blockquote>\n<p>Could you say a little more about what you mean here?  It seems to me that in examples from that branch such as the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Commute.invOf_right</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Commute</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"bp\">⅟</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which is broken but can be fixed by adding either <code>show a * ⅟ b = ⅟ b * a from</code> or <code>rw [Commute, SemiconjBy]</code>, the calc block is proving something which is defeq but not syntactically equal to the original goal.</p>\n<p>Maybe I don't understand what you mean by \"go in the same direction as what it's proving\"?</p>",
        "id": 324372265,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674958825
    },
    {
        "content": "<p>Oh, that's what you mean.  Yeah, that's unfortunate.  Lean thinks <code>Commute</code> is a relation like <code>&lt;</code>, so it expects the proof to start like <code>a = a * 1 := ...</code>.  I think the easiest way out here is to say <code>show _ = _ from calc ...</code>.</p>",
        "id": 324374095,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674960281
    },
    {
        "content": "<p>I can understand this when the head symbol is a <code>Prop</code>-valued function of two arguments of the same type, like <code>Commute</code>.  It's surprising to me that this also happens when the head symbol is a function of arguments of different types, like <code>∈</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">ordConnectedComponent</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>or <code>IsFixedPt</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IsFixedPt</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I guess calc can prove \"heterogeneous\" relationships?</p>",
        "id": 324374362,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674960532
    },
    {
        "content": "<p>I don't think this was an issue in Lean 3, right?  Is there an easy explanation of what has changed since then?</p>",
        "id": 324374541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674960668
    },
    {
        "content": "<p>Yes, <code>calc</code> now supports heterogenous relations.</p>",
        "id": 324374548,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674960679
    },
    {
        "content": "<p>Is the change something like, Lean 3 knew that the <code>Commute</code> relation had no lemmas about it tagged <code>@[trans]</code>, so it immediately unfolded <code>Commute</code>?</p>",
        "id": 324374752,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674960886
    },
    {
        "content": "<p>For concreteness:  This works in Lean 4 neither before nor after <a href=\"https://github.com/leanprover/lean4/pull/2066\">lean4#2066</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">22</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with differing errors: on the <code>2^n</code> before the fix, and on the <code>(2:ℤ) ^ (a * 22) = (37 : ℤ)</code> after the fix.  Its Lean 3 analogue does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"mi\">22</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">22</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 324377315,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674962202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20blocks.20and.20heterogeneous.20operators/near/324374548\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>calc</code> now supports heterogenous relations.</p>\n</blockquote>\n<p>Indeed I have here a proof ending with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">calc</span>\n    <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">limV.mem_closure_image</span>\n      <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">closure</span> <span class=\"n\">V'</span>             <span class=\"o\">:=</span> <span class=\"n\">closure_mono</span> <span class=\"n\">hV</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">V'</span>                     <span class=\"o\">:=</span> <span class=\"n\">V'_closed.closure_eq</span>\n</code></pre></div>\n<p>and it's really nice</p>",
        "id": 324401299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674982126
    },
    {
        "content": "<p>Note for people who want to try: you need to add somewhere</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">hxs</span> <span class=\"n\">hst</span> <span class=\"bp\">↦</span> <span class=\"n\">hst</span> <span class=\"n\">hxs</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 324401360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674982184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I gather that <a href=\"https://github.com/leanprover/lean4/pull/2073\">lean4#2073</a> was fixed, in the end, by fully reverting the attepted fix to <a href=\"https://github.com/leanprover/lean4/pull/2040\">lean4#2040</a>.  Is that right?  So examples like the following work on current master and will cease to work after the bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/1999\">!4#1999</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid 'calc' step, failed to synthesize `Trans` instance</span>\n<span class=\"cm\">  Trans LE.le LT.lt ?m.548</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 325312927,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675310542
    },
    {
        "content": "<p>Actually, I'm a bit confused about where this ended up.  It seems that the <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20blocks.20and.20heterogeneous.20operators/near/321251032\">original issues reported</a> do work after the bump?</p>",
        "id": 325313274,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675310765
    },
    {
        "content": "<blockquote>\n<p>Is that right?</p>\n</blockquote>\n<p>Yes, I reverted half of the attempted fix.  The one where we try to infer the type of the left-hand side of the first step from the left-hand side of the goal.  Because we don't have a good way to tell what the left-hand side is, i.e., we can't tell that <code>a</code> is not the lhs of <code>Commutes a b</code>, but <code>a</code> is the lhs of <code>a &gt; b</code>.</p>",
        "id": 325313650,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675311047
    },
    {
        "content": "<blockquote>\n<p>So examples like the following work on current master</p>\n</blockquote>\n<p>This should still work, because <code>n ^ 2</code> is going to be an integer no matter what.  What would break is <code>calc _ ≤ 1 ^2 := ..</code> or <code>example : 2 &lt; n^2 := calc 2 &lt; 2^2 := ..</code>.  (Because we don't know the right type for <code>_</code>/<code>2</code> and infer it to be a natural number.)</p>",
        "id": 325313802,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675311140
    },
    {
        "content": "<p>I'm working on a bumped-to-2023-02-01 mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1999\">!4#1999</a>) and unless I'm doing something stupid, this example is failing.</p>",
        "id": 325313863,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675311200
    },
    {
        "content": "<p>Is it possible that because <code>HPow</code> is heterogeneous, Lean doesn't know this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/calc.20blocks.20and.20heterogeneous.20operators/near/325313802\">said</a>:</p>\n<blockquote>\n<p><code>n ^ 2</code> is going to be an integer no matter what</p>\n</blockquote>",
        "id": 325313998,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675311291
    },
    {
        "content": "<p>In fact, putting a type annotation on <code>n ^ 2</code> does seem to fix it, so maybe that is indeed the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 325314303,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675311508
    },
    {
        "content": "<p>Now I'm confused how Lean even figures out in the example statement <code>n ^ 2 &lt; 2</code> that this is an inequality between integers.  Is there some special handling here of default instances?  Can that special handling be carried over to <code>calc</code>?</p>",
        "id": 325314538,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675311741
    }
]