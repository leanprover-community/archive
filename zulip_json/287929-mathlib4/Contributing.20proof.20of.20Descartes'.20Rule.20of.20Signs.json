[
    {
        "content": "<p>Hey! I have a proof of the rule of signs: <a href=\"https://github.com/Timeroot/lean-descartes-signs/tree/main\">https://github.com/Timeroot/lean-descartes-signs/tree/main</a></p>\n<p>Notably, this is one of the \"100 problems to formalize\" :) How do I go about, I dunno, getting any relevant stuff in mathlib, if that's wanted? I know several others of the 100 ended up in mathlib</p>",
        "id": 407367542,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702350409
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/G.C3.B6del's.20first.20incompleteness.20theorem\">This thread</a> has some related information about contributing it to Mathlib or adding it to the list of 100 problems for Lean formalizations.</p>",
        "id": 407385633,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702357491
    },
    {
        "content": "<p>Feel free to request my review on PRs you open!</p>",
        "id": 407405138,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702364650
    },
    {
        "content": "<p>It may be a bit much for a single PR, but it seems like <code>auxiliary_defs.lean</code> has a bunch of code that could be contributed separately. That's probably a good point to start</p>",
        "id": 407413326,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702367079
    },
    {
        "content": "<p>amazing! same with me as Yael - this was originally why I made SignType, actually. Why did you choose this proof?</p>",
        "id": 407423418,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702370920
    },
    {
        "content": "<p>Yes, I separated out <code>auxiliary_defs</code> as the little facts that felt like it would be reasonable to put in mathlib even if the rest wasn't in a state to be merged. :)</p>",
        "id": 407501964,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702394593
    },
    {
        "content": "<p>I guess I chose this one because it seemed like one I could reasonably do, as a way to force myself to learn Lean :P</p>",
        "id": 407502135,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702394636
    },
    {
        "content": "<p>Seems to have worked :)</p>",
        "id": 407502293,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702394668
    },
    {
        "content": "<p>It seems as though I should ask for write access to the central github (just not the master branch), instead of forking+PR?</p>",
        "id": 407502609,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702394741
    },
    {
        "content": "<p>Yes, that's correct</p>",
        "id": 407502810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702394787
    },
    {
        "content": "<p>It looks as though statements like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_get</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">l₁</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">l₂</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">filter_replicate</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>would maybe belong in Std, is that correct? But maybe could go in <code>Mathlib/Data/List/Basic.lean</code> instead?</p>",
        "id": 407522029,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702400434
    },
    {
        "content": "<p>Yeah, they could probably go into std, but we could also move them from mathlib to std later if needed</p>",
        "id": 407522509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702400556
    }
]