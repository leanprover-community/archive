[
    {
        "content": "<p>I came across the following <code>reassoc</code>'ed variant </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">HasBinaryCoproduct</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coprod.desc</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">coprod.desc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Lean gets confused by the statement due to the two <code>h</code>'s. I guess <code>reassoc</code> is not hygenic?</p>",
        "id": 338208142,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677447896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, could you explain how this came up? (i.e. give an example with @[reassoc] in it). I had a quick look at the code for reassoc and am not immediately seeing the problem.</p>",
        "id": 340251163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678239781
    },
    {
        "content": "<p>I think I was confused but I will take another look</p>",
        "id": 340251477,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678240014
    },
    {
        "content": "<p>Ah I remember (but haven't gone back and checked). I think it was just an issue with pretty printed version. I was copying declarations to test the claims of <code>simpNF</code> and got one with two <code>h</code>'s.</p>",
        "id": 340713533,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678396414
    }
]