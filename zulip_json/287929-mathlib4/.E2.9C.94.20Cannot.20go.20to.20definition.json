[
    {
        "content": "<p>Sometimes <code>library_search</code> generates a proof term that looks complicated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">instTransGtToLTGeToLE.proof_1</span> <span class=\"n\">hyz</span> <span class=\"n\">hxy</span>\n</code></pre></div>\n<p>When I want to see what <code>instTransGtToLTGeToLE.proof_1</code> is, I cannot go to definition (F12 in VS Code). Why?</p>",
        "id": 339123940,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677769239
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2112\">https://github.com/leanprover/lean4/pull/2112</a> to prevent <code>library_search</code> from returning such terms.</p>",
        "id": 339124553,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677769387
    },
    {
        "content": "<p>Is there an alternative what <code>library_search</code> could generate?</p>",
        "id": 339124713,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677769437
    },
    {
        "content": "<p><code>hxy.trans_lt hyz</code> is the proof I'd use</p>",
        "id": 339126292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677769804
    },
    {
        "content": "<p>Try it in Lean3 to see what library_search suggests</p>",
        "id": 339126507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677769852
    },
    {
        "content": "<p>Lean 3 gives me much nicer answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">hyz</span> <span class=\"n\">hxy</span>\n</code></pre></div>\n<p>Also, I can go to the definition here.</p>",
        "id": 339127280,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677770005
    },
    {
        "content": "<p>The lean 3 naming convention says that this should be <code>lt_of_le_of_lt hxy hyz</code> (indeed this is one of the first examples in the description of the Lean 3 naming convention). I don't understand the Lean 4 naming convention but those that do will easily be able to translate this. I'm saying: you're better off learning the naming convention than always relying on library_search (but I appreciate that your question is still valid).</p>",
        "id": 339144896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677773992
    },
    {
        "content": "<p>Yes <code>lt_of_le_of_lt hxy hyz</code> works (in Lean 3) and is indeed more idiomatic.</p>",
        "id": 339148344,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677774828
    },
    {
        "content": "<p>I do learn Mathlib naming convention. However, I don't want to throw too many things onto my students. Therefore, in the teaching material I am working on, I want to rely on tactics only.</p>",
        "id": 339148835,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677774932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span>: there are <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/Lint/Basic.lean#L33\">a bunch more</a> automatically generated declarations. Some of these are user-facing (e.g. the subobject fields), but others are not (e.g. <code>match</code> declarations). Should these other non-user-facing declarations also get an underscore prepended?</p>",
        "id": 339149881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677775177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cannot.20go.20to.20definition/near/339148835\">said</a>:</p>\n<blockquote>\n<p>I do learn Mathlib naming convention. However, I don't want to throw too many things onto my students. Therefore, in the teaching material I am working on, I want to rely on tactics only.</p>\n</blockquote>\n<p>Yeah, at the end of the day it's a balance. Of course <code>linarith</code> will do this one as well.</p>",
        "id": 339150914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677775432
    },
    {
        "content": "<p>Yes. I introduce <code>linarith</code> right in the next example.</p>",
        "id": 339161915,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677777982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 339197454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677788428
    }
]