[
    {
        "content": "<p>At one point a while ago it was mentioned that maybe we should be tagging way more lemmas with <code>aesop</code>.</p>\n<p>Here's a good use case I think: marking various <code>x ∈ SomeSetLike</code> lemmas. With the right tweaking, this should allow us to prove those kinds of goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Module</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ComplexStarModule</span> <span class=\"n\">Complex</span> <span class=\"n\">ComplexConjugate</span> <span class=\"n\">Submodule</span>\n\n<span class=\"c1\">-- I'm not sure what the best `aesop` settings are</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span><span class=\"o\">]</span> <span class=\"n\">add_mem</span> <span class=\"n\">SMulMemClass.smul_mem</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"mi\">50</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"n\">subset_span</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">realPart_apply_coe</span> <span class=\"n\">imaginaryPart_apply_coe</span>\n<span class=\"c1\">-- these are marked `simp` but shouldn't be, or they should be going the reverse direction.</span>\n\n<span class=\"c1\">-- the existing version of this lemma is unsuitable for `aesop` to actually use it I think.</span>\n<span class=\"c1\">-- as it's phrased `s ⊆ ↑(span R s)`.</span>\n<span class=\"kd\">@[aesop unsafe apply 10%]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submodule.subset_span'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subset_span</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarAddMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarModule</span> <span class=\"n\">ℂ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">span_selfAdjoint</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">selfAdjoint</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_top_iff'.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">realPart_add_I_smul_imaginaryPart</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- `⊢ ↑(↑ℜ x) + I • ↑(↑ℑ x) ∈ span ℂ ↑(selfAdjoint E)`</span>\n  <span class=\"n\">aesop</span><span class=\"bp\">?</span> <span class=\"c1\">-- look ma, no hands!</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Try this: rename_i inst inst_1 inst_2 inst_3</span>\n<span class=\"cm\">    simp_all only</span>\n<span class=\"cm\">    apply AddMemClass.add_mem</span>\n<span class=\"cm\">    · apply Submodule.subset_span'</span>\n<span class=\"cm\">      simp_all only [SetLike.mem_coe, SetLike.coe_mem]</span>\n<span class=\"cm\">    · apply SMulMemClass.smul_mem</span>\n<span class=\"cm\">      apply Submodule.subset_span'</span>\n<span class=\"cm\">      simp_all only [SetLike.mem_coe, SetLike.coe_mem]</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 389712670,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694106331
    },
    {
        "content": "<p>Maybe it should be a dedicated tactic wrapper (like <code>continuity</code>) and get its own rule set, but I'm not sure.</p>",
        "id": 389712899,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694106385
    },
    {
        "content": "<p>I would just implement it, but I don't think I'm yet knowledgeable enough about which <code>aesop</code> rules I should be applying to the relevant lemmas, and as above, it also requires some refactoring of the statements of certain lemmas.</p>",
        "id": 389713183,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694106466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what do you think?</p>",
        "id": 389916230,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694191645
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 389917080,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694192009
    },
    {
        "content": "<p>My naive thought would be to do something like this (with modified versions of the second set of lemmas, as described above):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_mem</span> <span class=\"n\">one_mem</span> <span class=\"n\">add_mem</span> <span class=\"n\">mul_mem</span> <span class=\"n\">neg_mem</span> <span class=\"n\">sub_mem</span> <span class=\"n\">star_mem</span> <span class=\"n\">algebraMap_mem</span>\n  <span class=\"n\">SMulMemClass.smul_mem</span> <span class=\"n\">nsmul_mem</span> <span class=\"n\">zsmul_mem</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"mi\">50</span><span class=\"bp\">%</span> <span class=\"n\">apply</span><span class=\"o\">]</span>\n  <span class=\"n\">Subsemigroup.subset_closure</span> <span class=\"n\">Submonoid.subset_closure</span> <span class=\"n\">Subgroup.subset_closure</span>\n  <span class=\"n\">AddSubsemigroup.subset_closure</span> <span class=\"n\">AddSubmonoid.subset_closure</span> <span class=\"n\">AddSubgroup.subset_closure</span>\n  <span class=\"n\">Submodule.subset_span</span> <span class=\"n\">Subring.subset_closure</span> <span class=\"n\">Subsemiring.subset_closure</span>\n  <span class=\"n\">Algebra.subset_adjoin</span> <span class=\"n\">StarSubalgebra.subset_adjoin</span> <span class=\"n\">NonUnitalSubsemiring.subset_closure</span>\n  <span class=\"n\">NonUnitalSubring.subset_closure</span> <span class=\"n\">NonUnitalAlgebra.subset_adjoin</span> <span class=\"n\">NonUnitalStarAlgebra.subset_adjoin</span>\n</code></pre></div>",
        "id": 389918845,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694192731
    },
    {
        "content": "<p>I've got an RFC up here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7111\">#7111</a></p>",
        "id": 390383397,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694464181
    },
    {
        "content": "<p>If you want to see the start of a fun diff, have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7165\">#7165</a>. There's much more golfing to be done, but it's quite fun.</p>",
        "id": 391021295,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694727147
    },
    {
        "content": "<p>What is the benefit of making this a separate tactic, rather than just letting <code>aesop</code> do these good things?<br>\nMaybe this is my Isabelle background shining through, but I’d just expect to be able to use <code>aesop</code> anywhere and benefit from all sensible automation, rather than  having to know about even more tactics (discoverabilty is a problem!), and knowing when to apply them</p>",
        "id": 391101299,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694763480
    },
    {
        "content": "<p>I think we have a lot to learn from Isabelle when it comes to automation!</p>",
        "id": 391104747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694764703
    },
    {
        "content": "<p>I definitely considered just marking these as aesop lemmas. That might still be the way to go. My reasoning was just that this solves a particular class of problem (membership in subobjects), and so it should have a dedicated way to reference it. While \"one tactic to rule them all\" has its benefits, it does mean that it's harder to read a proof script and understand the argument.</p>",
        "id": 391158392,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694781202
    },
    {
        "content": "<p>I also was worried about overloading the default rule set. Maybe this is stupid because of discrimination tree indexing, but I'm not sure.</p>",
        "id": 391158760,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694781311
    },
    {
        "content": "<p>Aren't these tactics usually just solving whats “trivial” or at most “left to the reader”? :-)</p>",
        "id": 391158873,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694781353
    },
    {
        "content": "<p>I would _hope_ that performance is not what would stop us from making <code>aesop</code> a one-stop solution, not sure if we are there yet, I'll let Jannis comment on that.</p>",
        "id": 391159175,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694781431
    },
    {
        "content": "<p>Sure, but the more powerful your automation, the more things become trivial. And then it's harder to disambiguate what's actually going on. Personally, I would prefer to see <code>by continuity</code> and <code>by set_like</code> as opposed to just <code>by aesop</code> everywhere. I would like <code>aesop</code> to handle <em>general purpose</em> trivialities, not ones that can be easily collected into a nice category.</p>",
        "id": 391160162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694781611
    },
    {
        "content": "<p>(Can someone move this thread to the mathlib4 stream? I have no idea why it's in New Members, but I'm on mobile)</p>",
        "id": 391160758,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694781703
    },
    {
        "content": "<p>There is also the option that <code>aesop</code> solves it and <code>aesop?</code> says <code>set_like</code> suffices...</p>",
        "id": 391161695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694781935
    },
    {
        "content": "<p>I think that this would mean simply learning about <code>aesop</code> is enough, and you can get more info on what is going on, if desired.  </p>\n<p>Note that I do not know how easy this would be to implement.</p>",
        "id": 391161978,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694782017
    },
    {
        "content": "<p>But isn't it silly if as a newcomer, after a few weeks of manually proving continuities, you lean that there was an automation all along?<br>\nI consider discoverability, both of lemmas and of tactic, one of the key challenges in a theorem prover. The fewer tactics I have to learn about, the better.<br>\nAnd for reading a proof - I take it at granted that the plan proof script isn't useful anyways, at least not with the style of proofs we see here. And once you have IDE support or a LeanInk view, you can see that that particular call to <code>aesop</code> solved a continuity statement - isn't that good enough?</p>",
        "id": 391163321,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694782398
    },
    {
        "content": "<p>And here is the killer argument: Aesop lemmas compose. So by adding these lemma to the default set, they can now be used when solving other things, of these other things have continuity, or set-like, side conditions.</p>\n<p>It's really quite like with <code>simp</code> - we don't refrain from making that handle “all the things”</p>",
        "id": 391163615,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694782492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/391160162\">said</a>:</p>\n<blockquote>\n<p>Sure, but the more powerful your automation, the more things become trivial. And then it's harder to disambiguate what's actually going on. Personally, I would prefer to see <code>by continuity</code> and <code>by set_like</code> as opposed to just <code>by aesop</code> everywhere. I would like <code>aesop</code> to handle <em>general purpose</em> trivialities, not ones that can be easily collected into a nice category.</p>\n</blockquote>\n<p><code>aesop</code> has rulesets which I believe can be used exactly like this. One can add a macro so <code>continuity</code> is <code>aesop</code> with a particular ruleset. Would that work for your purposes.</p>",
        "id": 391166305,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694783215
    },
    {
        "content": "<p>Joachim, I agree with you: my proposal was not \"automatically squeeze <code>aesop</code> calls\", but rather, extend <code>aesop</code> but also have the option of making it introspect the proof and, if so desired, mention which set of lemmas it used.</p>",
        "id": 391166624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694783285
    },
    {
        "content": "<p>I like a lot the <code>says</code> tactic, but I do not see it very much.  In this situation seeing <code>aesop? says [name of a smallish collection of lemmas]</code> would be clear to read, easy to maintain and faster to execute.</p>",
        "id": 391167013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694783401
    },
    {
        "content": "<p>I agree with Joachim. I think we should really discuss how we can aesopify mathlib in a structural way. At the moment, there are very few aesop lemmas. We should have 100x more of them.</p>",
        "id": 391175918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694785907
    },
    {
        "content": "<p>I also agree with Damiano that we should start using <code>says</code> in many more places. We should probably come up with a strategy to do this in a principled way.</p>",
        "id": 391176224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694785999
    },
    {
        "content": "<p>One issue with the \"separate tactics\" approach is that it prevents crossover between the tactics. For example, suppose I have a lemma that says some type of function is measurable if it is continuous. If I tag it with <code>measurability</code>, aesop won't be able to deal with the continuity hypothesis even if <code>continuity</code> could prove it, because it's using the wrong set of lemmas.</p>",
        "id": 391182800,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1694787698
    },
    {
        "content": "<p>But this can be dealt with by calling <code>aesop</code> with the <code>measurability</code> and <code>continuity</code> sets together</p>",
        "id": 391183557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694787863
    },
    {
        "content": "<p>Right - if the user knows about it :-)</p>",
        "id": 391199953,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694791461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/391176224\">said</a>:</p>\n<blockquote>\n<p>I also agree with Damiano that we should start using <code>says</code> in many more places. We should probably come up with a strategy to do this in a principled way.</p>\n</blockquote>\n<p>I have a proposal for this, hopefully I'll be able to make a little example in two weeks or so</p>",
        "id": 391201039,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694791732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/391163615\">said</a>:</p>\n<blockquote>\n<p>It's really quite like with <code>simp</code> - we don't refrain from making that handle “all the things”</p>\n</blockquote>\n<p>We do, actually. There's a simp set for <code>IsROrC</code> for example. (To be honest, I'm actually not absolutely certain this is still the case after the port, I haven't checked, but it was definitely the case in Lean 3)</p>",
        "id": 391203330,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694792338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/391166305\">said</a>:</p>\n<blockquote>\n<p><code>aesop</code> has rulesets which I believe can be used exactly like this. One can add a macro so <code>continuity</code> is <code>aesop</code> with a particular ruleset. Would that work for your purposes.</p>\n</blockquote>\n<p>That's already how <code>continuity</code> and <code>set_like</code> are implemented. What we're debating is whether it should be <em>just</em> <code>aesop</code>.</p>",
        "id": 391203470,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694792384
    },
    {
        "content": "<p>Discoverability is surely important, and having a powerful tactic that does all the things is admittedly nice. I think I would just like a bit more information about what's going on when reading a proof script.</p>\n<p>One possible compromise, see how this strikes you:</p>\n<ol>\n<li>Keep aesop rule sets for continuity and set_like</li>\n<li>Make <code>continuity</code> and <code>set_like</code> self-replacing tactics for <code>aesop (rule_sets [...])</code></li>\n<li>Have an <code>aesop!</code> tactic which is aesop with <em>all</em> the rule sets (maybe that's a terrible idea for some reason), this could also be self-replacing with only those rule sets used.</li>\n</ol>\n<p>Note: I'm not wedded to the idea of a separate tactic, and I'm okay losing this disgreement, I just want to advocate for my position a bit in case it has merit.</p>",
        "id": 391204630,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694792669
    },
    {
        "content": "<p>I like where this is going. I’d prefer <code>aesop</code> to be the powerful by default – it’s what beginners will try, it is a good default for “just solve if if you can”, and <code>aesop!</code> looks scary (I’d expect <code>aesop!</code> to be something like “<code>aesops</code> but apply unsafe rules aggressively or so”, or another variant for power users), and those power users who want more control should opt-into it (<code>aesop only: default</code> or something like that).</p>\n<p>I conjecture many users don’t care too much about how their proofs are closed, but care a lot that it is closed :-)</p>",
        "id": 391227905,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694799250
    },
    {
        "content": "<p>Here's one reason to avoid dumping all the lemmas in the same bucket (at least not yet): we don't yet have any automated way to ensure that the lemmas being tagged <code>aesop</code> are appropriate or not, or if they conflict with other lemmas. For <code>simp</code> of course we have <code>simpNF</code>, which may not be perfect, but at least ensures we have some sanity. For <code>aesop</code> this is even more relevant since it is significantly more powerful than <code>simp</code>.</p>\n<p>For organizational purposes and diagnosing problems, I'm a big fan of keeping lemmas pertaining to a specific type of problem grouped into a rule set. Even if most of the time the default is \"use all the rule sets\", at least we'll have the option to not use them in certain cases if we prefer.</p>",
        "id": 391255919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694809367
    },
    {
        "content": "<p>I'm fully on board with grouping and allowing opt into such named groups, my main point is that the default should be as powerful as can be.</p>",
        "id": 391349835,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694853615
    },
    {
        "content": "<p>Well I guess that's now a question for <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, I'm not sure if there's a way to call aesop with all the rule sets without listing them explicitly.</p>",
        "id": 391371309,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694866632
    },
    {
        "content": "<p>Bit of grepping through aesop code reveals you can check if a ruleset already exists like so: <a href=\"https://github.com/JLimperg/aesop/blob/4f8b397237411249930791f1cba0a9d2880a02dd/Aesop/Frontend/Extension.lean#L23-L24\">https://github.com/JLimperg/aesop/blob/4f8b397237411249930791f1cba0a9d2880a02dd/Aesop/Frontend/Extension.lean#L23-L24</a> So I would guess you can just iterate through all of the names in that map and pass them to aesop</p>",
        "id": 391371718,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694866870
    },
    {
        "content": "<p>Ah, there is a <code>getAllRuleSets</code> later in that file</p>",
        "id": 391371951,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694867035
    },
    {
        "content": "<p>I don't think using literally all the rulesets is a good idea either, this would then interfere with the creation of more specialized rulesets that would e.g. degrade performance if it were used everywhere. Suppose I want to use aesop to create a tactic in which linarith is a last-resort rule, I probably don't want this showing up in the default ruleset.</p>",
        "id": 391375552,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1694869408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/391375552\">said</a>:</p>\n<blockquote>\n<p>I don't think using literally all the rulesets is a good idea either, this would then interfere with the creation of more specialized rulesets that would e.g. degrade performance if it were used everywhere. Suppose I want to use aesop to create a tactic in which linarith is a last-resort rule, I probably don't want this showing up in the default ruleset.</p>\n</blockquote>\n<p>How about the proposed aesop? Then you use an all ruleset aesop that then computes a set cover over the available rulesets of the rules that were actually used and gives that to you. If aesop rulesets maintain the invariant that they are distinct the set cover should also be trivial to compute but I dont know about that</p>",
        "id": 391387666,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694876529
    },
    {
        "content": "<p>I agree with Frederic: _all_ rules is not a good default either, some rulesets may be potentially be very inefficient and only a good idea when you know what you are doing. I don't think  we get around the maybe hard work of coming up with curating the default set.</p>",
        "id": 391498808,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694955436
    },
    {
        "content": "<p>Then I don't understand how you (i.e. Joachim, not a generic you) determine what belongs in the default rule set. My proposal was to keep lemmas that solve a particular type of problem in a rule set (e.g., <code>continuity</code> or <code>set_like</code>), but you seemed to disagree with this and just wanted all the lemmas in the same bucket for discoverability, and you said we shouldn't worry about performance because hopefully we shouldn't have to. So I don't see how all this jives with your most recent comment. (Not frustrated, just confused)</p>",
        "id": 391504210,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694957321
    },
    {
        "content": "<p>I think Joachim basically wants an \"as powerful as possible and as slow as is convenient\" aesop variant.</p>",
        "id": 391505404,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694957677
    },
    {
        "content": "<p>How about <code>declare_aesop_rule_set!</code> for declaring an Aesop rule set that's used by the default <code>aesop</code> call? The <code>Continuity</code> and <code>Measurability</code> rule sets would imo make for good on-by-default rule sets.</p>\n<p>Squeezing the rule sets, so that only a minimal set of rule sets is used, would be fairly easy. Squeezing the rules would be a bit more work, but also doable.</p>",
        "id": 391508156,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694958385
    },
    {
        "content": "<p>Ah, sorry if I was unclear: I hope we don't have to worry about the performance due to the size of the Aesop sets (thanks to good indexing). I do worry about the performance of some sets of (typically unsafe) rules that may cause a huge search tree; e.g. a rule that does case analysis on every boolean variable would not be a good idea in the default set, but may be useful in a special “tabulate” rule set.<br>\nDoes that make more sense?</p>",
        "id": 391509101,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694958645
    },
    {
        "content": "<p>So for apply rules maybe we should only have safe ones in the default set?</p>",
        "id": 391530412,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694966130
    },
    {
        "content": "<p>Safe rules, or rules that don’t have a high branching factor and are “typically” what you’d want, e.g. because they do the obvious thing in a structural way.<br>\nFor example continuity of a function composition via continuity of the functions its' built on isn’t necessarily a safe function, but in the cases where you expect automation to just do the job, that’s typically what you want <code>aesop</code> to try.</p>",
        "id": 391532587,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694966829
    },
    {
        "content": "<p>OTOH, splitting ifs is safe (in the sense that you cannot go from provable to unprovable), but can lead to combinatoric explosion, so you’d want <code>aesop</code> in default mode to be careful here?</p>",
        "id": 391532942,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694966964
    },
    {
        "content": "<p>What shall we do concretely with</p>\n<blockquote>\n<p>feat: add a set_like tactic by wrapping aesop <a href=\"https://github.com/leanprover-community/mathlib4/pull/7111\">#7111</a> </p>\n</blockquote>\n<p>I personally don't have a strong opinion about what the automation ends up looking like. But at least it would be good to get the automation. Either in the form of the <code>set_like</code> tactic, or at least by tagging a bunch of lemmas as aesop-lemmas.</p>",
        "id": 394423866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696251788
    },
    {
        "content": "<p>Let me implement Eric's suggestion in the PR. I was a bit worried about it from a performance perspective (because it would be applicable literally whenever the goal is <code>x ∈ S</code> and <code>S</code> is a member of a <code>SetLike</code> class; and it would just create a metavariable for the set <code>s</code>), and discussed it with him privately. We agreed that I should just try it and see, so I'll do that today.</p>",
        "id": 394426875,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696252536
    },
    {
        "content": "<p>As for what to do: I propose leaving it as a separate tactic for now, but if the tooling discussed above for <code>aesop</code> comes to fruition (rule sets that are tried by default), I will take responsbility for migrating this <code>set_like</code> tactic into plain <code>aesop</code> with a rule set.</p>",
        "id": 394426898,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696252542
    },
    {
        "content": "<p>I've implemented Eric's suggestion and it's building now.</p>",
        "id": 394436267,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696254539
    },
    {
        "content": "<p>It works. Anyone is welcome to review it.</p>",
        "id": 394482882,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696268382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/394426898\">said</a>:</p>\n<blockquote>\n<p>As for what to do: I propose leaving it as a separate tactic for now, but if the tooling discussed above for <code>aesop</code> comes to fruition (rule sets that are tried by default), I will take responsbility for migrating this <code>set_like</code> tactic into plain <code>aesop</code> with a rule set.</p>\n</blockquote>\n<p>Aesop rule sets can now be marked as active-by-default on Aesop master. The syntax for this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_aesop_rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Name</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The mathlib bump depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7505\">#7505</a>.</p>",
        "id": 394859948,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1696431467
    },
    {
        "content": "<p>Re <a href=\"https://github.com/leanprover-community/mathlib4/pull/7505\">#7505</a>: Don't we want to keep some kind of non-terminal aesop? I think <code>tidy</code> was meant to be usable as a non-terminal tactic, as its name suggests. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> any opinion here?</p>",
        "id": 394867223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696433623
    },
    {
        "content": "<p><code>aesop</code> performs <code>simp</code>, so I would expect non-terminal <code>aesop</code> to be highly discouraged unless perhaps <code>says</code> is used.</p>",
        "id": 394871715,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696435149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/7111\">#7111</a> to declare a new default aesop rule set called <code>SetLike</code> and tagged the lemmas in a way that seems appropriate.</p>",
        "id": 397741320,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697818100
    }
]