[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.EReal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- lift f a to ℝ -- lift tactic failed. When lifting an expression, a new variable name must be given</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- lift A to ℝ -- tactic 'subst' failed, invalid equality proof, it is not of the form (x = t) or (t = x)</span>\n  <span class=\"c1\">-- ↑A = A✝</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This was brought up by my try at writing proofs for <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60nsmul_sInf.60\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60nsmul_sInf.60</a></p>",
        "id": 407309490,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1702324300
    },
    {
        "content": "<p>I think <code>lift f a to ℝ with A</code> is what you want</p>",
        "id": 407312981,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702325651
    },
    {
        "content": "<p>This error has also bitten me before (it wasn't necessary to give a name in Lean 3). Should we improve the error message (by writing \"... using <code>lift ... to ... with ...</code>\") or should we just allow <code>lift</code> to create a new name?</p>",
        "id": 407313424,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702325850
    },
    {
        "content": "<p>Perhaps both? Ideally it can recognize if the user has already assigned a name to the value. And suggest otherwise?</p>",
        "id": 407313543,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1702325887
    },
    {
        "content": "<p>If the name is a variable, it already works by re-using that variable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">z</span> <span class=\"n\">to</span> <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 407313888,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702326033
    },
    {
        "content": "<p>but not in the <code>let A := f a</code> case</p>",
        "id": 407313921,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1702326052
    },
    {
        "content": "<p>However, as your first message shows, there is a bug when the variable is actually a let variable</p>",
        "id": 407313928,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702326054
    },
    {
        "content": "<p>I think in the <code>let A := f a</code> case it should just do the same as when doing <code>lift f a</code>. The problem with re-using the name <code>A</code> is that it loses information (i.e. the body of the old <code>A</code>).</p>",
        "id": 407314953,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702326508
    },
    {
        "content": "<p>If the old <code>A</code> is shadowed, then it's not completely lost.</p>",
        "id": 407320764,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702329199
    }
]