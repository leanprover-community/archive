[
    {
        "content": "<p>When I start typing a trace option and I use autocomplete to see what choices I have, the autocomplete suggestions come with relatively unhelpful information. Is there a way we can put some more relevant information here?<br>\n<a href=\"/user_uploads/3121/ThV1vkVetFNY6lZdngYAYo2e/image.png\">image.png</a><br>\nEach of the options above give the same text, except for switching true/false. Ideally I'd want something like a function docstring which gives me some idea of what the options do</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ThV1vkVetFNY6lZdngYAYo2e/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ThV1vkVetFNY6lZdngYAYo2e/image.png\"></a></div>",
        "id": 403084960,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700450695
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/634f6963cf508345862f8e8a32f0afa03eb80e5a/src/Lean/Util/Trace.lean#L224\">https://github.com/leanprover/lean4/blob/634f6963cf508345862f8e8a32f0afa03eb80e5a/src/Lean/Util/Trace.lean#L224</a> is your culprit. You'll have to open a core RFC to get that improved I guess.<br>\nAesop has its own way of doing this <a href=\"https://github.com/leanprover-community/aesop/blob/bf5ab42a58e71de7ebad399ce3f90d29aae7fca9/Aesop/Tracing.lean#L20C4-L20C4\">https://github.com/leanprover-community/aesop/blob/bf5ab42a58e71de7ebad399ce3f90d29aae7fca9/Aesop/Tracing.lean#L20C4-L20C4</a> that we could adopt in mathlib I suppose. But seeing as many of the interesting traces are defined in core I see no way to add information there after the fact</p>",
        "id": 403089098,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700453407
    },
    {
        "content": "<p>Ideally we would just write a doc-string on the <code>initialize registerTraceClass ...</code> line, but I don't see any way to tunnel that information through to the <code>descr</code> field.</p>",
        "id": 403089221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700453518
    },
    {
        "content": "<p>Unless there is a trick like <code>by exact decl_name%</code> but that can grab the current declarations doc-string? That doesn't sound so implausible.</p>",
        "id": 403089298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700453571
    },
    {
        "content": "<p>Then we would just add an optional argument to <code>registerTraceClass</code>.</p>",
        "id": 403089317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700453585
    },
    {
        "content": "<p>If there's no <code>by exact decl_name%</code> available, we could have a macro that grabs <code>/-- XYZ -/ initialize registerTraceClass</code> and feeds <code>XYZ</code> in as an additional argument??</p>",
        "id": 403089605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700453822
    },
    {
        "content": "<p>I have definitely written code to steal the docstring from the <code>initialize</code> declaration using <code>decl_name%</code> before for something</p>",
        "id": 403098936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700459801
    },
    {
        "content": "<p>the doc isn't even correct, it says <code>enable/disable tracing for the given module and submodules</code> but the docstring on <code>registerTraceClass</code> says <code>By default, trace classes are not inherited</code></p>",
        "id": 403099190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700460005
    },
    {
        "content": "<p>I kind of want to just get rid of manual setting of the <code>descr</code> field altogether. It encourages single line docs because it's a string literal</p>",
        "id": 403099945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700460428
    },
    {
        "content": "<p>Is it time to bring back <code>/-\" comment strings \"-/</code>?</p>",
        "id": 403142144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700477027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/autocomplete.20help.20for.20options/near/403098936\">said</a>:</p>\n<blockquote>\n<p>I have definitely written code to steal the docstring from the <code>initialize</code> declaration using <code>decl_name%</code> before for something</p>\n</blockquote>\n<p>I've you remember where, I'm happy to crib.</p>",
        "id": 403159437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700483334
    },
    {
        "content": "<p>I agree the <code>descr</code> field is very unhelpful.</p>",
        "id": 403159458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700483343
    },
    {
        "content": "<p>Looking into it more, I'm leaning more toward something more like what the lake <code>package</code> et al macros do, and just take over elaboration of the structure literal in <code>register_option</code>, so that the macro can take the doc string and put it in as <code>descr</code></p>",
        "id": 403203793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700497363
    },
    {
        "content": "<p>If it were possible to rewrite doc-strings after the fact, that would also solve <a href=\"https://github.com/leanprover/lean4/issues/2622\">this issue</a>.</p>",
        "id": 403330525,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700556561
    }
]