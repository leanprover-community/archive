[
    {
        "content": "<p>I'm trying to forward-port <a href=\"https://github.com/leanprover-community/mathlib/pull/18536\">#18536</a>, namely generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_mem_iff\">docs#inv_mem_iff</a>. I tried both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := simp)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mem_iff</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">InvolutiveInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">InvMemClass</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inv_inv</span> <span class=\"n\">x</span> <span class=\"bp\">▸</span> <span class=\"n\">inv_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inv_mem</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">inv_mem_iff</span> <span class=\"n\">inv_mem_iff</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">neg_mem_iff</span> <span class=\"n\">neg_mem_iff</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := simp)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_mem_iff</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">InvolutiveInv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InvMemClass</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inv_inv</span> <span class=\"n\">x</span> <span class=\"bp\">▸</span> <span class=\"n\">inv_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inv_mem</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">inv_mem_iff</span> <span class=\"n\">inv_mem_iff</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">neg_mem_iff</span> <span class=\"n\">neg_mem_iff</span>\n</code></pre></div>\n<p>In both cases, Lean fails to do <code>rw [← inv_mem_iff]</code> in <code>div_mem_comm_iff</code> below.</p>",
        "id": 339252274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677817882
    },
    {
        "content": "<p>Is there an easy fix? Or should I revert this part of <a href=\"https://github.com/leanprover-community/mathlib/pull/18536\">#18536</a> for now?</p>",
        "id": 339252356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677817959
    },
    {
        "content": "<p>For now, I'm adding explicit <code>(x := _)</code> here and there.</p>",
        "id": 339253971,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677819278
    },
    {
        "content": "<p>Are you trying to do the job of the autoporter?</p>",
        "id": 339273981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677830406
    },
    {
        "content": "<p>I think that I can copy+paste+fix small snippets not worse than <code>mathport</code>. The issue is that Lean 4 <code>rw</code> can't use this lemma unless it knows <code>x</code>.</p>",
        "id": 339278075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677831960
    },
    {
        "content": "<p>Oh I see, the issue is the binders</p>",
        "id": 339278839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677832175
    },
    {
        "content": "<p>The issue is about TC search. It can find <code>SubgroupClass</code> that is right there in the assumptions but it fails to find <code>NegMemClass</code>.</p>",
        "id": 339279103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677832248
    },
    {
        "content": "<p>Does temporarily enabling etaExperiment help?</p>",
        "id": 339301730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677838679
    }
]