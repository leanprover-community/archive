[
    {
        "content": "<p>This simp succeeds in Lean 3, but in Lean 4 the [congr] attribute doesn't apply to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_congr%27#doc\">docs#forall_prop_congr'</a>, so the equivalent in Lean 4 doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">congr</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">propext</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">hp.1</span> <span class=\"n\">h2</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: `@[congr]` commented out for now.</span>\n<span class=\"c1\">-- @[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">propext</span>  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h2</span><span class=\"o\">)),</span> <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">hp.1</span> <span class=\"n\">h2</span><span class=\"o\">))⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What's missing in Lean 4 which is stopping us adding the congr attribute? </p>\n<p>(With extra imports, Lean 3 simp can close this goal, but Lean 4 simp gets stuck at this first rewrite. This showed up for me when trying to port :( )</p>",
        "id": 398132652,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698083737
    },
    {
        "content": "<p>This seems very related to the comment in <a href=\"https://github.com/leanprover/lean4/commit/a7323c98053ea992210f11b03e8fbeddcde57cb2\">https://github.com/leanprover/lean4/commit/a7323c98053ea992210f11b03e8fbeddcde57cb2</a>, if not to the fix itself. Maybe this is fixed in the latest nightly? If you want to try, you can use the <code>nightly-testing</code> mathlib4 branch.</p>",
        "id": 398133772,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698084214
    },
    {
        "content": "<p>Oh that is very related, thank you!</p>",
        "id": 398134126,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698084372
    },
    {
        "content": "<p>Unfortunately this will only show up in tomorrow's nightly</p>",
        "id": 398134265,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698084438
    },
    {
        "content": "<p>I'll wait until tomorrow - I don't trust myself to build it without screwing something up :)</p>",
        "id": 398134736,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698084639
    },
    {
        "content": "<p>Yes, this should have been fixed by <a href=\"https://github.com/leanprover/lean4/pull/2732\">lean4#2732</a> (you still can't use <code>@[congr]</code>, but now you don't need to)</p>",
        "id": 398135971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698085237
    },
    {
        "content": "<p>Great, I'll try again once that version of lean is released</p>",
        "id": 398164370,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698100077
    },
    {
        "content": "<p>Nightly's out</p>",
        "id": 398240081,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698137671
    }
]