[
    {
        "content": "<p>When trying to merge master into <a href=\"https://github.com/leanprover-community/mathlib4/pull/1219\">!4#1219</a>, I ran into a bug in OmegaCompletePartialOrder which is essentially the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Embedding.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EmbeddingLike</span> <span class=\"n\">Foo</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">EmbeddingLike</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps!]</span> <span class=\"kd\">def</span> <span class=\"n\">Foo.frob</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f.trans</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.frob</span> <span class=\"mi\">42</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- does not unfold Foo.frob</span>\n</code></pre></div>",
        "id": 340738810,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678407286
    },
    {
        "content": "<p>This is because the autogenerated <code>Foo.frob_apply</code> lemma contains <code>ℕ ↪ ℕ</code> as an implicit argument to <code>FunLike.coe</code> and so simp doesn't find it.</p>",
        "id": 340738873,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678407318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> What's the best approach here?</p>",
        "id": 340738940,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678407356
    },
    {
        "content": "<p>AFAIR, <code>simps</code> doesn't support type synonyms well. E.g., you can't have a custom <code>simps</code> setup for a synonym.</p>",
        "id": 340753103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678416155
    },
    {
        "content": "<p>BTW, I cherry picked parts of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1219\">!4#1219</a> into <a href=\"https://github.com/leanprover-community/mathlib4/pull/2390\">!4#2390</a></p>",
        "id": 340753186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678416229
    },
    {
        "content": "<p>And it fails too.</p>",
        "id": 340753238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678416255
    },
    {
        "content": "<p><code>simps</code> indeed doesn't support type aliases for structures, besides unfolding the alias. This works most of the time, but not when you use coercions instead of the projections of the structure.</p>\n<p>I could implement the following:</p>\n<ul>\n<li>By default <code>simps</code> unfolds type aliases</li>\n<li>However, you could <code>initialize_simps_projections</code> on type aliases like <code>Foo</code>, specifying which coercions it should generate. In this case <code>simps</code> won't unfold the type alias anymore.</li>\n</ul>",
        "id": 340838704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678449084
    },
    {
        "content": "<p>This would be awesome.</p>",
        "id": 340862497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678455177
    }
]