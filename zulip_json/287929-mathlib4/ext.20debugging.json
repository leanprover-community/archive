[
    {
        "content": "<p>Do we have any procedure to debug what the <code>ext</code> tactic is doing. I'm porting <a href=\"https://github.com/leanprover-community/mathlib/blob/347636a7a80595d55bedf6e6fbd996a3c39da69a/src/algebra/ring_quot.lean#L381\">this line</a> and the <code>ext</code> tactic simply isn't doing the same in mathlib4. I looked at what lemmas Lean 3 is calling here, and I can fix the Lean 4 proof by explicitly applying those lemmas. But it feels wrong. Both lemmas used by Lean 3 exist in mathlib4 and are tagged as <code>ext</code>.</p>",
        "id": 348821352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681329198
    },
    {
        "content": "<p>Hmm you could try <code>set_option trace.Meta.isDefEq true in ext1</code>.  This should tell you at least which lemmas ext is trying.</p>",
        "id": 348821663,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681329322
    },
    {
        "content": "<p>There has been a slight change in which lemmas ext tries.  Just like simp (and everything really) ext now uses the discrimination tree indexing.</p>",
        "id": 348821751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681329361
    },
    {
        "content": "<p>The old ext also resorted to trying all lemmas as a last resort, which is obviously a big performance problem that we wanted to avoid in Lean 4.</p>",
        "id": 348821912,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681329423
    },
    {
        "content": "<p>I would guess the issue is that some of the <code>ext</code> lemmas in Mathlib 4 now need their priority adjusted.</p>",
        "id": 348822160,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681329494
    },
    {
        "content": "<p>Indeed it applies ext lemmas in the \"wrong\" order, where wrong means not the one used by mathlib3 which succeeds here</p>",
        "id": 348822161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681329494
    },
    {
        "content": "<p>In practice this means that the new ext will no longer see through defs.  The fix is easy, you just need to add a new ext lemma for the defined type.</p>",
        "id": 348822193,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681329504
    },
    {
        "content": "<p>Yes the order is another thing.  The Lean 3 ext tries the last declared lemma first.  While the Lean 4 order is random unless you assign a priority.</p>",
        "id": 348822316,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681329555
    },
    {
        "content": "<p>Do we have any documentation about which priorities are sensible? I know (from reading the source code of <code>ext</code>) that default is 1000.</p>",
        "id": 348822875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681329720
    },
    {
        "content": "<p>I would refer to <a href=\"https://github.com/leanprover-community/mathlib4/pull/2020/files\">https://github.com/leanprover-community/mathlib4/pull/2020/files</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2979\">https://github.com/leanprover-community/mathlib4/pull/2979</a></p>",
        "id": 348824428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681330284
    },
    {
        "content": "<p>Oh, I used 1001. I guess I'll switch to 1100.</p>",
        "id": 348824788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681330429
    },
    {
        "content": "<p>Is there an upper bound on priorities?</p>",
        "id": 348827199,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681331336
    },
    {
        "content": "<p>I believe <code>high</code> and <code>low</code> are also accepted as priorities, if you just want something that is higher or lower than the default.</p>",
        "id": 348840123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1681336762
    },
    {
        "content": "<p>I don't like using both quantitative and qualitative properties because the relationship between them is not clear (to me), and sometimes we need multiple levels.</p>",
        "id": 348984511,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681354178
    },
    {
        "content": "<p>Do you have an example of where we need more than two levels?</p>",
        "id": 349244359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681436196
    },
    {
        "content": "<p>For ext we need at least four levels.  But I agree that we should probably determine these levels automatically, like you've suggested before.</p>",
        "id": 349247093,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681438063
    },
    {
        "content": "<p>I certainly encountered a situation porting where I needed at least 3 levels, but I don't recall where.</p>",
        "id": 349248413,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681439004
    },
    {
        "content": "<p>I'm really struggling to think of a case where there are more than two in practice</p>",
        "id": 350179066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681571646
    },
    {
        "content": "<p>In almost every case I know of the ext lemmas are for equality of</p>\n<ul>\n<li><code>SomeHom α β</code></li>\n<li><code>SomeHom (SomeType _) β</code></li>\n</ul>\n<p>The only exception I know of is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.ext_ring#doc\">docs4#LinearMap.ext_ring</a>, and that still feels like a special case of the second option</p>",
        "id": 350179334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681571716
    },
    {
        "content": "<p>One of the two problematic <code>ext</code>s in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3441\">!4#3441</a> required setting high priorities in two places. Is that still one level?</p>",
        "id": 350179476,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681571754
    },
    {
        "content": "<p>(yes I have addressed your comments in that PR)</p>",
        "id": 350179574,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681571780
    },
    {
        "content": "<p>Yes that still counts as one level; the precise question here is \"can you find a three ext lemmas that could all apply to the same situation\"</p>",
        "id": 350179801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681571833
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_alg_hom.ext\">docs#star_alg_hom.ext</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_alg_hom.ext_adjoin\">docs#star_alg_hom.ext_adjoin</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_alg_hom.ext_adjoin_singleton\">docs#star_alg_hom.ext_adjoin_singleton</a></p>",
        "id": 350194912,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681578833
    }
]