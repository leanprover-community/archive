[
    {
        "content": "<p>\"Extended field notation\" is the name for when you use <code>x.f</code> notation to mean <code>Foo.f x</code>, supposing you have <code>x : Foo ...</code> and some function <code>Foo.f</code> defined. Lean 4 recognizes extended field notation, but it does not pretty print using it.</p>\n<p>There is now <a href=\"https://github.com/leanprover-community/mathlib4/blob/fc66e256246e15cb172688da993d165b2910f0b2/Mathlib/Tactic/ProjectionNotation.lean#L69\">a command</a> in the <code>Mathlib.Tactic.ProjectionNotation</code> module called <code>pp_extended_field_notation</code> to configure a function to be pretty printed using dot notation. Right now the syntax is simply <code>pp_extended_field_notation Foo.f</code> (and depending on namespaces you can often do <code>pp_extended_field_notation f</code>).</p>\n<p>Rules:</p>\n<ul>\n<li>It should only be used on functions whose <em>first</em> explicit argument receives the object of the dot notation.</li>\n<li>It should <em>not</em> be used on functions of the form <code>toFoo</code> (anything that looks like a projection to a parent structure) since at the moment it might confuse other <code>pp_extended_field_notation</code> pretty printers.</li>\n<li>It <em>may</em> be used on true projections, which is useful if the projection can take additional arguments (for example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prefunctor.obj#doc\">docs4#Prefunctor.obj</a> takes both the <code>Prefunctor</code> and an additional value). The built-in Lean 4 dot notation pretty printer skips using dot notation in this case.</li>\n</ul>",
        "id": 357227012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683712057
    },
    {
        "content": "<p>Another thing that might be useful is that by just importing <code>Mathlib.Tactic.ProjectionNotation</code> you get a special pretty printer that collapses parent projections, so rather than <code>x.toC.toB.toA.f</code> it comes out as <code>x.f</code>. You can turn this off using <code>set_option pp.collapseStructureProjections false</code>.</p>",
        "id": 357227026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683712060
    },
    {
        "content": "<p>I assume you mean first <em>explicit</em> argument</p>",
        "id": 357228406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683712387
    },
    {
        "content": "<p>Sure, it should only be used for cases of extended field notation where the first explicit argument is the receiver of the dot notation object.</p>",
        "id": 357228850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683712494
    },
    {
        "content": "<p>Lean 4's dot notation passes the object to the first matching argument (explicit or not), and <code>pp_extended_field_notation</code> shouldn't be used in the non-explicit case.</p>",
        "id": 357229042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683712561
    },
    {
        "content": "<p>It seems like this needs to be done in every new file for which the pretty-printed dot is wanted. Is there a way to enable it globally at the point where the declaration is made?</p>",
        "id": 371199692,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1688137715
    },
    {
        "content": "<p>If you put it right after the corresponding declaration, it should be global</p>",
        "id": 371200537,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688137840
    },
    {
        "content": "<p>(Or more generally, if you import a file that uses <code>pp_extended_field_notation</code> on a declaration then you should see it work in the current module)</p>",
        "id": 371202423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688138145
    },
    {
        "content": "<p>I just got around to making a more convenient way to apply <code>pp_extended_field_notation</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5632\">#5632</a></p>\n<p>With this, instead you use the <code>@[pp_dot]</code> attribute. (RFC: Is this a fine name for the attribute?)</p>",
        "id": 371262492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688148914
    }
]