[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3051\">!4#3051</a> I have encountered the problem that Lean 4 fails at a coercion because it can't determine the type of the object completely. To be more precise there is the definition <code>affineCombination (Finset ι) (p : ι → P) : (ι → k) →ᵃ[k] P</code> and the coercion to <code>(ι → k) → P</code>. Given a <code>w : ι → k</code> Lean 3 was able to infer <code>k</code>, but Lean 4 fails. I see two possible workarounds: (a) make <code>k</code> explicit in the definition and (b) annotate the type of <code>affineCombination</code> every time. What is the better way?</p>",
        "id": 345089971,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680000191
    },
    {
        "content": "<p>for reference, similar (albeit not identical) come up frequently for things like <code>mk</code> for various quotient types. Thus far I <em>think</em> we have just been adding type annotations, but I'm not necessarily arguing this is the right approach.</p>",
        "id": 345176020,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680019011
    },
    {
        "content": "<p>Affine combinations are also slow to elaborate in Lean 3 for unknown reasons, so it's conceivable this is related. <a href=\"#narrow/stream/113488-general/topic/Slowness.20of.20.60affine_combination.60\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Slowness.20of.20.60affine_combination.60</a></p>",
        "id": 345272163,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1680051989
    },
    {
        "content": "<p>That is good to know. I would not be surprised if making <code>k</code> explicit in Lean 3 improves the performance. I can test that tomorrow evening (now + 1 day + 6 hours), if you have time for that earlier and feel free.</p>",
        "id": 345272779,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680052273
    },
    {
        "content": "<p>it looks like your workaround for the timeouts is exactly annotating the <code>k</code></p>",
        "id": 345273395,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680052616
    },
    {
        "content": "<p><code>sbtw.affine_combination_of_mem_affine_span_pair</code> currently: 4.39s and with the proposed change it's only 0.6s</p>",
        "id": 345275206,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680053797
    },
    {
        "content": "<p>i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sbtw.affine_combination_of_mem_affine_span_pair</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">affine_independent</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw₁</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hw₂</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w₂</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span>\n    <span class=\"n\">line</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w₁</span><span class=\"o\">,</span>\n      <span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w₂</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">his</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sbtw</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₂</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">sbtw</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w₁</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.affine_combination</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">w₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 345275247,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680053836
    },
    {
        "content": "<p>nerdsniped myself: <a href=\"https://github.com/leanprover-community/mathlib/pull/18689\">#18689</a></p>",
        "id": 345281364,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680058280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> please stop doing stuff in my PRs without asking first. We have a <code>help wanted</code> tag for a reason.</p>",
        "id": 345945823,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680268316
    },
    {
        "content": "<p>To add some details: only the initial author of a PR should put the <code>help wanted</code> tag on a PR. If he hasn't done that, it means that he is still working on the PR and that other people shouldn't touch it.</p>",
        "id": 345950057,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1680269215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233051.20AffineSpace.2ECombination/near/345945823\">said</a>:</p>\n<blockquote>\n<p>We have a <code>help wanted</code> tag for a reason.</p>\n</blockquote>\n<p>In fact the reason might be just \"it's a default tag on github\"! But indeed we seem to have co-opted it for a specific workflow; it would be great to update the description of the tag to reflect that, which right now is just \"Extra attention is needed\".</p>",
        "id": 345955561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680270322
    },
    {
        "content": "<p>It is also not hyphenated. ( <span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span> <span aria-label=\"fist\" class=\"emoji emoji-270a\" role=\"img\" title=\"fist\">:fist:</span> <span aria-label=\"cloud\" class=\"emoji emoji-2601\" role=\"img\" title=\"cloud\">:cloud:</span>)</p>",
        "id": 345957196,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680270692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233051.20AffineSpace.2ECombination/near/345950057\">said</a>:</p>\n<blockquote>\n<p>To add some details: only the initial author of a PR should put the <code>help wanted</code> tag on a PR. If he hasn't done that, it means that he is still working on the PR and that other people shouldn't touch it.</p>\n</blockquote>\n<p>How can I be sure that the author is working on it?</p>",
        "id": 345958008,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680270854
    },
    {
        "content": "<p>That's the author's responsibility.</p>",
        "id": 345958121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680270879
    },
    {
        "content": "<p>What if the author has abandoned it but forgot to place <code>help-wanted</code>?</p>",
        "id": 345958170,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680270891
    },
    {
        "content": "<p>Probably the thing to do is write a comment tagging them, asking what the status of the PR is, and whether it's fine to push changes</p>",
        "id": 345958417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680270948
    },
    {
        "content": "<p>(and importantly, wait a day or two for them to respond)</p>",
        "id": 345958562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680270971
    },
    {
        "content": "<p>I do think there is room for a \"feel free to push to this\" tag that isn't <code>help wanted</code></p>",
        "id": 345958857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680271044
    },
    {
        "content": "<p>I just changed the <code>help-wanted</code> description on mathlib to <code>\nThe author needs attention to resolve issues</code>. What do you think?</p>",
        "id": 345959219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680271116
    },
    {
        "content": "<p><span aria-label=\"love\" class=\"emoji emoji-2764\" role=\"img\" title=\"love\">:love:</span> <code>-</code></p>",
        "id": 345959330,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680271139
    },
    {
        "content": "<p>(and hyphenated it)</p>",
        "id": 345959449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680271168
    },
    {
        "content": "<p>Some other options are:</p>\n<ul>\n<li>Push the change you want to make to another branch, and write a comment suggesting the author take a look at that branch for a proposed fix</li>\n<li>Push the change anyway, but leave a comment explaining that you did so, and that you're happy for it to be reverted (I did that today <a href=\"https://github.com/leanprover-community/mathlib/pull/18679#discussion_r1154366694\">here</a>)</li>\n</ul>\n<p>This second option is a bit of a gamble, but is still better than pushing without letting the author know</p>",
        "id": 345959497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680271179
    },
    {
        "content": "<p>It happened a few time that Eric fixed something I was also fixing locally. In that case, I just keep whichever fix is best.</p>",
        "id": 345960404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680271347
    },
    {
        "content": "<p>I'm all groggy after going without sleep for the whole night just to watch MLB Opening Day</p>",
        "id": 345962999,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680271849
    },
    {
        "content": "<p>All 15 games of that</p>",
        "id": 345963036,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680271855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233051.20AffineSpace.2ECombination/near/345958170\">said</a>:</p>\n<blockquote>\n<p>What if the author has abandoned it but forgot to place <code>help-wanted</code>?</p>\n</blockquote>\n<p>\"the author has abandoned it, forgot to tag it <code>help-wanted</code>, and it lies dormant for a bit\" is much less of a problem than \"the author has not abandoned it, goes to push more stuff and finds a load of conflicts because someone else has been messing with their work\". So clearly the optimal approach is to err on the side of caution.</p>",
        "id": 345963939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680272055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233051.20AffineSpace.2ECombination/near/345958008\">said</a>:</p>\n<blockquote>\n<p>How can I be sure that the author is working on it?</p>\n</blockquote>\n<p>I thought the label <code>please-adopt</code> is one way for the author to say \"I abandoned this PR, do whatever you want with it.\"</p>",
        "id": 345964518,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1680272174
    },
    {
        "content": "<p>It depends on the pace of the port. If the PR author disappears for two days (say) and the file is an important one for future files and there is no obstruction to porting it other than the author's absence, then it would be better even to discard the in progress PR and do it again, than to wait for the author to come back.</p>",
        "id": 345964666,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680272211
    },
    {
        "content": "<p>This is assuming some attempt at contact has been made right?</p>",
        "id": 345965309,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680272335
    },
    {
        "content": "<blockquote>\n<p>goes to push more stuff and finds a load of conflicts because someone else has been messing with their work\"</p>\n</blockquote>\n<p>I think in this case a reasonable thing to do is</p>\n<ul>\n<li>Check if the upstream changes are obviously better than what you have locally; if so, keep them, discard your work.</li>\n<li>If they're not, and you don't want to deal with merging, just force push and let the other contributor know. The other person's work will be discarded from the PR, but they can recover it later (and resolve any conflicts) from the \"force push\" message on github. That way the conflict resolution is on the person who did the messing.</li>\n</ul>",
        "id": 345981884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680275667
    },
    {
        "content": "<p>I guess one of the most polite ways you can unilaterally build on someone's PR is to make a pull request into their branch (rather than into master), which is like offering assistance that they can easily refuse <em>or</em> trivially accept.</p>",
        "id": 346037312,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1680289805
    },
    {
        "content": "<p>back to this PR: I am running into severe problems with everyones favorite lean4 issue. For testing I turned on <code>etaExperiment</code> file-wide, otherwise I run into problems everywhere. There have been very weird problems with <code>simp</code>, so if someone wants to have a look at the porting notes I would be happy.</p>",
        "id": 346574101,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680529803
    },
    {
        "content": "<p>I had a lot of problems with simp when porting the dependencies of this file</p>",
        "id": 346574610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680529916
    },
    {
        "content": "<p>In general using <code>simp [(map_vadd)]</code> instead of <code>simp [map_vadd]</code> helped a lot</p>",
        "id": 346574703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680529932
    },
    {
        "content": "<p>Sometimes the simp lemmas need you to explicitly specify one of the types (usually the out_param) in order for them to match</p>",
        "id": 346574803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680529954
    },
    {
        "content": "<p>yes, the <code>AffineSpace</code> subfolder has been a big pain overall. I did not run into the <code>map_vadd</code> issue this time.</p>",
        "id": 346585835,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680531976
    }
]