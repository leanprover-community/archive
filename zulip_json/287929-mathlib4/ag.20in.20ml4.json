[
    {
        "content": "<p>I think we need to do some debugging to make algebraic geometry in mathlib4 work (at least as smooth) as in mathlib3. </p>\n<blockquote>\n<p>feat: port AlgebraicGeometry.Spec <a href=\"https://github.com/leanprover-community/mathlib4/pull/4599\">!4#4599</a> </p>\n</blockquote>\n<p>is porting the prime spectrum. Unfortunately several proofs are becoming longer for annoying reasons. A similar thing happened for ringed spaces in</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4499/files/264ce3ee71096ffceffeb9c72429fc1536588227..60ec18cffc14d5c5a1608cb38ce1c3f5adc579ee\">https://github.com/leanprover-community/mathlib4/pull/4499/files/264ce3ee71096ffceffeb9c72429fc1536588227..60ec18cffc14d5c5a1608cb38ce1c3f5adc579ee</a></p>\n<p>I fear that this isn't scaling.</p>",
        "id": 363229408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685778334
    },
    {
        "content": "<p>So as an experiment, I changed ConcreteCategory's way of coercing function to FunLike, it definitely makes rewriting comp_apply easier without making other proof much longer (mostly add comp_apply, id_apply to some simp call).</p>",
        "id": 363393678,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685833464
    },
    {
        "content": "<p><code>dsimp</code> still behaves very differently from its Lean3 counterpart which results in several long proofs. Less <code>change</code> are now used, most <code>change</code> are necessary for mostly because <code>↑f</code> can either come from <code>(forget _).map</code> or <code>FunLike.coe</code>. Changing <code>ConcreteCategory.hasCoeToFun</code> to <code>FunLike</code> can solve this part.</p>",
        "id": 363393912,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685833625
    },
    {
        "content": "<p>I have also fixed all <code>change</code> in <code>RingedSpace.lean</code> and some (but not all) explicit typing using this approach.  The explicit typing was partly due to <code>germ_res_apply</code> generated by <code>elementwise</code> is wrong, after manually adding a correct <code>germ_res_apply</code>, some explicit typing can be avoided.</p>",
        "id": 363394910,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685834349
    },
    {
        "content": "<p>Which branch is this on?</p>",
        "id": 363394934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685834379
    },
    {
        "content": "<p>port/AlgebraicGeometry.Spec</p>",
        "id": 363394952,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685834389
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4599\">https://github.com/leanprover-community/mathlib4/pull/4599</a></p>",
        "id": 363394957,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685834396
    },
    {
        "content": "<p><code>AlgebraicGeometry.Spec.sheafedSpaceMap_comp</code> in <code>Spec.lean</code> is a good example where <code>dsimp</code> is not very good compared to Lean3</p>",
        "id": 363395419,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685834720
    },
    {
        "content": "<p>Arguably, <code>FunLike</code> is better suited for <code>ConcreteCategory</code> because it uses the fact that the forgetful functor is faithful</p>",
        "id": 363396108,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685835232
    },
    {
        "content": "<p>BTW, if you use <code>FunLike</code> for coercion to function, then different ways to coerce (e.g., a generic construction vs existing instance for a bundled hom) are hidden behind defeq instances</p>",
        "id": 363885792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686027071
    },
    {
        "content": "<p>We made some progress on AG in ml4, but current PRs still have quite a lot of porting notes. After some discussion with <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I suggest that we stack several porting PRs on top of each other. That will give us a bigger picture to consider whether the current (smallish) issues blow up to bigger problems, or whether the small tweaks stay small.</p>\n<p>So... porters of algebraic geometry, unite!</p>",
        "id": 368459414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687421121
    },
    {
        "content": "<p>In particular, I think the hope is that we may be able to get to \"the end\" of algebraic geometry in mathlib3, and then decide that even though we are not entirely happy with the individual ported files, in aggregate we can merge them all and decide what to do on the mathlib4 side.</p>\n<p>The porting notes Johan is talking about are largely of the form \"simp/rw doesn't work, now we need erw\". I think we can hope that being more careful about definitional equality (and dsimp'ing) in the implicit arguments will resolve some of these. But I suspect achieving this is more of a refactoring project than a porting project, and it will be best to just getting everything over onto the mathlib4 side, so we can start that process. There's no point attempting to refactor on the mathlib3 side, because the behaviour of simp/rw have diverged so far (particularly in the presence of badly-dsimped implicit arguments) that we wouldn't learn anything about fixing things on the mathlib4 side by doing so.</p>",
        "id": 368538322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687436869
    },
    {
        "content": "<p>For reference, this is what remains to be done in AG: <a href=\"https://tqft.net/mathlib4/latest/algebraic_geometry.morphisms.quasi_separated.pdf\">https://tqft.net/mathlib4/latest/algebraic_geometry.morphisms.quasi_separated.pdf</a></p>",
        "id": 368538621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687436924
    },
    {
        "content": "<p>The other option would be that we just merge them as is... and make refactor PRs if follow-up porting PRs get stuck</p>",
        "id": 368540673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687437299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> what do you think?</p>",
        "id": 368540927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687437342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ag.20in.20ml4/near/368538322\">said</a>:</p>\n<blockquote>\n<p>In particular, I think the hope is that we may be able to get to \"the end\" of algebraic geometry in mathlib3, and then decide that even though we are not entirely happy with the individual ported files, in aggregate we can merge them all and decide what to do on the mathlib4 side.</p>\n<p>The porting notes Johan is talking about are largely of the form \"simp/rw doesn't work, now we need erw\". I think we can hope that being more careful about definitional equality (and dsimp'ing) in the implicit arguments will resolve some of these. But I suspect achieving this is more of a refactoring project than a porting project, and it will be best to just getting everything over onto the mathlib4 side, so we can start that process. There's no point attempting to refactor on the mathlib3 side, because the behaviour of simp/rw have diverged so far (particularly in the presence of badly-dsimped implicit arguments) that we wouldn't learn anything about fixing things on the mathlib4 side by doing so.</p>\n</blockquote>\n<p>by \"aggregate\", does it mean open one PR to include all dependencies including and up to <code>QuasiSeparated.lean</code></p>",
        "id": 368542561,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1687437642
    },
    {
        "content": "<p>I think we would have one PR per file. But once we see that everything works reasonably well in Lean 4, we just merge all of them on the same day.</p>",
        "id": 368542868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687437701
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 368543147,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1687437753
    },
    {
        "content": "<p>I am currently working on <code>PresheafedSpace.Gluing</code>. Can maintains still comment or label the individual PRs as \"pseudo-ready-to-merge\" or something like that so that porters confidently know that they can continue onto next file</p>",
        "id": 368543559,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1687437839
    },
    {
        "content": "<p>The other option is that we actually just merge the PR. But with the asterisk (*) that there's a small chance that we might need to do some refactoring if things get out of hand in a future file.</p>",
        "id": 368544042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687437914
    },
    {
        "content": "<p>I guess if we just merge the PR and rework them on the go, there is the advantage of being able to get cache. Compared to aggregate them all together, say for some reason we need to change a deep file, then it takes long to recompile. Not sure if this makes sense</p>",
        "id": 368545973,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1687438287
    },
    {
        "content": "<p>Since the total amount of files involved is rather small (roughly 10) I'm starting to lean towards just merging and moving forward</p>",
        "id": 368550695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687439206
    },
    {
        "content": "<p>Ok, let's give this a shot</p>",
        "id": 368584031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687444487
    },
    {
        "content": "<blockquote>\n<p>algebraic_geometry.gluing    <a href=\"https://github.com/leanprover-community/mathlib4/pull/5446\">#5446</a></p>\n</blockquote>\n<p>has one annoying error left.</p>",
        "id": 370461083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687963964
    }
]