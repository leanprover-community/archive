[
    {
        "content": "<p>In this night's port of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingTheory.Bertrand#doc\">docs#RingTheory.Bertrand</a>, one of the issues was that Lean didn't solve by <code>norm_num</code> an inequality of real numbers that only involved natural numbers and standard operations. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">512</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1024</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">512</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Because of the <code>div</code>, that couldn't be absolutely automatic, but even when the terms involve <code>pow</code>, <code>add</code> and <code>mul</code>, this does not seem to be automatic. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">512</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6198</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1024</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">Nat.cast_ofNat</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_lt</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_le</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 369582669,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1687763005
    },
    {
        "content": "<p>I think this may be a known issue, <br>\n<a href=\"https://github.com/leanprover/lean4/issues/2220\">https://github.com/leanprover/lean4/issues/2220</a><br>\nabout wrong parsing of powers.</p>",
        "id": 369583420,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687763192
    },
    {
        "content": "<p>Does putting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at the beginning of the file change anything?</p>",
        "id": 369583585,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687763238
    },
    {
        "content": "<p>It looks like <code>norm_num</code> only handles <code>a ^ b</code> where <code>b : Nat</code>, rather than more generally whenever <code>b</code> is a nat literal. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this something that could be handled by <code>norm_num</code> itself? Could there be another <code>norm_num</code> extension that applies cast lemmas like <code>Real.rpow_nat_cast</code> to get the pow extension to apply? Or should <code>norm_num</code> rely on using simp lemmas, as <code>Real.rpow_nat_cast</code> is one? (Maybe there should be a <code>norm_num</code> simp set so it doesn't have to rely on whatever the global simp set is?)</p>\n<p><em>Edit:</em> I missed that <code>Real.rpow_nat_cast</code> isn't enough to convert <code>a ^ b</code> with <code>b : Real</code> a nat literal to <code>a ^ b</code> with <code>b : Nat</code> the \"same\" nat literal. That needs some more <code>norm_num</code>-like power than what simp can do alone.</p>",
        "id": 369589958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687764687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/norm_num/near/369589958\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>norm_num</code> only handles <code>a ^ b</code> where <code>b : Nat</code>, rather than more generally whenever <code>b</code> is a nat literal. </p>\n</blockquote>\n<p>That's a weird sentence, that's not more general, it's a different function</p>",
        "id": 369592836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687765301
    },
    {
        "content": "<p><code>norm_num</code> handles the <code>npow</code> function, there is no extension written for the <code>rpow</code> function</p>",
        "id": 369592982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687765331
    },
    {
        "content": "<p>It's <code>HPow.hPow</code> either way, right? There's a <code>norm_num</code> extension right now for the <code>npow</code> instance, and it would handle <code>HPow.hPow</code> more generally if it handled <code>rpow</code> too. I don't mean to suggest it's an oversight in the implementation</p>",
        "id": 369595490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687765891
    },
    {
        "content": "<p>No, the discrimination tree matches on more than that</p>",
        "id": 369595683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687765925
    },
    {
        "content": "<p>that extension is specifically about <code>hPow</code> with the <code>npow</code> instance</p>",
        "id": 369595905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687765973
    },
    {
        "content": "<p>if you put <code>rpow</code> stuff in there it wouldn't be called</p>",
        "id": 369596052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766009
    },
    {
        "content": "<p>The \"it\" in \"and it would\" is referring to <code>norm_num</code>, not the extension</p>",
        "id": 369596087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687766017
    },
    {
        "content": "<p>I'm saying that there is a missing extension</p>",
        "id": 369596345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766074
    },
    {
        "content": "<p>\"generality\" is referring to <code>norm_num</code> too, not a specific extension</p>",
        "id": 369596362,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687766078
    },
    {
        "content": "<p>Yes, we are in agreement</p>",
        "id": 369596378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687766082
    },
    {
        "content": "<p>you wouldn't be able to put the <code>rpow</code> extension in that file anyway</p>",
        "id": 369596457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766099
    },
    {
        "content": "<p>because <code>rpow</code> has a ton of requirements</p>",
        "id": 369596533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766112
    },
    {
        "content": "<p>Couldn't there be some setup where <code>HPow.hPow</code> instances with some cast axioms (wired up using some attribute maybe) could be calculated by an extension in that file?</p>",
        "id": 369599048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687766610
    },
    {
        "content": "<p>I don't see why that would be desirable</p>",
        "id": 369599244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766644
    },
    {
        "content": "<p><code>rpow</code> has specific theorems for it, in addition to a broader range of valid values that have to be handled</p>",
        "id": 369599384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766676
    },
    {
        "content": "<p>it's clearly a new extension</p>",
        "id": 369599446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766689
    },
    {
        "content": "<p>Even for just the <code>(x : real) ^ (nat literal : real)</code> case?</p>",
        "id": 369599726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687766758
    },
    {
        "content": "<p>yes</p>",
        "id": 369599870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766779
    },
    {
        "content": "<p>if you wanted to have a one liner extension that applies a cast theorem and reduces to the <code>npow</code> case you can do that</p>",
        "id": 369599985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766805
    },
    {
        "content": "<p>but the architecture is such that each \"pattern\" gets its own extension, even if it is a one liner</p>",
        "id": 369600190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687766855
    },
    {
        "content": "<p>I wasn't surprised about needing a new extension for this, it was the \"broader range of valid values that have to be handled\"</p>",
        "id": 369600995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687767045
    },
    {
        "content": "<p>Anyway, it might be worth making some attribute for cast lemmas that auto-generates a norm-num extension (like when applied to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.rpow_nat_cast#doc\">docs4#Real.rpow_nat_cast</a>)</p>",
        "id": 369601156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687767080
    },
    {
        "content": "<p>perhaps. I just worked with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> this weekend to do the same thing for <code>positivity</code>. I would rather hold off on doing so for <code>norm_num</code>, at least for this kind of example, both because I am concerned about the performance characteristics and also because this example is not actually suitable for auto-implementation because of the logic around rational powers</p>",
        "id": 369601677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687767186
    },
    {
        "content": "<p>There are definitely examples where a simple attribute would suffice, but this is not one of them</p>",
        "id": 369601826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687767224
    },
    {
        "content": "<p>Is your concern that <code>norm_num</code> doesn't cache normalized values, so having two extensions will cause re-normalization of operands? Because the performance characteristics of the <code>Real.rpow_nat_cast</code>-based extension seem like they'd otherwise be as good as you'd want for just the natlit-exponent case.</p>",
        "id": 369605013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687767935
    },
    {
        "content": "<p>having two extensions is just fine, the performance issue is just that the auto-generated extension won't be as good as the hand written one unless the generator is very complex</p>",
        "id": 369606450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768236
    },
    {
        "content": "<p>the two extensions aren't both being called on the same thing here</p>",
        "id": 369606806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768301
    },
    {
        "content": "<p>the <code>rpow</code> extension is called when the goal is an <code>rpow</code>, and the <code>npow</code> extension is called when it is an <code>npow</code>, and when it is an uninterpreted <code>hPow</code> nothing is called</p>",
        "id": 369607078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768348
    },
    {
        "content": "<p>The two I was talking about were <code>(x : Real) ^ (ratlit : Real)</code> and <code>(x : Real) ^ (natlit : Real)</code></p>",
        "id": 369607242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687768386
    },
    {
        "content": "<p>Do you think you can write a <code>norm_num</code> extension for <code>(x : Real) ^ (natlit : Real)</code> that has a meaningful difference in performance characteristics than one that applies <code>Real.rpow_nat_cast</code> and uses the natlit extension? Other than being able to call that extension directly rather than go through another loop of the norm-num algorithm?</p>",
        "id": 369607762,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687768499
    },
    {
        "content": "<p>That would not be two extensions, or at least I don't see why you would do that</p>",
        "id": 369607942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768547
    },
    {
        "content": "<p>there would just be one, for <code>(x : Real) ^ (ratlit : Real)</code>, possibly written in stages if the rational case isn't too important</p>",
        "id": 369608171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768590
    },
    {
        "content": "<blockquote>\n<p>Do you think you can write a norm_num extension for (x : Real) ^ (natlit : Real) that has a meaningful difference in performance characteristics than one that applies Real.rpow_nat_cast and uses the natlit extension?</p>\n</blockquote>\n<p>Yes, it would not use that theorem, it would dispatch to the same function that the natlit extension uses</p>",
        "id": 369608421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687768647
    },
    {
        "content": "<p>I don't know, this seems like a very acceptable amount of indirection (an extra couple lemmas in the proof term along with a little more overhead looking into the discrimination tree again?), especially if it would give people who aren't <code>norm_num</code> experts the ability to deal with annoying natlit-casting issues. This isn't just about powers either, but rather any sort of polymorphic function that respects numeric coercions.</p>\n<p>If they're actually slow enough to be noticable, then experts such as yourself can replace them with something faster as the need arises.</p>",
        "id": 369611992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687769388
    },
    {
        "content": "<p>maybe. This is a very simple issue though and I'd rather fix the problem in front of me than develop a more complicated solution to address cases which are improperly modeled by this one</p>",
        "id": 369612457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687769481
    },
    {
        "content": "<p>For inequalities involving real numbers, how complicated would that be to have Lean compute in floats (with interval arithmetic) and evaluate both terms at a sufficient precision to conclude to inequalities ?</p>",
        "id": 370307471,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1687937230
    },
    {
        "content": "<p>they have something like that in Coq, and a similar thing in Isabelle. It can certainly be done, but it will require some nontrivial engineering afaik.</p>",
        "id": 370308752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687937475
    },
    {
        "content": "<p>Even if you do such a computation, the results are not really useful for the actual proof though if you want a proof-producing method because <code>Float</code> is opaque</p>",
        "id": 370309484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687937612
    },
    {
        "content": "<p>Ooh, I thought that Antoine meant \"float\" instead of <code>Float</code>...</p>",
        "id": 370309839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687937674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/norm_num/near/369608171\">said</a>:</p>\n<blockquote>\n<p>there would just be one, for <code>(x : Real) ^ (ratlit : Real)</code>, possibly written in stages if the rational case isn't too important</p>\n</blockquote>\n<p>Did the norm_num extension for rpow (<a href=\"https://github.com/leanprover-community/mathlib/pull/11382\">https://github.com/leanprover-community/mathlib/pull/11382</a>) ever get ported?</p>",
        "id": 406084470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701790539
    },
    {
        "content": "<p>(ah, <a href=\"https://github.com/leanprover-community/mathlib4/blob/34bb97b7e04cdf4847b9ae20a23d56f7fc4d43e7//Mathlib/Analysis/SpecialFunctions/Pow/Real.lean#L816-L863\">no</a>)</p>",
        "id": 406084688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701790611
    }
]