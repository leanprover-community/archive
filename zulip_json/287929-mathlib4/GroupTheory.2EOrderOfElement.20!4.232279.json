[
    {
        "content": "<p>There is one error left in this file, about a fintype instance that can't be found.</p>",
        "id": 329189460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676985974
    },
    {
        "content": "<p>the fintype instance in Lean3 is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a>, as coercing to sets is afaik defeq to taking the subtype of things in the <code>set_like</code>.  For some reason Lean4 doesn't like this - do we have to make a <code>SetLike.fintype</code>?</p>",
        "id": 329207918,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676990519
    },
    {
        "content": "<p>I think the coercion function implied by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetLike#doc\">docs4#SetLike</a> is too opaque for typeclass search to see through</p>",
        "id": 329209487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676990898
    },
    {
        "content": "<p>I think we had something similar with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sym2#doc\">docs4#Sym2</a> which was no longer picking up default quotient instances</p>",
        "id": 329209768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676990975
    },
    {
        "content": "<p>So, what is the solution?</p>",
        "id": 329220163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676993384
    },
    {
        "content": "<p>For Sym2 we just copied across the instance with a porting note</p>",
        "id": 329221840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676993770
    },
    {
        "content": "<p>Maybe make a mathlib4 issue too, since this will probably reoccur, and it gives us something to reference in the comment</p>",
        "id": 329221891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676993782
    },
    {
        "content": "<p>Ok, I will add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: TODO the following instance should follow from a more general principle</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.powers</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">$</span> <span class=\"n\">Fintype</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Submonoid.powers</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and create an issue.</p>",
        "id": 329222537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676993932
    },
    {
        "content": "<p>Oh, I meant that you should add an instance in the same form as the instance it's finding there</p>",
        "id": 329222682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676993973
    },
    {
        "content": "<p>What's the term it infers?</p>",
        "id": 329222712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676993981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Subtype.fintype</span> <span class=\"n\">G</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">Membership.mem</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toMulOneClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LeftCancelMonoid.toMonoid</span> <span class=\"n\">G</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toMulOneClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LeftCancelMonoid.toMonoid</span> <span class=\"n\">G</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)))</span> <span class=\"n\">G</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submonoid.instSetLikeSubmonoid</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toMulOneClass</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LeftCancelMonoid.toMonoid</span> <span class=\"n\">G</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))))</span>\n        <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submonoid.powers</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LeftCancelMonoid.toMonoid</span> <span class=\"n\">G</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">decidablePowers</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 329225105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676994574
    },
    {
        "content": "<p>Can you repeat the statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.fintype#doc\">docs4#Subtype.fintype</a> but for SetLike?</p>",
        "id": 329225799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676994740
    },
    {
        "content": "<p>(or if that doesn't work, for <code>Submonoid</code>)</p>",
        "id": 329225832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676994749
    }
]