[
    {
        "content": "<p>I wonder why the repr function for Finset is marked \"unsafe\"? For example, this will not compile</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but if I declare main also \"unsafe\", it compiles and runs fine, outputting <code>{0, 1, 2, 3}</code>.</p>\n<p>Is there some inherent reason or is this just a temporary / implementation thing?</p>",
        "id": 327848127,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676400133
    },
    {
        "content": "<p>It's not possible to safely (ie, equal finsets print equally) print a finset unless your type has a canonical ordering</p>",
        "id": 327848569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676400284
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/18166\">https://github.com/leanprover-community/mathlib/issues/18166</a> for a brief discussion</p>",
        "id": 327849258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676400473
    },
    {
        "content": "<p>I see, thanks. What would then be the right way to safely print a <code>Finset Nat</code> in the numerical order? Pardon my elementary question, I am quite novice with respect to writing executable programs with mathlib.</p>",
        "id": 327850714,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676400939
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs4#Finset.sort</a> and print the result of that.</p>",
        "id": 327851555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676401186
    },
    {
        "content": "<p>But also, if you're writing a program that you want to run, you should probably use a real data structure rather than <code>Finset</code>, which is just a list in unspecified order.</p>",
        "id": 327851870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676401272
    },
    {
        "content": "<p>Yes, I understand that if I just want executable code that has lists of numbers, I would use lists of numbers. But I actually want to find out how well one can use Mathlib-defined things in executable code. For example, in my line of research, I would be studying both the mathematical properties of sumsets (with addition from Finset.Pointwise), proving theorems about them, <strong>and</strong> writing code that studies concrete examples. Not sure if I am being naive, but I would wish to use the same representation (Finset Nat) here both for theorems and for code. If you see my point.</p>",
        "id": 327853183,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676401640
    },
    {
        "content": "<p>Unless you want to prove things about how finsets print, there is no problem with just using <code>unsafe</code></p>",
        "id": 327855067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676402211
    },
    {
        "content": "<p>Ok. Well for ease of understanding of my finsets (of nats), it would be nice to print them in numerical order. Didn't quite succeed in that either, because <code>Finset.sort</code> requires a decidable comparison operator. <code>Finset.sort Nat.lt a</code> does not work since <code>Nat.lt</code> is not decidable (?). I guess I'll just have to study these things some more. Thanks for all the help so far!</p>",
        "id": 327856057,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676402582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477957\">Jukka Kohonen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.20Repr.20is.20unsafe/near/327856057\">said</a>:</p>\n<blockquote>\n<p><code>Finset.sort Nat.lt a</code> does not work since <code>Nat.lt</code> is not decidable (?).</p>\n</blockquote>\n<p>Sounds like you're missing an import, it definitely is decidable</p>",
        "id": 327858755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403488
    },
    {
        "content": "<blockquote>\n<p>Ok. Well for ease of understanding of my finsets (of nats), it would be nice to print them in numerical order. </p>\n</blockquote>\n<p>You can always add your own <code>Repr</code> instance for <code>Finset Nat</code> specifically</p>",
        "id": 327858863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676403524
    },
    {
        "content": "<p>Yeah, I have been searching, but failing to find an import that would make <code>Nat.lt</code> decidable. At least</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>is not enough: the sort complains <code>failed to synthesize instance  DecidableRel Nat.lt</code>. I'm sure it is somewhere, so I'll keep searching.</p>",
        "id": 327867472,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676406440
    },
    {
        "content": "<p>You need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.LinearOrder#doc\">docs4#Nat.LinearOrder</a></p>",
        "id": 327867699,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676406534
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.canonicallyOrderedAddMonoid#doc\">docs4#Nat.canonicallyOrderedAddMonoid</a></p>",
        "id": 327867867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676406603
    },
    {
        "content": "<p><code>import Mathlib.Data.Nat.Order.Basic</code></p>",
        "id": 327871789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676408157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.20Repr.20is.20unsafe/near/327867867\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.canonicallyOrderedAddMonoid#doc\">docs4#Nat.canonicallyOrderedAddMonoid</a></p>\n</blockquote>\n<p>Thanks, that seems to be in <code>Mathlib.Data.Nat.Order.Basic</code>. Imported that too, still same error. Oh well...</p>",
        "id": 327871909,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676408192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 327873045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676408612
    },
    {
        "content": "<p>You're not ever suppoed to write <code>Nat.lt</code></p>",
        "id": 327873091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676408628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.20Repr.20is.20unsafe/near/327873045\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Sort</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.sort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>There is progress: now the error is different. This exact code gives me \"failed to synthesize instance  IsTotal ℕ fun x x_1 =&gt; x &lt; x_1\".</p>",
        "id": 327877570,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676410271
    },
    {
        "content": "<p>Try to sort using <code>\\le</code> instead</p>",
        "id": 327879109,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676410854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.20Repr.20is.20unsafe/near/327879109\">said</a>:</p>\n<blockquote>\n<p>Try to sort using <code>\\le</code> instead</p>\n</blockquote>\n<p>Oh yeah, that nails it! Same code as above but <code>(· ≤ ·)</code> works fine. Thanks to everybody!</p>\n<p>In retrospect, I should have decrypted the problem from the latest error message (<code>&lt;</code> is not total, <code>≤</code>is). Perhaps the documentation <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs4#Finset.sort</a> could state more plainly what the comparison operator <code>r</code> is supposed to be.</p>",
        "id": 327929927,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1676441532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433639\">Jukka Kohonen</span> has marked this topic as resolved.</p>",
        "id": 328015821,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676469165
    }
]