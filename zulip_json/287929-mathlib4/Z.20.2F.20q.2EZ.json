[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"342995\">@Jonathan Protzenko</span> and I are trying to formalize operations which involve the finite group <code>Z / q.Z</code> (where q is prime). What is the most convenient way of defining <code>Z / q.Z</code>? More specifically, should we work with <code>ZMod</code>, or with something like <code>Z / Ideal.span q</code> (following what I see in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/ZMod/Quotient.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/ZMod/Quotient.html</a> )?</p>",
        "id": 390993144,
        "sender_full_name": "Son Ho",
        "timestamp": 1694714514
    },
    {
        "content": "<p><code>ZMod q</code> is the canonical spelling</p>",
        "id": 390993259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694714553
    },
    {
        "content": "<p>thanks, we're browsing the documentation for this file and looking for the power function, how do we go about finding this one?</p>",
        "id": 390993481,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1694714634
    },
    {
        "content": "<p>Just write <code>x ^ n</code> as usual.</p>",
        "id": 390993875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694714786
    },
    {
        "content": "<p>Are you looking for computationally efficient exponentiation? E.g. for RSA? If so, then I don’t think we have this yet.</p>",
        "id": 390994995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694715310
    },
    {
        "content": "<p>For proof of concept purposes (I.e. if the numbers don’t get too large, or if you’re proving things with q and the exponent being arbitrary), then using <code>^</code> will work just fine.</p>",
        "id": 390995721,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694715615
    },
    {
        "content": "<p>No, we're not looking for efficient computations. But as you guessed, we're trying to verify a crypto primitive (the Kyber NTT).<br>\nAs of now, I have the issue that I don't manage to reduce terms when doing proofs.</p>\n<p>More specifically : in Kyber we use <code>q = 3329</code>, which gives us that <code>zeta = 17</code> is a root of 1 (more specifically: <code>zeta ^ 256 = 1</code>).<br>\nI want to prove that below, but I'm not sure how to proceed in the proof. In particular, I would expect that simp manages to simplify terms, but it doesn't happen :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ZMod</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"mi\">3329</span>\n<span class=\"kd\">def</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">commRing</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"n\">ZMod.commRing</span> <span class=\"n\">q</span>\n<span class=\"kd\">instance</span> <span class=\"n\">commSemiRing</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"n\">commRing.toCommSemiring</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semiRing</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"n\">commRing.toSemiring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">zeta</span> <span class=\"o\">:</span> <span class=\"n\">Zq</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">17</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zeta_256_is_one</span> <span class=\"o\">:</span> <span class=\"n\">Pow.pow</span> <span class=\"n\">zeta</span> <span class=\"mi\">256</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pow.pow</span><span class=\"o\">,</span> <span class=\"n\">zeta</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Stuck here</span>\n</code></pre></div>\n<p>Do you know how I should proceed?</p>",
        "id": 390996864,
        "sender_full_name": "Son Ho",
        "timestamp": 1694716131
    },
    {
        "content": "<p>Does <code>by decide</code> work?</p>",
        "id": 390998503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694716802
    },
    {
        "content": "<p>I tried it but it also fails. I also don't manage to reduce something like <code>zeta * zeta</code>.</p>",
        "id": 390998898,
        "sender_full_name": "Son Ho",
        "timestamp": 1694716969
    },
    {
        "content": "<p><code>by rfl</code> works :)</p>",
        "id": 390999165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717075
    },
    {
        "content": "<p>although <code>rfl</code> fails (max recursion depth yada yada yada)</p>",
        "id": 390999320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717145
    },
    {
        "content": "<p>Oh wow, thanks!</p>",
        "id": 390999440,
        "sender_full_name": "Son Ho",
        "timestamp": 1694717184
    },
    {
        "content": "<p>But I'm still a bit puzzled: if I have in my goal a subterm <code>zeta * zeta</code> and I want to reduce it to <code>289</code> (without introducing a subgoal specifically for this). How could I do it? :)</p>",
        "id": 390999777,
        "sender_full_name": "Son Ho",
        "timestamp": 1694717327
    },
    {
        "content": "<p>The context is that we would find it nice if we could \"clean up\" a term by simplifying away things that compute... hope this helps!</p>",
        "id": 391000016,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1694717412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"371938\">Son Ho</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Z.20.2F.20q.2EZ/near/390999777\">said</a>:</p>\n<blockquote>\n<p>But I'm still a bit puzzled: if I have in my goal a subterm <code>zeta * zeta</code> and I want to reduce it to <code>289</code> (without introducing a subgoal specifically for this). How could I do it? :)</p>\n</blockquote>\n<p>This would be <code>rfl</code> as well.</p>",
        "id": 391000064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717433
    },
    {
        "content": "<p>Or <code>norm_num</code></p>",
        "id": 391000092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"mi\">17</span> <span class=\"bp\">*</span> <span class=\"mi\">17</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 391000388,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717592
    },
    {
        "content": "<p>But it doesn't simplify subterms, it only applies to proofs of equality, right?<br>\nLet's say my goal is : <code>P (zeta * zeta)</code> for some predicate <code>P</code>, and I want to simplify it to <code>P 289</code>.</p>",
        "id": 391000471,
        "sender_full_name": "Son Ho",
        "timestamp": 1694717626
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Zq</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">289</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Zq</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">289</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"k\">from</span> <span class=\"k\">show</span> <span class=\"mi\">17</span> <span class=\"bp\">*</span> <span class=\"mi\">17</span> <span class=\"bp\">=</span> <span class=\"mi\">289</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Zq</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">289</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">zeta</span> <span class=\"bp\">*</span> <span class=\"n\">zeta</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 391000730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717729
    },
    {
        "content": "<p>when your numbers get big, I suppose the <code>norm_num</code> approach would be the way to go.</p>",
        "id": 391000861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717774
    },
    {
        "content": "<p>but in this case, everything can be done with <code>rfl</code> essentially.</p>",
        "id": 391000889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717790
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 391001029,
        "sender_full_name": "Son Ho",
        "timestamp": 1694717847
    },
    {
        "content": "<p>No problem! Good luck with your project.</p>",
        "id": 391001253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694717928
    }
]