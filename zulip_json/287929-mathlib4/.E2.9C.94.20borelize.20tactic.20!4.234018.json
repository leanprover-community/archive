[
    {
        "content": "<p>I'm porting <code>borelize</code> tactic.<br>\nThe current code emits PANIC at <code>generateFrom_Ico_mem_le_borel</code>.<br>\nHow to fix this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- The behaviour of `borelize α` depends on the existing assumptions on `α`.</span>\n\n<span class=\"sd\">- if `α` is a topological space with instances `[MeasurableSpace α] [BorelSpace α]`, then</span>\n<span class=\"sd\">  `borelize α` replaces the former instance by `borel α`;</span>\n<span class=\"sd\">- otherwise, `borelize α` adds instances `borel α : MeasurableSpace α` and `⟨rfl⟩ : BorelSpace α`.</span>\n\n<span class=\"sd\">Finally, `borelize α β γ` runs `borelize α; borelize β; borelize γ`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"borelize\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- Add instances `borel e : MeasurableSpace e` and `⟨rfl⟩ : BorelSpace e`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">addBorelInstance</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">m₁</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">nm₁</span> <span class=\"bp\">←</span> <span class=\"n\">getUnusedUserName</span> <span class=\"bp\">`</span><span class=\"n\">inst</span>\n    <span class=\"k\">let</span> <span class=\"n\">ms</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">bo</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">borel</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">i₁</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n    <span class=\"n\">m₁.modifyDecl</span> <span class=\"k\">fun</span> <span class=\"n\">mdcl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">mdcl</span> <span class=\"k\">with</span>\n        <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.lctx.mkLetDecl</span> <span class=\"n\">i₁</span> <span class=\"n\">nm₁</span> <span class=\"n\">ms</span> <span class=\"n\">bo</span><span class=\"o\">,</span>\n        <span class=\"n\">localInstances</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.localInstances.push</span>\n          <span class=\"o\">{</span> <span class=\"n\">className</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">MeasurableSpace</span><span class=\"o\">,</span>\n            <span class=\"n\">fvar</span> <span class=\"o\">:=</span> <span class=\"n\">bo</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"n\">m₁.withContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">nm₂</span> <span class=\"bp\">←</span> <span class=\"n\">getUnusedUserName</span> <span class=\"bp\">`</span><span class=\"n\">inst</span>\n      <span class=\"k\">let</span> <span class=\"n\">bs</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">BorelSpace</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">rf</span> <span class=\"bp\">←</span> <span class=\"n\">mkEqRefl</span> <span class=\"n\">bo</span>\n      <span class=\"k\">let</span> <span class=\"n\">bm</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">BorelSpace.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">rf</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">i₂</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n      <span class=\"n\">m₁.modifyDecl</span> <span class=\"k\">fun</span> <span class=\"n\">mdcl</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"o\">{</span> <span class=\"n\">mdcl</span> <span class=\"k\">with</span>\n          <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.lctx.mkLetDecl</span> <span class=\"n\">i₂</span> <span class=\"n\">nm₂</span> <span class=\"n\">bs</span> <span class=\"n\">bm</span><span class=\"o\">,</span>\n          <span class=\"n\">localInstances</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.localInstances.push</span>\n            <span class=\"o\">{</span> <span class=\"n\">className</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">BorelSpace</span><span class=\"o\">,</span>\n              <span class=\"n\">fvar</span> <span class=\"o\">:=</span> <span class=\"n\">bm</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">m₁</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Given a type `e`, an assumption `i : MeasurableSpace α`, and an instance `[BorelSpace e]`,</span>\n<span class=\"sd\">replace `i` with `borel e`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">borelToRefl</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">m₁</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"bp\">←</span> <span class=\"n\">i.getUserName</span>\n    <span class=\"k\">let</span> <span class=\"n\">ms</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">bo</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">borel</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"o\">(</span><span class=\"n\">mkFVar</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">bo</span>\n    <span class=\"k\">let</span> <span class=\"n\">me</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">BorelSpace.measurable_eq</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">m₂</span> <span class=\"bp\">←</span> <span class=\"n\">m₁.assert</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"n\">eq</span> <span class=\"n\">me</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">m₃</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">m₂.intro</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span>\n    <span class=\"k\">let</span> <span class=\"n\">m₄</span> <span class=\"bp\">←</span> <span class=\"n\">subst</span> <span class=\"n\">m₃</span> <span class=\"n\">i</span>\n    <span class=\"k\">let</span> <span class=\"n\">i₂</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n    <span class=\"n\">m₄.modifyDecl</span> <span class=\"k\">fun</span> <span class=\"n\">mdcl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">mdcl</span> <span class=\"k\">with</span>\n        <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.lctx.mkLetDecl</span> <span class=\"n\">i₂</span> <span class=\"n\">nm</span> <span class=\"n\">ms</span> <span class=\"n\">bo</span><span class=\"o\">,</span>\n        <span class=\"n\">localInstances</span> <span class=\"o\">:=</span> <span class=\"n\">mdcl.localInstances.push</span>\n          <span class=\"o\">{</span> <span class=\"n\">className</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">MeasurableSpace</span><span class=\"o\">,</span>\n            <span class=\"n\">fvar</span> <span class=\"o\">:=</span> <span class=\"n\">bo</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">m₄</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Given a type `$t`, if there is an assumption `[i : MeasurableSpace $t]`, then try to prove</span>\n<span class=\"sd\">`[BorelSpace $t]` and replace `i` with `borel $t`. Otherwise, add instances</span>\n<span class=\"sd\">`borel $t : MeasurableSpace $t` and `⟨rfl⟩ : BorelSpace $t`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">borelize</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"o\">(</span><span class=\"n\">mkLevelSucc</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">])</span>\n  <span class=\"n\">i</span><span class=\"bp\">?.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">addBorelInstance</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">borelToRefl</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">borelize</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t.forM</span> <span class=\"n\">borelize</span>\n</code></pre></div>",
        "id": 358807920,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1684259375
    },
    {
        "content": "<p>Oh, I'd made misunderstood, only free variables are allowed to appear in <code>fvar</code>.</p>",
        "id": 358895124,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1684300360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Miyahara Kō</span> has marked this topic as resolved.</p>",
        "id": 358895136,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684300364
    }
]