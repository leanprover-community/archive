[
    {
        "content": "<p>I'm not very good at old / new structures, so advice would be appreciated on this issue showing up in CategoryTheory.Bicategory.Functor.</p>\n<p>Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">structure</span> <span class=\"n\">prelax_functor</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"n\">prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">category_theory.prelax_functor.map</span> <span class=\"c1\">-- a thing</span>\n</code></pre></div>\n<p>Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">zipWith</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">PrelaxFunctor.toPrefunctor</span> <span class=\"c1\">-- a thing</span>\n<span class=\"k\">#check</span> <span class=\"n\">Prefunctor.map</span> <span class=\"c1\">-- a thing</span>\n<span class=\"c1\">-- #check PrelaxFunctor.map -- not a thing</span>\n</code></pre></div>\n<p>There are lemmas in the file using <code>PrelaxFunctor.map</code> -- do I just add it and align, or is there a good reason why it's not there?</p>",
        "id": 328031350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676473196
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">PrelaxFunctor.map</span> <span class=\"c1\">-- unknown constant</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PrelaxFunctor.map</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span> <span class=\"c1\">-- invalid declaration name: structure 'PrelaxFunctor' has field 'map'</span>\n</code></pre></div>\n<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 328032493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676473420
    },
    {
        "content": "<p>Is <code>PrelaxFunctor.map</code> there or not??</p>",
        "id": 328032581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676473438
    },
    {
        "content": "<p>I don't completely understand how Lean works here. But if you have <code>F : PrelaxFunctor B C</code>, then <code>F.map</code> is <code>Prefunctor.map F</code>.</p>",
        "id": 328032926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676473521
    },
    {
        "content": "<p>So it sorta inherits <code>Prefunctor.map</code>, for <em>some</em> practical purposes, but as you noticed, it doesn't become an actual declaration or name.</p>",
        "id": 328033211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676473570
    },
    {
        "content": "<p>Ha! I just managed to get <code>to_prefunctor_map {X Y : B} : @Prefunctor.map B _ C _ F X Y = F.map</code> compiling, and now I discover it's a syntactic tautology! So <code>PrelaxFunctor.map</code> is now somehow inaccessible. Are we using these tricks with the <code>ring_hom_class</code> set-up?</p>",
        "id": 328035797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676474159
    },
    {
        "content": "<p>I'm still terribly confused about how funlike is supposed to work in Lean 4.</p>",
        "id": 328037180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676474495
    },
    {
        "content": "<p>I wouldn't be surprised if we'll have to rethink several parts of the algebraic hierarchy in a fundamental way after the port is done</p>",
        "id": 328037387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676474540
    },
    {
        "content": "<p>Oh! mathlib3port has changed the name of the structure field <code>prelax_functor.map₂</code> to <code>PrelaxFunctor.zipWith</code>! Was this intentional?</p>",
        "id": 328041099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676475413
    },
    {
        "content": "<p>I also saw <code>map₂</code> changed to <code>zipWith</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2269\">!4#2269</a> (Topology.UniformSpace.Completion)  for <code>cpkg.map₂</code>. I changed it back to map₂ to make it work.</p>",
        "id": 328042016,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1676475625
    },
    {
        "content": "<p>I mean mathport is a program, so I guess it doesn't do things unintentionally</p>",
        "id": 328042505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676475759
    },
    {
        "content": "<p>On the other hand, the authors of mathport probably didn't intend this...</p>",
        "id": 328043054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676475891
    },
    {
        "content": "<p><code>rg \"#align.*map₂.*zip\"</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"mi\">21</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.length_map₂</span> <span class=\"n\">List.length_zipWith</span>\n\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"mi\">45</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.map₂</span> <span class=\"n\">List.zipWith</span>\n\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"mi\">1947</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.nil_map₂</span> <span class=\"n\">List.nil_zipWith</span>\n<span class=\"mi\">1950</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.map₂_nil</span> <span class=\"n\">List.zipWith_nil</span>\n<span class=\"mi\">1960</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.map₂_flip</span> <span class=\"n\">List.zipWith_flip</span>\n<span class=\"mi\">4441</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.map₂_left_eq_map₂</span> <span class=\"n\">List.map₂Left_eq_zipWith</span>\n<span class=\"mi\">4480</span><span class=\"o\">:</span><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.map₂_right_eq_map₂</span> <span class=\"n\">List.map₂Right_eq_zipWith</span>\n</code></pre></div>",
        "id": 328043202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676475923
    },
    {
        "content": "<p>I'll change zipWith back to map2 for this field.</p>",
        "id": 328043681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676476027
    },
    {
        "content": "<p>I'll look into those <code>#misalign</code>s and PR a fix</p>",
        "id": 328043849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676476065
    },
    {
        "content": "<p>Hmm, those aren't actually misaligned.</p>",
        "id": 328045581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676476453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I guess this is fixed by the upcoming changes to mathport? Is the current version still doing some wacky name-suffix juggling?</p>",
        "id": 328045761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676476504
    },
    {
        "content": "<p>The reason it does this is because of the heuristic it is currently using to guess what dot-notation fields could be referring to. It sees <code>(bla bla).map₂</code> and it says \"I don't know what <code>something.map₂</code> is being referenced, but I do know that <code>list.map₂</code> exists and was renamed to <code>List.zipWith</code> so maybe it's that\"</p>",
        "id": 328156484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676525149
    },
    {
        "content": "<p>The best way to fix this is the more accurate dot-notation name resolution that <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> was working on</p>",
        "id": 328156582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676525196
    }
]