[
    {
        "content": "<p>While porting Algebra.Regular.Basic (<a href=\"https://github.com/leanprover-community/mathlib4/pull/758\">mathlib4#758</a>), <code>to_additive</code> has not been finding the correct translations. I can fix most of the problems by giving an explicit name for the additive version of <code>IsLeftRegular</code> and <code>IsRightRegular</code>, but roughly 9 theorems still fail. Should those be duplicated manually for now or is there an easy fix to <code>to_additive</code>? I'm not really sure how to debug such things.</p>",
        "id": 312532542,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669595065
    },
    {
        "content": "<p>Hi, I think that I was the author of the file.  When I added the <code>to_additive</code> conversion, I also added a dictionary entry to <code>to_additive</code> to convert <code>regular</code> to <code>add_regular</code> and the <code>left/right</code> variants.  I cannot see now how to do a similar change for the mathlib4 version of <code>to_additive</code>, but hopefully this explains why the attribute does not find the right name.</p>",
        "id": 312533230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1669595744
    },
    {
        "content": "<p>I'm on mobile, so I cannot help much, but these are the mathlib lines that I added:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/to_additive.lean#L226-L229\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/to_additive.lean#L226-L229</a></p>",
        "id": 312533882,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1669596402
    },
    {
        "content": "<p>Side note: <span class=\"user-mention\" data-user-id=\"560559\">@Richard Osborn</span> just FYI: you marked <code>Algebra.Regular.Basic</code> with a <code>Yes</code> on the port status wiki. The <code>Yes</code> is reserved for PRs that have already been merged, and marking it too early could cause issues. It's not a big deal, I've already fixed it, I'm just informing.</p>",
        "id": 312536965,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669599425
    },
    {
        "content": "<p>Yea, sorry about that.<br>\nI managed to get the file working (I had originally missed an explicit <code>to_additive</code> translation), so I guess I should close this thread. Don't know if it is worth looking into fixing <code>to_additive</code> when the current bandaid is working so far.</p>",
        "id": 312550964,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669607972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> has marked this topic as resolved.</p>",
        "id": 312550965,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669607974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20More.20to_additive.20issues/near/312533230\">said</a>:</p>\n<blockquote>\n<p>Hi, I think that I was the author of the file.  When I added the <code>to_additive</code> conversion, I also added a dictionary entry to <code>to_additive</code> to convert <code>regular</code> to <code>add_regular</code> and the <code>left/right</code> variants.  I cannot see now how to do a similar change for the mathlib4 version of <code>to_additive</code>, but hopefully this explains why the attribute does not find the right name.</p>\n</blockquote>\n<p>Just pushed that change to <span class=\"user-mention\" data-user-id=\"560559\">@Richard Osborn</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/758\">mathlib4#758</a> :)</p>",
        "id": 312594134,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669630799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> I think the mathlib4 way of doing this is to add a <code>regular -&gt; add, regular</code> translation in <code>nameDict</code> and then commute <code>left, add</code> and <code>right, add</code> in <code>fixAbbreviation</code>.</p>",
        "id": 312595531,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669631272
    },
    {
        "content": "<p>I had that first, but then I thought about tons of other \"regular\"'s in mathlib3 and wasn't sure if that would cause problems</p>",
        "id": 312595863,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669631355
    },
    {
        "content": "<p>like idk \"outer_regular\"/\"weakly_regular_of_finite\" in measure theory, or regular local rings (idk, do they exist in mathlib by now?)...</p>",
        "id": 312596197,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669631474
    },
    {
        "content": "<p>but maybe that's not a problem because in these situations there will not be any <code>to_additive</code> tags?</p>",
        "id": 312596377,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669631531
    },
    {
        "content": "<p>I see... I think you're right, we definitely don't want to replace <code>regular</code> everywhere. Maybe you can add a comment explaining why you decided to use your solution?</p>",
        "id": 312597650,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669631985
    },
    {
        "content": "<p>There are definitely some <code>to_additive</code> tags in statements with some regularity on measures (or at least there could be some)</p>",
        "id": 312597820,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669632032
    },
    {
        "content": "<p>Just to chime in: the existence of \"other <code>regular</code>s\" was also the reason for my dictionary addition in mathlib to span several underscores.</p>",
        "id": 312603283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1669633790
    }
]