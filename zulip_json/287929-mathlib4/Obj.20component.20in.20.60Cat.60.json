[
    {
        "content": "<p>Mathlib has <code>Cat</code> (which I've imported from <code>Category.Cat</code>). How do you access the object component of a particular term <code>t : Cat</code>?</p>",
        "id": 385519691,
        "sender_full_name": "Dean Young",
        "timestamp": 1692211458
    },
    {
        "content": "<p>I think it is exposed via <code>t.α</code>.  More specifically, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Cat#doc\">docs#CategoryTheory.Cat</a> is the type made up of every <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bundled#doc\">docs#CategoryTheory.Bundled</a> <code>t</code> containing a type <code>α : Type u</code> and some category structure <code>str : Category α</code> on <code>α</code>.  So <code>t.α</code> is the carrier (object component) for the category <code>t.str</code>.  (Note, the carrier is not a data field in the class <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Category#doc\">docs#CategoryTheory.Category</a>, but a parameter of <code>Category</code>, which is why <code>Cat</code> and <code>Bundle</code> look the way they do.)</p>",
        "id": 385530322,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692215582
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Cat</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Cat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">t.α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">t.str</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">t.α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 385531493,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692216026
    },
    {
        "content": "<p>I think you're supposed to just cast, which inserts the <code>.α</code> automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Cat</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Cat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 385532934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692216666
    },
    {
        "content": "<p>Thanks this is great.</p>",
        "id": 385554592,
        "sender_full_name": "Dean Young",
        "timestamp": 1692226520
    }
]