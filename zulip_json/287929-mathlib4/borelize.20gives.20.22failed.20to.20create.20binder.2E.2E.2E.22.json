[
    {
        "content": "<p>I'm testing out adding a <code>StandardBorelSpace</code> class whose relationship to <code>PolishSpace</code> is analogous to the relationship between <code>PolishSpace</code> and <code>MetricSpace</code> + <code>CompleteSpace</code>. Using the <code>PolishSpace</code> code as a model, here's my attempt.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Polish</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Constructions.BorelSpace.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">StandardBorelSpace</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">polish</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">UpgradedStandardBorel</span> <span class=\"kd\">extends</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">BorelSpace</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">PolishSpace</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">upgradeStandardBorel</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">UpgradedStandardBorel</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">choose</span> <span class=\"n\">τ</span> <span class=\"n\">hb</span> <span class=\"n\">hp</span> <span class=\"n\">using</span> <span class=\"n\">h.polish</span>\n  <span class=\"n\">constructor</span>\n</code></pre></div>\n<p>The idea is to use <code> letI := upgradeStandardBorel X</code> if one needs to fix a compatible Polish topology on a given Standard Borel Space <code>X</code>. This seems to work for some basic stuff, but when combining the above step with <code>borelize X</code> I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span>\n  <span class=\"n\">borelize</span> <span class=\"n\">α</span> <span class=\"c1\">-- failed to create binder due to failure when reverting variable dependencies</span>\n</code></pre></div>\n<p>I have no idea what this error message means. I can still manually prove <code>i = borel α</code>, which is what I want <code>borelize</code> to be doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">borel</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">BorelSpace.measurable_eq</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 391515836,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694960893
    },
    {
        "content": "<p>I'd be curious to know how this kind of error can be debugged; is there any way to get a stack trace?</p>",
        "id": 391516203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694961130
    },
    {
        "content": "<p>Note you can also use the <code>lift</code> tactic here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CanLift</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">UpgradedStandardBorel</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">prf</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx.polish</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨⟨⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">i</span> <span class=\"n\">to</span> <span class=\"n\">UpgradedStandardBorel</span> <span class=\"n\">α</span> <span class=\"n\">using</span> <span class=\"n\">inferInstance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 391517170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694961723
    },
    {
        "content": "<p>thanks! that does seem to work with borelize. </p>\n<p>Is there a way to do <code>lift i to UpgradedStandardBorel α using inferInstance</code> without a name for the <code>MeasurableSpace</code> instance (since typically we won't have one)?</p>",
        "id": 391533547,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694967196
    },
    {
        "content": "<p>Yes, <code>lift ‹MeasurableSpace α› to UpgradedStandardBorel α using inferInstance</code></p>",
        "id": 391533803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694967309
    },
    {
        "content": "<p>thanks!</p>",
        "id": 391540247,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694971516
    },
    {
        "content": "<p>Just to try and understand the original error, it seems the issue occurs with <code>subst</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">borel</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">BorelSpace.measurable_eq</span>\n  <span class=\"n\">subst</span> <span class=\"n\">i</span> <span class=\"c1\">-- -- failed to create binder due to failure when reverting variable dependencies</span>\n</code></pre></div>",
        "id": 391540461,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694971613
    },
    {
        "content": "<p>actually, though <code>borelize</code> does not give any errors after the <code>lift</code> tactic, it still does not have the desired behavior. For example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">lift</span> <span class=\"n\">i</span> <span class=\"n\">to</span> <span class=\"n\">UpgradedStandardBorel</span> <span class=\"n\">α</span> <span class=\"n\">using</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">borelize</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The type of <code>hs</code> after this is <code>@MeasurableSet α inferInstance s</code> when I'd like it to be <code>@MeasurableSet α (borel α) s</code>.<br>\nHere is a more typical case where the latter type is achieved:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">borelize</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 391551267,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694974545
    },
    {
        "content": "<p>I'm not sure why you need <code>borelize</code> after the <code>lift</code> tactic; isn't <code>BorelSpace α</code> enough, which is now in the context?</p>",
        "id": 391554108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694975709
    },
    {
        "content": "<p>from the docstring for <code>borelize</code>:<br>\n\"if α is a topological space with instances [MeasurableSpace α] [BorelSpace α], then borelize α replaces the former instance by borel α\"<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--have : @MeasurableSet _ (borel α) s := hs</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> type mismatch</span>\n<span class=\"cm\">  hs</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @MeasurableSet α i s : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @MeasurableSet α (borel α) s : Prop</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">borelize</span> <span class=\"n\">α</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 391580947,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694988996
    },
    {
        "content": "<p>The <code>BorelSpace</code> instance is enough to manually get things done by rewriting with <code>BorelSpace.measurable_eq</code> as needed, but one of the main uses of <code>borelize</code> is to make this happen automatically.</p>",
        "id": 391581104,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694989121
    },
    {
        "content": "<p>I guess my question is, why do you need <code>borel α</code> instead of <code>[BorelSpace α]</code>? Are there any lemmas that only work for <code>borel α</code>?</p>",
        "id": 391582508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694990078
    },
    {
        "content": "<p>I don't understand your question. <code>borel α</code> is a sigma algebra on <code>α</code> and <code>BorelSpace α</code> says that <code>‹MeasurableSpace α› = borel α</code>. The <code>borelize</code> tactic is a common way to make use of a <code>[BorelSpace α]</code> hypothesis.</p>",
        "id": 391583701,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694990874
    },
    {
        "content": "<p>Oh maybe I understand your question. For instance when changing topologies, it is useful to be able to make direct reference to <code>@borel α t</code> for various <code>t</code></p>",
        "id": 391584198,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694991229
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/borelize.20gives.20.22failed.20to.20create.20binder.2E.2E.2E.22\">#lean4 &gt; borelize gives \"failed to create binder...\"</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 391584272,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694991304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/287929-mathlib4/topic/borelize.20gives.20.22failed.20to.20create.20binder.2E.2E.2E.22/near/391584198\">said</a>:</p>\n<blockquote>\n<p>For instance when changing topologies, it is useful to be able to make direct reference to <code>@borel α t</code> for various <code>t</code></p>\n</blockquote>\n<p>I guess in this case the analogy is having <code>[@BorelSpace α t]</code> for various <code>t</code>, which I claim is equally useful, but perhaps harder to end up with</p>",
        "id": 391584429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694991490
    },
    {
        "content": "<p>note that it would actually be <code>[@BorelSpace α t m]</code> for various topologies <code>t</code> and sigma algebras <code>m = borel t</code>.</p>",
        "id": 391585061,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694992258
    },
    {
        "content": "<p>which seems to defeat the point</p>",
        "id": 391585087,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694992297
    },
    {
        "content": "<p>You don't ever care that <code>m = borel t</code> by definition though, unless you have a lemma in mind that specifically mentions <code>borel t</code></p>",
        "id": 391586331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694993589
    },
    {
        "content": "<p>It's hard for me to tell if there's an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem here, because your <code>y</code> is currently just <code>sorry</code> in all your examples!</p>",
        "id": 391586440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694993702
    },
    {
        "content": "<p>ok, here's an example currently in mathlib which I believe is a good example of <code>borelize</code> being used in the way I'd like to use it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">_root_.MeasurableSet.analyticSet_image</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PolishSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticSet</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">borelize</span> <span class=\"n\">X</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hf.exists_continuous</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">τ'</span><span class=\"o\">,</span> <span class=\"n\">hle</span><span class=\"o\">,</span> <span class=\"n\">hfc</span><span class=\"o\">,</span> <span class=\"n\">hτ'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">borel</span> <span class=\"n\">_</span> <span class=\"n\">τ'</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:=</span> <span class=\"n\">borel_anti</span> <span class=\"n\">hle</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">analyticSet.image_of_continuous</span> <span class=\"n\">hfc</span>\n</code></pre></div>\n<p>note that <code>borel_anti</code> is a lemma which specifically mentions <code>borel t</code>. Since the conclusion does not mention the topology on <code>X</code>. I'd like to replace <code> [TopologicalSpace X] [PolishSpace X][BorelSpace X]</code> with <code>[h : StandardBorelSpace X]</code>. And add something to the effect of <code>letI := upgradeStandardBorel</code> to the start of the proof to add in instances of  <code> [TopologicalSpace X] [PolishSpace X][BorelSpace X]</code> to the context. I have also tried doing this more directly with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h.polish.choose</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h.polish.choose_spec.1</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h.polish.choose_spec.2</span>\n</code></pre></div>\n<p>Both result in <code>borelize X</code> giving the error message \"failed to create binder due to failure when reverting variable dependencies\".</p>\n<p>btw I am able to prove my version of this lemma without <code>borelize X</code> by doing a rewrite manually.</p>",
        "id": 391587177,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694994430
    },
    {
        "content": "<p>Who ported the <code>borelize</code> tactic is me.<br>\nThe cause of this error seems that <code>i = borel α</code>'s RHS is depends on <code>i</code>.<br>\n<code>borel</code> requires <code>TopologicalSpace</code>, but this is synthesized from <code>i</code> in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span><span class=\"o\">(</span><span class=\"n\">upgradeStandardBorel</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">UpgradedStandardBorel</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So, <code>subst</code> fails. <code>borelize</code> should give better error message in this case. I will open the PR later.</p>",
        "id": 391598512,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1695000872
    },
    {
        "content": "<p>Thanks for the explanation. It seems like there's no hope of using <code>subst</code> in this situation then? For now I will add a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_borel_upgradeStandardBorel</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">‹</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">borel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toTopologicalSpace</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">BorelSpace.measurable_eq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toTopologicalSpace</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toBorelSpace</span>\n</code></pre></div>\n<p>and just rewrite with it when necessary.</p>",
        "id": 391601207,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1695002406
    },
    {
        "content": "<p>It seem hard to use <code>subst</code>.<br>\nBy the way, I could to prove this lemma without <code>borelize</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">_root_.MeasurableSet.analyticSet_image</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">StandardBorelSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AnalyticSet</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">upgradeStandardBorel</span> <span class=\"n\">X</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace.measurable_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hf.exists_continuous</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">τ'</span><span class=\"o\">,</span> <span class=\"n\">hle</span><span class=\"o\">,</span> <span class=\"n\">hfc</span><span class=\"o\">,</span> <span class=\"n\">hτ'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">borel</span> <span class=\"n\">_</span> <span class=\"n\">τ'</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:=</span> <span class=\"n\">borel_anti</span> <span class=\"n\">hle</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">analyticSet.image_of_continuous</span> <span class=\"n\">hfc</span>\n</code></pre></div>",
        "id": 391602022,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1695002956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/287929-mathlib4/topic/borelize.20gives.20.22failed.20to.20create.20binder.2E.2E.2E.22/near/391587177\">said</a>:</p>\n<blockquote>\n<p>btw I am able to prove my version of this lemma without <code>borelize X</code> by doing a rewrite manually.</p>\n</blockquote>\n<p>Yes, this is what I ended up doing as well.</p>",
        "id": 391602349,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1695003181
    },
    {
        "content": "<p>It's still nicer when borelize handles it automatically, but oh well.</p>",
        "id": 391602460,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1695003249
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7231\">#7231</a></p>",
        "id": 391606747,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1695006131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/287929-mathlib4/topic/borelize.20gives.20.22failed.20to.20create.20binder.2E.2E.2E.22/near/391585061\">said</a>:</p>\n<blockquote>\n<p>note that it would actually be <code>[@BorelSpace α t m]</code> for various topologies <code>t</code> and sigma algebras <code>m = borel t</code>.</p>\n</blockquote>\n<p>I think that also means you could introduce a <code>BorelSpace[t]</code> notation.</p>",
        "id": 391623972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695016181
    },
    {
        "content": "<p>See <code>Continuous[t]</code>, <code>IsOpen[t]</code>...</p>",
        "id": 391625003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695016826
    }
]