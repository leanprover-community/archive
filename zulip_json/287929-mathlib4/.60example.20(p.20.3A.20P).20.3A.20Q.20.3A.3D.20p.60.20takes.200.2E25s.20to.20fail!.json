[
    {
        "content": "<p>Observe the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">P</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Q</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>This fails, as you might expect, but it takes around 250ms to do so!</p>",
        "id": 401743302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874750
    },
    {
        "content": "<p>This is obviously not good: after we've imported all of Mathlib, every single failed coercion is going to take at least a quarter of a second to fail. Fixing this is essential.</p>",
        "id": 401743335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874763
    },
    {
        "content": "<p>Why does this happen ?</p>\n<p>Turning on <code>set_option trace.Meta.synthInstance true</code> we start to see the answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeT</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">Q</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CoeT</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeT_2</span> <span class=\"n\">to</span> <span class=\"n\">CoeT</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeT_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeT</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeT</span> <span class=\"n\">to</span> <span class=\"n\">CoeT</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeHTCT_2</span> <span class=\"n\">to</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeHTCT_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeHTC_2</span> <span class=\"n\">to</span> <span class=\"n\">CoeHTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeHTC_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeHTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeOTC_2</span> <span class=\"n\">to</span> <span class=\"n\">CoeOTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeOTC_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeOTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeTC_2</span> <span class=\"n\">to</span> <span class=\"n\">CoeTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeTC_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeTC</span> <span class=\"n\">to</span> <span class=\"n\">CoeTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeOTC</span> <span class=\"n\">to</span> <span class=\"n\">CoeOTC</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeOut_1</span> <span class=\"n\">to</span> <span class=\"n\">CoeOut</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.122</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SetLike.instCoeSortType</span> <span class=\"n\">to</span> <span class=\"n\">CoeSort</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCoeOut</span> <span class=\"n\">to</span> <span class=\"n\">CoeOut</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.138</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.hasCoeToFun</span> <span class=\"n\">to</span> <span class=\"n\">CoeFun</span> <span class=\"n\">P</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.146</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.147</span> <span class=\"n\">a</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SlashInvariantFormClass.toFunLike</span> <span class=\"n\">to</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"n\">UpperHalfPlane</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ℂ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CuspFormClass.toSlashInvariantFormClass</span> <span class=\"n\">to</span> <span class=\"n\">SlashInvariantFormClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.249</span> <span class=\"bp\">?</span><span class=\"n\">m.250</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ModularFormClass.toSlashInvariantFormClass</span> <span class=\"n\">to</span> <span class=\"n\">SlashInvariantFormClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.259</span> <span class=\"bp\">?</span><span class=\"n\">m.260</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CuspForm.instModularFormClass</span> <span class=\"n\">to</span> <span class=\"n\">ModularFormClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.264</span> <span class=\"bp\">?</span><span class=\"n\">m.265</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">DilationClass.toFunLike</span> <span class=\"n\">to</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.274</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">m.275</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">instDilationClass</span> <span class=\"n\">to</span> <span class=\"n\">DilationClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.290</span> <span class=\"bp\">?</span><span class=\"n\">m.291</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SpectralMapClass.toFunLike</span> <span class=\"n\">to</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.310</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">m.311</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">LocallyBoundedMapClass.toFunLike</span> <span class=\"n\">to</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.323</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">m.324</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMapClass.toFunLike</span> <span class=\"n\">to</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.336</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">m.337</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMap.HomotopyLike.toContinuousMapClass</span> <span class=\"n\">to</span> <span class=\"n\">ContinuousMapClass</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">unitInterval</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.380</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.381</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousOrderHomClass.toContinuousMapClass</span> <span class=\"n\">to</span> <span class=\"n\">ContinuousMapClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.402</span> <span class=\"bp\">?</span><span class=\"n\">m.403</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">EsakiaHomClass.toContinuousOrderHomClass</span> <span class=\"n\">to</span> <span class=\"n\">ContinuousOrderHomClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.421</span> <span class=\"bp\">?</span><span class=\"n\">m.422</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousOpenMapClass.toContinuousMapClass</span> <span class=\"n\">to</span> <span class=\"n\">ContinuousMapClass</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">m.449</span> <span class=\"bp\">?</span><span class=\"n\">m.450</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>and then this goes on and on for a long time.</p>",
        "id": 401743392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874780
    },
    {
        "content": "<p>What has happened here?</p>\n<ul>\n<li>Lean knows that it needs to turn <code>p : P</code> into <code>Q</code>, so it initiates a typeclass search for <code>CoeT P p Q</code>.</li>\n<li>After a little bit of \"booting up the coercion system\", we reach the line <code>CoeOut P ?m.138</code>, which expresses \"okay, we need to work out how to coerce a <code>P</code> to <em>something</em>\"</li>\n<li>Using <code>@instCoeOut</code> we can solve this by finding a <code>CoeFun P fun x ↦ (a : ?m.146) → ?m.147 a</code>, that is, is we can find a way to turn a <code>P</code> into a function type (with unknown domain and codomain!).<ul>\n<li>Note this of course doesn't match <code>Q</code>, but by this stage in the coercion search we're looking for transitive instances, so maybe(?) later we will find a way to coerce such a function type into a <code>Q</code>!</li>\n</ul>\n</li>\n<li>Now using <code>@FunLike.hasCoeToFun</code> to suffices to find any <code>FunLike P ?m ?m</code>.</li>\n<li>After that, the typeclass search goes haywire!</li>\n</ul>",
        "id": 401743416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874788
    },
    {
        "content": "<p>Expanding the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.hasCoeToFun</span> <span class=\"n\">to</span> <span class=\"n\">CoeFun</span> <span class=\"n\">P</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.146</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.147</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n</code></pre></div>\n<p>we get the following useful explanation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CoeFun</span> <span class=\"n\">P</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.146</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.147</span> <span class=\"n\">a</span> <span class=\"bp\">≟</span> <span class=\"n\">CoeFun</span> <span class=\"n\">P</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.146</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.147</span> <span class=\"n\">a</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">FunLike</span> <span class=\"n\">P</span> <span class=\"n\">_tc.2</span> <span class=\"n\">_tc.3</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">ZeroHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">AddHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">OneHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">EmbeddingLike.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">RelHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">StarHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SMulHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">TopHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">BotHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">InfHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonnegHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SubadditiveHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SubmultiplicativeHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulLEAddHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonarchimedeanHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sSupHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sInfHomClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">ContinuousMapClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">LocallyBoundedMapClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SpectralMapClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">DilationClass.toFunLike</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SlashInvariantFormClass.toFunLike</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There are lots of classes with an instance field <code>toFunLike</code>, so we need to search them all.</p>",
        "id": 401743473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874815
    },
    {
        "content": "<p>Even worse, many of these are at the bottom of large hierarchies of even more structured <code>FunLike</code> classes, so we go search those too.</p>",
        "id": 401743503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874826
    },
    {
        "content": "<p>All this adds up to an immense, and ultimately doomed, typeclass search problem for <em>any</em> coercion problem.</p>",
        "id": 401743520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874833
    },
    {
        "content": "<p>So where did this all go wrong? Two candidates:</p>\n<ul>\n<li>Perhaps we \"should have known\" that <code>@instCoeOut</code> was a bad idea, as coercing <code>P</code> to a function type is unlikely to be particularly helpful, because we won't then be able to coerce that to <code>Q</code>. But it seems hard to know how to encode that knowledge into the coercion system.</li>\n<li>Perhaps all these <code>FunLike</code> instances are a bad idea, given <code>CoeFun P fun x ↦ (a : ?m.146) → ?m.147 a</code> is going to turn up in <em>every</em> coercion search. But we depend pretty heavily on these in Mathlib, and it will be very difficult to change now. (But perhaps we should?)</li>\n</ul>",
        "id": 401743536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874841
    },
    {
        "content": "<p>A third solution is a complete hack, but wildly successful:</p>\n<ul>\n<li>Disable the instance from <code>CoeFun</code> to <code>CoeOut</code>, replacing it with one to <code>CoeOTC</code>. <a href=\"https://github.com/leanprover/lean4/pull/2869\">lean4#2869</a></li>\n<li>This \"solves the problem\": <code>#time example (p : P) : Q := p</code> drops down to 20ms (from 250ms).</li>\n<li>It only requires some small changes in Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/pull/8378\">#8378</a>, and none in Lean.</li>\n<li>It is a very significant performance boost across all of Mathlib:<ul>\n<li>4.5% reduction in instruction count</li>\n<li>3.8% reduction in wall-clock</li>\n<li>12% reduction in typeclass inference</li>\n</ul>\n</li>\n</ul>\n<p>Unfortunately as far as I can see it is theoretically unjustified?</p>",
        "id": 401743555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874849
    },
    {
        "content": "<p>So, for discussion:</p>\n<ul>\n<li>Is there some way to avoid have <code>CoeT P p Q</code> turn into <code>CoeOut P ?m</code>?</li>\n<li>Can we change the design of <code>FunLike</code> (or stop using <code>FunLike</code>) to avoid this?</li>\n<li>Can someone come up with a post-hoc justification for my hack?</li>\n</ul>",
        "id": 401743567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874857
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> as they both have lots of expertise on coercions!</p>",
        "id": 401743575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699874860
    },
    {
        "content": "<p>An alternative that is probably going to take a lot of work is to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetLike#doc\">docs#SetLike</a> → <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OneMemClass#doc\">docs#OneMemClass</a> and unbundle <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike#doc\">docs#FunLike</a> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZeroHomClass#doc\">docs#ZeroHomClass</a>. All the <code>FunLike</code> instances should then be defined on concrete types and therefore easily rejected by the discrimination tree.</p>",
        "id": 401744069,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699875050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/401743555\">said</a>:</p>\n<blockquote>\n<ul>\n<li>It only requires some small changes in Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/pull/8378\">#8378</a>, and none in Lean.</li>\n</ul>\n</blockquote>\n<p>The only extra changes are in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8378/commits/58897e0e62467362789789a1d4d44fb7b34a6d7b\">this commit</a> and the rest in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8378\">#8378</a> is for other Lean changes, right?</p>",
        "id": 401744319,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699875150
    },
    {
        "content": "<p>Yes, that's right. I've just changed the base of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8378\">#8378</a> so it shows a meaningful diff.</p>",
        "id": 401744437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699875206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/401744069\">said</a>:</p>\n<blockquote>\n<p>to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SetLike#doc\">docs#SetLike</a> → <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OneMemClass#doc\">docs#OneMemClass</a> and unbundle <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike#doc\">docs#FunLike</a> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZeroHomClass#doc\">docs#ZeroHomClass</a>.</p>\n</blockquote>\n<p>I'm afraid I don't understand what you mean here, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>. Could you spell it out more?</p>",
        "id": 401744693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699875314
    },
    {
        "content": "<p>Instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ZeroHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The proposition that the function preserves 0 -/</span>\n  <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>we would have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ZeroHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The proposition that the function preserves 0 -/</span>\n  <span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 401745010,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699875435
    },
    {
        "content": "<p>For comparison, according to <code>set_option profiler true</code> we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000463</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SetLike.instCoeSortType</span> <span class=\"n\">to</span> <span class=\"n\">CoeSort</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000355</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CoeSort</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">CoeSort</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.128</span><span class=\"o\">)</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000036</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">SetLike</span> <span class=\"n\">P</span> <span class=\"n\">_tc.1</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>so indeed Lean can successfully and quickly avoid crawling this entire hierarchy when it's unbundled like for <code>SetLike</code>. (Although we should take into account that <code>SetLike</code> has a smaller hierarchy than <code>FunLike</code>.)</p>",
        "id": 401745586,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699875712
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover/lean4/pull/2869\">lean4#2869</a>, can you give a contrived example of a coercion that used to be legal but now isn't?</p>",
        "id": 401745809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699875820
    },
    {
        "content": "<p>Presumably <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s suggestion comes at the cost of slowing down uses of the <code>map_zero</code> lemma through mathlib, though perhaps not significantly</p>",
        "id": 401746076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699875925
    },
    {
        "content": "<p>I don't expect significant slowdowns based on Lean 3 experience but we'll see.</p>",
        "id": 401755968,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699879803
    },
    {
        "content": "<p>I can try and make a start at the unbundling but probably I can't finish it. Should I go for it and let you take over when I have to go?</p>",
        "id": 401756135,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699879855
    },
    {
        "content": "<p>I don't have time to try that refactor right now, but maybe Scott does</p>",
        "id": 401756314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699879924
    },
    {
        "content": "<p>By the way, did I get it right that there are no extra steps needed to interface this refactor with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a> / <a href=\"https://github.com/leanprover-community/mathlib4/pull/8185\">#8185</a>?</p>",
        "id": 401759782,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699881071
    },
    {
        "content": "<p>Not sure.</p>",
        "id": 401761323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699881650
    },
    {
        "content": "<p>Work in progress: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a>. It's about as painful as I expected. In about half an hour I'll return and fix more things. One feature request: is there a way to see every class that currently <code>extends</code> either <code>FunLike</code> or <code>EquivLike</code>?</p>",
        "id": 401770418,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699884501
    },
    {
        "content": "<p>(And if so, can we sort them by the import order, so we can fix them in order?)</p>",
        "id": 401770604,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699884540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/401759782\">said</a>:</p>\n<blockquote>\n<p>By the way, did I get it right that there are no extra steps needed to interface this refactor with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a> / <a href=\"https://github.com/leanprover-community/mathlib4/pull/8185\">#8185</a>?</p>\n</blockquote>\n<p>I think we should just merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/8185\">#8185</a>; I think we're waiting for @negiizhao to approve Matt's re-do, but I don't think that's really necessary; we can just slap a Co-authored-by on it to recognize that @negiizhao  did most of the work</p>",
        "id": 401774056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699885486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8185\">#8185</a> has been closed. What did you mean?</p>",
        "id": 401900288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699933945
    },
    {
        "content": "<p>I mean reopen it as a successor to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a>.</p>",
        "id": 401924275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699947988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/401770418\">said</a>:</p>\n<blockquote>\n<p>Work in progress: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a>. It's about as painful as I expected. In about half an hour I'll return and fix more things. One feature request: is there a way to see every class that currently <code>extends</code> either <code>FunLike</code> or <code>EquivLike</code>?</p>\n</blockquote>\n<p>Turning back to this for a few hours today: I'm having trouble getting <code>simp</code> to apply <code>map_smulₛₗ</code>.</p>",
        "id": 401982891,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699967350
    },
    {
        "content": "<p>Actually, looks like I am required to make the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SMulHomClass#doc\">docs#SMulHomClass</a> hierarchy unbundled <code>Prop</code>s too, otherwise multiple inheritance with e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulSemiringActionHomClass#doc\">docs#MulSemiringActionHomClass</a> extending both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHomClass#doc\">docs#DistribMulActionHomClass</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomClass#doc\">docs#RingHomClass</a> will fail with a <code>(kernel) declaration has metavariables MulSemiringActionHomClass.toRingHomClass</code>. But that doesn't seem to happen with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SemiLinearMapClass%21#doc\">docs#SemiLinearMapClass!</a></p>",
        "id": 401983500,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699967568
    },
    {
        "content": "<p>Thanks for the rubber ducking :D</p>",
        "id": 401983862,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699967685
    },
    {
        "content": "<p>By the way, I decided to define an <code>abbrev NDFunLike</code> for Non-Dependent FunLike because I was getting tired of writing <code>fun _ =&gt; β</code> all the time.</p>",
        "id": 402000929,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699972953
    },
    {
        "content": "<p>Pushed some extra fixes, that's about as far as I can get today. There are still a few occurences of <code>extends FunLike</code> remaining in <code>Topology</code> and probably also some scattered <code>extends EquivLike</code>, haven't checked those closely yet. And I can't figure out how to unbundle <code>SemiLinearMapClass</code>, but apart from that it's just adding the missing <code>NDFunLike</code> hypotheses.</p>",
        "id": 402000933,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1699972955
    },
    {
        "content": "<p>Thanks very much for this <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>! I'm hopeful this will be a good change. :-)</p>",
        "id": 402088503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700004029
    },
    {
        "content": "<p>I wonder if instead of <code>NDFunLike</code>, we should rename the current <code>FunLike</code> to <code>DFunLike</code>, and then leave the abbreviation <code>FunLike</code> for the non-dependent version.</p>",
        "id": 402088566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700004063
    },
    {
        "content": "<p>(I like making the friendly and commonly used one seem friendly and easy to type, and the complicated one complicated to type!)</p>",
        "id": 402088618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700004091
    },
    {
        "content": "<p>The downside of that approach is that the coercion is called <code>DFunLike.coe</code></p>",
        "id": 402101333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700009130
    },
    {
        "content": "<p>Well we already have <code>HAdd.hAdd</code> etc.</p>",
        "id": 402127032,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700018428
    },
    {
        "content": "<p>I have no idea how to deal with this failure in Data.Sign:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sign_eq_one_iff</span> <span class=\"o\">:</span> <span class=\"n\">sign</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sign_pos</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hn</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sign_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- errors</span>\n</code></pre></div>\n<p>the error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_false'</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">noConfusion</span> <span class=\"n\">h</span>\n<span class=\"n\">argument</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">noConfusion</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">noConfusionType</span> <span class=\"n\">False</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"bp\">▶</span> <span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">331</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_false'</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">noConfusion</span> <span class=\"n\">h</span>\n<span class=\"n\">argument</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">noConfusion</span> <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">noConfusionType</span> <span class=\"n\">False</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The <code>trace.Meta.isDefEq</code> output doesn't help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">SignType.noConfusionType</span> <span class=\"n\">False</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">p</span> <span class=\"bp\">=?=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.noConfusionType</span> <span class=\"n\">False</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"n\">noConfusionTypeEnum</span> <span class=\"n\">SignType.toCtorIdx</span> <span class=\"n\">False</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"n\">Decidable.casesOn</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n              <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">False</span> <span class=\"bp\">=?=</span> <span class=\"n\">Decidable.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">instDecidableEqNat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">SignType.toCtorIdx</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 402278019,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700064455
    },
    {
        "content": "<p>There is nothing resembling FunLike even mentioned at this point in this file, but <code>split_ifs</code> consistently fails in the same way.</p>",
        "id": 402278329,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700064529
    },
    {
        "content": "<p>Does the normal split work?</p>",
        "id": 402288953,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700067593
    },
    {
        "content": "<p>does a <code>dsimp at h</code> fix it?</p>",
        "id": 402290439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700068003
    },
    {
        "content": "<p><code>split at h</code> fails with the same message, <code>dsimp only at h</code> followed by <code>split</code>(<code>_ifs</code>) does the right thing.</p>",
        "id": 402291703,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700068424
    },
    {
        "content": "<p>Aha! The difference is in the type: before <code>dsimp</code> the type is <code>@ite ((fun x ↦ SignType) a) (a &lt; 0) (inst✝ a 0) (-1) 0 : (fun x ↦ SignType) a</code>, afterwards it's <code>@ite SignType (a &lt; 0) (inst✝ a 0) (-1) 0 : SignType</code>.</p>",
        "id": 402291969,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700068514
    },
    {
        "content": "<p>Yes, <code>split_ifs</code> gets confused without beta reduction</p>",
        "id": 402294341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700069371
    },
    {
        "content": "<p>There are a few porting notes about this, though <a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a> fixes most of them</p>",
        "id": 402294405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700069396
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7905\">#7905</a> fixes these too! (And merges cleanly, as you predicted.)</p>",
        "id": 402485705,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700145825
    },
    {
        "content": "<p>Fixed a few more things. Currently a tricky issue is <a href=\"https://tqft.net/mathlib4files/Mathlib/Algebra/Category/MonCat/Colimits\">file#Mathlib/Algebra/Category/MonCat/Colimits</a>.lean, where it doesn't see that the codomain of a hom in the category of monoids is defeq to the expected one, so it fails to infer the <code>MonoidHomClass</code> instance.</p>",
        "id": 402505124,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700150910
    },
    {
        "content": "<p>The fact that Quiver.Hom (and CategoryTheory.Obj) is not reducible seems to be a disaster for the category theory library in terms of <code>simp</code> and TC synthesis</p>",
        "id": 402505844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700151143
    },
    {
        "content": "<p>Or at least, the fact that we rely on the fact they're defeq despite that</p>",
        "id": 402506017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700151195
    },
    {
        "content": "<p>I think a better approach would be:</p>\n<ul>\n<li>Define a struct like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuadraticModuleCat.Hom#doc\">docs#QuadraticModuleCat.Hom</a> for every category theory morphism</li>\n<li>Change <code>Category</code> to use an outparam for <code>Hom</code>, so that there is no more <code>Quiver.Hom</code> that hides <code>MyCat.Hom</code></li>\n</ul>",
        "id": 402506278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700151271
    },
    {
        "content": "<p>But a core change to reducibility and Type-valued fields in structures might also be sensible</p>",
        "id": 402506331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700151290
    },
    {
        "content": "<p>I guess that would resolve <a href=\"https://github.com/leanprover-community/mathlib4/pull/8257#issuecomment-1800402251\">this issue</a>?</p>\n<blockquote>\n<p>Lean can't quite identify the coeSort of <code>{ α := FundamentalGroupoid X } : Grpd</code> with <code>FundamentalGroupoid X</code> reducibly</p>\n</blockquote>",
        "id": 402510162,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700152407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, how is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> going? If there's something I can do to help please let me know, but I'm hesitant to jump in.</p>",
        "id": 403083280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700449519
    },
    {
        "content": "<p>Sorry, I should have been clearer that I wouldn't have any time these past days. The real problems are in tediously going through every file and making the \"obvious\" fixes (adding in missing <code>NDFunLike F A B</code> variables and instances). There are a few cases that need extra attention: <code>map_smulₛₗ</code> seems to only work when <code>SemiLinearHomClass</code> directly extends <code>FunLike</code>, so I propose leaving that part of the hierarchy to a follow-up, and there are a few cases where types are not unifying, and we need extra type ascriptions or implicit parameters. These are still straightforward enough. So in conclusion: I would appreciate any fixes very much!</p>",
        "id": 403131339,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700473601
    },
    {
        "content": "<p>I hope to come back to the PR this afternoon (in about 4 hours).</p>",
        "id": 403132314,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700473939
    },
    {
        "content": "<p>I'm going to spend a few hours now looking at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a>, starting with the category theory issue.</p>",
        "id": 403183140,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700490950
    },
    {
        "content": "<p>Pushed another batch of fixes. Again a few cases where we have to insert extra type ascriptions but nothing major.</p>",
        "id": 403222529,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700504404
    },
    {
        "content": "<p>I think I won't look at this until next Wednesday (in 40 hours or so), any more help is welcome :)</p>",
        "id": 403222610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700504445
    },
    {
        "content": "<p>Pushed a few more fixes, but we're only at 2500/3500 files compiling so far... Please help if you have some time!</p>",
        "id": 403623643,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700669261
    },
    {
        "content": "<p>We're getting near the end, but the errors are more concerning.</p>",
        "id": 403816609,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700755631
    },
    {
        "content": "<p>For example, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386/commits/59462874b4cdd712e103fff094bd9183edc8c2ce\">commit 59462874</a> I had to lower the priority of a couple instances to avoid timeouts, and it looks like this is happening more as the changes reach the ends of the hierarchy. I'm not quite sure why this is failing now and didn't fail before...</p>",
        "id": 403816927,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700755776
    },
    {
        "content": "<p>Hi, I have a related example where some basic examples are slow, but I don't know if it's relevant.</p>",
        "id": 403920045,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700813944
    },
    {
        "content": "<p>Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"c\">/-</span><span class=\"cm\"> open Nat Finset -/</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The trace gives <code>0.011862s</code>. However, if you replace the open with the commented line, then suddenly it jumps to <code>1.639691s</code>, with the following trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">639691</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">632192</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.7</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">632166</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.7</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"n\">binrel</span><span class=\"bp\">%</span> <span class=\"n\">Eq</span><span class=\"bp\">✝</span> <span class=\"o\">((</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">545649</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">545125</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">adding</span> <span class=\"n\">coercion</span> <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.13</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">255616</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeFun</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.16</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">289344</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeT</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.13</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">548260</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">547021</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">adding</span> <span class=\"n\">coercion</span> <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.52563</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">265087</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeFun</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.52566</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">281721</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeT</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.52563</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">533903</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">532443</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">adding</span> <span class=\"n\">coercion</span> <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.105047</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">249188</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeFun</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.105050</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">283089</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CoeT</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.105047</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, by replacing</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- import Mathlib.Data.ZMod.Basic</span>\n<span class=\"gi\">+ import Mathlib.Data.Nat.Choose.Basic</span>\n<span class=\"gi\">+ import Mathlib.Data.Finset.Basic</span>\n</code></pre></div>\n<p>It drops to 0.2s again. Is it related to this thread?</p>",
        "id": 403920253,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700814046
    },
    {
        "content": "<p>Also this: <a href=\"/user_uploads/3121/o_g8NEQ7N6CUrXlov4NZIuq_/Screenshot-2023-11-24-at-08.36.52.png\">Screenshot-2023-11-24-at-08.36.52.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/o_g8NEQ7N6CUrXlov4NZIuq_/Screenshot-2023-11-24-at-08.36.52.png\" title=\"Screenshot-2023-11-24-at-08.36.52.png\"><img src=\"/user_uploads/3121/o_g8NEQ7N6CUrXlov4NZIuq_/Screenshot-2023-11-24-at-08.36.52.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> set_option profiler true -/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403922965,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700815226
    },
    {
        "content": "<p>Looks likely. The slow  <code>CoeFun Nat ?m</code> in the trace is the same, but you'd have to unfold that further to be certain it's getting trapped in the FunLike hierarchy.</p>",
        "id": 403924718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700815954
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span>  found that this is caused by <code>open Finset</code> introducing <code>Finset.choose</code> to the scope, so <code>open Finset hiding choose</code> fixes the problem. However, the behaviour is probably still unintended.</p>",
        "id": 403925793,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700816419
    },
    {
        "content": "<p>I was planning to get a first working version this week, but things got in the way. I won't be able to work on this in the coming days (until Monday probably).</p>",
        "id": 403997386,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700844655
    },
    {
        "content": "<p>It is indeed Monday and I indeed have a couple of hours to look at this again!</p>",
        "id": 404420231,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701094262
    },
    {
        "content": "<p>Okay, I think I figured out why the new timeouts are happening. It's because we go from instances like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">FooHom.toBarHom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FooHom</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BarHom</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>to instances like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">FooHom.toBarHom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FooHom</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BarHom</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>So the context when synthesizing looks very different. Before we'd be looking for an instance <code>BarHom F ?A ?B</code>, apply <code>FooHom.toBarHom</code> and postpone the <code>Foo</code> goals till we reach a concrete <code>FooHom</code> instance and <code>?A</code> and <code>?B</code> are assigned. Now we have the <code>FunLike</code> instance already, so the goals look like <code>BarHom F A B</code>, so each step creates new subgoals: <code>Foo A</code> and <code>Foo B</code> in this case. And each step in the inheritance hierarchy would create new subgoals (and often slightly more general than before, so you can't directly reuse previous solutions), so this becomes slower and slower until we hit timeouts.</p>",
        "id": 404440825,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701100410
    },
    {
        "content": "<p>Reordering the parameters won't work, since <code>FooHom</code> depends on <code>Foo</code>. So maybe we should try marking the <code>Foo</code>s as (<code>semi</code>)<code>outParam</code>s?</p>",
        "id": 404441162,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701100515
    },
    {
        "content": "<p>Hmm, no, that would only help at the start of the search, but here we're already underway. So maybe make <code>A</code> and <code>B</code> an <code>outParam</code> even though <code>FunLike</code> already supplies them?</p>",
        "id": 404441945,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701100779
    },
    {
        "content": "<p>Also no, then the first goal after applying <code>toBarHom</code> is <code>FunLike F A B</code> and the <code>Foo</code>s get precedence over the <code>FooHom</code>.</p>",
        "id": 404442374,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701100888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404442374\">said</a>:</p>\n<blockquote>\n<p>Also no, then the first goal after applying <code>toBarHom</code> is <code>FunLike F A B</code> and the <code>Foo</code>s get precedence over the <code>FooHom</code>.</p>\n</blockquote>\n<p>What does this mean? Would the \"goal state\" be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|-</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"bp\">|-</span> <span class=\"n\">Foo</span> <span class=\"n\">A</span>\n<span class=\"bp\">|-</span> <span class=\"n\">Foo</span> <span class=\"n\">B</span>\n<span class=\"bp\">|-</span> <span class=\"n\">FooHom</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>where the order is order of typeclass search?</p>",
        "id": 404444520,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701101525
    },
    {
        "content": "<p>Yes, that's what it looks like (although I can't find an explicit listing of these goals).</p>",
        "id": 404444666,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701101577
    },
    {
        "content": "<p>Okay, it looks like we can generally get away with making (some of?) the problematic subgoals into implicits. Have to be a bit careful with <code>outParam</code>s but I think the idea is sound.</p>",
        "id": 404450400,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701103442
    },
    {
        "content": "<p>Now <code>Analysis.Complex.Basic</code> builds without disabling any instances!</p>",
        "id": 404454730,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701104795
    },
    {
        "content": "<p>And it turns out I didn't need to do the unbundling that I tried before, the implicit params are found anyway <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 404462084,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701107514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404450400\">said</a>:</p>\n<blockquote>\n<p>Okay, it looks like we can generally get away with making (some of?) the problematic subgoals into implicits. Have to be a bit careful with <code>outParam</code>s but I think the idea is sound.</p>\n</blockquote>\n<p>so the pattern is now <code>.toBarHom (F A B) {Foo A} {Foo B} [FunLike] [FooHom]?</code></p>",
        "id": 404464341,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701108292
    },
    {
        "content": "<p>I wonder if this is linked to Lean4's insistence to resynthesise pretty much every instance ever to have existed</p>",
        "id": 404464380,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701108312
    },
    {
        "content": "<p>Note this approach is somewhat fragile, and fails for <code>{CommFoo A} [FooHom F A A]</code></p>",
        "id": 404486717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701117894
    },
    {
        "content": "<p>Or even <code>{Monoid M} [MonoidHomClass F M M]</code>, since MonoidHom is not actually about monoids!</p>",
        "id": 404486779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701117929
    },
    {
        "content": "<p>Can I ask for help with the <code>simp</code> failure in <code>Mathlib/Topology/Sheaves/SheafCondition/UniqueGluing.lean</code> in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a>? It only says \"<code>simp</code> made no progress\" but I don't know enough about this corner of the library to say what progress should look like. <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span></p>",
        "id": 404616546,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701172014
    },
    {
        "content": "<p>Can be fixed by adding <code>repeat rw [← comp_apply]</code> before each of the simp failures. This is a regression though, and maybe someone should investigate what happened precisely?</p>",
        "id": 404618793,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701172529
    },
    {
        "content": "<p>Note to self: I need to undo some of the choices I made right at the start: <code>FooHomClass F A B</code> should have <code>A</code> and <code>B</code> as <code>outParam</code> even though they are filled in by <code>FunLike</code>: we have a few cases, especially in the category theory library, where we look for <code>FooHomClass (FooHom F A B) A' B'</code> which now fails because <code>A'</code> and <code>B'</code> don't match <code>A</code> and <code>B</code> despite being defeq if we try hard enough.</p>",
        "id": 404670305,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701188390
    },
    {
        "content": "<p>How many is \"a few\"? This is something that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has been telling us to fix for a while in the category theory library.</p>",
        "id": 404739563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701215185
    },
    {
        "content": "<p>I would like to avoid <code>outParam</code> where possible, certainly!</p>",
        "id": 404739631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701215223
    },
    {
        "content": "<p>The occurrences I found are:</p>\n<ul>\n<li><code>Mathlib/Algebra/Category/AlgebraCat/Limits.lean</code></li>\n<li><code>Mathlib/Algebra/Category/ModuleCat/Basic.lean</code></li>\n<li><code>Mathlib/Algebra/Category/MonCat/Colimits.lean</code></li>\n<li><code>Mathlib/Topology/Sheaves/Operations.lean</code></li>\n</ul>",
        "id": 404823795,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701250982
    },
    {
        "content": "<p>I'd just like to note that this (or at least I imagine it's this?) affects \"nontrivial\" cases too, and so it would be good to benchmark this too! e.g. using Multiset.card currently takes ~150ms+ and ~8000 heartbeats to find the right CoeT when applied to a multiset, meaning it's actually quite slow to use</p>",
        "id": 405339126,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701428898
    },
    {
        "content": "<p>e.g. this (contrived) example requires a heartbeat bump:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">Multiset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405339409,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701429017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405339126\">said</a>:</p>\n<blockquote>\n<p>I'd just like to note that this (or at least I imagine it's this?) affects \"nontrivial\" cases too, and so it would be good to benchmark this too! e.g. using Multiset.card currently takes ~150ms+ and ~8000 heartbeats to find the right CoeT when applied to a multiset, meaning it's actually quite slow to use</p>\n</blockquote>\n<p>That makes sense, I can imagine the <code>FunLike.coeToFun</code> instance might take precedence over the transitive instances so indeed we might be hitting the slow path each time.</p>",
        "id": 405406367,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701451079
    },
    {
        "content": "<p>I'm not so sure anymore that <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> is the right way to go, as I go down the import hierarchy it seems the timeouts are getting worse and harder to fix. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 405406656,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701451161
    },
    {
        "content": "<p>Is it worth trying <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's old fix too?</p>",
        "id": 405410040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701452372
    },
    {
        "content": "<p>My old fix was pretty hacky, and requires a hard-to-justify change to core. I thought of it as a demonstration that there is a significant performance problem, but not really as a fix.</p>",
        "id": 405457804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701475538
    },
    {
        "content": "<p>Is there any other ideas thus far?</p>",
        "id": 405460544,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701477142
    },
    {
        "content": "<p>Okay, I had one whilst driving - what about we make every concrete type provide a coercion, and then make FunLike take in a CoeFun argument?</p>",
        "id": 405650463,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701602809
    },
    {
        "content": "<p>We can still keep around FunLike.coe as defeq to the coercion, but it isn't provided by the instance.</p>",
        "id": 405650580,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701602835
    },
    {
        "content": "<p>eric's idea would also help for situations like <a href=\"https://github.com/leanprover-community/mathlib4/pull/8304\">#8304</a> where we can't provide a <code>FunLike</code> instance in the general case (the coercion from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Combinatorics.Line#doc\">docs#Combinatorics.Line</a> to functions is not injective if the index type is a singleton).</p>",
        "id": 405658275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701604528
    },
    {
        "content": "<p>wow, I've already run into a stumbling block - why does this fail?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The coercion from `F` to a function. -/</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n  <span class=\"sd\">/-- The coercion aligns with the field `coe` of `FunLike`. -/</span>\n  <span class=\"n\">coe_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"sd\">/-- The coercion to functions must be injective. -/</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">coe</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fun_like</span> <span class=\"n\">FunLike</span>\n\n<span class=\"c1\">-- https://github.com/leanprover/lean4/issues/2096</span>\n<span class=\"n\">compile_def</span><span class=\"bp\">%</span> <span class=\"n\">FunLike.coe</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Dependent</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### `FunLike F α β` where `β` depends on `a : α` -/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FunLike</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it's fine if I say <code>i : @FunLike F α β h</code> :/</p>",
        "id": 405709965,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701647361
    },
    {
        "content": "<p>does anyone with better knowledge of TC understand why this is failing?</p>",
        "id": 405814329,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701693204
    },
    {
        "content": "<p>effectively, it seems that if I make <code>FunLike</code> take <code>CoeFun</code>, it won't actually find the required instance when I write <code>[i : FunLike F α β]</code>, even if it is in the context.</p>",
        "id": 405814437,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701693247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405650463\">said</a>:</p>\n<blockquote>\n<p>Okay, I had one whilst driving - what about we make every concrete type provide a coercion, and then make FunLike take in a CoeFun argument?</p>\n</blockquote>\n<p>Don't have a lot of time to check this right now, but my suspicion is that this won't substantially change the timeout issue: I think the diagnosis here: <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825</a> still applies.</p>",
        "id": 405844322,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701702390
    },
    {
        "content": "<p>I was trying to come up with strategies to rescue the existing work by delaying the slow-to-fail <code>[Foo A] [Foo B]</code> instances after the fast-to-fail <code>[FooHom F A B]</code>. I'm seeing that instance goals created through unification seem to have a lower priority than instance goals created by parameters to the instance. For example, going from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarAlgHomClass#doc\">docs#StarAlgHomClass</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHomClass#doc\">docs#AlgHomClass</a> will unify the parameters <code>[CommSemiring R] [Semiring A] [Algebra R A] [Semiring B] [Algebra R B]</code> with <code>[CommSemiring R] [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]</code> and has new parameters <code>[Star A]  [Star B]</code>. And it's exactly those <code>Star</code> instances that Lean searches for before <code>StarAlgHomClass</code> fails. So maybe we can insert an <code>id</code> in a strategic place to delay the slow goals?</p>",
        "id": 405845543,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701702741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405844322\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405650463\">said</a>:</p>\n<blockquote>\n<p>Okay, I had one whilst driving - what about we make every concrete type provide a coercion, and then make FunLike take in a CoeFun argument?</p>\n</blockquote>\n<p>Don't have a lot of time to check this right now, but my suspicion is that this won't substantially change the timeout issue: I think the diagnosis here: <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/404440825</a> still applies.</p>\n</blockquote>\n<p>I think this sidesteps the problem by making these searches not happen whenever we do a search for a <code>CoeFun</code> instance</p>",
        "id": 405865203,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701707541
    },
    {
        "content": "<p>That was my hope, at least.</p>",
        "id": 405865237,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701707550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405845543\">said</a>:</p>\n<blockquote>\n<p>I was trying to come up with strategies to rescue the existing work by delaying the slow-to-fail <code>[Foo A] [Foo B]</code> instances after the fast-to-fail <code>[FooHom F A B]</code>. I'm seeing that instance goals created through unification seem to have a lower priority than instance goals created by parameters to the instance. For example, going from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarAlgHomClass#doc\">docs#StarAlgHomClass</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHomClass#doc\">docs#AlgHomClass</a> will unify the parameters <code>[CommSemiring R] [Semiring A] [Algebra R A] [Semiring B] [Algebra R B]</code> with <code>[CommSemiring R] [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]</code> and has new parameters <code>[Star A]  [Star B]</code>. And it's exactly those <code>Star</code> instances that Lean searches for before <code>StarAlgHomClass</code> fails. So maybe we can insert an <code>id</code> in a strategic place to delay the slow goals?</p>\n</blockquote>\n<p>What do you mean by inserting <code>id</code>? I'm not sure how you could make those <code>Star A/B</code> instance goals be looked for only through unification, without hacky behaviour anyawys</p>",
        "id": 405865791,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701707701
    },
    {
        "content": "<p>After about a hundred ugly hacks, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> is compiling on my machine!</p>",
        "id": 406325620,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701875331
    },
    {
        "content": "<p>The test case at the top of this thread now takes 50-150ms on my machine (500-600ms before) <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 406327252,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701875820
    },
    {
        "content": "<p>My plan is to wait for the PR to build, benchmark it, then see how to deal with the ugly hacks.</p>",
        "id": 406328097,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701876056
    },
    {
        "content": "<p>You strongly think my approach is not worth investigating in parallel?</p>",
        "id": 406328295,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701876099
    },
    {
        "content": "<p>I strongly suspect that either approach will run into the same issues, so I think my version is better mostly because it has progressed further. Although I should actually test out your approach before making any more claims :)</p>",
        "id": 406329434,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701876385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/405709965\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This seems to only work as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with assigning an explicit type for <code>β</code> and actually naming the argument <code>a</code>.</p>",
        "id": 406331208,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701876852
    },
    {
        "content": "<p>d'oh, I don't know why I didn't specify things more when getting such errors. I'm happy to spend some time working on this too, there's no need for you to do all the work!</p>",
        "id": 406331605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701876980
    },
    {
        "content": "<p>It seems the next few fixes after that are straightforward enough, but annoying: we have to rewrite <code>FunLike.coe</code> everywhere.</p>",
        "id": 406331768,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701877038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/406331605\">said</a>:</p>\n<blockquote>\n<p>d'oh, I don't know why I didn't specify things more when getting such errors. I'm happy to spend some time working on this too, there's no need for you to do all the work!</p>\n</blockquote>\n<p>Without that you couldn't get started so happy to help. And it's a weird issue, at least it deserves a better error message.</p>",
        "id": 406332736,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701877302
    },
    {
        "content": "<p>Looks like we need to fix the linting issues (read: actually do something about the timeouts, otherwise <code>simpNF</code> doesn't work) before the PR is benchmarkable. :(</p>",
        "id": 406352543,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701883541
    },
    {
        "content": "<p>I don't understand the <code>CommRingCat.coe_of</code> error in <code>simpNF</code> though <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7116912853/job/19376429179\">see last build here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">ProjectiveSpectrum</span><span class=\"bp\">/</span><span class=\"n\">StructureSheaf.lean</span><span class=\"o\">:</span><span class=\"mi\">296</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom_germ'.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">Left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">simplifies</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom</span> <span class=\"bp\">𝒜</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.germ</span> <span class=\"o\">(</span><span class=\"n\">TopCat.Sheaf.presheaf</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf</span> <span class=\"bp\">𝒜</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n    <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">to</span>\n  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom</span> <span class=\"bp\">𝒜</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.germ</span> <span class=\"o\">(</span><span class=\"n\">TopCat.Sheaf.presheaf</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf</span> <span class=\"bp\">𝒜</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n    <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">using</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">CommRingCat.coe_of</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"n\">to</span> <span class=\"n\">change</span> <span class=\"n\">the</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">simplified</span> <span class=\"n\">term</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>I don't see any <code>of</code> in that term!</p>",
        "id": 406352865,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701883660
    },
    {
        "content": "<p>Is there any way to turn on pp.all in that trace?</p>",
        "id": 406358996,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701885965
    },
    {
        "content": "<p>Can you just update the nolints.txt file to ignore everything in order to get a benchmark?</p>",
        "id": 406408330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701905652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/406408330\">said</a>:</p>\n<blockquote>\n<p>Can you just update the nolints.txt file to ignore everything in order to get a benchmark?</p>\n</blockquote>\n<p>Good idea! I will try that tomorrow (if nobody scoops me) :)</p>",
        "id": 406538706,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701954399
    },
    {
        "content": "<p>Didn't manage get around to it, and will be visiting family and celebrating Sinterklaas tomorrow. So please go ahead and update the nolints if you're feeling bored this weekend!</p>",
        "id": 406848085,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702074392
    },
    {
        "content": "<p><code>SInterClass</code>? I thought <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.sInter#doc\">docs#Set.sInter</a> was enough already!</p>",
        "id": 406905310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702108683
    },
    {
        "content": "<p>I've made <a href=\"https://github.com/leanprover-community/mathlib4/pull/8940\">#8940</a>, which makes a start on my attempt - I'm only putting this up in case someone else wants to look at it! I'm currently stuck dealing with <code>simps</code>, whicn I will take a look at in the morning: this error message is (to my tired eyes) quite perplexing:</p>\n<p><a href=\"/user_uploads/3121/_c9lx60z-VdpJE7QHkwNdyKy/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_c9lx60z-VdpJE7QHkwNdyKy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_c9lx60z-VdpJE7QHkwNdyKy/image.png\"></a></div>",
        "id": 406993390,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702171841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/406538706\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/406408330\">said</a>:</p>\n<blockquote>\n<p>Can you just update the nolints.txt file to ignore everything in order to get a benchmark?</p>\n</blockquote>\n<p>Good idea! I will try that tomorrow (if nobody scoops me) :)</p>\n</blockquote>\n<p>It is not tomorrow but:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+ build                                                                 instructions          -15.8%</span>\n<span class=\"gi\">+ build                                                                 tactic execution       -6.3%</span>\n<span class=\"gi\">+ build                                                                 task-clock            -14.2%</span>\n<span class=\"gi\">+ build                                                                 type checking          -5.0%</span>\n<span class=\"gi\">+ build                                                                 typeclass inference   -33.3%</span>\n<span class=\"gi\">+ build                                                                 wall-clock            -11.6%</span>\n<span class=\"gd\">- lint                                                                  instructions           12.1%</span>\n<span class=\"gd\">- lint                                                                  wall-clock             25.1%</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 407243583,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702302540
    },
    {
        "content": "<p>So if we can figure out how to fix the side effects that make some parts really slow, we're in big business!</p>",
        "id": 407244369,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702302786
    },
    {
        "content": "<p>From the benchmark comment in the PR, it's such a magnificent optimization!</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Is there a guess why part of CliffordAlgebra stood out?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.BaseChange                     instructions          -13.1%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.Basic                          instructions          -31.7%</span>\n<span class=\"gd\">- ~Mathlib.LinearAlgebra.CliffordAlgebra.Contraction                    instructions           13.7%</span>\n<span class=\"gd\">- ~Mathlib.LinearAlgebra.CliffordAlgebra.Equivs                         instructions           28.2%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.Even                           instructions          -11.4%</span>\n<span class=\"gd\">- ~Mathlib.LinearAlgebra.CliffordAlgebra.EvenEquiv                      instructions            9.6%</span>\n</code></pre></div>",
        "id": 407250511,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702304557
    },
    {
        "content": "<p>For CliffordAlgebra I think it's just that they import some suboptimal instances. I had to <code>@[nolint simpNF]</code> quite a few lemmas in those files because they were timing out. Specifically looking for <code>StarAlgHomClass</code> instances that aren't there and spending too much time on failing. I suppose it's the same for the slowdown (where they just don't quite hit the limit)</p>",
        "id": 407251023,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702304708
    },
    {
        "content": "<p>Two unsubstantiated claims that might explain why mixins seem to outperform inheritance:</p>\n<ul>\n<li>We're suffering majorly because the default priority of <code>extends</code> is the same as any other instance, unlike Lean3 where it was much lower</li>\n<li>Nested structures and <code>with</code> are causing us more harm than good</li>\n</ul>",
        "id": 407251879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702304974
    },
    {
        "content": "<p>Here's another:</p>\n<ul>\n<li>We spend a lot of time in failing synthesis goals where mixins fail quickly since the root class has a sparse discrimination tree but inheritance requires traversing the whole inheritance hierarchy</li>\n</ul>",
        "id": 407252338,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702305121
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2905\">lean4#2905</a> is almost certainly responsible for making typeclass search even longer too, since that causes us to search unecessary edges in the hierarchy (please upvote this issue for visibility if you think this is plausible)</p>",
        "id": 407253309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702305446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/406352865\">said</a>:</p>\n<blockquote>\n<p>I don't understand the <code>CommRingCat.coe_of</code> error in <code>simpNF</code> though <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7116912853/job/19376429179\">see last build here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">ProjectiveSpectrum</span><span class=\"bp\">/</span><span class=\"n\">StructureSheaf.lean</span><span class=\"o\">:</span><span class=\"mi\">296</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom_germ'.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">Left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">simplifies</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom</span> <span class=\"bp\">𝒜</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.germ</span> <span class=\"o\">(</span><span class=\"n\">TopCat.Sheaf.presheaf</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf</span> <span class=\"bp\">𝒜</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n    <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">to</span>\n  <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.stalkToFiberRingHom</span> <span class=\"bp\">𝒜</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">TopCat.Presheaf.germ</span> <span class=\"o\">(</span><span class=\"n\">TopCat.Sheaf.presheaf</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.ProjectiveSpectrum.Proj.structureSheaf</span> <span class=\"bp\">𝒜</span><span class=\"o\">))</span>\n      <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"o\">})</span>\n    <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">using</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">CommRingCat.coe_of</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"n\">to</span> <span class=\"n\">change</span> <span class=\"n\">the</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">simplified</span> <span class=\"n\">term</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>I don't see any <code>of</code> in that term!</p>\n</blockquote>\n<p>What's going on here is apparently that <code>simp</code> can now turn <code>@FunLike.coe (CommRingCat.of X ⟶ CommRingCat.of Y) (CommRingCat.of X) (CommRingCat.of Y) _ _</code> into <code>@FunLike.coe (CommRingCat.of X ⟶ CommRingCat.of Y) X Y _ _</code> even though that wouldn't infer correctly...</p>",
        "id": 407253650,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702305550
    },
    {
        "content": "<p>could this lead to instances where <code>inferInstance</code> will fully stop working after a <code>simp</code> call? is that maybe what you were running into with the hard-to-fix errors?</p>",
        "id": 407255571,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702306204
    },
    {
        "content": "<p>Hmm, that could explain it indeed!</p>",
        "id": 407256744,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702306557
    },
    {
        "content": "<p>I found a workaround: duplicate the <code>FunLike</code> instance for <code>CommRingCat.of</code> with the simplified versions on the right hand side, and give those a higher priority. But that's still ugly duplication.</p>",
        "id": 407256980,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702306615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407253650\">said</a>:</p>\n<blockquote>\n<p>What's going on here is apparently that <code>simp</code> can now turn <code>@FunLike.coe (CommRingCat.of X ⟶ CommRingCat.of Y) (CommRingCat.of X) (CommRingCat.of Y) _ _</code> into <code>@FunLike.coe (CommRingCat.of X ⟶ CommRingCat.of Y) X Y _ _</code> even though that wouldn't infer correctly...</p>\n</blockquote>\n<p>Is it viable to take <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CommRingCat.coe_of#doc\">docs#CommRingCat.coe_of</a> off the simp call?</p>",
        "id": 407257300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702306711
    },
    {
        "content": "<p>It seems to be used quite a lot, but I'm not enough of a category theory expert to say for sure whether it's really needed.</p>",
        "id": 407257452,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702306756
    },
    {
        "content": "<p>If you want to make things slightly more atomic then there is also <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a>.</p>",
        "id": 407258016,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702306875
    },
    {
        "content": "<p>I doubt you can unsimp <code>CommRingCat.coe_of</code>, but maybe you can remove it from specific simp calls?</p>",
        "id": 407258438,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702306958
    },
    {
        "content": "<p>Or are there too many affected calls?</p>",
        "id": 407258488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702306968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407258438\">said</a>:</p>\n<blockquote>\n<p>I doubt you can unsimp <code>CommRingCat.coe_of</code>, but maybe you can remove it from specific simp calls?</p>\n</blockquote>\n<p>The problem is the <code>simpNF</code> linter, so: not really!</p>",
        "id": 407258582,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702306990
    },
    {
        "content": "<p>Ooh, I see. That's quite... unfortunate.</p>",
        "id": 407261315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702307682
    },
    {
        "content": "<p>Unbundling <code>StarAlgHomClass</code> from <code>AlgHomClass</code> seems like one part of fixing the slowness: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386/commits/e4a09d6be6b58b116fd4c63625f9341b1f7785e1\">quite a few hacks can be removed again!</a></p>",
        "id": 407286725,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702315421
    },
    {
        "content": "<p>Just a note: if you unbundle <code>StarAlgHomClass</code> then it's not necessary to have it at all (as it's just <code>AlgHomClass</code> and <code>StarHomClass</code>).</p>",
        "id": 407288130,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702315913
    },
    {
        "content": "<p>I should try implementing <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a></p>",
        "id": 407289761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702316392
    },
    {
        "content": "<p>But I have lots of grading now.</p>",
        "id": 407289888,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702316422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407251879\">said</a>:</p>\n<blockquote>\n<p>Two unsubstantiated claims that might explain why mixins seem to outperform inheritance:</p>\n<ul>\n<li>We're suffering majorly because the default priority of <code>extends</code> is the same as any other instance, unlike Lean3 where it was much lower</li>\n<li>Nested structures and <code>with</code> are causing us more harm than good</li>\n</ul>\n</blockquote>\n<p>is <code>with</code> slower than <code>where</code> for copying properties?</p>",
        "id": 407322793,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702330106
    },
    {
        "content": "<p><code>with</code> is to <code>__ :=</code> as <code>where</code> is to <code>{}</code>; the comparison you're suggesting doesn't really make sense</p>",
        "id": 407324124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702330811
    },
    {
        "content": "<p>At any rate, <code>foo := { bar with }</code> and <code>foo where __ := bar</code> mean exactly the same thing</p>",
        "id": 407324200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702330859
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MulEquiv.trans</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">e.toEquiv.trans</span> <span class=\"n\">e'.toEquiv</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>creates <code>toEquiv := { toFun := _, invFun := _, .. }</code>, not <code>toEquiv := e.toEquiv.trans e'.toEquiv</code></p>",
        "id": 407334150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702335574
    },
    {
        "content": "<p>As does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MulEquiv.trans</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">e.toEquiv.trans</span> <span class=\"n\">e'.toEquiv</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 407334334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702335630
    },
    {
        "content": "<p>Am I right that <code>toEquiv := e.toEquiv.trans e'.toEquiv</code> can't be achieved using <code>with</code>?</p>",
        "id": 407334435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702335672
    },
    {
        "content": "<p>Not without a patch to core, which I believe <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> has at least one version of</p>",
        "id": 407334486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702335694
    },
    {
        "content": "<p>But also, I suspect that we get absolutely no value from new-style <code>structure</code>s anyway, and if we made them all flat in mathlib (which we can now try out with <code>extends flat</code> on a toolchain branch) it would achieve the same thing</p>",
        "id": 407334629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702335738
    },
    {
        "content": "<p>(we get value for new-style <code>classes</code>, if nothing else because they happen to do a better job of avoiding <a href=\"https://github.com/leanprover/lean4/pull/2905\">lean4#2905</a>)</p>",
        "id": 407334788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702335792
    },
    {
        "content": "<p>Down to 5 <code>HACK</code>'s on <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb%2Ftestings\">branch#mrb/testings</a> using toolchain from <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>list</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Mathlib/LinearAlgebra/CliffordAlgebra/EvenEquiv.lean\n<span class=\"m\">273</span>:<span class=\"w\">        </span>--<span class=\"w\"> </span>HACK:<span class=\"w\"> </span>not<span class=\"w\"> </span>sure<span class=\"w\"> </span>what<span class=\"w\"> </span>causes<span class=\"w\"> </span>the<span class=\"w\"> </span>timeout<span class=\"w\"> </span>with<span class=\"w\"> </span>unqualified<span class=\"w\"> </span><span class=\"sb\">`</span>map_neg<span class=\"sb\">`</span>,\n\nCounterexamples/HomogeneousPrimeNotPrime.lean\n<span class=\"m\">111</span>:<span class=\"w\">    </span>--<span class=\"w\"> </span>HACK<span class=\"w\"> </span>because<span class=\"w\"> </span><span class=\"sb\">`</span>map_add<span class=\"sb\">`</span><span class=\"w\"> </span>caused<span class=\"w\"> </span>a<span class=\"w\"> </span>timeout:\n\nMathlib/AlgebraicGeometry/Morphisms/Basic.lean\n<span class=\"m\">169</span>:--<span class=\"w\"> </span>HACK:<span class=\"w\"> </span>This<span class=\"w\"> </span>seems<span class=\"w\"> </span>to<span class=\"w\"> </span>be<span class=\"w\"> </span>needed<span class=\"w\"> </span>because<span class=\"w\"> </span><span class=\"sb\">`</span>simp<span class=\"sb\">`</span><span class=\"w\"> </span>can<span class=\"s1\">'t use `ConcreteCategory.id_apply`</span>\n\n<span class=\"s1\">Mathlib/Analysis/NormedSpace/LinearIsometry.lean</span>\n<span class=\"s1\">1137:    map_add'</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span>by<span class=\"w\"> </span>simp<span class=\"w\"> </span><span class=\"o\">[</span>-_root_.map_add<span class=\"o\">]</span><span class=\"w\"> </span>--<span class=\"w\"> </span>HACK<span class=\"w\"> </span>to<span class=\"w\"> </span>fix<span class=\"w\"> </span>timeout\n\nMathlib/Analysis/NormedSpace/Star/ContinuousFunctionalCalculus.lean\n<span class=\"m\">102</span>:--<span class=\"w\"> </span>HACK<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"sb\">`</span>simp<span class=\"sb\">`</span><span class=\"w\"> </span>that<span class=\"w\"> </span>barely<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>out\n</code></pre></div>\n</div></div>",
        "id": 407361948,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702348762
    },
    {
        "content": "<p>It also <a href=\"http://speed.lean-fro.org/mathlib4/compare/5730b6a4-b1d9-4a89-a122-fb962dc41acf/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=9760ab98e2ab49374526278b2daca62e6d0817c2\">dulls</a> some of the very, very few sharp edges of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a> and drops the instructions/wall clock by 3-4% each</p>",
        "id": 407573714,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702417275
    },
    {
        "content": "<p>Oh wow, that's impressive! I've managed to fix the one in <code>Counterexamples/HomogeneousPrimeNotPrime.lean</code>: this seems to be caused by a failing search being duplicated, because <code>LinearMapClass.toAddHom</code> duplicates <code>LinearMapClass.toAddMonoidHom</code>.</p>",
        "id": 407589813,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702423794
    },
    {
        "content": "<p>I had no idea that so many timeouts were caused by the eta expansions. It does make sense that this has a big influence, since we have a lot more unification across inheritance paths going on.</p>",
        "id": 407590005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702423894
    },
    {
        "content": "<p>Do you know why linting is so much slower with the new pattern?</p>",
        "id": 407590560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702424236
    },
    {
        "content": "<p>Eliminating the eta expansion claws some back but not most</p>",
        "id": 407590603,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702424274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407334629\">said</a>:</p>\n<blockquote>\n<p>But also, I suspect that we get absolutely no value from new-style <code>structure</code>s anyway, and if we made them all flat in mathlib (which we can now try out with <code>extends flat</code> on a toolchain branch) it would achieve the same thing</p>\n</blockquote>\n<p>Making just the <code>FooHomClass</code> structures semi-flat <a href=\"https://github.com/leanprover-community/mathlib4/pull/8978#issuecomment-1854848422\">gives a 2.5% wall clock speed boost</a> across all of mathlib: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>benchmark results</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span> Benchmark                                                          Metric         Change\n<span class=\"w\"> </span> ========================================================================================\n<span class=\"gi\">+ build                                                              linting         -5.0%</span>\n<span class=\"gi\">+ lint                                                               instructions    -5.8%</span>\n<span class=\"gi\">+ lint                                                               wall-clock      -5.6%</span>\n<span class=\"gi\">+ open Mathlib                                                       wall-clock      -5.1%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Algebra.Equiv                                     instructions   -38.0%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Algebra.Hom                                       instructions   -46.2%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Algebra.NonUnitalSubalgebra                       instructions    -6.9%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Algebra.Subalgebra.Basic                          instructions   -24.1%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Category.ModuleCat.ChangeOfRings                  instructions    -6.4%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.DirectLimit                                       instructions    -8.3%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.DirectSum.Ring                                    instructions    -6.3%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.DualNumber                                        instructions   -23.8%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.DualQuaternion                                    instructions   -30.1%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.FreeAlgebra                                       instructions   -24.9%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.MonoidAlgebra.Basic                               instructions    -4.5%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.RingQuot                                          instructions   -21.2%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Star.NonUnitalSubalgebra                          instructions    -8.9%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.Star.StarAlgHom                                   instructions   -32.2%</span>\n<span class=\"gi\">+ ~Mathlib.Algebra.TrivSqZeroExt                                     instructions    -8.7%</span>\n<span class=\"gi\">+ ~Mathlib.AlgebraicGeometry.EllipticCurve.Group                     instructions    -3.9%</span>\n<span class=\"gd\">- ~Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties             instructions     2.0%</span>\n<span class=\"gi\">+ ~Mathlib.AlgebraicGeometry.StructureSheaf                          instructions    -8.3%</span>\n<span class=\"gd\">- ~Mathlib.Analysis.Convolution                                      instructions     3.6%</span>\n<span class=\"gd\">- ~Mathlib.Analysis.InnerProductSpace.Adjoint                        instructions     4.1%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.NormedSpace.Star.GelfandDuality                  instructions   -14.9%</span>\n<span class=\"gi\">+ ~Mathlib.Analysis.NormedSpace.Star.Unitization                     instructions   -18.4%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Monoidal.Discrete                          instructions    -9.3%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Monoidal.Internal.Module                   instructions    -6.1%</span>\n<span class=\"gi\">+ ~Mathlib.CategoryTheory.Monoidal.Mon_                              instructions    -3.7%</span>\n<span class=\"gi\">+ ~Mathlib.Data.MvPolynomial.Basic                                   instructions    -8.2%</span>\n<span class=\"gi\">+ ~Mathlib.Data.MvPolynomial.Equiv                                   instructions   -18.1%</span>\n<span class=\"gi\">+ ~Mathlib.Data.MvPolynomial.Expand                                  instructions   -43.4%</span>\n<span class=\"gi\">+ ~Mathlib.Data.MvPolynomial.Monad                                   instructions   -33.9%</span>\n<span class=\"gi\">+ ~Mathlib.Data.MvPolynomial.Rename                                  instructions   -49.1%</span>\n<span class=\"gi\">+ ~Mathlib.Data.Polynomial.AlgebraMap                                instructions   -37.2%</span>\n<span class=\"gi\">+ ~Mathlib.Data.Polynomial.RingDivision                              instructions   -11.5%</span>\n<span class=\"gi\">+ ~Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber          instructions    -5.6%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.AbelRuffini                                   instructions   -16.1%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.Adjoin                                        instructions   -13.6%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.IntermediateField                             instructions   -11.3%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.KrullTopology                                 instructions   -32.3%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.Minpoly.Field                                 instructions   -20.7%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.Normal                                        instructions   -13.5%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.PerfectClosure                                instructions   -11.6%</span>\n<span class=\"gi\">+ ~Mathlib.FieldTheory.RatFunc                                       instructions    -4.1%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.Basic                       instructions    -8.2%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.Conjugation                 instructions   -11.0%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.Equivs                      instructions   -20.6%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.CliffordAlgebra.EvenEquiv                   instructions    -7.8%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.DFinsupp                                    instructions    -8.5%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.FinsuppVectorSpace                          instructions   -27.3%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.Matrix.Charpoly.Coeff                       instructions    -8.4%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.Matrix.ToLin                                instructions   -13.7%</span>\n<span class=\"gi\">+ ~Mathlib.LinearAlgebra.TensorAlgebra.Grading                       instructions    -8.6%</span>\n<span class=\"gd\">- ~Mathlib.MeasureTheory.Constructions.Pi                            instructions     3.2%</span>\n<span class=\"gd\">- ~Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2   instructions     9.0%</span>\n<span class=\"gd\">- ~Mathlib.MeasureTheory.Integral.SetToL1                            instructions     4.1%</span>\n<span class=\"gi\">+ ~Mathlib.RepresentationTheory.Action.Basic                         instructions   -41.2%</span>\n<span class=\"gi\">+ ~Mathlib.RepresentationTheory.Action.Limits                        instructions   -20.3%</span>\n<span class=\"gi\">+ ~Mathlib.RepresentationTheory.GroupCohomology.Resolution           instructions    -6.9%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.AdjoinRoot                                     instructions   -15.3%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Algebraic                                      instructions   -27.1%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.AlgebraicIndependent                           instructions   -21.4%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.FinitePresentation                             instructions   -17.3%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Ideal.Quotient                                 instructions   -15.9%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Ideal.QuotientOperations                       instructions    -8.4%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.IsAdjoinRoot                                   instructions   -17.4%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.IsTensorProduct                                instructions   -11.7%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Kaehler                                        instructions    -5.8%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Perfection                                     instructions    -8.2%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.Polynomial.Basic                               instructions    -9.7%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.PolynomialAlgebra                              instructions   -24.6%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.PowerBasis                                     instructions   -31.6%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.TensorProduct                                  instructions   -12.0%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.WittVector.IsPoly                              instructions   -22.8%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.WittVector.MulCoeff                            instructions   -24.8%</span>\n<span class=\"gi\">+ ~Mathlib.RingTheory.WittVector.StructurePolynomial                 instructions   -26.9%</span>\n</code></pre></div>\n</div></div>",
        "id": 407828889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702510173
    },
    {
        "content": "<p>(where <code>semi-flat</code> means they all are of the form <code>{ toFunLike := _, map_foo := _, map_bar := _ }</code>rather than <code>{ toOtherHomClass := _, map_bar := _}</code>)</p>",
        "id": 407829355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702510413
    },
    {
        "content": "<p>what happens with the titular issue?</p>",
        "id": 407829741,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702510634
    },
    {
        "content": "<p>I couldn't say, CI is much slower than the speedcenter! (so I have no cache yet)</p>",
        "id": 407829958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702510801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407829741\">said</a>:</p>\n<blockquote>\n<p>what happens with the titular issue?</p>\n</blockquote>\n<p>Basically no change</p>",
        "id": 407832585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702512190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/407590560\">said</a>:</p>\n<blockquote>\n<p>Do you know why linting is so much slower with the new pattern?</p>\n</blockquote>\n<p>It seems to be a bit of a waterbed effect where coercions are much faster to infer, but e.g. a <em>failed</em> application <code>map_mul</code> becomes slower since instances are now processed in a suboptimal order (e.g. we search through the whole <code>Mul</code> hierarchy before failing on the much smaller <code>MulHomClass</code>). We see this effect especially in linting because the whole library is imported.</p>",
        "id": 407926211,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702548713
    },
    {
        "content": "<p>Anne, is the behaviour simplifying <code>CommRingCat.of</code> due to this Lean config option?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/--</span>\n<span class=\"sd\">    If `dsimp := true`, then switches to `dsimp` on dependent arguments where there is no congruence theorem that allows</span>\n<span class=\"sd\">    `simp` to visit them. If `dsimp := false`, then argument is not visited.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"n\">dsimp</span>             <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 408169710,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702640322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/408169710\">said</a>:</p>\n<blockquote>\n<p>Anne, is the behaviour simplifying <code>CommRingCat.of</code> due to this Lean config option?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"sd\">/--</span>\n<span class=\"sd\">    If `dsimp := true`, then switches to `dsimp` on dependent arguments where there is no congruence theorem that allows</span>\n<span class=\"sd\">    `simp` to visit them. If `dsimp := false`, then argument is not visited.</span>\n<span class=\"sd\">  -/</span>\n  <span class=\"n\">dsimp</span>             <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I assume so! I haven't quite figured out why this is eligible for <code>dsimp</code> now though, I assume it's because there were some doubly-dependent arguments involving the <code>CommRing</code> instance that blocked simplification and are gone now.</p>",
        "id": 408576351,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702894271
    },
    {
        "content": "<p>I wonder if experimenting with turning it off could help</p>",
        "id": 408582343,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702896288
    },
    {
        "content": "<p>This is a config to the <code>simp</code> tactic, right, not the <code>@[simp]</code> attribute? It feels like lots of proofs would break on this.</p>",
        "id": 408583399,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702896669
    },
    {
        "content": "<p><code>dsimp</code> is a confusing name to mean \"dependent <code>simp</code>\"!</p>",
        "id": 408583789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702896829
    },
    {
        "content": "<p>It seems to mean both dependent and definitional here :)</p>",
        "id": 408583930,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702896870
    },
    {
        "content": "<p>Yes sadly, although I do wonder whether it'd be possible to make it be configurable in the attribute too</p>",
        "id": 408583959,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702896882
    },
    {
        "content": "<p>Ideally, <code>simp</code> should be as powerful as <code>simp</code>+<code>dsimp</code>: if it applies a definitional equality lemma, then it should do it in the <code>dsimp</code>-way without creating issues with <code>Eq.rec</code> being inserted in the type.</p>",
        "id": 408688626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702934007
    },
    {
        "content": "<p>The issue here is not to do with Eq.rec, Yury - it dsimps the goal type so that instance resolution doesn't work now</p>",
        "id": 408694730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702938383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!/near/408583789\">said</a>:</p>\n<blockquote>\n<p><code>dsimp</code> is a confusing name to mean \"dependent <code>simp</code>\"!</p>\n</blockquote>\n<p>Maybe you're making a joke, but FYI in case, the technical problem is that if you have an argument such that a later argument has a type that depends on it, you can't just use an Eq to rewrite that first argument since then you'd need a HEq to account for the second argument. Simp only knows about Eqs, not HEqs. What simp does instead is it falls back on using definitional simp (dsimp) when there is a dependence.</p>\n<p>A counterexample to this is that simp knows about Decidable and has special support for it, so even though a proposition argument might be dependent because there's a Decidable argument for it, simp will still simp that proposition rather than dsimp it.</p>",
        "id": 408696075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702939179
    }
]