[
    {
        "content": "<p>I reviewed / fixed the proof</p>",
        "id": 310616043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668694045
    },
    {
        "content": "<p>the short answer is that <code>simp</code> got a bit less powerful in the latest nightly, because it no longer does iota reduction when matching input facts against subterms in the goal</p>",
        "id": 310616297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668694112
    },
    {
        "content": "<p>I think this is a good thing, or at least explainable, because they don't really look like they would match</p>",
        "id": 310616376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668694144
    },
    {
        "content": "<p>it is fixed in most cases by doing <code>dsimp only at h; simp [h]</code> where <code>simp [h]</code> was being used before</p>",
        "id": 310616638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668694217
    },
    {
        "content": "<p>for example if <code>h : ULift.down (ULift.up x) = y</code>, then <code>simp [h]</code> on <code>P x</code> does not result in <code>P y</code> even though it used to, but <code>dsimp only at h; simp [h]</code> will work</p>",
        "id": 310616848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668694307
    },
    {
        "content": "<p>Okay yeah that makes sense, doesn't sound like too much of a loss indeed</p>",
        "id": 310617803,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668694594
    },
    {
        "content": "<p>Isn't that used quite often actually? At least I have the habit of swallowing up <code>dsimp</code> calls into <code>simp</code> ones.</p>",
        "id": 310678587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668711814
    },
    {
        "content": "<p>That also means <code>simp</code> isn't strictly more powerful than <code>dsimp</code> anymore, right? We really should make a warning about that, then.</p>",
        "id": 310678666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668711838
    },
    {
        "content": "<p>I think this is different, but I could be wrong. I think the point is that it is <code>h</code> that is being <code>dsimp</code>ed before the <code>simp</code> call.</p>",
        "id": 310678828,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668711881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/310678666\">said</a>:</p>\n<blockquote>\n<p>That also means <code>simp</code> isn't strictly more powerful than <code>dsimp</code> anymore, right? We really should make a warning about that, then.</p>\n</blockquote>\n<p><code>simp</code> has not been strictly more powerful than <code>dsimp</code> since forever, unless you mean something different by \"strictly more powerful\" than I do. <code>dsimp</code> is able to simplify arguments of dependent functions.</p>",
        "id": 310683471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668713394
    },
    {
        "content": "<p>actually I think <code>simp</code> is strictly more powerful in that sense in lean 4, simp will go into \"<code>dsimp</code> mode\" if it can't traverse into a dependent function argument</p>",
        "id": 310684784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713826
    },
    {
        "content": "<p>but no this does not mean that <code>simp</code> no longer subsumes <code>dsimp</code>, because <code>dsimp</code> got less powerful in exactly the same way</p>",
        "id": 310684987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713888
    },
    {
        "content": "<p>if you do <code>dsimp [h]</code> well it won't do anything at all because <code>h</code> is a local variable, but if <code>h</code> was a theorem with that type that was proved by <code>rfl</code> then <code>dsimp [h]</code> would have worked and no longer does, and <code>dsimp only at h; dsimp [h]</code> would in theory work but it doesn't make sense to dsimp a global theorem so you would just have to restate the theorem without the bad LHS</p>",
        "id": 310685319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713998
    }
]