[
    {
        "content": "<p>Don't duplicate folder names <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <span aria-label=\"cartwheel\" class=\"emoji emoji-1f938\" role=\"img\" title=\"cartwheel\">:cartwheel:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dupNamespace` linter reports:</span>\n<span class=\"cm\">DUPLICATED NAMESPACES IN NAME: -/</span>\n<span class=\"c1\">-- Mathlib.Algebra.Algebra.Basic</span>\n <span class=\"k\">#check</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic._auxLemma.8.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> The namespace Algebra is duplicated in the name -/</span>\n</code></pre></div>",
        "id": 328710002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676744274
    },
    {
        "content": "<p>Who's going to fix the linter?</p>",
        "id": 328722383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676751887
    },
    {
        "content": "<p>Currently, this is the only roadblock for <code>Algebra.Algebra.Basic</code> which is the roadblock on the path to metric spaces.</p>",
        "id": 328722469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676751928
    },
    {
        "content": "<p>I mean, if nobody else volunteers, then I'll try to do it.</p>",
        "id": 328723258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676752374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Can you <code>set_option linter.dupNamespace false</code> at the top of the file, with a porting note?</p>",
        "id": 328724353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676753099
    },
    {
        "content": "<p>Or maybe <code>attribute [nolint dupNamespace] «Mathlib.Algebra.Algebra.Basic._auxLemma.8»</code> works?</p>",
        "id": 328724445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676753160
    },
    {
        "content": "<p>I see that the linter is in <code>Std</code>, so I'll try one of these workarounds instead.</p>",
        "id": 328724573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676753240
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/std4/pull/103\">std4#103</a></p>",
        "id": 328724824,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676753442
    },
    {
        "content": "<p><code>attribute [nolint ..] ..</code> doesn't work. It says \"unknown constant '«Mathlib.Algebra.Algebra.Basic._auxLemma.7»'\"</p>",
        "id": 328725289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676753769
    },
    {
        "content": "<p>Probably, it's hard to set attributes on private lemmas.</p>",
        "id": 328725305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676753787
    },
    {
        "content": "<p>And <code>set_option</code> is probably local to a file it won't affect <code>#lint</code> run in the CI.</p>",
        "id": 328725335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676753827
    },
    {
        "content": "<p>Hmm, it definitely works for the uppercase align linter</p>",
        "id": 328725451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753906
    },
    {
        "content": "<p>So I think it should work for this one too.</p>",
        "id": 328725482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676753935
    },
    {
        "content": "<p>What works?</p>",
        "id": 328726040,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676754296
    },
    {
        "content": "<p><code>set_option</code>?</p>",
        "id": 328726050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676754303
    },
    {
        "content": "<p>It seems that ther is no option <code>linter.dupNamespace</code></p>",
        "id": 328726110,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676754351
    },
    {
        "content": "<p>maybe you need to import it? Or maybe it is a different kind of linter. I don't really understand how these work</p>",
        "id": 328726201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754394
    },
    {
        "content": "<p>It seems that support for <code>set_option linter.* false</code> is not a built-in feature. Some other linters have explicit <code>if</code>s to enable it.</p>",
        "id": 328726660,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676754765
    },
    {
        "content": "<p>Does the <code>attribute [nolint ..] ..</code> work without the french quotes? They should definitely not be there</p>",
        "id": 328726846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754918
    },
    {
        "content": "<p>But I'm not sure whether it will actually work without them</p>",
        "id": 328726862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754931
    },
    {
        "content": "<p>Does it help to put <code>@[nolint ..]</code> on the main definition itself?</p>",
        "id": 328726873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754954
    },
    {
        "content": "<p>assuming there is one?</p>",
        "id": 328726921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676754972
    },
    {
        "content": "<p>To do this, I need to figure out which definitions generate these lemmas.</p>",
        "id": 328726926,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676754983
    },
    {
        "content": "<p>Without french quotes, it says \"unknown constant 'Mathlib.Algebra.Algebra.Basic._auxLemma'\"</p>",
        "id": 328726936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755001
    },
    {
        "content": "<p>What if you leave off the <code>.8</code></p>",
        "id": 328726949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755018
    },
    {
        "content": "<p>So, it doesn't treat \".7\" as a part of the name.</p>",
        "id": 328726950,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755018
    },
    {
        "content": "<p>oh I guess that would do the same thing</p>",
        "id": 328726958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755022
    },
    {
        "content": "<p>right</p>",
        "id": 328726968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755028
    },
    {
        "content": "<p>And I can't even <code>#print</code> this lemma to guess where it came from.</p>",
        "id": 328727005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755058
    },
    {
        "content": "<p>names with numbers are a pain to write explicitly</p>",
        "id": 328727090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676755096
    },
    {
        "content": "<p>It's probably one of the ones that uses <code>simp</code>... if that helps</p>",
        "id": 328727126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755127
    },
    {
        "content": "<p>I assume it probably doesn't help.</p>",
        "id": 328727141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755140
    },
    {
        "content": "<p>I also doubt that this would fix it anyways</p>",
        "id": 328727248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755201
    },
    {
        "content": "<p>So I guess we just fix the linter.</p>",
        "id": 328727321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755220
    },
    {
        "content": "<p>Another hacky workaround would be to rename the folder to <code>Algebra/Algebra_</code> for now, and leave a porting note in <code>Algebra/Algebra_/README.md</code>.</p>",
        "id": 328727341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676755233
    },
    {
        "content": "<p>And then we can fix the linter without blocking PRs in this directory.</p>",
        "id": 328727396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676755269
    },
    {
        "content": "<p>Can we globally disable this linter for now?</p>",
        "id": 328727465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755316
    },
    {
        "content": "<p>Probably no because it has no <code>set_option</code></p>",
        "id": 328727541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755338
    },
    {
        "content": "<p>I assume it's like a one line <code>if \\not n.isInternal then </code> fix to the linter</p>",
        "id": 328727634,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755399
    },
    {
        "content": "<p>But yeah, those would be options too</p>",
        "id": 328727670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755434
    },
    {
        "content": "<p>Yes.</p>",
        "id": 328727675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755438
    },
    {
        "content": "<p>here's a hack to print declarations with internal names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">run_cmd</span>\n  <span class=\"n\">Elab.Command.elabCommand</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#print</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Algebra.Algebra.Basic._auxLemma</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 328727748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676755492
    },
    {
        "content": "<p>I get the same \"unknown constant\" error</p>",
        "id": 328727854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755568
    },
    {
        "content": "<p>you also need to have that downstream of the definition</p>",
        "id": 328727882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676755598
    },
    {
        "content": "<p>Can you checkout <a href=\"https://github.com/leanprover-community/mathlib4/pull/2244\">!4#2244</a> and try?</p>",
        "id": 328727889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755618
    },
    {
        "content": "<p>and then, change <code>#print</code> to <code>attribute [nolint ..]</code></p>",
        "id": 328727891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755621
    },
    {
        "content": "<p>I'm trying it at the end of the file.</p>",
        "id": 328727908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755632
    },
    {
        "content": "<p>But at the risk of pointing out the obvious: this really seems like a true positive to me. Who thought that it would be a good idea to have an <code>Algebra/Algebra/</code> folder?</p>",
        "id": 328728130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676755809
    },
    {
        "content": "<p>I guess whoever decided it would be a good idea to have a type of algebraic structure called an algebra?</p>",
        "id": 328728182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676755862
    },
    {
        "content": "<p>Adding <code>nolint dupNamespace</code> attr to a lemma that generates the aux lemma doesn't help</p>",
        "id": 328728222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676755892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> We should have <code>Algebra/Module</code>, since we have <code>_root_.Module</code>. But we also have <code>_root_.Algebra</code>...</p>",
        "id": 328728476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676756046
    },
    {
        "content": "<p>I get it, but that doesn't make it any less confusing to everyone who runs across it</p>",
        "id": 328728509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676756073
    },
    {
        "content": "<p>I suggest that we don't rename a folder mid-port</p>",
        "id": 328728557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756106
    },
    {
        "content": "<p>I think all the aspects which make the <code>dupNamespace</code> linter worth linting still apply</p>",
        "id": 328728558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676756106
    },
    {
        "content": "<p>I remember being terribly confused about what an <em>algebra</em> was in my 2nd year. It wasn't explained in my lecture notes on ring theory, which was called \"Algebra II\"... <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 328728623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676756157
    },
    {
        "content": "<p>I'm not sure what other name would be less confusing</p>",
        "id": 328728825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676756268
    },
    {
        "content": "<p>I mean short of renaming <code>Algebra.X</code> to <code>Algebra.Xs</code> or something</p>",
        "id": 328728847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676756280
    },
    {
        "content": "<p>or <code>Algebra</code> to <code>GA</code> (is that the right code)</p>",
        "id": 328728919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676756298
    },
    {
        "content": "<p>I think it would be fair to say that the only redeeming feature of <code>Algebra.Algebra_</code> is to satisfy the linter</p>",
        "id": 328728983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676756343
    },
    {
        "content": "<p>I think that the way to go before the port is done is to add an option <code>linter.dupNamespace</code>.</p>",
        "id": 328729128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/duplicated.20namespace/near/328728919\">said</a>:</p>\n<blockquote>\n<p>or <code>Algebra</code> to <code>GA</code> (is that the right code)</p>\n</blockquote>\n<p>Probably <code>RA</code>: <a href=\"https://arxiv.org/list/math.RA/recent\">https://arxiv.org/list/math.RA/recent</a></p>",
        "id": 328729138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676756452
    },
    {
        "content": "<p>Aha, you need to use <code>mkCIdent</code> instead of <code>mkIdent</code> for my hack to work</p>",
        "id": 328729314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676756555
    },
    {
        "content": "<p>unfortunately the declaration has no declaration range so it doesn't actually help that much for locating who added it</p>",
        "id": 328729401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676756615
    },
    {
        "content": "<p>Why is there a folder called <code>Algebra</code> within <code>Algebra</code> in the first place? What’s intended to go in <code>Algebra/Algebra</code> that shouldn’t just go in <code>Algebra</code>? 🤔</p>",
        "id": 328729579,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676756699
    },
    {
        "content": "<p>How do you run it in a loop?</p>",
        "id": 328729610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756714
    },
    {
        "content": "<p>We have <code>Algebra/AlgebraicStructure</code> folders.</p>",
        "id": 328729639,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756736
    },
    {
        "content": "<p>E.g., <code>Algebra/Group</code>, <code>Algebra/Module</code>, <code>Algebra/Algebra</code>.</p>",
        "id": 328729646,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756751
    },
    {
        "content": "<p>It looks like the files in <code>Algebra/Algebra</code> talk about a range of algebraic structures rather than just the most general notion of “an algebra”. Is that right?</p>",
        "id": 328729752,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676756847
    },
    {
        "content": "<p>Or wait. Is it that they talk about “algebras over _”?</p>",
        "id": 328729763,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676756873
    },
    {
        "content": "<p>Pushed a workaround</p>",
        "id": 328729770,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756881
    },
    {
        "content": "<p>Thanks Mario.</p>",
        "id": 328729841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676756925
    },
    {
        "content": "<p>Back in the day, algebras were the only algebraic structures around.</p>",
        "id": 328730144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676757164
    },
    {
        "content": "<p>Maybe the abstract concept of a group is from around the same time</p>",
        "id": 328730277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676757235
    },
    {
        "content": "<p>I’d propose either <code>Algebra/Algebras</code> or <code>Algebra/AlgebraOver</code> as a rename (post-port), just for clarity—the duplication of folder names is a bit awkward even aside from linter errors imo! 🙃 (Either that or nest all the algebraic structures in a <code>Structures</code> folder.)</p>",
        "id": 328730457,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676757360
    },
    {
        "content": "<p>(I agree this isn't really the time to be making folder hierarchy changes, but we should probably keep it in the back of our minds.)</p>",
        "id": 328730668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676757499
    },
    {
        "content": "<p>The present issue is very trivially fixed in the linter</p>",
        "id": 328730684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676757509
    },
    {
        "content": "<p>Although on the topic of duplicated namespaces, there are some fun section names in the file: <code>CommSemiringSemiring</code>, <code>CommRingRing</code>, <code>CommSemiringCommSemiring</code></p>",
        "id": 328730790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676757604
    },
    {
        "content": "<p>For now, I pushed a workaround, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2244\">!4#2244</a> is ready for review again.</p>",
        "id": 328730840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676757625
    },
    {
        "content": "<p>I guess, it is \"TCAssumptionOnRTCAssumptionOnA\"</p>",
        "id": 328731011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676757746
    },
    {
        "content": "<p><code>Mathlib.Algebra.Module.Submodule.Lattice</code> has a lot of nouns in it</p>",
        "id": 328731132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676757860
    },
    {
        "content": "<p>Is there a “post-port tracking issue”? Might be helpful if we want to remember to come back to little things like this.</p>",
        "id": 328731214,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676757955
    },
    {
        "content": "<p>I thought there was a tag for this</p>",
        "id": 328731272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676757984
    },
    {
        "content": "<p>Oh yes, there is: <code>after-port</code>. I wonder if it would reduce friction to quickly edit a common issue with ideas instead of making a standalone issue for every thing we might want to address, though.</p>",
        "id": 328731496,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676758158
    },
    {
        "content": "<p>(I can make one if people think there’d be any benefit.)</p>",
        "id": 328731637,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676758250
    },
    {
        "content": "<p>I think that we'll fix things one by one after port, so it makes sense to have separate issues.</p>",
        "id": 328731679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676758278
    },
    {
        "content": "<p>fixed in std4</p>",
        "id": 328731759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676758330
    },
    {
        "content": "<p>Should we try to update std4 now, or merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/2244\">!4#2244</a> with a workaround first?</p>",
        "id": 328732033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676758536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/duplicated.20namespace/near/328731679\">said</a>:</p>\n<blockquote>\n<p>I think that we'll fix things one by one after port, so it makes sense to have separate issues.</p>\n</blockquote>\n<p>We’d still have separate issues, I’m just saying we might want to track them all and create quick precursors to them in a common issue. (The GitHub checklist even lets you create an issue straight from a checklist entry when you’re ready to do so.)</p>\n<p>for example, aren’t there more things—especially minor things—that have been discussed on zulip as “for after the port” than there are <code>after-port</code> issues? If not, then nevermind…but, so far Yury is the only one who’s been industrious enough to actually create any after-port issue. 🙃 That’s why I thought there might be value to reducing the friction here.</p>",
        "id": 328733302,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676759354
    }
]