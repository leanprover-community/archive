[
    {
        "content": "<p>I have a weird error over on <code>port/Data/Polynomial/RingDivision</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instDecidableNot</span>\n<span class=\"n\">inferred</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Not.decidable</span>\n</code></pre></div>\n<p><code>Not.decidable</code> arises from <code>alias instDecidableNot &lt;- Not.decidable</code></p>",
        "id": 343713564,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499293
    },
    {
        "content": "<p>Are they defeq? Presumably, but it's claiming they're not? Nothing weird with <code>pp.all</code> going on? (unlikely)</p>",
        "id": 343713979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679499371
    },
    {
        "content": "<p>I've tried to minimize it but extracting that step out from the proof works fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_find_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 343714067,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499391
    },
    {
        "content": "<p>Here's the pp.all output:<br>\n<a href=\"https://gist.github.com/adamtopaz/52a716719cf4c67f15d4da1e44aa97da\">https://gist.github.com/adamtopaz/52a716719cf4c67f15d4da1e44aa97da</a></p>",
        "id": 343714269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679499436
    },
    {
        "content": "<p><code>etaExperiment</code> does not help</p>",
        "id": 343714327,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499449
    },
    {
        "content": "<p><code>propDecidable</code> appears exactly once in that output, so that is the problem</p>",
        "id": 343714456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679499475
    },
    {
        "content": "<p>Under a minute!</p>",
        "id": 343714629,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499505
    },
    {
        "content": "<p>Oh so this is the standard \"you put <code>open_locale classical</code> somewhere but then used something which had its own decidability instance\" gotcha.</p>",
        "id": 343714723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679499527
    },
    {
        "content": "<p>Vs <code>Polynomial.decidableDvdMonic</code></p>",
        "id": 343714938,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499577
    },
    {
        "content": "<p><code>Polynomial.decidableDvdMonic</code> also...darn, you got there first</p>",
        "id": 343715007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679499592
    },
    {
        "content": "<p>Another question: is it normal for the goal state to be written even with the error at <code>rw</code>?</p>",
        "id": 343715239,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499655
    },
    {
        "content": "<p>Is there a way for <code>classical</code> to somehow turn off all other decidability instances?</p>",
        "id": 343715697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679499754
    },
    {
        "content": "<p>So <code>Polynomial.decidableDvdMonic</code> is not an instance</p>",
        "id": 343715835,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679499789
    },
    {
        "content": "<p>or is this a priority issue? shouldn't the <code>classical</code> instance just have the highest possible priority (when using <code>classical</code> reasoning, of course)</p>",
        "id": 343716260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679499882
    },
    {
        "content": "<p>Experience shows that it's very difficult to get <code>open_locale classical</code> (or whatever the lean 4 equivalent is) working robustly everywhere. You prove some theorem for general rings using it and then you apply it to <code>int</code> and someone has annoyingly proved that <code>int</code> has decidable equality and this proof is used in some other lemma or definition which you are relying on and then you just can't shake it off. The solution we came up with a year or two ago, namely adding in <code>[decidable]</code> assumptions if the statement doesn't compile otherwise, seem to have solved most of these problems. Three or four years ago we were using <code>open_locale classical</code> and (even after messing with priorities) these problems would still spring up with annoying regularity (typically with <code>finset</code>, at least in my experience; this is why I strongly fell out of love with it and took years to be tempted back in again)</p>",
        "id": 343716932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679500056
    },
    {
        "content": "<p>PS IIRC the conclusion a few years ago was that the <code>classical</code>decidability instances should have the <em>lowest</em> possible priority... (but this didn't work either)</p>",
        "id": 343717789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679500243
    },
    {
        "content": "<p>right now <code>Classical.propDecidable</code> does indeed have <code>(priority := low)</code> in lean4</p>",
        "id": 343717954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500286
    },
    {
        "content": "<p>Apparently <code>low</code> priority is still higher than something that isn't an instance at all.</p>",
        "id": 343718082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500316
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.decidableDvdMonic#doc\">docs4#Polynomial.decidableDvdMonic</a></p>",
        "id": 343718293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500367
    },
    {
        "content": "<p>where does this <code>decidableDvdMonic</code> actually come from in this file?</p>",
        "id": 343718585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500440
    },
    {
        "content": "<p>I closed the tab already but if you search for it again in the file, it's used in something like <code>rootMultiplicity</code></p>",
        "id": 343718735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500476
    },
    {
        "content": "<p>aha okay</p>",
        "id": 343718796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500489
    },
    {
        "content": "<p>and maybe it leaks out into some other definition/theorem that way</p>",
        "id": 343718820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500496
    },
    {
        "content": "<p>I'm still not sure specifically how this could cause a problem, so maybe it's some other use.</p>",
        "id": 343718943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500528
    },
    {
        "content": "<p>Well, there is one way it could definitely happen, if you unfold the definition of <code>rootMultiplicity</code></p>",
        "id": 343719190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500581
    },
    {
        "content": "<p>another strange thing that I noticed is that <code>generalize_proofs</code> can't name the unnamed proof in this problematic location in the proof.</p>",
        "id": 343719252,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500598
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rootMultiplicity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">Not.decidable</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">decidableDvdMonic</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">h0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for reference.</p>",
        "id": 343719363,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679500629
    },
    {
        "content": "<p>Isn't the fix not to chase <code>decidableDvdMonic</code> but to remove <code>open Classical</code> and then to fix up the statements which no longer compile by adding relevant decidability hypotheses, and fixing up the proofs which no longer compile by enabling classical within the proof?</p>",
        "id": 343719498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679500661
    },
    {
        "content": "<p>I mentioned this to Matt privately already, but a hack of the following sort also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_find_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Classical.not_not</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span>\n</code></pre></div>",
        "id": 343719757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500713
    },
    {
        "content": "<p>That can be done. You have to tell Lean about decidability of division in the proof (and elsewhere)</p>",
        "id": 343719799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679500723
    },
    {
        "content": "<p>which is essentially what Matt already said above with the <code>example</code></p>",
        "id": 343719821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500728
    },
    {
        "content": "<p>I think unfolding a definition that uses non-instances as though they were instances is always going to lead to potential problems</p>",
        "id": 343719843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500733
    },
    {
        "content": "<p>i.e. the \"statement that doesn't compile\" doesn't exist, it's the equational unfolding of <code>rootMultiplicity</code></p>",
        "id": 343720013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500770
    },
    {
        "content": "<p>So I guess then one option is to add <code>rootMultiplicity_def</code>, that does abstract over the decidability instance.</p>",
        "id": 343720219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/non-defeq.20aliased.20instance/near/343719757\">said</a>:</p>\n<blockquote>\n<p>I mentioned this to Matt privately already, but a hack of the following sort also works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_find_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Classical.not_not</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that replacing <code>convert</code> by <code>exact</code> does NOT work here.</p>",
        "id": 343720247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679500824
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">decidableDvdMonic</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This can't be an instance, right? Because typeclass inference will never find <code>hq</code>.</p>",
        "id": 343720518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679500887
    },
    {
        "content": "<p>At the very least you'd expect the effect of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to be a lemma</p>",
        "id": 343720569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679500899
    },
    {
        "content": "<p>It might be...Can't find it</p>",
        "id": 343721127,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679501028
    },
    {
        "content": "<p>This lemma would still use <code>nat.find</code> so would still want a decidability instance though, right?</p>",
        "id": 343721589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679501114
    },
    {
        "content": "<p>but it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff_aux</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff</span>\n<span class=\"sd\">  `(X - a) ^ n` divides `p`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_rootMultiplicity_iff_aux</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_find_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Classical.not_not</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.le_root_multiplicity_iff</span> <span class=\"n\">Polynomial.le_rootMultiplicity_iff</span>\n</code></pre></div>",
        "id": 343722685,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679501333
    },
    {
        "content": "<p>oh wait maybe not</p>",
        "id": 343722867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679501376
    },
    {
        "content": "<p>okay, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff_aux</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"sd\">/-- The multiplicity of `a` as root of a nonzero polynomial `p` is at least `n` iff</span>\n<span class=\"sd\">  `(X - a) ^ n` divides `p`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_rootMultiplicity_iff_aux</span> <span class=\"n\">p0</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_find_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Classical.not_not</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span>\n</code></pre></div>",
        "id": 343723449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679501504
    },
    {
        "content": "<p>note the <code>convert</code> again</p>",
        "id": 343723469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679501509
    },
    {
        "content": "<p>Since there doesn't seem to a good general fix, I'll go with Adam's suggestion.</p>",
        "id": 343726415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679502179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> has marked this topic as resolved.</p>",
        "id": 343726432,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679502182
    },
    {
        "content": "<p>Is the first theorem with <code>Classical</code> open? I was expecting you'd have to write <code>[Decidable (blah blah blah)]</code></p>",
        "id": 343726797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679502257
    },
    {
        "content": "<p>(Also, I think the theorem statement can just be <code>rootMultiplicity a p = Nat.find ...</code>)</p>",
        "id": 343726851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679502271
    },
    {
        "content": "<p>yeah that's a much better lemma :)</p>",
        "id": 343726967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679502300
    },
    {
        "content": "<p>No. It was around the 6th that used classical</p>",
        "id": 343727039,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679502319
    },
    {
        "content": "<p>I mean this <code>le_rootMultiplicity_iff_aux</code></p>",
        "id": 343727463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679502409
    },
    {
        "content": "<p>yeah classical was open for that one. The <code>convert</code>hack works in that case.</p>",
        "id": 343727582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679502437
    },
    {
        "content": "<p>Classical is open for the definition of <code>rootMultiplicity</code></p>",
        "id": 343728344,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679502608
    },
    {
        "content": "<p>Then the party line is (&amp; probably some linter will tell you) that you should take a decidability instance hypothesis for whatever <code>Nat.find</code> needs, just in case later you manage to cook up yet another distinct decidability instance</p>",
        "id": 343728522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679502651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> has marked this topic as unresolved.</p>",
        "id": 343728613,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679502674
    },
    {
        "content": "<p>I don't want to defy the party</p>",
        "id": 343728665,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679502693
    },
    {
        "content": "<p>Here's a question: how attached are you to <code>Nat.find</code>? Would you be ok with using the noncomputable <code>infₛ</code>? (See <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Lattice.html#Nat.inf%E2%82%9B_def\">Nat.infₛ_def</a> for the relationship to <code>Nat.find</code>.)</p>",
        "id": 343729765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679502986
    },
    {
        "content": "<p>Just to be clear, we are talking about redefining <code>rootMultiplicity</code> right?</p>",
        "id": 343730088,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503077
    },
    {
        "content": "<p>Other that minimizing changes while porting, I have no feelings</p>",
        "id": 343730251,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503105
    },
    {
        "content": "<p>(Jumping up to your mwe, you'd write <code>infₛ {n | ¬ ((X - C a) ^ (n+1) ∣ p)}</code> rather than <code>Nat.find h</code>.)</p>",
        "id": 343730446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679503149
    },
    {
        "content": "<p>Ok. I guess if I am forced to feel, I would say that dividing polynomials should be as computable as possible.</p>",
        "id": 343730704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503216
    },
    {
        "content": "<p>Even though adding polynomials is not at all computable?</p>",
        "id": 343730774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503236
    },
    {
        "content": "<p>But the whole file is noncomputable I think</p>",
        "id": 343730866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503261
    },
    {
        "content": "<p>and trying to make it computable caused problems</p>",
        "id": 343730945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/non-defeq.20aliased.20instance/near/343730774\">said</a>:</p>\n<blockquote>\n<p>Even though adding polynomials is not at all computable?</p>\n</blockquote>\n<p>Over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>",
        "id": 343730950,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503280
    },
    {
        "content": "<p>Over anything</p>",
        "id": 343730981,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679503289
    },
    {
        "content": "<p>IIRC then yes</p>",
        "id": 343730984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503290
    },
    {
        "content": "<p>Ok, I need more information here</p>",
        "id": 343731068,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503313
    },
    {
        "content": "<p>I remember when it happened because a student had some code which computed some Chebyshev polynomials over Z and he had to change <code>refl</code> to <code>ring</code> in a few places</p>",
        "id": 343731120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503324
    },
    {
        "content": "<p>(Sorry for the detour)</p>",
        "id": 343731174,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503335
    },
    {
        "content": "<p>Is this an abstract problem or an implementation problem?</p>",
        "id": 343731386,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503381
    },
    {
        "content": "<p>Trying to make them computable when R was computable just caused issues of the kind which you are seeing in this thread, and eventually someone threw their hands up in the air and switched it all off.</p>",
        "id": 343731547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503419
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 343731585,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503429
    },
    {
        "content": "<p>And switching it off did solve a bunch of problems</p>",
        "id": 343731629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503440
    },
    {
        "content": "<p>If we knew then what we know now then I would imagine we might have had a better chance, and I think that occasionally people talk about re-instating computability</p>",
        "id": 343731771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503469
    },
    {
        "content": "<p>Can something like <code>csimp</code> substitute a computable implementation if you ever wanted to generate code for general noncomputable things?</p>",
        "id": 343732072,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503542
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 343732350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503613
    },
    {
        "content": "<p>I can certainly imagine someone trying Faugère F4 or F5</p>",
        "id": 343732859,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503742
    },
    {
        "content": "<p>Especially with Lean 4 (vs 3)</p>",
        "id": 343733001,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503778
    },
    {
        "content": "<p>Right, but somehow this was a disjoint problem to \"develop the theory of single variable polynomials because we want to prove the fundamental theorem of Galois theory\", where no computability at all was needed.</p>",
        "id": 343733059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503794
    },
    {
        "content": "<p>Very fair</p>",
        "id": 343733141,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503806
    },
    {
        "content": "<p>and somehow the momentum was with the Galois theory people</p>",
        "id": 343733215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679503830
    },
    {
        "content": "<p>(Aside if someone is interested in F4 or F5, call me maybe <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 343733848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679503978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/non-defeq.20aliased.20instance/near/343732072\">said</a>:</p>\n<blockquote>\n<p>Can something like <code>csimp</code> substitute a computable implementation if you ever wanted to generate code for general noncomputable things?</p>\n</blockquote>\n<p>Right now no: <code>csimp</code> requires an exact match to the original signature</p>",
        "id": 343734220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679504077
    },
    {
        "content": "<p>But note that this so-called noncomputability does not prevent <code>by ring</code> from working, so I assume it would not affect your F4 algorithm either.</p>",
        "id": 343734240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679504087
    },
    {
        "content": "<p>So if you have an algorithm that works if you have decidable equality, then your noncomputable def has to assume decidable equality too.</p>",
        "id": 343734272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679504099
    },
    {
        "content": "<p>I've been toying with the idea of there being a <code>compute%</code> term elaborator that takes an expression and makes it computable (if possible). This is an extension of previous discussion about a <code>computable</code> typeclass (and it could make use of such a typeclass to store how to compute things), but it seems like it would be more robust.</p>",
        "id": 343736289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679504577
    },
    {
        "content": "<p>That would be pretty sweet</p>",
        "id": 343736649,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679504653
    },
    {
        "content": "<p>maybe the interface is that <code>compute% e</code> gives you a proof <code>h : e = e'</code> where <code>e'</code> is computable.</p>",
        "id": 343736702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679504668
    },
    {
        "content": "<p>and there could be a <code>#compute</code> command where <code>#compute e</code> does <code>#eval e'</code> (I'm not really sure how this compares to <code>#norm_num</code>, other than <code>#compute</code> might evaluate faster at the cost of not being a verified evaluation).</p>",
        "id": 343737192,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679504795
    },
    {
        "content": "<p>Circling back around, I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rootMultiplicity_eq_nat_find_of_nonzero</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.find</span> <span class=\"o\">(</span><span class=\"n\">multiplicity_X_sub_C_finite</span> <span class=\"n\">a</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">rootMultiplicity</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and am leaving a note around <code>rootMultiplicity</code> about removing a blanket <code>Classical</code> for a specific assumption. Does this sound reasonable? My main motivation is not to seriously (or moderately) refactor things during porting.</p>",
        "id": 343738183,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679505063
    },
    {
        "content": "<p>Can you remind us of the original version that didn't work?</p>",
        "id": 343739170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679505341
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_rootMultiplicity_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n     <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">rootMultiplicity</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">by</span>\n   <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">root_multiplicity</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">p0</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_find_iff</span><span class=\"o\">,</span> <span class=\"n\">Classical.not_not</span><span class=\"o\">]</span>\n   <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n   <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n   <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n     <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span><span class=\"bp\">;</span> <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">n.lt_succ_self</span>\n</code></pre></div>",
        "id": 343739367,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679505393
    },
    {
        "content": "<p>from mathport</p>",
        "id": 343739426,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679505409
    },
    {
        "content": "<p>Should I break out the computability discussion into a separate stream?</p>",
        "id": 343740066,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679505532
    },
    {
        "content": "<p>I think it is quite valuable and don't want it buried</p>",
        "id": 343740250,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679505585
    }
]