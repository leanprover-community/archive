[
    {
        "content": "<p>I think port Analysis.NormedSpace.OperatorNorm <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> is one is the most critical files for porting at the moment, and it's ... a bit of a disaster. There are huge timeouts going on. Some of these go away on <code>reenableeta</code> (see the branch <code>reenableeta_OperatorNorm</code>), but others do not!</p>\n<p>I propose we try three concurrent things:<br>\n1) Fix the errors on the <code>reenableeta_OperatorNorm</code> branch (where it's actually possible to work...) and then transfer these over to the live branch. In particular <code>mkContinuous‚ÇÇ</code> and <code>le_norm_flip</code> need fixing, and these are addressable on this branch.<br>\n2) Investigate the remaining timeouts on <code>reenableeta_OperatorNorm</code>, particularly <code>toNormedAlgebra</code> which is still really bad (however not actually need in this file, or at all until <code>ContDiff</code>, so it's not really a blocker). However <code>flip‚Çó·µ¢'</code> and <code>flip‚Çó·µ¢</code> are also still timing out.<br>\n3) Can we cut this file up in mathlib3? It is a huge file. If someone would like to investigate what the minimal prefix of <code>analysis.normed_space.operator_norm</code> is that still allows <code>analysis.normed_space.multilinear</code> to compile, I think we should cut the file at that point, so we can as rapidly as possible see what comes after this obstacle.</p>\n<p>Please consider <code>reenableeta_OperatorNorm</code> a free-for-all branch. Feel free to reserve it here. I'll be hacking on it for a short while longer right now.</p>",
        "id": 356674754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683545911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, you're familiar with the material in <code>analysis.normed_space.operator_norm</code>, right?</p>",
        "id": 356675059,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1683545986
    },
    {
        "content": "<p>Yes, somewhat. I'm on vacation today, but could have a look at obvious file splits this evening (11pm UTC)</p>",
        "id": 356676258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683546230
    },
    {
        "content": "<p>I'm not fussed about the naturality of the split. I just want the minimal requirements for the next files in the graph. :-)</p>",
        "id": 356676761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683546314
    },
    {
        "content": "<p>It's typically the kind of file where <a href=\"https://github.com/leanprover-community/mathlib4/pull/3840\">!4#3840</a> is supposed to help.</p>",
        "id": 356683530,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683547834
    },
    {
        "content": "<p>Okay, I'm releasing my hold on <code>reenableeta_OperatorNorm</code>. I did fix lots of errors there, and have migrated all those fixes across to <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a>, although I can't actually verify they work because that file is just too slow. :-)</p>",
        "id": 356694285,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683550302
    },
    {
        "content": "<p>There is still a timeout on <code>toNormedAlgebra</code>. I've just made a branch which is the sup of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> (OperatorNorm), reenableeta, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/3840\">!4#3840</a> (Sebastien's refactor), to see if that gets anywhere. :-) But I hopefully I will go to sleep before that compiles!</p>",
        "id": 356694637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683550380
    },
    {
        "content": "<p>Well, on this supremum-of-all-the-tricks-branch, <code>toNormedAlgebra</code> now runs with <code>set_option maxHeartbeats 2000000 in</code> (but not <code>set_option maxHeartbeats 1600000 in</code>). Perhaps we can have a look at this at the porting meeting tomorrow.</p>",
        "id": 356705823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683551769
    },
    {
        "content": "<p>I am guessing that <code>ContinuousLinearMap.semiring</code> should fire when the goal is <code>Semiring (E ‚ÜíL[ùïú] E)</code> right? Lol.</p>",
        "id": 356716568,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683554136
    },
    {
        "content": "<p>This is fast <del>but incomplete</del> and complete (on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> itself)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- /-- For a normed space `E`, continuous linear endomorphisms form a normed algebra with</span>\n<span class=\"c1\">-- respect to the operator norm. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">toNormedAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">NormedAlgebra</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">bad</span> <span class=\"k\">with</span>\n    <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">f</span>\n      <span class=\"n\">apply</span> <span class=\"n\">op_norm_smul_le</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 356732345,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683557033
    },
    {
        "content": "<p>If I replace <code>bad</code> with <code>ContinuousLinearMap.algebra</code> then the timeouts commence. I am guessing that Lean has some preferred instances it has inferred in this file and they clash with those from <code>ContinuousLinearMap.algebra</code>, even though they might be unified as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>‚Üí</mo><mi mathvariant=\"normal\">‚àû</mi></mrow><annotation encoding=\"application/x-tex\">t \\to \\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">‚àû</span></span></span></span>.</p>",
        "id": 356737262,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683558040
    },
    {
        "content": "<p>Lean is also fatigued if I try to make the instance of the algebra structure a parameter of <code>toNormedAlgebra</code></p>",
        "id": 356738649,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683558295
    },
    {
        "content": "<p>I'm going to look at trimming some code from the end of operator_norm over at <a href=\"https://github.com/leanprover-community/mathlib/compare/operator_norm?expand=1\">https://github.com/leanprover-community/mathlib/compare/operator_norm?expand=1</a></p>",
        "id": 356739200,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683558408
    },
    {
        "content": "<p>Without much thinking, I got it down ~1000 lines to 775. I need to step out now; I might spend a little more time on it later</p>",
        "id": 356754119,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683561804
    },
    {
        "content": "<p>Forward-porting all the code removal, I got the file compiling in lean4 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 356800490,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683575409
    },
    {
        "content": "<p>Have you made a mathlib3 PR?</p>",
        "id": 356801369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683575746
    },
    {
        "content": "<p>I'm stopping for today; if anyone wants to take over, that would be great.</p>\n<p>All the code removed in <a href=\"https://github.com/leanprover-community/mathlib/compare/operator_norm?expand=1\">https://github.com/leanprover-community/mathlib/compare/operator_norm?expand=1</a> will need to move to a new file, and imports added</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/new/port/Analysis.NormedSpace.OperatorNorm-minimal\">https://github.com/leanprover-community/mathlib4/pull/new/port/Analysis.NormedSpace.OperatorNorm-minimal</a> has the corresponding mathlib4 changes</p>",
        "id": 356801386,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683575752
    },
    {
        "content": "<p>Let's not get too excited and merge the mathlib4 PR until we've actually finished the mathlib3 split, and preferably let it propagate through mathport :)</p>",
        "id": 356802012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683575934
    },
    {
        "content": "<p>Yeah, no hurry on that side, but I wanted to check if I'd actually removed enough for it to help</p>",
        "id": 356802669,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683576150
    },
    {
        "content": "<p>Okay, the split may not be necessary after all.</p>",
        "id": 356884847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615068
    },
    {
        "content": "<p>I have the branch <code>reenableeta_OperatorNorm</code> (which contains the entirety of the file) down to just one error.</p>",
        "id": 356884932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615096
    },
    {
        "content": "<p>The main branch <code>port/Analysis.NormedSpace.OperatorNorm</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> <em>hopefully</em> works too, but it is massively slow. I'm checking it now.</p>",
        "id": 356885047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615127
    },
    {
        "content": "<p>If anyone would like to have a look at the one remaining error on <code>reenableeta_OperatorNorm</code> that would be amazing. I'm a bit sick of this file for today. :-)</p>",
        "id": 356885121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615155
    },
    {
        "content": "<p>The remaining error is in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_precompR_le</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚Çó</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">G‚Çó</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">precompR</span> <span class=\"n\">E‚Çó</span> <span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">‚Äñ</span><span class=\"n\">precompR</span> <span class=\"n\">E‚Çó</span> <span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">compL</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E‚Çó</span> <span class=\"n\">F‚Çó</span> <span class=\"n\">G‚Çó</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span> <span class=\"n\">op_norm_comp_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">norm_compL_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">L</span><span class=\"bp\">‚Äñ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">continuous_linear_map.norm_precompR_le</span> <span class=\"n\">ContinuousLinearMap.norm_precompR_le</span>\n</code></pre></div>\n<p>where it says <code>failed to synthesize instance SeminormedAddCommGroup ((E‚Çó ‚ÜíL[ùïú] F‚Çó) ‚ÜíL[ùïú] E‚Çó ‚ÜíL[ùïú] G‚Çó)</code> at <code>op_norm_comp_le _ _</code> (the first proof in the calc block).</p>",
        "id": 356885318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615220
    },
    {
        "content": "<p>I experienced some similar errors elsewhere, which I worked around by adding things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: this instance should just be `inferInstance`,</span>\n<span class=\"c1\">-- and indeed simply unneeded.</span>\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Norm</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E‚Çó</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚Çó</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚Çó</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">G‚Çó</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">hasOpNorm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"o\">((</span><span class=\"n\">E‚Çó</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F‚Çó</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E‚Çó</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">G‚Çó</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>(which I'd also like an explanation / solution for!), but I haven't been able to identify the correct incantation here.</p>",
        "id": 356885463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683615262
    },
    {
        "content": "<p>Okay, it compiles with reenableeta.</p>",
        "id": 356939841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683629320
    },
    {
        "content": "<p>Okay, I've now got <code>Analysis.NormedSpace.OperatorNorm</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> compiling, but it takes <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4936740129/jobs/8824645556\">a ridiculously long time</a>, and is cancelled because it exceed the 6 hour CI limit.</p>",
        "id": 357429196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683766124
    },
    {
        "content": "<p>I've also made <a href=\"https://github.com/leanprover-community/mathlib4/pull/3903\">!4#3903</a>, which is the supremum of the <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/3414\">!4#3414</a> (reenableeta) branches, which verifies that the same file takes only a few minutes to compile there.</p>",
        "id": 357429760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683766403
    },
    {
        "content": "<p>Things to do:</p>\n<ul>\n<li>If anyone would like to hack at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3708\">!4#3708</a> to see if some typeclass surgery can improve the situation, that would be great. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, I know you're good at this. :-)</li>\n<li>It would be very helpful if we can provide standalone examples of this scenario:<ul>\n<li>Requires etaExperiment</li>\n<li>but is extremely slow</li>\n<li>but is fast with <a href=\"https://github.com/leanprover-community/mathlib4/pull/3414\">!4#3414</a> (i.e. with lean-toolchain <code>gebner/lean4:reenableeta230506</code>)</li>\n</ul>\n</li>\n<li>Maybe we can try to minimize down from <code>OperatorNorm</code> itself, but it feels like we are <em>very</em> far into Mathlib at this point!</li>\n</ul>",
        "id": 357430145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683766619
    },
    {
        "content": "<p>How does this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span>\n</code></pre></div>\n<p>run on  the other branch. It doesn't require etaExp but it does time out.</p>",
        "id": 357434057,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683768620
    },
    {
        "content": "<p>It is instant on <code>reenableeta</code>.</p>",
        "id": 357439132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683771200
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- but times out under `etaExperiment`.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">60000</span> <span class=\"k\">in</span> <span class=\"c1\">-- usual limit is 20000</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- still works with a higher timelimit.</span>\n</code></pre></div>\n<p>We should try to minimize the imports on this one.</p>",
        "id": 357439425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683771399
    },
    {
        "content": "<p>Somewhat implausibly, it is a three body interaction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- but times out under `etaExperiment`.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">60000</span> <span class=\"k\">in</span> <span class=\"c1\">-- usual limit is 20000</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- still works with a higher timelimit.</span>\n</code></pre></div>\n<p>replacing any one of those three imports with its own imports causes the timeout to vanish. :-)</p>",
        "id": 357441173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683772307
    },
    {
        "content": "<p>This is certainly a small enough set of imports that we could de-mathlib-ify it.</p>",
        "id": 357441389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683772406
    },
    {
        "content": "<p>Halfway through de-mathlib-ing it, but have to head out for a while. Thanks for the example, <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>!</p>",
        "id": 357444738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683773710
    },
    {
        "content": "<p>Looking at this now. The problematic declaration in <code>Mathlib.Algebra.Field.Basic</code> seems to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.isDomain</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">DivisionRing.isDomain</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Let me reiterate my frustration with being unable to turn off the \"VS Code insists on reporting the total number of errors in open files as opposed to the number of errors in the scratch file you're working on\" feature, because I'm in the middle of porting a file and I don't really want to start closing other tabs. It makes this debugging job just that little bit harder.</p>",
        "id": 357495200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683791165
    },
    {
        "content": "<p>Is <a href=\"https://github.com/microsoft/vscode/issues/30038#issuecomment-551292515\">this</a> what you want?</p>",
        "id": 357496426,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683791499
    },
    {
        "content": "<p>I want what I had with Lean 3! (either that or I am hallucinating Lean 3 behaviour). I want \"0 errors\" in the blue line at the bottom if there are 0 errors in the file I have open, not \"n errors\" where n is the total number of errors in a random file I'm half way through porting in another tab.</p>\n<p>Getting back to the issue at hand (which I don't want to derail), here are the problematic declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Data.Int.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Int.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Cast.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Monotone.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Nontrivial</span>\n\n<span class=\"c1\">-- import Mathlib.Algebra.Ring.Regular</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Regular.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"c1\">-- import Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Units.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Commute</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">‚Ñ§</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_mul</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_zero</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_comm</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_add</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_mul</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_one</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">Int.one_mul</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n  <span class=\"n\">npow_zero</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">npow_succ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_assoc</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_comm</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_assoc</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_zero</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_add</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_left_neg</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑*¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_mul</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.add_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑*¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">Int.zero_mul</span>\n  <span class=\"n\">zsmul_succ'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">ofNat_succ</span><span class=\"o\">,</span> <span class=\"n\">Int.add_mul</span><span class=\"o\">,</span> <span class=\"n\">Int.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">zsmul_neg'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">negSucc_coe</span><span class=\"o\">,</span> <span class=\"n\">ofNat_succ</span><span class=\"o\">,</span> <span class=\"n\">Int.neg_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Int.sub_eq_add_neg</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">intCast</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">intCast_ofNat</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">intCast_negSucc</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">IsDomain.toCancelCommMonoidWithZero</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">mul_left_cancel_of_ne_zero</span> <span class=\"o\">:=</span> <span class=\"n\">IsLeftCancelMulZero.mul_left_cancel_of_ne_zero</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">DivisionRing.isDomain</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"n\">NoZeroDivisors.to_isDomain</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">division_ring.is_domain</span> <span class=\"n\">DivisionRing.isDomain</span>\n\n<span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.isDomain</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">DivisionRing.isDomain</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">field.is_domain</span> <span class=\"n\">Field.isDomain</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- but times out under `etaExperiment`.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">60000</span> <span class=\"k\">in</span> <span class=\"c1\">-- usual limit is 20000</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">‚Ñ§</span> <span class=\"c1\">-- still works with a higher timelimit.</span>\n</code></pre></div>\n<p>(and now I also have to head out for a while)</p>",
        "id": 357498616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683791953
    },
    {
        "content": "<p>I've mnimised this file, hopefully posting soon.</p>",
        "id": 357500683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683792329
    },
    {
        "content": "<p>Okay, this is what I have! Please feel free to suggest further reductions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># An etaExperiment timeout</span>\n\n<span class=\"cm\">The purpose of this file is to demonstrate a typeclass search that</span>\n<span class=\"cm\">* times out with `etaExperiment`</span>\n<span class=\"cm\">* is fast on `lean-toolchain` `gebner/lean4:reenableeta230506`</span>\n<span class=\"cm\">* is realistic, i.e. is a minimisation of something appearing in mathlib.</span>\n\n<span class=\"cm\">I've taken the example Matthew Ballard showed me:</span>\n<span class=\"cm\">```</span>\n<span class=\"cm\">import Mathlib</span>\n\n<span class=\"cm\">#synth Zero ‚Ñ§</span>\n<span class=\"cm\">```</span>\n<span class=\"cm\">and minimised it.</span>\n\n<span class=\"cm\">I've used `sorry` liberally,</span>\n<span class=\"cm\">but not changed the typeclass inheritance structure at all relative to mathlib4.</span>\n<span class=\"cm\">(It could probably be minimized further, but I think this is not the point?)</span>\n\n<span class=\"cm\">This file is minimised in the sense that:</span>\n<span class=\"cm\">* removing any command should either cause a new error, or remove the timeout.</span>\n<span class=\"cm\">* removing any field of a structure, and sorrying a field of an instance, should do the same.</span>\n\n<span class=\"cm\">Section titles correspond to the files the material came from the mathlib4/std4.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Std.Classes.Cast</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NatCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">IntCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Std.Classes.Cast</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Std.Data.Int.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Int</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Std.Data.Int.Lemmas</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Std.Classes.RatCast</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RatCast</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Std.Classes.RatCast</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‚Äπ</span><span class=\"n\">Zero</span> <span class=\"n\">Œ±</span><span class=\"o\">‚Ä∫</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‚Äπ</span><span class=\"n\">One</span> <span class=\"n\">Œ±</span><span class=\"o\">‚Ä∫</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroup</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">DivInvMonoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Div</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">SubNegMonoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Sub</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SubNegMonoid</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddGroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Logic.Nontrivial</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Nontrivial</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Logic.Nontrivial</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">M‚ÇÄ</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsLeftCancelMulZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsRightCancelMulZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsCancelMulZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">IsLeftCancelMulZero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">IsRightCancelMulZero</span> <span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">class</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">S‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">S‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">S‚ÇÄ</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">M‚ÇÄ</span>\n<span class=\"kd\">class</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">M‚ÇÄ</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">M‚ÇÄ</span>\n<span class=\"kd\">class</span> <span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">M‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">IsLeftCancelMulZero</span> <span class=\"n\">M‚ÇÄ</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Data.Int.Cast.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IntCast</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroup</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Data.Int.Cast.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">class</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n    <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">R</span>\n<span class=\"kd\">class</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">Œ±</span>\n<span class=\"kd\">instance</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsDomain</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">IsCancelMulZero</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">Int.mul_one</span> <span class=\"c1\">-- Replacing this with `sorry` makes the timeout go away!</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Int.add_zero</span> <span class=\"c1\">-- Similarly here.</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">IsDomain</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">IsDomain.toCancelCommMonoidWithZero</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">CancelCommMonoidWithZero</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IsDomain</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Ring.Regular</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DivisionRing</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">DivInvMonoid</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">RatCast</span> <span class=\"n\">K</span> <span class=\"n\">where</span>\n<span class=\"kd\">class</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Field.isDomain</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"c1\">-- Finally, the example:</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">Int</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">Int</span> <span class=\"c1\">-- but times out under `etaExperiment`.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- usual limit is 20000, and this takes even longer in real mathlib4</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">50000</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Zero</span> <span class=\"n\">Int</span> <span class=\"c1\">-- still works with a higher timelimit.</span>\n</code></pre></div>",
        "id": 357506114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683793500
    },
    {
        "content": "<p>If this is capturing what we want / people have had a chance to minimise, I'll post this as a Lean4 issue, as hopefully if reenableeta is viable then this file can become a test case.</p>\n<p>(Alternatively we might learn that we're doing something stupid by looking at this example. :-)</p>",
        "id": 357507180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683793751
    },
    {
        "content": "<p>If anyone is curious to see the typeclass trace, it is <a href=\"https://gist.github.com/semorrison/2b7d378a9e788a8a3736573afcc1f6f2\">here</a>. (I expanded out every node taking &gt;0.1s.) I don't think it has any surprises: it repeating checks that two propositional fields are defeq (when it should already know because their types are the same), and then has to do defeq checks on instances again inside of that.</p>",
        "id": 357509397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683794251
    },
    {
        "content": "<p>Is the \"checking same-type prop fields for defeq takes a long time\" issue the same as <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> or does it just become much more visible due to <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a>? I don't know if the problem is checking if the types are actually the same, or if it is something else</p>",
        "id": 357512360,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683794971
    },
    {
        "content": "<p>Gabriel has just written up a great PR describing the issue at <a href=\"https://github.com/leanprover/lean4/pull/2210\">https://github.com/leanprover/lean4/pull/2210</a></p>",
        "id": 357516304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683795887
    },
    {
        "content": "<p>I would be interested in trying this example against <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> but I don't know how to do this because when I invoke <code>lean</code> or <code>lake</code> it wants to download assets, and as far as I can see the branch doesn't have any assets because the corresponding version of lean is not a release. Does this make any sense?</p>\n<p>I'd also like to be able to answer questions of the form \"does <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> help with <code>port/RingTheory.Polynomial.Quotient</code>?\" but again I don't know how to check this.</p>",
        "id": 357543478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683802518
    },
    {
        "content": "<p>Deleted for inaccurate info</p>",
        "id": 357545221,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683802975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, two options:</p>\n<ol>\n<li>for this example, it's just a matter of editing <code>lean-toolchain</code> to say <code>gebner/lean4:reenableeta230506</code>.</li>\n<li>\n<p>if you want to work at the bleeding edge of mathlib, take the branch <code>X</code> you're interested in, run </p>\n<ul>\n<li><code>git checkout -b X_reenableeta</code></li>\n<li><code>git merge reenableeta</code></li>\n<li><code>lake exe cache get</code></li>\n<li><code>lake build</code></li>\n</ul>\n</li>\n</ol>",
        "id": 357545237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683802978
    },
    {
        "content": "<p>(Not my branch, Gabriel's. I've merged master into it a few times recently to keep it fresh.)</p>",
        "id": 357545413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683803014
    },
    {
        "content": "<p>Deleted for clarity.</p>",
        "id": 357546421,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683803202
    },
    {
        "content": "<p>Ah ok. I see. I am not up to date.</p>",
        "id": 357547177,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683803386
    },
    {
        "content": "<p>I'm with Jujian right now who is also interested in this question and he also suggested editing <code>lean-toolchain</code> to <code>gebner/lean4:reenableeta230506</code>, but I'm very unclear about whether that release is anything to do with <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> (it was made a few days before the commits of that PR for example).</p>",
        "id": 357547204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683803394
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2110\">lean4#2110</a> is coming from the branch that made the tool chain</p>",
        "id": 357547606,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683803490
    },
    {
        "content": "<p>OK thanks!</p>",
        "id": 357547634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683803503
    },
    {
        "content": "<p><code>gebner/lean4:reenableeta230506</code> is based on a tag, not a branch, so it won't stay up to date with <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> if changes are made there, but I think it is safe to base your experiments of it for now.</p>",
        "id": 357548594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683803733
    },
    {
        "content": "<p>Also for <code>RingTheory.Polynomial.Quotient</code>the dependencies are probably already in branch <code>mathlib4/reenableeta</code>. In this case, I usually checkout that branch and run </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>checkout<span class=\"w\"> </span>port/RingTheory.Polynomial.Quotient<span class=\"w\"> </span>--<span class=\"w\"> </span>Mathlib/RingTheory/Polynomial/Quotient.lean\n</code></pre></div>\n<p>to pull in just that file. This might save some extraneous merge conflict resolution and/or building time.</p>",
        "id": 357553439,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683804743
    },
    {
        "content": "<p><code>mathlib/reenableeta</code> has been very useful to the porting effort. Are we planning on keeping up to date with <code>master</code>?</p>",
        "id": 357570461,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683808498
    },
    {
        "content": "<p>I tried <a href=\"https://github.com/leanprover/lean4/pull/2210\">https://github.com/leanprover/lean4/pull/2210</a> on porting <code>RingTheory.Polynomial.Quotient</code>, it still times out, but it improved the issue enough so that if one just split proofs, the file compiles. The experiment is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3932\">!4#3932</a>. Without <code>reenableeta</code>, splitting the proof won't make the time out go away.</p>",
        "id": 357752335,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1683866630
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19015\">#19015</a> is a split which should let us port the beginnings of integration theory without needing <code>Analysis.NormedSpace.OperatorNorm</code>.</p>",
        "id": 358351466,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684122110
    },
    {
        "content": "<p>Why did Leo merge <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> without incorporating the second test file that was cowritten by Scott and me?</p>",
        "id": 358556633,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684179683
    },
    {
        "content": "<p>Probably because it wasn't in the pr. You could make a new pr to add it to the test suite</p>",
        "id": 358557301,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684179912
    },
    {
        "content": "<p>Then why was Scott's first file included?</p>",
        "id": 358561772,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684181398
    },
    {
        "content": "<p>Because Gabriel added it to the PR four days ago</p>",
        "id": 358568649,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684183822
    },
    {
        "content": "<p>Actually I now think the second test is redundant ‚Äì the full OperatorNorm file is the real test</p>",
        "id": 358569360,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684184112
    },
    {
        "content": "<p>Yes, I think we'll be okay with just the one test. While we didn't know just how much of a test suite the Lean 4 devs would want, I think it was super helpful to keep making more, but if the timing didn't work out to get all of them included in the PR that's a fine outcome too! I appreciate your willingness to help out making my broken attempt at that test work properly. :-)</p>",
        "id": 358571014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684184728
    }
]