[
    {
        "content": "<p>What do you think about replacing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModelWithCorners.Boundaryless#doc\">docs#ModelWithCorners.Boundaryless</a> with this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ModelWithCorners.IsTrivial</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_self</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">modelWithCornersSelf</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span>\n</code></pre></div>",
        "id": 370068884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873387
    },
    {
        "content": "<p>Or adding this as a new typeclass.</p>",
        "id": 370069173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873431
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5499\">#5499</a></p>",
        "id": 370069341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873448
    },
    {
        "content": "<p>The point of the boundaryless typeclass is that it is stable under products. Do you have a use case where it doesn't work for you?</p>",
        "id": 370069536,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687873478
    },
    {
        "content": "<p><code>IsTrivial</code> is also stable under products.</p>",
        "id": 370069821,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873521
    },
    {
        "content": "<p>The use case is to move between <code>MDifferentiable I I' (f : E ‚Üí F)</code> and <code>Differentiable ùïú f</code>.</p>",
        "id": 370070173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873569
    },
    {
        "content": "<p>Ah, yes, it is a propositional equality that you require, not a definitional one.</p>",
        "id": 370070302,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687873588
    },
    {
        "content": "<p>We have, e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Smooth.prod_mk#doc\">docs#Smooth.prod_mk</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Smooth.prod_mk_space#doc\">docs#Smooth.prod_mk_space</a>.</p>",
        "id": 370070530,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873623
    },
    {
        "content": "<p>I suggest that we add this new typeclass and define lemmas like <code>Smooth.cod_to_space</code> <code>Smooth.cod_of_space</code> instead.</p>",
        "id": 370071137,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687873720
    },
    {
        "content": "<p>I'm not sure I understand how the new design would turn the two two lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Smooth.prod_mk#doc\">docs#Smooth.prod_mk</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Smooth.prod_mk_space#doc\">docs#Smooth.prod_mk_space</a> into just one. I'll understand better when you PR it! I would be interested in <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> thoughts, because he had to use a lot the library in concrete situations for sphere eversion.</p>",
        "id": 370077698,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687874787
    },
    {
        "content": "<p>We can leave <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Smooth.prod_mk#doc\">docs#Smooth.prod_mk</a> only. If you have <code>h : Smooth I I' f</code> with <code>[I'.IsTrivial]</code>, then <code>h.cod_to_space</code> will give you <code>Smooth I ùìò(ùïú, F) f</code>.</p>",
        "id": 370082967,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687875652
    },
    {
        "content": "<p>I have to wait with a PR till <code>mathlib4</code> is open for refactors.</p>",
        "id": 370083252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687875704
    },
    {
        "content": "<p>ok, I get it. Looks good to me!</p>",
        "id": 370085136,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687875982
    },
    {
        "content": "<p>I found a very important flaw: the main issue is not about <code>I</code> being equal to the trivial model; the main issue is about <code>ChartedSpace</code> instances being equal.</p>",
        "id": 372049866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688398227
    }
]