[
    {
        "content": "<p><code>measurability</code> has a tough time with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">ω.1.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">measurability</span>\n</code></pre></div>\n<p>timing out after 20000 heartbeats.  Not sure if this is a bug, or the intended behavior.  (Of course, in this case <code>exact measurable_fst.comp measurable_fst</code> works instead.)  Adding <code>show Measurable (Prod.fst ∘ Prod.fst)</code> initially doesn't seem to help. On the other hand, <code>measurability</code> works for <code>fun ω : Ω × Ω ↦ ω.1</code>.</p>",
        "id": 404131181,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700933792
    },
    {
        "content": "<p>I don't have a complete answer to this, but  <code>measurability</code> is implemented using <code>aesop</code>. Here's the second example with aesop tracing turned on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span> <span class=\"bp\">↦</span> <span class=\"n\">ω.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">measurability</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">measurable_fst</span>\n</code></pre></div>",
        "id": 404250787,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700999852
    },
    {
        "content": "<p>In the trace messages you see on the infoview, the first safe rule that succeeds is measurable_fst. So I tried this out, but this time by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span> <span class=\"bp\">↦</span> <span class=\"n\">ω.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Measurable</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">mt</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable_fst</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mt</span>\n</code></pre></div>",
        "id": 404251128,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700999966
    },
    {
        "content": "<p>here lean is able to tell that <code>fun ω : Ω × Ω ↦ ω.1</code> is the same as <code>Prod.fst</code>.</p>",
        "id": 404251204,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700999995
    },
    {
        "content": "<p>Doing the same for your original example yields </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">⁻¹'</span> <span class=\"bp\">?</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">MeasurableSet</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ω.1.1</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 404251354,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701000060
    },
    {
        "content": "<p>Yeah, because those types don't match <span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span>. My understanding is that <code>measurability</code> tries to apply <code>.comp</code>, but unification gets out of hand</p>",
        "id": 404251516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701000137
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measurable.fst#doc\">docs#MeasureTheory.Measurable.fst</a> to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.fst#doc\">docs#Continuous.fst</a> ?</p>",
        "id": 404251545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701000166
    },
    {
        "content": "<p>You mean this: <code>measurable_fst</code> (closest in name)?</p>",
        "id": 404251572,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701000205
    },
    {
        "content": "<p>No, the <code>.fst</code> version would work with <code>apply</code>; though I can't tell whether it's used by <code>continuity</code> (it's not tagged inline with the attribute, but maybe the attribute is added later)</p>",
        "id": 404251651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701000294
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/8666bd82efec40b8b3a5abca02dc9b24bbdf2652/Mathlib/MeasureTheory/MeasurableSpace/Basic.lean#L705-L706\">Found it</a></p>",
        "id": 404252120,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701000723
    },
    {
        "content": "<p>and it is not tagged with measurability at the point of definition</p>",
        "id": 404252189,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701000801
    },
    {
        "content": "<p>Is it possible to find a prefix of aesop's trace when the maxheartbeat issue occurs (something like the  <code>head -n</code> shell command)?</p>",
        "id": 404252541,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701001106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> :<br>\nThe following also fails for some reason (EDIT : Removed unfolds and intros as suggested by Eric below. Same result):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">∘</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measurable.fst</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable_fst</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">∘</span> <span class=\"n\">Prod.fst</span><span class=\"o\">)</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measurable.fst</span>\n  <span class=\"n\">measurability</span> <span class=\"c1\">-- fails even though the goal resembles the third example</span>\n  <span class=\"c\">/-</span><span class=\"cm\">apply measurable_fst</span>\n<span class=\"cm\">  exact m_t-/</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">×</span> <span class=\"bp\">Ω</span> <span class=\"bp\">↦</span> <span class=\"n\">ω.1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">measurability</span>\n</code></pre></div>",
        "id": 404254937,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701002777
    },
    {
        "content": "<p>Why did you do the unfold and intro steps?</p>",
        "id": 404255011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701002877
    },
    {
        "content": "<p>It was copy pasted from the first proof which works</p>",
        "id": 404255075,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701002905
    },
    {
        "content": "<p>I am not sure why this would affect the measurability tactic since the first goal before the  <code>measurability</code> line is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">hf</span>\n<span class=\"bp\">Ω</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span>\n<span class=\"n\">m_t</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a.1</span>\n</code></pre></div>",
        "id": 404255217,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701003006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/measurability.20tactic.20times.20out.20on.20Prod.2Efst.20.5Ccirc.20Prod.2Efst/near/404255011\">said</a>:</p>\n<blockquote>\n<p>Why did you do the unfold and intro steps?</p>\n</blockquote>\n<p>Removed them now. It doesn't make a difference to the result. What I was trying to do was remove the obstacle of <code>measurability</code>  not applying Measurable.fst by manually applying it. My hope was that <code>measurability</code> can do the rest.</p>",
        "id": 404262877,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701008768
    }
]