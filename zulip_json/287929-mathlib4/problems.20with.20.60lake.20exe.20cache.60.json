[
    {
        "content": "<p>We currently have two problems with <code>lake exe cache get</code> in mathlib4:</p>\n<ul>\n<li>it does not cache anything from ProofWidgets (this is usually not a problem, but anytime you change lean versions or touch the lakefile these files will rebuild, but could be cached)</li>\n<li><code>lake exe cache get Archive/Imo/Imo2001Q6.lean</code> fails rather than either retrieving a cache for the IMO file and all its dependencies, or just retrieving a cache for the mathlib4 files it depends on.</li>\n</ul>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5109\">!4#5109</a> fixes these two problems.</p>",
        "id": 366701499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> asked to move the discussion of that PR here; he had concerns about whether we should be fixing these problems before planning how to allow non-mathlib caches, or upstreaming <code>cache</code>.</p>",
        "id": 366701711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896426
    },
    {
        "content": "<p>My preference is to not to wait on those problems (which we've neither made a plan for, nor done the work for) in order to fix these immediate problems.</p>\n<p>That said, I totally agree that we should solve both of those problems!</p>",
        "id": 366701891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896487
    },
    {
        "content": "<p>The ProofWidgets fix is unproblematic to me</p>",
        "id": 366701932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896498
    },
    {
        "content": "<p>But I don't think we should be caching the archive files at all</p>",
        "id": 366701968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896513
    },
    {
        "content": "<p>I'm not sure exactly what you meant by the cache not understanding archive inputs</p>",
        "id": 366702108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896543
    },
    {
        "content": "<p>but I don't think we should waste azure space, and more importantly users' download time, on cache files for things that are never used as dependencies</p>",
        "id": 366702246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896594
    },
    {
        "content": "<p>Try running <code>lake exe cache get Archive/Imo/Imo2001Q6.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"n\">Archive</span><span class=\"bp\">/</span><span class=\"n\">Imo</span><span class=\"bp\">/</span><span class=\"n\">Imo2001Q6.lean</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"k\">match</span> <span class=\"n\">for</span> <span class=\"n\">Archive</span><span class=\"bp\">/</span><span class=\"n\">Imo</span><span class=\"bp\">/</span><span class=\"n\">Imo2001Q6.lean</span>\n</code></pre></div>",
        "id": 366702385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896639
    },
    {
        "content": "<p>that's a weird way to say file not found</p>",
        "id": 366702507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896660
    },
    {
        "content": "<p>No -- the file exists just fine.</p>",
        "id": 366702593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896671
    },
    {
        "content": "<p>that's a weird way to say cache file not found</p>",
        "id": 366702655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896687
    },
    {
        "content": "<p>It's not even that --- it hasn't gone looking on the azure server by that point.</p>",
        "id": 366702762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896704
    },
    {
        "content": "<p>yeah I get it</p>",
        "id": 366702787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896710
    },
    {
        "content": "<p>what do you expect it to say if you cache get the readme file?</p>",
        "id": 366702870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896725
    },
    {
        "content": "<p>Okay, good point. :-)</p>",
        "id": 366702985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896757
    },
    {
        "content": "<p>It just seems surprising to me to not do this. The only reason I made this PR was that I honestly typed <code>lake exe cache get Archive/Imo/Imo2001Q6.lean</code> earlier today, when looking at Yury's IMO PRs!</p>",
        "id": 366703234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686896802
    },
    {
        "content": "<p>We can certainly improve the error message, like I said that's a weird way to say that the file's not there</p>",
        "id": 366703321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896829
    },
    {
        "content": "<p>but the file isn't there</p>",
        "id": 366703394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896853
    },
    {
        "content": "<p>and I don't think it should be</p>",
        "id": 366703414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896861
    },
    {
        "content": "<p>Although, when you typed <code>lake exe cache get Archive/Imo/Imo2001Q6.lean</code> there is actually a reasonable interpretation of that command which isn't just an error, which is to download all the dependencies of that file</p>",
        "id": 366703654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896919
    },
    {
        "content": "<p>ideally it should be able to do this even for files which are not mathlib files</p>",
        "id": 366703909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686896979
    },
    {
        "content": "<p>I think there should either be a flag for this, or a different exit code (or both); for the sake of scripting, I think it's good to know whether <code>exe cache get Foo.lean</code> has obtained a complete or a partial cache</p>",
        "id": 366705766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686897332
    },
    {
        "content": "<p>right now cache get doesn't really have a plumbing version but it certainly could</p>",
        "id": 366707655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897740
    },
    {
        "content": "<p>e.g. <code>-q</code> quiet mode and just return the result in the exit code</p>",
        "id": 366707773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897775
    },
    {
        "content": "<p>I don't think there is any need to differentiate between a file like this which is not in the cache because it is not a mathlib file, compared to a file which is not in the cache because it just hasn't been uploaded yet</p>",
        "id": 366708114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897879
    },
    {
        "content": "<p>at least in terms of the usual progress bar mechanics</p>",
        "id": 366708172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897897
    },
    {
        "content": "<p>so you would just get <code>99% success</code> in this case</p>",
        "id": 366708290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686897925
    },
    {
        "content": "<p>I tell Xena people \"first lake exe cache get, then lake build\" and if you're just installing lean 4/mathlib for the first time then often the lake build does something</p>",
        "id": 366710829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686898568
    },
    {
        "content": "<p>So it seems we have several options for <code>lake exe cache get Archive/Foo.lean</code></p>\n<ol>\n<li>get everything, including <code>Foo.olean</code></li>\n<li>get whatever dependencies of Foo are available in the cache, warning that <code>Foo.olean</code> is not covered by the caching policy</li>\n<li>get whatever dependencies of Foo are available in the cache, with the only clue that the olean is not available being a <code>99% success</code> message</li>\n<li>fail with an error message that <code>Foo</code> is not covered by the caching policy</li>\n<li>fail with an inscrutable error message</li>\n</ol>\n<p>We are currently at 5. My PR results in 1. (which, as Mario points out, comes at the cost of <code>lake exe cache get</code> now retrieving some extra files that users might prefer not to download.)</p>\n<p>My personal preference for behaviour is in the order listed above. I'm happy to try to implement 2., 3., or 4. if there is consensus that one of those is preferable to 1. (Or, of course, to let someone else do this.)</p>",
        "id": 366712014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686898862
    },
    {
        "content": "<p>It seems you are missing<br>\n1.5 get all the dependencies of <code>Foo.olean</code>, including itself, when running <code>lake exe cache get Archive/Foo.lean</code>, but do not get it when running <code>lake exe cache get</code></p>",
        "id": 366712936,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1686899067
    },
    {
        "content": "<p>I don't think there is any reason to download <code>Archive/Foo.olean</code>, not even your initial use case</p>",
        "id": 366713866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899275
    },
    {
        "content": "<p>if you want to open the file in the editor <code>Foo.olean</code> is not of use to you</p>",
        "id": 366713965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899289
    },
    {
        "content": "<p>Does that not apply to all leaf files? That would be a great way of reducing the size of the cache.</p>",
        "id": 366714227,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1686899350
    },
    {
        "content": "<p>well there are technically no leaf files in mathlib except <code>Mathlib.lean</code></p>",
        "id": 366714363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899379
    },
    {
        "content": "<p>Uh okay but maybe we don't want cache for <code>Mathlib.lean</code> either</p>",
        "id": 366714617,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1686899423
    },
    {
        "content": "<p>plus external users want to be able to <code>import Mathlib</code></p>",
        "id": 366714689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899437
    },
    {
        "content": "<p>so we do want it</p>",
        "id": 366714733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899447
    },
    {
        "content": "<p>What about a <code>--no-leaf</code> flag?</p>",
        "id": 366714823,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1686899467
    },
    {
        "content": "<p>I think it would just be <code>cache get --deps Mathlib/Foo.lean</code></p>",
        "id": 366714934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899498
    },
    {
        "content": "<p>This is one of many reasons I would like to hurry up and get this integrated with lake, we are literally reinventing lake here and I don't like it</p>",
        "id": 366715233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686899569
    },
    {
        "content": "<p>So we'll stick with 5. until such a time?</p>",
        "id": 366718923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686900477
    },
    {
        "content": "<p>well I would assume there are some easy ways to make the error message slightly less inscrutable</p>",
        "id": 366719758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686900665
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5128\">!4#5128</a> is the part we can do in the meantime, teaching <code>cache</code> about <code>ProofWidgtes</code>.</p>",
        "id": 366719775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686900668
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5129\">!4#5129</a> replaces <code>uncaught exception: No match for Archive/Imo/Imo2001Q6.lean</code> with <code>uncaught exception: Archive/Imo/Imo2001Q6.lean is not covered by the olean cache.</code>.</p>",
        "id": 366720647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686900870
    },
    {
        "content": "<p>(you should double check that my println suggestion actually works as intended)</p>",
        "id": 366721496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686901053
    },
    {
        "content": "<p>Maybe something useful we could do is plan some <em>other</em> features we would like to add to <code>lake</code>. I feel like with the current situation of \"only Mac has ever contributed to lake\", it might be good to have some small things we could add to get the ball rolling.</p>\n<p>My suggestion would be <code>lake mk-all</code> (perhaps a better name), which regenerates <code>Mathlib.lean</code>, <code>Archive.lean</code>, and so on. (But obviously doing so generically, by looking in the lakefile to decide what needs doing.)</p>\n<p>Other ideas?</p>",
        "id": 366724445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686901752
    },
    {
        "content": "<p>maybe <code>mk-all</code> should just be an <code>exe</code>, utilizing a lake plumbing command to make it a one-liner</p>",
        "id": 366724999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686901875
    },
    {
        "content": "<p>I don't see how lake would know what files to generate otherwise</p>",
        "id": 366725073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686901893
    },
    {
        "content": "<p>I was imagining:</p>\n<ul>\n<li>for each <code>lean_lib XYZ where</code> in the lakefile, generate <code>XYZ.lean</code> importing every <code>.lean</code> file under <code>XYZ/</code></li>\n</ul>\n<p>as we currently do in <code>.github/workflows/build.yml</code>.</p>",
        "id": 366751577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686907377
    },
    {
        "content": "<p>But <code>lean_lib XYZ where</code> imports <code>XYZ.lean</code></p>",
        "id": 366754999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686908055
    },
    {
        "content": "<p>which doesn't exist (presumably) or is out of date</p>",
        "id": 366755106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686908079
    },
    {
        "content": "<p>I don't think that's right. e.g. with current <code>mathlib4</code>, try:</p>\n<ul>\n<li>delete <code>./Archive.lean</code></li>\n<li>verify <code>lake build</code> works fine</li>\n<li>(and therefore <code>lake mk-all</code> could work too)</li>\n<li>but <code>lake build Archive</code> fails</li>\n</ul>",
        "id": 366756184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686908293
    },
    {
        "content": "<p>the fact that one particular <code>XYZ.lean</code> is missing or out of date doesn't prevent us from running <code>lake</code></p>",
        "id": 366756250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686908310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/problems.20with.20.60lake.20exe.20cache.60/near/366715233\">said</a>:</p>\n<blockquote>\n<p>This is one of many reasons I would like to hurry up and get this integrated with lake, we are literally reinventing lake here and I don't like it</p>\n</blockquote>\n<p>Yes, please. <a href=\"https://github.com/leanprover-community/lake/pull/153\">lake#153</a></p>\n<p>My initial idea for <code>cache</code> was that it would be a quick and dirty workaround while Lake itself doesn't implement a proper solution. The target audience was ppl doing the porting.</p>",
        "id": 366792218,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1686915129
    },
    {
        "content": "<p>The linkifier is broken because it links to <code>leanprover-community/lake</code> instead of <code>leanprover/lake</code>.</p>",
        "id": 366793584,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1686915402
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/issues/153\">https://github.com/leanprover/lake/issues/153</a></p>",
        "id": 366793839,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1686915466
    }
]