[
    {
        "content": "<p>I have this file mostly building, but:</p>\n<ul>\n<li>It needs to be re-ported tomorrow on the latest mathport</li>\n<li>Unsurprisingly it runs into <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> and only works for now with <code>etaExperiment true</code></li>\n<li>While trying to workaround <a href=\"https://github.com/leanprover/lean4/pull/1926\">lean4#1926</a>, I seem to have run into a hygiene issue with <code>suffices</code>?</li>\n</ul>",
        "id": 339227694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677801598
    },
    {
        "content": "<p>I've left review comments for each</p>",
        "id": 339227859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677801654
    },
    {
        "content": "<p>The last one is particularly worrying, the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h_lean4_1926_aux.mpr</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">∈</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span>\n<span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the goal view never shows <code>x✝¹</code></p>",
        "id": 339228789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677802124
    },
    {
        "content": "<p>Thanks for taking on this file!</p>",
        "id": 339251594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677817189
    },
    {
        "content": "<p>Re •₂: do you mean that none of the other 2074-workarounds seem to work?</p>",
        "id": 339251665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677817224
    },
    {
        "content": "<p>I see, you need it once</p>",
        "id": 339251799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677817354
    },
    {
        "content": "<p>I fixed the remaining errors, and worked around the eta issue.</p>",
        "id": 339274942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677830776
    }
]