[
    {
        "content": "<p>Hi, is there any way to make this less tedious:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>    <span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">f1</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span> <span class=\"bp\">;</span> <span class=\"n\">trivial</span> <span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">f2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>You can see there is a lot of repetition in the middle (<code>constructor ; trivial ; constructor ; trivial</code>), but they are also surrounded by other commands so I can't use <code>&lt;;&gt;</code> at the start.</p>",
        "id": 398741772,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698343927
    },
    {
        "content": "<p>I came up with something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"n\">rotate_left</span>\n  <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">trivial</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">trivial</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But the <code>rotate_left</code> still feels a bit annoying to use.</p>",
        "id": 398742061,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698344046
    },
    {
        "content": "<p>(Sorry if I sound like I am just complaining, I don't mean it that way :D)</p>",
        "id": 398742106,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698344067
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.IntervalCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f1</span><span class=\"o\">,</span> <span class=\"n\">f2</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 398742694,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698344301
    },
    {
        "content": "<p>Ahh that works for this case, but not for my actual use case (I simplified too much <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) Let me simplify and share mine real quick</p>",
        "id": 398742855,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698344380
    },
    {
        "content": "<p>This is sort of silly, but just to mention this feature you can also use the <code>discharger</code> for <code>use</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">):</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>use (discharger := simp [*]) {1}</code> is roughly the same as <code>use {1} &lt;;&gt; simp [*]</code></p>",
        "id": 398742866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698344382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Dealing.20with.20multiple.20goals/near/398742855\">said</a>:</p>\n<blockquote>\n<p>Ahh that works for this case, but not for my actual use case (I simplified too much <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) Let me simplify and share mine real quick</p>\n</blockquote>\n<p>Actually, maybe a better idea is for me to finish my proof in the tedious way, then ask for golfing :)</p>",
        "id": 398743085,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698344458
    },
    {
        "content": "<p>It's <a href=\"https://gist.github.com/grhkm21/693db33980b0d86d01021c8c23c8f2f1\">here</a>. This is quite long, but making it shorter kinda risk losing the idea.<br>\nI am trying to prove A11, which asks to construct a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">B \\subseteq X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> such that some condition holds.<br>\nMy construction depends on hm1 and hm2 on line 26, but it's always either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> or <span class=\"tex-error\">$$B \\union \\{m\\}$$</span>, both of which is always a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. As annotated with (1) and (3), there's a lot of repetition in the proof, and I was wondering if that's necessary</p>",
        "id": 398749785,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698346827
    },
    {
        "content": "<p>If you don't have time for it, it's fine and not urgent, I just copy and paste a few times for now :D</p>",
        "id": 398750014,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698346900
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ggWO-KRaTYINrDRpNQmLhuaz/Screenshot-2023-10-26-at-20.02.12.png\">Screenshot-2023-10-26-at-20.02.12.png</a><br>\nHere's the proof being formalised, specifically the part with \"For each element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x \\in X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, ..., this procedure will not change the divisibility condition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>\".</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ggWO-KRaTYINrDRpNQmLhuaz/Screenshot-2023-10-26-at-20.02.12.png\" title=\"Screenshot-2023-10-26-at-20.02.12.png\"><img src=\"/user_uploads/3121/ggWO-KRaTYINrDRpNQmLhuaz/Screenshot-2023-10-26-at-20.02.12.png\"></a></div>",
        "id": 398750424,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698347015
    },
    {
        "content": "<p>A very small thing: if you want to save a <code>constructor</code> here and there, you can do <code>use B' ∪ {m}, ?_, ?_</code> for example.</p>",
        "id": 398752081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698347678
    },
    {
        "content": "<p>Here's a bit of deduplication:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A11</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">Pred</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">X</span> <span class=\"n\">using</span> <span class=\"n\">ind_min</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">X</span> <span class=\"n\">hm</span> <span class=\"n\">hind</span> <span class=\"n\">generalizing</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"bp\">∅</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">,</span> <span class=\"n\">subset_empty.mp</span> <span class=\"n\">hA</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">set</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">A.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hA'</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hB'₁</span><span class=\"o\">,</span> <span class=\"n\">hB'₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">A'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> We construct B as B' or B' ∪ {m} -/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB'₂</span>\n    <span class=\"k\">have</span> <span class=\"n\">hB'</span> <span class=\"o\">:=</span> <span class=\"n\">subset_trans</span> <span class=\"n\">hB'₁</span> <span class=\"bp\">$</span> <span class=\"n\">subset_cons</span> <span class=\"bp\">$</span> <span class=\"n\">min_not_mem</span> <span class=\"n\">hm</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hm₁</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hm₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PredElement</span> <span class=\"n\">B'</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">hB'</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> (2) -/</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">,</span> <span class=\"n\">filter_cons</span><span class=\"o\">,</span> <span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">hB'₂</span><span class=\"o\">,</span> <span class=\"n\">disjUnion_eq_union</span><span class=\"o\">]</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">filter_union_filter_neg_eq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter_eq'</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> (3) = (1) + (3)' -/</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span> <span class=\"n\">hB'</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">singleton_subset_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mem_cons_self</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> (3) = (1) + (3)' -/</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span> <span class=\"n\">hB'</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">singleton_subset_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mem_cons_self</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">hB'</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> (2) but with ite_true -&gt; ite_false -/</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">,</span> <span class=\"n\">filter_cons</span><span class=\"o\">,</span> <span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">hB'₂</span><span class=\"o\">,</span> <span class=\"n\">disjUnion_eq_union</span><span class=\"o\">]</span>\n      <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">filter_union_filter_neg_eq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter_eq'</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 398753205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698348171
    },
    {
        "content": "<p>I'd say don't worry about duplication of tactic scripts, since they mean different things each time. I wouldn't recommend doing this since it makes the proof unreadable, but just to mention it you could use <code>all_goals</code> and <code>first</code>, assuming that <code>sorry</code> really will be the same script between the two cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A11</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"n\">Pred</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">X</span> <span class=\"n\">using</span> <span class=\"n\">ind_min</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">X</span> <span class=\"n\">hm</span> <span class=\"n\">hind</span> <span class=\"n\">generalizing</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"bp\">∅</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">,</span> <span class=\"n\">subset_empty.mp</span> <span class=\"n\">hA</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">set</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">A.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hA'</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hB'₁</span><span class=\"o\">,</span> <span class=\"n\">hB'₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hind</span> <span class=\"n\">A'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> We construct B as B' or B' ∪ {m} -/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB'₂</span>\n    <span class=\"k\">have</span> <span class=\"n\">hB'</span> <span class=\"o\">:=</span> <span class=\"n\">subset_trans</span> <span class=\"n\">hB'₁</span> <span class=\"bp\">$</span> <span class=\"n\">subset_cons</span> <span class=\"bp\">$</span> <span class=\"n\">min_not_mem</span> <span class=\"n\">hm</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hm₁</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hm₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">PredElement</span> <span class=\"n\">B'</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">all_goals</span>\n      <span class=\"n\">first</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">hB'</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Pred</span><span class=\"o\">,</span> <span class=\"n\">filter_cons</span><span class=\"o\">,</span> <span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">hB'₂</span><span class=\"o\">,</span> <span class=\"n\">disjUnion_eq_union</span><span class=\"o\">]</span>\n          <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">filter_union_filter_neg_eq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n          <span class=\"n\">congr</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter_eq'</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">B'</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n          <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span> <span class=\"n\">hB'</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">singleton_subset_iff</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">mem_cons_self</span>\n          <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398753710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698348411
    },
    {
        "content": "<p>Ah, your point about code readability is also true. I will worry less about it then! I will study your code. Thanks!</p>",
        "id": 398754075,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698348587
    },
    {
        "content": "<p>I got the <a href=\"https://github.com/grhkm21/lean4/commit/c51b9d2de659b4db9b47844cb90f610167c2b26c\">final proof</a>, it's pretty terrible :P</p>",
        "id": 398763651,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698352543
    }
]