[
    {
        "content": "<p><span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> this file is not much fun</p>",
        "id": 327801477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676387802
    },
    {
        "content": "<p>it looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding.coe_fn_to_embedding\">docs#rel_embedding.coe_fn_to_embedding</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding.coe_fn_mk\">docs#rel_embedding.coe_fn_mk</a> didn't get ported? I'd expect them to be after <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RelEmbedding.map_rel_iff#doc\">docs4#RelEmbedding.map_rel_iff</a></p>",
        "id": 327807659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676389271
    },
    {
        "content": "<p>We could really do with a list of declarations from ported files in mathlib3 that don't exist in mathlib4 being shown on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a></p>",
        "id": 327808028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676389373
    },
    {
        "content": "<p>Oh, I guess here it was at least recorded:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/f982df521660a71cd1eb4d659f23c30bb13f4cc2/Mathlib/Order/RelIso/Basic.lean#L272-L273\">https://github.com/leanprover-community/mathlib4/blob/f982df521660a71cd1eb4d659f23c30bb13f4cc2/Mathlib/Order/RelIso/Basic.lean#L272-L273</a></p>",
        "id": 327808525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676389499
    },
    {
        "content": "<p>Should we abandon porting this file for now and split it first?</p>",
        "id": 327810465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676389999
    },
    {
        "content": "<p>All of it has to be ported anyways</p>",
        "id": 327810519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676390015
    },
    {
        "content": "<p>Two long and painful files sounds less bad than one very long and painful file</p>",
        "id": 327810541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676390021
    },
    {
        "content": "<p>If it is easy to split, sure.</p>",
        "id": 327810682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676390047
    },
    {
        "content": "<p>Although note that we can't actually use any backports at the moment as <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails.20after.20mathlib4.20update/near/327661706\">mathport is broken</a></p>",
        "id": 327810772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676390066
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18441\">#18441</a> does a split</p>",
        "id": 327814182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676390914
    },
    {
        "content": "<p>I found the bug in <code>add_le_of_limit</code>. The long proof term is replaced to <code>sorry</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_le_of_limit</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsLimit</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">b'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">b'</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"n\">l.le</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">le_of_not_lt</span> <span class=\"bp\">&lt;|</span>\n     <span class=\"n\">inductionOn</span> <span class=\"n\">a</span> <span class=\"gr\">sorry</span> <span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   inductionOn a</span>\n<span class=\"c1\">--     (sorryAx</span>\n<span class=\"c1\">--       (∀ (α : Type u_1) (r : α → α → Prop) [inst : IsWellOrder α r],</span>\n<span class=\"c1\">--         IsLimit b → (∀ (b' : Ordinal), b' &lt; b → type r + b' ≤ c) → ¬c &lt; type r + b))</span>\n<span class=\"c1\">--     H</span>\n<span class=\"c1\">-- argument has type</span>\n<span class=\"c1\">--   ∀ (b' : Ordinal), b' &lt; b → a + b' ≤ c</span>\n<span class=\"c1\">-- but function has type</span>\n<span class=\"c1\">--   IsLimit b → (∀ (b' : Ordinal), b' &lt; b → a + b' ≤ c) → ¬c &lt; a + b</span>\n</code></pre></div>\n<p>The parser mistakes <code>inductionOn a sorry h H</code> for <code>inductionOn a sorry H</code>.</p>",
        "id": 327996518,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676464517
    },
    {
        "content": "<p>This parser mistake is very weird... I've seen it before</p>",
        "id": 327998211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676464972
    },
    {
        "content": "<p>Can you trick Lean by going in tactic mode?</p>",
        "id": 327998244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676464983
    },
    {
        "content": "<p>I fixed it in tactic mode.<br>\nShould we report this issue?</p>",
        "id": 328002230,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676466035
    },
    {
        "content": "<p>at least Mario is aware of it, because we noticed it during a video call. I never made an mwe for it.</p>",
        "id": 328002599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676466132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span> Wow! You got it <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Great work!</p>",
        "id": 328180590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676537309
    }
]