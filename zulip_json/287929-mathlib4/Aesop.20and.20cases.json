[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, a feature request for <code>aesop</code>.</p>\n<p>I've like an analogue of <code>introsTransparency?</code> but for <code>aesop_destruct_products</code>. Do you think this would be viable? This would be helpful for recovering some missing functionality from <code>obviously</code>.</p>\n<p>In particular, I would like both of the following to succeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">//</span> <span class=\"n\">False</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">//</span> <span class=\"n\">False</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 345275287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680053855
    },
    {
        "content": "<p>(This is what is causing the first failure of <code>aesop_cat</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2815\">!4#2815</a>, and possibly also many of the <code>aesop</code> vs <code>obviously</code> regressions in the category theory library that I am way behind on. :-)</p>",
        "id": 345275414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680053918
    },
    {
        "content": "<p>And on a separate PR, <a href=\"https://github.com/leanprover-community/mathlib4/pull/2296\">https://github.com/leanprover-community/mathlib4/pull/2296</a>, trying to replace <code>obviously</code> by <code>aesop</code> is failing for the same reason: <code>obviously</code> could do cases on an empty hypothesis, that <code>aesop</code> isn't willing to see.</p>",
        "id": 345279872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680057016
    },
    {
        "content": "<p>This can certainly be done. I'll look at it as soon as I've repaired my Emacs installation.</p>",
        "id": 345351985,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680084563
    },
    {
        "content": "<p>Actually, it would kill the indexing for <code>destructProducts</code> (and perhaps <code>cases</code> etc.) since that only works with reducible transparency. But I guess that's a tradeoff you'll be willing to make. The alternative would be to register explicit <code>cases</code> or <code>unfold</code> rules for types like <code>T</code>.</p>",
        "id": 345352865,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680084803
    },
    {
        "content": "<p>I'd prefer not to have to add explicit rules. The users of the category theory library shouldn't have to reconfigure aesop when they define new type synyonyms when setting up new category instances.</p>",
        "id": 345522325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680126866
    },
    {
        "content": "<p>So yes, I understand there would be a performance trade-off here. :-(</p>",
        "id": 345522349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680126886
    },
    {
        "content": "<p>On it. It's a bit more work than I thought, but not terribly much.</p>",
        "id": 345617678,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680169508
    },
    {
        "content": "<p>I may have overengineered this a tiny bit. In addition to <code>destructProductsTransparency</code>, there are now also transparency options for the other builtin rules and for the rule builders (where it makes sense to change the transparency). So you can specify that, e.g., a specific <code>apply</code> rule should be applied at <code>reducible</code> transparency. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3501\">!4#3501</a> is the bump PR.</p>",
        "id": 350780755,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1681824313
    }
]