[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1893\">mathlib4#1893</a>, the only thing left is the following instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">SubMulAction.Semigroup</span><span class=\"o\">,</span>\n    <span class=\"n\">SubMulAction.MulOneClass</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In mathlib3 this was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">sub_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">sub_mul_action.semigroup</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">sub_mul_action.mul_one_class</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and it says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">SubMulAction.MulOneClass'</span>\n<span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">SubMulAction.Semigroup'</span>\n</code></pre></div>\n<p>and <code>expected structure</code>, although I thought  <code>'SubMulAction.MulOneClass'</code> and <code>'SubMulAction.Semigroup'</code> were defined just above.<br>\nAny hints how to fix this?</p>",
        "id": 324157532,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674855059
    },
    {
        "content": "<p>I think it's just the names. You can use <code>#synth</code> to get the instance names</p>",
        "id": 324160628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674856393
    },
    {
        "content": "<p>in this case, this works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">instSemigroupSubMulActionToSMul</span><span class=\"o\">,</span>\n    <span class=\"n\">instMulOneClassSubMulActionToSMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 324160678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674856421
    },
    {
        "content": "<p>or. better yet, rename the initial instances to something that isn't <code>instSemigroupSubMulActionToSMulDivByInfinity</code></p>",
        "id": 324162105,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674856973
    },
    {
        "content": "<p>you do that by, e.g. <code>instance semiGroup: Semigroup (SubMulAction R M) &lt;rest of declaration&gt;</code></p>",
        "id": 324162626,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674857208
    },
    {
        "content": "<p>Or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 324162833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674857299
    },
    {
        "content": "<p>french quotes in the following variant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)›,</span>\n    <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gives a mysterious error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Semigroup.mul_assoc</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">SubMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 324163316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674857510
    },
    {
        "content": "<p>naming the instances is better for multiple reasons:<br>\n1) Avoids future exponential name explosion<br>\n2) Easier to read in the doc search autocomplete<br>\n3) Reduces burden on downstream porting</p>",
        "id": 324163336,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674857519
    },
    {
        "content": "<p>4) Avoids calling TC inference (well, at least partially)</p>",
        "id": 324163439,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674857556
    },
    {
        "content": "<p>See the following related discussion: <a href=\"#narrow/stream/287929-mathlib4/topic/Syntax.20for.20unpacking.20structures/near/316074906\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Syntax.20for.20unpacking.20structures/near/316074906</a></p>",
        "id": 324163465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674857567
    },
    {
        "content": "<p>BTW, the mul and one fields are not necessary here.</p>",
        "id": 324163889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674857763
    },
    {
        "content": "<p>but maybe they should stick around for consistency with mathlib3.</p>",
        "id": 324163970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674857791
    },
    {
        "content": "<p>The point of repeating the <code>mul</code> and <code>one</code> fields is to give better definitional unfolding. I guess maybe this no longer matters because of eta for structures?</p>",
        "id": 324164311,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674857935
    },
    {
        "content": "<p>ok, great, I added names for the instances and now everything seems to work!<br>\nThanks for the explanations</p>",
        "id": 324243780,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674895438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/GroupTheory.2EGroupAction.2ESubMulAction.2EPointwise/near/324164311\">said</a>:</p>\n<blockquote>\n<p>The point of repeating the <code>mul</code> and <code>one</code> fields is to give better definitional unfolding. I guess maybe this no longer matters because of eta for structures?</p>\n</blockquote>\n<p>I think this still matters, but new-style structures make it more confusing.</p>",
        "id": 324454616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675007306
    }
]