[
    {
        "content": "<p>I'm really glad Lean 4 doesn't let us use auto-generated names. This will make porting to Lean 5 much easier. I'm porting algebra.ring_quot and it's full of proof by <code>induction</code> using auto-generated names and this is a royal pain for porting (of course auto-generated names in Lean 4 are not only inaccessible, they are also different from the Lean 3 ones).</p>",
        "id": 349195062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681413883
    },
    {
        "content": "<p>I have a question about Lean 4 <code>induction</code> tactic actually. How do you use <code>induction foo with</code> when constructors have implicit arguments?</p>",
        "id": 349197048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681414658
    },
    {
        "content": "<p>Does <code>@constructor_name</code> not work?</p>",
        "id": 349197265,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681414720
    },
    {
        "content": "<p>In the case at hand I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Rel</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add_left</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_left</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul_right</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">⦄</span> <span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Rel</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And given <code>h : Rel r a b</code>, starting with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>doesn't let me specify more than one argument after <code>or</code>, but I clearly need more.</p>",
        "id": 349197306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681414736
    },
    {
        "content": "<p>Thanks Jireh!</p>",
        "id": 349197398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681414765
    },
    {
        "content": "<p>It makes sense in hindsight.</p>",
        "id": 349197428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681414781
    },
    {
        "content": "<p>Indeed, but it's not the kind of thing we had in Lean 3, so I understand. When I first found I could do that I was very excited.</p>",
        "id": 349197514,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681414809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Dead.20names/near/349195062\">said</a>:</p>\n<blockquote>\n<p>it's full of proof by <code>induction</code> using auto-generated names</p>\n</blockquote>\n<p>Could you point to where this happens in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring_quot.lean\">the lean3 file</a>?</p>",
        "id": 349197664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681414891
    },
    {
        "content": "<p>things like <code>@fun x y h =&gt; ...</code> work also when the expected type is <code>∀ {x y} (h), ...</code></p>",
        "id": 349197724,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681414915
    },
    {
        "content": "<p>Eric, the proof I'm doing right now is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring_quot.lean#L395-L403\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/ring_quot.lean#L395-L403</a></p>",
        "id": 349197955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681414989
    },
    {
        "content": "<p>There you can see things like <code>h_h</code> or <code>h_ih</code>...</p>",
        "id": 349198003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681415009
    },
    {
        "content": "<p>But really, I didn't mean to shame whoever wrote this.</p>",
        "id": 349198087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681415042
    },
    {
        "content": "<p>My point was really that Lean 4 is right here.</p>",
        "id": 349198267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681415096
    },
    {
        "content": "<p>I just wanted to check that person who wrote it was me a long time ago and not a more recent me who should know better (it looks like those lines are mine, but thankfully old).</p>",
        "id": 349202490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681416547
    },
    {
        "content": "<p>I blame the fact the the old induction tactic made it super annoying to name all the hypotheses because you couldn't group them by goal without the rarely-used case tactic (another point for Lean4)</p>",
        "id": 349202757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681416624
    }
]