[
    {
        "content": "<p>I have 2 questions about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Accumulate#doc\">docs#Set.Accumulate</a>:</p>\n<ul>\n<li>should it be called <code>Set.accumulate</code>?</li>\n<li>should we use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=partialSups#doc\">docs#partialSups</a> instead?</li>\n</ul>",
        "id": 389104122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693889911
    },
    {
        "content": "<p>For the latter that changes TC assumptions significantly. So I would think not.</p>",
        "id": 389110073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693893087
    },
    {
        "content": "<p>Why? <code>Set _</code> satisfies all required TC assumptions.</p>",
        "id": 389114785,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693895361
    },
    {
        "content": "<p>UPD: I missed the point that <code>Set.Accumulate</code> doesn't assume the domain to be <code>Nat</code>.</p>",
        "id": 389114949,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693895426
    },
    {
        "content": "<p>Do we ever use it for other types?</p>",
        "id": 389114999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693895451
    },
    {
        "content": "<p>We use it for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compactCovering#doc\">docs#compactCovering</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.spanningSets#doc\">docs#MeasureTheory.spanningSets</a>, so the answer is \"No, at least within mathlib\".</p>",
        "id": 389115412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693895657
    },
    {
        "content": "<p>Then Q2 stands.</p>",
        "id": 389116965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693896364
    },
    {
        "content": "<p>Yes, I agree with you. We should use <code>partialSups</code>.</p>",
        "id": 389117093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693896412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Set.2EAccumulate/near/389116965\">said</a>:</p>\n<blockquote>\n<p>Then Q2 stands.</p>\n</blockquote>\n<p>Does the proposal involve <em>deleting</em> <code>Accumulate</code>? It might be still useful for unions over a well-ordered index set.</p>",
        "id": 389178240,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693917055
    },
    {
        "content": "<p>What about we reintroduce it when needed? I find it a bit bloat right now and I suspect there are some places where it could have been used but wasn't because the API wasn't helpful.</p>",
        "id": 389178616,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693917179
    },
    {
        "content": "<p>I've seen multiple occasions in which I would have liked a version od <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=partialSups#doc\">docs#partialSups</a> indexed by any ordered set (with stronger typeclass assumptions of course), so I think the right answer is to introduce this and then use it instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Accumulate#doc\">docs#Set.Accumulate</a></p>",
        "id": 389178728,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693917211
    },
    {
        "content": "<p>I think that we can already migrate existing uses of <code>Set.Accumulate</code> to <code>partialSups</code> and deprecate the former.</p>",
        "id": 389182443,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693918340
    },
    {
        "content": "<p>OTOH, <code>partialSups</code> should be redefined as <code>(Finset.Iic a).sup' _ f</code></p>",
        "id": 389182904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693918456
    }
]