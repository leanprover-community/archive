[
    {
        "content": "<p>I was wondering what the \"correct\" indentation should be for theorems that don't have a <code>:=</code> but go directly to the cases using <code>|</code>. There are examples in the <a href=\"https://leanprover-community.github.io/contribute/style.html#structuring-definitions-and-theorems\">style guide</a>, where there is no indentation, although not specifically, but only by accident in the section on \"Calculation.</p>\n<p>Searching in mathlib gives that there are at current master many more example with two spaces before the <code>|</code>:</p>\n<p>When searching for <code>^(protected )?(def|lemma|theorem) (?!.*:=)(?&lt;! where).*\\n  \\|</code>one finds 1216 results, and <br>\n<code>^(protected )?(def|lemma|theorem) (?!.*:=)(?&lt;! where).*\\n\\|</code> yields only 13 results.</p>\n<p>I don't care which convention should be used, but I think there would be benefits in making it consistent.</p>\n<ul>\n<li>\n<p>If we decide to go with \"two spaces before <code>|</code>, then </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/7283\">#7283</a> fixes the remaining 13 results</li>\n<li>Perhaps we could fix this in the style guide? (Or is this a think that is done differently in mathlib from other parts of lean?)</li>\n</ul>\n</li>\n<li>\n<p>If we decide to go with \"zero spaces before<code>|</code>, then </p>\n<ul>\n<li>I will revert the 13 cases in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7382\">#7382</a></li>\n<li>I can prepare a pull request to change the 1216 results and adapt the proposed linter check in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7283\">#7283</a></li>\n</ul>\n</li>\n</ul>",
        "id": 392866200,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1695587994
    },
    {
        "content": "<p>My personal 2¢ is that non-indentation looks cleaner (the <code>|</code> itself serves as a distinguishing line-initial marker, you don’t also need indentation) and is consistent with <code>match</code> statements, which are doing the same thing. (I also feel this way about <code>inductive</code>.) I realize that this is against precedent, though. :)</p>",
        "id": 392866621,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695588276
    },
    {
        "content": "<p>My understanding of the mathlib style is that the body of a definition/theorem is indented by 2 spaces (that includes <code>|</code> cases) and if the type needs to continue on the next line it's indented by 4 spaces. The statistics you've collected appear to support that this is a common understanding.</p>\n<p>I'm not surprised if the style guide accidentally makes a mistake here, since it's been adapted from the mathlib3 styleguide, and in mathlib3 we never indented the body of a definition/theorem.</p>",
        "id": 392867398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695589095
    },
    {
        "content": "<p>I haven't really been clear on whether <code>match</code> statement alternatives should be indented or not, but not indenting seems to be the most common. One reason not to indent them is that you don't need to re-indent to go back and forth between having a <code>match</code> and not having a <code>match</code>. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 392867617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695589363
    },
    {
        "content": "<p>Similarly, switching between a <code>match</code> and a <code>if let ... then</code> doesn't require re-indenting the match bodies.</p>",
        "id": 392867953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695589793
    },
    {
        "content": "<p>Hmm, just to cast the alternative view in these terms, I’d consider a “body” to specifically be a term. <code>|</code> strikes me as postponing the body until after we destructure the arguments; I’d tentatively say a definition specified with <code>|</code> has multiple bodies (in this sense), one for each case.</p>\n<p>I also think there’s value to having <code>match</code> cases and match-style definitions be consistently indented (relative to what they case on); they should be thought of the same way.</p>\n<p>Also, <em>not</em> having the cases above be interchangeable has its benefits too! :) In particular, it tells you that you don’t have to read to the end of the line to see if <code>:=</code> appears:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>Ultimately these differences are rather small either way, of course…but how can we build a bikeshed without considering the psychological effects of what color we paint it? :P</p>",
        "id": 392869246,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695590828
    },
    {
        "content": "<p>I think discussing what color the bikeshed <em>should</em> be is a bit of a distraction since this bikeshed has been well and painted already. There's just some confusion about what color it is since there's a little variation. (That's not to say that there should never be discussion about it, but for sake of Moritz's effort to regularize things I think it'd be helpful focusing on the question of \"what is the style\" in this thread.)</p>",
        "id": 392869520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695591201
    },
    {
        "content": "<p>I imagine the current prevailing style is the one that mathport outputs :)</p>",
        "id": 392870103,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695592009
    },
    {
        "content": "<p>Indeed, while the bias towards indentation is still present in std and core, it’s much less extreme—using the regexes above:</p>\n<p>std:</p>\n<ul>\n<li>indented: 153 (31 files)</li>\n<li>non-indented: 16 (7 files)</li>\n</ul>\n<p>core:</p>\n<ul>\n<li>indented: 817 (267 files)</li>\n<li>non-indented: 299 (156 files)</li>\n</ul>\n<p>So, about 10-to-1 in std by command, but only 4 or 5 to 1 by file; under 3 to 1 in core by command, and less than 2 to 1 by file. (Files might better reflect preferences by author.)</p>\n<p>I think “well and painted” really only applies when a deliberate choice has been made somewhere—which it might have been! But it’s not clear where yet (at least to me).</p>\n<p>Currently it looks like an overall preference for one over the other, but with enough variation to suggest that no collectively-adopted choice has really been made, and that everyone is just painting their part of the shed the color that they’re familiar with. But maybe there has been a choice made somewhere, and most people just don’t know about it (even if adopting that choice’s conventions).</p>",
        "id": 392872523,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695594655
    },
    {
        "content": "<p>Isn't the mathport indentation based on what the core pretty printer says?</p>",
        "id": 392872653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695594825
    },
    {
        "content": "<p>That makes sense—I just checked, and if you pretty-print the syntax of one of these defs, it does come out indented. So if we are simply discussing what the standard <em>is</em>, that might be as good a standard as any…!</p>",
        "id": 392873148,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695595407
    },
    {
        "content": "<p>As for the style guide: I updated this from Lean 3 to Lean 4 and did not consider this issue at all. So whatever appears in the style guide currently is happenstance and should not be considered wisdom one way or the other.</p>",
        "id": 392884790,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695604957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/style.20for.20proofs.20with.20.60.7C.60.2E/near/392872523\">said</a>:</p>\n<blockquote>\n<p>Indeed, while the bias towards indentation is still present in std and core, it’s much less extreme—using the regexes above:</p>\n<p>std:</p>\n<ul>\n<li>indented: 153 (31 files)</li>\n<li>non-indented: 16 (7 files)</li>\n</ul>\n</blockquote>\n<p>Thanks for pointing out the exceptions. They have been fixed.</p>",
        "id": 392920537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695622556
    },
    {
        "content": "<p>Ok, thanks for the input everyone, sounds like \"two spaces before <code>|</code>\" is in fact the standard right now, I'll make a pr for the style guide correcting the example.</p>",
        "id": 392922683,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1695623202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/style.20for.20proofs.20with.20.60.7C.60.2E/near/392872523\">said</a>:</p>\n<blockquote>\n<p>core:</p>\n<ul>\n<li>indented: 817 (267 files)</li>\n<li>non-indented: 299 (156 files)</li>\n</ul>\n</blockquote>\n<p>I opened an issue asking if we want to change it there as well: <a href=\"\">lean4#2480</a></p>",
        "id": 393049391,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1695656836
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover/lean4/pull/2580\">lean4#2580</a>, your link and its text was garbage I'm afraid)</p>",
        "id": 393063470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695660570
    },
    {
        "content": "<p>My 2 cents: In general, I consistently use the no-indent style and largely precisely for the reasons <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> mentioned. The only cases where places where this is not the case are due to external PRs. The pretty-printer indents because its formatting was done by Gabriel, who uses this style (and is responsible for one of the exceptions in Lake).</p>",
        "id": 393083867,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695667077
    }
]