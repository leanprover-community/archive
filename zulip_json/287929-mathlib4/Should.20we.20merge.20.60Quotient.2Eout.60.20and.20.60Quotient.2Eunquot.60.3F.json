[
    {
        "content": "<p>We currently have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.unquot#doc\">docs#Quot.unquot</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.out#doc\">docs#Quotient.out</a>.</p>\n<p>In Lean3, we needed both because the first was unsound while the second was non-computable; but it seems that the definition of \"unsound\" (previously <code>meta</code>, now <code>unsafe</code>) has changed in Lean 4, since I can now combine the two as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Setoid.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Multiset.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Classical.indefiniteDescription</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">({</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">Classical.indefiniteDescription</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Quotient.exists_rep</span> <span class=\"n\">q</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.indefiniteDescription</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">unsafe</span> <span class=\"o\">⟨</span><span class=\"n\">q.unquot</span><span class=\"o\">,</span> <span class=\"n\">lcProof</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A combination of `Quotient.out` and `Quotient.unquot` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.outC</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">q.indefiniteDescription</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Quotient.outC_mk</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"n\">q.outC</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q.indefiniteDescription.2</span>\n</code></pre></div>",
        "id": 388545394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581437
    },
    {
        "content": "<p>Is this equivalent to <code>attribute [implemented_by Quot.unquot] Quotient.out</code>? If so, is this change sensible?</p>",
        "id": 388545784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581533
    },
    {
        "content": "<p>no, I think this is unsound</p>",
        "id": 388545976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581588
    },
    {
        "content": "<p><code>unquot</code> was and still is <code>unsafe</code></p>",
        "id": 388546047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581603
    },
    {
        "content": "<p>Is <code>unsafe</code> not synonymous with unsound? Because <code>outC</code> above is not <code>unsafe</code> IIUC</p>",
        "id": 388546265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581663
    },
    {
        "content": "<p>just because you <em>can</em> wrap an <code>unsafe</code> function in a safe wrapper doesn't mean you have actually discharged the safety condition</p>",
        "id": 388546275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581665
    },
    {
        "content": "<p>What exactly does <code>unsafe</code> mean here?</p>",
        "id": 388546351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581687
    },
    {
        "content": "<p>\"unsound\" is what happens when you make a safe function which has unsafe preconditions</p>",
        "id": 388546412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581700
    },
    {
        "content": "<p><code>unsafe</code> is a syntactic marker on functions with unsafe preconditions</p>",
        "id": 388546544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581726
    },
    {
        "content": "<p>The context here is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6367#discussion_r1306583609\">this comment on github</a>, where <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> suggested I hide the unsafeness of <code>Quot.unquot</code></p>",
        "id": 388546736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581770
    },
    {
        "content": "<p>you can't</p>",
        "id": 388546771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581777
    },
    {
        "content": "<p>at least not with that type signature</p>",
        "id": 388546889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581803
    },
    {
        "content": "<p><code>Quotient.out</code> and <code>Quotient.unquot</code> are <em>different functions</em>, they return different values</p>",
        "id": 388547020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581832
    },
    {
        "content": "<p>one of them isn't even really a function, it returns values that are impossible by the logic</p>",
        "id": 388547161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581858
    },
    {
        "content": "<p>which is why it is <code>unsafe</code></p>",
        "id": 388547215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581873
    },
    {
        "content": "<p>I guess I don't see what the point of contagious <code>unsafe</code> is if you can just hide it again</p>",
        "id": 388547299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581894
    },
    {
        "content": "<p>Are you only supposed to use it if you pinky promise that the contents are genuinely sound and lean is just confused?</p>",
        "id": 388547390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581916
    },
    {
        "content": "<p><code>unsafe</code> means you need a proof obligation to use the function, only this proof obligation is not expressible in the lean logic</p>",
        "id": 388547488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581937
    },
    {
        "content": "<p>so you have to do it on paper / \"pinky promise\" that you have satisfied it</p>",
        "id": 388547654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693581967
    },
    {
        "content": "<p>In which case I should revert the silencing of <code>unsafe</code> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6367\">#6367</a>?</p>",
        "id": 388547780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693581997
    },
    {
        "content": "<p>yes, the instance needs to be unsafe as it is order dependent even though it has inputs that are not</p>",
        "id": 388548037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20we.20merge.20.60Quotient.2Eout.60.20and.20.60Quotient.2Eunquot.60.3F/near/388547020\">said</a>:</p>\n<blockquote>\n<p><code>Quotient.out</code> and <code>Quotient.unquot</code> are <em>different functions</em>, they return different values</p>\n</blockquote>\n<p>My proposal is that we delete the former and redefine it as the latter. I agree they are different functions, but within Lean's logic nothing can tell the difference, right?</p>",
        "id": 388548042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693582074
    },
    {
        "content": "<p>incorrect</p>",
        "id": 388548149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582092
    },
    {
        "content": "<p>This doesn't seem good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Trunc</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"mi\">2</span><span class=\"bp\">⟧</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">a.outC</span> <span class=\"bp\">=</span> <span class=\"n\">b.outC</span>\n<span class=\"c1\">-- false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a.out</span> <span class=\"bp\">=</span> <span class=\"n\">b.out</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388548157,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693582095
    },
    {
        "content": "<p>Yes, I think this amounts to <code>implemented_by</code> being allowed to diverge from whatever the logic says</p>",
        "id": 388548226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693582122
    },
    {
        "content": "<p>more specifically we are causing divergence between compiler behavior and model behavior</p>",
        "id": 388548237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582125
    },
    {
        "content": "<p>and this is not okay</p>",
        "id": 388548280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582137
    },
    {
        "content": "<p>because the compiler optimizes assuming that the logic is true, so divergence leads to UB</p>",
        "id": 388548391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582171
    },
    {
        "content": "<p>Are there example uses of term <code>unsafe</code> that <em>are</em> ok?</p>",
        "id": 388548424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693582182
    },
    {
        "content": "<p>term <code>unsafe</code> can be used correctly, the idea is that while the general function being called has unsafe preconditions, this particular term combines that function with other things such that the composite satisfies the requisite safety conditions</p>",
        "id": 388548661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582243
    },
    {
        "content": "<p>If those safety conditions depend on some property of the caller, then you have to propagate the <code>unsafe</code></p>",
        "id": 388548787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20we.20merge.20.60Quotient.2Eout.60.20and.20.60Quotient.2Eunquot.60.3F/near/388548042\">said</a>:</p>\n<blockquote>\n<p>but within Lean's logic nothing can tell the difference, right?</p>\n</blockquote>\n<p>What I mean't here I guess is \"within the model you can't tell the difference\". As Kyle points out, within the runtime you certainly can. I wasn't aware that divergence could cause UB in the compiler though, so I think that resolves my misunderstanding.</p>",
        "id": 388549138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693582379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Should.20we.20merge.20.60Quotient.2Eout.60.20and.20.60Quotient.2Eunquot.60.3F/near/388548037\">said</a>:</p>\n<blockquote>\n<p>yes, the instance needs to be unsafe as it is order dependent even though it has inputs that are not</p>\n</blockquote>\n<p>I've reverted the commit</p>",
        "id": 388549229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693582410
    },
    {
        "content": "<p>The trick is to use that kind of function to use an unchecked array access function like <code>Array.get</code></p>",
        "id": 388549257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582423
    },
    {
        "content": "<p>A nice example is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ptrEq#doc\">docs#ptrEq</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=withPtrEq#doc\">docs#withPtrEq</a>. The former allows you to distinguish equal objects, which is bad. The latter makes you prove that you won't do that, so it can be safe.</p>",
        "id": 388549556,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693582506
    },
    {
        "content": "<p>Here's how you can weaponize Kyle's example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Trunc</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⟧</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"mi\">2</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.outC</span> <span class=\"bp\">≠</span> <span class=\"n\">b.outC</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.outC</span> <span class=\"bp\">=</span> <span class=\"n\">b.outC</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">foo</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 388550232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582691
    },
    {
        "content": "<p>if you let <code>foo</code> be inlined, it will return <code>1</code> because the if statement is optimized away using the fact that <code>False.elim</code> is unreachable</p>",
        "id": 388550429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693582766
    },
    {
        "content": "<p>I made something similar for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.choice#doc\">docs#Quotient.choice</a> 1.5 months ago: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5995/commits/56e3273e87ed346b7821d01d99195d5c065f8883#diff-0d878a8f283a3ea761f136a02767f65ed7459edbc00f79f7ab9e86e93e954a0dR424-R439\">code</a> / <a href=\"https://github.com/leanprover-community/mathlib4/pull/5995#discussion_r1268800934\">Gabriel's comment</a></p>",
        "id": 390031471,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694262952
    },
    {
        "content": "<p>Is the following code also harmful?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Quotient.choiceImpl</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unsafeCast</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.choice'Aux</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">q.out</span> <span class=\"n\">i</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Quotient.choice</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.induction_on_pi</span> <span class=\"n\">f</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">choice_eq</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.mk_out</span> <span class=\"n\">_</span> <span class=\"n\">piSetoid</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[implemented_by choiceImpl]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.choice'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Quotient.choice'Aux</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n</code></pre></div>",
        "id": 390045148,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694274248
    },
    {
        "content": "<p>After nesting a <code>Classical.choose</code>, it should lose its internal structure now.</p>",
        "id": 390047342,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694276285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> The exact same counterexample given by Gabriel/Chris above works on the revised version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exoticInstance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Quot.recOnSubsingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Decidable</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient.choice'</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Quotient</span> <span class=\"n\">Bool</span> <span class=\"n\">trueSetoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trueSetoid</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟦</span><span class=\"n\">false</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟦</span><span class=\"n\">true</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">iff_true_intro</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">trivial</span><span class=\"o\">))))</span>\n\n<span class=\"c1\">-- VM disagrees with type theory:</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">decide</span> <span class=\"n\">True</span> <span class=\"n\">exoticInstance</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>  <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"o\">)</span> <span class=\"n\">decide_True</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">decide</span> <span class=\"n\">True</span> <span class=\"n\">exoticInstance</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">exoticInstance</span> <span class=\"c1\">-- isFalse _</span>\n</code></pre></div>",
        "id": 390172207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694371648
    },
    {
        "content": "<p>The basic issue is that <code>(∀ i, Quotient (S i)) -&gt; Quotient (∀ i, α i)</code>, while natural-looking, is not sound because it allows you to lift the identity function <code>Trunc A -&gt; Trunc A</code> to <code>Trunc (Trunc A -&gt; A)</code>, and even under a <code>Trunc</code> the contained function <code>Trunc A -&gt; A</code> has \"impossible properties\"</p>",
        "id": 390172327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694371749
    },
    {
        "content": "<p>I got it. A quotient has different VM representations and they are sent to different VM representations by the function. With <code>unsafeCast</code>, the function will go to different values at the same equivalence class.</p>",
        "id": 390175582,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694374291
    },
    {
        "content": "<p>So in this case it is not possible to write a computable <code>Quotient.choice</code>.</p>",
        "id": 390175861,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694374510
    }
]