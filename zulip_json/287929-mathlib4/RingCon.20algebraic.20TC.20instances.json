[
    {
        "content": "<p>Sanity check: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon.instNonUnitalNonAssocSemiringQuotientToAddToDistribToMul#doc\">docs#RingCon.instNonUnitalNonAssocSemiringQuotientToAddToDistribToMul</a> and its friends in that section are problematic for Lean 4 structures but great for flat structures, right?</p>",
        "id": 393280304,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695746481
    },
    {
        "content": "<p>Those should be fine for Lean4 structures as long as <code>Function.Surjective.nonUnitalNonAssocSemiring</code> and friends are implemented without <code>with</code></p>",
        "id": 393280894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695746626
    },
    {
        "content": "<p>Some are and some aren't. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6854\">#6854</a> tried to remove the <code>with</code>'s and things slowed down</p>",
        "id": 393281845,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695746895
    },
    {
        "content": "<p>In particular, AG and <code>RingTheory.Kaehler</code> both suffered in a familiar way to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7257\">#7257</a></p>",
        "id": 393282531,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695747070
    },
    {
        "content": "<p><span aria-label=\"test tube\" class=\"emoji emoji-1f9ea\" role=\"img\" title=\"test tube\">:test_tube:</span></p>",
        "id": 393283536,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695747355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  pointed out to Kevin who pointed out to me <a href=\"https://github.com/leanprover-community/mathlib4/pull/6874\">#6874</a> which builds in more direct inheritance to some of these instances. It does help. </p>\n<p>I am guessing it will complement <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> but wonâ€™t have a chance to merge and test for a bit.</p>",
        "id": 393478489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695818124
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/pull/7401\">#7401</a> which also speeds up <code>RingTheory.Kaehler</code>.</p>",
        "id": 393491695,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1695822418
    },
    {
        "content": "<p>Basically the sum of the improvement and the regression for Kaehler <a href=\"http://speed.lean-fro.org/mathlib4/compare/5273f6b7-92a3-4f3e-a201-e4839eaba63a/to/8677f6e3-884c-4ae1-a98c-9b47a8c89c0e\">Bench</a></p>",
        "id": 393708584,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695905432
    },
    {
        "content": "<p>There is a bit noise since the baseline PR is a bit old.</p>",
        "id": 393708889,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695905502
    },
    {
        "content": "<p>I delegated <a href=\"https://github.com/leanprover-community/mathlib4/pull/6874\">#6874</a> since it seems orthogonal to (in terms of effect) <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a>. </p>\n<p>I am believing more the theory that <code>Function.Injective/Surjective</code> is repeatedly exposing (mildly) slow defeqs.</p>",
        "id": 393719797,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695908113
    },
    {
        "content": "<p>Combining <a href=\"https://github.com/leanprover-community/mathlib4/pull/6874\">#6874</a> with a refactor to build in direct inheritance for <code>RingCon</code> algebraic classes goes <a href=\"http://speed.lean-fro.org/mathlib4/compare/0577a905-101a-4ac6-8f61-76b9ea77d4e8/to/b2db363c-38e8-4b76-8e6f-c0c249e5e025\">well</a></p>",
        "id": 393818940,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695943564
    },
    {
        "content": "<p>Next to see how it interacts with <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>",
        "id": 393818967,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695943588
    },
    {
        "content": "<p>It made the regression in <code>RingTheory.Kaehler</code> <a href=\"http://speed.lean-fro.org/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/882d50b4-37d4-4d06-8f23-e63798a0e279?hash1=302ba82d40136c1283d1b55c15cd62a9d7ec0ce8\">less bad</a></p>",
        "id": 393831284,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695950903
    },
    {
        "content": "<p>+5% vs +30% before</p>",
        "id": 393831368,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695950962
    },
    {
        "content": "<p><code>LinearAlgebra.FreeModule.Norm/PID</code> both turned green</p>\n<p><code>RingTheory.AdjoinRoot</code> got worse. </p>\n<p>The rest stayed the same</p>",
        "id": 393832426,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695951509
    },
    {
        "content": "<p>I'll say again -- I think another measure of success would be not percentage change but absolute change in instructions. Stuff like \"RingTheory.Kaehler got 9.5% quicker\" is an incredible success because that file takes forever to compile. Let's say some other file got 300% slower. This looks like a huge net loss, but then if you find out that the other file is only 40 lines long and compiles instantly then all of a sudden you're back looking at a big win.</p>\n<p>To try and explain why this is important, here's a screenshot of the times changing in RingTheory files:</p>\n<p><a href=\"/user_uploads/3121/VXpc4o4aIsoQl_13_RwteCSH/Screenshot-from-2023-09-29-08-44-25.png\">Screenshot-from-2023-09-29-08-44-25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VXpc4o4aIsoQl_13_RwteCSH/Screenshot-from-2023-09-29-08-44-25.png\" title=\"Screenshot-from-2023-09-29-08-44-25.png\"><img src=\"/user_uploads/3121/VXpc4o4aIsoQl_13_RwteCSH/Screenshot-from-2023-09-29-08-44-25.png\"></a></div><p>RingTheory.Kaehler is now faster by 72 billion time units and RingTheory.Jacobson by 84 billion. These numbers just seem to dwarf eveything else. Most files don't even take 84 billion time units to compile. The percentage changes being reported by the speedcenter do not highlight this phenomenon. Oh -- can this be read off from \"build instructions\"?</p>",
        "id": 393878823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695973758
    },
    {
        "content": "<p>Yes, \"build instructions\" should be (roughly?) the sum of all module metrics</p>",
        "id": 393880974,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695974750
    },
    {
        "content": "<p>Yes. I think the first question when evaluating a PR is the percentage change in total build instructions. If this is positive, other things can be forgiven. For example, build time currently is controlled by the path to <code>AlgebraicGeometry.Morphisms.RingHomProperties</code> so even if you zeroed out the build times for 8 of 10 most CPU intense files including  <code>RepresentationTheory.GroupCohomology.Basic/Resolution</code>, <code>Analysis.NormedSpace.OperatorNorm/Multilinear</code>, <code>CategoryTheory.Abelian.Projective/InjectiveResolution</code> etc you would not affect the build time. You would drop total instructions by almost 10% however</p>",
        "id": 393920094,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695989991
    },
    {
        "content": "<p>Here are other files following the (anti-?)pattern </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Mathlib/FieldTheory/Subfield.lean\nMathlib/GroupTheory/Subgroup/Basic.lean\nMathlib/GroupTheory/Submonoid/Operations.lean\nMathlib/GroupTheory/Subsemigroup/Operations.lean\nMathlib/RingTheory/NonUnitalSubring/Basic.lean\nMathlib/RingTheory/Subring/Basic.lean\nMathlib/RingTheory/NonUnitalSubsemiring/Basic.lean\nMathlib/RingTheory/Subsemiring/Basic.lean\nMathlib/LinearAlgebra/Alternating.lean\nMathlib/LinearAlgebra/Quotient.lean\nMathlib/Data/Finsupp/Defs.lean\nMathlib/Algebra/Order/Nonneg/Ring.lean\nMathlib/Topology/LocallyConstant/Algebra.lean\nMathlib/Algebra/Module/Submodule/Basic.lean\nMathlib/Topology/Sets/Compacts.lean\nMathlib/Topology/ContinuousFunction/ZeroAtInfty.lean\nMathlib/Topology/Algebra/Module/Alternating.lean\nMathlib/Topology/Algebra/Module/Multilinear.lean\nMathlib/Algebra/Group/Opposite.lean\nMathlib/Algebra/Group/ULift.lean\n</code></pre></div>",
        "id": 394002645,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696020827
    },
    {
        "content": "<p>In each of these, there are multiple uses of <code>Function.Injective/Surjective.x</code> in parallel when building type classes. Eg </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective</span><span class=\"bp\">/</span><span class=\"n\">Surjective.monoid</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective</span><span class=\"bp\">/</span><span class=\"n\">Surjective.semigroup</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective</span><span class=\"bp\">/</span><span class=\"n\">Surjective.group</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean has to unify all the arguments into <code>Function.Injective/Surjective.x</code>which seems to come at a higher cost that a more direct to parent construction pattern</p>",
        "id": 394003306,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696021141
    },
    {
        "content": "<p>Does <code>inline</code> help at all here?</p>",
        "id": 394007750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696023400
    },
    {
        "content": "<p>Checking my understanding: inline the <code>Function.InjSurj.x</code>â€™s?</p>",
        "id": 394011067,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696025345
    },
    {
        "content": "<p>I mean that we maybe want them inclined into the call site, and that with an even stronger \"maybe\" the <code>@[inline]</code> attribute helps somehow</p>",
        "id": 394012295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696026093
    },
    {
        "content": "<blockquote>\n<p>I think another measure of success would be not percentage change but absolute change in instructions</p>\n</blockquote>\n<p>While I don't think we have any volunteers for making this change in the Java/TypeScript speedcenter code, a far simpler change that indeed we only have to touch code in mathlib4 for just came to mind: we could stop tracking any \"small\" files below a certain instruction threshold at all. Do you think this would be helpful?</p>",
        "id": 394090245,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696084369
    },
    {
        "content": "<p>This might hide a jump where a small file suddenly increases by a lot from significance checks, I think</p>",
        "id": 394090295,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1696084422
    },
    {
        "content": "<p>Yes, that \"new benchmark\" is not a significant event is problematic for this</p>",
        "id": 394090370,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696084486
    },
    {
        "content": "<p>Note that for two adjacent commits we can at least sort the table by absolute change. So one workaround is to always make sure that the base commit for the comparison is the parent commit and then use the commit view instead of comparison view</p>",
        "id": 394090786,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696084917
    },
    {
        "content": "<p>When I'm making a PR which I want to bench I'm always very careful about making sure I'm branching off a commit on master which is already benched.</p>",
        "id": 394099998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696093126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingCon.20algebraic.20TC.20instances/near/394012295\">said</a>:</p>\n<blockquote>\n<p>I mean that we maybe want them inclined into the call site, and that with an even stronger \"maybe\" the <code>@[inline]</code> attribute helps somehow</p>\n</blockquote>\n<p>From the profiler, there doesn't seem to be much time spent getting in to the <code>Function.Inj/Surj.x</code>'s but it is easy enough to check</p>",
        "id": 394421192,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696251176
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/b819789e-d4dc-4bef-b2c0-5545130aad12/to/e51e77ce-07cd-47d5-bb47-60662a39ff1b\">Bench</a> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> let me know if I am doing it wrong. I think I understand the principle behind it but perhaps <code>@[inline]</code> doesnâ€™t behave as I want</p>",
        "id": 394486937,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696269904
    },
    {
        "content": "<p>I'm probably telling you to do it wrong</p>",
        "id": 394488778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696270731
    },
    {
        "content": "<p>We have <a href=\"http://speed.lean-fro.org/mathlib4/compare/da890f60-fce9-45bd-a284-8240d5b2d021/to/4918ff39-38b1-4656-8742-849cb60d4c7e\">movement</a> in AG</p>",
        "id": 394631295,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696338271
    },
    {
        "content": "<p>Dumping all the changes in together give <a href=\"http://speed.lean-fro.org/mathlib4/compare/da890f60-fce9-45bd-a284-8240d5b2d021/to/d404d8ac-7def-4b59-b8fe-3efd78da2c4a\">much more movement</a> in AG.</p>",
        "id": 394828812,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696422229
    },
    {
        "content": "<p>Itâ€™s not reported as headline but <code>ring</code> gets 2x faster</p>",
        "id": 394829262,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696422379
    },
    {
        "content": "<p>Sadly <code>RingHomProperties</code> doesnâ€™t change much so sees its lead in CPU instructions grow to about 3x the second place file</p>",
        "id": 394833062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696423686
    }
]