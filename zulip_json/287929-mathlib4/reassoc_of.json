[
    {
        "content": "<p>In category theory, we already have the <code>reassoc</code> tag in mathlib4. In mathlib, we also had the very convenient <code>reassoc_of</code> which translated a statement <code>h : f = g</code> into <code>reassoc_of h : f  ≫ _ = g ≫ _</code>, and this was used in rewrites. Is there a hope that we may have the same in mathlib4? Is there a preferred way around this for the port? (e.g. using the <code>slice</code> tactic).</p>",
        "id": 337963108,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677318405
    },
    {
        "content": "<p>I’ve been working around it but don’t have anything that I am happy with atm. I might just break down and implement <code>reassoc_of</code></p>",
        "id": 338635385,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677602470
    },
    {
        "content": "<p>It would be nice to make it work for associative operations on a type (<code>(*)</code> in a semigroup, <code>(+)</code> in an add_semigroup, etc.). And maybe it can also be made to work for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp\">docs#function.comp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comp\">docs#linear_map.comp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.trans\">docs#equiv.trans</a>, etc.</p>",
        "id": 338719858,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677630526
    },
    {
        "content": "<p>I am not sure how feasible something that unifies everything is at the moment. It would require some <code>HAssoc</code> class I think. </p>\n<p>I did look a little at this but don't know the Lean 4 spelling of <a href=\"https://leanprover-community.github.io/mathlib_docs/init/meta/tactic.html#tactic.unify\"><code>unify</code></a></p>",
        "id": 340681818,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678386221
    },
    {
        "content": "<p>Is it just <code>isDefEq</code>? (Based on the doc strings I’d guess <code>is_def_eq</code> is now <code>withNewMCtxDepth</code> then <code>isDefEq</code>)</p>",
        "id": 340687885,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678388057
    },
    {
        "content": "<p>I tried that though perhaps not correctly.</p>",
        "id": 340690394,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678388768
    },
    {
        "content": "<p>Did you run into a specific issue with it? (I know there’s an issue where it won’t assign metavariables whose type is a <code>Prop</code>, just wondering if it’s that)</p>",
        "id": 340691099,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678388994
    },
    {
        "content": "<p>Ah it could be that</p>",
        "id": 340691183,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678389006
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2054\">lean4#2054</a></p>",
        "id": 340691454,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678389097
    },
    {
        "content": "<p>Specifically <code>derive_reassoc_proof</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/3b267e70a936eebb21ab546f49a8df34dd300b25/src/tactic/reassoc_axiom.lean#L190\">here</a> is used in <code>reassoc_of</code> to get Lean to  pass  the equality directly to <code>prove_reassoc</code>when generating the declaration.</p>",
        "id": 340691850,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678389211
    },
    {
        "content": "<p>There may be a better way now in Lean 4 to generate declarations dynamically using tactics though</p>",
        "id": 340692066,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678389271
    },
    {
        "content": "<p>I wouldn't know</p>",
        "id": 340692089,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678389278
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a> uses the same strategy as <code>reassoc_of</code>, so I'd also be interested in knowing if there's a better pattern available</p>",
        "id": 340710328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678395260
    },
    {
        "content": "<p>Does the existing pattern at least work in lean 4?</p>",
        "id": 340710395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678395289
    },
    {
        "content": "<p>If we can't unify with Prop, then I am skeptical</p>",
        "id": 340713118,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678396258
    },
    {
        "content": "<p>Once I finish with abelian categories, I'll take another run at it</p>",
        "id": 340713228,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678396300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, I've added the term elaborator in <a href=\"https://github.com/leanprover/lean4/pull/2765\">lean4#2765</a>. Note I've called it <code>reassoc_of%</code>, in line with our naming for other term elaborators, although I don't feel strongly about this.</p>",
        "id": 340751293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678414731
    },
    {
        "content": "<p>Well, that was easy :)</p>",
        "id": 340752824,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678415948
    },
    {
        "content": "<p>That's what happens when tactics are written with their <code>MetaM</code> versions factored out. :-)</p>",
        "id": 340759602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678420648
    },
    {
        "content": "<p>Thanks very much <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> !</p>",
        "id": 340761331,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678421988
    }
]