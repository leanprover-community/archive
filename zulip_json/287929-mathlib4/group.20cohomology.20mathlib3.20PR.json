[
    {
        "content": "<p>Group cohomology is three files away from being ported, but after some discussion with Amelia on Thurs she convinced herself that there should be a mathlib3 refactor and more precisely the internal homs on <code>Rep k G</code> should be defined concretely rather than transporting an instance along a category equivalence (which was troublesome to port as well as being troublesome to work with). The mathlib3 PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/19170\">#19170</a> , it looks good to me, it results in a net decrease of lines, but it would be good if a category theory expert e.g. <span class=\"user-mention\" data-user-id=\"459699\">@JoÃ«l Riou</span> or <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> could sign off on this one.</p>",
        "id": 365192284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686429343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> If not done yet, could you please add a \"don't port yet\" comments to relevant files on <a href=\"https://github.com/leanprover-community/mathlib4/wiki/port-comments/_edit\">https://github.com/leanprover-community/mathlib4/wiki/port-comments/_edit</a> ?</p>",
        "id": 365197834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686432318
    },
    {
        "content": "<p>I've now done this.</p>",
        "id": 365200092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686433819
    },
    {
        "content": "<p>Yes, I agree this is a good idea. The underlying problem is probably my fault: in my defence I'll claim that it is often a useful experiment to see if working \"by transport of structure\" is viable, but that I should have flagged this as potentially needed a refactor. :-)</p>",
        "id": 365214856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686443701
    },
    {
        "content": "<p>I think such transport constructions are certainly useful and mostly viable as is. The right approach in general is probably to provide <code>copy</code> constructions similar to what we have in the order library to preserve whatever defeq properties we want. In this case I think <code>Rep k</code> is explicit and useful enough that doing everything directly is perfectly fine as well.</p>",
        "id": 365226983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1686451243
    },
    {
        "content": "<p>My understanding (possibly incorrect) was that <code>copy</code> was harder than it looked because this is not just like <code>submonoid</code>, there is higher structure which has to typecheck.</p>",
        "id": 365250120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686467554
    }
]