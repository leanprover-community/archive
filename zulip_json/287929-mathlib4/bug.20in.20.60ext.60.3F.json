[
    {
        "content": "<p>I started porting fiber bundle trivializations in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2707\">!4#2707</a>, and the first <code>@[ext]</code> fails.</p>",
        "id": 340242456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678235523
    },
    {
        "content": "<p>For the case if I push a workaround before this issue is resolved, the relevant commit is <code>92feef9</code>.</p>",
        "id": 340242606,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678235592
    },
    {
        "content": "<p>If we do find a bug in <code>ext</code> then I think it would be worth seeing how it affects the situation <a href=\"https://github.com/leanprover-community/mathlib4/pull/2441#discussion_r1124506604\">here</a>. I had intended to debug the <code>ext</code> issue there a bit more but the PR got merged before I got a chance.</p>\n<p>I also learned from <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> that in Lean 4, <code>@[ext]</code> lemmas may carry user-defined priorities whereas in Lean 3 the tactic apparently discriminated between which qualifying lemma to apply according to order of definition.</p>",
        "id": 340319891,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678271144
    },
    {
        "content": "<p>Oliver, I think the \"priority\" in mathlib 3 was just whichever lemma was declared latest.</p>",
        "id": 340320203,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678271211
    },
    {
        "content": "<p>So, IIUC it didn't \"discriminate\" as you suggest.</p>",
        "id": 340320302,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678271236
    },
    {
        "content": "<p>I think the data structure holding ext lemmas in Lean 4 now has no history in the sense of which declaration was declared most recently, so it needs a manual priority.</p>",
        "id": 340320623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678271309
    },
    {
        "content": "<p>Agreed! I have attempted to communicate what you say here. My use of the word \"discriminate\" was not intended to imply the tactic kept more state that it did.</p>",
        "id": 340321234,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678271412
    },
    {
        "content": "<p>Or to put it another way: one may implement \"most recently defined\" discrimination using constant space.</p>",
        "id": 340321466,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678271463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.60ext.60.3F/near/340320203\">said</a>:</p>\n<blockquote>\n<p>Oliver, I think the \"priority\" in mathlib 3 was just whichever lemma was declared latest.</p>\n</blockquote>\n<p>More precisely, in lean 3 lemmas are sorted lexicographically by <code>(priority, global declaration index)</code></p>",
        "id": 340344123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678277709
    },
    {
        "content": "<p>So declaration order breaks ties in priority</p>",
        "id": 340344180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678277727
    },
    {
        "content": "<p>Which turned out to always be the correct choice for ext, to the point that I think we never set priorities manually.</p>",
        "id": 340344250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678277752
    },
    {
        "content": "<p>The bug I'm talking about is in the <code>ext</code> attribute, not in the <code>ext</code> tactic.</p>",
        "id": 340526859,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678345474
    },
    {
        "content": "<p>It fails to generate <code>ext</code> lemmas.</p>",
        "id": 340526917,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678345490
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/106\">https://github.com/leanprover/std4/pull/106</a></p>",
        "id": 340748721,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678412883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> see my request for access to mathlib4 so I can port files</p>",
        "id": 340748784,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678412934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.60ext.60.3F/near/340748784\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> see my request for access to mathlib4 so I can port files</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, no need to crosspost on random threads, please. :-)</p>",
        "id": 340766570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678425900
    }
]