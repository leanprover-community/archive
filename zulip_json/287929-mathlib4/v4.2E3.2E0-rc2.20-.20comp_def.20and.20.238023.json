[
    {
        "content": "<p>Are you happy for me to try this with the comp_def PR above to make the rest easier to review, or is that just going to create lots more work for you?</p>",
        "id": 401601752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699785106
    },
    {
        "content": "<p>Sure!</p>",
        "id": 401602119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699785431
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8367\">#8367</a></p>",
        "id": 401604446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787221
    },
    {
        "content": "<p>Out of curiosity, why is unfolding <code>Function.comp</code> not an option anymore?</p>",
        "id": 401604589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699787343
    },
    {
        "content": "<p>because the equation lemma is now for <code>(f \\comp g) x = f (g x)</code></p>",
        "id": 401604704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787422
    },
    {
        "content": "<p>Hmm, many conflicts with <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">#8366</a>. Could you do the merge into <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">#8366</a> and resolve?</p>",
        "id": 401604709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699787431
    },
    {
        "content": "<p>That would require me to first merge master into <code>nightly-testing-2023-11-06</code></p>",
        "id": 401604806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787527
    },
    {
        "content": "<p>Which presumably you'll need to do anyway?</p>",
        "id": 401604812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401604589\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity, why is unfolding <code>Function.comp</code> not an option anymore?</p>\n</blockquote>\n<p>Yes, maybe we should just use <code>@[eqns]</code> on <code>comp</code> so that unfolding it \"just works\"</p>",
        "id": 401604838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787574
    },
    {
        "content": "<p>No, I wasn't planning on ever merging <code>master</code> into <code>nightly-testing-YYYY-MM-DD</code>. Others are welcome to. :-)</p>",
        "id": 401604861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699787605
    },
    {
        "content": "<p>Oh sorry, I misread the PR number you pasted; indeed, that's not necessary</p>",
        "id": 401604928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787654
    },
    {
        "content": "<p><code>@[eqns]</code> on comp is a reasonable thing to consider, but I think it would best for it to happen in Lean, so it isn't going to happen immediately.</p>",
        "id": 401604967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699787681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401604709\">said</a>:</p>\n<blockquote>\n<p>Hmm, many conflicts with <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">#8366</a>. Could you do the merge into <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">#8366</a> and resolve?</p>\n</blockquote>\n<p><code>git merge eric-wieser/with-comp_defs -s ours</code> leaves no conflicts and creates no diff</p>",
        "id": 401604995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787725
    },
    {
        "content": "<p>Though perhaps a manual resolution would indeed be better</p>",
        "id": 401605067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787782
    },
    {
        "content": "<p>Interesting. A plain <code>merge</code> had lots of conflicts, but I didn't look at them at all.</p>",
        "id": 401605119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699787841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401604704\">said</a>:</p>\n<blockquote>\n<p>because the equation lemma is now for <code>(f ∘ g) x = f (g x)</code></p>\n</blockquote>\n<p>Hmm, that's a bit sad that unfolding doesn't mean the same thing anymore. What motivated this change?</p>",
        "id": 401605235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699787955
    },
    {
        "content": "<p>It's not <code>unfold</code> that changed meaning I don't think, it's <code>simp [Function.comp]</code></p>",
        "id": 401605244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787980
    },
    {
        "content": "<p>Would you prefer the <code>@[eqns]</code> approach?</p>",
        "id": 401605263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699787994
    },
    {
        "content": "<p>Arguably with function.comp, you almost always just want to directly unfold it, rather than unfold the applied version</p>",
        "id": 401605336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788026
    },
    {
        "content": "<p>Yes, the <code>@[eqns]</code> approach sounds more principled given that we already have <code>Function.comp_apply</code> as a simp lemma and indeed usually want to get rid of unapplied <code>∘</code>.</p>",
        "id": 401605398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788111
    },
    {
        "content": "<p>I think I should be able to reuse most of my work in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8367\">#8367</a>, and just use the commit I cherry-picked as a reversion commit</p>",
        "id": 401605537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401605244\">said</a>:</p>\n<blockquote>\n<p>It's not <code>unfold</code> that changed meaning I don't think, it's <code>simp [Function.comp]</code></p>\n</blockquote>\n<p>And what motivated the change to <code>simp</code>?</p>",
        "id": 401605767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788396
    },
    {
        "content": "<p>The fact that it's not always the right thing to completely unfold a definition given to it; that's not what it did in Lean 3</p>",
        "id": 401605887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788513
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2042\">lean4#2042</a> was the issue I opened requesting this</p>",
        "id": 401605906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788534
    },
    {
        "content": "<p>Ah, but the fix is not solving exactly what you asked for!</p>",
        "id": 401606092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788699
    },
    {
        "content": "<p>I agree with your motivation: Tagging <code>foo</code> with <code>@[simp]</code> should make <code>simp</code> simplify applied instances of <code>foo</code>.<br>\nHowever I believe that giving <code>foo</code> to a <code>simp</code> call should unfold <code>foo</code>, whether it's applied or not.</p>",
        "id": 401606177,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788776
    },
    {
        "content": "<p>Having <code>attribute [simp] foo</code> not match <code>simp [foo]</code> sounds like a bad idea to me</p>",
        "id": 401606287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699788866
    },
    {
        "content": "<p>In other words, I wanted a change of behavior to what equation lemmas are tagged with <code>simp</code> when doing <code>@[simp] def foo</code>, not what equation lemmas are included in a <code>simp</code> call when doing <code>simp [foo]</code>.</p>",
        "id": 401606290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788869
    },
    {
        "content": "<p>I'm happy to make this a job for <code>@[simps]</code> if you want instead.</p>",
        "id": 401606316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788901
    },
    {
        "content": "<p>But certainly if I write <code>simp [foo]</code>, I want all <code>foo</code>s to be gone from my goal!</p>",
        "id": 401606336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699788921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401605263\">said</a>:</p>\n<blockquote>\n<p>Would you prefer the <code>@[eqns]</code> approach?</p>\n</blockquote>\n<p>I pushed a pair of commits to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8023\">#8023</a> with this change</p>",
        "id": 401606482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401606336\">said</a>:</p>\n<blockquote>\n<p>But certainly if I write <code>simp [foo]</code>, I want all <code>foo</code>s to be gone from my goal!</p>\n</blockquote>\n<p>Even if that means turning them into a <code>match</code>?</p>",
        "id": 401606533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789095
    },
    {
        "content": "<p>32 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2\">#mathlib4 &gt; v4.3.0-rc2</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 401606545,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699789118
    },
    {
        "content": "<p>Yes, otherwise I would have given <code>simp</code> the <code>foo_apply</code> lemma.</p>",
        "id": 401606552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699789120
    },
    {
        "content": "<p>Ah, but this is only true if <code>foo_apply</code> exists!</p>",
        "id": 401606562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789137
    },
    {
        "content": "<p>So I think it's up to you to use <code>eqns</code> to change the meaning of <code>simp [foo]</code> if you want to manually write <code>foo_apply</code>.</p>",
        "id": 401606586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789165
    },
    {
        "content": "<p>No I still believe this is a bad default.</p>",
        "id": 401606597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699789187
    },
    {
        "content": "<p><code>simp [foo]</code> should mean the same as <code>unfold foo</code>, namely remove all instances of <code>foo</code>.</p>",
        "id": 401606658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699789221
    },
    {
        "content": "<p>This might be a bad time to express that opinion... are you happy with the <code>@[eqns]</code> compromise for the sake of this release?</p>",
        "id": 401606667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789233
    },
    {
        "content": "<p>Sure, but I'm afraid we'll have to revert whatever Leo did to fix your issue and ask for what we actually wanted instead.</p>",
        "id": 401606690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699789267
    },
    {
        "content": "<p>Can you add a more RFC-style comment to the lean4 issue explaining why you dislike the current fix?</p>",
        "id": 401606937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699789536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2.20-.20comp_def.20and.20.238023/near/401606482\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2/near/401605263\">said</a>:</p>\n<blockquote>\n<p>Would you prefer the <code>@[eqns]</code> approach?</p>\n</blockquote>\n<p>I pushed a pair of commits to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8023\">#8023</a> with this change</p>\n</blockquote>\n<p><code>@[eqns]</code> doesn't work for dsimp :(</p>",
        "id": 401608204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699790591
    },
    {
        "content": "<p>I'm skeptical of making such a change using <code>@[eqns]</code> in Mathlib to such basic functions, and think if we want to do this we should put the <code>@[eqns]</code> in Lean or Std.</p>",
        "id": 401647442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699830854
    },
    {
        "content": "<p>I would like us to make the minimal changes now, so that Mathlib can stay on release candidates, and then work out what changes we want from Lean.</p>",
        "id": 401647480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699830916
    },
    {
        "content": "<p>If we measure in terms of diff size, the eqns solution is far more minimal</p>",
        "id": 401647594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831032
    },
    {
        "content": "<p>That is certainly true.</p>",
        "id": 401647620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699831077
    },
    {
        "content": "<p>I suspect that in the short term the <code>eqns</code>  thing being inconsistent between Std and Mathlib is not really going to cause any major issue</p>",
        "id": 401647667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831089
    },
    {
        "content": "<p>But I agree it would be nice to upstream it one or two steps</p>",
        "id": 401647672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831099
    },
    {
        "content": "<p>Okay.</p>",
        "id": 401647679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699831109
    },
    {
        "content": "<p>The <code>@[eqns]</code> attribute itself certainly makes more sense in Std</p>",
        "id": 401647683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831115
    },
    {
        "content": "<p>I'm happy with <code>@[eqns]</code> then. It would be nice to hear <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s opinion on this.</p>",
        "id": 401647705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699831148
    },
    {
        "content": "<p>I think Yael's remarks above can maybe be interpreted as a vote for the <code>simp [!def]</code> proposal you originally made, but it's not fully clear to me what behavior they want.</p>",
        "id": 401647787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831221
    },
    {
        "content": "<p>I think if we did end up deciding <code>@[eqns]</code> was a bad idea, it would be easy enough to delete those two lines and restore the <code>comp_apply</code>s via a cherry-pick; so I think it's harmless to let <a href=\"https://github.com/leanprover-community/mathlib4/pull/8371\">#8371</a> merge</p>",
        "id": 401647910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699831351
    },
    {
        "content": "<p>Yes, I think the <code>!def</code> option is pretty good. I worry about the complexity it will add in processing simp args.</p>",
        "id": 401652719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699835439
    },
    {
        "content": "<p>It sounds like we'd need it for <code>rw</code> too, though maybe that counts as a \"simp arg\"</p>",
        "id": 401652798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699835479
    },
    {
        "content": "<p>I haven't looked at the changes to Lean -- would it make any sense to be able to set the arity when lean generates equation lemmas? Or maybe there could be a command to regenerate them with a specific arity? I suppose even with this, you'd still sometimes want to <code>simp [!def]</code> to eliminate a definition.</p>",
        "id": 401653240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699835701
    },
    {
        "content": "<p>The suggestion I made somewhere on github was <code>def foo : Nat -&gt; Nat -&gt; Nat := fun x =&gt; unfold_to_here% fun y =&gt; x + y</code></p>",
        "id": 401656945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699837377
    },
    {
        "content": "<p>Which is a little more visible than the surprising behavior in lean3 of caring where the colon was.</p>",
        "id": 401657035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699837410
    },
    {
        "content": "<p>I'd be fine with <code>@[eqns]</code> on <code>comp</code> in std if needed to mitigate migration issues (I think we would have to upstream <code>@[eqns]</code> first though)</p>",
        "id": 401786292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699888942
    },
    {
        "content": "<p>I don't think that \"we already have <code>comp_apply</code>\" is a good argument for not having <code>simp [comp]</code> do the same thing; the reason we write those <code>apply</code> lemmas in the first place is because <code>simp [foo]</code> wasn't doing what we want!</p>",
        "id": 401786478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889008
    },
    {
        "content": "<p>I'm also not sure it is true that we always want to unfold unapplied <code>f \\circ g</code></p>",
        "id": 401786709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889061
    },
    {
        "content": "<p><code>(f \\circ g) x</code> is much more clearly a simp lemma</p>",
        "id": 401786823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889090
    },
    {
        "content": "<p>we should have a lemma to be applied manually for unfolding <code>f \\circ g</code> though</p>",
        "id": 401786929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889121
    },
    {
        "content": "<p>which I guess is <code>comp_def</code></p>",
        "id": 401786951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889130
    },
    {
        "content": "<p>Yes, really the question is, given we have both <code>comp_def</code> and <code>@[simp] comp_apply</code>, what should <code>rw [comp]</code> / <code>rw [(· ∘ ·)]</code> mean?</p>",
        "id": 401792426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699890447
    },
    {
        "content": "<p>The behavior matrix for what a bare <code>comp</code> means is:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>v4.3.0-rc1</th>\n<th>v4.3.0-rc2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>No <code>@[eqns]</code></td>\n<td><code>comp_apply</code> if that matches, else <code>comp_def</code></td>\n<td><code>comp_apply</code></td>\n</tr>\n<tr>\n<td><code>@[eqns]</code></td>\n<td><code>comp_def</code></td>\n<td><code>comp_def</code></td>\n</tr>\n</tbody>\n</table>",
        "id": 401793343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699890652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2.20-.20comp_def.20and.20.238023/near/401786709\">said</a>:</p>\n<blockquote>\n<p>I'm also not sure it is true that we always want to unfold unapplied <code>f ∘ g</code></p>\n</blockquote>\n<p>Yes, that's never what I claimed. I claimed that if I write <code>simp [comp]</code> that means I want <code>comp</code> to <em>be gone</em>.</p>",
        "id": 401797368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699891497
    },
    {
        "content": "<p>That's not what it meant in Lean3, is it?</p>",
        "id": 401805379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699893366
    },
    {
        "content": "<p>Well, that's what it did, right?</p>",
        "id": 401856689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699914944
    },
    {
        "content": "<p>For comp yes, but not for declarations in general</p>",
        "id": 401879217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699925404
    },
    {
        "content": "<p>In lean 3 it unfolded to the colon</p>",
        "id": 401879290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699925423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/v4.2E3.2E0-rc2.20-.20comp_def.20and.20.238023/near/401786292\">said</a>:</p>\n<blockquote>\n<p>I'd be fine with <code>@[eqns]</code> on <code>comp</code> in std if needed to mitigate migration issues (I think we would have to upstream <code>@[eqns]</code> first though)</p>\n</blockquote>\n<p><code>@[eqns]</code> has been hanging out on the PR queue for two months: <a href=\"https://github.com/leanprover-community/mathlib4/pull/245\">#245</a>. :-)</p>",
        "id": 401900873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699934345
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/245\">std#245</a></p>",
        "id": 401901477,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699934576
    }
]