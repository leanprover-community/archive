[
    {
        "content": "<p>I’m inclined to get myself lost in leany stuff for a two or three hours now. I hope that’s still useful when starting from scratch.<br>\nLooking at <a href=\"https://leanprover-community.github.io/mathlib-port-status/\">https://leanprover-community.github.io/mathlib-port-status/</a> <code>group_theory.free_group</code> might be useful, given that it’s math I am familiar with.<br>\nI guess I’ll follow <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki</a> until I am lost or stuck, and then whine here?</p>",
        "id": 323810824,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674758435
    },
    {
        "content": "<p>Should I create the PR in a fork, or ask for permissions to push to the <code>mathlib4</code> repo?</p>",
        "id": 323813488,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674759211
    },
    {
        "content": "<p>Ask for permission.</p>",
        "id": 323813841,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674759311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/free.20groups/near/323813488\">said</a>:</p>\n<blockquote>\n<p>Should I create the PR in a fork, or ask for permissions to push to the <code>mathlib4</code> repo?</p>\n</blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 323813873,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674759322
    },
    {
        "content": "<p>I’ll add that step to <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki</a><br>\n(Once I have permissions :-))</p>",
        "id": 323813956,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674759345
    },
    {
        "content": "<p>don't forget to include your github name in permission requests</p>",
        "id": 323814201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674759419
    },
    {
        "content": "<p>Also, to avoid the pit I fell into, I suggest opening a thread here titled `&lt;module&gt; mathlib4#&lt;Pull request no&gt;``</p>",
        "id": 323814291,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674759451
    },
    {
        "content": "<p><code>nomeata</code> is my handle, dear <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 323814492,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674759495
    },
    {
        "content": "<p>Voila, fellow Freiburger: <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a></p>",
        "id": 323814893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674759594
    },
    {
        "content": "<p>It needs <code>to_additive.map_namespaces</code> or the equivalent -- does this exist?</p>",
        "id": 323815907,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674759871
    },
    {
        "content": "<p>That’s what I just stumbled over…<br>\nBut I think I can do without if I just tell <code>to_additive</code> about this naming convention.</p>",
        "id": 323816159,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674759944
    },
    {
        "content": "<p>It looks like you can just do<br>\n<code>@[to_additive freeAddGroup.Red.Step]</code> etc.</p>",
        "id": 323818680,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674760621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> I'm not sure if these are mentioned already in the wiki, but there are some useful scripts:</p>\n<ul>\n<li><code>start_port.sh</code> to start the port</li>\n<li><code>fix-lints.py</code> to auto fix warnings about unused variables or unnecessary <code>&lt;;&gt;</code></li>\n<li><code>fix-comments.py</code> to update names mentioned in comments.</li>\n</ul>",
        "id": 323820877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674761254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/free.20groups/near/323820877\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> I'm not sure if these are mentioned already in the wiki, but there are some useful scripts:</p>\n<ul>\n<li><code>start_port.sh</code> to start the port</li>\n<li><code>fix-lints.py</code> to auto fix warnings about unused variables or unnecessary <code>&lt;;&gt;</code></li>\n<li><code>fix-comments.py</code> to update names mentioned in comments.</li>\n</ul>\n</blockquote>\n<p><code>start_port.sh</code> and <code>fix-lints.py</code> were already mentioned, but I added reference to <code>fix-comments.py</code></p>",
        "id": 323825938,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674762786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/free.20groups/near/323815907\">said</a>:</p>\n<blockquote>\n<p>It needs <code>to_additive.map_namespaces</code> or the equivalent -- does this exist?</p>\n</blockquote>\n<p>See <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20to_additive.2Emap_namespace\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20to_additive.2Emap_namespace</a><br>\nIt is waiting for an open PR to do this properly, but you can just do something like <code>@[to_additive freeAddGroup.Red.Step]</code> manually</p>",
        "id": 323826115,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674762843
    },
    {
        "content": "<p>Ok, the first 1100 lines are compiling. Now hitting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generator</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">support</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">List.recOn'</span> <span class=\"n\">yet</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">match</span> <span class=\"bp\">...</span> <span class=\"k\">with</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n</code></pre></div>\n<p>but it’s gotten late, so I’ll stop now and go to bed. The PR is free for anyone to take over .</p>",
        "id": 323921127,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674771943
    },
    {
        "content": "<p>Ok, I was able to fix that one :-)</p>",
        "id": 323922623,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674772510
    },
    {
        "content": "<p>There is a big block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> failed to parenthesize: parenthesize: uncaught backtrack exception</span>\n<span class=\"cm\">[PrettyPrinter.parenthesize.input] (Command.declaration</span>\n<span class=\"cm\">…</span>\n</code></pre></div>\n<p>I guess mathport failed? I hope it was not stupid to not check for that before hand-editing everything above.</p>",
        "id": 323922865,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674772620
    },
    {
        "content": "<p>that's a bug (mathport produced invalid syntax), usually caused by a change to mathlib4 tactic syntax</p>",
        "id": 323923067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674772713
    },
    {
        "content": "<p>link?</p>",
        "id": 323923088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674772725
    },
    {
        "content": "<p>it's not an error that would have affected anything before or after, but the affected declaration itself is probably a lost cause when you get this error</p>",
        "id": 323923221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674772786
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1867\">https://github.com/leanprover-community/mathlib4/pull/1867</a></p>",
        "id": 323923807,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674773049
    },
    {
        "content": "<p>Now I’m off to bed for good :-)</p>",
        "id": 323923828,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674773055
    },
    {
        "content": "<p>I think this is the only input missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">reduce.not</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">reduce</span> <span class=\"n\">L₁</span> <span class=\"bp\">=</span> <span class=\"n\">L₂</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">L2</span><span class=\"bp\">;</span> <span class=\"n\">injections</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)::</span><span class=\"n\">L1</span><span class=\"o\">)</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">x'</span> <span class=\"n\">b'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">reduce</span> <span class=\"n\">L1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">list.length</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">reduce.not</span> <span class=\"n\">L1</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)::</span><span class=\"n\">L2</span><span class=\"o\">)</span> <span class=\"n\">L3</span> <span class=\"n\">x'</span> <span class=\"n\">b'</span> <span class=\"n\">r</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">L2</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L2</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">injections</span><span class=\"o\">,</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">reduce.not</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">L3</span> <span class=\"n\">x'</span> <span class=\"n\">b'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">injection</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so not too bad</p>",
        "id": 323924130,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674773203
    },
    {
        "content": "<p>the mathport bug is fixed, so it should be updated in a few hours</p>",
        "id": 323924891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674773561
    },
    {
        "content": "<p>I manually formatted this (but no harm just replacing whatever mathport produces), and fixed a bunch of the other issues.</p>\n<p><code>reduce.not</code> has some typing issues I don't have the brainpower rn to track down, &amp; then there's a single <code>decidable</code> typing issue.</p>",
        "id": 323971730,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674802045
    },
    {
        "content": "<p>plus the usual lints and docu fixes</p>",
        "id": 323971760,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674802060
    },
    {
        "content": "<p>Compiles now, and line lengths and docu fixed.</p>",
        "id": 324020778,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1674817741
    }
]