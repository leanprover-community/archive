[
    {
        "content": "<p>I noticed that mathlib4's <code>try?</code> (<code>Mathlib.Control.Basic</code>) is essentially a more restricted (<code>Type</code> instead of <code>Type u</code>) and not-inlined version of core's <code>optional</code> (<code>Init.Control.Basic</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Attempts to perform the computation, and returns `none` if it doesn't succeed. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">try</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">some</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[always_inline, inline]</span> <span class=\"kd\">def</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">some</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>Is there any reason <code>try?</code> isn't more like <code>optional</code>? If not: I like mathlib4's syntax and the existence of a docstring, so maybe it would be useful to make <code>try?</code> an alias(?) of <code>optional</code>, or something like that?</p>",
        "id": 355284733,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683070718
    },
    {
        "content": "<p>I'm sure we just ported without noticing. An alias sounds good.</p>",
        "id": 355286968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683072299
    },
    {
        "content": "<p>Ok! Does an <code>alias</code> inherit the <code>@[always_inline, inline]</code> behavior somehow?</p>",
        "id": 355294347,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683076567
    }
]