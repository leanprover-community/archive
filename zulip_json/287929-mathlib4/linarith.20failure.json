[
    {
        "content": "<p>This turned up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1304\">mathlib4#1304</a>, looks like a linarith bug to me?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- linarith failed to find a contradiction</span>\n</code></pre></div>",
        "id": 319509822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672888887
    },
    {
        "content": "<p>Possibly related: with the same setup,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fails with two errors, \"unknown identifier 'h'\" as well as \"linarith failed to find a contradiction\"</p>",
        "id": 319510605,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672889582
    },
    {
        "content": "<p>Also possibly related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic failed, resulting expression contains metavariables\n  Linarith.lt_irrefl\n    (Eq.mp (?m.1237 ▸ Eq.refl (-x + x &lt; 0)) (add_lt_of_le_of_neg (neg_nonpos_of_nonneg h) (lt_zero_of_zero_gt a✝)))\n</code></pre></div>",
        "id": 319510769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672889744
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> these linarith failures -- I suspect the tactic is unusable while they remain. Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has some ideas?</p>",
        "id": 319661198,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672948287
    },
    {
        "content": "<p>I expect both of these <code>linarith</code> calls to succeed, but only the second one does.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- \"failed\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 324493539,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675029942
    },
    {
        "content": "<p>more minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- \"failed\"</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 324493802,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675030198
    },
    {
        "content": "<p>same problem if I use the integers or rationals instead of the reals</p>",
        "id": 324494203,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675030560
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">True.intro</span>\n  <span class=\"n\">linarith</span>\n<span class=\"c1\">-- \"failed\"</span>\n</code></pre></div>",
        "id": 324495029,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675031270
    },
    {
        "content": "<p>am I messing up the syntax somehow?</p>",
        "id": 324495086,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675031289
    },
    {
        "content": "<p>I have a much more spectacular failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- rw [← sub_nonpos, sub_half] at h'</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p><code>linarith</code> alone fails, but it succeeds if you rewrite first.</p>",
        "id": 324495568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675031693
    },
    {
        "content": "<p>this one seems more like the issue that linarith doesn't support <code>Rat</code> yet</p>",
        "id": 324495749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675031833
    },
    {
        "content": "<p>david's issues look like missing <code>whnf</code> or <code>withMainContext</code> somewhere</p>",
        "id": 324495848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675031895
    },
    {
        "content": "<p>I was over-complicating,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>already fails...</p>",
        "id": 324495856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675031903
    },
    {
        "content": "<p>yes, linarith doesn't recognize division so this is expected</p>",
        "id": 324495878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675031931
    },
    {
        "content": "<p>this <code>isEq</code> is returning <code>false</code> in my example: <a href=\"https://github.com/leanprover-community/mathlib4/blob/0988583c8cfbda4e61eca01b42d7abaf65a7d45f/Mathlib/Tactic/Linarith/Frontend.lean#L269\">https://github.com/leanprover-community/mathlib4/blob/0988583c8cfbda4e61eca01b42d7abaf65a7d45f/Mathlib/Tactic/Linarith/Frontend.lean#L269</a></p>",
        "id": 324495900,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675031958
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">mdata</span> <span class=\"n\">noImplicitLambda</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Rat</span> <span class=\"n\">_uniq.7</span> <span class=\"n\">_uniq.7</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 324496015,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675032037
    },
    {
        "content": "<p>I wonder if that <code>mdata</code> thing is messing stuff up</p>",
        "id": 324496029,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675032052
    },
    {
        "content": "<p>yup, that's exactly the same bug found in <code>abel</code> not long ago</p>",
        "id": 324496045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675032071
    },
    {
        "content": "<p>is there an easy fix?</p>",
        "id": 324496146,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675032137
    },
    {
        "content": "<p><code>whnfR</code> after the <code>instantiateMVars</code></p>",
        "id": 324496216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675032200
    },
    {
        "content": "<p>yep! that does it</p>",
        "id": 324496324,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675032263
    },
    {
        "content": "<p>I'll put up a PR</p>",
        "id": 324496338,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675032273
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1930\">https://github.com/leanprover-community/mathlib4/pull/1930</a></p>",
        "id": 324497398,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675033018
    }
]