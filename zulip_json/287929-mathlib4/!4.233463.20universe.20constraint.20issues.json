[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3463\">!4#3463</a> . Porting <code>CategoryThjeory.Sites.Limits</code> and right now there are 40+ errors of the form <code>stuck at solving universe constraint</code> which I don't know how to solve. The things Lean is getting stuck on are typically either of the form <code>max v ?u.13688 =?= max u v</code> or <code>max (max v w) ?u.16518 =?= max (max u v) w</code> . I've tagged the PR as <code>help-wanted</code>. Any ideas?</p>",
        "id": 350308506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681648660
    },
    {
        "content": "<p>Usually the fix is to tell Lean explicitly what you want to fill the universe metavariable with, by adding <code>.{u}</code> somewhere</p>",
        "id": 350310360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681649301
    },
    {
        "content": "<p>I think <code>.{_,_,u}</code> might also be legal if <code>u</code> isn't the <em>first</em> universe parameter, but I don't know</p>",
        "id": 350310511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681649348
    },
    {
        "content": "<p>I've seen some universe issues like this arising from the ordering of implicit arguments changing (perhaps because of auto implicits?). So maybe compare those to the mathlib3 version.</p>",
        "id": 350313218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681650581
    },
    {
        "content": "<p>Universe order changes in the following code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean3</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.category.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">i</span> <span class=\"c1\">-- i : category.{v (max v u)} C</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">i</span> <span class=\"c1\">-- i : Category.{v, max u v} C</span>\n</code></pre></div>",
        "id": 350315133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681651432
    },
    {
        "content": "<p>Lean 4 seems to do some kind of universe level normalization that can make solving unification problems later more difficult</p>",
        "id": 350315424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681651538
    },
    {
        "content": "<p>We looked at this some in Karlsruhe with <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> and others</p>",
        "id": 350315556,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681651598
    },
    {
        "content": "<p>Adam suggested at <a href=\"#narrow/stream/287929-mathlib4/topic/Universe.20issues.20with.20concrete.20categories/near/346361826\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Universe.20issues.20with.20concrete.20categories/near/346361826</a> that the problem is related to typeclass inference, but I haven't made any progress on that file even with that knowledge.</p>",
        "id": 350315981,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1681651805
    },
    {
        "content": "<p>Lean 4 is doing a better job of universes than lean 3 in <code>CategoryTheory.Sheaf.multiforkEvaluationCone</code>: Lean 3 has stuff like <code>(max v (max v u) w)</code> where Lean 4 has <code>max (max u v) w</code>. One thing I find particularly surprising with Lean 4's normalisation is that it seems to be alphabetical: the \"declare universes in a careful order\" stuff we used to do in lean 3 category theory is now irrelevant?</p>\n<p>I'm making progress with the PR again.</p>",
        "id": 350321550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681654264
    },
    {
        "content": "<p>I have just pushed this <a href=\"https://github.com/leanprover-community/mathlib4/pull/3463/commits/74211493db7923fe9ea0e7696f0a3f172b4888c2\">https://github.com/leanprover-community/mathlib4/pull/3463/commits/74211493db7923fe9ea0e7696f0a3f172b4888c2</a> which seems to make the situation less scary.</p>",
        "id": 350321953,
        "sender_full_name": "Joël Riou",
        "timestamp": 1681654448
    },
    {
        "content": "<p>Yes, I'd also managed to find this fix! In fact you don't even need <code>v</code>. Thanks for alerting me to the push!</p>",
        "id": 350323106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681655021
    },
    {
        "content": "<p>The order of declaring universe variables was for controlling the order that you would specify explicit universe level arguments in.</p>",
        "id": 350324828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681655799
    },
    {
        "content": "<p>Ok so I've got it all compiling modulo a sorry -- an extra goal which appeared during an <code>erw</code> and which is hopefully easy. But it's no good: the instances aren't firing because of the universe problems. See for example the bottom of the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: I had to name this instance because I need to explicitly</span>\n<span class=\"c1\">-- use it in the next instance; in Lean 3 the typeclass inference</span>\n<span class=\"c1\">-- system could handle the universe problems.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instHasColimitsOfShapeSheaf</span> <span class=\"o\">[</span><span class=\"n\">HasColimitsOfShape</span> <span class=\"n\">K</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimitsOfShape</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasColimit.mk</span>\n    <span class=\"o\">⟨</span><span class=\"n\">sheafifyCocone.</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">colimit.cocone</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">isColimitSheafifyCocone</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">colimit.isColimit</span> <span class=\"n\">_</span><span class=\"o\">)⟩⟩</span>\n\n<span class=\"c1\">-- porting note: typeclass inference used to do this and now it doesn't because of universe</span>\n<span class=\"c1\">-- issues.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasColimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">K</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">instHasColimitsOfShapeSheaf.</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}⟩</span>\n\n<span class=\"c1\">-- porting note: instance above won't fire because of universe issues.</span>\n<span class=\"c1\">-- example [HasColimits D] : HasColimits (Sheaf J D) := inferInstance -- doesn't actually work</span>\n</code></pre></div>",
        "id": 350338031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681661968
    },
    {
        "content": "<p>Gabriel informs us in the porting meeting that <code>Lean.Level.normalize</code> does indeed reorder universes into alphabetical order, which is presumably part of the reason that universes are being randomly permuted in the port.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Level.normalize</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">w</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Lean.Level.max (Lean.Level.param `v) (Lean.Level.param `w)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Level.normalize</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Lean.Level.max (Lean.Level.param `u) (Lean.Level.param `v)</span>\n</code></pre></div>",
        "id": 350601173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681760195
    },
    {
        "content": "<p>Just catching up on the meeting now and seeing this issue, and it's not immediately clear to me why the observed reordering matters at all. The careful ordering of universe arguments in the category theory library is about the <em>argument order</em> to regular functions and definitions like <code>Category.{v, u}</code>, not the built in level operation <code>max u v</code> which is supposed to be commutative. Any occurrence of <code>max u v</code> should be treated identically to <code>max v u</code>, so the mentioned canonicalization doesn't seem to be a problem. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mentions recalling that <code>max u v = max u ?v</code> is unified to <code>?v := v</code> in lean 3 but I don't think this is the case, IIRC it was just as conservative as lean 4 in this regard.</p>",
        "id": 350657841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681785419
    },
    {
        "content": "<p>From what I recall (and see in the source code), the order did matter in Lean 3.  Level unification seems to be completely rewritten in Lean 4 though, and in a way that seems to intentionally ignore the order.</p>",
        "id": 350659693,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681786672
    },
    {
        "content": "<p>I couldn't find any design discussion on zulip or github, but my best guess is that this behavior is intentional since <code>max u v = max u ?w</code> does not have a unique solution (e.g. we could assign <code>?w = v</code> or <code>?w = max u v</code>).</p>",
        "id": 350660879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681787456
    },
    {
        "content": "<p>Yes, the lean 4 behavior makes sense to me, but I recall having ambiguous unification issues of exactly that form in lean 3 as well, so perhaps that was a fallback behavior that triggered only in certain circumstances?</p>",
        "id": 350661294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681787753
    },
    {
        "content": "<p>Also this issue still needs a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> demonstrating a failing instance or something that worked in lean 3</p>",
        "id": 350661420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681787825
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">punit</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- works in Lean 3</span>\n</code></pre></div>",
        "id": 350661884,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681788113
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span><span class=\"o\">,</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- fails in Lean 4</span>\n</code></pre></div>",
        "id": 350661945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681788140
    },
    {
        "content": "<p>I see. And <code>#check (foo : Type u × Type max v u)</code> fails in lean 3</p>",
        "id": 350662156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681788281
    },
    {
        "content": "<p>and <code>#check (foo : Type u × Type max u (max u v))</code> also yields <code>foo.{u v}</code> which is... fun</p>",
        "id": 350662194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681788316
    },
    {
        "content": "<p>One possible way to improve the situation here would be if there was a way to declare universe inequalities, as an elaborator feature which desugars <code>def foo.{u, v&gt;=u}</code> to <code>def foo.{u, v}</code> in the declaration site and an annotation to always pass <code>max u v</code> instead of <code>v</code> for the second universe argument</p>",
        "id": 350662509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681788579
    },
    {
        "content": "<p>That would only change the unification problem from <code>max u ?w = max u v</code> to <code>max u (max u ?w) = max u v</code>.</p>",
        "id": 350662805,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681788775
    },
    {
        "content": "<p>ex:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">where</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span><span class=\"o\">,</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>\n<span class=\"c1\">-- sent to kernel: def foo.{u, v} : Type u × Type (max u v) := (PUnit, PUnit)</span>\n<span class=\"c1\">-- elaborator remembers that foo.{u, v where v ≥ u} : Type u × Type v</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"c1\">-- infers foo.{u, max u v}</span>\n</code></pre></div>",
        "id": 350662929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681788848
    },
    {
        "content": "<p>the unification problem in this case would be <code>foo.{?u, ?v} : Type ?u × Type ?v =?= Type u × Type (max u v)</code> because the elaborator remembers that <code>foo</code> was declared with a universe inequality</p>",
        "id": 350663063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681788958
    },
    {
        "content": "<p>I think we don't have precedent for the \"elaborator remembers\" part, that would have to be a separate piece of data from the ConstInfo, maybe an environment extension which stores the type with its declared universes rather than the max encoding used for the kernel</p>",
        "id": 350663353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681789159
    },
    {
        "content": "<p>When creating the <code>foo.{?u, ?v}</code> term we also get a pending defeq problem <code>?v =?= max ?u ?v</code> which needs to be resolved after <code>?v</code> is assigned</p>",
        "id": 350663559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681789296
    },
    {
        "content": "<p>Conceivably this could even be done without user annotations like <code>where v ≥ u</code>, since you can look at the type to try to find candidate universes like <code>v</code> here that only appear in the form <code>max a v</code> for some fixed <code>a</code></p>",
        "id": 350663784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681789446
    },
    {
        "content": "<p>At that point it might be easier to just add the rule that <code>max t s =?= max t r</code> reduces to <code>s =?= r</code>.</p>",
        "id": 350664478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681789940
    },
    {
        "content": "<p>I assume you mean that it would be too much work to implement? I agree that it's quite a big divergence from the status quo but I think it would definitely lead to better outcomes than the lean 3 heuristic</p>",
        "id": 350670768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681794175
    },
    {
        "content": "<p>I'm just talking about what we could do to avoid dealing with unification problems of the form <code>max u v = max u ?v</code> without changing the theory, in the long run</p>",
        "id": 350671138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681794372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/350662509\">said</a>:</p>\n<blockquote>\n<p>One possible way to improve the situation here would be if there was a way to declare universe inequalities, as an elaborator feature which desugars <code>def foo.{u, v&gt;=u}</code> to <code>def foo.{u, v}</code> in the declaration site and an annotation to always pass <code>max u v</code> instead of <code>v</code> for the second universe argument</p>\n</blockquote>\n<p>Yeah I mentioned the same idea to Sebastian in Karlsruhe--I only gave it a couple minutes' thought but it seems like it could be a translation managed by the elaborator, at least in ordinary use (e.g. ignoring metaprogramming)</p>",
        "id": 350674111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681795970
    },
    {
        "content": "<p>I'm running into a similar universe issue on line 241 of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3487\">!4#3487</a></p>",
        "id": 351675673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682093711
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">topCat_hasLimitsOfSize</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"n\">where</span> <span class=\"n\">has_limits_of_shape</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">HasLimit.mk</span>\n          <span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"n\">limitCone.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n            <span class=\"n\">isLimit</span> <span class=\"o\">:=</span> <span class=\"n\">limitConeIsLimit</span> <span class=\"n\">F</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">Top.Top_has_limits_of_size</span> <span class=\"n\">TopCat.topCat_hasLimitsOfSize</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max (u+1) (v+1) =?= max (v+1) (?u.31052+1)</span>\n<span class=\"cm\">while trying to unify</span>\n<span class=\"cm\">  HasLimitsOfSize TopCat</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (HasLimitsOfSize TopCat) (HasLimitsOfSize TopCat) (HasLimitsOfSize TopCat)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>That can't be good.</p>",
        "id": 351676863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094046
    },
    {
        "content": "<p>If you delete the universe annotations, it seems to work</p>",
        "id": 351677304,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682094168
    },
    {
        "content": "<p>but that's without general universes</p>",
        "id": 351677426,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094210
    },
    {
        "content": "<p>I think</p>",
        "id": 351677501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094228
    },
    {
        "content": "<p>The <code>.{max v u}</code> annotation seems to make Lean 4 very unhappy</p>",
        "id": 351677513,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682094232
    },
    {
        "content": "<p>But I don't understand why.</p>",
        "id": 351677701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094273
    },
    {
        "content": "<p>Anyway, this is not sustainable.</p>",
        "id": 351677740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094292
    },
    {
        "content": "<p>I'm starting to think that we need to ungeneralize the universe parameters in the (co)limit library :-/</p>",
        "id": 351677809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094316
    },
    {
        "content": "<p>That was my initial impression but it seems that stripping out the max’s generally makes things smoother than I first expected.</p>",
        "id": 351677982,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682094365
    },
    {
        "content": "<p>From checking the resulting declaration, it seemed to me that Lean was doing the correct thing (or a reasonable thing).</p>",
        "id": 351678160,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682094418
    },
    {
        "content": "<p>I mean, this is ridiculous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize</span> <span class=\"n\">TopCat</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">TopCat.foo.{u_1, u_2} : HasLimitsOfSize.{u_1, u_1, max u_1 u_2, (max u_1 u_2) + 1} TopCat.{max u_1 u_2}</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max (u+1) (v+1) =?= max (v+1) (?u.31092+1)</span>\n<span class=\"cm\">while trying to unify</span>\n<span class=\"cm\">  HasLimitsOfSize.{v, v, max v u, (max v u) + 1} TopCat.{max v u}</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (HasLimitsOfSize.{v, v, max ?u.31092 v, max (?u.31092 + 1) (v + 1)} TopCat.{max v ?u.31092})</span>\n<span class=\"cm\">    (HasLimitsOfSize.{v, v, max ?u.31092 v, max (?u.31092 + 1) (v + 1)} TopCat.{max v ?u.31092})</span>\n<span class=\"cm\">    (HasLimitsOfSize.{v, v, max ?u.31092 v, max (?u.31092 + 1) (v + 1)} TopCat.{max v ?u.31092})</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 351678304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094468
    },
    {
        "content": "<p>Yes. Take my suggestion as a workaround and not a permanent solution.</p>",
        "id": 351678725,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682094600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> does it work if you change <code>u</code> to <code>w</code>? (the reason I'm asking is that \"u,v\" is in alphabetical order whereas \"w,v\" isn't)</p>",
        "id": 351679976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682094926
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>nope, still fails.</p>",
        "id": 351680186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682094981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (or any other lean4 universe experts?) do you have any suggestions here?</p>",
        "id": 351680378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682095046
    },
    {
        "content": "<p>can you make a MWE? The types of relevant constants should suffice</p>",
        "id": 351681007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682095205
    },
    {
        "content": "<p>I need to run in a few minutes, but I'll do my best.</p>",
        "id": 351681149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682095245
    },
    {
        "content": "<p>Maybe Matt has time to make a MWE?</p>",
        "id": 351681254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682095272
    },
    {
        "content": "<p>pulling this stuff deep in mathlib always means getting the latest mathlib, lean, and cache which takes long enough for me to forget what I was trying to do in the first place</p>",
        "id": 351681414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682095321
    },
    {
        "content": "<p>I'm about to get on the tube, I'll try minimising and report back in 50 minutes (if I don't get a seat then it won't happen)</p>",
        "id": 351681591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682095356
    },
    {
        "content": "<p>I’ve got to meet with a student in a few minutes</p>",
        "id": 351681592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682095357
    },
    {
        "content": "<p>Meh do we not have the instance in master?</p>",
        "id": 351682447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682095576
    },
    {
        "content": "<p>found it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3487\">!4#3487</a></p>",
        "id": 351683356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682095855
    },
    {
        "content": "<p>Sorry. I didn’t realize that was the question.</p>",
        "id": 351684081,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682096060
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v'</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u'</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 351686118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682096562
    },
    {
        "content": "<p>I think that should capture essentially the same error <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> with no mathlib4 dependency</p>",
        "id": 351686239,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682096586
    },
    {
        "content": "<p>Can you remind me what Foo/Bar/Baz are again?</p>",
        "id": 351687268,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682096823
    },
    {
        "content": "<p><code>Foo.{v} C</code> should correspond to <code>Category.{v} C</code> and <code>Bar C D</code> should correspond to <code>HasLimitsOfShape C D</code> (approximately)</p>",
        "id": 351687437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682096873
    },
    {
        "content": "<p>This instance looks like it should be linted against</p>",
        "id": 351687501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096883
    },
    {
        "content": "<p>because <code>Bar</code> has four universe parameters and the second one is not constrained in a useful way</p>",
        "id": 351687591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096908
    },
    {
        "content": "<p>I did this in a rush, so I'm not 100% sure I got the universes right.</p>",
        "id": 351687629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682096917
    },
    {
        "content": "<p>Would that linter forbid the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ToLevel#doc\">docs4#Lean.ToLevel</a> instances too Mario?</p>",
        "id": 351687667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682096928
    },
    {
        "content": "<p>But the error at the end looks similar.</p>",
        "id": 351687675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682096931
    },
    {
        "content": "<p>no, since you can determine that universe from the output type</p>",
        "id": 351687882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096986
    },
    {
        "content": "<p>What do you mean \"the output type\"? The output type is <code>Lean.ToLevel.toLevel.{u} : Nat</code></p>",
        "id": 351688163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682097042
    },
    {
        "content": "<p>I mean the typeclass type</p>",
        "id": 351688335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097089
    },
    {
        "content": "<p>the thing that is being instance-searched</p>",
        "id": 351688365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097097
    },
    {
        "content": "<p><code>ToLevel.{u}</code> in this case</p>",
        "id": 351688398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097107
    },
    {
        "content": "<p>The error message here seems pretty borked though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.165</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">Bar</span> <span class=\"n\">C</span> <span class=\"n\">D</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">C</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">D</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p><code>Bar C D</code> is not a function, it looks like the error message put the type of the instance instead of the instance itself</p>",
        "id": 351688764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097219
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 351688791,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097226
    },
    {
        "content": "<blockquote>\n<p>because Bar has four universe parameters and the second one is not constrained in a useful way</p>\n</blockquote>\n<p>It's constrained via the <code>[Category.{v} C]</code> argument.</p>",
        "id": 351689549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097437
    },
    {
        "content": "<p>also lean says the type of <code>Bar.{v} C D</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which seems like a failure of level normalization, although I doubt it is the actual issue</p>",
        "id": 351689560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097440
    },
    {
        "content": "<p>sorry I meant <del><code>v</code></del> <code>u</code> in the anonymous instance</p>",
        "id": 351689836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097528
    },
    {
        "content": "<p>You mean <code>u</code>, right?  The <code>v</code> is well constrained, but the only way to figure out the <code>u</code> is by solving <code>max ?u v = max u v</code>.</p>",
        "id": 351690136,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097605
    },
    {
        "content": "<p>The instance has type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n      <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">C</span> <span class=\"n\">D</span>\n</code></pre></div>\n<p><code>u</code> never appears alone in this type, so the mathlib3 linter should fire on it</p>",
        "id": 351690168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097615
    },
    {
        "content": "<p>it's possible it is fooled by the <code>max (u + 1) (v + 1)</code> at the end, which seems to be the lean 4 preferred way to spell <code>max u v + 1</code></p>",
        "id": 351690434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097689
    },
    {
        "content": "<p>From what I remember, the mathlib linter explicitly accepts this.  It expects the unifier to solve <code>max u v = max ?u v</code>.</p>",
        "id": 351690453,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097698
    },
    {
        "content": "<p>The +1 is a red herring here.</p>",
        "id": 351690498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097715
    },
    {
        "content": "<p>Slightly cleanup up MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v'</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">u</span> <span class=\"c1\">-- specify order of universe parameters</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Morphisms</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasLimitsOfShape</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Limits</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u'</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfShape.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfShape.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max u v =?= max v ?u.165</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 351690577,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097731
    },
    {
        "content": "<p>I mean it might be fooling our linter</p>",
        "id": 351690602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097737
    },
    {
        "content": "<p>To quote the linter doc:</p>\n<blockquote>\n<p>This usually means that there is a <code>max u v</code> in the type where neither <code>u</code> nor <code>v</code> occur by themselves.</p>\n</blockquote>\n<p>Here, the <code>v</code> already appears by itself, so <code>max u v</code> is kosher.</p>",
        "id": 351690771,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097799
    },
    {
        "content": "<p>I see. I maintain that this should be rejected by a linter though</p>",
        "id": 351691015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097870
    },
    {
        "content": "<p>Note that the example above still fails even if you hand-hold lean on the universe arguments of the desired type, and cut out typeclass search</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">bar.</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 351691046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682097880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> that's basically what I mean, from the input and output types alone you still can't solve the universe argument in <code>bar.{_}</code></p>",
        "id": 351691181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097925
    },
    {
        "content": "<p>this kind of instance will never work</p>",
        "id": 351691261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682097949
    },
    {
        "content": "<p>It <em>did</em> work \"just fine\" in Lean 3 though.</p>",
        "id": 351691422,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682097988
    },
    {
        "content": "<p>I don't like the idea of reintroducing the broken lean 3 normalization / level unification though</p>",
        "id": 351691595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682098040
    },
    {
        "content": "<blockquote>\n<p>from the input and output types alone you still can't solve the universe argument</p>\n</blockquote>\n<p>Of course you <em>can</em> solve it.  Solving <code>max ?u v = max u v</code> is not impossible, it's merely unclear whether we want or should do it.</p>",
        "id": 351691653,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682098064
    },
    {
        "content": "<p>I am actually wondering whether we should try to prefer <code>?u := max u v</code> for that kind of problem</p>",
        "id": 351691766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682098098
    },
    {
        "content": "<p>Do we have a scenario where solving it is harmful?</p>",
        "id": 351691777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682098102
    },
    {
        "content": "<p>It is harmful if you later need to unify <code>?u = u</code> or <code>?u = max u v</code>.  Right now, this kind of constraint gets postponed.</p>",
        "id": 351692099,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682098204
    },
    {
        "content": "<p>Then again, if we get to the point that we are going to reject the solution entirely due to stuck universe constraints, we apparently never got to <code>?u = u</code> or <code>?u = max u v</code></p>",
        "id": 351692550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682098336
    },
    {
        "content": "<p>so maybe it's fine to just pick one</p>",
        "id": 351692593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682098350
    },
    {
        "content": "<p>and I think <code>max u v</code> is the more predictable one, if we had to choose</p>",
        "id": 351692761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682098403
    },
    {
        "content": "<p>Just catching up but here's the MWE I made:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- set_option pp.universes true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver'.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TopCat'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">moo.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasLimitsOfSize'.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasLimitsOfSize'.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat'.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasLimitsOfSize'.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat'.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max u_1 u_2 =?= max u_1 ?u.98</span>\n<span class=\"cm\">while trying to unify</span>\n<span class=\"cm\">  HasLimitsOfSize' TopCat'</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (HasLimitsOfSize' TopCat') (HasLimitsOfSize' TopCat') (HasLimitsOfSize' TopCat')</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 351697205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682099611
    },
    {
        "content": "<blockquote>\n<p>The error message here seems pretty borked though:</p>\n</blockquote>\n<p>Yeah, that was already observed by Jeremy Tan in another thread. There's a lot of repetition.</p>",
        "id": 351697522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682099687
    },
    {
        "content": "<p>My example shows that there's an issue even without the universe order switch.</p>",
        "id": 351697754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682099746
    },
    {
        "content": "<p>Note also the incorrect repetitions in the error message.</p>",
        "id": 351707830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682102611
    },
    {
        "content": "<p>I think we understand now pretty well what Lean code triggers this issue.  It happens whenever we have two types and we want one of them to live in a bigger universe than the other.  All of the examples in this thread are of this form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Something</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">whenUniversesLE</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Something</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Something</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 351708146,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682102718
    },
    {
        "content": "<p>What I still don't completely get is where these constraints come from in the first place, and how essential they are.  Could we replace them by a <code>Type u ↪ Type v</code> assumption?</p>",
        "id": 351708851,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682102961
    },
    {
        "content": "<p>I’m curious. What do you have in mind?</p>",
        "id": 351709241,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682103081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> They come from the fact that we want to support both small categories and large categories: <a href=\"https://en.wikipedia.org/wiki/Category_(mathematics)#Small_and_large_categories\">https://en.wikipedia.org/wiki/Category_(mathematics)#Small_and_large_categories</a></p>",
        "id": 351709534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682103172
    },
    {
        "content": "<p>Reid posted an example of why we care about universe inequalities: the category <code>Type u</code> has v-small limits if v &lt;= u and doesn't have them if v &gt; u.</p>",
        "id": 351710008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682103324
    },
    {
        "content": "<p>In pseudo-code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">GroupCat</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">GroupStructure</span> <span class=\"n\">G</span>\n<span class=\"k\">#check</span> <span class=\"n\">GroupCat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- the large universe</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">GroupCat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">G₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"c1\">-- the small universe</span>\n</code></pre></div>",
        "id": 351710022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682103330
    },
    {
        "content": "<p>Here's a wild thought: we could have syntax for <code>v ≤ u</code>, and the kernel could run a micro-version of <code>omega</code> (probably <code>omicron</code>?) to check that universe constraints are satisfied.<br>\nI have no idea how realistic this is performancewise....</p>",
        "id": 351710342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682103425
    },
    {
        "content": "<p>Thanks Kevin for spelling this out to me.</p>",
        "id": 351710399,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682103446
    },
    {
        "content": "<p>It guarantees you can quantify over some things without bumping universe levels for the objects.</p>",
        "id": 351710400,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682103447
    },
    {
        "content": "<p>If universe inequalities are a feasible option, that would be great.</p>",
        "id": 351710600,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682103498
    },
    {
        "content": "<p>I'm just playing around with some ideas for now. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">↪</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a.trans</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Function.Embedding.refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">--instance : ULE.{u, max v u} where</span>\n<span class=\"c1\">--  cond := ⟨Cardinal.lift.{v}, Cardinal.lift_injective⟩</span>\n\n<span class=\"c1\">--instance : ULE.{u, max u v} where</span>\n<span class=\"c1\">--  cond := ⟨Cardinal.lift.{v}, Cardinal.lift_injective⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>If you uncomment one or both of the the two commented out instances, then the last one fails. Does TC search just stop when it can't unify universes? That seems strange.</p>",
        "id": 351721045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682106952
    },
    {
        "content": "<p>I think this runs into the same issue as this thread.  The two commented instances require unifying <code>max u ?v = max u v</code>.</p>",
        "id": 351721905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682107227
    },
    {
        "content": "<p>right, that's what I figured. But once this fails, why doesn't TC search just keep going?</p>",
        "id": 351722061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682107284
    },
    {
        "content": "<p>Oh, it keeps going.  But what happens is that it con't solve the unification constraint immediately, and postpones it.  So it actually \"successfully\" returns an instance.  It's only at the very end that it figures it can't solve <code>max u ?v = max u v</code> and fails.</p>",
        "id": 351722412,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682107405
    },
    {
        "content": "<p>Ah I see.</p>",
        "id": 351723339,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682107717
    },
    {
        "content": "<p>I guess that's why reordering things works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">↪</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Function.Embedding.refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a.trans</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 351723500,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682107775
    },
    {
        "content": "<p>Is this intended?</p>",
        "id": 351723510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682107780
    },
    {
        "content": "<p>I mean, yeah.  What instances are tried first depends among other things on the order they're declared in.  (If the order is important, it's better to put a priority on the instance though.)  In this case, one instance works out at the end while another one blows up.</p>",
        "id": 351724182,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682108003
    },
    {
        "content": "<p>Sure, that I understand. But I still find it strange that lean remembers the universe unification problem from a failed attempt, and then tries the same problem on a successful attempt later on.</p>",
        "id": 351725016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108263
    },
    {
        "content": "<p>But of course I know nothing about the internals of the typeclass system, and there's probably a good reason for this which I don't understand.</p>",
        "id": 351725138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108292
    },
    {
        "content": "<blockquote>\n<p>lean remembers the universe unification problem from a failed attempt</p>\n</blockquote>\n<p>From Lean's POV, it was a successful attempt!</p>",
        "id": 351725481,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682108418
    },
    {
        "content": "<p>hmm... okay now I'm confused again :)</p>",
        "id": 351726083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108657
    },
    {
        "content": "<p>Ah okay I see. The TC trace is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"sd\">/-- foo -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- bar -/</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">↪</span> <span class=\"n\">Cardinal.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ULE.cond.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a.trans</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">rfl_ULE</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Function.Embedding.refl</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">succ_ULE</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">max_right_ULE</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">max_left_ULE</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_injective</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanc</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">to</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">to</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">to</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">max_left_ULE.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.238</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">to</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"bp\">≟</span> <span class=\"n\">ULE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.238</span><span class=\"o\">}</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">max_left_ULE.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.240</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>so for some reason typeclass search stops thinking it succeeded, and only then tries to unify universes which causes a failure.</p>",
        "id": 351726296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108757
    },
    {
        "content": "<p>Okay, Lean tries to apply <code>ULE.{?u, max ?u ?v}</code> to the <code>ULE.{u,v'}</code> in the example.  It can unify <code>?u = u</code> so it does that right away.  But it can't solve <code>max u ?v = v'</code> just yet, so it puts it on a todo list somewhere to figure out later.  Maybe something down the line will give us a value for <code>?v</code>, maybe when we solve one of the subgoals, who knows?  But there are no more subgoals, so Lean declares the instance a complete success.  Does that make sense?</p>",
        "id": 351726652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1682108880
    },
    {
        "content": "<p>Yes, I think I understand. Thanks for the explanation!</p>",
        "id": 351726838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682108935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/351677304\">said</a>:</p>\n<blockquote>\n<p>If you delete the universe annotations, it seems to work</p>\n</blockquote>\n<p>Unfortunately, lean does not choose appropriately general universes in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">TopCat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">α</span> <span class=\"bp\">≅</span> <span class=\"n\">TopCat.of</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conePointUniqueUpToIso</span> <span class=\"o\">(</span><span class=\"n\">piFanIsLimit</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">Top.pi_iso_pi</span> <span class=\"n\">TopCat.piIsoPi</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">piIsoPi</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">TopCat.piIsoPi.{v} {ι : Type v} (α : ι → TopCat.{v}) :</span>\n<span class=\"cm\">  Iso.{v, v + 1} (piObj.{v, v, v + 1} α) (of.{v} ((i : ι) → (α i).α))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Replacing <code>v</code> with <code>_</code> gives this result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">})</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Iso.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">piObj.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">of.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I fiddled for a bit with specifying universes explicitly for this declaration, but I just couldn't get things to work out.</p>",
        "id": 351949800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682195100
    },
    {
        "content": "<p>At the porting meeting it was suggested that this problem could be addressed by using a constant with separate universe arguments to avoid trying to unify two <code>max</code> expressions directly. Here is an example of using that technique to solve all the MWEs in this thread:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">X</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span><span class=\"o\">,</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">×</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span>\n<span class=\"kd\">end</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v'</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u'</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Bar.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Morphisms</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BigCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v'</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasLimitsOfShape</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Limits</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u'</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BigHasLimitsOfShape</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">BigType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasLimitsOfShape</span> <span class=\"n\">C</span> <span class=\"n\">D</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BigHasLimitsOfShape.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">BigHasLimitsOfShape.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- set_option pp.universes true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver'.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BigCategory'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u'</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TopCat'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BigTopCat'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">TopCat'</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">moo.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">TopCat'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasLimitsOfSize'.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category'.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize'</span> <span class=\"n\">BigTopCat'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize'</span> <span class=\"n\">BigTopCat'</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Something</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">whenUniversesLE</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Something</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">BigType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Something</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 352501002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682420004
    },
    {
        "content": "<p>Except you need to remove the <code>-- fails</code> on the last line, as happily it doesn't fail! :-)</p>",
        "id": 352508761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682422205
    },
    {
        "content": "<p>Interesting idea! Sorry I wasn't at the meeting yesterday, it coincided with family dinner. But this universe issue is \"blocking Copenhagen\" so thanks a lot for looking at it!</p>",
        "id": 352517958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682424576
    },
    {
        "content": "<p>Nice! How could we use this in the <code>TopCat</code> example? I suppose we could redefine it as <code>TopCat.{u,v}</code> to cave carrier <code>Type (max u v)</code>. Would that cause issues in the case where <code>u=v</code>?</p>",
        "id": 352522012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682425554
    },
    {
        "content": "<p>I think I did the <code>TopCat</code> example</p>",
        "id": 352523049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682425798
    },
    {
        "content": "<p>the basic strategy is to make a <code>BigTopCat</code> wrapper when you want to be able to separately unify the <code>u</code> and <code>v</code> arguments of a <code>max u v</code> universe somewhere</p>",
        "id": 352523356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682425879
    },
    {
        "content": "<p>Ah I see.</p>",
        "id": 352523994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682426032
    },
    {
        "content": "<p>Since everything here is an <code>abbrev</code>, it should not seriously block any unification problem when lean is in tryhard mode, but it gives a bit of extra hint in some cases. Notably, <code>(rfl : BigType.{u, v} = BigType.{v, u})</code> fails, although using <code>Eq.refl (Type _)</code> works as a proof</p>",
        "id": 352524142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426058
    },
    {
        "content": "<p>my hope is that these tricks only need to be used in some implementation detail instances, so most theorems can still be stated \"naturally\"</p>",
        "id": 352524586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426175
    },
    {
        "content": "<p>And if you want <code>Type max u v w</code> you define <code>BigBigType.{u, v, w}</code>?</p>",
        "id": 352552203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682432595
    },
    {
        "content": "<p>Note that the two universes in <code>BigType</code> are not really interchangeable and I expect we will come up with some convention regarding which is the unbound universe and which is the bound one. For <code>Type max u v w</code> I would expect only one unbound universe and hence <code>BigType.{u, max v w}</code> should suffice</p>",
        "id": 352553146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682432789
    },
    {
        "content": "<p>Yeah we will probably need to stick to the old \"universe level of morphisms come before objects\"</p>",
        "id": 352553327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682432824
    },
    {
        "content": "<p>Thanks Mario! Is this viewed as a workaround until something changes upstream or something more permanent?</p>",
        "id": 352556570,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682433476
    },
    {
        "content": "<p>I have no idea what the prospects are for something better, as all the proposed solutions are at various levels of pie in the sky</p>",
        "id": 352557793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682433733
    },
    {
        "content": "<p>I'm trying to make this trick work for the following decl:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">α</span> <span class=\"bp\">≅</span> <span class=\"n\">TopCat.of</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conePointUniqueUpToIso</span> <span class=\"o\">(</span><span class=\"n\">piFanIsLimit</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352571353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682436521
    },
    {
        "content": "<p>But I'm still getting the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.56877</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">HasLimitsOfSize</span> <span class=\"n\">TopCat</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">HasLimitsOfSize</span> <span class=\"n\">BigTopCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HasLimitsOfSize</span> <span class=\"n\">BigTopCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HasLimitsOfSize</span> <span class=\"n\">BigTopCat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352571706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682436587
    },
    {
        "content": "<p>Even this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">BigTopCat.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">α</span> <span class=\"bp\">≅</span> <span class=\"n\">BigTopCat.of</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives an error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.57707</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.57708</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.57708</span> <span class=\"bp\">?</span><span class=\"n\">u.57707</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.57708</span> <span class=\"bp\">?</span><span class=\"n\">u.57707</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352572624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682436773
    },
    {
        "content": "<p>And besides we want the type of this def to not involve <code>BigTopCat</code>, I suppose.</p>",
        "id": 352573182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682436888
    },
    {
        "content": "<p>you might need to define <code>BigHasLimitsOfSize</code></p>",
        "id": 352594814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682442127
    },
    {
        "content": "<p>I think you might want to avoid <code>max v u</code> on the basis that Lean occasionally applies a universe normalisation procedure which changes this to the alphabetically-ordered <code>max u v</code>.</p>",
        "id": 352622534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682450280
    },
    {
        "content": "<p>I don't think this will matter in practice since the sorting is relative to alphabetical order in the usage code, not the constant declaration</p>",
        "id": 352644350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682458960
    },
    {
        "content": "<p>also, exactly because lean 4 refuses to unify <code>max</code> problems, the unification algorithm is independent of variable ordering, which is why the alphabetic canonicalization is fine and should not result in any observable differences</p>",
        "id": 352644563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682459073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352594814\">said</a>:</p>\n<blockquote>\n<p>you might need to define <code>BigHasLimitsOfSize</code></p>\n</blockquote>\n<p>I'm not sure what you're suggesting with this.</p>",
        "id": 352651811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682462761
    },
    {
        "content": "<p>I don't see how to get this <code>BigTopCat</code> to work nicely with a declaration such as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">α</span> <span class=\"bp\">≅</span> <span class=\"n\">TopCat.of</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 352651894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682462796
    },
    {
        "content": "<p>The issue is that lean needs some instance with problematic universes to even talk about <code>∏ α</code>. I could rewrite everything in terms of <code>BigTopCat</code> as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">BigTopCat.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">α</span> <span class=\"bp\">≅</span> <span class=\"n\">BigTopCat.of.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but that doesn't help us because we want this isomorphism for <code>TopCat</code> and not for <code>BigTopCat</code>.</p>",
        "id": 352652118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682462903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352644350\">said</a>:</p>\n<blockquote>\n<p>I don't think this will matter in practice since the sorting is relative to alphabetical order in the usage code, not the constant declaration</p>\n</blockquote>\n<p>Does <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/350601173\">this example</a> contradict your claim?</p>",
        "id": 352653399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682463540
    },
    {
        "content": "<p>Here is something that gets the correct signature with proper universe parameters but is unpleasant. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piIsoPi.</span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">Discrete.</span><span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n<span class=\"k\">have</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">topCat_hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">TopCat.of</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 352654028,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682463838
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 352655446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682464590
    },
    {
        "content": "<p>I hadn't realised until now how badly these universe constraints had borked <a href=\"https://github.com/leanprover-community/mathlib4/pull/2712\">https://github.com/leanprover-community/mathlib4/pull/2712</a>. There's all these <code>haveI :=  hasLimit.{v, v}</code>s that we probably shouldn't have merged.</p>",
        "id": 352656249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682465093
    },
    {
        "content": "<p>Could I propose before we go further with experiments here that we rename Mario's <code>BigType</code> to <code>TypeMax</code> (and similarly for other uses of <code>Big</code>)?</p>",
        "id": 352656918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682465501
    },
    {
        "content": "<p>Can we do something silly like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasLimitsOfMaxSize</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize</span>\n</code></pre></div>\n<p>?</p>",
        "id": 352657533,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682465888
    },
    {
        "content": "<p>Okay, I have used <code>TypeMax</code> to fix <code>CategoryTheory.Limits.Types</code>, and it is seamless.</p>",
        "id": 352658473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682466411
    },
    {
        "content": "<p>I did not attempt to minimise the use of <code>TypeMax</code>; I just put it everywhere we previously had <code>Type max</code>.</p>",
        "id": 352658521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682466441
    },
    {
        "content": "<p>We can drop every <code>haveI</code> from that file as a result.</p>",
        "id": 352658535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682466452
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3653\">https://github.com/leanprover-community/mathlib4/pull/3653</a></p>",
        "id": 352658560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682466470
    },
    {
        "content": "<p>Where should <code>TypeMax</code> live?</p>",
        "id": 352658628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682466493
    },
    {
        "content": "<p><code>Mathlib.Data.TypeMax</code>?</p>",
        "id": 352658834,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682466655
    },
    {
        "content": "<p>Do we still have <code>ReflectedUniv</code>?</p>",
        "id": 352659121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682466853
    },
    {
        "content": "<p><code>TopCatMax</code> seems to help in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3464\">!4#3464</a>, so I have pushed a merge with <a href=\"https://github.com/leanprover-community/mathlib4/pull/3653\">!4#3653</a> and made the \"low-hanging fruit\" changes. There is still a lot of work on this file, and it is marked as <code>help-wanted</code>, so please jump in. :-)</p>",
        "id": 352663304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682469241
    },
    {
        "content": "<p><del>One of the hardest problems in CS ;)</del> obtuse way to saying <a href=\"https://github.com/leanprover-community/mathlib4/pull/3463\">!4#3463</a></p>",
        "id": 352664368,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682469775
    },
    {
        "content": "<p>I'm not sure how I feel about this... for example, this still fails, even with the <code>TypeMax</code> change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Products</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 352668486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682472269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352653399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352644350\">said</a>:</p>\n<blockquote>\n<p>I don't think this will matter in practice since the sorting is relative to alphabetical order in the usage code, not the constant declaration</p>\n</blockquote>\n<p>Does <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/350601173\">this example</a> contradict your claim?</p>\n</blockquote>\n<p>No, because that's not a defeq problem, you are just calling the level normalizer as a bare function. The <em>meaning</em> of that function depends on the context in which it is used. One reason why that kind of normalization is important (any consistent normalization, alphabetical or otherwise) is because lean wants to be able to use <code>normalize l1 == normalize l2</code> as a way to prove that <code>l1</code> and <code>l2</code> are defeq, so this is exactly what you need to make <code>max u v = max v u</code> be a defeq.</p>",
        "id": 352669823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682473225
    },
    {
        "content": "<p>(I am of course fine with the name change. I spent about half a second on the name choice)</p>",
        "id": 352669898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682473297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352668486\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how I feel about this... for example, this still fails, even with the <code>TypeMax</code> change:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Products</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>does work, but it's not quite up to Mario's \"my hope is that these tricks only need to be used in some implementation detail instances\".</p>",
        "id": 352679847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480099
    },
    {
        "content": "<p>I think you rather want <code>f : A -&gt; TypeMax.{v, u}</code> here</p>",
        "id": 352680319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480435
    },
    {
        "content": "<p>the output universe probably doesn't have to be a <code>TypeMax</code></p>",
        "id": 352680339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480455
    },
    {
        "content": "<p>No, unfortunately that gives the same error message!</p>",
        "id": 352680370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480478
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Products</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 352680415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480513
    },
    {
        "content": "<p>What is the type of pi?</p>",
        "id": 352680434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480521
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">piObj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasProduct</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"∏ \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">piObj</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 352680527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480580
    },
    {
        "content": "<p>I think this will work if pi is expecting a <code>TypeMax</code> function</p>",
        "id": 352680540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480586
    },
    {
        "content": "<p>what is the \"source\" of the <code>max v u</code> here?</p>",
        "id": 352680594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480633
    },
    {
        "content": "<p>That the category <code>Type u</code> has <code>Type v</code> indexed products iff <code>v &lt;= u</code>?</p>",
        "id": 352680789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480762
    },
    {
        "content": "<p>how about \"the category <code>TypeMax.{v, u}</code> has <code>Type v</code> indexed products\"</p>",
        "id": 352680860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480795
    },
    {
        "content": "<p>The actual instance is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Limits.Types.hasLimit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">SmallCategory.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">J</span> <span class=\"n\">TypeMax.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">HasLimit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 352680903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480845
    },
    {
        "content": "<p>So how did <code>Type max v u</code> get involved?</p>",
        "id": 352681027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480923
    },
    {
        "content": "<p>I suppose it's right in the example</p>",
        "id": 352681069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682480974
    },
    {
        "content": "<p>Adam wanting it to work \"for the user\" without having to know about <code>TypeMax</code>, I think.</p>",
        "id": 352681070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682480977
    },
    {
        "content": "<p>Currently <code>piObj</code> is excessively general:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Limits.piObj.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">HasProduct.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 352681147,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682481021
    },
    {
        "content": "<p>In practice <code>HasProduct.{w, v, u}</code> instances with unbounded <code>w</code> are never ever going to exist, so perhaps we should just reformulate this using <del><code>TypeMax</code></del> <code>CategoryMax</code> (which doesn't yet exist).</p>",
        "id": 352681189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682481061
    },
    {
        "content": "<p>I think it will push in the opposite direction, you want to try not to ever mention <code>Type (max v u)</code>, <code>TypeMax</code> is \"a universe with v-morphisms at least as large as u\"</p>",
        "id": 352681198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682481070
    },
    {
        "content": "<p>\"for the user\" they won't be using <code>Type (max u v)</code> they will be using <code>Type v</code> or <code>Type (v + 1)</code></p>",
        "id": 352681334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682481154
    },
    {
        "content": "<p>As long as maxes (with unbound universes) are involved you want to stick with <code>TypeMax</code></p>",
        "id": 352681354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682481175
    },
    {
        "content": "<p>I'm pretty happy with that. We can put a \"don't use <code>max</code> in the category theory library\" sticker somewhere. :-)</p>",
        "id": 352681406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682481222
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3653\">!4#3653</a> is hopefully almost ready to go for <code>TypeMax</code>. Would someone (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>? <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>?) be willing to contribute a doc-string for <code>TypeMax</code>, and hit merge? I can have a go tomorrow if no one has got to it.</p>\n<p>After that, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3487\">!4#3487</a> (Topology.Category.Top.Limits) should be ready to go! (In its new post <a href=\"https://github.com/leanprover-community/mathlib/pull/18871\">#18871</a> chopped down form.)</p>",
        "id": 352787171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682512653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352681334\">said</a>:</p>\n<blockquote>\n<p>\"for the user\" they won't be using <code>Type (max u v)</code> they will be using <code>Type v</code> or <code>Type (v + 1)</code></p>\n</blockquote>\n<p>This doesn't quite work out, e.g. with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.Types</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CategoryTheory.Limits.Types.productIso</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 352790321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513420
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.293</span> <span class=\"bp\">=?=</span> <span class=\"n\">v</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">TypeMax</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.293</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352790371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513432
    },
    {
        "content": "<p>well, in this case </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">f</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CategoryTheory.Limits.Types.productIso.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>works out, so maybe that's okay.</p>",
        "id": 352790539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513472
    },
    {
        "content": "<p>And yes, my main concern with <code>TypeMax</code> <code>TopCatMax</code> etc. is the user experience</p>",
        "id": 352790640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513497
    },
    {
        "content": "<p>It's funny, <code>library_search</code> finds <code>CategoryTheory.Limits.Types.productIso f</code>, but then results in the error above without the universe annotations.</p>",
        "id": 352791158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513620
    },
    {
        "content": "<p>Anyway, I think <code>TypeMax</code> is a good solution to let us move forward with the port. But it means that we will have yet another confusing thing to explain to newcomers who want to interact with the category theory library.</p>",
        "id": 352791959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682513807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352790640\">said</a>:</p>\n<blockquote>\n<p>And yes, my main concern with <code>TypeMax</code> <code>TopCatMax</code> etc. is the user experience</p>\n</blockquote>\n<p>We've had concerns with the user experience before in category theory (e.g. \"please write <code>universes v u</code> and not <code>universes u v</code>\", and \"please write <code>[\\McC : category C]</code> instead of <code>[category C]</code>\"), and basically they were solved over time as the system got better.</p>",
        "id": 352792201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682513863
    },
    {
        "content": "<p>Are we waiting for <a href=\"https://github.com/leanprover-community/mathlib/pull/18871\">#18871</a> to go through mathport before dealing with the other files? There are quite a few fixes in the other chunks that were made from the original mathport output.</p>",
        "id": 352814702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682518565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352787171\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3653\">!4#3653</a> is hopefully almost ready to go for <code>TypeMax</code>. Would someone (<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>? <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>?) be willing to contribute a doc-string for <code>TypeMax</code>, and hit merge? I can have a go tomorrow if no one has got to it.</p>\n</blockquote>\n<p>I wrote something for the documentation.</p>",
        "id": 352817834,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682519159
    },
    {
        "content": "<p>Yes, I think we can wait for mathport for the other files. Unfortunate my hasty approach here means we will need to retrieve the fixes from the other chunks from git history. :-(</p>",
        "id": 352940841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682540888
    },
    {
        "content": "<p>Thanks Matthew for the docs. Can someone merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/3653\">!4#3653</a> now?</p>",
        "id": 352941193,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682541014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233463.20universe.20constraint.20issues/near/352940841\">said</a>:</p>\n<blockquote>\n<p>Yes, I think we can wait for mathport for the other files. Unfortunate my hasty approach here means we will need to retrieve the fixes from the other chunks from git history. :-(</p>\n</blockquote>\n<p>I’ve got them on my local machine :)</p>",
        "id": 352945120,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682542429
    },
    {
        "content": "<p>Quick report re <code>TypeMax</code> and friends: I just ported <code>CompHaus.Basic</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3688\">!4#3688</a> and had to actually use <code>TopCatMax</code>. With just a little hint for lean, I didn't have to introduce <code>CompHausMax</code>! See <a href=\"https://github.com/leanprover-community/mathlib4/blob/76e8aeb932d9637fef67f8444bc8ae7c39c277cb/Mathlib/Topology/Category/CompHaus/Basic.lean#L252\">https://github.com/leanprover-community/mathlib4/blob/76e8aeb932d9637fef67f8444bc8ae7c39c277cb/Mathlib/Topology/Category/CompHaus/Basic.lean#L252</a></p>",
        "id": 353488387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682628860
    },
    {
        "content": "<p>I’ve started the process of migrating the changes from <a href=\"https://github.com/leanprover-community/mathlib4/pull/3487\">!4#3487</a> to the new files in the <code>Limits</code> folder with <a href=\"https://github.com/leanprover-community/mathlib4/pull/3709\">!4#3709</a>. I probably won’t have much time for addressing the remaining errors until Monday. Please feel free to help rectifying it.</p>",
        "id": 353893546,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682691237
    },
    {
        "content": "<p>If everything fails, another approach would be to implement universe inequalities like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Small.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">UnivLE</span> <span class=\"n\">where</span>\n  <span class=\"n\">condition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ULiftOfLE</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Shrink</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">UnivLE.condition.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equivULiftOfLE</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">ULiftOfLE.</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">equivShrink</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">UnivLE.condition.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then, for example, under the assumption <code>[Univ.Le.{u₁, u₂}]</code>, we could ensure that some limits/colimits in <code>Type u₂</code> indexed by some <code>J : Type u₁</code> exists by transporting the index set to <code>Type u₂</code>. But I hope the <code>TypeMax</code> approach will work...</p>",
        "id": 354703641,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682866865
    },
    {
        "content": "<p>I think this approach still has similar issues with max. See the code I posted way up in this thread with <code>ULE</code>.</p>",
        "id": 354703979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682866962
    },
    {
        "content": "<p>What I would suggest is to make the definitions more universe polymorphic, by mostly getting rid of the <code>max u v</code> universe parameters in the assumptions, replacing it with some <code>w</code> and suitable assumptions <code>UnivLE.{u, w}</code>.</p>",
        "id": 354705664,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682867453
    },
    {
        "content": "<p>But would you want an instance for <code>UnivLE.{u, max u v}</code>? Maybe I’m misunderstanding the proposal</p>",
        "id": 354705892,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682867531
    },
    {
        "content": "<p>In my proposal, there are no longer any <code>max u v</code> we have to cope with!</p>",
        "id": 354706266,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682867657
    },
    {
        "content": "<p>What about <code>Module.{u} R</code> where <code>R : Type v</code>?</p>",
        "id": 354706731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682867802
    },
    {
        "content": "<p>Oh maybe that’s just in <code>Type (u+1)</code>, but I think you get my point. Categories living in some <code>max</code> universe can arise naturally, so we would have to introduce instances for <code>UnivLE</code> for <code>max</code>, which would result in similar issues</p>",
        "id": 354709330,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682868545
    },
    {
        "content": "<p>I think Joël's point is that we would never introduce <code>max u v</code> but instead always work \"in a big enough universe\".</p>",
        "id": 354709626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682868649
    },
    {
        "content": "<p>And in particular your \"category living in some <code>max</code> universe\" would instead be a \"category living in any big enough universe\".</p>",
        "id": 354709776,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682868700
    },
    {
        "content": "<p>Okay, here is an actual example: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.StructuredArrow#doc\">docs4#CategoryTheory.StructuredArrow</a></p>",
        "id": 354709963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682868768
    },
    {
        "content": "<p>How do you propose to say that this category has a big enough universe without using max?</p>",
        "id": 354710011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682868803
    },
    {
        "content": "<p>Another <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Over#doc\">docs4#CategoryTheory.Over</a></p>",
        "id": 354710167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682868858
    },
    {
        "content": "<p><em>This</em> <code>Module.{u} R : Type (max v (u+1))</code> is a problem <em>only</em> if the categorical constructions you want to do with it are not enough universe polymorphic. This is why I suggest we <em>could</em> try to avoid <em>assuming</em> categories have special universe parameters: then, it would apply to any category, even <code>Module.{u} R</code>.</p>",
        "id": 354710356,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682868928
    },
    {
        "content": "<p>Replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StructuredArrow</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Comma</span> <span class=\"o\">(</span><span class=\"n\">Functor.fromPUnit</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">w</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}]</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StructuredArrow</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Comma</span> <span class=\"o\">(</span><span class=\"n\">Functor.fromPUnit</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n</code></pre></div>",
        "id": 354710367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682868933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>: this is not what I suggest. I suggest attempting at replacing <code>variable (X : Type (max u v))</code> by <code>variable (X : Type w)</code>, and if it is needed somewhere, we would add the assumption <code>UnivLE.{u, w}</code>.</p>",
        "id": 354710717,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682869052
    },
    {
        "content": "<p>Ah then I agree with Adam that it won't work!</p>",
        "id": 354710783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682869075
    },
    {
        "content": "<p>I am not saying it would solve all the universe issues: sometimes we may still have to remind Lean that <code>UnivLE.{u, max u v}</code> holds because this cannot be an instance, but this is not my definition of \"it won't work\".</p>",
        "id": 354712810,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682869847
    },
    {
        "content": "<p>Some more news on <code>TypeMax</code>.</p>\n<p>First, if someone could review <a href=\"https://github.com/leanprover-community/mathlib4/pull/5535\">#5535</a>, that would be great. It does a slight universe generalization, but mostly it documents some of the difficulties with instances involving <code>TypeMax</code>.</p>",
        "id": 370274330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928116
    },
    {
        "content": "<p>I've been working on forward porting <a href=\"https://github.com/leanprover-community/mathlib/pull/19153\">!3#19153</a>, and have <a href=\"https://github.com/leanprover-community/mathlib4/pull/5536\">#5536</a>, which fails due to <code>max u v =?u max u ?v</code> errors, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5534\">#5534</a>, which is the same except that it uses a patched version of Lean 4 and succeeds.</p>",
        "id": 370274549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, would you mind reviewing <a href=\"https://github.com/leanprover-community/mathlib4/pull/5534\">#5534</a> to check that it really did forward port the changes from <a href=\"https://github.com/leanprover-community/mathlib/pull/19153\">!3#19153</a>?</p>\n<p>This can either be done \"by hand\" by comparing the diffs, or by going to #out-of-sync, clicking on each file affected by <a href=\"https://github.com/leanprover-community/mathlib/pull/19153\">!3#19153</a>, and then clicking \"Overall diff\" in the left pane (this shows the diff between the SHA in the header and mathlib3 master).</p>",
        "id": 370274942,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928351
    },
    {
        "content": "<p>The motivation for the patch to Lean 4 is described at <a href=\"https://github.com/leanprover/lean4/issues/2297\">https://github.com/leanprover/lean4/issues/2297</a>, and the patch itself is at <a href=\"https://github.com/leanprover/lean4/issues/2298\">https://github.com/leanprover/lean4/issues/2298</a>. The verification that mathlib4 doesn't mind the patch is at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5416\">#5416</a>.</p>",
        "id": 370275093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687928408
    }
]