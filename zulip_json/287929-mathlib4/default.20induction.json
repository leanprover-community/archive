[
    {
        "content": "<p>Can we teach Lean 4 to do induction on <code>Nat</code> (in <code>induction</code> tactic) using <code>0</code> and <code>n + 1</code> instead of <code>Nat.zero</code> and <code>Nat.succ</code>?</p>",
        "id": 327921724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676435769
    },
    {
        "content": "<p>Isn't a custom induction lemma the way to do this (and then <code>induction using lemma</code>)?</p>",
        "id": 327962987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676454353
    },
    {
        "content": "<p>I think there is a way to set a default induction principle now too?</p>",
        "id": 327965682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676455155
    },
    {
        "content": "<p>That would be really nice. In NNG I had to hack Lean's induction tactic to make it use the right zero (<code>mynat.zero</code> v <code>has_zero.zero</code>)</p>",
        "id": 327987068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676461627
    },
    {
        "content": "<p>Is there any update on this? It would be very nice for <code>WithTop</code> as well.<br>\nAs a bonus: The \"Generate a recursive function...\" code action should also generate the correct pattern match syntax for the type...</p>",
        "id": 362044140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685400985
    },
    {
        "content": "<p>I was thinking about using the registered delaborators in the code action, which will fix pattern matches on <code>[] / x :: xs</code>, but not <code>0 / n + 1</code></p>",
        "id": 362044348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685401120
    },
    {
        "content": "<p>Unless I was imagining things, I think it turns out that in Lean 3 we had this all along by just naming the recursor <code>rec</code>; though that only worked for type aliases.</p>",
        "id": 362044736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685401324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> There's an <code>@[eliminator]</code> attribute: <a href=\"#narrow/stream/270676-lean4/topic/constructor.20is.20the.20new.20split/near/346658539\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/constructor.20is.20the.20new.20split/near/346658539</a></p>\n<p>I tried experimenting with it again recently and thought I ran into some error with some hypotheses not being generalized correctly when using this feature, but I don't think I have the example anymore.</p>",
        "id": 362044870,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685401399
    },
    {
        "content": "<p>By the way, is the intention for <code>rcases</code> also to use the default induction tactic for the type it's analyzing?</p>",
        "id": 362045016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685401461
    },
    {
        "content": "<p><code>rcases/rintro</code></p>",
        "id": 362045025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685401466
    },
    {
        "content": "<p>Should I try to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.rec'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">step</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and see how it works?</p>",
        "id": 362046065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685402108
    },
    {
        "content": "<p>If yes, how should I name the assumptions? <code>zero</code>/<code>step</code>, <code>zero</code>/<code>succ</code>, <code>base</code>/<code>step</code>?</p>",
        "id": 362046091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685402139
    },
    {
        "content": "<p>I'm pretty skeptical of custom eliminators, they were pretty buggy in lean 3</p>",
        "id": 362046097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402144
    },
    {
        "content": "<p><code>zero</code>/<code>succ</code></p>",
        "id": 362046112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402157
    },
    {
        "content": "<p>otherwise lots of things will break</p>",
        "id": 362046161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402166
    },
    {
        "content": "<p>We can't know if they work in Lean 4 unless we try.</p>",
        "id": 362046172,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685402183
    },
    {
        "content": "<p>I'm sure lots of things will still break if you put this in an early file, since the proofs will be assuming to see succ and not <code>n+1</code></p>",
        "id": 362046223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402233
    },
    {
        "content": "<p>I'm expecting to see &gt;200 files touched by this refactor</p>",
        "id": 362046263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402264
    },
    {
        "content": "<p>At least, I'll need to remove lots of <code>rw [Nat.zero_eq]</code></p>",
        "id": 362046265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685402266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/default.20induction/near/362046112\">said</a>:</p>\n<blockquote>\n<p><code>zero</code>/<code>succ</code></p>\n</blockquote>\n<p>Another reason for this naming is that you won't get hovers on the cases otherwise</p>",
        "id": 362046459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685402343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/default.20induction/near/362046097\">said</a>:</p>\n<blockquote>\n<p>I'm pretty skeptical of custom eliminators, they were pretty buggy in lean 3</p>\n</blockquote>\n<p>They work reliably in lean 4 via <code>induction using</code></p>",
        "id": 362047277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685402941
    },
    {
        "content": "<p>in particular I am concerned about (1) the eliminator not looking sufficiently eliminator-like for some code path, (2) the type being eliminated not actually being an inductive or not having the same constructors and code assuming that it is basically the same as the eliminator</p>",
        "id": 362047399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403023
    },
    {
        "content": "<p>there is still quite a lot baked into the language regarding handling of inductive types</p>",
        "id": 362047435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403062
    },
    {
        "content": "<p>we are a long way from \"view patterns\"</p>",
        "id": 362047451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403076
    },
    {
        "content": "<p>re: <code>rcases</code>, I don't know. <code>rcases</code> just calls the internal <code>cases</code> method so you should be able to see whether it does anything with default eliminators</p>",
        "id": 362047483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403121
    },
    {
        "content": "<p>I just want to call <code>induction n</code> and see <code>0</code> (not <code>Nat.zero</code>) and <code>n + 1</code>.</p>",
        "id": 362047918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685403435
    },
    {
        "content": "<p>Or it can break other tactics?</p>",
        "id": 362047940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685403456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/default.20induction/near/362047940\">said</a>:</p>\n<blockquote>\n<p>Or it can break other tactics?</p>\n</blockquote>\n<p>That is what I'm saying. Even if <code>cases</code> and <code>induction</code> themselves work, a lot of things assume that they work in a particular way, and generally only think about inductive types</p>",
        "id": 362048290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403746
    },
    {
        "content": "<p>but like you said, the only way to be sure is to try it and find out</p>",
        "id": 362048312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403781
    },
    {
        "content": "<p>It looks like <code>@[eliminator]</code> might only really affect <code>induction</code> and <code>cases</code> directly</p>",
        "id": 362048313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685403781
    },
    {
        "content": "<p>at the very least, linters and code actions have to be aware of it</p>",
        "id": 362048352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403822
    },
    {
        "content": "<p><code>rcases</code>/<code>rintro</code> use the <code>Lean.MVarId.cases</code> function, which appears not to look at <code>@[eliminator]</code> unless it's not obviously an inductive type</p>",
        "id": 362048360,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685403839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Everything you're saying seems like an argument to try this out, since anything that breaks is something that should be fixed, and now we have a better shot at fixing these things in Lean 4</p>",
        "id": 362048428,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685403873
    },
    {
        "content": "<p>heck, you can even use <code>@[eliminator]</code> also to do multi-target inductions. I have no idea how this is supposed to be used in practice and I'm sure everything will break</p>",
        "id": 362048498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685403952
    },
    {
        "content": "<p><code>match</code> is, as far as I am aware, completely ignorant of <code>@[eliminator]</code></p>",
        "id": 362048612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685404029
    },
    {
        "content": "<p>which is unfortunate since that's really where you want to do view-pattern-like things</p>",
        "id": 362048623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685404052
    },
    {
        "content": "<p>the difficulty level there is higher since you have to do exhaustiveness checking too</p>",
        "id": 362048702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685404091
    },
    {
        "content": "<p>What's languages <em>do</em> have \"view patterns\"?</p>",
        "id": 362048901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685404277
    },
    {
        "content": "<p><a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/view_patterns.html\">haskell</a> and <a href=\"https://docs.scala-lang.org/tour/extractor-objects.html\">scala</a> come to mind</p>",
        "id": 362048913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685404290
    },
    {
        "content": "<p>A lovely paper by my former colleague on how complicated things get in Haskell: <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/graf20lyg.pdf\">https://pp.ipd.kit.edu/uploads/publikationen/graf20lyg.pdf</a> (also has a Lean 3 formalization)</p>",
        "id": 362112392,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685436345
    },
    {
        "content": "<p>I had naively assumed that Lean would have prepared me for Haskell's type theory, but then saw</p>\n<blockquote>\n<p>The inhabitants of the type <code>Maybe Void</code> are <code>⊥</code>, <code>Nothing</code>, and <code>(Just ⊥)</code></p>\n</blockquote>\n<p>which is two more elements than <code>Option Empty</code> has in Lean!</p>",
        "id": 362115288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685437108
    },
    {
        "content": "<p>Yeah, in Haskell every type is inhabited by \\bot, which is ... special<span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 362188599,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685454295
    },
    {
        "content": "<p>Mario's suspicions are partly right: the <code>eliminator</code> works fine for <code>induction</code> but it doesn't work perfectly well with <code>cases</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[eliminator]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.recAux.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.recAux</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- ⊢ 0 + 0 = 0</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- n: Nat</span>\n    <span class=\"c1\">-- ih: 0 + n = n</span>\n    <span class=\"c1\">-- ⊢ 0 + (n + 1) = n + 1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- ⊢ 1 - 0 = 0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.le_refl</span> <span class=\"bp\">..</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- n: Nat</span>\n    <span class=\"c1\">-- a✝: n + 1 = n → 1 - (n + 1) ≤ 1 -- what!?</span>\n    <span class=\"c1\">-- ⊢ 1 + (n + 1) ≤ 1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_sub_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_sub</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_le</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>Personally, I still use the <code>eliminator</code> attribute. However, mostly locally. One use case that I find convenient is this diagonal recursor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.recDiag.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">succ_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">succ_succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ_succ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.recDiag</span> <span class=\"n\">zero_zero</span> <span class=\"n\">succ_zero</span> <span class=\"n\">zero_succ</span> <span class=\"n\">succ_succ</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">left</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ_zero</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">right</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_succ</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">right</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">eliminator</span><span class=\"o\">]</span> <span class=\"n\">Nat.recDiag</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_le</span> <span class=\"bp\">..</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_zero</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_le</span> <span class=\"bp\">..</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero_succ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_refl</span> <span class=\"bp\">..</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ_succ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_sub_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.succ_le_succ</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>Admittedly, for just one or two proofs, it's better to use <code>induction x, y using Nat.recDiag with...</code></p>",
        "id": 362292193,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685478004
    },
    {
        "content": "<p>Just cross-referencing everthing: this will need modification in core to get anywhere, but there is a mathlib4 branch where you can see this in action at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5562\">#5562</a>.</p>",
        "id": 370608878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688001949
    },
    {
        "content": "<p>Are there any news about this? I'm teaching induction today and I realized too late that it is still a mess. It would be really really nice to fix this.</p>",
        "id": 394437829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696254816
    }
]