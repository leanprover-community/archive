[
    {
        "content": "<p>I have a question about the design of structures and classes in mathlib, especially with respect to <code>extends</code>.<br>\nLet's take the example of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddHom#doc\">docs#AddHom</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddHomClass#doc\">docs#AddHomClass</a>, and their analogue <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv#doc\">docs#AddEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquivClass#doc\">docs#AddEquivClass</a>.</p>\n<p>Specifically, I don't understand why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv#doc\">docs#AddEquiv</a> is defined using <code>extends AddHom</code>, while <code>docs#AddEquivClass</code> is defined using an explicit rewriting of the additive property.</p>\n<p>If one does this, one gets an error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parent</span> <span class=\"n\">field</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">coe_injective''</span> <span class=\"k\">from</span> <span class=\"n\">parent</span> <span class=\"bp\">'</span><span class=\"n\">FunLike'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">EquivLike.coe</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">EquivLike.coe</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">EquivLike.inv</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">EquivLike.inv</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>which suggests that <code>EquivLike</code> should have borrowed its <code>coe_injective'</code> field from <code>FunLike</code> rather than redefining it.</p>",
        "id": 385061907,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692092758
    },
    {
        "content": "<p>There is a note after the definition of <code>EquivLike</code> that its definition of <code>coe_injective'</code> makes application of <code>congr'</code> easier.  My feeling is that this change makes all further definitions of classes more delicate (or prone to errors).</p>",
        "id": 385064223,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692093277
    },
    {
        "content": "<p>There's a thread, and even a closed mathlib 3 PR where I redefined <code>EquivLike</code> to extend <code>FunLike</code>. Ultimately, it was determined that people just didn't want this or feel it was necessary.</p>",
        "id": 385097428,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692100756
    }
]