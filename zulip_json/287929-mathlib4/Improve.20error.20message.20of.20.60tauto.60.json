[
    {
        "content": "<p>Currently, if <code>tauto</code> fails, I find the error messages and proof state a bit confusing. It only shows the \"unsolved goals\" message which appears in various other contexts too, like having an incomplete proof skeleton, etc.</p>\n<p>What would people think about adding an error message like \"tauto failed\" if <code>tauto</code> failed to make this clearer?</p>\n<p>Here's a suggestion of what I'd like the behaviour to be:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"c1\">-- Current behaviour:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- Error:</span>\n  <span class=\"c1\">-- unsolved goals</span>\n  <span class=\"c1\">-- x: ℕ</span>\n  <span class=\"c1\">-- h: x = 2</span>\n  <span class=\"c1\">-- em✝: (a : Prop) → Decidable a</span>\n  <span class=\"c1\">-- ⊢ x ^ 2 = 4</span>\n  <span class=\"n\">simp</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span> <span class=\"n\">Tauto</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.Tauto</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tautology</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">focus</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">classical</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n  <span class=\"n\">tautoCore</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">iterateUntilFailure</span>\n    <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n     <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n     <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">constructorMatching</span> <span class=\"bp\">·</span> <span class=\"n\">finishingConstructorMatcher</span><span class=\"o\">)))</span>\n\n  <span class=\"c1\">-- Add some error message to the implementation of `tauto`</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">logError</span> <span class=\"s2\">\"tauto failed.\"</span>\n\n  <span class=\"n\">done</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tauto'</span><span class=\"o\">)</span> <span class=\"s2\">\"tauto'\"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tauto'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">:</span><span class=\"n\">config</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_cfg</span> <span class=\"bp\">←</span> <span class=\"n\">elabConfig</span> <span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">cfg</span><span class=\"o\">)</span>\n  <span class=\"n\">tautology</span>\n\n<span class=\"c1\">-- Proposed behaviour</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto'</span> <span class=\"c1\">-- Errors:</span>\n  <span class=\"c1\">-- tauto failed.</span>\n  <span class=\"c1\">--</span>\n  <span class=\"c1\">-- unsolved goals</span>\n  <span class=\"c1\">-- x: ℕ</span>\n  <span class=\"c1\">-- h: x = 2</span>\n  <span class=\"c1\">-- em✝: (a : Prop) → Decidable a</span>\n  <span class=\"c1\">-- ⊢ x ^ 2 = 4</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n</div></div>",
        "id": 375839586,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689543148
    },
    {
        "content": "<p>Should there be a variant of <code>focus</code> that accepts a string title to describe the focus operation that failed? <code>focus_with \"tauto\" (tacs)</code>?</p>",
        "id": 375841742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689544669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `focusAndDone` already exists in core, modify it to take an error message</span>\n<span class=\"kd\">def</span> <span class=\"n\">focusAndDoneWithError</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">focus</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">tactic</span>\n\n    <span class=\"c1\">-- modified code of `done` to throw the error message</span>\n    <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n    <span class=\"n\">unless</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">logError</span> <span class=\"n\">m</span>\n      <span class=\"n\">Term.reportUnsolvedGoals</span> <span class=\"n\">gs</span>\n      <span class=\"n\">throwAbortTactic</span>\n\n    <span class=\"n\">pure</span> <span class=\"n\">a</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span> <span class=\"n\">Tauto</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.Tauto</span>\n\n<span class=\"c1\">-- `focusAndDone` already exists in core, modify it to take an error message</span>\n<span class=\"kd\">def</span> <span class=\"n\">focusAndDoneWithError</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">focus</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">tactic</span>\n\n    <span class=\"c1\">-- modified code of `done` to throw the error message</span>\n    <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n    <span class=\"n\">unless</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">logError</span> <span class=\"n\">m</span>\n      <span class=\"n\">Term.reportUnsolvedGoals</span> <span class=\"n\">gs</span>\n      <span class=\"n\">throwAbortTactic</span>\n\n    <span class=\"n\">pure</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tautology</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">focusAndDoneWithError</span> <span class=\"s2\">\"tauto failed.\"</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">classical</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n  <span class=\"n\">tautoCore</span>\n  <span class=\"n\">allGoals</span> <span class=\"o\">(</span><span class=\"n\">iterateUntilFailure</span>\n    <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n     <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n     <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">constructorMatching</span> <span class=\"bp\">·</span> <span class=\"n\">finishingConstructorMatcher</span><span class=\"o\">)))</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tauto'</span><span class=\"o\">)</span> <span class=\"s2\">\"tauto'\"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tauto'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">:</span><span class=\"n\">config</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_cfg</span> <span class=\"bp\">←</span> <span class=\"n\">elabConfig</span> <span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">cfg</span><span class=\"o\">)</span>\n  <span class=\"n\">tautology</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tauto'</span> <span class=\"c1\">-- Error:</span>\n<span class=\"c1\">-- tauto failed</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- unsolved goals</span>\n<span class=\"c1\">-- x: ℕ</span>\n<span class=\"c1\">-- h: x = 2</span>\n<span class=\"c1\">-- em✝: (a : Prop) → Decidable a</span>\n<span class=\"c1\">-- ⊢ x ^ 2 = 4</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n</div></div>",
        "id": 375990703,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689594431
    },
    {
        "content": "<p>What does it do if something fails within tauto?</p>",
        "id": 375991731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689594612
    },
    {
        "content": "<p><del>(also note that <code>focusAndDone</code> was called <code>solve</code> in lean 3)</del> nevermind, I see you're matching core's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.focusAndDone#doc\">docs#Lean.Elab.Tactic.focusAndDone</a></p>",
        "id": 375992268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689594697
    },
    {
        "content": "<p>currently tauto is implemented as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">focus</span> <span class=\"k\">do</span>\n  <span class=\"o\">[</span><span class=\"n\">yada</span> <span class=\"n\">yada</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>which I think should be exactly equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">focusAndDone</span> <span class=\"k\">do</span>\n  <span class=\"o\">[</span><span class=\"n\">yada</span> <span class=\"n\">yada</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>from core <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 375992955,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689594837
    },
    {
        "content": "<p>and all the code above does is adding <code>tauto failed</code> iff <code>unsolved goals</code> is displayed currently.</p>\n<p>What would be a case that tauto fails internally?</p>",
        "id": 375993299,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689594900
    },
    {
        "content": "<p>I'm suggesting something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `focusAndDone` already exists in core, modify it to take a scope name</span>\n<span class=\"kd\">def</span> <span class=\"n\">focusAndDoneWithScope</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">focus</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n       <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">tactic</span>\n   <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n       <span class=\"n\">throwError</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- combine m and e</span>\n\n    <span class=\"c1\">-- modified code of `done` to throw the error message</span>\n    <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n    <span class=\"n\">unless</span> <span class=\"n\">gs.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">logError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{m} could not solve some goals\"</span>\n      <span class=\"n\">Term.reportUnsolvedGoals</span> <span class=\"n\">gs</span>\n      <span class=\"n\">throwAbortTactic</span>\n</code></pre></div>",
        "id": 375993467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689594930
    },
    {
        "content": "<p>That is, distinguish the tactic crashing from it failing to close a goal</p>",
        "id": 375993823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689594994
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.throwAbortTactic#doc\">docs#Lean.Elab.throwAbortTactic</a> does some of this for you though</p>",
        "id": 375993920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689595019
    }
]