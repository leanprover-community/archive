[
    {
        "content": "<p>I'm trying to learn how to use ProofWidgets, and I've run into some challenges with running javascript in the infoview in VS code. It seems as though certain setups which work in a webpage don't work in the infoview.</p>\n<p>I was wondering if there are any rules of thumb—or, even better, any deeper insights into the source of the limitations—that let you anticipate when javascript will \"just work\", and when you have to take special care.</p>\n<p>For example, I'd expect this button to produce an alert when clicked, but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.HtmlDisplay</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Jsx</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">button</span> <span class=\"n\">onclick</span><span class=\"bp\">=</span><span class=\"s2\">\"alert('I</span><span class=\"se\">\\\\</span><span class=\"s2\">'m here!')\"</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"Are you there?\"</span><span class=\"o\">}</span><span class=\"bp\">&lt;/</span><span class=\"n\">button</span><span class=\"bp\">&gt;</span>\n  <span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Getting elements by id and setting their properties seems problematic as well; this should append the string \" + 1\" to the text of the the div with each click, but nothing changes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.HtmlDisplay</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Jsx</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">div</span> <span class=\"n\">id</span><span class=\"bp\">=</span><span class=\"s2\">\"element\"</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"0\"</span><span class=\"o\">}</span><span class=\"bp\">&lt;/</span><span class=\"n\">div</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">button</span> <span class=\"n\">onClick</span><span class=\"bp\">=</span><span class=\"s2\">\"</span>\n<span class=\"s2\">        const e = document.getElementById('element');</span>\n<span class=\"s2\">        e.innerHTML += ' + 1'\"</span><span class=\"bp\">&gt;</span>\n      <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"add 1!\"</span><span class=\"o\">}</span>\n    <span class=\"bp\">&lt;/</span><span class=\"n\">button</span><span class=\"bp\">&gt;</span>\n  <span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>Does this have to with using RPC, somehow? (I'm unfamiliar with the internals.) Any help or pointers to relevant docs are appreciated!</p>\n<p>Also appreciated are debugger tools: I'd like to right click &gt; inspect the infoview as I would a browser window, but I can't seem to do that. (There must be a way, though...) Thanks! :)</p>",
        "id": 376808904,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689808874
    },
    {
        "content": "<p>For debugging in VSCode, use 'Developer: Open Webview Developer Tools' in the command palette.</p>",
        "id": 376809285,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689809150
    },
    {
        "content": "<p>Ah, perfect, thanks! :)</p>",
        "id": 376810289,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689809818
    },
    {
        "content": "<p>As to what's going wrong, the issue is that you are trying to set <code>onclick</code> to a <code>string</code> whereas it should be a piece of code (which might be represented by that string, but is not equal to that string). In principle we could add special cases to the code that draw JSX trees to detect inline JS like you wrote and turn it into code (see <code>htmlDisplay.tsx</code> in the ProofWidgets repo for how this works, if you like), but that seems a bit hacky. Ideally we could write event handlers in Lean, but in general that requires a Lean to JS compiler.</p>",
        "id": 376810301,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689809823
    },
    {
        "content": "<p>One way to do what you want with the current technology is to specialize a <code>ProofWidgets.Component</code> to the particular event handler that you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NoProps</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.Server.RpcEncodable</span>\n\n<span class=\"kd\">@[widget_module]</span>\n<span class=\"kd\">def</span> <span class=\"n\">AlertButton</span> <span class=\"o\">:</span> <span class=\"n\">ProofWidgets.Component</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span>\n    <span class=\"s2\">\"import * as React from 'react'</span>\n<span class=\"s2\">    const e = React.createElement</span>\n\n<span class=\"s2\">    export default function(props) {</span>\n<span class=\"s2\">      return e('button', {onClick: () =&gt; alert('I</span><span class=\"se\">\\\\</span><span class=\"s2\">'m here!')}, props.children)</span>\n<span class=\"s2\">    }\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">html</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">AlertButton</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"Are you there?\"</span><span class=\"o\">}</span><span class=\"bp\">&lt;/</span><span class=\"n\">AlertButton</span><span class=\"bp\">&gt;</span>\n  <span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>The alert still won't show because the infoview is sandboxed, but you can see in the console that the code runs.</p>",
        "id": 376810687,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689810106
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NoProps</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.Server.RpcEncodable</span>\n\n<span class=\"kd\">@[widget_module]</span>\n<span class=\"kd\">def</span> <span class=\"n\">AddOneButton</span> <span class=\"o\">:</span> <span class=\"n\">ProofWidgets.Component</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span>\n    <span class=\"s2\">\"import * as React from 'react'</span>\n<span class=\"s2\">    const e = React.createElement</span>\n\n<span class=\"s2\">    export default function(props) {</span>\n<span class=\"s2\">      return e('button', {</span>\n<span class=\"s2\">          onClick: () =&gt; {</span>\n<span class=\"s2\">            const e = document.getElementById('element')</span>\n<span class=\"s2\">            e.innerHTML += ' + 1'</span>\n<span class=\"s2\">          }</span>\n<span class=\"s2\">        },</span>\n<span class=\"s2\">        props.children)</span>\n<span class=\"s2\">    }\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">html</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n      <span class=\"bp\">&lt;</span><span class=\"n\">div</span> <span class=\"n\">id</span><span class=\"bp\">=</span><span class=\"s2\">\"element\"</span><span class=\"bp\">&gt;</span><span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"0\"</span><span class=\"o\">}</span><span class=\"bp\">&lt;/</span><span class=\"n\">div</span><span class=\"bp\">&gt;</span>\n      <span class=\"bp\">&lt;</span><span class=\"n\">AddOneButton</span><span class=\"bp\">&gt;</span>\n        <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"add 1!\"</span><span class=\"o\">}</span>\n      <span class=\"bp\">&lt;/</span><span class=\"n\">AddOneButton</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;/</span><span class=\"n\">span</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 376811041,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689810344
    },
    {
        "content": "<p>Ah, okay, thanks so much! That explains a lot!</p>",
        "id": 376811843,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689810820
    },
    {
        "content": "<p>Hmm, so here's an example which behaves unintuitively (to me). Let's say I'm trying to create HTML which has a script in it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NoProps</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.Server.RpcEncodable</span>\n\n<span class=\"kd\">@[widget_module]</span>\n<span class=\"kd\">def</span> <span class=\"n\">AddOneOnce</span> <span class=\"o\">:</span> <span class=\"n\">ProofWidgets.Component</span> <span class=\"n\">NoProps</span> <span class=\"n\">where</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span>\n    <span class=\"s2\">\"import * as React from 'react'</span>\n<span class=\"s2\">    const e = React.createElement</span>\n\n<span class=\"s2\">    export default function(props) {</span>\n<span class=\"s2\">  return e('span', null,</span>\n<span class=\"s2\">    e('span', {id:</span><span class=\"se\">\\\"</span><span class=\"s2\">test</span><span class=\"se\">\\\"</span><span class=\"s2\">}, props.children),</span>\n<span class=\"s2\">    e('script',null, </span><span class=\"se\">\\\"</span><span class=\"s2\">const e = document.getElementById(</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">test</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">); e.innerHTML += ' + 1'</span><span class=\"se\">\\\"</span><span class=\"s2\">))</span>\n<span class=\"s2\">  }\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Jsx</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">AddOneOnce</span><span class=\"bp\">&gt;</span>\n    <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">text</span> <span class=\"s2\">\"0\"</span><span class=\"o\">}</span>\n  <span class=\"bp\">&lt;/</span><span class=\"n\">AddOneOnce</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>This produces the HTML you'd expect—HTML which, if opened in a browser, adds one once—but doesn't run the script produced when you'd expect it to. Is there something different about the timing in this case?</p>\n<p>And is there a better way to factor this through two widgets? (I tried making the code to get the element and append \" + 1\" a separate widget which I passed to the other as a child, but hit a \"cannot read properties of null\" error—perhaps I should have expected that anyway, though (I'm still learning React).)</p>",
        "id": 376814983,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689812482
    },
    {
        "content": "<p>I would avoid writing <code>&lt;script&gt;</code> tags altogether. In React you should program everything in terms of event handlers, and rendering code to set things up before the final <code>return</code>.</p>",
        "id": 376815403,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689812651
    }
]