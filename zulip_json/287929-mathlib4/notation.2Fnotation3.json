[
    {
        "content": "<p>I started porting <code>measure_theory.measurable_space_def</code>. I tried to copy notation for <code>IsOpen[t]</code> to get notation for <code>MeasurableSet[m]</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">MeasureTheory</span><span class=\"o\">]</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"measurable_set[\"</span> <span class=\"n\">m</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>and it seems that Lean tries to parse it as a <code>notation3</code>:  the error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">72</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span>\n<span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">binder_predicate'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">notation3'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">unif_hint'</span>\n<span class=\"mi\">72</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">macro</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">quot_precheck</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">syntax</span> <span class=\"n\">kind</span> <span class=\"bp\">'</span><span class=\"n\">Lean.Parser.Term.explicit'</span> <span class=\"n\">found</span>\n  <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span>\n<span class=\"n\">This</span> <span class=\"n\">means</span> <span class=\"n\">we</span> <span class=\"n\">cannot</span> <span class=\"n\">eagerly</span> <span class=\"n\">check</span> <span class=\"n\">your</span> <span class=\"kd\">notation</span><span class=\"bp\">/</span><span class=\"n\">quotation</span> <span class=\"n\">for</span> <span class=\"n\">unbound</span> <span class=\"n\">identifiers</span><span class=\"bp\">;</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">disable</span> <span class=\"n\">this</span> <span class=\"n\">check.</span>\n</code></pre></div>\n<p>and it shows help for <code>notation3</code> when I hover the word \"scoped\".</p>",
        "id": 326159607,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675697849
    },
    {
        "content": "<p>I wonder why this doesn't happen with notation for <code>IsOpen[t]</code> but happens here.</p>",
        "id": 326159712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675697876
    },
    {
        "content": "<p>Does it work without <code>scoped[MeasureTheory]</code>?</p>",
        "id": 326162623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675698636
    },
    {
        "content": "<p>If it's in the <code>MeasureTheory</code> namespace already, you can also just write <code>scoped</code></p>",
        "id": 326162669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675698652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"measurable_set[\"</span> <span class=\"n\">m</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n</code></pre></div>",
        "id": 326184515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675700964
    },
    {
        "content": "<p>works</p>",
        "id": 326184530,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675700967
    },
    {
        "content": "<p>I'll use it as a workaround.</p>",
        "id": 326184646,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675700994
    }
]