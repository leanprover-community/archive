[
    {
        "content": "<p>Here's a maths theorem: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></msub><msup><mi>i</mi><mn>5</mn></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo>−</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>2</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>3.</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{0\\leq i&lt;n}i^5=(4(n(n-1)/2)^3-(n(n-1)/2)^2)/3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.209em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/2</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/3.</span></span></span></span> The hard part is finding the statement; the proof is \"trivial by induction\". The theorem involves subtraction and division, so my rule of thumb in Lean is to get the heck out of the naturals ASAP. In Lean 3 my formalisation would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_fifths</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that I coerce <code>i</code> to <code>ℚ</code> on the left hand side, and in lean 3 this was enough to tell lean that the right hand side was to be treated as a rational.</p>\n<p>In Lean 4 I'm expecting the proof to be just as simple, but I'm having real trouble writing the statement neatly because I don't properly understand the new way of things with coercions: see <a href=\"https://github.com/leanprover/lean4/pull/1915\">lean4#1915</a> . Here are more and more desperate efforts to get the thing compiling; I finally win but have apparently created a term so monstrous that <code>simp</code> no longer does the base case :-(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance `HPow ℚ ℕ ℕ`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance `HMul ℚ ℕ ?m.2408`</span>\n<span class=\"c1\">-- failed to synthesize instance `HDiv ℕ ℚ ℚ`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- same errors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- compiles!</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"c1\">-- (deterministic) timeout at 'simp'</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I did get this one working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_cubes</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>again I'm just randomly adding up-arrows and coercions to Q, so it's definitely possible, but I am not a fan of this trial and error approach. Are there rules of thumb here? Note that this used to be easy.</p>",
        "id": 346854316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680615469
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_fifths</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"c1\">-- deterministic timeout :-/</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why am I in this hell?</p>",
        "id": 346856659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680615834
    },
    {
        "content": "<p>I think <code>simp</code> now tries hard to do rfl style matches or <code>decide</code> in the end? I've have very slow <code>simp</code>s also whenever I have a <code>some_finset \\mem Finset.filter p univ</code>, which I \"fix\" by doing <code>simp only [mem_filter, mem_univ]</code>.</p>",
        "id": 346858770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680616166
    },
    {
        "content": "<p>The problem is not necessarily the new coercion rules, but the fact that <code>a / b</code> no longer requires <code>a</code>, <code>b</code>, and <code>a / b</code> to be the same type and so Lean can no longer work out the type of <code>b</code> from the type of <code>a</code></p>",
        "id": 346861930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680616668
    },
    {
        "content": "<p>Here's a mathlib4-free version of the hell:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance `HPow Nat Nat Rat`</span>\n</code></pre></div>",
        "id": 346863438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680616891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you thought about this the first time it came up. Can you see a simple way to get that example above compiling? I am having to insert tons of explicit casts to get this to typecheck. Note that this is not a pathological example, the RHS is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></msub><msup><mi>i</mi><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{i&lt;n}i^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1412em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> and this came up in an undergrad question.</p>",
        "id": 346866164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680617301
    },
    {
        "content": "<p>To un-xy, my goal was to port <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2023/blob/main/src/solutions/section15number_theory/sheet7.lean\">this lean 3 proof</a> that <code>(∑ i in range n, i^3) ∣ (3 * ∑ i in range n, i^5)</code> and I'm running into two issues (the coercion issue and the fact that <code>simp</code> can't do the base case of the induction for the formula for sum of 5th powers)</p>",
        "id": 346867618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680617556
    },
    {
        "content": "<p>I can see possible hacks where you clear denominators and try and get things to work over integers, but I find this a bit distasteful. My proof avoids all of this by doing the calculations over Q where it's (in theory) much easier, and then using <code>int.cast_inj</code> at the last minute.</p>",
        "id": 346868175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680617682
    },
    {
        "content": "<p>Is it sufficient to put an arrow before every <code>n</code>?</p>",
        "id": 346918082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680627269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">scratch.lean:3:37</span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  HPow Nat Nat Rat</span>\n<span class=\"cm\">scratch.lean:3:53</span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  HPow Nat Nat Rat</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 346941067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680633342
    },
    {
        "content": "<p>Does Lean 4 have an equivalent of <code>#print instances HPow</code>? I guess <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HPow#doc\">docs4#HPow</a> answers my question but it's annoying to have to leave the editor</p>",
        "id": 346941971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680633598
    },
    {
        "content": "<p>If you tell Lean each power is a <code>Nat</code> it won’t complain.</p>",
        "id": 346941990,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680633602
    },
    {
        "content": "<p>I think your imports are too minimal</p>",
        "id": 346942498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680633745
    },
    {
        "content": "<p>There is no power operation on the rationals in std</p>",
        "id": 346942512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680633752
    },
    {
        "content": "<p>This was the minimal number of annotations I had to put in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 346943283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680633971
    },
    {
        "content": "<p>So my argument is that we can't expect people to have to work this out, this is not great at all.</p>",
        "id": 346998813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680655847
    },
    {
        "content": "<p>The game isn't \"find the minimal coercions that work in each case\", the system seems to be broken here.</p>",
        "id": 346999011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680655927
    },
    {
        "content": "<p>an idea: ocaml-style <code>Namespace.( whatever + operations / 2 * i - want)</code> syntax for arithmetic. So that way you can write <code>Rat.( 4*(n*...) )</code> and know all of the arithmetic operations are the Rat versions of those operations.</p>",
        "id": 347045590,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680680043
    },
    {
        "content": "<p>doesnt have to be a generalpurpose language feature, just a special solution for distinguishing Nat/Int/Rat/Real arithmetic, since it can be hard to distinguish them (and they're not always equivalent)</p>",
        "id": 347045944,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680680128
    },
    {
        "content": "<p>We might already have the tools necessary to do this, by adding a new namespace eg <code>Rational.Notation</code> with high-priority default instances of all the arithmetic specialized to Rat. and then <code>open Rational.Notation in ...</code> is a way of locally forcing stuff to be in Rational</p>",
        "id": 347046473,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680680240
    },
    {
        "content": "<p>I wonder if disabling the default behavior that 37 is a nat would help here</p>",
        "id": 347063144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680684100
    }
]