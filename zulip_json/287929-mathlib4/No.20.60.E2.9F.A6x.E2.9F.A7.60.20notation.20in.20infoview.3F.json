[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Quot</span> <span class=\"c1\">-- ⟦_⟧ notation</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">X.setoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">X.setoid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">x</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">x</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  x : Nat</span>\n<span class=\"cm\">  ⊢ Quotient.mk X.setoid x = Quotient.mk X.setoid x</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I was expecting to see <code>⟦x⟧  = ⟦x⟧</code>. How do I get quotient notation in the infoview? I can't even seem to rewrite to the quotient notation.</p>",
        "id": 399169311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698598040
    },
    {
        "content": "<p>I suspect there is no delaborator for it</p>",
        "id": 399172538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698600830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> do you know how to fix this?</p>",
        "id": 399178358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698606327
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8022\">#8022</a> Often it seems that when a <code>notation</code> doesn't pretty print you can turn it into a <code>notation3</code>, which has a more sophisticated delaborator generator.</p>",
        "id": 399190749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698619435
    },
    {
        "content": "<p>My understanding is that <code>notation3</code> was only intended as a crutch for porting. It sounds like this is not the case, and so we should either:</p>\n<ul>\n<li>Just rename it, if no part of the tactic is a porting crutch</li>\n<li>Split the tactic into a <code>notation_with_delab</code> (with no hacks) and <code>notation3</code> (which is <code>notation_with_delab</code> + compatibility hacks), and slowly eradicate the latter</li>\n</ul>",
        "id": 399190888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698619547
    },
    {
        "content": "<p><code>notation3</code> tries to do everything that the Lean 3 version did, and I think in principle it doesn't have any features we don't want. Renaming it seems sensible to me.</p>",
        "id": 399191127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698619726
    },
    {
        "content": "<p>I hope eventually <code>notation</code> itself becomes better at generating delaborators.</p>\n<p>The main interesting feature of <code>notation3</code> is that it has some scoping constructs for dealing with nested binders.</p>",
        "id": 399191191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698619793
    }
]