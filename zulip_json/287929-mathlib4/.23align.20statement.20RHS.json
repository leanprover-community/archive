[
    {
        "content": "<p>I noticed that in the <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/GroupTheory/SpecificGroups/Quaternion.lean\">Quaternion</a> file, the <code>#align</code> statements have the same RHS and LHS, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">quaternion_group.mul</span> <span class=\"n\">quaternion_group.mul</span>\n</code></pre></div>\n<p>However, in a completely ported file like <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Topology/PathConnected.lean\">PathConnected</a>, the RHS is the new name, for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">path.trans_prod_eq_prod_trans</span> <span class=\"n\">Path.trans_prod_eq_prod_trans</span>\n</code></pre></div>\n<p>Perhaps the porting script could be touched up to make the RHS of the <code>#align</code> be the new function name.</p>",
        "id": 361664190,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685234620
    },
    {
        "content": "<p>Mathport does this automatically. It seems the issue here is that it's a private definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xa</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xa</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">quaternion_group.mul</span> <span class=\"n\">quaternion_group.mul</span>\n</code></pre></div>\n<p>so mathport is confused why it isn't found at the location given by the namespace</p>",
        "id": 361664369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685234766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  should this be <code>protected</code>?  I am looking at <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Topology/PathConnected.lean\">PathConnected</a> because it has an example of a <code>mul</code> definition that checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive \"Pointwise addition of paths in a topological additive group.\"]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousMul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">γ₁</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ₂</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Path</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">γ₁.prod</span> <span class=\"n\">γ₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">continuous_mul</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">path.mul</span> <span class=\"n\">Path.mul</span>\n</code></pre></div>\n<p>That uses <code>protected</code>.  But Quaternion has <code>private</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">QuaternionGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xa</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">xa</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">quaternion_group.mul</span> <span class=\"n\">QuaternionGroup.mul</span>\n</code></pre></div>\n<p>following <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/specific_groups/quaternion.lean\">the original in Lean 3:</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">quaternion_group</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">quaternion_group</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">quaternion_group</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xa</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xa</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">xa</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xa</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So I don't know what to do.  I can try <code>protected</code>.  I don't know the general pattern for endowing an inductive type with an infix operator or why infix operator definitions need to be <code>private</code> or <code>protected</code>.</p>",
        "id": 361664943,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685235337
    },
    {
        "content": "<p>just delete the <code>#align</code></p>",
        "id": 361665030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685235406
    },
    {
        "content": "<p>pushed a fix to mathport to do this automatically</p>",
        "id": 361665138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685235506
    },
    {
        "content": "<p>So keep the <code>private</code> and lose the <code>#align</code>, correct?</p>",
        "id": 361665524,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685235866
    }
]