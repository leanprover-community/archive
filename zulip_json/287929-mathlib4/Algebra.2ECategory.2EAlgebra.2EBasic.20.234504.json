[
    {
        "content": "<p>This PR has one error left: a nasty <code>simps</code> error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps!]</span> <span class=\"c1\">-- errors (see below)</span>\n<span class=\"kd\">def</span> <span class=\"n\">free</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">⥤</span> <span class=\"n\">AlgebraCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n      <span class=\"n\">isRing</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.semiringToRing</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">FreeAlgebra.lift</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeAlgebra.ι</span> <span class=\"n\">_</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n  <span class=\"c1\">-- porting note: `apply FreeAlgebra.hom_ext` was `ext1`.</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">FreeAlgebra.hom_ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FreeAlgebra.ι_comp_lift</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Category</span><span class=\"bp\">/</span><span class=\"n\">AlgebraCat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">146</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">AlgebraCat.free_obj_isRing_nsmul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">simplifies</span> <span class=\"k\">from</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">to</span>\n  <span class=\"n\">Quot.map₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">FreeAlgebra.Pre</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">FreeAlgebra.Rel</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"bp\">→</span> <span class=\"n\">FreeAlgebra.Rel</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">FreeAlgebra.Pre</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">FreeAlgebra.Rel</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">→</span> <span class=\"n\">FreeAlgebra.Rel</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x_2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.unaryCast</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">using</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">AlgebraCat.free_obj_isRing_natCast</span><span class=\"o\">,</span> <span class=\"n\">AlgebraCat.free_obj_isRing_mul</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"n\">to</span> <span class=\"n\">change</span> <span class=\"n\">the</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">simplified</span> <span class=\"n\">term</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>To me it seems that <code>simps!</code> is doing too much work. I don't think we want a lemma called <code>AlgebraCat.free_obj_isRing_nsmul</code> at all.<br>\nHow do we instruct <code>simps</code> to just skip generating that lemma?</p>",
        "id": 372191712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688451178
    },
    {
        "content": "<p>But maybe I'm wrong, and such a lemma is in fact a good idea?</p>",
        "id": 372192004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688451283
    },
    {
        "content": "<p>yes, that's terrible, we definitely don't want lemmas like that.</p>\n<p>You can just specify the list of lemmas you do want after the <code>simps</code>. I'd guess here we want <code>map</code>? If we want any <code>simps</code> to do anything with <code>obj</code> it should be about the coercion to type rather than anything about <code>carrier</code> or <code>isRing</code>. This suggests that <code>AlgebraCat</code> (and possibly all the concrete categories) is missing a <code>initialize_simps_projections</code>.</p>",
        "id": 372200550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688454062
    },
    {
        "content": "<p>I spent some time on that one. I gave Lean two adapted versions of what it suggested, stopping at the <code>smul</code>stuff. <br>\nHowever, once Lean has all the <code>simps</code> lemmas, it is able to go further, and the one it suggests doesn't compile because it requires one of the not yet compiled lemmas.</p>",
        "id": 372409772,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688501960
    },
    {
        "content": "<p>I disabled simp lemmas about instance projections, and I think it fixed the lint. Should be good to merge now</p>",
        "id": 372449958,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1688524490
    },
    {
        "content": "<p>I kicked it on the queue.<br>\nReally glad that this one is now done <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 372462785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688532806
    }
]