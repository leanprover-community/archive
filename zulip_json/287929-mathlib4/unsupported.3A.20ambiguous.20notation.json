[
    {
        "content": "<p>When porting what are we supposed to do about the comment</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsupported</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span> <span class=\"kd\">notation</span>\n</code></pre></div>\n<p>?</p>",
        "id": 338592457,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677592484
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/leanprover-community/mathlib3port/blob/208d1f403d591be4023eb8d5b3989eb8cd3e1a3b/Mathbin/Data/Nat/Digits.lean#L62\">https://github.com/leanprover-community/mathlib3port/blob/208d1f403d591be4023eb8d5b3989eb8cd3e1a3b/Mathbin/Data/Nat/Digits.lean#L62</a></p>",
        "id": 338592593,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677592523
    },
    {
        "content": "<p>My inclination is to delete these comments, but I see that some of them have landed on master: <a href=\"https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Set/Lattice.lean#L1347\">https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Set/Lattice.lean#L1347</a></p>",
        "id": 338592811,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677592586
    },
    {
        "content": "<p>For the first one, I <em>think</em> it's just reporting that <code>::</code> could mean a number of things -- it's overloaded in mathlib.</p>\n<p>For the second, it should be a similar reason, but this time for <code>×ˢ</code> which is also overloaded.</p>",
        "id": 338595555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677593214
    },
    {
        "content": "<p>My feeling about these is that they are warnings to the person doing the porting that the mathport output might not be accurate. If we get the resulting code to work, then it seems to me that the warning is no longer serving a purpose.</p>",
        "id": 338596270,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677593381
    },
    {
        "content": "<p>Does that sound right?</p>",
        "id": 338596429,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677593406
    },
    {
        "content": "<p>How does overloaded notation work in Lean 4? Is it just \"most recent one wins\"?</p>",
        "id": 338597456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677593626
    },
    {
        "content": "<p>FWIW, here's the relevant code in mathport: <a href=\"https://github.com/leanprover-community/mathport/blob/e2b9ccc6caac42ba52192389ea954f4961f60f7c/Mathport/Syntax/Translate/Expr.lean#L174-L177\">https://github.com/leanprover-community/mathport/blob/e2b9ccc6caac42ba52192389ea954f4961f60f7c/Mathport/Syntax/Translate/Expr.lean#L174-L177</a></p>",
        "id": 338597602,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677593652
    },
    {
        "content": "<p>I agree that what the message is warning about it is not a problem locally if you get the code to compile, but maybe it indicates an issue with the notation itself?</p>",
        "id": 338598454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677593858
    },
    {
        "content": "<p>some other instances of the <code>::</code> notation: <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Sym/Basic.lean#L246\">https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Sym/Basic.lean#L246</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Stream/Defs.lean#L39\">https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Stream/Defs.lean#L39</a></p>",
        "id": 338598951,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677593986
    },
    {
        "content": "<p>both of those are <code>scoped</code></p>",
        "id": 338598964,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677593991
    },
    {
        "content": "<p>also <code>scoped</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Num/Bitwise.lean#L238\">https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/Data/Num/Bitwise.lean#L238</a></p>",
        "id": 338599250,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677594057
    },
    {
        "content": "<p>The message is meant to say \"unsupported [by mathport]: ambiguous notation\".</p>",
        "id": 338667076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677610621
    },
    {
        "content": "<p>Lean 4 does support ambiguous notation, but it causes a few more issues than in Lean 3.</p>",
        "id": 338667337,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677610698
    },
    {
        "content": "<p>For example, overloading <code>::</code> breaks pattern matching iirc.</p>",
        "id": 338667384,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677610709
    },
    {
        "content": "<p>So I'd make all overloads scoped.</p>",
        "id": 338667411,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677610722
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2050\">lean4#2050</a></p>",
        "id": 338667505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677610751
    },
    {
        "content": "<p>I removed the warnings from the PR in question: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2300/commits/e868c073bb7188aefe6e7c922a3002d435fa1085\">https://github.com/leanprover-community/mathlib4/pull/2300/commits/e868c073bb7188aefe6e7c922a3002d435fa1085</a></p>",
        "id": 338669574,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677611315
    }
]