[
    {
        "content": "<p>In the following tactic state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Complex.log</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Complex.log</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span>\n</code></pre></div>\n<p>(with <code>import Mathlib.Analysis.SpecialFunctions.Complex.Log</code>)<br>\n<code>rw?</code> does not suggest using <code>Complex.log_im</code>, which I think it should do (and high up in the list). </p>\n<p>Looking at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.Log</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.log.im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.log.im</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.log.im</span> <span class=\"bp\">+</span> <span class=\"n\">x.re</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>suggests that this is a problem with sorting the results (<code>Complex.log_im</code> shows up fairly early (no. 2) in the first example, quite a bit further down (no. 11) in the second, and not at all among the 21 suggestions in the third).<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>",
        "id": 401234429,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699563193
    },
    {
        "content": "<p>Sorting results is hard. Before trying to make further progress on that, we would need to work out how to test/compare proposed changes.</p>",
        "id": 401258568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699575703
    },
    {
        "content": "<p>Ideas on that very welcome.</p>",
        "id": 401258647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699575730
    },
    {
        "content": "<p>I pointed out in another thread once that a problem would be solved \"if the results were sorted better\" and someone responded that if the results were sorted better then I had just made a powerful new automation tactic which we don't have, and thus the problem of sorting results better was probably hard. It was this observation which made me understand the heart of the problem.</p>",
        "id": 401300061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699600694
    },
    {
        "content": "<p>Would it be possible to give <code>rw?</code> some hints à la loogle? E.g., <code>rw? \"log\"</code> or similar, to get it to propose (only) lemmas that have \"log\" in the name.</p>",
        "id": 401300229,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699600803
    },
    {
        "content": "<p>Once the loogle backend (<code>#find</code>)  reaches <code>mathlib</code> or <code>std</code> or so, composing the two should certainly be possible!</p>",
        "id": 401335874,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699611068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.3F.20does.20not.20find.20lemma/near/401258568\">said</a>:</p>\n<blockquote>\n<p>Sorting results is hard. Before trying to make further progress on that, we would need to work out how to test/compare proposed changes.</p>\n</blockquote>\n<p>One metric could arise from looking at existing <code>rw</code>'s in mathlib: replace every <code>rw</code> with <code>rw?</code>, and see how far up the actually-used rules are in the generated list.</p>\n<p>There are (at least) two tricky parts: (1) getting a number (2) handling chains of rewrites.</p>\n<ol>\n<li>Let's assume for now that we just want <code>rw?</code> to produce the first lemma in a <code>rw</code> list (assuming it's a non-backwards use of a constant). The most basic data we get from a test like this is then a set of <code>Option Nat</code>s—for each <code>rw</code> usage, either <code>rw?</code> includes the lemma at some index in its list, or not at all. It might be worth just looking at a histogram—to get a single number out of this, you need some way of weighting the different outcomes or something, and you'd lose important information. (But maybe you could eventually do regression/train a neural net on the basis of this...)</li>\n<li>Each <code>rw</code> in mathlib can be a chain <code>rw [lem1, lem2, lem3...]</code>. This actually gives us a lot of data, as we can split it into <code>rw [lem1]; rw [lem2]; rw [lem3]; ...</code>. We want to ignore non-constant, non-forwards rewrite rules. But there's another problem—what about when rewrites commute? The order shouldn't be special—we can't ask <code>rw?</code> to know which should come first on the basis of an example like this. Further, now we have more data: if <code>rw [lem1, lem2]</code> ~ <code>rw [lem2, lem1]</code>, then <code>rw?</code> can \"get points\" for suggesting <code>lem2</code> after <code>rw [lem1]</code>, <em>and</em> for suggesting <code>lem1</code> after <code>rw [lem2]</code>. Figuring out how to deal with this would probably involve a lot of gruesome details. Depending on how often rewrites actually can commute in practice, though, it might be worth it.</li>\n</ol>",
        "id": 401381894,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699623417
    },
    {
        "content": "<p>Thomas, I suspect the approach you suggested won't do at all what you want. For instance, it's going to overweight generally applicable rewrite lemmas (e.g., things like <code>add_comm</code> may show up high on the list, especially because they are not <code>@[simp]</code> lemmas), and disregard the rarely used (but super important and applicable) ones.</p>",
        "id": 401384262,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699624365
    },
    {
        "content": "<p>In fact, I would almost guess that <em>reversing</em> the order you suggested would be the more useful one.</p>",
        "id": 401384502,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699624453
    },
    {
        "content": "<p>I'm responding specifically to the question of how to gauge <em>changes</em> to <code>rw?</code>, not proposing how to weight lemmas in the first place! I agree that finding <em>highly specific</em> lemmas is of paramount importance to the weighting question, though. But you can phrase that need within the framework of the method I'm proposing, by weighting different (goal, lemma, ranking) frequencies in a manner sensitive to e.g. the frequency of the lemmas' usage in <code>rw</code>, the \"volatility\" of the goal (how many different it can be usefully rewritten), maybe some measure of \"rewrite complexity\", etc. I'm making no statements on how things ought to be weighted to determine <code>rw?</code>'s \"score\", besides the most general parts of the procedure! :)</p>",
        "id": 401388185,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699625780
    }
]