[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5256\">!4#5256</a> the following is taking forever</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1200000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Algebra.isIntegral_trace</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">L</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Algebra.trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>Note that already in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5074\">!4#5074</a> the slowest declarations are related to <code>IsIntegral</code> or to <code>eval</code>. Should we try to investigate this more closely?</p>",
        "id": 367660918,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687184912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> I am afraid you will face the same problem in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5262\">!4#5262</a></p>",
        "id": 367661038,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687184935
    },
    {
        "content": "<p>Thanks for the warning. I am not quite there but getting close</p>",
        "id": 367670924,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687186878
    },
    {
        "content": "<p>Here is something interesting: if I use <code>set_option maxHeartbeats 1100000 in</code> (instead of <code>1200000</code>), after the last <code>convert</code> the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Let me see what happens with <code>set_option pp.all true</code>.</p>",
        "id": 367674469,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687187544
    },
    {
        "content": "<p><code>maxHeartbeats</code> changes the behavior of <code>convert</code>!?</p>",
        "id": 367675091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687187674
    },
    {
        "content": "<p>It seems so... maybe because the LHS and the RHS are defeq, but with a small <code>maxHeartbeats</code> Lean  gives up?</p>",
        "id": 367675407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687187746
    },
    {
        "content": "<p>Is it not possible to distinguish \"not defeq\" from \"could not determine if defeq within the time limit\"?</p>",
        "id": 367675713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687187810
    },
    {
        "content": "<p>This strikes me as a bug</p>",
        "id": 367675754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687187821
    },
    {
        "content": "<p>Well, of course the output is huge... <a href=\"https://gist.github.com/riccardobrasca/26963f6a6ccf2b92138e3fee4ad409e4\">24464 lines</a></p>",
        "id": 367675801,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687187827
    },
    {
        "content": "<p>The goals starts at line 8754</p>",
        "id": 367676295,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687187926
    },
    {
        "content": "<p>If I replace <code>convert</code> by <code>exact</code> I get a timeout (with both limits)</p>",
        "id": 367677116,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687188084
    },
    {
        "content": "<p>Using <code>set_option pp.explicit true</code> the output is much shorter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"kt\">Prop</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n          <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">aeval</span> <span class=\"n\">R</span>\n            <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                <span class=\"n\">x</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span>\n              <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                  <span class=\"n\">x</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span>\n                <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                    <span class=\"n\">x</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span>\n                  <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                      <span class=\"n\">x</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span>\n                    <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                        <span class=\"n\">x</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure.instFieldAlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)))))</span>\n            <span class=\"n\">this</span><span class=\"bp\">✝</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionRing.toRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toDivisionRing</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span>\n      <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n              <span class=\"n\">x</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)))</span>\n          <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">aeval</span> <span class=\"n\">R</span>\n            <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                <span class=\"n\">x</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span>\n              <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                  <span class=\"n\">x</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toCommSemiring</span>\n                <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                    <span class=\"n\">x</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield</span>\n                  <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">L</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n                      <span class=\"n\">x</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AlgebraicClosure.instFieldAlgebraicClosure</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">))))</span>\n            <span class=\"n\">this</span><span class=\"bp\">✝</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁴</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">EuclideanDomain.toCommRing</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toEuclideanDomain</span> <span class=\"n\">F</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">)))</span>\n          <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 367679494,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687188472
    },
    {
        "content": "<p>From <code>1200000</code> to <code>240000</code>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Field.toEuclideanDomain</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">240000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Algebra.isIntegral_trace</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">L</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIntegral</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Algebra.trace</span> <span class=\"n\">L</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">IsIntegral</span> <span class=\"n\">L</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">isIntegral_of_isScalarTower</span> <span class=\"n\">hx</span>\n  <span class=\"k\">have</span> <span class=\"n\">splits</span> <span class=\"o\">:(</span><span class=\"n\">minpoly</span> <span class=\"n\">L</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Splits</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IsAlgClosed.splits_codomain</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isIntegral_algebraMap_iff</span>\n    <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span> <span class=\"n\">trace_eq_sum_roots</span> <span class=\"n\">splits</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">IsIntegral.multiset_sum</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nsmul</span> <span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_roots_map</span> <span class=\"o\">(</span><span class=\"n\">minpoly.ne_zero</span> <span class=\"n\">hx'</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n  <span class=\"n\">use</span> <span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">minpoly.monic</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">aeval_def</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">minpoly.aeval_of_isScalarTower</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_def</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 367694869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687191858
    },
    {
        "content": "<p>Can <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field.toEuclideanDomain#doc\">docs4#Field.toEuclideanDomain</a> be a big problem? This new proof is <em>much</em> better, it is almost the same as in mathlib3</p>",
        "id": 367695109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687191912
    },
    {
        "content": "<p>I am trying to set</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Field.toEuclideanDomain</span>\n</code></pre></div>\n<p>also in other slow files to see what happens</p>",
        "id": 367695254,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687191951
    },
    {
        "content": "<p><code>Step.isIntegral</code> in <code>FieldTheory.IsAlgClosed.AlgebraicClosure</code> goes from <code>700000</code> to <code>450000</code> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 367696825,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192332
    },
    {
        "content": "<p>I'm finding it hard to read the zeroes, is that better?</p>",
        "id": 367698231,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687192707
    },
    {
        "content": "<p>From 700 to 450</p>",
        "id": 367698322,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192734
    },
    {
        "content": "<p>Seeing what happens if it is a <code>def</code> everywhere</p>",
        "id": 367698398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192753
    },
    {
        "content": "<p>(I mean, it's not even mathematically clear that a field is a euclidean domain...)</p>",
        "id": 367698626,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192804
    },
    {
        "content": "<p>Do you achieve the same improvement by just lowering its priority?</p>",
        "id": 367698718,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687192829
    },
    {
        "content": "<p>It's already <code>100</code></p>",
        "id": 367698999,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192911
    },
    {
        "content": "<p>There is even a comment</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: this seems very slow.</span>\n<span class=\"c1\">-- see Note [lower instance priority]</span>\n</code></pre></div>",
        "id": 367699102,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687192926
    },
    {
        "content": "<p>You could put it at 10 to see if it makes a difference.</p>",
        "id": 367700099,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687193169
    },
    {
        "content": "<p>I will play with this after dinner. For the time being <a href=\"https://github.com/leanprover-community/mathlib4/pull/5264\">!4#5264</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/19205\">#19205</a> to see if we use the instance somewhere.</p>",
        "id": 367700419,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687193261
    },
    {
        "content": "<p>Using the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.toEuclideanDomain</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toCommRing</span> <span class=\"o\">:=</span> <span class=\"n\">Field.toCommRing</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">/</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">remainder</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient_zero</span> <span class=\"o\">:=</span> <span class=\"n\">div_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">quotient_mul_add_remainder_eq</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- Porting note: was `by_cases h : b = 0 &lt;;&gt; simp [h, mul_div_cancel']`</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">r_wellFounded</span> <span class=\"o\">:=</span>\n    <span class=\"n\">WellFounded.intro</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hnb</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hnb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">remainder_lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hnb</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hnb</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_left_not_lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hnb</span> <span class=\"o\">⟨</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hna</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero.1</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"n\">hna</span> <span class=\"n\">hnb</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is probably much better.</p>",
        "id": 367715198,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687197006
    },
    {
        "content": "<p>Let me try also this</p>",
        "id": 367716460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687197334
    },
    {
        "content": "<p>This better instance also solves the porting note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.toEuclideanDomain</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">EuclideanDomain</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toCommRing</span> <span class=\"o\">:=</span> <span class=\"n\">Field.toCommRing</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">/</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">remainder</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient_zero</span> <span class=\"o\">:=</span> <span class=\"n\">div_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">quotient_mul_add_remainder_eq</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span><span class=\"o\">]</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">r_wellFounded</span> <span class=\"o\">:=</span>\n    <span class=\"n\">WellFounded.intro</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Acc.intro</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hnb</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hnb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">remainder_lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hnb</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hnb</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_left_not_lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hnb</span> <span class=\"o\">⟨</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hna</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero.1</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"n\">hna</span> <span class=\"n\">hnb</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works just fine. With <code>set_option pp.explicit true</code>, the old definition takes 2100 lines in <code>#print Field.toEuclideanDomain</code>, the new one 90.</p>",
        "id": 367721541,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687198807
    },
    {
        "content": "<p>So, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5264\">!4#5264</a> I've made the instance a def and fixed the two errors. Then I had a look at the files that we ported in the last month and that were slow, reducing the <code>heartbeats</code> to the minimum that works. It's not miraculous, but it's definitely better.</p>",
        "id": 367722704,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687199143
    },
    {
        "content": "<p>Now I will compare what happens with the new instance.</p>",
        "id": 367722817,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687199167
    },
    {
        "content": "<p>OK, forget about <a href=\"https://github.com/leanprover-community/mathlib4/pull/5264\">!4#5264</a>. Indeed the modification proposed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5266\">!4#5266</a> is as good as making the instance a def.</p>\n<p>Tagging <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span>  since they were involved is all these problems with <code>SplittingField</code> and friends.</p>",
        "id": 367730840,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687201673
    },
    {
        "content": "<p>Note that not all problems are solved, the situation is only slightly better, but maybe we only need to fix some instance.</p>",
        "id": 367730999,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687201717
    },
    {
        "content": "<p>Is it a good heuristic to say that we should stay away from <code>with</code> in instances, unless we are really sure about what we are doing?</p>",
        "id": 367733521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687202525
    },
    {
        "content": "<p>Removing <code>with</code> does not completely solve the problem. I changed another instance <a href=\"https://github.com/leanprover-community/mathlib4/pull/4895/commits/af830ff991c87d9a6cc0e2aaa93852a0fb92c4a4\">here</a> and it had a similar effect: things got fractionally better but the problems are still there. It's not the <code>with</code> per se, it's the term the <code>with</code> produces.</p>",
        "id": 367735213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687203085
    },
    {
        "content": "<p>I have more elementary question: what should I expect Lean to be doing when it wants a <code>CommRing</code> and I hand it </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">‹</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Neg.neg</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>? It seems crazy over-specified and, during porting, there were other instances (ha) where stripping out things helped behavior.</p>",
        "id": 367738375,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687204238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.235256.20RingTheory.2ETrace/near/367735213\">said</a>:</p>\n<blockquote>\n<p>Removing <code>with</code> does not completely solve the problem. I changed another instance <a href=\"https://github.com/leanprover-community/mathlib4/pull/4895/commits/af830ff991c87d9a6cc0e2aaa93852a0fb92c4a4\">here</a> and it had a similar effect: things got fractionally better but the problems are still there. It's not the <code>with</code> per se, it's the term the <code>with</code> produces.</p>\n</blockquote>\n<p>You also did something very similar in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4507\">!4#4507</a> and it also helped. We have to find the other places where this is needed...</p>",
        "id": 367743207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687205904
    },
    {
        "content": "<p>I would imagine we have a very large number of such places</p>",
        "id": 367743295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687205937
    },
    {
        "content": "<p>For instance, all of the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Surjective.ring#doc\">docs4#Function.Surjective.ring</a> type instances will have this problem</p>",
        "id": 367743588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687206049
    },
    {
        "content": "<p>Is there any chance that we can make the <code>with</code> notation smarter rather than working around it?</p>",
        "id": 367743720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687206097
    },
    {
        "content": "<p>I don't think that necessarily helps, sometimes we might not even be handing <code>with</code> an appropriate argument</p>",
        "id": 367743841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687206129
    },
    {
        "content": "<p>Unless you had <code>with!</code> for \"i know none of my base classes are really base classes, but I meant it anyway\"</p>",
        "id": 367743918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687206160
    },
    {
        "content": "<p>I have just merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/5266\">!4#5266</a> into the port of <code>RingTheory.Norm</code> and the improvement is phenomenal!</p>",
        "id": 367745182,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687206584
    },
    {
        "content": "<p>Everything now works so nicely <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 367745348,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687206644
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lift_of_splits#doc\">docs4#lift_of_splits</a> is still slow (why in the root namespace?!). It is something related to <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362518519\">this</a> message. Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subalgebra.algebra%27#doc\">docs4#Subalgebra.algebra'</a> is suboptimal, but I am not sure.</p>",
        "id": 367749066,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687207977
    },
    {
        "content": "<p>Well, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5262\">!4#5262</a> is ready (but it depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5266\">!4#5266</a>)</p>",
        "id": 367749622,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687208210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">358618</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot.liftHom</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">_</span> <span class=\"bp\">▶</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">068997</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.adjoinSingletonEquivAdjoinRootMinpoly</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgHom</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>was why <code>lift_of_splits</code> was slow in master. It will be interesting to see if there are still issues such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">118708</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommSemiring.toSemiring</span>\n</code></pre></div>\n<p>after <a href=\"https://github.com/leanprover-community/mathlib4/pull/5266\">!4#5266</a> .</p>",
        "id": 367749994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687208387
    },
    {
        "content": "<p>The issue is that the left hand side is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">AdjoinRoot.instCommRing</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toCommRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and the right hand side is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">AdjoinRoot.instCommRing</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">EuclideanDomain.toCommRing</span>\n  <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>where the Euclidean domain instance is coming from <code>letI := fieldOfFiniteDimensional F (Algebra.adjoin F (↑s : Set K))</code> (on <code>master</code>)</p>",
        "id": 367751066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687208872
    },
    {
        "content": "<p>Now I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">769144</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and if I click on the arrow the output is huge</p>",
        "id": 367753259,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687209885
    },
    {
        "content": "<p>It does this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">720522</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span>\n</code></pre></div>\n<p>several times. The LHS is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and the RHS is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 367754082,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687210303
    },
    {
        "content": "<p>It's much quicker than before though.</p>",
        "id": 367754942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687210693
    },
    {
        "content": "<p>Again, the current form of <code>fieldOfFiniteDimensional</code> is suboptimal. It should probably be changed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">glouk</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.mulLeft</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">LinearMap.injective_iff_surjective.1</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">mul_right_inj'</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- A domain that is module-finite as an algebra over a field is a division ring. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">divisionRingOfFiniteDimensional</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">IsDomain</span> <span class=\"n\">K</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">toRing</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">Classical.choose</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">glouk</span> <span class=\"n\">F</span> <span class=\"n\">H</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"o\">(</span><span class=\"n\">glouk</span> <span class=\"n\">F</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">:)</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">division_ring_of_finite_dimensional</span> <span class=\"n\">divisionRingOfFiniteDimensional</span>\n\n<span class=\"sd\">/-- An integral domain that is module-finite as an algebra over a field is a field. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fieldOfFiniteDimensional</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">divisionRingOfFiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"k\">with</span>\n    <span class=\"n\">toCommRing</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">field_of_finite_dimensional</span> <span class=\"n\">fieldOfFiniteDimensional</span>\n</code></pre></div>\n<p>What is going on is that the definition of a <code>Field</code> has a <code>CommRing</code> embedded inside it. The old definition was taking a <code>CommRing</code> instance but did not use it directly to build the <code>CommRing</code> field, instead it broke it into pieces and then reassembled the bits by hand.</p>\n<p>Also, having an auxiliary lemma before the first definition that hides away the <code>LinearMap.mulLeft</code> business and the algebra structure makes sure that the definition of linear maps does not show up in the definition of the inverse and makes the corresponding term much shorter.</p>",
        "id": 367812247,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687241978
    },
    {
        "content": "<p>I tried a version of this <a href=\"https://github.com/leanprover-community/mathlib4/pull/4895\">two weeks ago</a> but it didn't make any difference to the problem I was trying to solve, namely slowdowns (I failed to get <code>!bench</code> working so I just timed it locally and there was no difference). Perhaps my error was that I didn't also change the DivisionRing instance? I'll try this version now.</p>",
        "id": 367835378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687248323
    },
    {
        "content": "<p>If I make the change above and then recompile what needs to be recompiled on master, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">real</span>    <span class=\"mi\">10</span><span class=\"n\">m35.143s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">85</span><span class=\"n\">m38.248s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">1</span><span class=\"n\">m56.750s</span>\n</code></pre></div>\n<p>If I then revert the change and recompile again, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">real</span>    <span class=\"mi\">10</span><span class=\"n\">m32.122s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">85</span><span class=\"n\">m27.783s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">1</span><span class=\"n\">m58.641s</span>\n</code></pre></div>\n<p>So, just as my experiment two weeks ago, it might make the terms nicer but it doesn't make mathlib compile any faster.</p>",
        "id": 367852177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687251901
    },
    {
        "content": "<p>On the other hand it might make debugging slowdowns easier so it's probably worth making the change anyway.</p>",
        "id": 367853639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687252235
    },
    {
        "content": "<p>Sure, these are not instances, they are defs, so they are only relevant when they are explicitely used, which is not a lot (once for each of them).</p>",
        "id": 367855174,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687252575
    },
    {
        "content": "<p>Aah I see!</p>",
        "id": 367856265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687252812
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5288\">!4#5288</a></p>",
        "id": 367856755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687252927
    }
]