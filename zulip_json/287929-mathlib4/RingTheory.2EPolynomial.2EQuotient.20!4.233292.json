[
    {
        "content": "<p>I've been having a look at RingTheory.Polynomial.Quotient <a href=\"https://github.com/leanprover-community/mathlib4/pull/3292\">!4#3292</a>, which has a pretty nasty timeout issue.</p>\n<p>I've annotated the declaration where things go wrong in the branch, if anyone would like to play with it.</p>",
        "id": 355123516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683027994
    },
    {
        "content": "<p>The trace from <code>isDefEq</code> looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- [Meta.isDefEq] [4.966044s] üí• (R[X] ‚ß∏ RingHom.ker ‚Üë(Polynomial.aeval x)) ‚âÉ‚Çê[R] R =?= (R[X] ‚ß∏ RingHom.ker ‚Üë(Polynomial.aeval x)) ‚âÉ‚Çê[R] R ‚ñº</span>\n<span class=\"c1\">--   [] [0.000001s] ‚úÖ R =?= R</span>\n<span class=\"c1\">--   [] [0.527869s] ‚úÖ R[X] ‚ß∏ RingHom.ker ‚Üë(Polynomial.aeval x) =?= R[X] ‚ß∏ RingHom.ker ‚Üë(Polynomial.aeval x) ‚ñ∂</span>\n<span class=\"c1\">--   [] [0.000001s] ‚úÖ R =?= R</span>\n<span class=\"c1\">--   [] [0.000000s] ‚úÖ CommRing.toCommSemiring =?= CommRing.toCommSemiring</span>\n<span class=\"c1\">--   [] [4.437865s] üí• Ring.toSemiring =?= Ring.toSemiring ‚ñº</span>\n<span class=\"c1\">--     [] [4.437795s] üí• CommRing.toRing.1 =?= CommRing.toRing.1 ‚ñº</span>\n<span class=\"c1\">--       [] [4.437271s] üí• Ring.toSemiring =?= Ring.toSemiring ‚ñº</span>\n<span class=\"c1\">--         [] [4.437137s] üí• (Function.Surjective.ring Quotient.mk'' (_ : Function.Surjective Quotient.mk'')</span>\n<span class=\"c1\">--                 (_ : Quotient.mk'' 0 = Quotient.mk'' 0) (_ : Quotient.mk'' 1 = Quotient.mk'' 1)</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 + x_2) = Quotient.mk'' (x_1 + x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 * x_2) = Quotient.mk'' (x_1 * x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]), Quotient.mk'' (-x_1) = Quotient.mk'' (-x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 - x_2) = Quotient.mk'' (x_1 - x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñï), Quotient.mk'' (x_2 ‚Ä¢ x_1) = Quotient.mk'' (x_2 ‚Ä¢ x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñ§), Quotient.mk'' (x_2 ‚Ä¢ x_1) = Quotient.mk'' (x_2 ‚Ä¢ x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñï), Quotient.mk'' (x_1 ^ x_2) = Quotient.mk'' (x_1 ^ x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : ‚Ñï), Quotient.mk'' ‚Üëx_1 = Quotient.mk'' ‚Üëx_1)</span>\n<span class=\"c1\">--                 (_ :</span>\n<span class=\"c1\">--                   ‚àÄ (x_1 : ‚Ñ§),</span>\n<span class=\"c1\">--                     Quotient.mk'' ‚Üëx_1 =</span>\n<span class=\"c1\">--                       Quotient.mk''</span>\n<span class=\"c1\">--                         ‚Üëx_1)).1 =?= (Function.Surjective.ring Quotient.mk'' (_ : Function.Surjective Quotient.mk'')</span>\n<span class=\"c1\">--                 (_ : Quotient.mk'' 0 = Quotient.mk'' 0) (_ : Quotient.mk'' 1 = Quotient.mk'' 1)</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 + x_2) = Quotient.mk'' (x_1 + x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 * x_2) = Quotient.mk'' (x_1 * x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]), Quotient.mk'' (-x_1) = Quotient.mk'' (-x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 x_2 : R[X]), Quotient.mk'' (x_1 - x_2) = Quotient.mk'' (x_1 - x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñï), Quotient.mk'' (x_2 ‚Ä¢ x_1) = Quotient.mk'' (x_2 ‚Ä¢ x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñ§), Quotient.mk'' (x_2 ‚Ä¢ x_1) = Quotient.mk'' (x_2 ‚Ä¢ x_1))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : R[X]) (x_2 : ‚Ñï), Quotient.mk'' (x_1 ^ x_2) = Quotient.mk'' (x_1 ^ x_2))</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : ‚Ñï), Quotient.mk'' ‚Üëx_1 = Quotient.mk'' ‚Üëx_1)</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (x_1 : ‚Ñ§), Quotient.mk'' ‚Üëx_1 = Quotient.mk'' ‚Üëx_1)).1 ‚ñº</span>\n<span class=\"c1\">--           [] [4.436647s] üí• Semiring.mk</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (a : RingCon.Quotient (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x)))), 1 * a = a)</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (a : RingCon.Quotient (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x)))), a * 1 = a)</span>\n<span class=\"c1\">--                 Monoid.npow =?= Semiring.mk</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (a : RingCon.Quotient (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x)))), 1 * a = a)</span>\n<span class=\"c1\">--                 (_ : ‚àÄ (a : RingCon.Quotient (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x)))), a * 1 = a)</span>\n<span class=\"c1\">--                 Monoid.npow ‚ñº</span>\n<span class=\"c1\">--             [] [2.271145s] ‚úÖ Monoid.one_mul =?= Monoid.one_mul ‚ñ∂</span>\n<span class=\"c1\">--             [] [1.918150s] ‚úÖ Monoid.mul_one =?= Monoid.mul_one ‚ñ∂</span>\n<span class=\"c1\">--             [] [0.247062s] üí• Function.Surjective.ring.proof_2 Quotient.mk''</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_1</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_2</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_3</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_4</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_6</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_7</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_8</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_9</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_11</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_12</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon</span>\n<span class=\"c1\">--                       (RingHom.ker</span>\n<span class=\"c1\">--                         ‚Üë(Polynomial.aeval</span>\n<span class=\"c1\">--                             x)))) =?= Function.Surjective.ring.proof_2 Quotient.mk''</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_1</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_2</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_3</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_4</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_6</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_7</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_8</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_9</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_11</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x))))</span>\n<span class=\"c1\">--                   (RingCon.instCommRingQuotientToAddToDistribToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToMul.proof_12</span>\n<span class=\"c1\">--                     (Ideal.Quotient.ringCon (RingHom.ker ‚Üë(Polynomial.aeval x)))) ‚ñ∂</span>\n</code></pre></div>",
        "id": 355123622,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683028017
    },
    {
        "content": "<p>This is the scenario we've discussed several times in the last few days, where all the time is going into checking defeq of fields which would ideally just be by proof irrelevance once isDefEq has checked the data.</p>",
        "id": 355124020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683028087
    },
    {
        "content": "<p>As you can see in the trace <code>RingCon</code> is particularly nasty for this. I'm not sure if there's something to be done with <code>RingCon</code> that would improve this situation?</p>",
        "id": 355124197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683028122
    },
    {
        "content": "<p>Are the LHS and RHS syntactically identical there?</p>",
        "id": 355139333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683031537
    },
    {
        "content": "<p>I have the file open but with pp.all set to <code>true</code> it's extremely painful to do anything at all.</p>",
        "id": 355141266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683032033
    },
    {
        "content": "<p>Huh. I added <code>pp.all</code>, ran <code>lake build</code> on the command line, caught all the output in a 1 gigabyte file and searched for <code>[Meta.isDefEq] [n</code> where that last n is anything from 0 to 9, and all the 135487 lines of output had n=0 <em>shrug</em></p>",
        "id": 355186355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683041173
    },
    {
        "content": "<p>Maybe <code>lake build &gt; crap34 2&gt;&amp;1</code> doesn't capture all the debugging output? There are only four <code>Quotient.mk''</code>s in my 1 gig file, and there are more than that in Scott's code above.</p>",
        "id": 355188501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683041629
    },
    {
        "content": "<p>ok so switching pp.all off I kept digging through the failure of the \"they're obviously the same\" proof and it randomly peters out with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000050</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 355196643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683043110
    },
    {
        "content": "<p>Both <code>0</code>s are <code>@OfNat.ofNat R[X] 0 Zero.toOfNat0 : R[X]</code>, I have no idea why this is failing. Note that we are deep in some recursive argument here, there are 58 spaces before the <code>[] [0.000050s]</code>.</p>",
        "id": 355197250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683043260
    },
    {
        "content": "<p>Are the <code>R[X]</code>s on both sides the same?</p>",
        "id": 355197383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683043296
    },
    {
        "content": "<p>It's really difficult to answer this. If you put pp.all on then there's too much trace argument to be manageable (there's at least a gig of text). I'm just unfolding what Scott posted, but just above the exploding <code>0 + a = a =?= 0 + a = a</code> is a ticked <code>R[X] =?= R[X]</code> so I think they are the same.</p>",
        "id": 355198667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683043552
    },
    {
        "content": "<p>Yeah they all seem to be <code>@Polynomial R CommSemiring.toSemiring : Type ?u.107654</code></p>",
        "id": 355198935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683043611
    },
    {
        "content": "<p>Is the failure mode \"running out of heartbeats\"? What happens if you give it some more?</p>",
        "id": 355199890,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683043806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingTheory.2EPolynomial.2EQuotient.20!4.233292/near/355198935\">said</a>:</p>\n<blockquote>\n<p>Yeah they all seem to be <code>@Polynomial R CommSemiring.toSemiring : Type ?u.107654</code></p>\n</blockquote>\n<p>Is it stuck looking for a universe variable?</p>",
        "id": 355200565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683043980
    },
    {
        "content": "<p>I doubt it because they were all the same universe metavariable. The fact that lean thinks it needs 100,000 universe metavariables is perhaps also of some concern</p>",
        "id": 355267155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683062169
    },
    {
        "content": "<p>I'm finding some very weird behavior in this PR:</p>\n<p><a href=\"/user_uploads/3121/AK6WO0F-SLBmaOC3KGW-aiXI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AK6WO0F-SLBmaOC3KGW-aiXI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AK6WO0F-SLBmaOC3KGW-aiXI/image.png\"></a></div><p>The squiggle on <code>#exit</code> is in completely the wrong place!</p>",
        "id": 355800637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683212041
    },
    {
        "content": "<p>If I just fire up the PR then the red squiggle is in the right place for me, but I've seen situations in the past where if you play around with the code for a bit then things can get completely confused and you have to restart Lean 4 to fix it</p>",
        "id": 355848541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683222912
    }
]