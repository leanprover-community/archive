[
    {
        "content": "<p>It is useful that <code>extract_goal</code> tries to remove irrelevant hypotheses, except in the case where I'm in a contradiction proof and the goal is <code>False</code>, in which case it gives me something entirely useless. Would it be sensible for <code>extract_goal</code> to behave like <code>extract_goal*</code> <em>in the case</em> where the goal is (syntactically equal to) False?</p>",
        "id": 400799538,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699383622
    },
    {
        "content": "<p>That's funny how useless it is for contradiction proofs. That seems reasonable to me, and I'll make a PR</p>",
        "id": 400800316,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699383862
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 400800368,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699383883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8250\">#8250</a></p>",
        "id": 400802723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699384902
    },
    {
        "content": "<p>I suppose you could also manually <code>revert</code> some relevant hypotheses before <code>extract_goal</code>?</p>",
        "id": 400804351,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699385662
    },
    {
        "content": "<p>Indeed, and that would turn this <code>False</code> feature off and go back to the old behavior. Maybe the documentation should suggest this.</p>",
        "id": 400804534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699385751
    },
    {
        "content": "<p><code>extract_goal</code> could also take a <code>with</code> clause of hypotheses to definitely include.</p>",
        "id": 400804738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699385835
    },
    {
        "content": "<p>Yeah this would be nice, and <code>*</code> would then carry the same meaning as it does in <code>simp</code>: include everything, not just the ones I told you to include</p>",
        "id": 400804905,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699385896
    },
    {
        "content": "<p>Could we change the syntax to <code>extract_goal with *</code> so that the analogy is perfect?</p>",
        "id": 400831322,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1699398712
    },
    {
        "content": "<p>I've updated the PR with this new feature. Here's an excerpt from the PR description:</p>\n<blockquote>\n<p>changes the <code>extract_goal</code> syntax to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"extract_goal\"</span> <span class=\"o\">(</span><span class=\"s2\">\"*\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"s2\">\"using\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>The \"using\" clause replaces the autogenerated name for the extracted theorem/def. The <code>extract_goal</code> tactic has the same behavior as before, <code>extract_goal *</code> extracts the entire local context like before, and <code>extract_goal a b c ...</code> removes everything from the local context except for fvars <code>a</code>, <code>b</code>, <code>c</code>, ... and their (and the goal's) dependencies. This last form does not automatically include prop variables that depend on preserved fvars, unlike <code>extract_goal</code>, which does. The thought is that including prop variables is useful in the default case, but if you are configuring which variables to take you can always take them manually.</p>\n</blockquote>",
        "id": 400998638,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699467132
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8250\">#8250</a> is still open, if any meta enthusiasts want to take a look</p>",
        "id": 406632549,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701988766
    },
    {
        "content": "<p>Among the tests I see nothing that seem to check there is no missing <code>withContext</code> or <code>instantiateMvar</code>.</p>",
        "id": 406633953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701989502
    }
]