[
    {
        "content": "<p>In an attempt to understand better what is going on with etaExperiment, I tried turning it on for the entire build: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3744\">!4#3744</a>.</p>\n<p>First, this results in some typeclass searches taking longer, so I increased <code>synthInstance.maxHeartbeats</code> globally too.</p>\n<p>However I then start getting failures to find instances, in ways I don't really understand. I've annotated one of the typical failures in that PR, so you can see this in the diff.</p>\n<p>An instance like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasTerminal</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Cone</span> <span class=\"o\">((</span><span class=\"n\">Functor.const</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>works fine in isolation, generating the trace messages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.Preorder.subsingleton_hom</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"n\">instSubsingleton</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Unique.instSubsingleton</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.uniqueToTerminal</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.uniqueToTerminal</span> <span class=\"n\">to</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">Unique.instSubsingleton</span>\n</code></pre></div>\n<p>as you might hope. However in the actual proof, where we need to find this instance in <code>simp only [eq_iff_true_of_subsingleton]</code>, we see the shorter trace output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n          <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsEmpty.instSubsingleton</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Unique.instSubsingleton</span><span class=\"o\">,</span> <span class=\"n\">instSubsingleton</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.Preorder.subsingleton_hom</span><span class=\"o\">]</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">üí•</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Preorder.Preorder.subsingleton_hom</span> <span class=\"n\">to</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚ñº</span>\n            <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">s.pt</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">‚ä§</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚âü</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.78176</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">?</span><span class=\"n\">m.78177</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and Lean apparently gives up before trying the other options.</p>\n<p>Going back to <code>set_option synthInstance.etaExperiment false</code>, Lean successfully finds the instance in both situations.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, any ideas what is going on here?</p>",
        "id": 354791710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682917424
    },
    {
        "content": "<p>Without seeing more of the trace, this looks like the <code>max u v</code> issue.</p>",
        "id": 357375383,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683743543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, sorry, I should have posted a link here to <a href=\"#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E</a>, where this example was minimized and diagnosed further.</p>",
        "id": 357406818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683753799
    }
]