[
    {
        "content": "<p>In Lean 3, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/discrete_topology_bot\">docs#discrete_topology_bot</a>. While porting this file, the naive approach</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DiscreteTopology</span> <span class=\"n\">α</span> <span class=\"bp\">⊥</span> <span class=\"n\">where</span>\n  <span class=\"n\">eq_bot</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>failed because it tried to find <code>[TopologicalSpace α]</code> for <code>DiscreteTopology.mk</code>. While I can define this instance using <code>@DiscreteTopology.mk</code>, I took this as a hint that this instance can be less useful in Lean 4 than it was in Lean 3 and deleted it (backported in <a href=\"https://github.com/leanprover-community/mathlib/pull/18312\">#18312</a> together with other changes). Am I right? Or it makes sense to have it?</p>",
        "id": 323936352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674779549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 323939194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674781121
    },
    {
        "content": "<p>It seems useful, but as a def.</p>",
        "id": 323939616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674781379
    },
    {
        "content": "<p>But removing it also seems fine if it's never used.</p>",
        "id": 323939792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674781477
    },
    {
        "content": "<p>it strikes me more as an endpoint theorem such that removing it would be weird even if it's not used</p>",
        "id": 323939850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674781516
    },
    {
        "content": "<p>is it actually not found when you search for that instance directly?</p>",
        "id": 323939896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674781549
    },
    {
        "content": "<p>it's not too surprising that the instance definition itself requires some extra <code>@</code>, but if you have a <code>@DiscreteTopology α ⊥</code> instance search I think we want this instance to solve it</p>",
        "id": 323940015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674781617
    },
    {
        "content": "<p>I do not want to declare this as an instance, since it does not work well with (discrimination tree) indexing.  Lean will try to apply it for any <code>DiscreteTopology</code> goal.</p>",
        "id": 323940150,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674781685
    },
    {
        "content": "<p>As a lemma, it's just <code>⟨rfl⟩</code>.</p>",
        "id": 323940921,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674782192
    },
    {
        "content": "<p>But I can restore it.</p>",
        "id": 323941966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674782954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/DiscreteTopology.20bot/near/323940921\">said</a>:</p>\n<blockquote>\n<p>As a lemma, it's just <code>⟨rfl⟩</code>.</p>\n</blockquote>\n<p>It's <code>⟨rfl⟩</code> and an annoying type signature to write</p>",
        "id": 323945620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674785638
    }
]