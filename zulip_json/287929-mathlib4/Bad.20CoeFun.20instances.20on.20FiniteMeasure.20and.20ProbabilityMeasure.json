[
    {
        "content": "<p>Should these have been ported into <code>FunLike</code> instances, or would that have been a bad idea?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">FiniteMeasure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"c1\">-- (fun s =&gt; ENNReal.toNNReal (↑↑↑P s)) x : NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"c1\">-- (fun s =&gt; ENNReal.toNNReal (↑↑↑P s)) x : NNReal</span>\n</code></pre></div>\n<p>Even beta-reducing these to <code>ENNReal.toNNReal (↑↑↑P x)</code> would help a little</p>",
        "id": 401656710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699837308
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/8375\">#8375</a>, though I'm seeing a failure in <code>split_ifs</code></p>",
        "id": 401659492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699838614
    },
    {
        "content": "<p><del>(who knows, maybe the cause is <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a>...)</del> It's not, it's a failure to beta-reduce</p>",
        "id": 401659631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699838672
    },
    {
        "content": "<p>BTW, the <code>CoeFun</code> instance on <code>Measure</code> should be turned into <code>FunLike</code> too.</p>",
        "id": 401690239,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699853456
    },
    {
        "content": "<p>Feel free to adopt the PR above</p>",
        "id": 401724966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699868862
    }
]