[
    {
        "content": "<p>I would like to refactor how we have set up the concrete categories <code>MonCat</code>, <code>GroupCat</code>, and <code>ModuleCat</code>, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/3900\">!4#3900</a>.</p>\n<p>Using that refactor, I have then unstuck the port of <code>Algebra.Category.Ring.Basic</code> (originally in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3105\">!4#3105</a>) in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3901\">!4#3901</a>. (I made a separate PR rather than just pushing, because of the big refactor to earlier files. If the refactor PR is okay, I can just recombine them.)</p>\n<p>It would be great if these could be reviewed soon, as I would really like to renew progress on this part of the port. <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, anyone else. :-)</p>\n<p>It is not the most complete refactor ever, there are still things to clean up, but I would like to get <code>Algebra.Category.Ring.Basic</code> merged asap so people can start porting again, and I can to a further \"make everything uniform\" PR again soon.</p>",
        "id": 357431419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683767250
    },
    {
        "content": "<p>I've only looked at the PR briefly, but I like the gist of it!</p>",
        "id": 357457237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683779024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do we need the <code>coe_id</code> and <code>coe_comp</code> for every bundled category? Can't we have two lemmas for concrete categories that abstract all of these?</p>",
        "id": 357471712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683785307
    },
    {
        "content": "<p>Not that I could get to work, but yes, I was really hoping so! Happy if someone can get this to work, or I can try again later.</p>",
        "id": 357471832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683785344
    },
    {
        "content": "<p>Making <code>Bundled.\\a</code>reducible didn’t break anything here. I haven’t had a chance to see if it helps.</p>",
        "id": 357571535,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683808722
    },
    {
        "content": "<p>I took a quick look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3900\">!4#3900</a> and overall it looks good to me! Concerning the repetition of <code>coe_id</code>, <code>coe_comp</code> etc., I bet we could write a macro to add these lemmas quite easily.</p>\n<p>Looking ahead, what do you think about making morphisms in, say, <code>GroupCat</code> a structure with a single <code>MonoidHom</code> field? I often find it quite annoying when lean gets confused between morphisms in <code>GroupCat</code> or similar bundled categories and the associated morphisms from the algebra library. With the correct <code>CoeFun</code> instance (which it seems we need to add anyway!) and ext lemmas, etc., the user experience wouldn't be much different.</p>",
        "id": 357614280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683816878
    },
    {
        "content": "<p>Is this a reasonable thing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">BundledHom</span> <span class=\"n\">hom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Iα</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Iβ</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">Iα</span> <span class=\"n\">Iβ</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">I.toFun</span> <span class=\"n\">Iα</span> <span class=\"n\">Iβ</span>\n</code></pre></div>",
        "id": 357618141,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683817556
    },
    {
        "content": "<p>I think lean would still get confused between <code>hom</code> and <code>Quiver.hom</code>.</p>",
        "id": 357620065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683817890
    },
    {
        "content": "<p>Making <code>TopCat</code> an <code>abbrev</code> seems to remove some <code>dsimp</code>'s and doesn't break anything so far</p>",
        "id": 357620735,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683818021
    },
    {
        "content": "<p>Also what is going on with <code>ModuleCat ℤ </code> it seems like an odd duck</p>",
        "id": 357620943,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683818058
    },
    {
        "content": "<p><code>example : (forget TopCat).obj X = X := rfl</code> is fine but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">topologicalSpace_forget</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TopCat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">TopCat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>still fails. It seems like this <code>rfl</code> was applied in ML3 automatically</p>",
        "id": 357621506,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683818212
    },
    {
        "content": "<p>That's after <code>forget</code> was made reducible, right?</p>",
        "id": 357625285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683818891
    },
    {
        "content": "<p>Yes. I think I am working there</p>",
        "id": 357625359,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683818906
    },
    {
        "content": "<p>well that's not great</p>",
        "id": 357625450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683818918
    },
    {
        "content": "<p>My understanding of Scott's PR is that all coercions should flow through <code>Bundled</code> and not <code>ConcreteCategory</code> since most (?) <code>ConcreteCategory</code>'s are bundled up.</p>",
        "id": 357625729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683818978
    },
    {
        "content": "<p>So we wouldn't see <code>forget</code> any more</p>",
        "id": 357625817,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683819000
    },
    {
        "content": "<p>Changing from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">ConcreteCategory.hasCoeToFun</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n   <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">TopCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">BundledHom.toFun</span> <span class=\"n\">bundledHom</span> <span class=\"n\">X.str</span> <span class=\"n\">Y.str</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>let's me remove <code>topologicalSpace_forget</code> completely from <code>TopCat.Basic</code> at the price of breaking composition results in <code>homeoOfIso</code> (which can be fixed in a standard manner).</p>",
        "id": 357677164,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683831823
    },
    {
        "content": "<p>Statements like <code>OpenEmbedding ((forget TopCat).map f &gt;&gt; (forget TopCat).map g)</code> can be written as <code>OpenEmbedding (f &gt;&gt; g)</code>.</p>",
        "id": 357677686,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683831982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, would it be okay if we made the changes to <code>TopCat</code> in a separate PR? I'd like to keep this moving.</p>",
        "id": 357731242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683856441
    },
    {
        "content": "<p>I mentioned these things because it supports moving the coercions from <code>ConcreteCategory</code> to <code>Bundled</code>/<code>BundleHom</code> as the PR does. So it looks like a good start to me! (though it is already merged now lol)</p>",
        "id": 357933222,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683909906
    }
]