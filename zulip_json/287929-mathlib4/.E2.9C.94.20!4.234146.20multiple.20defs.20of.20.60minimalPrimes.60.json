[
    {
        "content": "<p>In RingTheory.Ideal.MinimalPrime there are two definitions of <code>minimalPrimes</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `I.minimalPrimes` is the set of ideals that are minimal primes over `I`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ideal.minimalPrimes</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">minimals</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">p.IsPrime</span> <span class=\"bp\">∧</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">ideal.minimal_primes</span> <span class=\"n\">Ideal.minimalPrimes</span>\n\n<span class=\"sd\">/-- `minimalPrimes R` is the set of minimal primes of `R`.</span>\n<span class=\"sd\">This is defined as `Ideal.minimalPrimes ⊥`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">minimalPrimes</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ideal.minimalPrimes</span> <span class=\"bp\">⊥</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">minimal_primes</span> <span class=\"n\">minimalPrimes</span>\n</code></pre></div>\n<p>These don't live in any namespace :O</p>",
        "id": 359936150,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604936
    },
    {
        "content": "<p>Later on in the file Lean is getting confused with using the first one when we want the second one in a line <code>p ∈ minimalPrimes R</code></p>",
        "id": 359936309,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605031
    },
    {
        "content": "<p>where <code>R</code> is a commutative ring</p>",
        "id": 359936332,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605044
    },
    {
        "content": "<p>I think this is by design</p>",
        "id": 359936748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605236
    },
    {
        "content": "<p>Though the first one should probably be <code>protected</code></p>",
        "id": 359936773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605244
    },
    {
        "content": "<p>I have also noticed that lean 4 sometimes gets a different result in name resolution. Either that or mathport lost a _root_ that was there in mathlib 3</p>",
        "id": 359937126,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684605421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234146.20multiple.20defs.20of.20.60minimalPrimes.60/near/359936773\">said</a>:</p>\n<blockquote>\n<p>Though the first one should probably be <code>protected</code></p>\n</blockquote>\n<p>This worked!</p>",
        "id": 359937182,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605459
    },
    {
        "content": "<p>I think both effects have come up when porting</p>",
        "id": 359937290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605509
    },
    {
        "content": "<p>Now I'm more surprised by the fact that Lean3 managed to get this right without the <code>protected</code> keyword  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 359937552,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 359938138,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684605871
    },
    {
        "content": "<p>Well, by definition the port will only see things that happened to work in lean 3, even if it was somehow unexpected that it would work</p>",
        "id": 359938183,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684605891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> one change is that (if I remember correctly) in the middle of a proof of X in namespace Y, a reference to X in Lean 4 will assume you mean Y.X, even though you're still defining it, e.g. if a proof involves <code>rw X</code> and Z is open, then in Lean 3 it would rewrite Z.X, and in Lean 4 it will rewrite Y.X and then fail because Y.X hasn't been proved yet :-/</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Z</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Z</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">fail to show termination for</span>\n<span class=\"cm\">  Y.X</span>\n<span class=\"cm\">with errors</span>\n<span class=\"cm\">structural recursion cannot be used</span>\n\n<span class=\"cm\">well-founded recursion cannot be used, 'Y.X' does not take any (non-fixed) arguments</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>In Lean 3, the sensible thing happened instead.</p>",
        "id": 359954184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684614259
    }
]