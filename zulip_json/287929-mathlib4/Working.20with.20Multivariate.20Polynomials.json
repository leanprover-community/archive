[
    {
        "content": "<p>I am trying to work with multivariable polynomials, such as <br>\na₁x₁²x₂² + a₂x₁² x₂ + a₃x₁x₂ + a₄x₁x₂² + ⋯ + c<br>\nusing coefficients and variables in \\mathbb{R}. </p>\n<p>Ultimately, I want to do things like take derivatives, have vectors of polynomials, and show that given polynomials are positive definite, but currently, I'm having trouble simply specifying a polynomial using <code>Mathlib.Data.MvPolynomial.Basic</code>.  Could somebody help me with an example of how to do this? </p>\n<p>I imagine the process would be something like:</p>\n<ol>\n<li>Specify a basis of monomials, such as {1, x_1, x_2, x_1^2, x_1x_2, x_2^2}.</li>\n<li>Specify the coefficients to specify a linear combination.<br>\nFor the first step, I suspect we'd use MvPolynomial.monomial, but even defining one monomial is tripping me up (I'm still getting my sea/lean legs)</li>\n</ol>",
        "id": 379658168,
        "sender_full_name": "Paul Wintz",
        "timestamp": 1690588057
    },
    {
        "content": "<p>If you have two variables x and y and want to write down a*x^2*y^2, perhaps you could do something like <code>example : MvPolynomial (Fin 2) R := C a * X 0^2 * X 1^2</code>, where <code>C</code> and <code>X</code> are under the <code>MvPolynomial</code> namespace? Here <code>X</code> is a function that takes in an index from an indexing set and outputs the variable with that index in the ordering of your choice. It’s really just a wrapper for <code>monomial</code>, and I think it’s a lot easier to write <code>C</code> and <code>X</code> instead.</p>",
        "id": 379714150,
        "sender_full_name": "David Ang",
        "timestamp": 1690616792
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.pderiv#doc\">docs4#MvPolynomial.pderiv</a> is the partial derivative function by the way, and if you have explicit examples <code>simp</code> should be able to work out the derivative for you</p>",
        "id": 379858287,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690652257
    },
    {
        "content": "<p>Thank you for your responses.</p>\n<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> ,  I have tried to implement a polynomial using your suggestion, but I haven't been able to get it to work. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">MvPolynomial</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>      <span class=\"c1\">-- Ring</span>\n<span class=\"kd\">def</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- Index Set</span>\n<span class=\"kd\">def</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- Cofficient</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>This produces an error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>It seems like <code>R</code> is not the a valid type, so I tried replacing <code>def R := ℝ</code> with <code>variable {R : Type _} [CommSemiring R]</code>. This change fixes the first error but produces a different one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">HMul</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">m.22340</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Ultimately, I want R to be the set of reals, but I don't know how to specify that. <br>\nAny suggestions?</p>",
        "id": 380266862,
        "sender_full_name": "Paul Wintz",
        "timestamp": 1690796798
    },
    {
        "content": "<p>I think you can simply replace your <code>R</code> with <code>\\R</code>. Currently it says you don't have <code>CommSemiring R</code> and <code>HMul</code> because when you define <code>R</code> to be <code>\\R</code>, Lean doesn't carry over all the instances from <code>\\R</code> to <code>R</code> (unless e.g. you marked the definition as reducible).</p>",
        "id": 380267608,
        "sender_full_name": "David Ang",
        "timestamp": 1690796937
    },
    {
        "content": "<p>Using <code>abbrev R := ℝ</code> instead of <code>def R := ℝ</code> would fix it</p>",
        "id": 380276911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690798658
    },
    {
        "content": "<p>Thanks, that fixed my problems. I have another question, though. I expected that using <code>σ := Fin 2</code>, as shown below, would mean that my polynomial can only have two indeterminates, but in the following code, I define <code>pol</code> using four variables: <code>X 0</code>, <code>X 1</code>, <code>X 3</code>, and <code>X 4</code>. Why does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">MvPolynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- Index Set</span>\n<span class=\"kd\">def</span> <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">pol</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 380513410,
        "sender_full_name": "Paul Wintz",
        "timestamp": 1690844639
    },
    {
        "content": "<p>That's because of the (highly dubious in my opinion) design decision to have <code>4 : Fin 2</code> make sense and I think right now it is equal to 0, although there have been other times when it's been equal to 1.</p>",
        "id": 380513776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690844794
    },
    {
        "content": "<p>I don't remember it ever being equal to 1 except in Zulip messages falsely-claiming/wishing it was; but perhaps it was before I started using mathlib.</p>",
        "id": 380514122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690844971
    },
    {
        "content": "<p>Wasn't addition once defined as \"if it's bigger than n-1 then the answer is n-1\"?</p>",
        "id": 380565887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690869250
    },
    {
        "content": "<p>And then it changed to \"although we have ZMod already let's just copy that\"</p>",
        "id": 380565964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690869285
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/data/fin/ops.lean#L26\">Not 6 years ago in Lean 3.42</a> at least, or <a href=\"https://github.com/leanprover/lean/commit/6134a4a70eb8273b0fbfbc2da7480118845e3477\">when the operations were first added</a></p>",
        "id": 380589627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690876196
    },
    {
        "content": "<p>Oh apologies -- it was <em>subtraction</em> which was borked! Addition on <code>Fin n</code> and <code>ZMod n</code> agreed for n &gt; 0 but <a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/data/fin/ops.lean#L34-L35\">not subtraction</a> (which at some point, and possibly still, was \"lift to naturals, apply borked natural subtraction, and then descend again\")</p>",
        "id": 380804203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690914845
    }
]