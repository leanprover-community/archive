[
    {
        "content": "<p>Problem: bors occasionally fails because multiple files in a batch add lines to <code>Mathlib.lean</code> and the staging branch doesn't merge them in alphabetical order (or there is simply a conflict).</p>\n<p>Proposal:</p>\n<ul>\n<li>Configure CI to check that all files are imported, but don't require the lines in <code>Mathlib.lean</code> to be sorted</li>\n<li>Add a <code>.gitattributes</code> file to the root of the repo with</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib.lean</span> <span class=\"n\">merge</span><span class=\"bp\">=</span><span class=\"n\">union</span>\n</code></pre></div>\n<ul>\n<li>Occasionally sort <code>Mathlib.lean</code>. This could be done by a bot.</li>\n</ul>",
        "id": 329581204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677098134
    },
    {
        "content": "<p>Related: <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329456004\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329456004</a></p>",
        "id": 329585464,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677099675
    },
    {
        "content": "<p>However, dropping <code>Mathlib.lean</code> will require a fix on <code>cache</code></p>",
        "id": 329585712,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677099756
    },
    {
        "content": "<p>Note: Johan is not suggesting to drop <code>Mathlib.lean</code></p>",
        "id": 329586147,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677099917
    },
    {
        "content": "<p>I think there's a way to define a custom merge handler that does union then sort? <a href=\"https://stackoverflow.com/a/13000959/102441\">https://stackoverflow.com/a/13000959/102441</a></p>",
        "id": 329586614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677100131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/check.20all.20files.20imported/near/329586147\">said</a>:</p>\n<blockquote>\n<p>Note: Johan is not suggesting to drop <code>Mathlib.lean</code></p>\n</blockquote>\n<p>I understand, but dropping it sounds like a similar effort that will avoid future maintenance issues altogether (including this one)</p>",
        "id": 329586705,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677100171
    },
    {
        "content": "<p>In any case we need a file that imports everything because we need to check that there are no two definitions with the same name.  And the linter also needs to import all of mathlib4.</p>",
        "id": 329587060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677100322
    },
    {
        "content": "<p>Though if those checks are the only use cases, the file could be generated on demand or the metaprograms adjusted correspondingly. The crucial question is whether <code>import Mathlib</code> should be supported - if it is considered an antipattern, then avoiding the file would be preferable.</p>",
        "id": 329595994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677103965
    },
    {
        "content": "<p>Is it possible to write a metaprogram that intercepts <code>import Mathlib</code> and imports every file in the directory tree? That is, is there a hook along the lines of Python's <code>sys.meta_path</code>, or a function along the lines of Python's <code>__import__</code>?</p>",
        "id": 329603275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677107615
    },
    {
        "content": "<p>if the language server supported auto-import-finding along the lines of what other language servers have, then <code>import Mathlib</code> definitely becomes an anti-pattern :P</p>",
        "id": 329669632,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145414
    },
    {
        "content": "<p>but that seems like way more work than we are willing to put into this right now...</p>",
        "id": 329669777,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677145447
    },
    {
        "content": "<p>Auto-import wouldn't really work for things like instances, simp lemmas, or tactic extensions</p>",
        "id": 329687773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677150329
    },
    {
        "content": "<p>Here's an idea to maintain <code>Mathlib.lean</code> without a bot: you can call the creation/sorting command with a Git pre-commit hook. You would barely notice it doing it's job.</p>",
        "id": 329698014,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677153241
    },
    {
        "content": "<p>That would only help if bors runs the commit hook during a rebase</p>",
        "id": 329716193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677158358
    },
    {
        "content": "<p>Although based on <a href=\"https://github.com/Praqma/git-merge-driver#distribution\">this README</a>, using a custom merge driver has a similar problem</p>",
        "id": 329716597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677158455
    },
    {
        "content": "<p>My comment was in the spirit of \"Occasionally sort Mathlib.lean. This could be done by a bot.\", but removing the bot part. The contributors themselves would sort it without even noticing</p>",
        "id": 329717569,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677158714
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 329727361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677161228
    },
    {
        "content": "<p>Is there an easy fix to these merge conflicts we keep getting in <code>Mathlib.lean</code>? I guess it just requires someone who knows the CI setup to add <code>find Mathlib -name \"*.lean\" | env LC_ALL=C sort | sed 's/\\.lean//;s,/,.,g;s/^/import /' &gt; Mathlib.lean</code> somewhere.</p>",
        "id": 360059465,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684676463
    },
    {
        "content": "<p>I see that maybe this is not that simple after trying to figure out how to do it</p>",
        "id": 360060206,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684676730
    },
    {
        "content": "<p>The only fix I can think of is to get rid of it from the github repository, add it to <code>.gitignore</code> and have <code>lake exe cache get</code> make it.</p>",
        "id": 360060685,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684676930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> My ported files seems easy to make many conflicts in Mathlib.lean.<br>\nFor now, please consider delegating me to merge reviewed files, and I merge branches gradually not to make merge conflicts.</p>",
        "id": 360077129,
        "sender_full_name": "Pol'tta / Miyahara K≈ç",
        "timestamp": 1684682642
    },
    {
        "content": "<p>Done this with all the measure theory PRs except <code>AEMeasurableOrder</code> which is currently on the <code>staging</code> branch</p>",
        "id": 360079072,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684683215
    },
    {
        "content": "<p>(deleted because my memory wasn't accurate)</p>",
        "id": 360099953,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684691829
    },
    {
        "content": "<p>We can write a custom merge driver to automatically merge this the right way, as mentioned <a href=\"#narrow/stream/287929-mathlib4/topic/check.20all.20files.20imported/near/329586614\">last time this came up</a></p>",
        "id": 360100127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684691888
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/check.20all.20files.20imported\">#mathlib4 &gt; check all files imported</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 360100363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684692006
    },
    {
        "content": "<p>(I just merged the threads)</p>",
        "id": 360100401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684692023
    },
    {
        "content": "<p>Another question is, if there is a merge conflict in bors, can I see what it was so I can take something off the queue. It's not easy to figure out which of the current PRs conflict with each other</p>",
        "id": 360315328,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684771324
    },
    {
        "content": "<p>There's no point taking it off the queue, is there? Bors does that for you when it reaches the top</p>",
        "id": 360316130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684771537
    },
    {
        "content": "<p>Yeah, but it doesn't identify which one causes the failure, so it just keeps splitting stuff in half and you end up with really small batches.</p>",
        "id": 360316505,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684771608
    },
    {
        "content": "<p>My understanding is that when that happens it means that every PR works fine on its own, but two in the batch conflict with each other</p>",
        "id": 360316873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684771706
    },
    {
        "content": "<p>Yes, I want to figure what those two are so I can take one of them off the queue.</p>",
        "id": 360317443,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684771842
    },
    {
        "content": "<p>I suspect the bors algorithm is just \"cherry-pick one at a time until you get a merge conflict, then split the batch at that point\"</p>",
        "id": 360318721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684772164
    },
    {
        "content": "<p>So it doesn't even know which two conflicted, it just knows that the first one to be cut from the batch conflicts with one in it</p>",
        "id": 360318797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684772188
    },
    {
        "content": "<p>But maybe it's doing the stupider \"throw the whole batch away and bisect\"</p>",
        "id": 360318843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684772203
    },
    {
        "content": "<p>It's doing the stupider thing</p>",
        "id": 360319315,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684772343
    }
]