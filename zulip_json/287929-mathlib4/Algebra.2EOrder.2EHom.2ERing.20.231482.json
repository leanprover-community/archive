[
    {
        "content": "<p>Corresponding PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1482\">mathlib4#1482</a></p>\n<p>The <code>refl</code> attribute on the <code>refl</code>for <code>OrderRingIso</code>s is giving me trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[refl]</span> <span class=\"kn\">attribute</span> <span class=\"n\">only</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">lemmas</span> <span class=\"n\">proving</span> <span class=\"n\">x</span> <span class=\"bp\">∼</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">got</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">≃+*</span><span class=\"n\">o</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I was thinking the issue is with the instances, but the refl in Algebra.Ring.Equiv looks fairly similar, and its refl tag gives no complaints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RingEquiv.refl.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Any thoughts? Why is the above <code>refl</code> not recognized as <code>x ~ x</code>?</p>",
        "id": 321685294,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673888651
    },
    {
        "content": "<p>I get similar complaints in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1287\">!4#1287</a> for self-equivalences of categories.</p>",
        "id": 326621419,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675871192
    },
    {
        "content": "<p>The cited issue was \"fixed\" by reordering the parameters of the class. It look like  <code>let .app (.app rel lhs) rhs := targetTy | fail</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/Relation/Rfl.lean#L35\">here</a> takes the first two parameters? This also affects <code>@[trans]</code></p>",
        "id": 326670322,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675885112
    },
    {
        "content": "<p>Returning to this to report that this is still an issue. But I guess it is still not a github-issue, so I'll try to make it one. Thanks for sharing your fix, <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> , but in this particular case I don't see what I could reorder, the first two arguments of OrderRingIso are already the \"correct\" ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OrderRingIso</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">α</span> <span class=\"bp\">≃+*</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 338167706,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1677425596
    },
    {
        "content": "<p>Hahaha, actually: Reordering the instances after the first two arguments, from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fixes things. I'll still open an issue, since reordering arguments (even if they are instances or otherwise implicit) seems like a devious thing to do while porting, with implicit arguments being accessed through <code>@theorem</code> often enough.</p>",
        "id": 338169660,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1677426488
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover-community/mathlib4/issues/2505\">https://github.com/leanprover-community/mathlib4/issues/2505</a></p>",
        "id": 338171052,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1677427116
    },
    {
        "content": "<p>I think the better workaround is to build the the instance by hand, remove the the tag, and leave a note</p>",
        "id": 338172296,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677427677
    }
]