[
    {
        "content": "<p>I'm experiencing slow typeclass inference when using modules. In particular, opening lean namespace causes mysterious goal <code>CoeFun Type ?m</code> which fails and takes a long time.</p>\n<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.FDeriv.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">X1</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">X2</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">X3</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">X4</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">X4</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>typeclass inference takes roughly 600ms on my machine.</p>\n<p>The culprit is <code>open Lean</code> which causes the mysterious goal <code>CoeFun Type ?m</code> which fails and takes a long(ish) time. However, the import <code>Mathlib.Analysis.Calculus.FDeriv.Basic</code> makes it roughly 10x slower.</p>\n<p>Any idea what is triggering <code>CoeFun Type ?m</code>? I was unable to decipher it from traces.</p>\n<p>Tested on the latest commit  cebb592 of mathlib4</p>",
        "id": 380448484,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690827504
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Module#doc\">docs#Lean.Module</a></p>",
        "id": 380449136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827645
    },
    {
        "content": "<p>It tries to interpret <code>Module R X</code> as <code>Lean.Module R X</code>. Since <code>Lean.Module R</code> is a <code>Type</code>, in order to apply it to <code>X</code>, it looks for <code>CoeFun Type ?m</code>.</p>",
        "id": 380449324,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827689
    },
    {
        "content": "<p>If you import a large part of <code>Mathlib</code>, then it takes a long time to go over all possible branches.</p>",
        "id": 380449561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827737
    },
    {
        "content": "<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> ugh that is really unfortunate coincidence</p>",
        "id": 380449638,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690827754
    },
    {
        "content": "<p>Any tips on how I could have discovered it myself?</p>",
        "id": 380450306,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690827905
    },
    {
        "content": "<p>For me, the main tip was that <code>open Lean</code> makes elaboration of <code>Module</code> slow.</p>",
        "id": 380450433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827936
    },
    {
        "content": "<p>There were two possibilities: a strange instance and a name conflict.</p>",
        "id": 380450678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827977
    },
    {
        "content": "<p><code>open scoped Lean</code> doesn't make it slow, so it's a name conflict.</p>",
        "id": 380450754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690827995
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 380452107,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690828269
    }
]