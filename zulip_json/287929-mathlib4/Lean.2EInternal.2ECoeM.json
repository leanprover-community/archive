[
    {
        "content": "<p>I noticed than we have some lemmas mentionning <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Internal.CoeM#doc\">docs#Lean.Internal.CoeM</a> (see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Functor.html#Monadic-coercion-lemmas\">this section</a>). The docstring of <code>Lean.Internal.CoeM</code> explicitly says that this should not be used directly by users, but it appears \"naturally\" as the coercion form <code>Set X</code> to <code>Set Y</code> given a coercion from <code>X</code> to <code>Y</code>. Do we want to keep this ? Should we add a better name ? Should we change the definition from <code>⋃ x ∈ S, {↑x}</code> (coming from a <code>do</code> definition) to the more natural <code>(↑) '' S</code> ?</p>",
        "id": 388318831,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693486828
    },
    {
        "content": "<p>I assume changing it from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline, coe_decl]</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">CoeT</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">x</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">CoeT.coe</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline, coe_decl]</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Internal.coeM</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">CoeT</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">CoeT.coe</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>would be enough?</p>",
        "id": 388348316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693495224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.2EInternal.2ECoeM/near/388318831\">said</a>:</p>\n<blockquote>\n<p>but it appears \"naturally\" as the coercion form <code>Set X</code> to <code>Set Y</code> given a coercion from <code>X</code> to <code>Y</code>.</p>\n</blockquote>\n<p>Only when <code>X</code> and <code>Y</code> are in the same universe</p>",
        "id": 388348458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693495265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.2EInternal.2ECoeM/near/388348458\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.2EInternal.2ECoeM/near/388318831\">said</a>:</p>\n<blockquote>\n<p>but it appears \"naturally\" as the coercion form <code>Set X</code> to <code>Set Y</code> given a coercion from <code>X</code> to <code>Y</code>.</p>\n</blockquote>\n<p>Only when <code>X</code> and <code>Y</code> are in the same universe</p>\n</blockquote>\n<p>Oh right so if we want this coercion we probably want a separate definition anyways. So indeed I think it's better to make sure that we don't use <code>Lean.Internal.CoeM</code>. Do you know which instance makes it trigger as a coercion though?</p>",
        "id": 388353614,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693496633
    }
]