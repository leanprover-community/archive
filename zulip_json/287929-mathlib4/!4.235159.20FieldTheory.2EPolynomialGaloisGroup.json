[
    {
        "content": "<p>There seems to be a diamond for <code>IsScalarTower ℚ ℝ ℂ</code>. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> coming from the port of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5159\">#5159</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Tower</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">AlgEquiv.restrictScalars</span> <span class=\"n\">ℚ</span> <span class=\"n\">Complex.conjAe</span>  <span class=\"c1\">-- failed to synthesize instance  IsScalarTower ℚ ℝ ℂ</span>\n</code></pre></div>\n<p>Lean wants </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toSMul</span>\n</code></pre></div>\n<p>but the inferred instances are either <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.instIsScalarTowerComplexInstSMulComplexInstSMulComplex#doc\">docs#Complex.instIsScalarTowerComplexInstSMulComplexInstSMulComplex</a> giving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Complex.instSMulComplex</span> <span class=\"n\">Complex.instSMulComplex</span>\n</code></pre></div>\n<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsScalarTower.rat#doc\">docs#IsScalarTower.rat</a> giving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n</code></pre></div>\n<p>I tried to find out which instance was giving the term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toSMul</span>\n</code></pre></div>\n<p>but I was unsuccessful.</p>",
        "id": 368162465,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687338041
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instIsScalarTowerComplexInstSMulComplexInstSMulComplex#doc\">docs#instIsScalarTowerComplexInstSMulComplexInstSMulComplex</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsScalarTower.rat#doc\">docs#IsScalarTower.rat</a> give exactly the same term</p>",
        "id": 368166788,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687338952
    },
    {
        "content": "<p>I mean, syntactically</p>",
        "id": 368166919,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687338975
    },
    {
        "content": "<p>That is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"n\">Real.semiring</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instDivisionRingReal</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n        <span class=\"bp\">@</span><span class=\"n\">CharZero</span> <span class=\"n\">ℝ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne</span> <span class=\"n\">ℝ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toSemiring</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.strictOrderedSemiring</span><span class=\"o\">)))))))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Complex.instSMulComplex</span> <span class=\"n\">ℝ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instCommSemiringReal</span> <span class=\"n\">Real.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.id</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instCommSemiringReal</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Complex.instSMulComplex</span> <span class=\"n\">ℚ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"n\">Real.semiring</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instDivisionRingReal</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n          <span class=\"bp\">@</span><span class=\"n\">CharZero</span> <span class=\"n\">ℝ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne</span> <span class=\"n\">ℝ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toSemiring</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.strictOrderedSemiring</span><span class=\"o\">))))))))</span>\n</code></pre></div>",
        "id": 368166995,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687338995
    },
    {
        "content": "<p>Lean wants</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instCommSemiringReal</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instDivisionRingReal</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n        <span class=\"bp\">@</span><span class=\"n\">CharZero</span> <span class=\"n\">ℝ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne</span> <span class=\"n\">ℝ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toSemiring</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.strictOrderedSemiring</span><span class=\"o\">)))))))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Real.instCommSemiringReal</span> <span class=\"n\">Complex.instSemiringComplex</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Complex.instAlgebraComplexInstSemiringComplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instCommSemiringReal</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.id</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instCommSemiringReal</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"n\">Complex.instSemiringComplex</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toDivisionRing</span> <span class=\"n\">ℂ</span> <span class=\"n\">Complex.instFieldComplex</span><span class=\"o\">)</span> <span class=\"n\">Complex.charZero</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 368167130,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687339026
    },
    {
        "content": "<p>It looks like again the <code>CharZero</code> diamond, if I convert the instance the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">SMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"n\">Complex.instSemiringComplex</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toDivisionRing</span> <span class=\"n\">ℂ</span> <span class=\"n\">Complex.instFieldComplex</span><span class=\"o\">)</span> <span class=\"n\">Complex.charZero</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Complex.instSMulComplex</span> <span class=\"n\">ℚ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toSMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Rat.commSemiring</span> <span class=\"n\">Real.semiring</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebraRat</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.instDivisionRingReal</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n          <span class=\"bp\">@</span><span class=\"n\">CharZero</span> <span class=\"n\">ℝ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne</span> <span class=\"n\">ℝ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne</span> <span class=\"n\">ℝ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">StrictOrderedSemiring.toSemiring</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.strictOrderedSemiring</span><span class=\"o\">))))))))</span>\n</code></pre></div>",
        "id": 368167328,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687339078
    },
    {
        "content": "<p>No sorry, it's not exactly that one. In any case this is the diamond</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Complex.instSMulComplex</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Algebra.toSMul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 368171562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687340002
    },
    {
        "content": "<p>The <code>CharZero</code> diamond should be fixable by giving the right <code>qsmul</code> field to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.instFieldComplex#doc\">docs#Complex.instFieldComplex</a>.</p>",
        "id": 368175352,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687340799
    },
    {
        "content": "<p>Let me try this</p>",
        "id": 368180795,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687341953
    },
    {
        "content": "<p>I'm just about to open a PR myself</p>",
        "id": 368181032,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687342005
    },
    {
        "content": "<p>OK, I can review it then :D</p>",
        "id": 368181524,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687342102
    },
    {
        "content": "<p>But why is it working in mathlib3 but not in mathlib4?</p>",
        "id": 368192574,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687344645
    },
    {
        "content": "<p>It doesn't work in mathlib3 either</p>",
        "id": 368204178,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687347231
    },
    {
        "content": "<p>I guess the file <code>field_theory.polynomial_galois_group</code> works because of some accident about which instance it finds first somewhere.</p>",
        "id": 368205094,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687347399
    },
    {
        "content": "<p>I don't understand. This works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">complex.has_smul</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra.to_has_smul</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Am I missing something?</p>",
        "id": 368205569,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687347502
    },
    {
        "content": "<p>It works at the end of the file <code>data.complex.module</code>, but not if you put that line directly after the <code>has_smul</code> instance.</p>",
        "id": 368206753,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687347752
    },
    {
        "content": "<p>It works before the <code>algebra</code> instance on line 95 in that file, but not after, to be precise.</p>",
        "id": 368207043,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687347828
    }
]