[
    {
        "content": "<p>We know calc mode is applicable for relations. Is it still applicable for other types (functions, equivalence, etc.)? For example, if I want to define a function: from A to D, I have three function A to B, B to C and C to D, I want to write as following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>i.e., I want to use calc mode for compositions. For another example, I want to use calc mode for trans of equivalence. Is there any way I can do that?</p>",
        "id": 383739924,
        "sender_full_name": "loooong",
        "timestamp": 1691696274
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- hack: Lean doesn't allow `→` in calc</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\"→'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">imp</span> <span class=\"n\">imp</span> <span class=\"n\">imp</span> <span class=\"n\">where</span> <span class=\"n\">trans</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">Function.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">→'</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→'</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">_</span> <span class=\"bp\">→'</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383740882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691696577
    },
    {
        "content": "<p>For equivalence it works out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383741400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691696724
    },
    {
        "content": "<p>Thank you! I will try it!</p>",
        "id": 383741762,
        "sender_full_name": "loooong",
        "timestamp": 1691696850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> why isn't <code>→</code> allowed in <code>calc</code>? Is there a specific reason (e.g., because it's foundational notation), or is it just \"we didn't bother to support this character\"?</p>",
        "id": 383742397,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691697070
    },
    {
        "content": "<p>Calc looks for expressions of the form <code>some_rel _ _ _ A B</code>, which <code>A → B</code> isn't without an auxiliary function.</p>",
        "id": 383742521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691697110
    },
    {
        "content": "<p>In Lean 3 there was special hard-coded support for <code>→</code>, I guess Lean 4 didn't bother to add that (or decided deliberately not to)</p>",
        "id": 383742645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691697139
    },
    {
        "content": "<p>Can I suggest a change? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383742798,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691697186
    },
    {
        "content": "<p>Annoyingly adding <code>_</code>s doesn't work for <code>MulEquiv</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.Basic</span>\n\n<span class=\"c1\">-- TODO: PR this!</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulEquiv</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">MulEquiv.trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≃*</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- fails if you put `_`s at the start of each line</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">B</span> <span class=\"bp\">≃*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">C</span> <span class=\"bp\">≃*</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383743928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691697474
    },
    {
        "content": "<p>I want to use calc mode for LinearEquiv, but it seems to that I cannot use it directly. There are so many implicit variables for LinearEquiv.trans. Can someone give me some advice.</p>",
        "id": 383747497,
        "sender_full_name": "loooong",
        "timestamp": 1691698342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO: PR a more general version of this!</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearEquiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearEquiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearEquiv</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"n\">LinearEquiv.trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">A</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">B</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">C</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383748803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691698689
    },
    {
        "content": "<p>Thank you! this version is suitable for me!</p>",
        "id": 383750926,
        "sender_full_name": "loooong",
        "timestamp": 1691699167
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/6509\">#6509</a> to track the TODO</p>",
        "id": 383754889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691700322
    }
]