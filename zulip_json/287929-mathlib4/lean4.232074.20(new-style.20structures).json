[
    {
        "content": "<p>Here is an idea that is maybe too dumb to put on github: what if we modify the <code>class</code> command to add some do-nothing class to the start of all <code>extends</code> lists?</p>",
        "id": 325993307,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619399
    },
    {
        "content": "<p>I don't think that works</p>",
        "id": 325993382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675619420
    },
    {
        "content": "<p>I guess structure constructor notation would need adjustments too</p>",
        "id": 325993426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619445
    },
    {
        "content": "<p>The do nothing class has to overlap with all the other classes in order to prevent them getting projections</p>",
        "id": 325993466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675619458
    },
    {
        "content": "<p>Oh I just assumed Lean always copied all classes besides the first.</p>",
        "id": 325993563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619513
    },
    {
        "content": "<p>Maybe that's why I had a little trouble trying to reduce the size of the example in 2074</p>",
        "id": 325993611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619524
    },
    {
        "content": "<p>I think it copies only the ones that don't overlap with anything it's seen so far</p>",
        "id": 325993638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675619539
    },
    {
        "content": "<p>Experimentation suggests that you are correct.</p>",
        "id": 325993786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619617
    },
    {
        "content": "<p>But maybe if the do-nothing class just contains a proof of <code>true</code>, then all the classes actually would overlap?</p>",
        "id": 325994473,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675619956
    },
    {
        "content": "<p>It would be nicer to just have eta work. Maybe we should revisit the example that caused it to be disabled during TC synthesis</p>",
        "id": 325994654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675620013
    },
    {
        "content": "<p>That proof of true approach sounds promising to me, assuming there's no proof irrelevance optimization going on</p>",
        "id": 325996042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620718
    },
    {
        "content": "<p>That would also unblock porting without rushing people looking for insight on what the right thing to do about TC synthesis is.</p>",
        "id": 325996175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620767
    },
    {
        "content": "<p>Actually in 2074 the classes are all empty already</p>",
        "id": 325996233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675620794
    },
    {
        "content": "<p>I don't think that's relevant</p>",
        "id": 325996304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620832
    },
    {
        "content": "<p>Or maybe <code>derived extends empty_base</code> is considered not empty</p>",
        "id": 325996408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620880
    },
    {
        "content": "<p>It's not relevant to 2074 but it does mean that Lean is already creating parent class instances with constructors in this situation</p>",
        "id": 325996414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675620885
    },
    {
        "content": "<p>Ah, I think I see what you mean</p>",
        "id": 325996486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620917
    },
    {
        "content": "<p>So yes, an empty base class for everything algebraic/ordered would likely do the trick</p>",
        "id": 325996605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620974
    },
    {
        "content": "<p>That basically amounts to reintroducing old structures, right? (not a bad thing, I like old structures)</p>",
        "id": 325996762,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1675621066
    },
    {
        "content": "<p>It seems strange that we move to Lean 4 but we're trying to use new structures as old structures (no, I don't have a better solution).</p>",
        "id": 325996980,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675621182
    },
    {
        "content": "<p>It looks like <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> re-enabled structure eta in typeclass search</p>",
        "id": 326005470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675626293
    },
    {
        "content": "<p>I think if we want to do this properly, we should add an additional specifier like <code>class Foo extends Bar, @[inline] Baz</code> to say that the fields of <code>Baz</code> should be inlined into Foo even if the fields are all disjoint from previous ones</p>",
        "id": 326018721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675636815
    },
    {
        "content": "<p>I assume attributes are not currently allowed syntactically there?</p>",
        "id": 326052456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675666193
    }
]