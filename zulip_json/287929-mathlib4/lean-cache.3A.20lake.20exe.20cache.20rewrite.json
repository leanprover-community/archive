[
    {
        "content": "<p>I have an initial version of the <code>lake exe cache</code> rewrite available now at <a href=\"https://github.com/digama0/lean-cache\">https://github.com/digama0/lean-cache</a> . Some comparative statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">*</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">*</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3589</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">5646</span> <span class=\"n\">ms</span>\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>   <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">20</span> <span class=\"n\">secs</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>   <span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">16</span> <span class=\"n\">secs</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">72</span> <span class=\"n\">millis</span>   <span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">15</span> <span class=\"n\">secs</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>    <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">30</span> <span class=\"n\">secs</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">millis</span>    <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">30</span> <span class=\"n\">secs</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">*</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">*</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake_ext</span>\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>    <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">02</span> <span class=\"n\">secs</span>      <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>  <span class=\"mi\">929</span><span class=\"bp\">.</span><span class=\"mi\">58</span> <span class=\"n\">millis</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">46</span> <span class=\"n\">millis</span>  <span class=\"mi\">929</span><span class=\"bp\">.</span><span class=\"mi\">12</span> <span class=\"n\">millis</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>   <span class=\"mi\">93</span><span class=\"bp\">.</span><span class=\"mi\">50</span> <span class=\"n\">millis</span>    <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">11</span> <span class=\"n\">millis</span>   <span class=\"mi\">89</span><span class=\"bp\">.</span><span class=\"mi\">39</span> <span class=\"n\">millis</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Nothing</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3369</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">3128</span> <span class=\"n\">ms</span>\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>    <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">16</span> <span class=\"n\">secs</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>   <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">92</span> <span class=\"n\">secs</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">70</span> <span class=\"n\">millis</span>   <span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">92</span> <span class=\"n\">secs</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>    <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">secs</span>    <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">63</span> <span class=\"n\">millis</span>    <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">secs</span>\n</code></pre></div>",
        "id": 376853279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689831879
    },
    {
        "content": "<p>The main differences are:</p>\n<ul>\n<li>It's written in rust, not lean</li>\n<li>It doesn't run inside a lake environment, which means it needs data from lake regarding the workspace configuration. This cuts about a second off the processing time, but if the configuration changes then you have to run lake first to update (and unfortunately this is often necessary when switching branches or otherwise doing things that might necessitate using <code>lake-cache</code> in the first place). Support for the necessary export still needs to be upstreamed but for now there is a separate application <code>lake_ext</code> that processes the lakefile into a JSON format and puts it in the build directory.</li>\n<li>It doesn't support all the subcommands of <code>lake exe cache</code>, are people actually using these?</li>\n</ul>",
        "id": 376854214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm curious: What is the primary cause of the 2x time save?</p>",
        "id": 376854733,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689832449
    },
    {
        "content": "<p>It's hard to tell. Running anything through lake seems to involve some time just to do the workspace setup, and other activities are also slower than seems appropriate</p>",
        "id": 376854913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832537
    },
    {
        "content": "<p>If you stick an <code>exit 0</code> at the beginning of <code>cache</code>, <code>lake exe cache get</code> drops to 1.1 sec</p>",
        "id": 376855178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689832668
    },
    {
        "content": "<p>Why did it unpack 200 less files?</p>",
        "id": 376857838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689833634
    },
    {
        "content": "<p>Yikes, that sure is a bit of duplication with Lake code. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What directions do you see for getting Cache and Lake closer together? The simplest and loosest coupling I can see would be specifying an executable in the lakefile that Lake calls just before trying to build a module, but that would probably destroy download parallelism. The next point on the Pareto curve I see would be for Lake to first collect all this data and call the executable with it only once.</p>",
        "id": 376871142,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689837733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> It appears that the 220 missing files are from <code>Std</code>, <code>ProofWidgets</code> etc, since the command I used above only cleared <code>build/lib/Mathlib</code> and not <code>lake-packages/Std/build/lib</code> as well. Another difference:</p>\n<ul>\n<li>It calculates lake hashes for files, and skips downloading and unpacking for files that are already up to date</li>\n</ul>",
        "id": 376871172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689837742
    },
    {
        "content": "<p>I would really like lake to export some of this as a library but <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> didn't seem interested in that</p>",
        "id": 376871295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689837790
    },
    {
        "content": "<p>I think it would be great to be able to access hashes of files for various REPL / Infotree-extraction things we want to do down the track.</p>",
        "id": 376871783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689837933
    },
    {
        "content": "<p>My approach would be to try and integrate the per-file downloading into Lake as pre-build step, but that might not get the performance <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  desires. However, it could be potentially somewhat be offset by the ability to do this interactively on VS Code file loads.</p>",
        "id": 376872017,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689837997
    },
    {
        "content": "<p>Note that having Lake call Cache <em>as part of the build</em> would have two immediate upsides: 1) it's impossible to forget to call Cache 2) we only download the files we actually need. Of course a downside is that we query the cache more often, the overhead of which would have to be measured.</p>",
        "id": 376872118,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689838022
    },
    {
        "content": "<p>yeah, a major part of wanting to bring the cost of cache down was so that it could be used as a first step in other tools that just want things to be up to date</p>",
        "id": 376872316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838079
    },
    {
        "content": "<p>like <code>lake build</code></p>",
        "id": 376872392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838092
    },
    {
        "content": "<p>I should note that I have mentioned integrating cache pre-build is already possible with <code>extraDepTargets</code>, but no one has taken me up on that approach.</p>",
        "id": 376872426,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838101
    },
    {
        "content": "<p>I'm not saying no to that, but we need an extra dep to target first</p>",
        "id": 376872552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> huh?</p>",
        "id": 376872623,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> This would not provide upside 2), would it?</p>",
        "id": 376872653,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689838163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> if we want to run <code>lean-cache</code> as an <code>extraDepTarget</code> it has to exist first</p>",
        "id": 376872703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Not through Lake (but cache would still work as it does). To do that in Lake, that would require another planned changed: custom module build facets.</p>",
        "id": 376872878,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838236
    },
    {
        "content": "<p>so far I haven't yet worked out how to integrate this into user workflows</p>",
        "id": 376872893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the existing cache could also be integrated in the short term.</p>",
        "id": 376873006,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838277
    },
    {
        "content": "<p>the current implementation is mainly targeted at being a drop in replacement for <code>lake exe cache get</code></p>",
        "id": 376873093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838306
    },
    {
        "content": "<p>i.e., just have a target that does the equivalent of <code>lake exe cache get</code> and use it in <code>extraDepTargets</code></p>",
        "id": 376873094,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838306
    },
    {
        "content": "<p>is that an exe or a script?</p>",
        "id": 376873229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838340
    },
    {
        "content": "<p><code>extraDepTargets</code> are <code>target</code>s -- i.e. arbitrary build code (specfically, <code>IndexBuildM (BuildJob a)</code>).</p>",
        "id": 376873301,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/376872878\">said</a>:</p>\n<blockquote>\n<p>To do that in Lake, that would require another planned changed: custom module build facets.</p>\n</blockquote>\n<p>I don't see the relation yet. Caching is something that enhances the existing facets, it should not require changing the build invocation</p>",
        "id": 376873429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689838411
    },
    {
        "content": "<p>yeah, adding it as a depTarget would mess up the hashes</p>",
        "id": 376873601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> It depends on whether the cache is integrated as part of the default build facet or as add-on. In the former case, the custom facet is unnecessary. In the later, the custom is just the default + cache add-on.</p>",
        "id": 376873620,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/376873601\">said</a>:</p>\n<blockquote>\n<p>yeah, adding it as a depTarget would mess up the hashes</p>\n</blockquote>\n<p>You can just have the cache target produce a <code>nilHash</code> no matter what (regardless of whether the cache is used).</p>",
        "id": 376873718,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838496
    },
    {
        "content": "<p>Any kind of automatic caching definitely needs an opt-out like <code>--offline</code>. To me that suggests it should at least be a built-in notion of Lake even if the actual cache retrieval is done by an external process.</p>",
        "id": 376874293,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689838637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Lake already supports custom configuration options through <code>-K</code>, so I do not think that would be a limiting factor.</p>",
        "id": 376874505,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838695
    },
    {
        "content": "<p>configuration options also mess up the cache</p>",
        "id": 376874652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838745
    },
    {
        "content": "<p>However, I do think integration should be the eventual goal. Especially, when we have establish an official package repository for cloud builds.</p>",
        "id": 376874669,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/376874652\">said</a>:</p>\n<blockquote>\n<p>configuration options also mess up the cache</p>\n</blockquote>\n<p>They do not have to?</p>",
        "id": 376874725,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838773
    },
    {
        "content": "<p>I don't think we need to establish an official package repository, just a caching protocol</p>",
        "id": 376874728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838775
    },
    {
        "content": "<p>e.g. in mathlib's lakefile</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cache_server</span> <span class=\"s2\">\"https://lakecache.blob.core.windows.net/mathlib4\"</span>\n</code></pre></div>\n<p>should be enough</p>",
        "id": 376874998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838857
    },
    {
        "content": "<p>Sure, but I do think a package repository is an important end goal for a langauge.</p>",
        "id": 376875264,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689838924
    },
    {
        "content": "<p>maybe, but I don't think we have any current takers for that infra</p>",
        "id": 376875319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838947
    },
    {
        "content": "<p>To be honest I'm not sure how we got on this custom facet track when my initial assertion already was that retrieving the cache for each file individually is probably too slow</p>",
        "id": 376875406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689838978
    },
    {
        "content": "<p>That's another part of the caching protocol that could be improved</p>",
        "id": 376875478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689838997
    },
    {
        "content": "<p>specifically, it would be nice to send the list of files to download to the server and have it send all of them</p>",
        "id": 376875608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Oh, sorry, I just kind of assuming individual file caching, since that is what cache is currently doing (afaik).</p>",
        "id": 376875645,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689839043
    },
    {
        "content": "<p>unfortunately that's not naturally part of static file serving</p>",
        "id": 376875769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839065
    },
    {
        "content": "<p>currently there are two kinds of files stored on the server:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CACHE_URL</span><span class=\"bp\">/</span><span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">1234</span><span class=\"bp\">.</span><span class=\"n\">ltar</span><span class=\"o\">:</span> <span class=\"n\">individual</span> <span class=\"n\">file</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">tied</span> <span class=\"n\">to</span> <span class=\"n\">any</span> <span class=\"n\">particular</span> <span class=\"n\">commit</span> <span class=\"n\">but</span> <span class=\"n\">hashing</span> <span class=\"n\">all</span> <span class=\"n\">the</span> <span class=\"n\">deps</span><span class=\"o\">)</span>\n<span class=\"n\">CACHE_URL</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">1234</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">files</span> <span class=\"n\">contained</span> <span class=\"k\">in</span> <span class=\"n\">one</span> <span class=\"n\">commit</span>\n</code></pre></div>",
        "id": 376876175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839167
    },
    {
        "content": "<p>the latter kind of file is unused AFAIK</p>",
        "id": 376876235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839181
    },
    {
        "content": "<p>I don't remember if we benchmarked this, but just doing the retrieval from a single process like we're already doing has the tremendous benefits of HTTP multiplexing over long-lived connections. That's what I meant by calling the cache executable only once.</p>",
        "id": 376876389,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689839222
    },
    {
        "content": "<p>There is some code to download directory listings from <code>CACHE_URL/f</code>, but it maxes out at 5000 files so it's not very useful for determining in advance whether something is on the server</p>",
        "id": 376876429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839232
    },
    {
        "content": "<p>I have not yet implemented the version which links to <code>curl</code>'s API, this will help with overlapping unpacking and downloading</p>",
        "id": 376876624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839284
    },
    {
        "content": "<p>the current implementation is just calling <code>curl --parallel</code> like <code>lake exe cache</code> does</p>",
        "id": 376876702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839308
    },
    {
        "content": "<p>Minor downer in this respect: the direct blob storage does not actually support HTTP/2.0 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . In summary: we need more benchmarks!</p>",
        "id": 376878612,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689839784
    },
    {
        "content": "<p>do you mean the storage supported by azure?</p>",
        "id": 376878891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689839858
    },
    {
        "content": "<p>Yes <a href=\"https://learn.microsoft.com/en-us/rest/api/storageservices/http-version-support\">https://learn.microsoft.com/en-us/rest/api/storageservices/http-version-support</a></p>",
        "id": 376878975,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689839876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/376876175\">said</a>:</p>\n<blockquote>\n<p>currently there are two kinds of files stored on the server:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CACHE_URL</span><span class=\"bp\">/</span><span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">1234</span><span class=\"bp\">.</span><span class=\"n\">ltar</span><span class=\"o\">:</span> <span class=\"n\">individual</span> <span class=\"n\">file</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">tied</span> <span class=\"n\">to</span> <span class=\"n\">any</span> <span class=\"n\">particular</span> <span class=\"n\">commit</span> <span class=\"n\">but</span> <span class=\"n\">hashing</span> <span class=\"n\">all</span> <span class=\"n\">the</span> <span class=\"n\">deps</span><span class=\"o\">)</span>\n<span class=\"n\">CACHE_URL</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">1234</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">files</span> <span class=\"n\">contained</span> <span class=\"k\">in</span> <span class=\"n\">one</span> <span class=\"n\">commit</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> asked for the second type of stored files for garbage collection. We'd like to keep the files that are bound to some commit on <code>master</code>, only. Everything else would be deleted after some time window</p>",
        "id": 376913143,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1689846746
    },
    {
        "content": "<p>I didn't write a readme so here's how you use it:</p>\n<ul>\n<li>To compile:<ul>\n<li><code>cd lake_ext; lake build</code> for the lean part</li>\n<li><code>cargo build --release</code> for the rust part</li>\n</ul>\n</li>\n<li>To run, from the target project directory, run:<ul>\n<li><code>/lake_ext/build/bin/lake_ext</code> to generate some metadata (only needs to be rerun if the project configuration changes)</li>\n<li><code>/target/release/lean-cache get</code></li>\n</ul>\n</li>\n</ul>",
        "id": 379337655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507574
    },
    {
        "content": "<p>Sorry, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could I have a hint about running this. I did a <code>cargo install --path .</code>, after which</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">61</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">004</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p>looks very healthy, but then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span> <span class=\"n\">get</span>\n<span class=\"n\">thread</span> <span class=\"bp\">'</span><span class=\"n\">main'</span> <span class=\"n\">panicked</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">workspace</span><span class=\"bp\">-</span><span class=\"n\">manifest</span> <span class=\"n\">hash</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"bp\">'</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">ext''</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">main.rs</span><span class=\"o\">:</span><span class=\"mi\">532</span><span class=\"o\">:</span><span class=\"mi\">5</span>\n<span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">run</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">`</span> <span class=\"n\">environment</span> <span class=\"kd\">variable</span> <span class=\"n\">to</span> <span class=\"n\">display</span> <span class=\"n\">a</span> <span class=\"n\">backtrace</span>\n<span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span> <span class=\"n\">get</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">63</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">004</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 379337738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507616
    },
    {
        "content": "<p>First step in compilation instructions need to be <code>cd lake-ext; lake update; lake build</code> (hyphen instead of underscore, add lake update).</p>",
        "id": 379338052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507751
    },
    {
        "content": "<p>In the later steps, should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">ext</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake_ext</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span> <span class=\"n\">get</span>\n</code></pre></div>",
        "id": 379338402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507892
    },
    {
        "content": "<p>just pushed some name changes so that it's <code>/lake-ext/build/bin/lake-ext</code> and <code>/target/release/lean-cache get</code> respectively</p>",
        "id": 379338562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507947
    },
    {
        "content": "<p>But with those changes, it runs and is instant.</p>",
        "id": 379338563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507948
    },
    {
        "content": "<p>how instant?</p>",
        "id": 379338673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507988
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"bp\">../</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span> <span class=\"n\">get</span>\n<span class=\"n\">Nothing</span> <span class=\"n\">to</span> <span class=\"k\">do</span>\n<span class=\"bp\">../</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">cache</span><span class=\"bp\">-</span><span class=\"n\">rs</span> <span class=\"n\">get</span>  <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">18</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">31</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">94</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">519</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 379338733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690508017
    },
    {
        "content": "<p>ah okay, yes <code>Nothing to do</code> is pretty fast, hopefully that part can be upstreamed to lake so that lake can also do it in less than 1s</p>",
        "id": 379338832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690508059
    },
    {
        "content": "<p>the main job there is the olean hash computation</p>",
        "id": 379338855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690508079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/379338052\">said</a>:</p>\n<blockquote>\n<p>First step in compilation instructions need to be <code>cd lake-ext; lake update; lake build</code> (hyphen instead of underscore, add lake update).</p>\n</blockquote>\n<p>this can be shorten to <code>lake -d lake-ext build -U</code></p>",
        "id": 379659097,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690588610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> has a change to the trace computation landed? I'm having issues with <code>lake exe cache get</code> (both the old one and new one) in mathport, the unpacked files have incorrect traces and are rebuilt by <code>lake build</code>. For example, <code>Std.Data.Option.Init.Lemmas</code> unpacked from the mathlib cache for commit <a href=\"https://github.com/leanprover-community/mathlib4/commit/6220e1d0219e245327c603be771b67aea0fdeb4d\">https://github.com/leanprover-community/mathlib4/commit/6220e1d0219e245327c603be771b67aea0fdeb4d</a> has a .trace file containing <code>17557947031058207531</code>, and I reliably get this number whether unpacking via <code>lake exe cache get</code>, but <code>lake build</code> wants the trace file to read <code>11933920017627886034</code> and rebuilds the file to make it so</p>",
        "id": 379660246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589244
    },
    {
        "content": "<p>It's not clear to me how this would happen since <code>lake exe cache get</code> isn't even doing its own trace computation, it uses the lake bundled with lean to build the files</p>",
        "id": 379660337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I haven't changed Lake in almost a month; however, the Lake in Lean was bumped to the latest prerelease when it was merged into the Lean repo a week ago. If the behavior is less than a week new, then nothing has changed that I know of. Otherwise, it is possible I accidently broke something as Lake does not have rich trace tests,  but no intentional changes come to mind.</p>",
        "id": 379660550,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690589462
    },
    {
        "content": "<p>hm, I just tried the same test in mathlib itself, and both <code>lake build</code> and <code>lake exe cache get</code> agree that <code>lake-packages/std/build/lib/Std/Data/Option/Init/Lemmas.trace</code> should contain <code>17557947031058207531</code></p>",
        "id": 379660681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589548
    },
    {
        "content": "<p>so maybe lake's trace depends on an aspect of the parent project?</p>",
        "id": 379660744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589598
    },
    {
        "content": "<p>Possibly</p>",
        "id": 379660866,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690589645
    },
    {
        "content": "<p>aha, mathlib bumped its lean-toolchain, mathport was on 07-15 instead of 07-24</p>",
        "id": 379660922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589676
    },
    {
        "content": "<p>although that's a bit sad, lake used to be more forgiving about slight mismatches in lean version as long as everything builds but if it's in the hash then everything has to exactly match</p>",
        "id": 379661191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690589820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/379661191\">said</a>:</p>\n<blockquote>\n<p>although that's a bit sad, lake used to be more forgiving about slight mismatches in lean version as long as everything builds but if it's in the hash then everything has to exactly match</p>\n</blockquote>\n<p>Lake can build across different <code>lean-toolchain</code> (i.e., a root package and dependency can have different toolchains and Lake will use the root's without complaint). However, builds themselves are meant to be as locked and reproducible as possible, so any change in the significant configuration (like the Lean version) causes a rebuild.</p>",
        "id": 379664875,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690591432
    },
    {
        "content": "<p>In fact, when Lake was not properly doing this, that was filed as a bug (e.g., <a href=\"https://github.com/leanprover/lake/pull/26\">!lake#26</a>, <a href=\"https://github.com/leanprover/lake/pull/62\">!lake#62</a>).</p>",
        "id": 379665295,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690591605
    },
    {
        "content": "<p>This basically means that build caching is impossible when you have diamond issues in your dependencies</p>",
        "id": 379666667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690592189
    },
    {
        "content": "<p>that is, any lean version bump is \"semver breaking\" and you have to make sure all deps update in lock-step</p>",
        "id": 379666861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690592276
    },
    {
        "content": "<p>which is a major challenge if you have a rarely updated dep of a frequently updated package, like <code>proofwidgets -&gt; mathlib</code></p>",
        "id": 379667084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690592350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lean-cache.3A.20lake.20exe.20cache.20rewrite/near/379666667\">said</a>:</p>\n<blockquote>\n<p>This basically means that build caching is impossible when you have diamond issues in your dependencies</p>\n</blockquote>\n<p>Yes, hence  <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's first <a href=\"https://github.com/leanprover/lake/issues/153#issuecomment-1419713252\">comment</a> in the original cache RFC for Lake:</p>\n<blockquote>\n<p>The opportunity to reuse caches from <code>std4</code> is extremely limited, since the Lean toolchain versions need to match up exactly.</p>\n</blockquote>",
        "id": 380113375,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690743863
    },
    {
        "content": "<p>The only reason it works for mathlib is because deps are downstream packages mirror mathlib's toolchain. Outside mathlib, <code>cache</code> generally will miss.</p>",
        "id": 380113538,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690743923
    },
    {
        "content": "<p>This is why I have often noted that <code>cache</code> does not generalize well outside mathlib.</p>",
        "id": 380113799,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690744034
    },
    {
        "content": "<p>It is also important to note that this is not just a Lake limitation, Lean can segfault easily if it loads oleans from a different toolchain version.</p>",
        "id": 380114326,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690744255
    },
    {
        "content": "<p>To make caching generally feasible, Lean needs to have infrequent versioned milestone releases that project can reasonably be regularly updated to and their builds cached. Or, we need a spacious centralized build repository were multiple machines can automatically upload builds for every nightly / toolchain version.</p>",
        "id": 380114758,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690744425
    },
    {
        "content": "<p>I'd like to make some more progress on this. <code>lean-cache</code> is now working with a built-in curl (so no more <code>curl --parallel</code> issues) and the nothing-to-download case is about 120ms, which is acceptably fast to use as a pre-build step for other tools.</p>\n<p>The next step is distribution, and this is more challenging than for <code>leantar</code> because the program isn't running through lake, it's a standalone executable. (We can of course set up <code>lake exe cache</code> to be a wrapper which downloads and runs <code>lean-cache</code>, possibly even doing version management like it is doing for leantar, but this would bring back a lot of the performance issues. I would prefer users run <code>lean-cache</code> directly.) It would be great if elan could manage versions of lean-cache as well and putting it in the path, but I don't know if that is possible without bundling it into lean4 repo. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> thoughts?</p>",
        "id": 387570022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693181051
    },
    {
        "content": "<p>If it becomes a pre-build step, we've already paid the Lake startup cost, no?</p>",
        "id": 387661047,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693226607
    },
    {
        "content": "<p>yes, although the lake startup cost is not well distributed, any time you call lake you have to pay it again, and it's difficult for lean-cache to benefit from that time spent</p>",
        "id": 387661467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226764
    },
    {
        "content": "<p>lean-cache still needs lake sometimes, when there is a change to the lakefile or build configuration, and currently this is being handled by a second executable which links to lake and just writes the workspace configuration to disk so that lean-cache can make use of it</p>",
        "id": 387661824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226889
    },
    {
        "content": "<p>it would be great if lake could subsume that tool</p>",
        "id": 387661868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226905
    },
    {
        "content": "<p>otherwise I will have to decide whether to try to merge lean-cache and lake-ext by linking lean+lake into lean-cache, or else ship two binaries and have double the distribution fun</p>",
        "id": 387662017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226956
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 387662186,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693227008
    },
    {
        "content": "<p>I'm also considering writing a lake-lite utility, which parses lakefiles directly (without lean) and recognizes some common patterns. If it can be made to cover a significant fraction of lakefiles in the wild, then I think it could cut processing time by 10x, because most of the time there is spent in lean initialization, building simp sets and other nonsense</p>",
        "id": 387662453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693227121
    },
    {
        "content": "<p>and we can always fall back on full lake if the lakefile is complex</p>",
        "id": 387662631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693227163
    },
    {
        "content": "<p>I wonder how likely it is that the lean ecosystem will go the same way as Haskell’s – starting with a build description (<code>Setup.hs</code>) in our new language (because it’s a great language, so let’s use it), to later notice that non-declarative build descriptions stand in the way of many features, so a (non-executable) description for the 90% case emerges, until in a few years hardly anybody remembers that <code>Setup.hs</code>, but it’s complexity keeps haunting the ecosystem :-)</p>",
        "id": 387716136,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693242367
    },
    {
        "content": "<p>That's the Python story as well, though we remember setup.py because of how badly it tortured us.</p>",
        "id": 387748933,
        "sender_full_name": "Julian Berman",
        "timestamp": 1693253480
    },
    {
        "content": "<p>(The baroque atrocities of <code>.sbt</code> files you would encounter in every Scala project was part of what drove me away from Scala, years ago. The ASCII art in build files didn't help either.)</p>",
        "id": 387788655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693273245
    },
    {
        "content": "<p>I feel that Rust's build system is pretty well-designed: the <code>Cargo.toml</code> file is a declarative description of how to compile a given crate, and you can add a <code>build.rs</code> file (which can even have its own dependencies) to run arbitrary code at build time, e.g. compiling and linking C libraries.</p>",
        "id": 388095704,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693398740
    }
]