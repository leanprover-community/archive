[
    {
        "content": "<p><strong>Advertisement</strong> New tactic landed in mathlib for your convenience!</p>\n<p>When explaining a proof to a human on a blackboard, surely you have often underbraced some subterm, written a different, but equal term below it, explained to your audience why they are equal, and then continued the proof with the changed term?</p>\n<p>You can now do the same when explaining a proof to lean. Have a large proof goal, and somewhere inside an expression that you’d like to replace with something else that provably equal? Write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…;</span> <span class=\"n\">equals</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">tactics</span>\n</code></pre></div>\n<p>to do so. After <code>conv =&gt;</code> you can use the usual conv tactics to focus the expression you care about (e.g. using <code>left; right; left; left</code>, or <code>in (_ + _)</code> to find a matching expression).  Then you write the expression you want that to be equal to, and after the <code>=&gt;</code> an (indented) proof of the equality.</p>\n<p>It’s a bit like using <code>convert_to</code>, but without having to repeat all the context of the expression you want to change.</p>\n<p>It's also related to the <code>rw</code> conv tactic, which you would use if you know the lemma to rewrite with and don't want to type in the new term. After<code>equals</code>, in contrast, the subgoal is fully known, so a good start for closing tactics like <code>ring</code> or <code>simp</code> etc.</p>\n<p>The tactic was added to std4 in <a href=\"https://github.com/leanprover/std4/pull/204\">std4#204</a>.<br>\nMathlib docs PR at  <a href=\"https://github.com/leanprover-community/mathlib4/pull/6747\">mathlib4#6747</a></p>",
        "id": 386658768,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692724499
    },
    {
        "content": "<p>Very helpful thank you, I have wanted exactly this in the past!</p>",
        "id": 386715316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692749412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20conv.20.3D.3E.20.E2.80.A6.20equals.20tactic/near/386658768\">said</a>:</p>\n<blockquote>\n<p>It’s a bit like using <code>convert_to</code>, but without having to repeat all the context of the expression you want to change.</p>\n</blockquote>\n<p>In particular, <code>convert_to e; tactics...</code> is like doing <code>conv =&gt; equals e =&gt; congr!; tactics...</code></p>",
        "id": 386720071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692751437
    },
    {
        "content": "<p>(Re the self-note, those are the mathlib3 docs. I think you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html\">https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html</a>)</p>",
        "id": 386720347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692751524
    },
    {
        "content": "<p>Ah, right. Sometimes google sends me the wrong way. Maybe the mathlib3 docs could use a banner on top saying warning that one is looking at old stuff?</p>",
        "id": 386770611,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692772236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20conv.20.3D.3E.20.E2.80.A6.20equals.20tactic/near/386658768\">said</a>:</p>\n<blockquote>\n<p><strong>Advertisement</strong> New tactic landed in mathlib for your convenience!</p>\n<p>When explaining a proof to a human on a blackboard, surely you have often underbraced some subterm, written a different, but equal term below it, explained to your audience why they are equal, and then continued the proof with the changed term?</p>\n<p>You can now do the same when explaining a proof to lean. Have a large proof goal, and somewhere inside an expression that you’d like to replace with something else that provably equal? Write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…;</span> <span class=\"n\">equals</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">tactics</span>\n</code></pre></div>\n<p>to do so. After <code>conv =&gt;</code> you can use the usual conv tactics to focus the expression you care about (e.g. using <code>left; right; left; left</code>, or <code>in (_ + _)</code> to find a matching expression).  Then you write the expression you want that to be equal to, and after the <code>=&gt;</code> an (indented) proof of the equality.</p>\n<p>It’s a bit like using <code>convert_to</code>, but without having to repeat all the context of the expression you want to change.</p>\n<p>It's also related to the <code>rw</code> conv tactic, which you would use if you know the lemma to rewrite with and don't want to type in the new term. After<code>equals</code>, in contrast, the subgoal is fully known, so a good start for closing tactics like <code>ring</code> or <code>simp</code> etc.</p>\n<p>The tactic was added to std4 in <a href=\"https://github.com/leanprover/std4/pull/204\">std4#204</a>.<br>\nMathlib docs PR at  <a href=\"https://github.com/leanprover-community/mathlib4/pull/6747\">mathlib4#6747</a></p>\n</blockquote>\n<p>Can you provide a small mwe, perhaps also in the docs?</p>",
        "id": 387252173,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1692959890
    },
    {
        "content": "<p>My creativity so far failed to come up with something small, but plausible and convincing. Once I have an idea (or someone else provides a nice example), sure!</p>",
        "id": 387264174,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692965305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> The tactic at least <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/Basic.lean#L155\">has an example</a> in its docstring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">-</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">equals</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- current goal: ⊢ n - n = 0</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_self</span>\n  <span class=\"c1\">-- current goal: P (fun n =&gt; 0)</span>\n</code></pre></div>",
        "id": 387265704,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692965969
    },
    {
        "content": "<p>there is also a test file: <a href=\"https://github.com/leanprover/std4/blob/main/test/conv_equals.lean\">https://github.com/leanprover/std4/blob/main/test/conv_equals.lean</a></p>",
        "id": 387265903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692966038
    },
    {
        "content": "<p>Maybe the list of tactics in <a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html\">https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html</a> should all include links to the corresponding tactic’s docstring, i.e. to <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Basic.html#Std.Tactic.Conv.equals\">https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Basic.html#Std.Tactic.Conv.equals</a></p>",
        "id": 387269345,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692967391
    },
    {
        "content": "<p>If you put <code>Std.Tactic.Conv.equals</code> into the <code>Conv.Guide</code> docs then it should auto-link. It's resilient against future refactorings unfortunately though</p>",
        "id": 387270217,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692967776
    },
    {
        "content": "<p>Can I link to it while controlling the link text? Users shouldn’t have to see that module prefix.<br>\n(Also the <code>rfl</code> tactic links to <code>Prelude.rfl</code>…)</p>",
        "id": 387274927,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692969607
    },
    {
        "content": "<p>I wish there were different syntax classes for the docs, so for example <code> tactic`exact foo` </code> might be how you keep the linkifier from trying to turn all the identifiers into links</p>",
        "id": 387277168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692970467
    },
    {
        "content": "<p>I don't know of a way to control the text for an link to an identifier, short of giving a full URL...</p>",
        "id": 387277395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692970561
    }
]