[
    {
        "content": "<p>The following code snippet works as you expect</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--import Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n<span class=\"c1\">--set_option trace.Meta.isDefEq true in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But uncommenting the <code>import Mathlib</code> makes elaborating the example very slow. Uncommenting also the tracing line makes Lean <em>very</em> slow because it tries to generate huge traces, full of completely crazy unification tasks  like <code>SlashInvariantFormClass ℝ ?m.138 ?m.139 =?= SlashInvariantFormClass ?m.153 ?m.154 ?m.155 </code>.</p>",
        "id": 399561602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698770342
    },
    {
        "content": "<p>This is related to the exponential function. Removing all <code>exp</code> kills the issue. So it seems that importing modular forms make <code>Real.exp</code> crazily slow.</p>",
        "id": 399561888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698770463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span></p>",
        "id": 399562025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698770515
    },
    {
        "content": "<p>Oh thats really weird.  When making the <code>SlashInvariantFormClass</code> I  had basically copied what was done for <del>Schwartz functions</del> <code>FunLike</code> and <code>ContinuousMapClass</code>  (if I remember correctly), so I dont know why this would cause problems and not that</p>",
        "id": 399566699,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1698772091
    },
    {
        "content": "<p>The only place where <code>Real.exp</code> shows up in the Modular forms folder is in the JacobiTheta files, but I don't know why that would make it look for <code>SlashInvariantFormClass</code> instances (if thats what its doing)</p>",
        "id": 399569306,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1698773036
    },
    {
        "content": "<p>As an aside, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SlashInvariantFormClass#doc\">docs#SlashInvariantFormClass</a> seems to have dropped all the arguments to <code>FunLike</code> on the floor:</p>\n<p><a href=\"/user_uploads/3121/FjPbw-Z6UHMZCYiUk622qNln/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FjPbw-Z6UHMZCYiUk622qNln/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FjPbw-Z6UHMZCYiUk622qNln/image.png\"></a></div>",
        "id": 399569525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698773123
    },
    {
        "content": "<p>Eric, I think that happens with everything. e.g., <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CommRing#doc\">docs#CommRing</a> (it says \"extends Ring\" not \"extends Ring α\")</p>",
        "id": 399570300,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698773438
    },
    {
        "content": "<p>We need more integration tests, i.e. files in <code>test/</code> that <code>import Mathlib</code> and then do basic stuff, guarded by a timer.</p>",
        "id": 399618566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698793945
    }
]