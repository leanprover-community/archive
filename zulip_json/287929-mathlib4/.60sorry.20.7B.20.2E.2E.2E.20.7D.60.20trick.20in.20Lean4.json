[
    {
        "content": "<p>Is there a similar method to the <code>sorry { ... }</code> trick for temporarily speeding up proofs in lean4? If we're now starting proofs with <code>·</code>s, I don't see how we could do a similar thing unless there's some special syntax support.</p>",
        "id": 327282293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676135059
    },
    {
        "content": "<p>Does <code>save</code> work?</p>",
        "id": 327283248,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676135563
    },
    {
        "content": "<p>how would I use <code>save</code>?</p>",
        "id": 327283667,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676135784
    },
    {
        "content": "<p>Here's an option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.ElabRules</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"skipThis\"</span> <span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"skipThis\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- so you can use skipThis as a sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skipThis</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 327283817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676135852
    },
    {
        "content": "<p>Of course the point is to use it for proofs that are correct (or incomplete), but this is just demonstrating that it's not executing the rest of the proof.</p>",
        "id": 327283940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676135904
    },
    {
        "content": "<p>You can also use this in place of the <code>·</code></p>",
        "id": 327284005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676135954
    },
    {
        "content": "<p>Maybe this is better than having two <code>macro</code> lines like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">optional</span> <span class=\"n\">tacticSeq</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"skipCase\"</span> <span class=\"n\">Lean.Parser.Tactic.tacticSeq</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skipCase</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">skipCase</span>\n    <span class=\"c1\">-- some nonsense</span>\n    <span class=\"n\">apply</span> <span class=\"n\">iff.mpr</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 327284604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676136306
    },
    {
        "content": "<p>I like this new option, it is easy to put in/remove</p>",
        "id": 327285625,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676136816
    },
    {
        "content": "<p>we should put something of the sort in mathlib</p>",
        "id": 327285639,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676136823
    },
    {
        "content": "<p>A good way to answer \"how do I spell X in lean 4\" is to look at what mathport does. The <code>sorry</code> tactic is translated <a href=\"https://github.com/leanprover-community/mathport/blob/e898d4a1467fae2a9941c37081d8fff5041d617c/Mathport/Syntax/Translate/Tactic/Lean3.lean#L205\">here</a>, and in particular <code>sorry { ... }</code> is translated to <code>stop ...</code> using the <a href=\"https://github.com/leanprover/lean4/blob/60f30addc7b3a9c03e3bb12a2f590f07eb6d102c/src/Init/Tactics.lean#L652-L658\"><code>stop</code> tactic</a> from lean 4.</p>",
        "id": 327316627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676158893
    },
    {
        "content": "<p>I came to this realisation later today when checking for <code>clear_dependent</code> (the nice <code>clear!</code> in lean4!)</p>",
        "id": 327316861,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676159097
    }
]