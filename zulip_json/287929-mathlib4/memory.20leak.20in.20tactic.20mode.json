[
    {
        "content": "<p>I've been occasionally encountering problems while writing proofs where my memory usage will increase over the course of a couple of minutes even with no user input, and I need to restart VSCode otherwise my computer softlocks from trying to move all of the memory to my HDD. The leak is consistent - if I restart VSCode and don't change my proof, the same leak will occur. I have no idea how to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, does anyone else have this issue?<br>\n<a href=\"/user_uploads/3121/FH19iRoRABo7-H3rq5pxfVh6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FH19iRoRABo7-H3rq5pxfVh6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/FH19iRoRABo7-H3rq5pxfVh6/image.png\"></a></div>",
        "id": 387256435,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692961716
    },
    {
        "content": "<p>Even if I replace the proof with <code>sorry</code> it seems like some background <code>lean.exe</code> task is continuing to process anyway and use up memory.</p>",
        "id": 387256681,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692961829
    },
    {
        "content": "<p>What is the smallest / simplest file you see this behaviour on? (an empty file, a file with one check statement, a file with one nontrivial proof, a file with an import, a file importing something from mathlib, etc.) thats the way to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to help isolate this</p>",
        "id": 387257261,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692962106
    },
    {
        "content": "<p>I've only encountered this problem in one file, in a pretty large project, pulling in quite a few imports. The proofs heavily depend on Lean unifying a lot of things.</p>",
        "id": 387257449,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692962183
    },
    {
        "content": "<p>That's why I'm mostly asking if anyone else has the same problem, at least to find mitigations.</p>",
        "id": 387257474,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692962197
    },
    {
        "content": "<p>My lean/vscode does eat a lot of memory, I never stopped to observe if there was a clear leak like this, but I normally keep a terminal open somewhere ready to type <code>pkill lean</code> if the computer gets choppy.</p>",
        "id": 387257937,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692962420
    },
    {
        "content": "<p>Is this Lean 3 or Lean 4? I only ask because I know you've been working on a Lean 3 project for a while.</p>",
        "id": 387258452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692962672
    },
    {
        "content": "<p>Lean 4 - I'm almost done porting the project in question to Lean 4 and this is stopping me from finishing it.</p>",
        "id": 387259222,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692963031
    },
    {
        "content": "<p>I can work around the problem somewhat by being very careful with when I tell Lean to unify complicated things. But I'm not sure why there's some background process running when I've already killed the proof term.</p>",
        "id": 387259341,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692963106
    },
    {
        "content": "<p>I feel like I'm playing a game against a time bomb, I only get about 3 minutes of programming time before everything needs a reset (which takes about 2 minutes).</p>",
        "id": 387265416,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692965856
    },
    {
        "content": "<p>In that case I really think it would be worth your time to try to find a mwe so someone can try and diagnose and suggest workarounds or maybe even fix this</p>",
        "id": 387266156,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692966132
    },
    {
        "content": "<p>I believe that the hanging only occurs when a subgoal is closed, regardless whether an actual proof or just a <code>sorry</code> was given. If I solve the goal then insert another tactic (which Lean complains about, since there are no goals), the program does not hang.</p>",
        "id": 387279995,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692971507
    },
    {
        "content": "<p>Is Lean perhaps trying to unify the type of its generated proof term with my problem statement, and running into some kind of loop?</p>",
        "id": 387280159,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692971537
    },
    {
        "content": "<p>The problem's fixed. I added in a <code>change</code> that wasn't needed in Lean 3, but adding it seems to satisfy the new kernel. I think the defeq checking was being a bit too powerful or something?</p>",
        "id": 387287476,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692973365
    },
    {
        "content": "<p>Sorry I couldn't make a mwe, if I get this problem in a simpler context I'll see what's possible.</p>",
        "id": 387287529,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692973383
    },
    {
        "content": "<p>Is there a way to limit how much memory Lean 4 is using like we could in Lean 3? I've also experienced memory leaks like this</p>",
        "id": 387332191,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692991435
    },
    {
        "content": "<p>I don't seem to experience this problem on Linux, only Windows.</p>",
        "id": 387343763,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692997482
    },
    {
        "content": "<p>This is happening while you're editing the proof in VSCode, right? We certainly had a problem in the past that old elaborations were not being killed as you kept typing, and I forget if this still happens or has been definitively fixed. This can result in linear (in keystrokes, essentially) growth of memory and CPU demand up until the point that old elaborations start finishing (assuming they ever do).</p>",
        "id": 387347454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692999848
    },
    {
        "content": "<p>This sounds exactly like what's happening!</p>",
        "id": 387350431,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693001835
    },
    {
        "content": "<p>Although the memory would keep increasing even with no user input once I'd typed a certain prompt that caused it to loop infinitely in the background. I'm not sure if that'ssomething you've observed in that case too?</p>",
        "id": 387350516,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693001891
    },
    {
        "content": "<p>I have seen in general that as I keep editing a proof (in Windows, I don't know if this happens on Linux), my memory usage goes up, but once the definition is certified the memory usage seems to drop.</p>",
        "id": 387350558,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693001938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/287929-mathlib4/topic/memory.20leak.20in.20tactic.20mode/near/387332191\">said</a>:</p>\n<blockquote>\n<p>Is there a way to limit how much memory Lean 4 is using like we could in Lean 3? I've also experienced memory leaks like this</p>\n</blockquote>\n<p>I assume you're asking for Windows, but on Linux I use cgroups to limit the total amount of memory all Lean processes together are allowed to use: <a href=\"#narrow/stream/113488-general/topic/Elan.20cgroup.20hacks\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Elan.20cgroup.20hacks</a></p>",
        "id": 387402610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1693038230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/memory.20leak.20in.20tactic.20mode/near/387347454\">said</a>:</p>\n<blockquote>\n<p>We certainly had a problem in the past that old elaborations were not being killed as you kept typing, and I forget if this still happens or has been definitively fixed.</p>\n</blockquote>\n<p>No, that hasn't been addressed yet</p>",
        "id": 387404168,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693039473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/memory.20leak.20in.20tactic.20mode/near/387402610\">said</a>:</p>\n<blockquote>\n<p>on Linux I use cgroups to limit the total amount of memory all Lean processes together are allowed to use</p>\n</blockquote>\n<p>I use Linux as well, thanks for the suggestion!</p>",
        "id": 387407663,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693042113
    }
]