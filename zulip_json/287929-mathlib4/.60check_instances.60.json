[
    {
        "content": "<p>I just pushed <a href=\"https://github.com/leanprover-community/mathlib4/pull/5516\">#5516</a>, which provides a <code>check_instances</code> tactic. It attempts to resynthesize every typeclass in the main goal, reporting:</p>\n<ul>\n<li><span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> failure</li>\n<li><span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> not defeq</li>\n<li><span aria-label=\"yellow circle\" class=\"emoji emoji-1f7e1\" role=\"img\" title=\"yellow circle\">:yellow_circle:</span> defeq but not under <code>withReducibleAndInstances</code></li>\n<li><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> defeq under <code>withReducibleAndInstances</code> or syntactically identical</li>\n</ul>",
        "id": 369911208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687843709
    },
    {
        "content": "<p>Once I have oleans I'm planning on seeing if it is any help diagnosing <code>simp</code> problems. :-)</p>",
        "id": 369911298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687843739
    },
    {
        "content": "<p>It'd be neat also having a tactic that resynthesizes every typeclass in the main goal, creating a new expression, and if it's type correct then use <code>convert_to</code>. Maybe <code>norm_instances</code> or <code>resynth_instances</code>? This would mostly be helpful for <code>Fintype</code> and <code>Decidable</code> instances, which are subsingletons.</p>",
        "id": 369914196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687844638
    }
]