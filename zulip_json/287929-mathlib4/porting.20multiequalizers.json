[
    {
        "content": "<p>If anyone is bored, the following porting PR still has a few sorries to take care of (and I have to run for a little while): <a href=\"https://github.com/leanprover-community/mathlib4/pull/2786\">!4#2786</a></p>",
        "id": 340937439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678473310
    },
    {
        "content": "<p>This is the last dependency we need for the grothendieck topologies file :)</p>",
        "id": 340937865,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678473443
    },
    {
        "content": "<p>I've just done 7 hours of project orals so this would be a welcome break :-)</p>",
        "id": 340940132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678474055
    },
    {
        "content": "<p>Trying to debug failing <code>simp</code> calls is really annoying when <code>simp only [X]</code> can do nothing without erroring. Did nobody open an issue for this in core? When is it ever a good thing to have <code>simp</code> silently do nothing and not let the user know? I can only see \"who cares\" situations and \"this is annoying\" situations</p>",
        "id": 340946488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678475982
    },
    {
        "content": "<p>Right now I am deciding whether to go down the rabbithole of working out why a <code>simp</code> is failing or whether I should just copy the output of mathlib3 <code>squeeze_simp</code> and move on (i.e. I've fixed the first sorry but I want to know why <code>simp</code> was failing anyway)</p>",
        "id": 340946698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678476048
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2145\">lean4#2145</a> FWIW. I think that what's going on in this file is that we have a non-confluent <code>simp</code> set and we were just lucky in mathlib3 (the first sorry Adam left is where <code>simp</code> worked in mathlib3 but not in mathlib4). I'm trying to confluentize it (so basically I have been totally derailed :-) )</p>",
        "id": 340951972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678477759
    },
    {
        "content": "<p>OK so moving on, in mathlib3 <code>category_theory.limits.shapes.products</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A cofan over `f : β → C` consists of a collection of maps from every `f b` to an object `P`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cofan.mk</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cofan</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">X.as</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and <code>@[simps?]</code> tells me that this generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cofan.mk_ι_app</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">cofan.mk</span> <span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ι.app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">X.as</span>\n</code></pre></div>\n<p>In mathlib4 we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cofan.mk</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"n\">f</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n  <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">Discrete.natTrans</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">X.as</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and <code>whatsnew in</code> tells me that this generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Limits.Cofan.mk_ι.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Cofan.mk</span> <span class=\"n\">P</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ι</span> <span class=\"bp\">=</span> <span class=\"n\">Discrete.natTrans</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">X.as</span>\n</code></pre></div>\n<p>which doesn't look the same to me. Is this apparent divergence in the behaviour of <code>@[simps]</code> expected behaviour?</p>",
        "id": 340962717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678481615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20multiequalizers/near/340937439\">said</a>:</p>\n<blockquote>\n<p>If anyone is bored, the following porting PR still has a few sorries to take care of (and I have to run for a little while): <a href=\"https://github.com/leanprover-community/mathlib4/pull/2786\">!4#2786</a></p>\n</blockquote>\n<p>It's sorry-free and pushed :D</p>",
        "id": 340963837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678482046
    },
    {
        "content": "<p>I fixed the long lines; what is the current policy regarding giving docstrings to constructors for inductive types? IIRC Reid was arguing that no docstring was better than moronic \"it is obbious what this is and I only wrote this docstring to satisfy the linter\" docstrings.</p>",
        "id": 340964457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678482316
    },
    {
        "content": "<p>Don't know if it is official policy. I've been <code>inherit_doc</code>ing these instead of <code>nolint docBlame</code>ing.</p>",
        "id": 340964695,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678482427
    },
    {
        "content": "<p>Previously I was doing the moronic thing</p>",
        "id": 340964743,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678482449
    },
    {
        "content": "<p>Some of the notation in category theory is pretty terse and uninformative. Ideally, I'd like to see something about the fields in the overall docstring.</p>",
        "id": 340965074,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678482604
    },
    {
        "content": "<p>I think that what Reid was objecting to was people porting stuff they didn't really understand, and adding content-free docstrings just to shut the linter up. Perhaps we can do better here.</p>",
        "id": 340966503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678483172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20multiequalizers/near/340963837\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20multiequalizers/near/340937439\">said</a>:</p>\n<blockquote>\n<p>If anyone is bored, the following porting PR still has a few sorries to take care of (and I have to run for a little while): <a href=\"https://github.com/leanprover-community/mathlib4/pull/2786\">!4#2786</a></p>\n</blockquote>\n<p>It's sorry-free and pushed :D</p>\n</blockquote>\n<p>Thanks Kevin! I'm going to start on grothendieck topologies now :)</p>",
        "id": 340969355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678484230
    },
    {
        "content": "<p>This turned out to be quite straightforward: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2795\">!4#2795</a></p>",
        "id": 340980473,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678488607
    },
    {
        "content": "<p>There was something strange though. On <a href=\"https://github.com/leanprover-community/mathlib4/blob/f20e3571947db11b2b0801a7bc177fc0be9a97ba/Mathlib/CategoryTheory/Sites/Grothendieck.lean#L679\">this line</a> if I instead use the slightly more concise </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pullback</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J.Cover</span> <span class=\"n\">X</span> <span class=\"bp\">⥤</span> <span class=\"n\">J.Cover</span> <span class=\"n\">Y</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">S.pullback</span> <span class=\"n\">f</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Sieve.pullback_monotone</span> <span class=\"n\">_</span> <span class=\"n\">f.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n</code></pre></div>\n<p>then lean complains that I should tag this def as noncomputable and the declarations that follow (<code>pullbackId</code> and <code>pullbackComp</code>) get a strange error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">CategoryTheory.GrothendieckTopology.pullbackId._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">CategoryTheory.GrothendieckTopology.pullback'</span>\n</code></pre></div>\n<p>By writing <code>homOfLE ...</code> instead, lean is perfectly happy.</p>",
        "id": 340980837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678488784
    }
]