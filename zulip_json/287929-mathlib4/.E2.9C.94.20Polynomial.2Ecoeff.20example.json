[
    {
        "content": "<p>Still writing MIL, I'm trying to discuss trivial examples of polynomials but I can't prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and I really hoped the proof would be <code>by simp</code> or <code>by norm_num</code>.</p>",
        "id": 395334500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696629793
    },
    {
        "content": "<p>Have you thought of adding <code>[Nontrivial R]</code>?</p>",
        "id": 395334702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696629894
    },
    {
        "content": "<p>Your example is still true for the zero ring (unless I'm missing something?) but I suspect the API might be expecting nontriviality in places.</p>",
        "id": 395334769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696629955
    },
    {
        "content": "<p>What if you use <code>C 2</code> and remove from <code>simp</code> the conversion to the numeral?</p>",
        "id": 395334931,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696630070
    },
    {
        "content": "<p>I think that the API for numerals around polynomials in mathlib has not adapted entirely to the new coercion system.</p>",
        "id": 395335029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696630129
    },
    {
        "content": "<p><code>import Mathlib.Data.Polynomial.Coeff</code> might also help</p>",
        "id": 395335082,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696630164
    },
    {
        "content": "<p>Ah, well-spotted!  I am on mobile and did not even look at imports!</p>",
        "id": 395335209,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696630230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Coeff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">R</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_ofNat</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_ofNat</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_C_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">coeff_C_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 395335437,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696630417
    },
    {
        "content": "<p>For polynomials, the fact that <code>map_ofNat</code> is simp causes more problems than it solves.  I suspect that simp confluence in this area should be revised.</p>",
        "id": 395335920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696630790
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Coeff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"n\">OfNat</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeff_natCast_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coeff_monomial</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_natCast_succ</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coeff_ofNat_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">a.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">coeff_monomial</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_ofNat_succ</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.cast_eq_ofNat</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 395336189,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696630986
    },
    {
        "content": "<p>(Feel free to PR; I expect to have forgotten about this in the morning)</p>",
        "id": 395336408,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696631165
    },
    {
        "content": "<p>Thank you very much to both of you!</p>",
        "id": 395336591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696631326
    },
    {
        "content": "<p>I will PR right away.</p>",
        "id": 395336599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696631332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> can you explain the role of <code>no_index</code> in your code?</p>",
        "id": 395337250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696631856
    },
    {
        "content": "<p>I can see experimentally that it's needed, and this explain why my own attempt hasn't been successful, but it looks like dark magic.</p>",
        "id": 395337536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696632061
    },
    {
        "content": "<p>Same here. I searched through mathlib to figure out how exactly theorems about ofNat need to be written, and they all had that</p>",
        "id": 395337657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696632143
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7557\">#7557</a></p>",
        "id": 395337679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696632172
    },
    {
        "content": "<p>While you're here, do you know why I can find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.natDegree_comp#doc\">docs#Polynomial.natDegree_comp</a> but not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degree_comp%3F#doc\">docs#Polynomial.degree_comp?</a></p>",
        "id": 395337783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696632270
    },
    {
        "content": "<p>While you're here, I have this lemma that was also missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sum_comp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.eval₂_finset_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Feel free to PR it</p>",
        "id": 395337922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696632366
    },
    {
        "content": "<p>Are you sure this should be a simp lemma?</p>",
        "id": 395338364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696632730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Polynomial.2Ecoeff.20example/near/395337783\">said</a>:</p>\n<blockquote>\n<p>While you're here, do you know why I can find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.natDegree_comp#doc\">docs#Polynomial.natDegree_comp</a> but not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degree_comp%3F#doc\">docs#Polynomial.degree_comp?</a></p>\n</blockquote>\n<p>Nevermind, I had the wrong convention for multiplication in <code>WithBot</code>.</p>",
        "id": 395338829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696633183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Polynomial.2Ecoeff.20example/near/395338364\">said</a>:</p>\n<blockquote>\n<p>Are you sure this should be a simp lemma?</p>\n</blockquote>\n<ol>\n<li>It is a distributivity PR with the same amount of occurrences of each free variable in the LHS and RHS</li>\n<li>Two of my simp calls got stuck exactly there</li>\n</ol>",
        "id": 395380374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696660771
    },
    {
        "content": "<p>I thought we were meant to have a tactic for coefficients?</p>",
        "id": 395395559,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696670837
    },
    {
        "content": "<p>Wasn't that for degrees?</p>",
        "id": 395395975,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696671122
    },
    {
        "content": "<p>For degrees, <code>compute_degree</code> already exists.</p>",
        "id": 395396135,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696671238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> has marked this topic as resolved.</p>",
        "id": 395458698,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696717149
    },
    {
        "content": "<p>I had to write a simp set to do something like what the OP is asking for MvPolynomials for my SNARKs project. It's still in lean 3, but it's <a href=\"https://github.com/BoltonBailey/formal-snarks-project/blob/master/src/attributes.lean\">here</a> if that's useful.</p>",
        "id": 395478303,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696732297
    },
    {
        "content": "<p>14 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/writing.20lemmas.20about.20.02klzzwxh.3A0000.03\">#mathlib4 &gt; writing lemmas about <code>ofNat</code></a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 401399683,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699630094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 401399862,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699630157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 401399888,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699630171
    }
]