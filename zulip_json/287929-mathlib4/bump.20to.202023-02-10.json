[
    {
        "content": "<p>There has been a merge of the 2003 PR.  If anybody is overly motivated to work on the bump, feel free to start or steal from <a href=\"https://github.com/leanprover-community/mathlib4/compare/bump2003?expand=1\">my branch</a>.</p>",
        "id": 326963306,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676001589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> do you by chance have a branch somewhere that bumps (parts of) mathlib4?</p>",
        "id": 326975097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676011511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks for merging 2003! That's awesome!</p>",
        "id": 326975132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676011546
    },
    {
        "content": "<p>I think I didn't make much progress beyond Gabriel's <code>bump2003</code></p>",
        "id": 326982610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676015040
    },
    {
        "content": "<p>Ok, then I'll continue with <code>bump2003</code></p>",
        "id": 326982914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676015155
    },
    {
        "content": "<p>Ooh, we need to wait for the release of the nightly anyways</p>",
        "id": 326984370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676015718
    },
    {
        "content": "<p>nightly released</p>",
        "id": 326992408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676018631
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2188\">https://github.com/leanprover-community/mathlib4/pull/2188</a></p>",
        "id": 327023440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676028170
    },
    {
        "content": "<p>Mathlib is building. There were a few regressions, but in total, I don't think it was bad at all.</p>",
        "id": 327023493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676028189
    },
    {
        "content": "<p>Cumulative profile (edit: ignore, see below instead)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">622243</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">967108</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">163423</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">131</span><span class=\"bp\">.</span><span class=\"mi\">949339</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">117</span><span class=\"bp\">.</span><span class=\"mi\">061900</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">360300</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">97</span><span class=\"bp\">.</span><span class=\"mi\">187590</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">368045</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000258</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">762523</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000012</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">144701</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">264</span><span class=\"bp\">.</span><span class=\"mi\">206892</span>\n    <span class=\"n\">Command</span> <span class=\"n\">being</span> <span class=\"n\">timed</span><span class=\"o\">:</span> <span class=\"s2\">\"bash -c lake env nix shell github:leanprover/lean4/pull/2097/merge -c zsh -c 'echo Mathlib/**/*.lean | xargs -n1 -P9 lean --profile -Dprofiler.threshold=100000' |&amp; ~/lean/lean/tests/bench/accumulate_profile.py\"</span>\n    <span class=\"n\">User</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">1685</span><span class=\"bp\">.</span><span class=\"mi\">62</span>\n    <span class=\"n\">System</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">102</span><span class=\"bp\">.</span><span class=\"mi\">73</span>\n    <span class=\"n\">Percent</span> <span class=\"n\">of</span> <span class=\"n\">CPU</span> <span class=\"n\">this</span> <span class=\"n\">job</span> <span class=\"n\">got</span><span class=\"o\">:</span> <span class=\"mi\">893</span><span class=\"bp\">%</span>\n    <span class=\"n\">Elapsed</span> <span class=\"o\">(</span><span class=\"n\">wall</span> <span class=\"n\">clock</span><span class=\"o\">)</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">mm</span><span class=\"o\">:</span><span class=\"n\">ss</span> <span class=\"n\">or</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ss</span><span class=\"o\">):</span> <span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">22</span>\n    <span class=\"n\">Average</span> <span class=\"n\">shared</span> <span class=\"n\">text</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">unshared</span> <span class=\"n\">data</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">total</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Maximum</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">1226536</span>\n    <span class=\"n\">Average</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Major</span> <span class=\"o\">(</span><span class=\"n\">requiring</span> <span class=\"n\">I</span><span class=\"bp\">/</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">11179</span>\n    <span class=\"n\">Minor</span> <span class=\"o\">(</span><span class=\"n\">reclaiming</span> <span class=\"n\">a</span> <span class=\"n\">frame</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">42066277</span>\n    <span class=\"n\">Voluntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">11573</span>\n    <span class=\"n\">Involuntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">7521</span>\n    <span class=\"n\">Swaps</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">inputs</span><span class=\"o\">:</span> <span class=\"mi\">2728</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">outputs</span><span class=\"o\">:</span> <span class=\"mi\">328</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">sent</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">received</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Signals</span> <span class=\"n\">delivered</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Page</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">bytes</span><span class=\"o\">):</span> <span class=\"mi\">4096</span>\n    <span class=\"n\">Exit</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 327035262,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676031412
    },
    {
        "content": "<p>Compare with master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">173</span><span class=\"bp\">.</span><span class=\"mi\">588834</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">86</span><span class=\"bp\">.</span><span class=\"mi\">642312</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">008818</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">1737</span><span class=\"bp\">.</span><span class=\"mi\">619387</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">264</span><span class=\"bp\">.</span><span class=\"mi\">284900</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">086600</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">905</span><span class=\"bp\">.</span><span class=\"mi\">333030</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">893245</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">297573</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">672510</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">192630</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">434</span><span class=\"bp\">.</span><span class=\"mi\">506535</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">1553</span><span class=\"bp\">.</span><span class=\"mi\">702595</span>\n    <span class=\"n\">Command</span> <span class=\"n\">being</span> <span class=\"n\">timed</span><span class=\"o\">:</span> <span class=\"s2\">\"bash -c lake env zsh -c 'echo Mathlib/**/*.lean | xargs -n1 -P9 lean --profile -Dprofiler.threshold=100000' |&amp; ~/lean/lean/tests/bench/accumulate_profile.py\"</span>\n    <span class=\"n\">User</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">5186</span><span class=\"bp\">.</span><span class=\"mi\">98</span>\n    <span class=\"n\">System</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">110</span><span class=\"bp\">.</span><span class=\"mi\">18</span>\n    <span class=\"n\">Percent</span> <span class=\"n\">of</span> <span class=\"n\">CPU</span> <span class=\"n\">this</span> <span class=\"n\">job</span> <span class=\"n\">got</span><span class=\"o\">:</span> <span class=\"mi\">872</span><span class=\"bp\">%</span>\n    <span class=\"n\">Elapsed</span> <span class=\"o\">(</span><span class=\"n\">wall</span> <span class=\"n\">clock</span><span class=\"o\">)</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">mm</span><span class=\"o\">:</span><span class=\"n\">ss</span> <span class=\"n\">or</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ss</span><span class=\"o\">):</span> <span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">07</span><span class=\"bp\">.</span><span class=\"mi\">00</span>\n    <span class=\"n\">Average</span> <span class=\"n\">shared</span> <span class=\"n\">text</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">unshared</span> <span class=\"n\">data</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">total</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Maximum</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">4110212</span>\n    <span class=\"n\">Average</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Major</span> <span class=\"o\">(</span><span class=\"n\">requiring</span> <span class=\"n\">I</span><span class=\"bp\">/</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">3442</span>\n    <span class=\"n\">Minor</span> <span class=\"o\">(</span><span class=\"n\">reclaiming</span> <span class=\"n\">a</span> <span class=\"n\">frame</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">44354368</span>\n    <span class=\"n\">Voluntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">283482</span>\n    <span class=\"n\">Involuntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">23882</span>\n    <span class=\"n\">Swaps</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">inputs</span><span class=\"o\">:</span> <span class=\"mi\">53320</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">outputs</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">sent</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">received</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Signals</span> <span class=\"n\">delivered</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Page</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">bytes</span><span class=\"o\">):</span> <span class=\"mi\">4096</span>\n    <span class=\"n\">Exit</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 327039139,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676032443
    },
    {
        "content": "<p>(wait a minute, verifying these measures...)</p>",
        "id": 327039996,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676032663
    },
    {
        "content": "<p><code>File system outputs: 0</code> vs <code>File system outputs: 328</code>?</p>",
        "id": 327042409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676033395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> shouldn't you profile <code>mathlib4:master</code> vs <code>mathlib4:bump-2023-02-10</code> with their respective lean toolchains?</p>",
        "id": 327042744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676033498
    },
    {
        "content": "<p><code>github:leanprover/lean4/pull/2097/merge</code> looks a bit suspicious to me</p>",
        "id": 327042814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676033523
    },
    {
        "content": "<p>Yes, I also wanted to include the the fixes to the <code>interpretation</code> metric from that PR. I just verified that the numbers don't really change when using the correct nightly apart from that.</p>",
        "id": 327043498,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676033701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> But what about<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bump.20to.202023-02-06/near/327042409\">said</a>:</p>\n<blockquote>\n<p><code>File system outputs: 0</code> vs <code>File system outputs: 328</code>?</p>\n</blockquote>",
        "id": 327043877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676033797
    },
    {
        "content": "<p>So I don't really understand why everything got faster. But it's clear that many TC bottlenecks got eliminated.</p>",
        "id": 327044483,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676033982
    },
    {
        "content": "<p>Note that this is not a dependency-ordered build but parallel check of all Lean files, so the wall clock time is a measure of ideal parallelism. I think I'll redo the numbers with <code>lake build</code></p>",
        "id": 327045129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676034179
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Finset.smul_finset_subset_smul_finset_iff₀</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">tactic 'simp' failed, nested error:</span>\n<span class=\"cm\">(deterministic) timeout at 'isDefEq', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n</code></pre></div>",
        "id": 327056217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676037173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GroupWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test1.smul_finset_subset_smul_finset_iff₀</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"c1\">-- timeout, as reported by the linter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test2.smul_finset_subset_smul_finset_iff₀</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.smul_finset_subset_smul_finset_iff₀</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"c1\">-- instant win</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test3.smul_finset_subset_smul_finset_iff₀</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.smul_finset_subset_smul_finset_iff₀</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>",
        "id": 327056547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676037279
    },
    {
        "content": "<p><code>lake build</code> on <code>bump-2023-02-10</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'.</span><span class=\"n\">olean</span> <span class=\"n\">serialization'</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">853540</span>\n<span class=\"bp\">'</span><span class=\"n\">C</span> <span class=\"n\">code</span> <span class=\"n\">generation'</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">768435</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">205</span><span class=\"bp\">.</span><span class=\"mi\">754573</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">213137</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">580919</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">782</span><span class=\"bp\">.</span><span class=\"mi\">889996</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">371</span><span class=\"bp\">.</span><span class=\"mi\">659000</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"mi\">916400</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">1055</span><span class=\"bp\">.</span><span class=\"mi\">931650</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">834213</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">336515</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">813774</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">969340</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">369</span><span class=\"bp\">.</span><span class=\"mi\">390996</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">1684</span><span class=\"bp\">.</span><span class=\"mi\">782010</span>\n    <span class=\"n\">Command</span> <span class=\"n\">being</span> <span class=\"n\">timed</span><span class=\"o\">:</span> <span class=\"s2\">\"bash -c lake build -v |&amp; ~/lean/lean/tests/bench/accumulate_profile.py\"</span>\n    <span class=\"n\">User</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">4638</span><span class=\"bp\">.</span><span class=\"mi\">28</span>\n    <span class=\"n\">System</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">157</span><span class=\"bp\">.</span><span class=\"mi\">13</span>\n    <span class=\"n\">Percent</span> <span class=\"n\">of</span> <span class=\"n\">CPU</span> <span class=\"n\">this</span> <span class=\"n\">job</span> <span class=\"n\">got</span><span class=\"o\">:</span> <span class=\"mi\">993</span><span class=\"bp\">%</span>\n    <span class=\"n\">Elapsed</span> <span class=\"o\">(</span><span class=\"n\">wall</span> <span class=\"n\">clock</span><span class=\"o\">)</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">mm</span><span class=\"o\">:</span><span class=\"n\">ss</span> <span class=\"n\">or</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ss</span><span class=\"o\">):</span> <span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">02</span><span class=\"bp\">.</span><span class=\"mi\">85</span>\n    <span class=\"n\">Average</span> <span class=\"n\">shared</span> <span class=\"n\">text</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">unshared</span> <span class=\"n\">data</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">total</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Maximum</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">4128128</span>\n    <span class=\"n\">Average</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Major</span> <span class=\"o\">(</span><span class=\"n\">requiring</span> <span class=\"n\">I</span><span class=\"bp\">/</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">4733</span>\n    <span class=\"n\">Minor</span> <span class=\"o\">(</span><span class=\"n\">reclaiming</span> <span class=\"n\">a</span> <span class=\"n\">frame</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">48589057</span>\n    <span class=\"n\">Voluntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">368530</span>\n    <span class=\"n\">Involuntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">122021</span>\n    <span class=\"n\">Swaps</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">inputs</span><span class=\"o\">:</span> <span class=\"mi\">472</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">outputs</span><span class=\"o\">:</span> <span class=\"mi\">1624832</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">sent</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">received</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Signals</span> <span class=\"n\">delivered</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Page</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">bytes</span><span class=\"o\">):</span> <span class=\"mi\">4096</span>\n    <span class=\"n\">Exit</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p><code>lake build</code> on <code>master</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'.</span><span class=\"n\">olean</span> <span class=\"n\">serialization'</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">793700</span>\n<span class=\"bp\">'</span><span class=\"n\">C</span> <span class=\"n\">code</span> <span class=\"n\">generation'</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">781041</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">207</span><span class=\"bp\">.</span><span class=\"mi\">986073</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">645207</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">195223</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">2007</span><span class=\"bp\">.</span><span class=\"mi\">594839</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration</span> <span class=\"n\">took'</span><span class=\"o\">:</span> <span class=\"mi\">156</span><span class=\"bp\">.</span><span class=\"mi\">000000</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">370</span><span class=\"bp\">.</span><span class=\"mi\">157500</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">668100</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">1214</span><span class=\"bp\">.</span><span class=\"mi\">664330</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">547507</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">849844</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">782369</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">871330</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">544</span><span class=\"bp\">.</span><span class=\"mi\">161378</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">1907</span><span class=\"bp\">.</span><span class=\"mi\">262770</span>\n    <span class=\"n\">Command</span> <span class=\"n\">being</span> <span class=\"n\">timed</span><span class=\"o\">:</span> <span class=\"s2\">\"bash -c lake build -v |&amp; ~/lean/lean/tests/bench/accumulate_profile.py\"</span>\n    <span class=\"n\">User</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">6442</span><span class=\"bp\">.</span><span class=\"mi\">80</span>\n    <span class=\"n\">System</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">seconds</span><span class=\"o\">):</span> <span class=\"mi\">160</span><span class=\"bp\">.</span><span class=\"mi\">61</span>\n    <span class=\"n\">Percent</span> <span class=\"n\">of</span> <span class=\"n\">CPU</span> <span class=\"n\">this</span> <span class=\"n\">job</span> <span class=\"n\">got</span><span class=\"o\">:</span> <span class=\"mi\">953</span><span class=\"bp\">%</span>\n    <span class=\"n\">Elapsed</span> <span class=\"o\">(</span><span class=\"n\">wall</span> <span class=\"n\">clock</span><span class=\"o\">)</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">mm</span><span class=\"o\">:</span><span class=\"n\">ss</span> <span class=\"n\">or</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ss</span><span class=\"o\">):</span> <span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"mi\">31</span>\n    <span class=\"n\">Average</span> <span class=\"n\">shared</span> <span class=\"n\">text</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">unshared</span> <span class=\"n\">data</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">stack</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Average</span> <span class=\"n\">total</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Maximum</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">4116644</span>\n    <span class=\"n\">Average</span> <span class=\"n\">resident</span> <span class=\"n\">set</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">kbytes</span><span class=\"o\">):</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Major</span> <span class=\"o\">(</span><span class=\"n\">requiring</span> <span class=\"n\">I</span><span class=\"bp\">/</span><span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">2596</span>\n    <span class=\"n\">Minor</span> <span class=\"o\">(</span><span class=\"n\">reclaiming</span> <span class=\"n\">a</span> <span class=\"n\">frame</span><span class=\"o\">)</span> <span class=\"n\">page</span> <span class=\"n\">faults</span><span class=\"o\">:</span> <span class=\"mi\">48789824</span>\n    <span class=\"n\">Voluntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">370295</span>\n    <span class=\"n\">Involuntary</span> <span class=\"n\">context</span> <span class=\"n\">switches</span><span class=\"o\">:</span> <span class=\"mi\">93514</span>\n    <span class=\"n\">Swaps</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">inputs</span><span class=\"o\">:</span> <span class=\"mi\">80</span>\n    <span class=\"n\">File</span> <span class=\"n\">system</span> <span class=\"n\">outputs</span><span class=\"o\">:</span> <span class=\"mi\">1624616</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">sent</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Socket</span> <span class=\"n\">messages</span> <span class=\"n\">received</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Signals</span> <span class=\"n\">delivered</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Page</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">bytes</span><span class=\"o\">):</span> <span class=\"mi\">4096</span>\n    <span class=\"n\">Exit</span> <span class=\"n\">status</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 327057560,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676037550
    },
    {
        "content": "<p>That looks much more reasonable. I think I know what went wrong above.</p>",
        "id": 327060046,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676038041
    },
    {
        "content": "<p>Thanks! That is a slightly more sober but also more realistic report, I guess?</p>",
        "id": 327060072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676038046
    },
    {
        "content": "<p>Still, it's a juicy speedup. Things like <code>norm_num</code> and <code>ring</code> seem 10x faster</p>",
        "id": 327060190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676038070
    },
    {
        "content": "<p>What is <code>interpretation</code>?</p>",
        "id": 327060277,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676038084
    },
    {
        "content": "<p>It is time spent in the interpreter, except that's not true without <a href=\"https://github.com/leanprover/lean4/pull/2097\">https://github.com/leanprover/lean4/pull/2097</a>. Profiling with that PR next.</p>",
        "id": 327060546,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676038149
    },
    {
        "content": "<p>The accounting is a bit tricky, but I think I got it to work now. Here are two more runs, with and without the interpretation fix</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">164</span><span class=\"bp\">.</span><span class=\"mi\">714187</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">87</span><span class=\"bp\">.</span><span class=\"mi\">103079</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">474797</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">847</span><span class=\"bp\">.</span><span class=\"mi\">785834</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">463</span><span class=\"bp\">.</span><span class=\"mi\">646400</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"mi\">652100</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">684</span><span class=\"bp\">.</span><span class=\"mi\">955990</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">61</span><span class=\"bp\">.</span><span class=\"mi\">308320</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">293605</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">379258</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">617584</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">320</span><span class=\"bp\">.</span><span class=\"mi\">809063</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">1478</span><span class=\"bp\">.</span><span class=\"mi\">708429</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">'</span><span class=\"n\">compilation'</span><span class=\"o\">:</span> <span class=\"mi\">165</span><span class=\"bp\">.</span><span class=\"mi\">137222</span>\n<span class=\"bp\">'</span><span class=\"n\">compilation</span> <span class=\"n\">new'</span><span class=\"o\">:</span> <span class=\"mi\">84</span><span class=\"bp\">.</span><span class=\"mi\">167392</span>\n<span class=\"bp\">'</span><span class=\"n\">dsimp'</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">273111</span>\n<span class=\"bp\">'</span><span class=\"n\">elaboration'</span><span class=\"o\">:</span> <span class=\"mi\">653</span><span class=\"bp\">.</span><span class=\"mi\">229938</span>\n<span class=\"bp\">'</span><span class=\"kn\">import</span><span class=\"bp\">'</span><span class=\"o\">:</span> <span class=\"mi\">263</span><span class=\"bp\">.</span><span class=\"mi\">245600</span>\n<span class=\"bp\">'</span><span class=\"n\">initialization'</span><span class=\"o\">:</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">160300</span>\n<span class=\"bp\">'</span><span class=\"n\">interpretation'</span><span class=\"o\">:</span> <span class=\"mi\">817</span><span class=\"bp\">.</span><span class=\"mi\">407900</span>\n<span class=\"bp\">'</span><span class=\"n\">linting'</span><span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">820219</span>\n<span class=\"bp\">'</span><span class=\"n\">norm_num'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">304183</span>\n<span class=\"bp\">'</span><span class=\"n\">parsing'</span><span class=\"o\">:</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">365134</span>\n<span class=\"bp\">'</span><span class=\"n\">ring'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">769890</span>\n<span class=\"bp\">'</span><span class=\"n\">simp'</span><span class=\"o\">:</span> <span class=\"mi\">302</span><span class=\"bp\">.</span><span class=\"mi\">897895</span>\n<span class=\"bp\">'</span><span class=\"n\">typeclass</span> <span class=\"n\">inference'</span><span class=\"o\">:</span> <span class=\"mi\">1360</span><span class=\"bp\">.</span><span class=\"mi\">253054</span>\n</code></pre></div>\n<p>It looks like a good part of elaboration, import (env extensions presumably) and linting was miscounted as interpretation, which makes sense. The increase in TC doesn't, but that may be a fluke.</p>",
        "id": 327088108,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676044951
    },
    {
        "content": "<p>So it's probably better to first look at further optimizing TC inference before taking another stab at precompilation. Well, the potential wins with precompilation are likely higher, but how much additional overhead and caching work we would introduce are not clear to me yet.</p>",
        "id": 327088733,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676045107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bump.20to.202023-02-10/near/327023440\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2188\">https://github.com/leanprover-community/mathlib4/pull/2188</a></p>\n</blockquote>\n<p>I don't really understand the regressions in this bump. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the diff is ~38 lines. But it might point to some issues? They must be pretty specific corner cases though, otherwise I would expect to see a lot more problems.</p>",
        "id": 327092043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676046012
    },
    {
        "content": "<p>Here is a much less detailed overview of the build time of this bump, that clearly shows its impact.</p>\n<p>After this bump, the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4143419421/jobs/7165240873\">build time</a> of mathlib4 is 39m 44s.<br>\nBefore this bump, the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4107094994/jobs/7086146807\">build</a> <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4116511386/jobs/7106649875\">time</a> of mathlib4 is 58m43s (this is the average of two builds that make a relatively small change to <code>to_additive</code>, which is imported by almost all files in Mathlib)</p>",
        "id": 327108590,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676050524
    },
    {
        "content": "<p>Elan downloaded Lean 2023-02-10, and there is no <code>bin/</code></p>",
        "id": 327162450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676070102
    },
    {
        "content": "<p>(Linux NixOS)</p>",
        "id": 327162602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676070155
    },
    {
        "content": "<p>Removed, downloaded again, now it works.</p>",
        "id": 327162961,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676070345
    }
]