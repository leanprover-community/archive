[
    {
        "content": "<p>What's the canonical proof of <code>((2 : Real) : Complex) = 2</code> these days?</p>",
        "id": 340909711,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678466045
    },
    {
        "content": "<p>Does norm_cast do it?</p>",
        "id": 340921073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678468848
    },
    {
        "content": "<p>I don't think so, but <code>Data.Complex.Basic</code> has only just been ported, so maybe some attribute is missing.</p>",
        "id": 340934438,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678472504
    },
    {
        "content": "<p>It's certainly something that <code>norm_cast</code> should be able to do.</p>",
        "id": 340934876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678472600
    },
    {
        "content": "<p><code>norm_cast</code> needs a different set up for numerals in Lean 4 than it did in Lean 3 though.</p>",
        "id": 340934981,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678472635
    },
    {
        "content": "<p>In Lean 3 you needed cast lemmas for <code>0</code>, <code>1</code>, <code>bit0</code>, and <code>bit1</code>.</p>",
        "id": 340935077,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678472653
    },
    {
        "content": "<p>Now you need lemmas for <code>0</code>, <code>1</code>, and <code>n</code> (with <code>[Nat.AtLeastTwo n]</code> like this: <a href=\"https://github.com/leanprover-community/mathlib4/blob/5d9a516c7a8c129bd7e0d3fa5e06701515d5ce12/Mathlib/Data/Real/NNReal.lean#L359-L361\">https://github.com/leanprover-community/mathlib4/blob/5d9a516c7a8c129bd7e0d3fa5e06701515d5ce12/Mathlib/Data/Real/NNReal.lean#L359-L361</a>).</p>",
        "id": 340935551,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678472776
    },
    {
        "content": "<p>Not much thought went into the API, it might be a good idea to introduce a <code>LawfulOfNat</code> class so that you get a lemma that works for all numerals.</p>",
        "id": 340935735,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678472827
    },
    {
        "content": "<p>BTW, will</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>cause troubles?</p>",
        "id": 340944146,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678475271
    },
    {
        "content": "<p>If not, then we can get rid of <code>AtLeastTwo</code> and use this instance + lemma saying that <code>Nat.Cast n = OfNat.ofNat n</code>.</p>",
        "id": 340944351,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678475315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> How do we define <code>natCast</code> for <code>Complex</code>? If it is defined as <code>ofReal (Nat.cast n)</code>, then the proof is <code>rfl</code>.</p>",
        "id": 340944635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678475395
    },
    {
        "content": "<p>The proof is <code>rfl</code>, but that doesn't mean that <code>simp</code> will prove it.</p>",
        "id": 340945312,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678475591
    },
    {
        "content": "<p>Also, <code>linarith</code> failed a couple of times because of this</p>",
        "id": 340946193,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678475878
    },
    {
        "content": "<p>If you want <code>simp</code> to prove it, then you need a lemma similar to <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Real/ENNReal.lean#L350\">ENNReal.coe_ofNat</a></p>",
        "id": 340946763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678476075
    },
    {
        "content": "<p>It seems that <code>docs4</code> still knows nothing about <code>ENNReal</code>s.</p>",
        "id": 340946820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678476094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> That might work, although I fear it will reduce to <code>Nat.cast (...).succ.succ</code>.</p>",
        "id": 340946845,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678476102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ofReal_two/near/340944146\">said</a>:</p>\n<blockquote>\n<p>BTW, will</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>cause troubles?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat.ofNat#doc\">docs4#OfNat.ofNat</a> doesn't take an <code>n</code> argument, does it?</p>",
        "id": 340947172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678476194
    },
    {
        "content": "<p>Sorry, I meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.cast</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 340948282,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678476533
    },
    {
        "content": "<p>BTW, it would be nice to have a command or an attribute that adds <code>ofNat</code> lemma copy of a <code>Nat.cast</code> lemma.</p>",
        "id": 340948428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678476585
    },
    {
        "content": "<p>E.g., it should generate <code>ENNReal.coe_ofNat</code> from <code>ENNReal.coe_nat</code>.</p>",
        "id": 340948702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678476665
    }
]