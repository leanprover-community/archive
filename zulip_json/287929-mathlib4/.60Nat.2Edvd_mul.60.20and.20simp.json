[
    {
        "content": "<p>Dear All,</p>\n<p>I am a little surprised by the lemma below.</p>\n<p><code>aesop</code> closes the proof.  However, if you remove <code>_root_.</code> from the name of the lemma, then <code>aesop</code> no longer concludes the proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Divisors</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span> <span class=\"n\">Finset</span>\n\n<span class=\"c1\">--  if you remove `_root_.`, then `aesop` no longer proves this lemma</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.Nat.Prime.divisors_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.divisors</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.divisors</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.divisors</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">dvd_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_prime</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_eq_or_imp</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right'</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hp.divisors</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 404735432,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701212925
    },
    {
        "content": "<p>I think the issue is not with aesop, but with the fact that the goal prior to aesop is different, as you can see with <code>set_option pp.raw true</code>. I’m not sure which, but some lemma prior is probably getting interpreted as <code>Nat.&lt;lemma_name&gt;</code> instead of <code>_root_.&lt;lemma_name&gt;</code>?</p>",
        "id": 404736948,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701213797
    },
    {
        "content": "<p>I agree that the issue may not be <code>aesop</code>.  If you replace <code>aesop</code> by the output of <code>aesop?</code>, it still fails after you remove <code>_root_.</code>.  I was not able to understand what the culprit it, though.</p>",
        "id": 404737087,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701213868
    },
    {
        "content": "<p>I’m on mobile, but I’m guessing that if you hover over each lemma used in <code>simp only</code> in turn, one of them will be <code>Nat.&lt;lemma_name&gt;</code> in the <code>lemma Nat.Prime.divisors_mul</code> case, and <code>&lt;lemma_name&gt;</code> in the <code>lemma _root_.Nat.Prime.divisors_mul</code> case (or something like that)</p>",
        "id": 404737873,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701214265
    },
    {
        "content": "<p>When <code>aesop</code> fails, squeezing the <code>simp</code> yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hp.divisors</span><span class=\"o\">,</span> <span class=\"n\">mem_mul</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_and_left</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_or_imp</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">dvd_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_prime</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_eq_or_imp</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right'</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hp.divisors</span><span class=\"o\">,</span>\n    <span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404737992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214323
    },
    {
        "content": "<p>It might be <code>Nat.dvd_mul</code> the lemma that misfires.</p>",
        "id": 404738170,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214429
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.Nat.Prime.divisors_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span> <span class=\"bp\">=</span> <span class=\"n\">p.divisors</span> <span class=\"bp\">*</span> <span class=\"n\">n.divisors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_divisors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.dvd_mul</span><span class=\"o\">,</span>  <span class=\"c1\">-- with `Nat.`, the `root` issue disappears</span>\n    <span class=\"n\">Nat.dvd_prime</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_and_left</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_or_imp</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right'</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_left</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hp.divisors</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 404738543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214612
    },
    {
        "content": "<p>So, using the fully qualified <code>Nat.dvd_mul</code>, resolved the <code>root</code> issue.</p>\n<p>However, in the enviroment there is no other <code>dvd_mul</code> lemma, as far as I can tell.</p>",
        "id": 404738619,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214663
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dvd_mul#doc\">docs#dvd_mul</a></p>",
        "id": 404738651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701214683
    },
    {
        "content": "<p>Aah no there it is, right?</p>",
        "id": 404738695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701214699
    },
    {
        "content": "<p>Ah, thanks Kevin!</p>",
        "id": 404738704,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214703
    },
    {
        "content": "<p>So <code>aesop</code> is off the hook :-)</p>",
        "id": 404738769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701214746
    },
    {
        "content": "<p>Indeed, <code>aesop</code> receives a crippled goal from <code>simp</code>, depending on the <code>root</code> or no <code>root</code>.</p>",
        "id": 404738829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214795
    },
    {
        "content": "<p>I had no open namespace, though.  Why did Lean look for <code>Nat.dvd_mul</code> in the first place?</p>\n<p>(It is the lemma that should apply, so it is good that it did, but I wonder if it should have used it...)</p>",
        "id": 404739044,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214895
    },
    {
        "content": "<p>Does <code>_root_.Nat.[...]</code> imply an <code>open Nat</code>?</p>",
        "id": 404739136,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701214932
    },
    {
        "content": "<p>Thanks Scott!  I did not know about this \"auto-open\" feature.</p>",
        "id": 404740068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701215492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404739136\">said</a>:</p>\n<blockquote>\n<p>Does <code>_root_.Nat.[...]</code> imply an <code>open Nat</code>?</p>\n</blockquote>\n<p>(Btw, it’s reversed: <code>def Nat.[…]</code> opens <code>Nat</code> in the definition, and <code>def _root_.Nat.[…]</code> doesn’t!)</p>",
        "id": 404741379,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701216157
    },
    {
        "content": "<p>It's an initial shock but it's really cool once you get used to it</p>",
        "id": 404741503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701216182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404741379\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404739136\">said</a>:</p>\n<blockquote>\n<p>Does <code>_root_.Nat.[...]</code> imply an <code>open Nat</code>?</p>\n</blockquote>\n<p>(Btw, it’s reversed: <code>def Nat.[…]</code> opens <code>Nat</code> in the definition, and <code>def _root_.Nat.[…]</code> doesn’t!)</p>\n</blockquote>\n<p>Oh, so when there is an ambiguity, it uses neither.  In this case, either one of the lemmas works: using <code>_root_.dvd_mul</code> or <code>Nat.dvd_mul</code> still gets <code>simp</code> to a position where <code>aesop</code> closes the goal!</p>",
        "id": 404742005,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701216431
    },
    {
        "content": "<p>But leaving the ambiguous <code>dvd_mul</code> stops <code>simp</code> from using that lemma and leaves <code>aesop</code> unable to conclude.</p>",
        "id": 404742068,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701216470
    },
    {
        "content": "<p>Ok, thank you all for the explanations: it seems way more logical now, than at the beginning!</p>",
        "id": 404742148,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701216498
    },
    {
        "content": "<p>An ambiguous lemma would error—in this case, it seems like what’s happening is that we’re actually opening <code>Nat.Prime</code>, and using <code>Nat.Prime.dvd_mul</code> (yet another <code>dvd_mul</code>) is the issue! :P</p>",
        "id": 404744091,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701217579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404741379\">said</a>:</p>\n<blockquote>\n<p><code>def Nat.[…]</code> opens <code>Nat</code> in the definition, and <code>def _root_.Nat.[…]</code> doesn’t!</p>\n</blockquote>\n<p>Is this on purpose? The fact that referring to <code>foo</code> in the root namespace with no namespace open and <code>_root_.foo</code> give different results is highly confusing.</p>",
        "id": 404809124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701245808
    },
    {
        "content": "<p>I agree that these should be the same...after all, aren't the namespaces <code>Nat</code> and <code>_root_.Nat</code> one and the same?</p>",
        "id": 404962529,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701297731
    },
    {
        "content": "<p>(Btw, I didn't look closely into what's going on here initially, but just wanted to correct what I said slightly for the record: it seems that the body of the definition <code>def Foo.[...]</code> is evaluated <em>in</em> the <code>Foo</code> namespace, not simply with <code>Foo</code> open. The difference (one difference) with being <em>in</em> a namespace instead of opening a namespace is that we strictly prefer <code>Foo.x</code> to <code>_root_.x</code> as an interpretation of <code>x</code> instead of erroring due to ambiguity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Foo</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">ambiguous, possible interpretations</span>\n<span class=\"cm\">  _root_.x : Bool</span>\n\n<span class=\"cm\">  Foo.x : Bool</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- no error, `Foo.x` preferred</span>\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>)</p>",
        "id": 404962593,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701297769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404809124\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Nat.2Edvd_mul.60.20and.20simp/near/404741379\">said</a>:</p>\n<blockquote>\n<p><code>def Nat.[…]</code> opens <code>Nat</code> in the definition, and <code>def _root_.Nat.[…]</code> doesn’t!</p>\n</blockquote>\n<p>Is this on purpose? The fact that referring to <code>foo</code> in the root namespace with no namespace open and <code>_root_.foo</code> give different results is highly confusing.</p>\n</blockquote>\n<p>I can't be sure, but the docstring on <code>Lean.Elab.Command.expandDeclNamespace?</code> seems to indicate that this is intentional:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  Given declarations such as `@[...] def Foo.Bla.f ...` return `some (Foo.Bla, @[...] def f ...)`</span>\n<span class=\"sd\">  Remark: if the id starts with `_root_`, we return `none`.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>(The resulting <code>Foo.Bla</code>, if there is one, is what's used for the namespacing macro in <code>Lean.Elab.Command.elabDeclaration</code>)</p>",
        "id": 404963810,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701298395
    },
    {
        "content": "<p>(Oh, are core definitions not in the docs? whoops.)</p>",
        "id": 404963924,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701298443
    },
    {
        "content": "<p>I'm interested in knowing the rationale here... I hope it's not that adding <code>_root_.</code> to a lemma name is an override for the \"elaborate the declaration in the namespace its name lives in\" thing, because the point of <code>_root_</code> always has been to put definitions in a different namespace without closing and reopening everything, and this is semantically very different.</p>",
        "id": 404976191,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701304392
    },
    {
        "content": "<p>Maybe it's an oversight?</p>",
        "id": 404976256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701304423
    },
    {
        "content": "<p>I'm hoping for an oversight because this looks like an auxiliary function that lives far away from the thing that actually elaborates.</p>",
        "id": 404976729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701304614
    },
    {
        "content": "<p>I agree with the sentiment, but I wouldn’t count on it being an oversight—after searching, it looks like this task is <code>expandDeclNamespace?</code>’s only purpose in life!</p>",
        "id": 404984346,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701308056
    },
    {
        "content": "<p>Nonetheless, I think it would be worth starting a dedicated thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> to ask about the intention and express the sentiment that it leads to confusing behavior.</p>",
        "id": 404984679,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701308280
    }
]