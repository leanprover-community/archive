[
    {
        "content": "<p>We found the following names in mathlib3 that are distinguished only by case:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq\">docs#seq</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seq#doc\">docs4#Seq</a> (Seq is Lean 4's has_seq)<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o\">docs#asymptotics.is_o</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.is_ortho\">docs#bilin_form.is_ortho</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.is_Ortho\">docs#bilin_form.is_Ortho</a>, also linear_map.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_hom\">docs#sup_hom</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup_hom\">docs#Sup_hom</a>, also inf/Inf<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy\">docs#cauchy</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Cauchy\">docs#Cauchy</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.indep\">docs#probability_theory.indep</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.Indep\">docs#probability_theory.Indep</a>, also indep_fun, indep_set</p>",
        "id": 323026120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482349
    },
    {
        "content": "<p>The sup/Sup one we can resolve by using Sup/Sup_whatever.</p>",
        "id": 323026216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482377
    },
    {
        "content": "<p>For others, we might need to invent some new names</p>",
        "id": 323026252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482388
    },
    {
        "content": "<p><code>cauchy</code> could become <code>filter.cauchy</code>.</p>",
        "id": 323026295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482401
    },
    {
        "content": "<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>",
        "id": 323026856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674482527
    },
    {
        "content": "<p>The Indep/indep names and variants in probability theory were chosen to follow the example of the set definitions Union/union, Inter/inter, etc.(that is use capital letter for an indexed family, small letter for two arguments). They can be changed to use whatever new convention is chosen to replace Union/union.</p>",
        "id": 323027923,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1674482778
    },
    {
        "content": "<p>And is_ortho too</p>",
        "id": 323028216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323026856\">said</a>:</p>\n<blockquote>\n<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>\n</blockquote>\n<p>Would \"BigO\" and \"SmallO\" be too off-putting? It's more verbose than a single letter, but I feel like that might not be so bad.</p>",
        "id": 323028393,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674482881
    },
    {
        "content": "<p>There is notation for these already. So it is mainly a question of what appears in lemma names</p>",
        "id": 323028540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482905
    },
    {
        "content": "<p>submit a new character proposal to the Unicode consortium for an upper-case small letter \"o\"?</p>",
        "id": 323029168,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1674483031
    },
    {
        "content": "<p>Like ᴏ?</p>",
        "id": 323029681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483153
    },
    {
        "content": "<p>LATIN LETTER SMALL CAPITAL O</p>",
        "id": 323029769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483176
    },
    {
        "content": "<p>For what it's worth, big-O and little-o are technically actually Ο and ο (big omicron and little omicron), which are at completely different unicode codepoints.</p>",
        "id": 323030623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674483360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323029769\">said</a>:</p>\n<blockquote>\n<p>LATIN LETTER SMALL CAPITAL O</p>\n</blockquote>\n<p>oh right, smallcaps. that would work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 323031280,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1674483512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"563290\">Lukas Miaskiwskyi</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323028393\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323026856\">said</a>:</p>\n<blockquote>\n<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>\n</blockquote>\n<p>Would \"BigO\" and \"SmallO\" be too off-putting? It's more verbose than a single letter, but I feel like that might not be so bad.</p>\n</blockquote>\n<p>Don't worry, we'll find a way. I was joking.</p>",
        "id": 323031300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674483517
    },
    {
        "content": "<p>I'm confused, there is no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Seq\">docs#Seq</a> is there?</p>",
        "id": 323031513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483574
    },
    {
        "content": "<p>No but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seq#doc\">docs4#Seq</a></p>",
        "id": 323031584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483593
    },
    {
        "content": "<p>Oh right, the point being that there is no obvious choice of Mathlib4 name for the old <code>seq</code></p>",
        "id": 323031800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483639
    },
    {
        "content": "<p>As a tangent: Omicron means \"small o\", the big O is actually Omega</p>",
        "id": 323624334,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674702978
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lim\">docs#lim</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim\">docs#Lim</a></p>",
        "id": 323634014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706168
    },
    {
        "content": "<p>I'm using <code>lim_under</code> and <code>lim</code> for now</p>",
        "id": 323634029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706191
    },
    {
        "content": "<p>These defs are very rarely used in <code>mathlib</code>.</p>",
        "id": 323634037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323624334\">said</a>:</p>\n<blockquote>\n<p>As a tangent: Omicron means \"small o\", the big O is actually Omega</p>\n</blockquote>\n<p>No, big O and  Omega are different.</p>",
        "id": 323668859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674724844
    },
    {
        "content": "<p>I mean literally interpreting the greek name, not related to the big O notation thing</p>",
        "id": 323672530,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674725945
    },
    {
        "content": "<p>?? big and little omicron exist (and look like O and o), but the big and little omega are Ω and ω. So I don't understand your claim here.</p>",
        "id": 323820957,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674761282
    },
    {
        "content": "<p>He's saying that omicron means \"o micron\", that is \"small o\", and similarly \"o mega\" means \"big o\" in greek</p>",
        "id": 323821176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674761349
    },
    {
        "content": "<p>Ah, got it.</p>",
        "id": 323821244,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674761376
    },
    {
        "content": "<p>Probably, we should add <code>Coprod</code> to the list of exceptions.</p>",
        "id": 324465922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675012730
    },
    {
        "content": "<p>I think the weird thing here is that big O and small o are really just standalone “symbols” rather than “spelled” alphanumeric names (that is, their names are given by the glyphs themselves rather than what words those glyphs spell)…so imo they should either</p>\n<ol>\n<li>\n<p>be described alphanumerically (<code>BigO</code> and <code>SmallO</code>, as suggested earlier)</p>\n</li>\n<li>\n<p>be referred to as <code>𝑂</code> and <code>𝑜</code> (to use a glyph that’s distinct from alphanumeric characters)</p>\n</li>\n</ol>",
        "id": 324470387,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675015167
    },
    {
        "content": "<p>BTW, is it hard <strong>not</strong> to replace <code>Iic</code> etc with <code>iic</code> etc in lemma names in <code>mathport</code>?</p>",
        "id": 324501244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036174
    },
    {
        "content": "<p>When I'm porting a file about intervals, I start with searches like <code>_i</code> -&gt; <code>_I</code> (ask y/n)</p>",
        "id": 324501309,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036210
    },
    {
        "content": "<p>Yury, a regexp search and replace does this instantly with no need for yes/no. <code>i\\([ico]\\)\\([ico]\\)</code> and just map it to <code>I\\1\\2</code>. Of course, if mathport can do it easily all the better.</p>",
        "id": 324504226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038664
    },
    {
        "content": "<p>This could have false positives, but I think they are relatively unlikely.</p>",
        "id": 324504323,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038726
    },
    {
        "content": "<p>Sometimes there is <code>ici</code> in a word.</p>",
        "id": 324504351,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038760
    },
    {
        "content": "<p>Yes, but I think it's easier to just hope and catch the ones that stick out after the fact, because a stray <code>I</code> completely out of place will be easy to catch.</p>",
        "id": 324504415,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038821
    },
    {
        "content": "<p>Even <code>icc</code> is possible, just not terribly likely.</p>",
        "id": 324504481,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038856
    },
    {
        "content": "<p>I prefer to do this search (and some similar searches) in the y/n mode.</p>",
        "id": 324504483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038859
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 324504488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038866
    },
    {
        "content": "<p>E.g., <code>sUnion</code> -&gt; <code>union_s</code>, then <code>Union</code> -&gt; <code>union_i</code> (it is not replaced automatically in some dot notation and <code>simp</code>/<code>rw</code>)</p>",
        "id": 324504548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/324501244\">said</a>:</p>\n<blockquote>\n<p>BTW, is it hard <strong>not</strong> to replace <code>Iic</code> etc with <code>iic</code> etc in lemma names in <code>mathport</code>?</p>\n</blockquote>\n<p>We would need to update the <code>decapitalize</code> function in mathport. Shouldn't be too hard.</p>",
        "id": 324534680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675060874
    },
    {
        "content": "<p>I need to give a seminar talk this morning. After lunch I'll be back</p>",
        "id": 324534696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675060886
    },
    {
        "content": "<p>I know I've seen this <code>Icc</code> decapitalization happening, but can you point to a specific example?</p>",
        "id": 324541043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064087
    },
    {
        "content": "<p>E.g., I fixed a lot of these in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1820\">!4#1820</a></p>",
        "id": 324541406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675064260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as resolved.</p>",
        "id": 324569431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675073910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as unresolved.</p>",
        "id": 324569815,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675074035
    },
    {
        "content": "<p>Oops, sorry.</p>",
        "id": 324569844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675074044
    },
    {
        "content": "<p>Thanks, I will look into it.</p>",
        "id": 324777864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675113127
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/225\">https://github.com/leanprover-community/mathport/pull/225</a></p>",
        "id": 324888328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675165139
    }
]