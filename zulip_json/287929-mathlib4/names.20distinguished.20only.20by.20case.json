[
    {
        "content": "<p>We found the following names in mathlib3 that are distinguished only by case:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/seq\">docs#seq</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seq#doc\">docs4#Seq</a> (Seq is Lean 4's has_seq)<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_o\">docs#asymptotics.is_o</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.is_ortho\">docs#bilin_form.is_ortho</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.is_Ortho\">docs#bilin_form.is_Ortho</a>, also linear_map.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_hom\">docs#sup_hom</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup_hom\">docs#Sup_hom</a>, also inf/Inf<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy\">docs#cauchy</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Cauchy\">docs#Cauchy</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.indep\">docs#probability_theory.indep</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/probability_theory.Indep\">docs#probability_theory.Indep</a>, also indep_fun, indep_set</p>",
        "id": 323026120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482349
    },
    {
        "content": "<p>The sup/Sup one we can resolve by using Sup/Sup_whatever.</p>",
        "id": 323026216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482377
    },
    {
        "content": "<p>For others, we might need to invent some new names</p>",
        "id": 323026252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482388
    },
    {
        "content": "<p><code>cauchy</code> could become <code>filter.cauchy</code>.</p>",
        "id": 323026295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482401
    },
    {
        "content": "<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>",
        "id": 323026856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674482527
    },
    {
        "content": "<p>The Indep/indep names and variants in probability theory were chosen to follow the example of the set definitions Union/union, Inter/inter, etc.(that is use capital letter for an indexed family, small letter for two arguments). They can be changed to use whatever new convention is chosen to replace Union/union.</p>",
        "id": 323027923,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1674482778
    },
    {
        "content": "<p>And is_ortho too</p>",
        "id": 323028216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323026856\">said</a>:</p>\n<blockquote>\n<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>\n</blockquote>\n<p>Would \"BigO\" and \"SmallO\" be too off-putting? It's more verbose than a single letter, but I feel like that might not be so bad.</p>",
        "id": 323028393,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674482881
    },
    {
        "content": "<p>There is notation for these already. So it is mainly a question of what appears in lemma names</p>",
        "id": 323028540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674482905
    },
    {
        "content": "<p>submit a new character proposal to the Unicode consortium for an upper-case small letter \"o\"?</p>",
        "id": 323029168,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1674483031
    },
    {
        "content": "<p>Like ᴏ?</p>",
        "id": 323029681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483153
    },
    {
        "content": "<p>LATIN LETTER SMALL CAPITAL O</p>",
        "id": 323029769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483176
    },
    {
        "content": "<p>For what it's worth, big-O and little-o are technically actually Ο and ο (big omicron and little omicron), which are at completely different unicode codepoints.</p>",
        "id": 323030623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674483360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323029769\">said</a>:</p>\n<blockquote>\n<p>LATIN LETTER SMALL CAPITAL O</p>\n</blockquote>\n<p>oh right, smallcaps. that would work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 323031280,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1674483512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"563290\">Lukas Miaskiwskyi</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323028393\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323026856\">said</a>:</p>\n<blockquote>\n<p>The big O/little o one is a terrible blow for Lean 4's casing convention. Maybe we need to start over with a different convention.</p>\n</blockquote>\n<p>Would \"BigO\" and \"SmallO\" be too off-putting? It's more verbose than a single letter, but I feel like that might not be so bad.</p>\n</blockquote>\n<p>Don't worry, we'll find a way. I was joking.</p>",
        "id": 323031300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674483517
    },
    {
        "content": "<p>I'm confused, there is no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Seq\">docs#Seq</a> is there?</p>",
        "id": 323031513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483574
    },
    {
        "content": "<p>No but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seq#doc\">docs4#Seq</a></p>",
        "id": 323031584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674483593
    },
    {
        "content": "<p>Oh right, the point being that there is no obvious choice of Mathlib4 name for the old <code>seq</code></p>",
        "id": 323031800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674483639
    },
    {
        "content": "<p>As a tangent: Omicron means \"small o\", the big O is actually Omega</p>",
        "id": 323624334,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674702978
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lim\">docs#lim</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lim\">docs#Lim</a></p>",
        "id": 323634014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706168
    },
    {
        "content": "<p>I'm using <code>lim_under</code> and <code>lim</code> for now</p>",
        "id": 323634029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706191
    },
    {
        "content": "<p>These defs are very rarely used in <code>mathlib</code>.</p>",
        "id": 323634037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674706200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/323624334\">said</a>:</p>\n<blockquote>\n<p>As a tangent: Omicron means \"small o\", the big O is actually Omega</p>\n</blockquote>\n<p>No, big O and  Omega are different.</p>",
        "id": 323668859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674724844
    },
    {
        "content": "<p>I mean literally interpreting the greek name, not related to the big O notation thing</p>",
        "id": 323672530,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674725945
    },
    {
        "content": "<p>?? big and little omicron exist (and look like O and o), but the big and little omega are Ω and ω. So I don't understand your claim here.</p>",
        "id": 323820957,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674761282
    },
    {
        "content": "<p>He's saying that omicron means \"o micron\", that is \"small o\", and similarly \"o mega\" means \"big o\" in greek</p>",
        "id": 323821176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674761349
    },
    {
        "content": "<p>Ah, got it.</p>",
        "id": 323821244,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674761376
    },
    {
        "content": "<p>Probably, we should add <code>Coprod</code> to the list of exceptions.</p>",
        "id": 324465922,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675012730
    },
    {
        "content": "<p>I think the weird thing here is that big O and small o are really just standalone “symbols” rather than “spelled” alphanumeric names (that is, their names are given by the glyphs themselves rather than what words those glyphs spell)…so imo they should either</p>\n<ol>\n<li>\n<p>be described alphanumerically (<code>BigO</code> and <code>SmallO</code>, as suggested earlier)</p>\n</li>\n<li>\n<p>be referred to as <code>𝑂</code> and <code>𝑜</code> (to use a glyph that’s distinct from alphanumeric characters)</p>\n</li>\n</ol>",
        "id": 324470387,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675015167
    },
    {
        "content": "<p>BTW, is it hard <strong>not</strong> to replace <code>Iic</code> etc with <code>iic</code> etc in lemma names in <code>mathport</code>?</p>",
        "id": 324501244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036174
    },
    {
        "content": "<p>When I'm porting a file about intervals, I start with searches like <code>_i</code> -&gt; <code>_I</code> (ask y/n)</p>",
        "id": 324501309,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036210
    },
    {
        "content": "<p>Yury, a regexp search and replace does this instantly with no need for yes/no. <code>i\\([ico]\\)\\([ico]\\)</code> and just map it to <code>I\\1\\2</code>. Of course, if mathport can do it easily all the better.</p>",
        "id": 324504226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038664
    },
    {
        "content": "<p>This could have false positives, but I think they are relatively unlikely.</p>",
        "id": 324504323,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038726
    },
    {
        "content": "<p>Sometimes there is <code>ici</code> in a word.</p>",
        "id": 324504351,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038760
    },
    {
        "content": "<p>Yes, but I think it's easier to just hope and catch the ones that stick out after the fact, because a stray <code>I</code> completely out of place will be easy to catch.</p>",
        "id": 324504415,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038821
    },
    {
        "content": "<p>Even <code>icc</code> is possible, just not terribly likely.</p>",
        "id": 324504481,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038856
    },
    {
        "content": "<p>I prefer to do this search (and some similar searches) in the y/n mode.</p>",
        "id": 324504483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038859
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 324504488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675038866
    },
    {
        "content": "<p>E.g., <code>sUnion</code> -&gt; <code>union_s</code>, then <code>Union</code> -&gt; <code>union_i</code> (it is not replaced automatically in some dot notation and <code>simp</code>/<code>rw</code>)</p>",
        "id": 324504548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/324501244\">said</a>:</p>\n<blockquote>\n<p>BTW, is it hard <strong>not</strong> to replace <code>Iic</code> etc with <code>iic</code> etc in lemma names in <code>mathport</code>?</p>\n</blockquote>\n<p>We would need to update the <code>decapitalize</code> function in mathport. Shouldn't be too hard.</p>",
        "id": 324534680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675060874
    },
    {
        "content": "<p>I need to give a seminar talk this morning. After lunch I'll be back</p>",
        "id": 324534696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675060886
    },
    {
        "content": "<p>I know I've seen this <code>Icc</code> decapitalization happening, but can you point to a specific example?</p>",
        "id": 324541043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064087
    },
    {
        "content": "<p>E.g., I fixed a lot of these in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1820\">!4#1820</a></p>",
        "id": 324541406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675064260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as resolved.</p>",
        "id": 324569431,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675073910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> has marked this topic as unresolved.</p>",
        "id": 324569815,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675074035
    },
    {
        "content": "<p>Oops, sorry.</p>",
        "id": 324569844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675074044
    },
    {
        "content": "<p>Thanks, I will look into it.</p>",
        "id": 324777864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675113127
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/225\">https://github.com/leanprover-community/mathport/pull/225</a></p>",
        "id": 324888328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675165139
    },
    {
        "content": "<p>Here are some more name/name parts that are not necessarily distinguished by capitalization, but were nevertheless capitalized in Lean 3:</p>\n<ul>\n<li><code>End</code>, as in e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End_algebra_map_is_unit_inv_apply_eq_iff\">docs#module.End_algebra_map_is_unit_inv_apply_eq_iff</a></li>\n<li><code>C</code> and <code>X</code>, as in polynomials</li>\n</ul>",
        "id": 326871546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675963283
    },
    {
        "content": "<p>I guess <code>End</code> should be lower-cased for the same reason <code>Int</code> is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum.elim_intCast_intCast#doc\">docs4#Sum.elim_intCast_intCast</a></p>",
        "id": 326872275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675963509
    },
    {
        "content": "<p>Or we should move that into the <code>Module.End</code> namespace</p>",
        "id": 326872481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675963565
    },
    {
        "content": "<p>FWIW I think the logic behind the Lean 3 name is that, on paper, you would never write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">d</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{end}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">end</span></span></span></span></span>, and you would also never say \"end\".</p>",
        "id": 326875567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675964450
    },
    {
        "content": "<p><del>Isn't <code>end</code> a reserved word?</del> I see, you're talking about parts of larger names.</p>",
        "id": 326979954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676013909
    },
    {
        "content": "<p>I'm now porting the asymptotics file, so we need to make decisions regarding <code>is_O</code> and <code>is_o</code>. I like Thomas's suggestions here below, but if I had to choose one I would go for different glyphs. Can we have a brief discussion and then a poll?<br>\n<span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/324470387\">said</a>:</p>\n<blockquote>\n<p>I think the weird thing here is that big O and small o are really just standalone “symbols” rather than “spelled” alphanumeric names (that is, their names are given by the glyphs themselves rather than what words those glyphs spell)…so imo they should either</p>\n<ol>\n<li>\n<p>be described alphanumerically (<code>BigO</code> and <code>SmallO</code>, as suggested earlier)</p>\n</li>\n<li>\n<p>be referred to as <code>𝑂</code> and <code>𝑜</code> (to use a glyph that’s distinct from alphanumeric characters)</p>\n</li>\n</ol>\n</blockquote>",
        "id": 348524828,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681234338
    },
    {
        "content": "<p>For glyphs that I think would be nice I suggest <code>𝓞</code> and <code>𝓸</code> (<code>\\MCO</code> and <code>\\MCo</code>).</p>",
        "id": 348530250,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681236049
    },
    {
        "content": "<p>For ease of typing I'd go for spelling out <code>bigO</code> and <code>littleO</code> (which from my experience on Maths Stack Exchange is more prevalent than <code>smallO</code>)</p>",
        "id": 348536484,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681237986
    },
    {
        "content": "<p>I don't think that's a strong argument, we can always make <code>\\bigO</code> type whatever glyph we pick</p>",
        "id": 348536815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681238103
    },
    {
        "content": "<p>The calligraphic Os I equally like though</p>",
        "id": 348536914,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681238147
    },
    {
        "content": "<p>I've sometimes used them in my MSE answers</p>",
        "id": 348537064,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681238199
    },
    {
        "content": "<p>(but usually only if the question also uses the same style for the Os; obviously, that site being TeX-based, and there being no universal formatting style, typing a plain O is much faster than typing <code>\\mathcal O</code>)</p>",
        "id": 348537491,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681238338
    },
    {
        "content": "<p>Note that we're already using <code>𝓞</code> in locale <code>number_field</code> to mean \"ring of integers\". There is a nonzero chance that an analytic number theorist might want to use big-O notation and number fields at some point in the future.</p>",
        "id": 348538517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681238668
    },
    {
        "content": "<p>Thanks Kevin, do you have an alternate suggestion for big/little O?</p>",
        "id": 348538697,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681238744
    },
    {
        "content": "<p>Still, my heart is going with spelling the symbols out</p>",
        "id": 348538698,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681238744
    },
    {
        "content": "<p>(.. Something about using calligraphic O's for the actual definition names feels .. wrong .. <code>bigO</code> and <code>littleO</code> seems fine for the definitions, and if there's interest in calligraphic O's then we can have them as notation..)</p>",
        "id": 348538708,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681238749
    },
    {
        "content": "<p>Note, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/lp_space.html#mem_%E2%84%93p\">docs#mem_ℓp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/function/lp_space.html#measure_theory.mem_%E2%84%92p\">docs#measure_theory.mem_𝓛p</a></p>",
        "id": 348538794,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681238770
    },
    {
        "content": "<p>my heart still trembles a little at the thought of forgetting which font O means big O <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 348539412,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681238970
    },
    {
        "content": "<p>That's fixed by just having <code>\\bigO</code> for input.</p>",
        "id": 348539466,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681238997
    },
    {
        "content": "<p>Oh, interestingly Kevin, since this isn't notation it shouldn't actually conflict, but someone tell me if I'm misunderstanding parsing.</p>",
        "id": 348539587,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681239030
    },
    {
        "content": "<p>(Although I admit it would be confusing.)</p>",
        "id": 348539624,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681239051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/348538697\">said</a>:</p>\n<blockquote>\n<p>Thanks Kevin, do you have an alternate suggestion for big/little O?</p>\n</blockquote>\n<p>I am hoping that this is one of those questions where we can just make some random decision and then if people are annoyed by it we can change it later :-)</p>",
        "id": 348539632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681239056
    },
    {
        "content": "<p>I agree with Jireh, I don't expect there to actually be a conflict</p>",
        "id": 348539680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681239067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/348538517\">said</a>:</p>\n<blockquote>\n<p>There is a nonzero chance that an analytic number theorist might want to use big-O notation and number fields at some point in the future.</p>\n</blockquote>\n<p>To such a theorist, are both symbols \"big O\"?</p>",
        "id": 348539788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681239107
    },
    {
        "content": "<p>I always type the ring of integers in LaTeX as <code>O_K</code></p>",
        "id": 348539978,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681239166
    },
    {
        "content": "<p>So for me, it is not true that both symbols are <code>\\mathcal O</code></p>",
        "id": 348540067,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681239189
    },
    {
        "content": "<p>one other small point of contention for including symbols in definition names: docgen search doesn't know of the equivalence of \"big O\" and <code>\\bigO</code>, and it seems very complicated to support</p>",
        "id": 348540345,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681239288
    },
    {
        "content": "<p>I get around that input problem with m17n-lean, but I understand it isn't for everyone.</p>",
        "id": 348540516,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681239355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/names.20distinguished.20only.20by.20case/near/348538708\">said</a>:</p>\n<blockquote>\n<p><code>bigO</code> and <code>littleO</code> seems fine for the definitions</p>\n</blockquote>\n<p>I think this is the best suggestion so far.</p>",
        "id": 348540758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681239436
    },
    {
        "content": "<p>I think the reason we're not using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>K</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in Lean number theory to mean the integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is simply that we were unable to make this notation work. In algebraic geometry we also use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to mean the structure sheaf of the scheme <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and when I was doing some sheaves of modules stuff in my alg geom graduate lectures I used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`𝓞</span><span class=\"n\">_</span> <span class=\"bp\">`</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">TOP</span><span class=\"o\">))</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">X.presheaf.obj</span> <span class=\"n\">U</span>\n</code></pre></div>\n<p>so I could at least write <code>𝓞_ X</code>. Eric, regarding analytic number theorists interested in number fields -- I would imagine that the context always made things completely clear in practice.</p>",
        "id": 348540811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681239450
    },
    {
        "content": "<p>The only conceivable theorem I can conceive regarding analytic num-theorists working on number fields is Chebotarev's density theorem</p>",
        "id": 348541740,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681239704
    },
    {
        "content": "<p>for my two cents, I think it would be much nicer to use glyphs! it’s easier to read—less visual clutter, closer to what you’d expect in math—and about as easy to type.</p>\n<p>I also think Unicode mathematical italic O might be worth revisiting; using $O$ for big O notation is at least as common as (or more common than?) using $\\mathcal{O}$, in my experience, and it’s surprisingly distinctive (at least to my eye) among monospace characters (<code>foo bar 𝑂 (n^2 + 50) a x 𝑜 n</code>).</p>\n<p>I don’t have a strong notion of whether it should be the actual identifier or notation, though. Notation would solve the docs problem, but at the cost of essentially two identifiers for the same thing. But as a mathematician, my personal preference would be for it to at least be a glyph in one way or another. :)</p>",
        "id": 348543798,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681240346
    },
    {
        "content": "<p>Thomas, I didn't choose those because they aren't valid tokens (according to my Lean setup).</p>",
        "id": 348543985,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681240417
    },
    {
        "content": "<p>Oh, that’s strange.</p>",
        "id": 348544377,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681240547
    },
    {
        "content": "<p>To be clear, we're talking about <code>is_𝒪 </code> not  𝒪 by itself, right?</p>",
        "id": 348544473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240571
    },
    {
        "content": "<p>Right, it should be <code>is𝓞</code> because it's a <code>Prop</code>.</p>",
        "id": 348544527,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681240595
    },
    {
        "content": "<p>So I don't think it makes sense to make it notation</p>",
        "id": 348544544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240603
    },
    {
        "content": "<p>Well, we do have notation for it too.</p>",
        "id": 348544618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681240626
    },
    {
        "content": "<p>Although we also have <code>=O[f]</code> notation somewhere, right?</p>",
        "id": 348544631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240631
    },
    {
        "content": "<p>Regarding the docs; in mathlib3, the doc search looks in docstrings, so that should find \"big O\"</p>",
        "id": 348544764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240677
    },
    {
        "content": "<p><code>f =O[l] g</code> means <code>is𝓞 l f g</code></p>",
        "id": 348544834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681240689
    },
    {
        "content": "<p>Of course, we could change the glyphs in the notation too, but this isn't as pressing.</p>",
        "id": 348544930,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681240717
    },
    {
        "content": "<p>Perhaps the existence of notation is an argument against using the short names</p>",
        "id": 348544946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240726
    },
    {
        "content": "<p>We could have had a lemma <code>«+» _comm</code> but we decided to call it <code>add_comm</code> instead</p>",
        "id": 348545060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681240769
    },
    {
        "content": "<p>Tangent, but…why isn’t e.g. <code>𝑜</code> a valid token? Wouldn’t we expect it to be? (Maybe this should be a new thread…)</p>",
        "id": 348545249,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681240811
    },
    {
        "content": "<p>It works fine as notation, interestingly. Not sure what characters are allowed in identifiers.</p>",
        "id": 348545459,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681240887
    },
    {
        "content": "<p>Poked around a bit—I guess it’s simply not in the Unicode blocks specified in src/Init/Meta.lean. (Its exclusion doesn’t seem accidental since adjacent blocks are included, so I figure a conscious decision was made at some point.)</p>",
        "id": 348547437,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681241522
    },
    {
        "content": "<p>/poll naming for <code>is_O</code>, <code>is_o</code> and <code>is_O_with</code><br>\nIs𝓞, Is𝓸, Is𝓞With<br>\nIsBigO, IsLittleO, IsBigOWIth</p>",
        "id": 348557948,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681245455
    },
    {
        "content": "<p>Note that the above poll is just for <em>naming</em> not for <em>notation</em>. If we want to consider any changes in notation that can be a separate poll (but there is no need for new notation currently).</p>",
        "id": 348558058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681245498
    },
    {
        "content": "<p>The poll seems a little one-sided <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, so I've pushed to <a href=\"https://github.com/leanprover-community/mathlib4/pull/3393\">!4#3393</a> with the changes. It's ready for review.</p>",
        "id": 348567881,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681250010
    }
]