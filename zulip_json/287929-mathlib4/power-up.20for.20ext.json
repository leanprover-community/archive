[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5191\">!4#5191</a> and <a href=\"https://github.com/leanprover/std4/pull/156\">https://github.com/leanprover/std4/pull/156</a> provide a power-up to the <code>ext</code> tactic, restoring mathlib3-like capability.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5191\">!4#5191</a> is far from exhaustive in the changes we would then be able to make in mathlib4, but it is indicative of what we'd be able to do. (Maybe it represents fixing 10% of the <code>ext</code> regressions?)</p>\n<p>The PR to std4 works by keeping tracking of two discrimination trees. The first behaves just as with the current behaviour of <code>ext</code>. The second uses <code>whnf</code> both when generating the tree and looking up theorems. Then <code>ext</code> preferentially uses any available results from looking up in the first tree, falling back to looking up in the second tree.</p>\n<p>(Previously it had been suggested that we just fall back to Lean3's behaviour of having a single giant bucket. This should be much more performant than that.)</p>\n<p>I don't think there is any performance concern (on the assumption that we want this behaviour: certainly this results in <code>ext</code> trying more theorems, but the lookup itself should be very fast still), but <code>!bench</code> hasn't done anything 12 hours later so I can't prove this to you. If we'd like, there's an easy performance improvement of not doing the second discrimination tree lookup until we've exhausted all (any?) results from the first one. But I doubt this is actually relevant in practice.</p>",
        "id": 367285884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687057303
    },
    {
        "content": "<p>I don't really like this change, it is doing full whnf on the term without \"asking for permission\" first, which has been known to cause problems in the past (the most recent example being <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/366146522\">this</a>) and it eventually seems to come up no matter where we do it. It is also not very principled to only whnf the head of the term and not everything else; this is basically reverting to the lean 3 behavior of indexing only on the head which causes problems when the head is something uninteresting and the actual dispatch is somewhere in a subterm.</p>",
        "id": 367292394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687061849
    },
    {
        "content": "<p>Could you give an example of a prototypical problem where this extra strong <code>ext</code> would help?</p>",
        "id": 367292529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687061948
    },
    {
        "content": "<p>Mario, all of the changes in 5191 are undoing regressions caused by this change in the behavior in ext, and there are many many more.</p>",
        "id": 367296036,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064147
    },
    {
        "content": "<p>I'm away from the computer at the moment so won't pick out a concrete example from those, but the two situations that most annoy me in the category theory library are:</p>",
        "id": 367296132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064219
    },
    {
        "content": "<ol>\n<li>Every category instance needs a new ext lemma for the morphisms, as ext won't look through the category.Hom definition.</li>\n</ol>",
        "id": 367296200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064257
    },
    {
        "content": "<ol start=\"2\">\n<li>We have ext lemmas for morphisms out of a categorical limit, or into a colimit. We then make (hundreds?) of definitions of something as a limit or colimit, and with the current design we need to restate these ext lemmas every time.</li>\n</ol>",
        "id": 367296382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064370
    },
    {
        "content": "<p>Much of the automation in the category theory library is predicated on having effective ext lemmas, so having to write so many boilerplate ext lemmas (or give up on the automation, which has happened too often during the port) is frustrating.</p>",
        "id": 367296477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064445
    },
    {
        "content": "<p>I'm very happy if there's an alternative change on the ext implementation side, but I'd really like to be able to merge something like <a href=\"https://github.com/leanprover-community/mathlib4/pull/5191\">!4#5191</a> on the mathlib4 side.</p>",
        "id": 367296839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687064569
    },
    {
        "content": "<p>In Lean 3, <code>ext</code> was regularly trying to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.ext\">docs#option.ext</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal%27s\">docs#ennreal's</a>, thus to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure%27s\">docs#measure_theory.measure's</a> unless you stop it with <code>: n</code> or <code>ext1</code>.</p>",
        "id": 367312628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687073386
    },
    {
        "content": "<p>You don't see this in the diff because we didn't drop those <code>: _</code> while porting.</p>",
        "id": 367312715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687073409
    },
    {
        "content": "<p>I mean, you didn't have to fix these because <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 367312772,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687073431
    },
    {
        "content": "<p>Can we have <code>ext</code> and <code>ext!</code> to work in both cases?</p>",
        "id": 367312844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687073479
    },
    {
        "content": "<p>How about <code>ext-</code> and <code>ext</code>? :-) No, that would be fine.</p>",
        "id": 367314290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687074119
    },
    {
        "content": "<p><code>aesop_cat</code> would want to use the more powerful one by default, however.</p>",
        "id": 367314384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687074143
    },
    {
        "content": "<p>I guess an alternative would be to keep just one tactic, but have two variants of the attribute, <code>@[ext]</code> and <code>@[ext!]</code>, and only in the later case do we put that lemma in \"using <code>whnf</code> discrimination tree\".</p>",
        "id": 367314817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687074299
    },
    {
        "content": "<p>Surely we can come up with something that is sufficiently principled, but avoids the current situation which is pretty bad...</p>",
        "id": 367314916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687074337
    },
    {
        "content": "<p>I'm not sure I quite understand the alternative suggestion</p>",
        "id": 367316825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687075034
    },
    {
        "content": "<p>What about marking definitions that <code>ext</code> should be allowed to unfold when trying to find ext-lemma applications? Is that what you meant?<br>\nFor example, in your situation 1 above, it would be the <code>Category</code> (or <code>Quiver</code> or whatever) instance.</p>",
        "id": 367317069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687075134
    },
    {
        "content": "<p>I was thinking instead that <code>NatTrans.ext</code> would be labelled by <code>@[ext!]</code>, as it is by far one of the more common ext lemmas that currently fails to be applied because it is behind a definition. Similarly <code>(co)limit.hom_ext</code>.</p>\n<p>Then lemmas labelled with <code>ext!</code> (and only those) would be put into the second discrimination tree, for which indexing and looking is done underneath a <code>whnf</code>.</p>\n<p>Essentially, I'm proposing only enabling the new behaviour for a subset of lemmas.</p>",
        "id": 367320187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687076183
    },
    {
        "content": "<p>Something that allows labelling <code>Category</code> seems quite complicated to implement. I'd love to see how that would work concretely. :-)</p>",
        "id": 367320318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687076245
    },
    {
        "content": "<p>I certainly agree that something needs to be done. I hit this issue yesterday about an hour before Scott posted and I'd put it on my job list to highlight non-existence of <code>ext!</code>. One thing that one could have is a \"Try this!\" output of <code>ext!?</code> meaning that the <code>ext!</code> could be replaced by what it found.</p>",
        "id": 367322394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687076982
    },
    {
        "content": "<p>I'm not sure that \"Try this\" solves the problem --- <code>aesop_cat</code> really needs the aggressive version (or something functionally equivalent, even it takes extra labelling) in many places.</p>",
        "id": 367323137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687077227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/power-up.20for.20ext/near/367320318\">said</a>:</p>\n<blockquote>\n<p>Something that allows labelling <code>Category</code> seems quite complicated to implement. I'd love to see how that would work concretely. :-)</p>\n</blockquote>\n<p>Hmm, I think it would be much simpler, in principle--just do the reduction to whnf with some custom set of definitions regarded as transparent.<br>\nIn contrast, I don't understand how you implement \"unfold only if it will allow us to apply an <code>ext!</code> lemma\".</p>",
        "id": 367325113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687077827
    },
    {
        "content": "<p>Oh wait, just to make sure--I meant writing <code>@[ext] instance Category MyType</code>, not annotating the <code>class Category</code> itself.</p>",
        "id": 367325355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687077896
    },
    {
        "content": "<p>FWIW I hit exactly your situation 1 recently, and I just assumed that I was meant to write an <code>ext</code> lemma spelled in terms of <code>\\hom</code> if I also wanted <code>ext</code> to work for that spelling.</p>",
        "id": 367325744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687078026
    },
    {
        "content": "<p>Wouldn't it need to be something like <code>@[ext_reducible]</code>, not the <code>@[ext]</code> attribute itself?</p>",
        "id": 367326203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687078153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/power-up.20for.20ext/near/367325113\">said</a>:</p>\n<blockquote>\n<p>In contrast, I don't understand how you implement \"unfold only if it will allow us to apply an <code>ext!</code> lemma\".</p>\n</blockquote>\n<p>Just as with the current implementation: if we don't find a lemma from the main discrimination tree, we do the whnf unfolding and look up in the second discrimination tree (which either has all <code>@[ext]</code> lemmas, as in the current PR, or some subset).</p>",
        "id": 367326453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687078229
    },
    {
        "content": "<p>Probably it should be yes, although we already merge two meanings into <code>@[ext]</code>--\"this is an ext lemma\", \"generate an ext lemma\".</p>",
        "id": 367326463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687078233
    },
    {
        "content": "<p>Can this be resolved by instead adding ext lemmas that unfold hom into the actual morphism?</p>",
        "id": 367331060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687079606
    },
    {
        "content": "<p>Yes -- the current solution is to add lots of extra ext lemmas.</p>",
        "id": 367331162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687079641
    },
    {
        "content": "<p>That's what we're doing in today's mathlib4, and unhappy about.</p>",
        "id": 367331238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687079654
    },
    {
        "content": "<p>I don't think there's any way to write an ext lemma that does nothing but unfold (as opposed to just applying the ext lemma for the underlying type), and it doesn't seem like this would gain anything much over the present situation. It's still an extra ext lemma that needs to be written for almost every category instance, and every definition that is a limit or colimit.</p>",
        "id": 367331636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687079782
    },
    {
        "content": "<p>\"nothing but unfold\" would take a hypothesis of the form <code>h : (show A →* B, from f) = (show A →* B, from g)</code> to conclude <code>f = g</code></p>",
        "id": 367332596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687080074
    },
    {
        "content": "<p>The ugly <code>show</code>s are sort of an indication that either <code>hom</code> should be reducible, or that we need some type-cast functions (or that they already exist and I don't know what they're called!)</p>",
        "id": 367332805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687080138
    },
    {
        "content": "<p>I was initially on board with the \"let's write all the extra ext lemmas\" thing, until I saw what this actually meant on the ground, where I would have had to write really obscure and ugly lemmas to deal with the syntactic abuse that lean 3 <code>ext</code> deals with so well</p>",
        "id": 367339797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687082322
    },
    {
        "content": "<p>I think we should be trying to avoid the syntactic abuse in the first place; we put up with it in lean3 because <code>reducible</code>/<code>semireducible</code> was dealt with pretty randomly by tactics / TC search anyway. Lean 4 appears to be more principled, and teaching tactics to ignore the difference again feels like the wrong direction to go in</p>",
        "id": 367341916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687082917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the ext lemmas I describe above could be easily generated by a <code>category_ext</code> attribute</p>",
        "id": 367342016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687082948
    },
    {
        "content": "<p>Okay: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5228\">https://github.com/leanprover-community/mathlib4/pull/5228</a> goes in the opposite direction of my proposal starting this thread, and instead doubles down on adding repetitions of <code>NatTrans.ext</code>, and then performs the resulting available cleanups.</p>\n<p>I certainly think we should do this, regardless of how we eventually either generate or obviate the need for the extra lemmas, so review and merge welcome. :-)</p>",
        "id": 367367495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687090094
    },
    {
        "content": "<p>I think these might be worth a library note, so that they're easy to find again if we come up with a nicer solution later</p>",
        "id": 367374868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687092116
    },
    {
        "content": "<p>Okay, tracking issue created at <a href=\"https://github.com/leanprover-community/mathlib4/issues/5229\">https://github.com/leanprover-community/mathlib4/issues/5229</a>, and all the new lemmas in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5228\">!4#5228</a> link to it. There are probably another 100 in library, but ... later!</p>",
        "id": 367376146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687092499
    }
]