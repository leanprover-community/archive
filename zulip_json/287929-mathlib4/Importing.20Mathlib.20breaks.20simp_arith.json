[
    {
        "content": "<p>This example works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l₀</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₀.length</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l₀.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp_arith</span>\n</code></pre></div>\n<p>However, if I add an import of <code>Mathlib.Data.List.Basic</code>, the <code>simp_arith</code> tactic above stops working. The goal is converted to <code>⊢ Zero.zero ≤ List.length tail✝</code> and it remains unsolved. Oddly, using <code>simp</code> instead of <code>simp_arith</code> makes it work with the import, but it doesn't work without the import.</p>\n<p>Is this normal or expected?</p>",
        "id": 404515039,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1701132505
    },
    {
        "content": "<p>(Please move to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> if more appropriate... I meant to post there)</p>",
        "id": 404515176,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1701132567
    },
    {
        "content": "<p>This is unfortunate, but not totally surprising. It appears that Mathlib has added simp lemmas that prevent <code>simp_arith</code> from working. As Mathlib essentially never uses <code>simp_arith</code>, this perhaps just hasn't been noticed.</p>",
        "id": 404538700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701142845
    },
    {
        "content": "<p>I've found that adding the following simp lemma, <code>simp_arith</code>works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">Zero.zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Does this look like something that should be in Mathlib?</p>",
        "id": 404552513,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1701151286
    },
    {
        "content": "<p>Looks plausible!</p>",
        "id": 404555838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701152921
    },
    {
        "content": "<p>That statement looks like nonsense to me, it would elaborate as a tautology in most of mathlib</p>",
        "id": 404567088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701158496
    },
    {
        "content": "<p>Your claim would contradict the claim that it fixes the problem above, right?</p>",
        "id": 404567327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701158565
    },
    {
        "content": "<p>We did have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.nat_zero_eq_zero\">docs3#nat.nat_zero_eq_zero</a></p>",
        "id": 404567348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701158573
    },
    {
        "content": "<p>We still have that, right? But there the issue is with an inductive constructor that happens to be named <code>zero</code></p>",
        "id": 404568204,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701158936
    },
    {
        "content": "<p>Is <code>zero_is_zero</code> about <code>Zero</code> vs <code>OfNat</code>?</p>",
        "id": 404568254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701158968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Importing.20Mathlib.20breaks.20simp_arith/near/404567327\">said</a>:</p>\n<blockquote>\n<p>Your claim would contradict the claim that it fixes the problem above, right?</p>\n</blockquote>\n<p>I guess my claim was that the message above is missing the context needed to be actionable, and the lemma elaborates in different ways depending on which file it goes in. I now realize that's also wrong.</p>",
        "id": 404569852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701159676
    },
    {
        "content": "<blockquote>\n<p>As Mathlib essentially never uses simp_arith, this perhaps just hasn't been noticed.</p>\n</blockquote>\n<p><code>simp_arith</code> is used as part of the default <code>decreasing_tactic</code>,  so I hope this isn't broken :-)</p>",
        "id": 404579532,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701163391
    },
    {
        "content": "<p>It certainly is broken with mathlib see <a href=\"https://github.com/leanprover-community/mathlib4/pull/7631\">#7631</a></p>",
        "id": 404637545,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701178728
    },
    {
        "content": "<p>And <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Function.20on.20Tree.20type\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20Function.20on.20Tree.20type</a></p>",
        "id": 404637610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701178758
    },
    {
        "content": "<p>Why is <code>Zero.zero</code> ever appearing in a goal in the first place?</p>",
        "id": 404649472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701182388
    },
    {
        "content": "<p>Loogle suggests <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddLocalization.zero_def#doc\">docs#AddLocalization.zero_def</a> (which should be fixed) and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.NormNum.isNat_zero#doc\">docs#Mathlib.Meta.NormNum.isNat_zero</a> (which might be an optimization?) are the only things that mention it</p>",
        "id": 404649616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701182419
    },
    {
        "content": "<p>I guess simp arith tries to unfold as much as it can and gets stuck</p>",
        "id": 404650232,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701182614
    },
    {
        "content": "<p>Here's a simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span> <span class=\"c1\">-- causes simp_arith to fail to solve goal below</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n</code></pre></div>\n<p>With tracing I found that the import causes simp to invoke <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_add_iff_pos_left#doc\">docs#lt_add_iff_pos_left</a> , which is defined for  <code>[AddZeroClass α]</code>. This seems to be what causes <code>Zero.zero</code> to appear. At that point it is like <a href=\"https://github.com/leanprover-community/mathlib4/pull/7631\">#7631</a> and simp can't prove <code>Zero.zero ≤ n</code></p>",
        "id": 404691038,
        "sender_full_name": "Francisco Giordano",
        "timestamp": 1701195555
    },
    {
        "content": "<p><del>Oh, is the problem <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddZeroClass.add_zero#doc\">docs#AddZeroClass.add_zero</a> ?</del></p>",
        "id": 404705766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701200686
    }
]