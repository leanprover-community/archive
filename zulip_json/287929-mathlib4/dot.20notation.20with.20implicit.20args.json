[
    {
        "content": "<p>Is it intentional that in Lean 4 the following works?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">List.tmp</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">tmp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 327897316,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676419064
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.erase_add_left_pos#doc\">docs4#Multiset.erase_add_left_pos</a> for a real-world example.</p>",
        "id": 327897402,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676419108
    },
    {
        "content": "<p>In Lean 3, <code>t.erase_add_left_pos</code> used <code>t</code> for the first explicit argument. In Lean 4, it uses <code>t</code> for the first implicit argument.</p>",
        "id": 327897447,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676419141
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1629\">Here's an issue</a> related to this, but with how its using implicit arguments interacts with dot notation for pi types.</p>",
        "id": 327903294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676422140
    },
    {
        "content": "<p>The new behavior is much nicer when it comes to instances, because you can just project out of them as though they were structures.</p>",
        "id": 327934530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676443923
    }
]