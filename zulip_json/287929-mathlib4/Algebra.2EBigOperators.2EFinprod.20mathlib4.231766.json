[
    {
        "content": "<p>Link to PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1766\">mathlib4#1766</a></p>\n<p>Running into strange issues right at the start of the file: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"n\">irreducible_def</span> <span class=\"n\">finsum</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">PLift.down</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"k\">then</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">h.toFinset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i.down</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finsum</span> <span class=\"n\">finsum</span>\n</code></pre></div>\n<p>Throws the error <code>failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Classical.propDecidable', and it does not have executable code</code>. What I find the weirdest is that the error throws the red squiggles onto the docstring of the function.</p>\n<p>Replacing <code>irreducible_def</code> with <code>def</code> and adding an <code>@[irreducible]</code> attribute seems to work, but <code>irreducible_def</code> seems to do more than the attribute, so that's probably not an ideal fix.</p>",
        "id": 322881281,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674404820
    },
    {
        "content": "<p><code>irreducible_def</code> is just a command someone wrote (I think Gabriel), it probably doesn't interact with <code>noncomputable</code> properly yet.</p>",
        "id": 322908484,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674422377
    },
    {
        "content": "<p>Also a notational question: The statements of many theorems in this file contain expressions like <code>∏ᶠ i ∈ s, f i</code> and <code>(∏ᶠ (i) (_h : i = a), f i)</code> which I would like to port to lean4 notation syntax. The product in the BigOperators.Basic does not allow for such expressions currently, so I don't have that to guide me, and we probably don't want to refactor all the theorem statements at this point.</p>\n<p>How would we like the lean4 syntax to be set up for this? For the first one, the <code>macro_rules</code> case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigfinprod</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>seems to reproduce the lean3 behavior, but I don't know if that's good design.</p>\n<p>The second one I'm trying to match with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigfinprod_condition</span><span class=\"o\">)</span> <span class=\"s2\">\"∏ᶠ (\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\") (\"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\"), \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigfinprod_condition</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>But that throws a strange  <code>expected ')'</code> error at <code>(α := $u) </code>. Could be that I do not yet fully understand the syntax here.</p>",
        "id": 322991933,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674471950
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> since he mentioned porting the notation to how BigOperators.Basic does it</p>",
        "id": 322992343,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674472068
    },
    {
        "content": "<p>You should be able to build the notation in the same way as the <code>supᵢ</code> notation</p>",
        "id": 322993855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674472593
    },
    {
        "content": "<p>I thought we shouldn't have <code>supr</code> anymore</p>",
        "id": 322999668,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674474398
    },
    {
        "content": "<p>Whoops, I removed the stray <code>r</code></p>",
        "id": 323000158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674474597
    },
    {
        "content": "<p>Thanks for the suggestion, Eric, that sent me on a painful journey of understanding the syntax. What seems to reproduce all the lean3-style notation in this file is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">bigfinprod</span><span class=\"o\">)</span> <span class=\"s2\">\"∏ᶠ \"</span> <span class=\"n\">extBinders</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">bigfinprod</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">satisfies_binder_pred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∏ᶠ</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>And similar for finsum. But that's of course extremely fickle, since now the notation breaks if the user gives a typehint at an unconsidered place. And of course it would be nice to allow arbitrarily many arguments to take the product over, rather than just three. Any easy fixes?</p>",
        "id": 323020262,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674480768
    },
    {
        "content": "<p>What did we do here for docs4#supᵢ?</p>",
        "id": 323060957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674490794
    },
    {
        "content": "<p>Why do we need anything different to what we had <a href=\"https://github.com/leanprover-community/mathlib4/blob/3fbdae49475528e1e4014189f98d217e67ece6da/Mathlib/Order/CompleteLattice.lean#LL99-L111C51\">here</a>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"∏ᶠ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finprod</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 323061251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674490857
    },
    {
        "content": "<p>In the PR, Johan mentioned that using the macro_rules approach allows you to set operator precedence properly, which I suppose <code>notation3</code>doesn't. But other than that, the file works fine without it. And the macro_rules approach in supᵢ does not include iterated applications.  Chris &amp; Johan agreed to fix the notation at a later time, so it is now merged anyway.</p>",
        "id": 323064801,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1674491669
    },
    {
        "content": "<p>A question here, since I'll (hopefullly) be using <code>finsum</code> in class soon: right now it seems that the pretty printer doesn't use finsum/prod notation at all. For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Finprod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑ᶠ</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ ∀ (n : ℕ), (finsum fun k =&gt; finsum fun h =&gt; k) = n * (n + 1) / 2</span>\n</code></pre></div>\n<p>Is there any way I can coax this to display like the input, or is it impossible for now? Unfortunately I can't show students something like <code>finsum fun k =&gt; finsum fun h =&gt; k</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 329444648,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1677076851
    },
    {
        "content": "<p>Hi Rob! It's nice to see you here. You need a unexpander for <code>finsum</code>.</p>",
        "id": 329447023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1677077425
    },
    {
        "content": "<p>I'll try to see if I can write that by imitating other examples.</p>",
        "id": 329447238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1677077477
    },
    {
        "content": "<p>Good to be here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Every week I tell myself the chaos of the semester will die down and I'll have more time to spend here, next week...</p>",
        "id": 329448277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1677077699
    },
    {
        "content": "<p>Thanks! (And I can try myself if you could point me to other examples?)</p>",
        "id": 329448368,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1677077718
    },
    {
        "content": "<p>Here's one example: <a href=\"https://github.com/leanprover-community/mathlib4/blob/88c789ef511f8bf32a7d30ae403e29857748c079/Mathlib/Init/Set.lean#L78-L82\">https://github.com/leanprover-community/mathlib4/blob/88c789ef511f8bf32a7d30ae403e29857748c079/Mathlib/Init/Set.lean#L78-L82</a></p>",
        "id": 329449344,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677077956
    },
    {
        "content": "<p>Another thing that's possible is using <code>delab</code>: <a href=\"https://github.com/dwrensha/lean4-maze/blob/b7b36525dbf48989d09cd89c79703b55343af124/Maze.lean#L160\">https://github.com/dwrensha/lean4-maze/blob/b7b36525dbf48989d09cd89c79703b55343af124/Maze.lean#L160</a></p>\n<p>I don't have a good understanding of when <code>Unexpander</code> or <code>delab</code> is more appropriate.</p>",
        "id": 329449836,
        "sender_full_name": "David Renshaw",
        "timestamp": 1677078067
    },
    {
        "content": "<p>Awesome, thanks David. Unsurprisingly a little tricker than I was hoping! I'm struggling to even parse what pattern I need to unexpand...</p>",
        "id": 329459167,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1677080105
    },
    {
        "content": "<p>I need to give in and admit I'm stumped here -- this is about as far as I got, going off an <code>existsi</code> example, which isn't right.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Finprod</span>\n\n<span class=\"kd\">@[app_unexpander finsum]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandFinsum</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">finsum</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∑ᶠ</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                                               <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Maybe this does need a <code>delab</code>? Somehow we need to access the type of <code>h</code>? But I'm copying things without really understanding here.</p>",
        "id": 336509969,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1677251935
    },
    {
        "content": "<p>Yes, I think a <code>delab</code> is necessary since the unexpander can only access the information that is already present in the syntax, and the type of <code>h</code> is not in the syntax. Here is what I came up with so far for <code>Finset.sum</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[local delab app.Finset.sum]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabFinsetSum</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppNumArgs</span> <span class=\"bp\">==</span> <span class=\"mi\">5</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getArg</span><span class=\"bp\">!</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isAppOf'</span> <span class=\"bp\">``</span><span class=\"n\">Finset.univ</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getArg</span><span class=\"bp\">!</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLambda</span>\n  <span class=\"n\">withNaryArg</span> <span class=\"mi\">4</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">withBindingDomain</span> <span class=\"n\">delab</span>\n    <span class=\"n\">withBindingBodyUnusedName</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338334136,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1677506433
    }
]