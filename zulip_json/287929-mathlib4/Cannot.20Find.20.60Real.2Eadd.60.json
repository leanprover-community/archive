[
    {
        "content": "<p>The code below gives me the error <code>unknown constant 'Real.add'</code>, but <code>Real.add</code> is defined <a href=\"https://github.com/leanprover-community/mathlib4/blob/e29251b7e7eed60a02c90507a936d226c879c230/Mathlib/Data/Real/Basic.lean#L84\">here</a>. Did I miss something? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Real.add</span>\n</code></pre></div>",
        "id": 402041739,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699985765
    },
    {
        "content": "<p>It's marked <code>private</code>, which means you're not allowed to reference it outside that module.</p>",
        "id": 402041974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699985855
    },
    {
        "content": "<p>But the code below works. I thought marking something with <code>private</code> just means we need to use its fully qualified name for accessing it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Foo</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.bar</span>\n</code></pre></div>",
        "id": 402042150,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699985913
    },
    {
        "content": "<p><code>protected</code> is for fully qualified names.</p>\n<p>I guess I don't know the exact semantics of <code>private</code>, but definitely outside the module you can't refer to it anymore. In your example you're still in the same module. (A module isn't a namespace.)</p>",
        "id": 402042316,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699985988
    },
    {
        "content": "<p>If you want to circumvent the fact that the designers of Real made <code>Real.add</code> private, you can indirectly refer to it using <code>Real.instAddReal.1</code>, since it's the field inside the <code>Add Real</code> instance. But you're supposed to use <code>+</code> instead of <code>Real.add</code>.</p>",
        "id": 402042537,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699986063
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>-ing, why do you need to refer to <code>Real.add</code>?</p>",
        "id": 402042609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699986088
    },
    {
        "content": "<p>Ah, I see. I'll try the workaround. Thanks</p>\n<blockquote>\n<p>why do you need to refer to Real.add?</p>\n</blockquote>\n<p>I'm writing some metaprogramming code to translate Lean expressions of real numbers to SMT queries.</p>",
        "id": 402042832,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699986156
    },
    {
        "content": "<p>Why not match against <code>HAdd.hAdd</code>? (aka <code>+</code>)</p>",
        "id": 402043003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699986210
    },
    {
        "content": "<p>I guess maybe in my use case I just need to use <code>`Real.add</code> instead of <code>``Real.add</code>.</p>",
        "id": 402043199,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699986282
    },
    {
        "content": "<blockquote>\n<p>Why not match against HAdd.hAdd? (aka +)</p>\n</blockquote>\n<p>I'll also try that. Thanks!</p>",
        "id": 402043435,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699986372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cannot.20Find.20.60Real.2Eadd.60/near/402043199\">said</a>:</p>\n<blockquote>\n<p>I guess maybe in my use case I just need to use <code>`Real.add</code> instead of <code>``Real.add</code>.</p>\n</blockquote>\n<p>I don't think that would work -- I believe the way <code>private</code> works is that it gets a name that's not a normal identifier, so you can't refer to it.</p>",
        "id": 402043668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699986467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584504\">Kaiyu Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cannot.20Find.20.60Real.2Eadd.60/near/402043435\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why not match against HAdd.hAdd? (aka +)</p>\n</blockquote>\n<p>I'll also try that. Thanks!</p>\n</blockquote>\n<p>Better yet would be to use <code>Qq</code>, as <code>let ~q($a + $b) := e</code></p>",
        "id": 402044112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699986614
    },
    {
        "content": "<p>In particular, <code>x + y</code> is <code>@HAdd.hAdd ℝ ℝ ℝ (@instHAdd ℝ Real.instAddReal) x y</code>, so you can look for <code>@HAdd.hAdd _ _ _ (@instHAdd _ Real.instAddReal) x y</code> (each <code>_</code> is implied by <code>Real.instAddReal</code>)</p>",
        "id": 402044117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699986615
    },
    {
        "content": "<p>(Eric's Qq suggestion could work too. We sent our messages at the exact same time.)</p>",
        "id": 402044225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699986669
    },
    {
        "content": "<p>I'll try them. Thank you both!</p>",
        "id": 402044439,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699986735
    },
    {
        "content": "<p>Here's a matcher for real addition. It's not as nice looking as a Qq implementation, and it's less resistant to any changes to the library, but here it is in case it's helpful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- Given `x + y` of Reals, returns `(x, y)`. Otherwise returns `none`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.realAdd</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">HAdd.hAdd</span> <span class=\"mi\">6</span>\n  <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">e.appFn</span><span class=\"bp\">!.</span><span class=\"n\">appFn</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inst.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">instHAdd</span> <span class=\"mi\">2</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inst.appArg</span><span class=\"bp\">!.</span><span class=\"n\">isConstOf</span> <span class=\"bp\">``</span><span class=\"n\">Real.instAddReal</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e.appFn</span><span class=\"bp\">!.</span><span class=\"n\">appArg</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">e.appArg</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"e = {e}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">e.realAdd</span><span class=\"bp\">?</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Got {r}\"</span>\n\n<span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- Got none</span>\n<span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- Got some ((1, 2))</span>\n</code></pre></div>",
        "id": 402046146,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699987306
    },
    {
        "content": "<p>I would recommend avoiding using <code>Qq</code> for pattern matching. That part of the Qq implementation is pretty spicy (exciting macros, unclear performance), and we're still thinking about its future.</p>",
        "id": 402089561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700004536
    },
    {
        "content": "<p>Kyle's solution is great.</p>",
        "id": 402089584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700004546
    },
    {
        "content": "<p>Kyle's solution has a pretty major flaw; it matches instances syntactically rather than up to defeq</p>",
        "id": 402089634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700004579
    },
    {
        "content": "<p>So if you have <code>@AddMonoid.toAdd Real.instAddMonoid</code> instead of <code>Real.instAddReal</code> then it doesn't work</p>",
        "id": 402089737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700004608
    },
    {
        "content": "<p>(No offence meant Kyle; your code is fine, but it demonstrates just how easy it is to fall into that instance trap when not using Qq if even a metaproramming expert makes that mistake)</p>",
        "id": 402089822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700004652
    },
    {
        "content": "<p>I'm offended ;-)</p>",
        "id": 402090087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700004806
    },
    {
        "content": "<p>Though I will admit that <code>Qq</code> is not playing ball at all here</p>",
        "id": 402090706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700005141
    },
    {
        "content": "<p>This seems to work, but I can't be sure it's correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n\n<span class=\"sd\">/-- Given `x + y` of Reals, returns `(x, y)`. Otherwise returns `none`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.realAdd</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Real</span> <span class=\"o\">[])</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">none</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"e = {e}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">e.realAdd</span><span class=\"bp\">?</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Got {r}\"</span>\n\n<span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- Got none</span>\n<span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"c1\">-- Got some ((1, 2))</span>\n</code></pre></div>",
        "id": 402091435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700005518
    },
    {
        "content": "<p>I looked at the generated code and it seems like it's doing the right thing.</p>",
        "id": 402091626,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700005610
    },
    {
        "content": "<p>Here's my version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given `x + y` of Reals, returns `(x, y)`. Otherwise fail. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.realAdd</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">Level.succ</span> <span class=\"n\">Level.zero</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">))⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402091823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700005715
    },
    {
        "content": "<p>It's a shame Qq doesn't let that be combined into a single pattern match</p>",
        "id": 402092309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700005964
    },
    {
        "content": "<p>This looks like a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the Qq bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span>\n</code></pre></div>",
        "id": 402099361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700008527
    },
    {
        "content": "<p>It was a one-character fix: <a href=\"https://github.com/leanprover-community/quote4/pull/26\">quote4#26</a></p>",
        "id": 402107336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700010990
    },
    {
        "content": "<p>With that change, you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given `x + y` of Reals, returns `(x, y)`. Otherwise returns `none`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.realAdd</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">Level.succ</span> <span class=\"n\">Level.zero</span><span class=\"o\">,</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402107517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700011064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8415\">#8415</a> is the Mathlib bump for this.</p>",
        "id": 402114062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700013640
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/quote4/pull/21\">quote4#21</a> is a bit too spicy for me</p>",
        "id": 402117323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700014777
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2880\">lean4#2880</a> makes it so you can write <code>1</code> instead of <code>Level.succ Level.zero</code> there</p>",
        "id": 402234579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700053698
    }
]