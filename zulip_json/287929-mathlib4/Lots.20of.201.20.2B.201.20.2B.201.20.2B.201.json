[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rogue.20.60Int.2EofNat.60.20maxing.20out.20recursion.20depth.20for.20decimals/near/324087061\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Rogue.20.60Int.2EofNat.60.20maxing.20out.20recursion.20depth.20for.20decimals/near/323990836\">said</a>:</p>\n<blockquote>\n<p>One of the reasons might be the following: <code>simp</code> expands natural numbers into  <code>1 + 1 + 1 + ... + 1</code> when they appear as arguments to the argument of <code>Int.ofNat</code> (sometimes). For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>leaves us with the goal</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is certainly a problem (which has been mentioned elsewhere although I don't think it has a dedicated issue for it), although I don't think it is specific to <code>Int.ofNat</code>. I think you can cause the same behavior using <code>Nat.cast</code>, it's a problem in <code>simp</code> and/or our simp set.</p>\n</blockquote>\n<p>Some tactics currently produce a lot of 1 + 1 + 1 ...</p>\n<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> were just discussing this in the context of making <code>norm_num</code> work for <code>OfScientific</code>.  And <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and I <a href=\"#narrow/stream/287929-mathlib4/topic/zify.20bugs.3F/near/321257973\">encountered this</a> when using <code>zify</code>.</p>\n<p>Mario pointed out that we should have a dedicated issue for this, which I would be happy to open, except that I don't understand the underlying cause.  Mario, do you mean that somewhere there is a lemma wrongly tagged <code>@[simp]</code>, and this needs to be tracked down?</p>",
        "id": 324116044,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674841403
    },
    {
        "content": "<p>My working theory is that simp is applying the lemma <code>\\u (n + 1) = \\u n + 1</code> to <code>\\u 5</code> by solving the unification problem <code>5 =?= ?n + 1</code> -&gt; <code>?n := 4</code>. This seems to be over-aggressive in this case, although I can see use cases for it when unfolding recursive functions on numerals</p>",
        "id": 324116581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674841539
    },
    {
        "content": "<p>One possible fix is just to say that <code>\\u (n + 1) = \\u n + 1</code> is no longer allowed to be a default simp lemma and it has to be applied explicitly</p>",
        "id": 324116943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674841632
    },
    {
        "content": "<p>Another observation is that this should not be a legal unification at reducible transparency, because <code>4 + 1 = 5</code> is not (should not be?) a reducible <code>rfl</code></p>",
        "id": 324117290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674841727
    },
    {
        "content": "<p>Interesting.  I'd like to keep using <code>simp</code> with lemmas expressing (complicated) functions <code>f (n + 1)</code> in terms of <code>f n</code>, the way we could in mathlib3, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 324118163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674841951
    },
    {
        "content": "<p>So it seems like we want a fix which is targeted to <code>↑</code>.</p>",
        "id": 324118247,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674841978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lots.20of.201.20.2B.201.20.2B.201.20.2B.201/near/324116943\">said</a>:</p>\n<blockquote>\n<p>One possible fix is just to say that <code>\\u (n + 1) = \\u n + 1</code> is no longer allowed to be a default simp lemma and it has to be applied explicitly</p>\n</blockquote>\n<p>Like this, if you think it would work.</p>",
        "id": 324118311,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674841999
    },
    {
        "content": "<p>Although I suppose that in the example i just gave, <code>finset.sum_range_succ</code> was <em>not</em> a simp lemma, I had to provide it explicitly!</p>",
        "id": 324118852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674842142
    },
    {
        "content": "<p>Heather, we can't target <code>↑</code> specifically anymore though, or do you mean <code>Int.ofNat</code>?</p>",
        "id": 324145833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674850537
    },
    {
        "content": "<p>Please take what I wrote as musing rather than a concrete suggestion; I don't understand the mathlib4 coercion setup yet!</p>",
        "id": 324146322,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674850721
    },
    {
        "content": "<p>Here's one possible solution I found. It seems that <code>simp</code> tries <code>Nat.cast_ofNat</code> first, but the synthesized instance doesn't match the inferred instance, so it then tries <code>Nat.cast_succ</code>, which peels off a <code>+ 1</code>. (This is <a href=\"#narrow/stream/287929-mathlib4/topic/Invertible.201.20simps/near/320558233\">the same issue that makes many <code>Invertible</code> lemmas unwieldy</a>.)</p>\n<p>It seems that using type inference instead and changing <code>[NatCast R]</code> to <code>{_ : NatCast R}</code> in the arguments to the <code>Nat.cast_ofNat</code> lemma (in <code>Mathlib.Data.Nat.Cast.Defs</code>) fixes the problem in the couple of cases I've tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Nat.cast_ofNat</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nat.AtLeastTwo</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>However, I know there are performance issues with <code>ofNat</code> (hence <code>norm_num</code>), so I don't know if this is a good solution. (Also it doesn't fix whatever's wrong with the <code>norm_num</code> extension I'm working on, so there's still something going on!)</p>",
        "id": 324165235,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674858292
    },
    {
        "content": "<p>Is there a document that describes how do <code>ofNat</code>, <code>NatCast</code>, <code>Zero</code>, <code>One</code>, <code>Nat.atLeastTtwo</code> etc interact?</p>",
        "id": 324173772,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674860227
    },
    {
        "content": "<blockquote>\n<p>but the synthesized instance doesn't match the inferred instance</p>\n</blockquote>\n<p>I've also noticed that. It seems to be because <code>Nat.cast</code> is not reducible.  And we have two instances for <code>NatCast Int</code>: one with <code>Int.ofNat</code> and one with <code>Nat.cast</code>.  (Where the second of course uses <code>Int.ofNat</code> as well, but it's hidden behind the non-reducible <code>Nat.cast</code> definition.)</p>",
        "id": 324215731,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674873558
    },
    {
        "content": "<blockquote>\n<p>Is there a document that describes how do ofNat, NatCast, Zero, One, Nat.atLeastTtwo etc interact?</p>\n</blockquote>\n<p>Not really.</p>\n<ul>\n<li><code>ofNat</code> is the built-in function used for numeric literals (i.e., it is never applied to <code>x + 1</code> or anything)</li>\n<li><code>NatCast</code> is the coercion <code>Nat → R</code></li>\n<li><code>Zero</code> and <code>One</code> are the neutral elements in additive and multiplicative structures, resp.</li>\n<li>You should be able to write <code>0</code> and <code>1</code> for the neutral elements, so we have <code>[Zero A] : OfNat A (nat_lit 0)</code> and <code>[One M] : OfNat M (nat_lit 1)</code> instances</li>\n<li>You should also be able to write <code>42</code> in a ring, so we have <code>[NatCast R] : OfNat R n</code>.  But that would be a diamond with the <code>0</code> and <code>1</code> instances, so we add an extra <code>[AtLeastTwo n]</code> argument to make sure the instance only gets used for numbers &gt;= 2.  Remember that <code>0</code> and <code>Nat.cast 0</code> are not defeq in general.</li>\n</ul>",
        "id": 324216413,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674873997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lots.20of.201.20.2B.201.20.2B.201.20.2B.201/near/324215731\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but the synthesized instance doesn't match the inferred instance</p>\n</blockquote>\n<p>I've also noticed that. It seems to be because <code>Nat.cast</code> is not reducible.  And we have two instances for <code>NatCast Int</code>: one with <code>Int.ofNat</code> and one with <code>Nat.cast</code>.  (Where the second of course uses <code>Int.ofNat</code> as well, but it's hidden behind the non-reducible <code>Nat.cast</code> definition.)</p>\n</blockquote>\n<p>Interesting! It seems this is a recurring issue. </p>\n<p>Is there a reason that typeclass search doesn’t first try using type inference to get the instance? It seems like it’s going to type-infer the instance and check it for defequality to the synthesized instance when it’s possible to do so anyway, so why doesn’t typeclass search just <em>use</em> the available inferred instance (when it exists) instead of synthesizing something else and failing?</p>",
        "id": 324219330,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674875822
    },
    {
        "content": "<p>Or, is the “right” solution making sure that everything has the right reducibility somehow? (I don’t know if this would take care of the problematic <code>Invertible</code> simp lemmas, though.)</p>",
        "id": 324219528,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674875970
    },
    {
        "content": "<p>Regardless of what we do about the not-absolutely-necessary defeq check in simp, we should still make the instances defeq.  Though I can never quite remember the guidelines here.  Usually we compare instances using semireducible transparency (because they're implicit arguments).  I don't know what's going on here.</p>",
        "id": 324219814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674876186
    },
    {
        "content": "<p>Hmm…in the general case, does this mean micromanaging instances to avoid diamonds? </p>\n<p>It would be helpful if we had some more tools for handling diamonds! I can see a couple of  different overall directions for such tools, but have no idea which, if any, would be useful/unproblematic:</p>\n<ul>\n<li>change typeclass search (or <code>simp</code>?) so that we prefer ordinary type inference to typeclass search for filling <code>[]</code> args when possible, thus choosing the “right” instance whenever we can (would this cause performance issues? could we use some “simple” form of type inference that would be enough in most cases?)</li>\n<li>create linters that search for diamonds (not sure if this is even a tractable problem? or, on the other hand, if it already exists in some capacity?)</li>\n<li>have a way of satisfying such a linter by “establishing” defequality somehow among overlapping instances in the circumstances in which they overlap (do we have this?)</li>\n<li>have a procedure for automatically normalizing any overlapping instances somehow once we know they’re defeq</li>\n</ul>\n<p>Would any of these be useful directions to pursue as a broader project?</p>",
        "id": 324222328,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674878457
    },
    {
        "content": "<p>(Oops, I guess I lost focus…this counts as a separate topic, I think :) )</p>",
        "id": 324222754,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674878802
    },
    {
        "content": "<p>About unification vs typeclass search for <code>simp</code>. I'm porting <code>topology.constructions</code>, and one of the issues I have to work around is that <code>simp</code> can't unfold a definition (e.g., <code>instTopologicalSpaceProd</code>) that takes <code>[TopologicalSpace α]</code> if it is called with an argument which is not the instance <code>infer_instance</code> can find.</p>",
        "id": 324228366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674884130
    }
]