[
    {
        "content": "<p>If you write <code>linarith [h]</code> where <code>h</code> is a term that is not type-correct, but has a metavariable, then <code>linarith</code> will still use the conclusion of <code>h</code> to solve the goal, but then produces a proof with <code>sorry</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">garbage</span><span class=\"o\">]</span> <span class=\"c1\">-- no error, proof accepted with sorry</span>\n<span class=\"c1\">-- expected: unknown identifier `garbage`</span>\n</code></pre></div>",
        "id": 403460690,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700600034
    },
    {
        "content": "<p>Does this still happen with <code>autoImplicit false</code>?</p>",
        "id": 403469073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700603918
    },
    {
        "content": "<p>Hmm, maybe <code>withoutErrToSorry</code> belongs somewhere when elaborating the <code>[]</code> arguments?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"without_err_to_sorry \"</span> <span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutErrToSorry</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">without_err_to_sorry</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">garbage</span><span class=\"o\">]</span>\n                                   <span class=\"c1\">--^^^^^^^ error: unknown identifier 'garbage'</span>\n</code></pre></div>",
        "id": 403469104,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700603937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20bug.20with.20metavariable/near/403469073\">said</a>:</p>\n<blockquote>\n<p>Does this still happen with <code>autoImplicit false</code>?</p>\n</blockquote>\n<p>Just checked now—it still does</p>",
        "id": 403469144,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700603957
    },
    {
        "content": "<p>Note that even if there's no metavariable, the error message is wrong: it says <code>linarith</code> failed to find a contradiction, not that <code>garbage</code> is garbage</p>",
        "id": 403470676,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700604603
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8561\">#8561</a> seems to fix it, but it'd be good to wait for CI to see if it turns up any productive uses of metavariables</p>",
        "id": 403474408,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700606505
    },
    {
        "content": "<p>I also made it check for new metavariables, since these are likely not anything linarith should be solving for. Old metavariables might be ok, since the context might incidentally have some (but maybe linarith should use withNewMctxDepth to make sure it doesn't assign them, if it doesn't already)</p>",
        "id": 403474583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700606605
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8561\">#8561</a> is failing on <code>KreinMilman</code></p>",
        "id": 403479757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700609488
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Analysis/Convex/KreinMilman.lean b/Mathlib/Analysis/Convex/KreinMilman.lean</span>\n<span class=\"gh\">index e8bb27ccdc..8c2d834d0e 100644</span>\n<span class=\"gd\">--- a/Mathlib/Analysis/Convex/KreinMilman.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Analysis/Convex/KreinMilman.lean</span>\n<span class=\"gu\">@@ -102,6 +102,9 @@ theorem closure_convexHull_extremePoints (hscomp : IsCompact s) (hAconv : Convex</span>\n<span class=\"w\"> </span>  have h : IsExposed ℝ s ({ y ∈ s | ∀ z ∈ s, l z ≤ l y }) := fun _ =&gt; ⟨l, rfl⟩\n<span class=\"w\"> </span>  obtain ⟨z, hzA, hz⟩ := hscomp.exists_forall_ge ⟨x, hxA⟩ l.continuous.continuousOn\n<span class=\"w\"> </span>  obtain ⟨y, hy⟩ := (h.isCompact hscomp).has_extreme_point ⟨z, hzA, hz⟩\n<span class=\"gd\">-  linarith [hlr _ (subset_closure &lt;| subset_convexHull _ _ &lt;|</span>\n<span class=\"gd\">-    h.isExtreme.extremePoints_subset_extremePoints hy), hy.1.2 x hxA]</span>\n<span class=\"gi\">+  -- note : `linarith` struggles if `this` is used directly because there are</span>\n<span class=\"gi\">+  -- too many metavariables?</span>\n<span class=\"gi\">+  have := hlr _ (subset_closure &lt;| subset_convexHull _ _ &lt;|</span>\n<span class=\"gi\">+    h.isExtreme.extremePoints_subset_extremePoints hy)</span>\n<span class=\"gi\">+  linarith [this, hy.1.2 x hxA]</span>\n<span class=\"w\"> </span>#align closure_convex_hull_extreme_points closure_convexHull_extremePoints\n</code></pre></div>\n<p>That fixes it -- is that some kind of regression though?</p>",
        "id": 403480677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700610047
    },
    {
        "content": "<p>I got bored waiting for <code>count_heartbeats</code> to terminate.</p>",
        "id": 403480759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700610109
    },
    {
        "content": "<p>Thanks for investigating. I had set a flag that changes how <code>_</code>'s are elaborated, since it seemed to make a test work better, but I've switched that flag off.</p>",
        "id": 403481239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700610402
    }
]