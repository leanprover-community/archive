[
    {
        "content": "<p>I'd like to suggest, if it doesn't already exist, an API/tactic for writing analysis proofs.</p>\n<p>A standard proof procedure in real analysis is show <code>‚àÉ Œµ &gt; 0, P Œµ</code>. So you first obtain some <code>Œµ</code> and <code>hŒµ : 0 &lt; Œµ</code> from, say, an open ball inside a neighbourhood set, and you do <code>refine ‚ü®Œµ, hŒµ, ?_‚ü©</code>, hoping that <code>P Œµ</code> follows.</p>\n<p>Halfway through the proof of <code>P Œµ</code>, you realise you actually needed <code>Œµ / 2</code>, or maybe <code>min Œµ Œµ'</code>, where <code>Œµ' &gt; 0</code> has to be obtained from, say, the continuity of some function. In informal mathematics, you just say \"shrink <code>Œµ</code> to <code>Œµ / 2</code>\" or \"let <code>Œµmin</code> be the smallest out of <code>Œµ1, Œµ2, Œµ3</code>\". The statements <code>P1 Œµ1, P2 Œµ2, P3 Œµ3</code> that held before are presumed to still hold for <code>Œµmin</code>.</p>\n<p>In Lean, you have to go back and rewrite <code>refine ‚ü®min Œµ Œµ', ?_, ?_‚ü©</code>, and then you need all these code blocks that show that the statements that held for <code>Œµ</code> now still hold for <code>Œµ / 2</code> or <code>Œµmin</code>. Every time such shrinkage of <code>Œµ</code> happens, you need to tediously modify all the previous code by adding a bunch of <code>half_pos</code> or <code>min_le_[left|right]</code>. I'm hoping that Lean has a better way to handle this sort of proofs.</p>\n<p>You may argue that any good proof formaliser should first write the proof down nicely on paper, figure out that the correct <code>Œµ</code> you need is <code>Œµmin = min (Œµ1 / 2) (min (Œµ2 / 4) (min Œµ3 Œµ4))</code>, and then get it right in Lean the first time. One, this still invovles a lot of tedious nesting of <code>min_le_[left|right]</code> that clutter the overall argument. Two, you still need to show that if <code>Pi Œµmin</code> holds for every <code>i</code>; more clutter. Three, this doesn't correspond to how one actually thinks through a proof in real analysis, even when one already knows the proof by heart.</p>\n<p>I faced this problem in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8886\">#8886</a>, where I needed to get <code>Œµmin</code> as the min of SIX different <code>Œµ</code>s extracted from various conditions. I experimented with the following design, which you can see in action in <code>IntegralCurve.lean</code>. I introduced a <code>Prop</code> called <code>Shrinkable</code> (for lack of a better name), which takes in <code>p : ‚Ñù ‚Üí Prop</code>. <code>Shrinkable p</code> basically says that if <code>p Œµ</code> holds, then <code>p Œµ'</code> also holds for a smaller <code>Œµ'</code>.</p>\n<p>In the actual proof, you first show that <code>h1 : p1 Œµ1</code> holds for some <code>Œµ1</code>. Later on you have another <code>Œµ2</code> for which <code>h2 : p2 Œµ2</code> holds. You then show that <code>hp1 : Shrinkable p1</code> and <code>hp2 : Shrinkable p2</code>, which are lemmas tucked elsewhere (can instance synthesis help?). Now, <code>hp1 h1 (min_le_left Œµ1 Œµ2) : p1 (min Œµ1 Œµ2)</code> can be directly used in the grand finale, after <code>refine ‚ü®min Œµ1 Œµ2, ?_, ?_‚ü©</code> is invoked.</p>\n<p>I hope what I'm describing is clear! What do you think?</p>",
        "id": 407860475,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702524241
    },
    {
        "content": "<p>I think the clean way to do this kind of proof is using the <code>filter_upwards</code> tactic</p>",
        "id": 407860620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702524284
    },
    {
        "content": "<p>Oh so an easy way already exists?</p>",
        "id": 407860663,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702524298
    },
    {
        "content": "<p>Let me read into it and not reinvent the wheel!</p>",
        "id": 407860703,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702524311
    },
    {
        "content": "<p>it will handle <code>min</code> reasoning but not <code>/ 2</code> reasoning</p>",
        "id": 407860728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702524319
    },
    {
        "content": "<p>although I suppose you can do <code>/ 2</code> reasoning using the uniformity filter</p>",
        "id": 407860763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702524337
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/Assigning.20metavariables.20by.20unification/near/407350443\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Assigning.20metavariables.20by.20unification/near/407350443</a></p>",
        "id": 407862602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702524982
    },
    {
        "content": "<p>It's not immediately clear to me how to use <code>filter_upwards</code> for the proof in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8886\">#8886</a> in a clean way <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span></p>",
        "id": 407864052,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702525553
    },
    {
        "content": "<p>Could you tell me where precisely you have this issue?</p>",
        "id": 407864431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702525685
    },
    {
        "content": "<p>I'll think a little harder first :)</p>",
        "id": 407865055,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702525928
    },
    {
        "content": "<p>I'm guessing the idiomatic way with <code>filter_upwards</code> is not to reason with <code>Œµ</code> so soon</p>",
        "id": 407865210,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702526001
    },
    {
        "content": "<p>Reason with sets in the neighbourhood filter first</p>",
        "id": 407865258,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702526027
    },
    {
        "content": "<p>The way filters are meant to handle this is as follows. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">F‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">Œµ</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">P‚ÇÅ</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">have</span> <span class=\"n\">F‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">Œµ</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">P‚ÇÇ</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">have</span> <span class=\"n\">F‚ÇÉ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">Œµ</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">P‚ÇÉ</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">Œµ</span> <span class=\"k\">in</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">),</span> <span class=\"n\">P‚ÇÅ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">P‚ÇÇ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚àß</span> <span class=\"n\">P‚ÇÉ</span> <span class=\"n\">Œµ</span> <span class=\"o\">:=</span> <span class=\"n\">F‚ÇÅ.and</span> <span class=\"o\">(</span><span class=\"n\">F‚ÇÇ.and</span> <span class=\"n\">F‚ÇÉ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407865696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526192
    },
    {
        "content": "<p>And you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metric.eventually_nhds_iff_ball#doc\">docs#Metric.eventually_nhds_iff_ball</a> to get out of filter world.</p>",
        "id": 407865727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526210
    },
    {
        "content": "<p>There is probably an even more specialized version for real numbers.</p>",
        "id": 407865764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526225
    },
    {
        "content": "<p>You can at least do something like <code>simp [Metric.eventually_nhds_iff_ball, Real.dist_0_eq_abs] at this</code> to turn <code>this</code> into <code>‚àÉ Œµ, 0 &lt; Œµ ‚àß ‚àÄ t : ‚Ñù, |t| &lt; Œµ ‚Üí P‚ÇÅ t ‚àß P‚ÇÇ t ‚àß P‚ÇÉ t</code>.</p>",
        "id": 407866131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526356
    },
    {
        "content": "<p>Very helpful. Thank you!</p>",
        "id": 407866167,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702526372
    },
    {
        "content": "<p>And really <code>‚àÄ·∂† Œµ in ùìù (0 : ‚Ñù), P‚ÇÅ Œµ</code> reads as \"for every  Œµ close to 0, P‚ÇÅ Œµ\".</p>",
        "id": 407866324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526412
    },
    {
        "content": "<p>The appropriate filter might be <code>nhdsWithin 0 (Set.Ioi 0)</code> which for example appears <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Order/LeftRight.html#nhds_right'_le_nhds_ne\">in this file</a>.</p>",
        "id": 407866346,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702526419
    },
    {
        "content": "<p>Also known as the much friendlier looking <code>ùìù[&gt;] 0</code>.</p>",
        "id": 407866545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526466
    },
    {
        "content": "<p>Yeah the notation is used in the code but I don't know where it's introduced ...</p>",
        "id": 407866674,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702526497
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/5973b7110e5745124d413dd9b88c6118668adf4e//Mathlib/Topology/Basic.lean#L845-L863\">https://github.com/leanprover-community/mathlib4/blob/5973b7110e5745124d413dd9b88c6118668adf4e//Mathlib/Topology/Basic.lean#L845-L863</a></p>",
        "id": 407867189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702526608
    },
    {
        "content": "<p>It's great to know this standard way using filters. Does Mathematics in Lean have examples of a translation of standard epsilon-delta proofs using filters?</p>",
        "id": 407868001,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702526793
    },
    {
        "content": "<p>Section 9.1 contains quite a bit about that.</p>",
        "id": 407868884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527021
    },
    {
        "content": "<p>I don't remember the exact details because I wrote that more than one year ago.</p>",
        "id": 407868970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527045
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/C09_Topology.html\">https://leanprover-community.github.io/mathematics_in_lean/C09_Topology.html</a></p>",
        "id": 407868988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527051
    },
    {
        "content": "<p>You should start with the introduction to Chapter 9, even before 9.1</p>",
        "id": 407869281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527126
    },
    {
        "content": "<p>I think I'm understanding how <code>Eventually</code> works now. Thank you all!</p>",
        "id": 407872410,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702528071
    },
    {
        "content": "<p>Filters are maybe not quite as intuitive, but I managed to refactor <a href=\"https://github.com/leanprover-community/mathlib4/pull/8886\">#8886</a> using filters. <code>Filter.Eventually.and</code> really helped me extract a clean, smallest, neighbourhood at the end. No more <code>min</code>s or going back to rewrite previous code!</p>",
        "id": 407893572,
        "sender_full_name": "Winston Yin (Â∞πÁ∂≠Êô®)",
        "timestamp": 1702537167
    },
    {
        "content": "<p>Don't worry, you will soon find filters much more intuitive than epsilon-wrangling, starting <a href=\"#narrow/stream/287929-mathlib4/topic/Shrinking.20epsilon.20in.20analysis.20proofs/near/407866324\">here</a>.</p>",
        "id": 407982311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702566933
    }
]