[
    {
        "content": "<p>This file is nearly done (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1822\">mathlib4#1822</a>), I just don't know how to handle the situation where we define a structure and want the argument to one of its data-carrying fields to be explicit. In Lean 3, this was handled with the <code>[]</code> syntax (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bornology\">docs#bornology</a>). In Lean 4, this notation is not supported. For non-data-carrying fields, we can handle this with the technique in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Countable#doc\">docs4#Countable</a> (versus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/countable\">docs#countable</a>) as described in <a href=\"#narrow/stream/287929-mathlib4/topic/Infer.20kinds.20are.20unsupported\">this thread</a>, but for data-carrying fields this \"duplication\" trick seems like a bad idea (because of <code>@[ext]</code> or <code>@[simps]</code> lemmas at the very least). Suggestions or pushes welcome.</p>",
        "id": 323375234,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674603419
    },
    {
        "content": "<p>The solution for data carrying fields is I think to do the same thing, but define the ext lemma manually and a custom simps projection</p>",
        "id": 323378563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674605309
    },
    {
        "content": "<p>I can't seem to get <code>initialize_simps_projections</code> to write a lemma about <code>(cobounded α).sets</code> instead of <code>cobounded'.sets</code>, where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bornology</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">cobounded'</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span>\n  <span class=\"n\">le_cofinite'</span> <span class=\"o\">:</span> <span class=\"n\">cobounded'</span> <span class=\"bp\">≤</span> <span class=\"n\">cofinite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bornology.cobounded</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bornology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Bornology.cobounded'</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">Bornology</span> <span class=\"o\">(</span><span class=\"n\">cobounded'</span> <span class=\"bp\">→</span> <span class=\"n\">cobounded</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can someone help me out here?</p>",
        "id": 323382152,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674607259
    },
    {
        "content": "<p>IIRC you need to add a second def called <code>Bornology.simps.cobounded</code> in terms of the first def</p>",
        "id": 323428319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674636211
    },
    {
        "content": "<p>I tried that before. While it does seem to register (by looking at the <code>@[simps?]</code> trace), it doesn't seem to have an effect on the <code>.sets</code> projection for <code>Filter</code> (this is a composite projection).</p>",
        "id": 323492933,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674655560
    },
    {
        "content": "<p>So <code>[simps cobounded]</code> works but <code>[simps]</code> by itself generates  a lemma about <code>cobounded'.sets</code>?</p>",
        "id": 323497920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656700
    },
    {
        "content": "<p>Do you want to generate e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Bornology.cobounded</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>for <code>Bornology.ofBounded</code>? You can do that by adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">Bornology.cobounded</span> <span class=\"bp\">←</span> <span class=\"n\">Bornology.Simps.cobounded</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">Bornology</span> <span class=\"o\">(</span><span class=\"n\">cobounded'</span> <span class=\"bp\">→</span> <span class=\"n\">cobounded</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As Eric said, you can use <code>@[simps cobounded]</code> to get an equality of filters (not recommended for something like <code>Bornology.ofBounded</code>).</p>\n<p>If you also care about the name of the generated lemma (you don't want a trailing <code>_sets</code> in the lemma name), you can do something fancy like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Bornology.custom_name</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bornology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Bornology.cobounded'.sets</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">Bornology</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">cobounded'</span><span class=\"o\">,</span> <span class=\"n\">cobounded'_sets</span> <span class=\"bp\">→</span> <span class=\"n\">custom_name</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this will generate e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Bornology.ofBounded_custom_name</span><span class=\"o\">:</span> <span class=\"n\">Bornology.cobounded'.sets</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323503772,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674658113
    },
    {
        "content": "<p>My error was too stupid: I wrote <code>Bornology.simps.cobounded</code> not <code>Bornology.Simps.cobounded</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 323508671,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674659183
    },
    {
        "content": "<p>Thanks, this all works now.</p>",
        "id": 323513857,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674660258
    },
    {
        "content": "<p>The rule here is \"it's a namespace, so it's capitalized\"?</p>",
        "id": 323516509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674660857
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 323516795,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674660932
    },
    {
        "content": "<p>I made this change because people (or mathport) wrote definitions with <code>Simps</code> capitalized. I must say this has also tripped me up. But notice that <code>initialize_simps_projections?</code> will tell you of all the custom projections it found, so that is a good way to check.</p>",
        "id": 323517733,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674661149
    },
    {
        "content": "<p>On a completely different note: in porting this file there were two times where I had to provide the <code>Bornology</code> type class argument to <code>isBounded_def</code> when used as a rewrite/simp lemma. In Lean 3 these were found automatically, and this seems like a regression. Search the file for <code>porting note</code> and you'll see them.</p>",
        "id": 323519938,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674661697
    }
]