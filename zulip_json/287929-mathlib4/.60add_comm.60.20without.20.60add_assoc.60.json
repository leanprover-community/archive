[
    {
        "content": "<p>Currently <code>add_comm</code> is part of <code>AddCommSemigroup</code>.  This is awkward for proving things about numerical programs, as many approximate number types are commutative but not associative (floating point being the standard example, but not the one I care about at the moment).  There's <code>IsCommutative</code>, but it's a shame to not be able to use <code>add_comm</code> directly for such types.</p>\n<p>Am I missing an existing way to make this nice?  If not, would it be reasonable to move <code>add_comm</code> out into a separate type class?</p>\n<p>(I can of course just have <code>NumericalType.add_comm</code>, which is what I'll do for now.)</p>",
        "id": 396677587,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697317482
    },
    {
        "content": "<p>Short answer: Nobody has cared enough before you.<br>\nLong answer: Breaking down typeclasses into a lot of small bundled classes/mixins like this worsens typeclass search performance. We do it when we really need the new generality somehow, but we avoid doing it out of sakeness' sake. In that case, what theorems would you like to have about a type whose <code>+</code> is commutative but not associative? I cannot think of many, meaning that you could just write versions which are specific to <code>YourType</code>  in the <code>YourType</code> namespace.</p>",
        "id": 396678640,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1697318833
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> has  a PR for this (motivated by the multiplicative case on jordan algebras)</p>",
        "id": 396678705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697318902
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7060\">#7060</a></p>",
        "id": 396678717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697318927
    },
    {
        "content": "<p>I thought <code>Float</code> isn't a reasonable thing to prove theorems about, anyways</p>",
        "id": 396679171,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697319506
    },
    {
        "content": "<p>I'm okay either way since as you say I'll mostly be working specialized to my particular types, so fine to ignore unless Christopher has a more important application.</p>",
        "id": 396679175,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697319512
    },
    {
        "content": "<p><code>Float</code> has perfectly good theorems if you assume <code>IEEE</code> arithmetic (e.g., you can prove strong bounds on errors for FFTs, matrix operations, etc.).  But in this case I'm not dealing with <code>Float</code>, but rather fixed point arithmetic constructed out of <code>UInt64</code>, for which I can easily prove theorems.</p>",
        "id": 396679200,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697319573
    },
    {
        "content": "<p>I'm also <a href=\"#narrow/stream/270676-lean4/topic/IEEE.20754.20Float/near/395477650\">interested</a> in proving things about floats on the long run. My previous thought was to make it have both the normal arithmetic and arithmetic specific to that float representation, then it can be an instance of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> under normal arithmetic, but it can also propagate error bounds etc. under its own arithmetic, so there are two kinds of equalities involved. The primary motivation behind this is that there are many identities in Clifford Algebra hold for  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> but are not necessarily bounded for specific float types. <code>add_comm</code> without <code>add_assoc</code> seems to be an essential piece.</p>",
        "id": 396713384,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697344502
    },
    {
        "content": "<p>For reference, the PR in question is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7060\">7060</a>.</p>",
        "id": 396719777,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1697348989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60add_comm.60.20without.20.60add_assoc.60/near/396678705\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> has  a PR for this (motivated by the multiplicative case on jordan algebras)</p>\n</blockquote>\n<p>Specifically results from commutative Jordan algebras that don't depend on the Jordan axiom, but only use commutativity.</p>",
        "id": 396745633,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1697369384
    }
]