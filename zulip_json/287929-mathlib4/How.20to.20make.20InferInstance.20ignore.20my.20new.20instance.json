[
    {
        "content": "<p>I was told to add the instance<br>\n<code>noncomputable instance [Monoid α] [Fintype α] : Fintype αˣ := Fintype.ofFinite αˣ</code><br>\nto Data.Fintype.Units for <a href=\"https://github.com/leanprover-community/mathlib4/pull/5738\">#5738</a>. But now I am getting errors in other files: In Algebra.Group.ConjFinite I get</p>\n<div class=\"codehilite\" data-code-language=\"Todotxt\"><pre><span></span><code>IR check failed at 'instDecidableRelIsConj._rarg', error: unknown declaration 'instFintypeUnits_1'\n</code></pre></div>\n<p>At</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">IsConj</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"n\">c.1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c.1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>How do I fix this?</p>",
        "id": 376134852,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689620367
    },
    {
        "content": "<p>It is picking up on your new instance and, since it is non-computable, it cannot generate code for it. <em>One</em> fix is to mark it <code>noncomputable</code> also. That seems strange for a <code>Decidable</code> instance. Another is to use <code>attribute [-instance]</code> to remove from the tree beforehand. </p>\n<p>In general, a noncomputable instance that creates data (<code>Fintype</code>) seems like something you want to be careful with</p>",
        "id": 376137851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689621133
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/How.20to.20make.20InferInstance.20ignore.20my.20new.20instance\">#lean4 &gt; How to make InferInstance ignore my new instance</a> by <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>.</p>",
        "id": 376139541,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689621657
    },
    {
        "content": "<p>That sounds like a bad instance to me</p>",
        "id": 376139675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689621693
    },
    {
        "content": "<p>I think you should make your new instance computable. Presumably you can make it computable if you add <code>DecidableEq \\a</code>?</p>",
        "id": 376139728,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689621706
    },
    {
        "content": "<p>There is something like <code>instance [Fintype B] (f : A -&gt; B) (h : Injective f) : Fintype A</code> right?</p>",
        "id": 376140012,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689621786
    },
    {
        "content": "<p>yes: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.ofInjective#doc\">docs#Fintype.ofInjective</a></p>",
        "id": 376140222,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689621853
    },
    {
        "content": "<p>That would better to use for the new instance</p>",
        "id": 376140340,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689621893
    },
    {
        "content": "<p>but it's also noncomputable</p>",
        "id": 376140358,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689621897
    },
    {
        "content": "<p>Oh!</p>",
        "id": 376140376,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689621902
    },
    {
        "content": "<p>I'm surprised this instance doesn't already exist</p>",
        "id": 376140884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622073
    },
    {
        "content": "<p>There seems to be a few ways to make this computable.</p>",
        "id": 376141840,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689622329
    },
    {
        "content": "<p>all of them are just the O(N²) enumerate and filter, right?</p>",
        "id": 376142053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622405
    },
    {
        "content": "<p>That was one. The other had that implicitly in there where you give an equivalence between <code>Units</code> and a subtype</p>",
        "id": 376142276,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689622471
    },
    {
        "content": "<p>I think that's the one you want</p>",
        "id": 376142747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622605
    },
    {
        "content": "<p>Via the equivalence</p>",
        "id": 376142770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622614
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.embedProduct#doc\">docs#Units.embedProduct</a> is most of the way there</p>",
        "id": 376143048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622690
    },
    {
        "content": "<p>Here's the general rule (modulo exceptions due to some development halting due to the port):</p>\n<ul>\n<li>All global <code>Fintype</code> instances should be computable</li>\n<li>If you can't make a computable <code>Fintype</code> instance, then make a global <code>Finite</code> instance</li>\n<li>When you need a <code>Fintype</code> instance for a classical proof, use <code>Fintype.ofFinite</code> locally</li>\n</ul>\n<p>Since we're in the world of Lean 4, you <em>should</em> be able to do <code>local attribute [instance] Fintype.ofFinite</code> without anything bad happening (except for sometimes needing to use <code>convert</code> in proofs). We couldn't do this in Lean 3 due to this introducing cycles.</p>",
        "id": 376143135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689622717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, does your fintype derive handler work on units?</p>",
        "id": 376143273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689622760
    },
    {
        "content": "<p>It might work, though you might need to do it semi-manually with the fintype term elaborator with an additional <code>DecidableEq</code> argument</p>",
        "id": 376143884,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689622925
    },
    {
        "content": "<p>Yeah, semi-manually is needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 376144648,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689623148
    },
    {
        "content": "<p>You might need this extra import: <code>import Mathlib.Tactic.DeriveFintype</code></p>",
        "id": 376145552,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689623401
    },
    {
        "content": "<p>Is there no <code>instance [Fintype A] : DecidableEq A</code>?</p>",
        "id": 376147362,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689623929
    },
    {
        "content": "<p>No, that's not computably true</p>",
        "id": 376147695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689624021
    },
    {
        "content": "<p>This has been discussed before, and usually amounts to \"what some people call constructively finite, mathlib calls <code>Fintype</code> + <code>DecidableEq</code>\"</p>",
        "id": 376147912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689624075
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 376147942,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689624085
    },
    {
        "content": "<p>Yeah <code>instance [Monoid α] [Fintype α] [DecidableEq α] : Fintype αˣ := Fintype.ofEquiv _ (unitsEquivProdSubtype α).symm</code> already exists. I guess there is a typeclass called <code>Finite</code>, is this just exactly equivalent to <code>Fintype + DecidableEq</code>? Maybe that's the instance which is needed/the way the lemma I need should be written?</p>",
        "id": 376497047,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689724854
    },
    {
        "content": "<p>No, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite#doc\">docs#Finite</a> is something quite different</p>",
        "id": 376498260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689725432
    },
    {
        "content": "<p><code>Fintype</code> is \"you can ask me to compute the list of entries but you can't compare against them\", <code>Finite</code> is \"I'm not going to compute anything\", <code>DecidableEq</code> is \"If you have a list you can compare against it\".</p>",
        "id": 376498339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689725470
    },
    {
        "content": "<p>I see we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.ofFinite#doc\">docs#Fintype.ofFinite</a> (apparently noncomputable) and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite.of_fintype#doc\">docs#Finite.of_fintype</a> (apparently computable)</p>",
        "id": 376498893,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689725714
    },
    {
        "content": "<p>It is very deliberate that the first one is not an instance (and not just to avoid loops)</p>",
        "id": 376499093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689725812
    },
    {
        "content": "<blockquote>\n<p>Yeah <code>instance [Monoid α] [Fintype α] [DecidableEq α] : Fintype αˣ := Fintype.ofEquiv _ (unitsEquivProdSubtype α).symm</code> already exists.</p>\n</blockquote>\n<p>Where?</p>",
        "id": 376499183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689725853
    },
    {
        "content": "<p>Uh, immediately above my PR, I think</p>",
        "id": 376499299,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689725889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instFintypeUnits#doc\">docs#instFintypeUnits</a></p>",
        "id": 376499380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689725927
    },
    {
        "content": "<p>Yep, that's it</p>",
        "id": 376499423,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689725944
    },
    {
        "content": "<p>It looks like <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> gave some slightly misleading advice and then we tricked ourselves into running in circles over nothing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 376499729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689726069
    },
    {
        "content": "<p>The instances in the PR look fine</p>",
        "id": 376499764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689726094
    },
    {
        "content": "<p>Well, it seems his main advice was \"use Nat.card\" which maybe would avoid this entirely.</p>",
        "id": 376499822,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1689726122
    },
    {
        "content": "<p>We should have lemmas about both</p>",
        "id": 376501239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689726665
    }
]