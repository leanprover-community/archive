[
    {
        "content": "<p>Today's bump is massive, touching over 200 files, as it includes the change to core that make <code>simp</code> fail if it makes no progress.</p>\n<p>I've been keeping this afloat for a while, and it has rotted a few times, so as per usual for me the git history is a complete mess. Sorry?</p>\n<p>Review very much appreciated, as I don't want to have to keep this from rotting for any longer than necessary. We're still waiting on a bump to <code>aesop</code> and to <code>std</code> to go through before it can be merged.</p>",
        "id": 385643167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692267429
    },
    {
        "content": "<p>Do you mean 2023-08-16 in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6610\">#6610</a>? I can't find the PR.</p>",
        "id": 385643975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692267740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6019\">#6019</a></p>",
        "id": 385644269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692267856
    },
    {
        "content": "<p>13 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/difficulties.20with.20git.20rebase\">#general &gt; difficulties with git rebase</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 385645287,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692268265
    },
    {
        "content": "<p>Regarding rot and the dependencies; most of these simp removals also compile <em>without</em> the bump, right? If you PRd those by themselves then we could merge them before the upstream PRs are merged.</p>",
        "id": 385645357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692268300
    },
    {
        "content": "<p>That ... is an excellent point. I think I badly underestimated how long it would take me to get the Lean 4 patch merged, so kept hoping it could all happen in one go.</p>",
        "id": 385647123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692268999
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6632\">#6632</a> starts that</p>",
        "id": 385665890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692276208
    },
    {
        "content": "<p>It's your PR, with all the build configuration removed, and anything that might be an implementation bug kicked out too</p>",
        "id": 385666003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692276245
    },
    {
        "content": "<p>One thing I'm a bit worried about is that the current <code>simp_rw</code> implementation does a <code>simp only []</code> first before doing anything else. This was added when we were thinking about doing fail_if_no_progress for simp_rw to make it clear that the progress was coming from the simp lemma requested (rather than just some zeta reduction or something simp did by default). See <a href=\"https://github.com/leanprover-community/mathlib4/blob/485b736d48a5d94ff465810656263ba25f677808/Mathlib/Tactic/SimpRw.lean#L57\">https://github.com/leanprover-community/mathlib4/blob/485b736d48a5d94ff465810656263ba25f677808/Mathlib/Tactic/SimpRw.lean#L57</a>, I wonder if this should now become a <code>try simp only []</code> before trying to find failures, as there may be a lot of spurious failures if this <code>simp only</code> is doing nothing and now failing, and not the user requested ones.</p>",
        "id": 385667776,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692276926
    },
    {
        "content": "<p>I'd argue that <code>try simp only []</code> should be <code>simp only (fail_if_no_progress := false)</code></p>",
        "id": 385668027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692277025
    },
    {
        "content": "<p><code>try</code> is probably acceptable in proofs, but we shouldn't use it as a substitute for the new configuration when building tactics</p>",
        "id": 385668103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692277065
    },
    {
        "content": "<p>Okay, I've just squashed all the commits on this epic PR, and I have a local build+test.</p>\n<p>Let's get this in! :-)</p>",
        "id": 385790588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692323017
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -398,8 +398,11 @@ theorem _root_.Wbtw.wOppSide₁₃ {s : AffineSubspace R P} {x y z : P} (h : Wbt</span>\n<span class=\"w\"> </span>  rcases ht0.lt_or_eq with (ht0' | rfl); swap\n<span class=\"w\"> </span>  · rw [lineMap_apply_zero]; simp\n<span class=\"w\"> </span>  refine' Or.inr (Or.inr ⟨1 - t, t, sub_pos.2 ht1', ht0', _⟩)\n<span class=\"gd\">-  simp_rw [lineMap_apply, vadd_vsub_assoc, vsub_vadd_eq_vsub_sub, ← neg_vsub_eq_vsub_rev z x,</span>\n<span class=\"gd\">-    vsub_self, zero_sub, ← neg_one_smul R (z -ᵥ x), ← add_smul, smul_neg, ← neg_smul, smul_smul]</span>\n<span class=\"gi\">+  -- TODO: after lean4#2336 \"simp made no progress feature\"</span>\n<span class=\"gi\">+  -- had to add `_` to several lemmas here. Not sure why!</span>\n<span class=\"gi\">+  simp_rw [lineMap_apply _, vadd_vsub_assoc _, vsub_vadd_eq_vsub_sub _,</span>\n<span class=\"gi\">+    ← neg_vsub_eq_vsub_rev z x, vsub_self _, zero_sub, ← neg_one_smul R (z -ᵥ x),</span>\n<span class=\"gi\">+    ← add_smul, smul_neg, ← neg_smul, smul_smul]</span>\n<span class=\"w\"> </span>  ring_nf\n<span class=\"w\"> </span>#align wbtw.w_opp_side₁₃ Wbtw.wOppSide₁₃\n</code></pre></div>\n<p>Same lemmas, no?</p>",
        "id": 385806285,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692328713
    },
    {
        "content": "<p>Oh sorry, I misread</p>",
        "id": 385806355,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692328754
    },
    {
        "content": "<p>A reminder on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6019\">#6019</a>. The next nightly is about to land, and I'd love to try out the <code>auto-merge-after-CI</code> label, but need this out of the way first. :-)</p>",
        "id": 385848348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692345278
    },
    {
        "content": "<p>Not directly related to the PR; but is there any way we can make <code>simp (config := {failIfUnchanged := false})</code> less of a mouthful? Is there a reason we dropped the <code>simp {failIfUnchanged := false}</code>-style syntax from Lean 3?</p>",
        "id": 385849659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692345576
    }
]