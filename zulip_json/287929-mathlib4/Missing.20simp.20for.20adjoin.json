[
    {
        "content": "<p>In the following example, it seems we miss some simp lemmas that would allow to remove the change.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"n\">ℚ</span><span class=\"bp\">⟮</span><span class=\"n\">a</span><span class=\"bp\">⟯</span> <span class=\"bp\">≤</span> <span class=\"n\">ℚ</span><span class=\"bp\">⟮</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟯</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IntermediateField.adjoin.mono</span>\n  <span class=\"n\">change</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Or am I missing something?</p>",
        "id": 366273756,
        "sender_full_name": "Martha Hartt",
        "timestamp": 1686767769
    },
    {
        "content": "<p>I wonder if this fancy notation setup might be the culprit for the lack of simp lemmas:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/b5e7466176ae76668b236b23537586b69d88f07e/Mathlib/FieldTheory/Adjoin.lean#L458-L476\">https://github.com/leanprover-community/mathlib4/blob/b5e7466176ae76668b236b23537586b69d88f07e/Mathlib/FieldTheory/Adjoin.lean#L458-L476</a></p>",
        "id": 366285371,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1686770838
    },
    {
        "content": "<p>Yes, the whole discussion is about that fancy notation. The <code>apply IntermediateField.adjoin.mono</code> line gives an inscrutable goal because of this so either this should be restated or we should have simp lemmas turning the inscrutable goal into what her <code>change</code> is describing.</p>",
        "id": 366298554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686774981
    },
    {
        "content": "<p>Yes, this should be fixable with simp lemmas for the notation, right? I'm not sure if this is possible without that stuff, though, considering the new Lean4 notation parser</p>",
        "id": 366456304,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686827333
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> who wrote the notation in lean3</p>",
        "id": 366456557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686827398
    },
    {
        "content": "<p>I would guess that lean4's notation lets us do something much simpler than rolling our own set notation</p>",
        "id": 366473852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686830665
    },
    {
        "content": "<p>Is there an easy way to ask Lean \"Where's the notation for <code>{a, b, c}</code> defined?\"?</p>",
        "id": 366474164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686830725
    },
    {
        "content": "<p>In this case, it seems to be defined just below <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sep#doc\">docs4#Sep</a>, <a href=\"https://github.com/leanprover/std4/blob/d5471b83378e8ace4845f9a029af92f8b0cf10cb/Std/Classes/SetNotation.lean#L89-L94\">here</a>.  However, I found it by expecting that it would have been close to wherever I would land by Ctrl-clicking on the infoview...</p>",
        "id": 366496058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686834988
    },
    {
        "content": "<p>I thought that there was a way to do this systematically, something like <code>#check notation</code> or <code>#print notation</code>, but I am failing to find it on Zulip or to guess it correctly in Lean.</p>",
        "id": 366497393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686835219
    },
    {
        "content": "<p>If it is part of a valid term, Ctrl+click in the editor (e.g. on the braces) should work</p>",
        "id": 366498945,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686835497
    },
    {
        "content": "<p>Yes, I can confirm: Ctrl+clicking on the braces does take me to where the notation is defined.  However, you have to aim just right!  <span aria-label=\"direct hit\" class=\"emoji emoji-1f3af\" role=\"img\" title=\"direct hit\">:direct_hit:</span></p>",
        "id": 366509284,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686837457
    },
    {
        "content": "<p>Since this typeclass-based notation was my fault, here's a new version that gives pristine set notations: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5110\">mathlib4#5110</a></p>\n<p>Now the <code>change</code> does nothing at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">):</span> <span class=\"n\">ℚ</span><span class=\"bp\">⟮</span><span class=\"n\">a</span><span class=\"bp\">⟯</span> <span class=\"bp\">≤</span> <span class=\"n\">ℚ</span><span class=\"bp\">⟮</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟯</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IntermediateField.adjoin.mono</span>\n  <span class=\"n\">change</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 366659134,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686877158
    },
    {
        "content": "<p>At least in Lean 4, we can write a notation so that <code>Q(a, b) = adjoin K {a, b}</code> and <code>Q(a) = adjoin K {a}</code> (I know I use wrong parentheses).</p>",
        "id": 366665441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686879957
    },
    {
        "content": "<p>you don't even need fancy parentheses for this</p>",
        "id": 366665712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686880087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> That's exactly the effect of my PR (now merged)</p>",
        "id": 366681403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686887697
    }
]