[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2458\">!4#2458</a>, I have a set of goals in <code>modSwap</code> that used to be closed with <code>&lt;;&gt; simp [hστ, hτυ]</code> but in Lean 4, this leaves three goals, all of which are closed by, uh, <code>simp [hστ, hτυ]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Perm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">modSwap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"n\">τ</span> <span class=\"bp\">∨</span> <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"n\">swap</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">τ</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">σ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Or.casesOn</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">swap_mul_self_mul</span><span class=\"o\">]),</span>\n    <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"n\">υ</span><span class=\"o\">}</span> <span class=\"n\">hστ</span> <span class=\"n\">hτυ</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hστ</span> <span class=\"k\">with</span> <span class=\"n\">hστ</span> <span class=\"n\">hστ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">hτυ</span> <span class=\"k\">with</span> <span class=\"n\">hτυ</span> <span class=\"n\">hτυ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">,</span> <span class=\"n\">swap_mul_self_mul</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>If I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I get an unreachable tactic lint on <code>&lt;;&gt; simp [hστ, hτυ]</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hστ</span> <span class=\"k\">with</span> <span class=\"n\">hστ</span> <span class=\"n\">hστ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">hτυ</span> <span class=\"k\">with</span> <span class=\"n\">hτυ</span> <span class=\"n\">hτυ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">,</span> <span class=\"n\">swap_mul_self_mul</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>leaves three goals.</p>",
        "id": 329774171,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677172172
    },
    {
        "content": "<p>if you increase the max depth in the simp config, does it succeed?</p>",
        "id": 329778195,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677173322
    },
    {
        "content": "<p><code>simp (config := {maxDischargeDepth := 5}) [...]</code></p>",
        "id": 329778621,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677173429
    },
    {
        "content": "<p>no.</p>",
        "id": 329779447,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677173678
    },
    {
        "content": "<p>Amusingly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hστ</span> <span class=\"k\">with</span> <span class=\"n\">hστ</span> <span class=\"n\">hστ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">hτυ</span> <span class=\"k\">with</span> <span class=\"n\">hτυ</span> <span class=\"n\">hτυ</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">,</span> <span class=\"n\">swap_mul_self_mul</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">maxDischargeDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">300</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">hστ</span><span class=\"o\">,</span> <span class=\"n\">hτυ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>leaves goals that are cleared with <code>assumption</code> but <code>simpa</code> gives  a linting error .</p>",
        "id": 329780117,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677173858
    },
    {
        "content": "<p>That makes me suspect adding <code>*</code> to the hypothesis list might work</p>",
        "id": 329796179,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677178646
    },
    {
        "content": "<p>or is it the two provided hypotheses that are cleared by assumption?</p>",
        "id": 329796227,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677178667
    },
    {
        "content": "<p>Scratch that -- didn't look at the tactic state closely enough. In any case, in one stage of tactic processing, Lean 4 thinks it's done, but three goals \"leak\" through..</p>",
        "id": 336353023,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677190488
    }
]