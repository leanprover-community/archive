[
    {
        "content": "<p>Hi all,</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3841\">!4#3841</a> is my first attempt at porting a file. I've gotten it to compile but I wanted to ask about a few of the changes I had to make to make sure I'm doing things correctly.</p>\n<p>The original file had statements and hypotheses about <code>coe_fn ∘ F</code>. Lean 4 did not understand these. Following <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#consequences-for-porting\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#consequences-for-porting</a>, I replaced each <code>coe_fn</code> with <code>MulHom.toFun ∘ MulHomClass.toMulHom</code>.  This is quite cumbersome to write so often and I'm not sure if I chose the correct way to write this coercion or if this is even the correct thing to do generally.</p>\n<p>In Lean 4, when the type <code>G →* (ι → M)</code> is mentioned, <code>ι → M</code> is assumed to have the usual <code>Pi</code> topology, whereas in this context it needs the uniform convergence topology. I had to change it to <code>ι →ᵤ M</code>. Actually here the end result seems fine to me. What I'm more confused about is what changed between Lean 3 and Lean 4 to make this change necessary. I guess I don't understand how Lean 3 knew to use uniform convergence.</p>",
        "id": 356566366,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1683506734
    },
    {
        "content": "<p>Can you link to an explicit lean 3 example of where you're claiming that mathlib3 is using a topology other than the usual Pi topology on a pi type?</p>",
        "id": 356620177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683532053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391579\">@Jake Levinson</span> and <span class=\"user-mention\" data-user-id=\"464202\">@Felix Weilacher</span>, I've had a look and fixed the errors. Quick rundown of my thought process: first I disabled auto-implicits (<code>set_option autoImplicit false</code>) because we have some experience that they tend to get in the way with explicit coercions, because names changed. Then I changed <code>coeFun</code> which was the class and not the function to the arrow. At that point the error messages got more sensible and the only visible error was the last line, which had a 'inferred vs synthesized instance' error and giving the correct instance explicitly solved the error.</p>",
        "id": 356646411,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683538709
    },
    {
        "content": "<p>I am confused why the mathlib3 version has <code>coe_fn</code> and not the <code>coe</code> from <code>fun_like</code>, which is the function that comes from <code>[monoid_hom_class hom G M]</code>.</p>",
        "id": 356647740,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683539016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233841.20Topology.2EAlgebra.2EEquicontinuity/near/356620177\">said</a>:</p>\n<blockquote>\n<p>Can you link to an explicit lean 3 example of where you're claiming that mathlib3 is using a topology other than the usual Pi topology on a pi type?</p>\n</blockquote>\n<p>the mathlib3 version of this file</p>",
        "id": 356731508,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1683556866
    },
    {
        "content": "<p>See the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equicontinuous_of_equicontinuous_at_one\">docs#equicontinuous_of_equicontinuous_at_one</a></p>",
        "id": 356732836,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1683557133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233841.20Topology.2EAlgebra.2EEquicontinuity/near/356646411\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> and <span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span>, I've had a look and fixed the errors. Quick rundown of my thought process: first I disabled auto-implicits (<code>set_option autoImplicit false</code>) because we have some experience that they tend to get in the way with explicit coercions, because names changed. Then I changed <code>coeFun</code> which was the class and not the function to the arrow. At that point the error messages got more sensible and the only visible error was the last line, which had a 'inferred vs synthesized instance' error and giving the correct instance explicitly solved the error.</p>\n</blockquote>\n<p>Thanks for the help. The (↑) is much better than what I was doing.</p>",
        "id": 356737641,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1683558109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> Thanks for the explanations behind your thought process! I went through your changes and I think I understand the steps you did.</p>",
        "id": 356884983,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1683615117
    }
]