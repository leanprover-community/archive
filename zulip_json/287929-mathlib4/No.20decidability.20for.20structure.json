[
    {
        "content": "<p>I am having trouble manipulating structures (specifically, Finset's of structures). Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_remove</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.erase</span> <span class=\"n\">t</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Fails with <code>failed to synthesize instance DecidableEq Test</code>. Why is this? I can actually prove <code>DecidableEq Test</code> and put it in by hand, but I wonder why this is not automatic.</p>",
        "id": 347528347,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680820065
    },
    {
        "content": "<p>How can you prove DecidableEq Test? Equality on the real numbers is not decidable. If your proof uses classical and you don't actually need computability of <code>test_remove</code> you can just put <code>open Classical</code> at the top of the file, below the imports</p>",
        "id": 347528637,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680820177
    },
    {
        "content": "<p>Here's my proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">Test</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">a.x</span><span class=\"bp\">=</span><span class=\"n\">b.x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">right</span>\n    <span class=\"n\">library_search</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>(it's actually weird, the library_search's are not replaceable, but it concludes with goals accomplished. I assumed this means the proof worked, but maybe there's a bug somewhere?) </p>\n<p>Anyways, I have the same issue if I replace R with N.</p>",
        "id": 347529667,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680820584
    },
    {
        "content": "<p>It should still say \"declaration uses sorry\" in the info view somewhere (but I do agree that library search can make you think that things succeed when they don't sometimes)</p>",
        "id": 347530577,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680820942
    },
    {
        "content": "<p>But once again unless you really want to evaluate this function (which you can't anyway if its defined on the reals), doing <code>open Classical</code> will provide decidable instances for you using classical logic.</p>",
        "id": 347530763,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680821020
    },
    {
        "content": "<p>You'll need to write <code>noncomputable def</code> also if you go that route</p>",
        "id": 347530933,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680821082
    },
    {
        "content": "<p>I see. Anyways, it doesn't work with N either. This does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">test_remove</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Test</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.erase</span> <span class=\"n\">t</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and this does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_remove'</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.erase</span> <span class=\"n\">t</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I'm not actually using this for reals. I think the issue here is with <code>structure</code></p>",
        "id": 347531030,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680821110
    },
    {
        "content": "<p>The issue with noncomputable is I do need to evaluate the function (again, in my actual application, I'm not using reals).</p>",
        "id": 347531290,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680821209
    },
    {
        "content": "<p>I see. Well then you need to give an instance for decidable equality of your structure, the easiest way in this case is to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>and let a magic derive handler give the instance for you</p>",
        "id": 347531485,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680821286
    },
    {
        "content": "<p>Otherwise you can try and prove it as you did before with <code>lemma dd</code> (it should be provable now, though library search may have the same issues). What you need to do in that case is state it as <code>instance : DecidableEq Test</code> not as a lemma so that the typeclass mechanism finds it</p>",
        "id": 347531711,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680821399
    },
    {
        "content": "<p>I see. I need to create it as an instance. This works for the simple example I posted above. Now I'll try to get this to work for my project, which uses an abstract notion of points and lines. We'll see... I already checkedc that <code>deriving</code> doesn't work in that case... (Maybe I don't actually have DecidableEq in that case).</p>\n<p>Thank you so much!</p>",
        "id": 347532128,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680821566
    },
    {
        "content": "<p>You might also find the automatically generated ext lemmas useful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Test</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>creates the basic lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Test.ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">),</span> <span class=\"n\">x.x</span> <span class=\"bp\">=</span> <span class=\"n\">y.x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n<span class=\"n\">Test.ext_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Test</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x.x</span> <span class=\"bp\">=</span> <span class=\"n\">y.x</span>\n</code></pre></div>\n<p>for you, which can be helpful with less trivial structures</p>",
        "id": 347532563,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680821770
    },
    {
        "content": "<p>Yes, that might be useful! Thank you!</p>",
        "id": 347532658,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680821823
    },
    {
        "content": "<p>In the end, I might just open Classical, as you suggested. It seems to work without headaches. What does Classical do? Is this documented somewhere?</p>",
        "id": 347532832,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1680821886
    },
    {
        "content": "<p>Well if you use <code>open Classical</code> you won't be able to compute with the functions (i.e. produce runnable code that executes the function) . You can still reason about it fine.<br>\nThere is some info (for lean 3 but the point is the same) at the end of tpil <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle</a>. I don't know a better reference, maybe someone else does</p>",
        "id": 347533850,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680822304
    },
    {
        "content": "<p>If your structure is impossible to ever constructively decide equality (like the reals), then you may as well just add <code>noncomputable instance : DecidableEq Test := Classical.dec_eq _</code></p>",
        "id": 347534415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680822603
    },
    {
        "content": "<p>I think that might lead to less pain than using the Classical locale</p>",
        "id": 347534522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680822655
    }
]