[
    {
        "content": "<p>I'm getting somehow annoyed by the different conventions we have for naming the same map but bundled in different ways. For example, compare the naming of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.compContinuousMultilinearMapL#doc\">docs#ContinuousLinearMap.compContinuousMultilinearMapL</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.evalClm#doc\">docs#ContinuousMap.evalClm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SchwartzMap.evalCLM#doc\">docs#SchwartzMap.evalCLM</a>, and so on... Unless someone has a magic way to allow the use of morphism classes here (I may actually have one which is a bit ugly, see below), I would like to decide on a general naming scheme here. </p>\n<p>One thing that would be realy nice imo is being able to tell at a glance which part of the name refers to the name of the map, and which part refers to the bundling. Natural options would be to use <code>nameOfMap.type</code> or <code>nameOfMap.asType</code>, e.g <code>ContinuousMap.evalClm</code> could become <code>ContinuousMap.eval.asContinuousLinearMap</code>. I think it makes sense to also allow abbreviations here as long as they are clearly documented (e.g <code>Clm</code> for <code>ContinuousLinearMap</code>, or <code>Bcf</code> for <code>BoundedContinuousFunctions</code>), and they are also a thousand variations we could choose from (maybe we just write <code>.continuousLinear</code>?). The thing I really like with having the dot as a separation is that it's clearer semantically, especially in cases where the name has to contain two hom names like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.compContinuousMultilinearMapL#doc\">docs#ContinuousLinearMap.compContinuousMultilinearMapL</a>.</p>\n<p>I'd like to get opinions on that (and other naming suggestions in the same vein!), because I feel like this is getting out of hand quite quickly...</p>",
        "id": 394208138,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696165347
    },
    {
        "content": "<p>Note that things are sometimes doubly bundled, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.llcomp#doc\">docs#LinearMap.llcomp</a></p>",
        "id": 394210041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696166195
    },
    {
        "content": "<p>I think this one could reasonably be called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.comp.asBilinear#doc\">docs#LinearMap.comp.asBilinear</a> but I agree that it's not ideal. Of course there are a bunch of edge cases like these that we need to think about!</p>",
        "id": 394210115,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696166271
    },
    {
        "content": "<p>Another option would be to have <code>LinearMap.eval</code> be fully unbundled, and then have the spelling be <code>LinearMap.of (LinearMap.eval)</code></p>",
        "id": 394210244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696166314
    },
    {
        "content": "<p>(via the return of an <code>IsLinearMap</code> typeclass)</p>",
        "id": 394210337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696166369
    },
    {
        "content": "<p>Re: potential way to make use of morphism classes.</p>\n<p>We could make each morphism that needs to be highly bundled have its own type (typically a singleton of itself), make this type <code>FunLike</code> and add bunch of <code>HomClass</code> instances to it depending on some assumptions. The problem is that gets annoying as soon as the map depends on some data, because introducing dependent types when we don't need them is not a good idea...</p>",
        "id": 394210501,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696166448
    },
    {
        "content": "<p>Of course the other solution is <code>IsLinearMap</code>, but that sounds like opening a can of worms...</p>",
        "id": 394210649,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696166535
    }
]