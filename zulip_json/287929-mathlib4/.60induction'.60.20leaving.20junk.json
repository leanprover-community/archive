[
    {
        "content": "<p>If I induct on a natural <code>b</code>, I expect the base case <code>b = 0</code> to have no mention of a random variable <code>b</code>. But with <code>induction'</code> (which we're using in NNG for pedagogical reasons) <code>b</code> lives on as does a phantom hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"c1\">-- base case</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a : ℕ</span>\n<span class=\"cm\">  ⊢ a + Nat.zero = a → Nat.zero = 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"c1\">-- h : a + b = a</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"c1\">-- not so fine...</span>\n  <span class=\"c1\">-- base case</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  a b: ℕ</span>\n<span class=\"cm\">  h✝ : a + b = a</span>\n<span class=\"cm\">  h : a + Nat.zero = a</span>\n<span class=\"cm\">  ⊢ Nat.zero = 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- Why does b still exist in the base case? And why does h✝ exist at all?</span>\n  <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can someone suggest a modification to <code>induction'</code> which removes this junk? It's pretty confusing for beginners, unfortunately.</p>",
        "id": 396579959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697237164
    },
    {
        "content": "<p>(I'm not worried about <code>Nat.zero</code> v <code>0</code>, this issue has been dealt with in NNG4 like it was dealt with in NNG3)</p>",
        "id": 396579989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697237205
    },
    {
        "content": "<p>If you're using it for pedagogical reasons, and it's weird and confusing ... don't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"c1\">-- h : a + b = a</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">.</span>\n    <span class=\"c1\">-- a: ℕ</span>\n    <span class=\"c1\">-- h: a + Nat.zero = a</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">.</span>\n    <span class=\"c1\">-- an: ℕ</span>\n    <span class=\"c1\">-- ih: a + n = a → n = 0</span>\n    <span class=\"c1\">-- h: a + Nat.succ n = a</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396580670,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697237801
    },
    {
        "content": "<p>This also happens sometimes with <code>induction</code>; I can try and dig up a mwe later.</p>",
        "id": 396580834,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697237980
    },
    {
        "content": "<p>The game engine I'm using doesn't have the capability to do all this <code>case zero</code> stuff. I am limited to using Lean in some very specific way.</p>",
        "id": 396580842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697237989
    },
    {
        "content": "<p>Basically in NNG3 we had it working fine, and as you point out <code>induction</code> doesn't have this problem, but in Lean 4 it has other problems which are far less intuitive for mathematicians. A mathematician wants to say <code>induction</code> and then get the two cases, which is almost exactly what <code>induction'</code> is doing (modulo the junk) and not at all what <code>induction</code> is doing (because of all the 2d stuff, which I'm sure is very exciting for computer scientists who work with all kinds of exotic inductive types like <code>List</code> etc, but is not ideal when you only care about Nat).</p>",
        "id": 396581075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697238149
    },
    {
        "content": "<p>If you want a really quick workaround just for natural numbers, you could probably just <code>collectForwardDependencies</code> of <code>b</code> and then <code>clear</code> in the cases where everything is what you expect. (I’ll see if I can get it working, but if someone wants to beat me to it, feel free!)</p>",
        "id": 396581679,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697238662
    },
    {
        "content": "<p>I think I just got to the bottom of this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7684\">#7684</a></p>\n<p>Looks like one missing <code>mainGoal.withContext do</code> does it.</p>",
        "id": 396686031,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1697327394
    }
]