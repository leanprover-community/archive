[
    {
        "content": "<p>Does Lake hash the toolchain commit SHA (as displayed by <code>lean -v</code>) or does it hash the toolchain name (i.e. <code>lean-toolchain</code>'s contents)? If the latter, then I think CI shouldn't use <code>lake exe cache get/put</code> when running on a PR with a <code>lean-pr-testing</code> toolchain, because those releases are updated \"in-place\" when new commits arrive on a PR.</p>",
        "id": 394892084,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696442787
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 394927281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696459610
    },
    {
        "content": "<p>Following up, since we added the \"check cache\" step in Mathlib CI there have been many failures in <code>lean-pr-testing-NNNN</code> branches that I would like to get to the bottom of.</p>\n<p>As an example, on <a href=\"https://github.com/leanprover-community/mathlib4/tree/lean-pr-testing-2612\">branch#lean-pr-testing-2612</a>, <code>lake exe cache get</code> reports retrieving 100% of the files, but then <code>lake build</code> starts from scratch.</p>",
        "id": 394928383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696460409
    },
    {
        "content": "<p>The answer to Mauricio's question is relevant here, as this toolchain has been \"updated in place\".</p>",
        "id": 394928410,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696460430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It hashes the the commit SHA (i.e., <code>lean --githash</code>)</p>",
        "id": 394945530,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696471389
    },
    {
        "content": "<p>Thanks. Unfortunately that means I don't understand the cache failure on <a href=\"https://github.com/leanprover-community/mathlib4/tree/lean-pr-testing-2612\">branch#lean-pr-testing-2612</a>. :-(</p>",
        "id": 394946113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696471744
    },
    {
        "content": "<p>My bet is that the cache script hashes <code>lean-toolchain</code> only.</p>",
        "id": 394967817,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696484387
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Cache/Hashing.lean#L60\">https://github.com/leanprover-community/mathlib4/blob/master/Cache/Hashing.lean#L60</a></p>",
        "id": 394968022,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696484523
    },
    {
        "content": "<p>So for the 2612 case, Lake will report different hashes, but the cache script will store them in the same place.</p>",
        "id": 394968111,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696484584
    },
    {
        "content": "<p>But given Mac's information, this only causes rebuilds (the cache hit corresponds to out-of-date files), which seems less worrying than using out-of-date oleans.</p>",
        "id": 394968412,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696484717
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7513\">#7513</a></p>",
        "id": 394971545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696486585
    }
]