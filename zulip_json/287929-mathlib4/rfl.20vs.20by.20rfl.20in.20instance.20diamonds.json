[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6391\">#6391</a> (using instances only on that branch), I found an instance diamond which fails to unify with <code>rfl</code> but succeeds with <code>by rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">StarOrderedRing.toStarRing</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.instStarRingComplexToNonUnitalSemiringToNonUnitalCommSemiringToNonUnitalCommRingCommRing</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">StarOrderedRing.toStarRing</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.instStarRingComplexToNonUnitalSemiringToNonUnitalCommSemiringToNonUnitalCommRingCommRing</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 382237276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691277542
    },
    {
        "content": "<p>Perhaps even more scarily, the term generated by <code>by rfl</code> doesn't appear to work if you try to use it directly</p>",
        "id": 382237641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691277836
    },
    {
        "content": "<p>Is this a transitivity failure in defeq (which we know are possible) turning up in a place that we didn't expect?</p>",
        "id": 382237653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691277843
    },
    {
        "content": "<p>Nevermind, the problem was between the chair and keyboard. This is still weird behavior, but not really something we care about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 382300622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691311295
    },
    {
        "content": "<p>What do you mean the term that <code>by rfl</code> produces? Shouldn't that be <code>rfl</code>??</p>",
        "id": 382371387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691330976
    },
    {
        "content": "<p>Just to be clear (it was a while before I spotted it) -- <code>bar</code> should be a def not a lemma.</p>",
        "id": 382371675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691331062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, I think that Eric refers to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">--example : foo = bar := rfl -- fails</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RFL</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">byRFL</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">byRFL</span> <span class=\"c1\">-- theorem byRFL : foo = bar := Eq.refl foo</span>\n<span class=\"k\">#print</span> <span class=\"n\">RFL</span>   <span class=\"c1\">-- theorem RFL : foo = 1 := rfl</span>\n</code></pre></div>\n<p><code>byRFL</code> produces <code>Eq.refl foo</code>.</p>",
        "id": 382379916,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691333316
    },
    {
        "content": "<p>... and the worrying part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  Eq.refl foo</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  foo = foo : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  foo = bar : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 382380328,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691333412
    },
    {
        "content": "<p>\"worrying\" only if you're going to make data with lemmas and then are interested in analysing why random stuff is now broken</p>",
        "id": 382380592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691333497
    },
    {
        "content": "<p>Yes, I agree that it is not worrying, but the error message does not make it clear where the issue is, so it might be tricky to debug.</p>",
        "id": 382382289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691333986
    }
]