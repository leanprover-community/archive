[
    {
        "content": "<p>I regularly get bitten by a failing CI because I used a <code>where</code> clause to define a helper function, and then the docstring linter asks for a docstring for it.</p>\n<p>My assumption is that <code>where</code> is “just” some macro that defines a top-level function (namespace-prefixed with the containing function name), and the docstring linter doesn't even know it came from a <code>where</code>, which explains the current behavior.</p>\n<p>Is this behavior desirable, or should these definitions somehow be marked “internal” in some sense, and not require docstrings?</p>",
        "id": 397527968,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697728718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc.20lint.20on.20.60let.20rec.60.3F/near/390376885\">I've complained about this too</a>. The <code>where</code> clause is syntax sugar for <code>let rec</code>. I'd like the docstring linter to be able to know that these are auxiliary definitions and don't need docstrings. Maybe Lean could give default docstrings for <code>let rec</code> definitions (\"This is an auxiliary definition generated by <code>foo</code>.\")</p>",
        "id": 397625397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697775313
    },
    {
        "content": "<p>So a proper fix would be to have <code>where</code> or <code>let rec</code> annotate them somehow, and have the linter pick that annotation up?<br>\nThe current linter code doesn’t look like it’s looking for anything we can use here… And the <code>nolint</code> attribute is defined in <code>std4</code>, while <code>where</code> is defined in lean, so that’d be an odd inversion of control.</p>\n<p>And it’s not just the linter – wouldn’t you expect such local definitions to be hidden from the generated API documentation? So maybe it _is_ a more general concept.</p>\n<p>How does this relate to the <code>private</code> modifier? Should <code>where</code> and <code>let rec</code> use the private modifier? Would this not solve the problem?</p>\n<p>Let’s see: <a href=\"https://github.com/leanprover/lean4/pull/2717\">lean4#2717</a>. Hmm, maybe not the best way.</p>\n<p>Created a RFC at <a href=\"https://github.com/leanprover/lean4/pull/2719\">lean4#2719</a>.</p>",
        "id": 397650932,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697788224
    },
    {
        "content": "<p>I have an alternative fix in mind which is for the doc-string linter to detect this type of \"sub-declaration\" (i.e. a declaration added to the environment as part of some larger def) using the <code>declarationRanges</code> and simply ignore them</p>",
        "id": 397684731,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697799636
    },
    {
        "content": "<p>Using <code>declarationRanges</code> is clever, but sounds a bit hacky to me… I’d rather see an explicit flag added to the definition that indicates that this has been lifted out of its context by the elaborator.</p>",
        "id": 397686742,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697800375
    }
]