[
    {
        "content": "<p>Do we have them already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nary1_of_unary</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nary2_of_binary</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394652446,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696344875
    },
    {
        "content": "<p>We have something like this in the model theory library</p>",
        "id": 394657889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346611
    },
    {
        "content": "<p>I think there are helper constructors like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FirstOrder.Language.Structure.mk#doc\">docs#FirstOrder.Language.Structure.mk</a> 2</p>",
        "id": 394658078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346668
    },
    {
        "content": "<p>If you mean this one<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/68c7277eb809a743588fe39cd21737944bf8e6c6/Mathlib/ModelTheory/Basic.lean#L115-L116\">https://github.com/leanprover-community/mathlib4/blob/68c7277eb809a743588fe39cd21737944bf8e6c6/Mathlib/ModelTheory/Basic.lean#L115-L116</a><br>\nit didn't help me.</p>",
        "id": 394658575,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696346833
    },
    {
        "content": "<p>I mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.mk%E2%82%82\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.mk%E2%82%82</a></p>",
        "id": 394658832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696346911
    },
    {
        "content": "<p>I could almost use <code>FirstOrder.Language.funMap₂</code> if I worked with different (arguably more complicated) types.</p>\n<p>However, as I pointed out elsewhere, I don't want to tie my code to the <code>FirstOrder.Language</code> from model theory.</p>",
        "id": 394670025,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696350341
    }
]