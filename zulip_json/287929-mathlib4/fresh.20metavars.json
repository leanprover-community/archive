[
    {
        "content": "<p>I just had to resort to the following hack</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"c1\">-- Porting note: this is an ugly hack, but `?ih` on the next line fails</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">ba</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">zorn_nonempty_partialOrder₀</span> <span class=\"o\">(</span><span class=\"n\">Set.Iio</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">ih</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hbk</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>whereas I expected that I could just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">ba</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">zorn_nonempty_partialOrder₀</span> <span class=\"o\">(</span><span class=\"n\">Set.Iio</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">ih</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hbk</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 325100762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675242899
    },
    {
        "content": "<p>Is this to be expected?</p>",
        "id": 325100794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675242907
    },
    {
        "content": "<p>For the record, this is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1976\">https://github.com/leanprover-community/mathlib4/pull/1976</a>, around L480</p>",
        "id": 325100853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675242927
    }
]