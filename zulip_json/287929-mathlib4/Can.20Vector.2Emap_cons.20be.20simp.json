[
    {
        "content": "<p>In the spirit of Chesterson's fence, is there a strong reason why <code>Vector.map_nil</code> is marked <code>@[simp]</code>, but <code>Vector.map_cons</code> isn't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A `nil` vector maps to a `nil` vector. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_nil</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">vector.map_nil</span> <span class=\"n\">Vector.map_nil</span>\n\n<span class=\"sd\">/-- `map` is natural with respect to `cons`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">vector.map_cons</span> <span class=\"n\">Vector.map_cons</span>\n</code></pre></div>\n<p>It seems to me that you usually want the <code>map</code> to be unfolded if you know that it's being applied to a vector with more than one element</p>\n<p>I noticed that neither <code>List.map_nil</code> nor <code>List.map_cons</code> is marked <code>simp</code> either</p>",
        "id": 365578339,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686579424
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs4#List.map</a> tagged <code>simp</code>?</p>",
        "id": 365578961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686579541
    },
    {
        "content": "<p>Nope, then I'm surprised <code>Vector.map_cons</code>, <code>List.map_nil</code>, <code>List.map_cons</code> are not tagged simp.</p>",
        "id": 365579198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686579586
    },
    {
        "content": "<p>So my intuition that we want these kinds of rewrite to be <code>simp</code> is correct? Then I'll make that change (I'm working on a PR to add some <code>Vector</code> theorems)</p>",
        "id": 365580356,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686579803
    },
    {
        "content": "<p>Yes, unless you see a lot of breakage when doing so (but I'm not expecting that to happen).</p>",
        "id": 365580525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686579834
    },
    {
        "content": "<p>There are a couple of reasons why you might not want to mark something as simp.  One disadvantage of marking <code>map_cons</code> as simp is that it duplicates the function.  If you have <code>map (f ....) [1,2,3,4]</code> then <code>map_cons would turn this into </code>[f ... 1, f ... 2, f ... 3, f ... 4]<code>.  And if </code>f` is big, then the resulting goal state can easily become huge and hard to read.</p>",
        "id": 365593343,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686582315
    },
    {
        "content": "<p>Another reason is that the simp lemma destroys structure and prevents other simp lemmas from doing something more useful (a form of nonconfluence).  This is why we've removed <code>and_assoc</code> etc. from the simp set.  Another one that annoys me greatly is <code>Set.mem_image</code>, which I always have to disable because what I actually want is <code>Set.ball_image_iff</code>.</p>",
        "id": 365594366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686582532
    }
]