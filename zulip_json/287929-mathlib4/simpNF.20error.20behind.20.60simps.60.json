[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1995\">!4#1995</a> this definition causes a <code>simpNF</code> error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The additive version of `Finsupp.toTinsupp`. Note that this is `noncomputable` because</span>\n<span class=\"bp\">`</span><span class=\"n\">Finsupp.hasAdd</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"kd\">noncomputable</span><span class=\"bp\">.</span> <span class=\"bp\">-/</span>\n<span class=\"kd\">@[simps (config := { fullyApplied := false })]</span>\n<span class=\"kd\">def</span> <span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">Π₀</span> <span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">finsuppEquivDfinsupp</span> <span class=\"k\">with</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.toDfinsupp</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Dfinsupp.toFinsupp</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.toDfinsupp_smul</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.toDfinsupp_add</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">finsuppLequivDfinsupp_apply_apply</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ↑(finsuppLequivDfinsupp R).toLinearMap</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ↑(finsuppLequivDfinsupp R)</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [@LinearEquiv.coe_coe]</span>\n</code></pre></div>\n<p>but I have no access to the definition that's failing... (I only know this is the definition that fails by using the hack of moving <code>#lint</code> up the file until it doesn't fail...</p>",
        "id": 325289974,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675294382
    },
    {
        "content": "<p>I tried to <code>nolint</code> here, but it doesn't help</p>",
        "id": 325299353,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675299770
    },
    {
        "content": "<p><em>and</em>  if I remove the <code>config</code> section from <code>simps</code> the lint issue goes away....</p>",
        "id": 325300562,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675300685
    },
    {
        "content": "<p><code>simps?</code> will tell you the declarations that <code>simps</code> is generating.</p>",
        "id": 325304830,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675304418
    },
    {
        "content": "<p>Ah, yes, I see the declaration... What's the fix here?</p>",
        "id": 325305424,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675304907
    },
    {
        "content": "<p>I see in another file that the fix was to add the lemmas manually...</p>",
        "id": 325306281,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675305605
    },
    {
        "content": "<p>And the generated code doesn't typecheck?</p>",
        "id": 325308621,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675307362
    },
    {
        "content": "<p>The fact that the code from the pretty printer doesn't type check isn't too surprising, you may need to massage it a bit.</p>\n<p>The problem is that the LHS isn't simplified (i.e., there is some other lemma that simplifies the LHS), which means that sometimes this lemma wouldn't get applied when you want it to (because it will get \"skipped over\" due to the other simp lemma).</p>\n<p>In this case, I personally think it makes sense to replace the LHS of the generated lemma with the one provided by <code>simpNF</code> (and so you should manually add the <code>simp</code> lemma).</p>",
        "id": 325314782,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675311992
    },
    {
        "content": "<p>Thanks. Yep, on it as soon as I figure out the types.</p>",
        "id": 325316183,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675313453
    },
    {
        "content": "<p>As an example, <code>simps?</code> generates (this is one of the ones that <code>simpNF</code> didn't complain about):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">finsuppLequivDfinsupp_apply_apply</span><span class=\"o\">:</span>\n            <span class=\"bp\">&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">],</span>\n      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.toDfinsupp</span>\n</code></pre></div>\n<p>which I've translated as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">finsuppLequivDfinsupp_apply_toAddHom_apply</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]:</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.toAddHom</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.toDfinsupp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but we get type errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.toAddHom</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">AddHom</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.64898</span> <span class=\"bp\">→₀</span> <span class=\"bp\">?</span><span class=\"n\">m.64899</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Dfinsupp</span> <span class=\"k\">fun</span> <span class=\"n\">_i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.64899</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.64895</span> <span class=\"bp\">?</span><span class=\"n\">u.64897</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.64785</span> <span class=\"bp\">→₀</span> <span class=\"bp\">?</span><span class=\"n\">m.64786</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Dfinsupp</span> <span class=\"k\">fun</span> <span class=\"n\">_i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m.64786</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.64783</span> <span class=\"bp\">?</span><span class=\"n\">u.64784</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(note that it doesn't matter if I take the <code>simps</code> output more verbatim -- same issues with the below (which is the same thing modulo prettier formatting and previous <code>variable</code> declarations).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finsuppLequivDfinsupp_apply_toAddHom_apply</span><span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n      <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">],</span>\n      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.toAddHom</span> <span class=\"bp\">=</span> <span class=\"n\">Finsupp.toDfinsupp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 325319097,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675316064
    },
    {
        "content": "<p><code>simps</code> is configured wrong for <code>linearEquiv</code>, it shouldn't even generate these lemmas, and didn't do this in Lean 3. I will PR a fix, going through all <code>simps</code> configurations.</p>\n<p>There is still one thing I don't understand, maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> knows what's going on.<br>\nIf, after the definition of <code>finsuppLequivDfinsupp</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1995\">!4#1995</a>, I write the following, then <code>simp</code> can simplify the LHS of both lemmas, but the linter complains only about 1 of them. Is that expected? Should the linter also complain about <code>lemma2</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma1</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finsupp.toDfinsupp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simplifies LHS to `↑(finsuppLequivDfinsupp R)`</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">finsuppLequivDfinsupp</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Finsupp.toDfinsupp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- simplifies LHS to `↑(finsuppLequivDfinsupp R) f`</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- simpNF complains only about lemma1, not about lemma2</span>\n</code></pre></div>",
        "id": 325413247,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675348422
    },
    {
        "content": "<p>The only difference between lemma1 and lemma2 is that lemma1's lhs is <code>foo</code> and lemma2's lhs is <code>foo x</code>, right?  Then it should be clear why only lemma2 is redundant: lemma1 applies to lemma2 but not vice versa.</p>",
        "id": 325460955,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675360525
    },
    {
        "content": "<p>Yes, that is exactly the difference. <br>\nIn this case lemma2 is redundant, because of lemma1, but I am confused why the <code>simpNF</code> linter doesn't complain about it (<code>lemma2</code>), even though the LHS is not in simp-normal form.</p>",
        "id": 325470948,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675363397
    },
    {
        "content": "<p>I guess lemma2 is simplified using itself, so it doesn't look like it's redundant.</p>",
        "id": 325473168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675364015
    },
    {
        "content": "<p>In Lean 4 subexpressions are not simplified first? Is this allowed for the same reason that in Lean 3  we could have simp lemmas that specialize earlier simp-lemmas?</p>",
        "id": 325475989,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675364843
    },
    {
        "content": "<p>I think it's more \"partial applications are not simplified first\", but I'd need to check.</p>",
        "id": 325490629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675369381
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 325496366,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675371542
    }
]