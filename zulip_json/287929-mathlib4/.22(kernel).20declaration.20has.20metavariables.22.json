[
    {
        "content": "<p>I got a proof for <code>prodMap_comp_comp</code> based on the mathlib3 <code>tidy?</code> output for <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> but I now get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">PFun.prodMap_comp_comp'</span>\n</code></pre></div>\n<p>What does this mean?</p>",
        "id": 322759376,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674322198
    },
    {
        "content": "<p>It means something went wrong. Most likely, a tactic.</p>",
        "id": 322759550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674322274
    },
    {
        "content": "<p>Hmm -- none of the tactics fail. Is there any debugging or logging I can turn on?</p>",
        "id": 322760216,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674322622
    },
    {
        "content": "<p>Right, it's not that a tactic would have failed (in the tactic sense), but that it would have produced a bad term that still has a metavariable in it.</p>",
        "id": 322761975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323609
    },
    {
        "content": "<p>Is there <code>recover</code> in Lean 4?</p>",
        "id": 322761990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323621
    },
    {
        "content": "<p>Usually there is some guesswork involved I think, for example, if you are using some rarely used tactic then most likely it is responsible</p>",
        "id": 322762010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323639
    },
    {
        "content": "<p>isn't there a trace option to see any terms passed to the kernel? lemme poke around the trace autocompletions</p>",
        "id": 322762528,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674323917
    },
    {
        "content": "<p>It‚Äôs üíØ simp/dsimp/cases/constructor/intro/assumption</p>",
        "id": 322767366,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674326835
    },
    {
        "content": "<p>Just - a lot of the above</p>",
        "id": 322767612,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674326983
    },
    {
        "content": "<p>If you compare with the same proof in mathlib3, you should be able to pinpoint the error more precisely.</p>",
        "id": 322767785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674327078
    },
    {
        "content": "<p>Proof was by tidy.</p>",
        "id": 322768038,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674327272
    },
    {
        "content": "<p>The current proof uses the walk that tidy? Produces.</p>",
        "id": 322768112,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674327341
    },
    {
        "content": "<p>You can use <code>show_term</code> to see the proof term, look for any <code>?m.NNN</code> inside the result</p>",
        "id": 322775242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674332018
    },
    {
        "content": "<p>Usually when I saw this, a term in the proof was full of metavars. I'd try writing a lot of explicit variables when you write it down</p>",
        "id": 322781847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337539
    },
    {
        "content": "<p>Or taking care with implicit lambdas</p>",
        "id": 322781862,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337546
    },
    {
        "content": "<p>mathport doesn't annotate the implicit lambda feature</p>",
        "id": 322781874,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337558
    },
    {
        "content": "<p>is there any way to turn it off for a file?</p>",
        "id": 322781892,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337564
    },
    {
        "content": "<p>There‚Äôs an option for it, don‚Äôt remember what the full name is but I think it‚Äôs <code>‚Ä¶autoImplicitLambda</code></p>",
        "id": 322783253,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674338626
    },
    {
        "content": "<p>Even if you manage to fix the proof, please continue to report failures like this. The kernel should never see a metavariable (whatever the starting state of the proof), so this error always indicates a tactic bug.</p>",
        "id": 322784854,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1674339929
    },
    {
        "content": "<p>Here's the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>Output of <code>show_term</code> at the first <code>assumption</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mk.mk.mp.intro.intro.intro.h.h.left.intro.intro</span>\n<span class=\"n\">Œ±</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">Œ≤</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">Œ≥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">Œ¥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">Œµ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">Œπ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"n\">ff‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span>\n<span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">g‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span>\n<span class=\"n\">g‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk.mp.intro.intro.intro.h.h.right.intro.intro</span>\n<span class=\"n\">Œ±</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">Œ≤</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">Œ≥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">Œ¥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">Œµ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">Œπ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"n\">ff‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span>\n<span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">g‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span>\n<span class=\"n\">g‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">PFun.lean</span><span class=\"o\">:</span><span class=\"mi\">699</span><span class=\"o\">:</span><span class=\"mi\">72</span>\n<span class=\"n\">h_left</span>\n<span class=\"n\">PFun.lean</span><span class=\"o\">:</span><span class=\"mi\">699</span><span class=\"o\">:</span><span class=\"mi\">72</span>\n<span class=\"n\">h_right</span>\n</code></pre></div>",
        "id": 322788199,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342299
    },
    {
        "content": "<p>It's similar for the other assumption except that the <code>show_term</code> term is a hygienic term.</p>",
        "id": 322788359,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342437
    },
    {
        "content": "<p>If I explicitly name them, it doesn't help.</p>",
        "id": 322788458,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342510
    },
    {
        "content": "<p>Now, all of the <code>constructor</code> and <code>cases</code> terms have metavars, but nothing by the time the actual proof state is generated.</p>",
        "id": 322788718,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342738
    },
    {
        "content": "<p>Current state of the proof is the better styled:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_left</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_right</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">h_right</span> <span class=\"k\">with</span> <span class=\"n\">hrl</span> <span class=\"n\">hrr</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrr</span>\n</code></pre></div>",
        "id": 322788889,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342896
    },
    {
        "content": "<p>did you try <code>show_term</code> around the first subproof (the <code>. constructor ...</code> part)?</p>",
        "id": 322789188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343193
    },
    {
        "content": "<p>if you use <code>show_term</code> on a nonterminal tactic then an expression with metavars is expected</p>",
        "id": 322789254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343227
    },
    {
        "content": "<p>a term like <code>h_left</code> is fine, same thing if the term is hygienic</p>",
        "id": 322789281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343262
    },
    {
        "content": "<p>it's only metavariables you should be looking for</p>",
        "id": 322789289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322761990\">said</a>:</p>\n<blockquote>\n<p>Is there <code>recover</code> in Lean 4?</p>\n</blockquote>\n<p>yes</p>",
        "id": 322789388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343379
    },
    {
        "content": "<p>you can also use <code>recover</code> here in place of <code>show_term</code>; it's a no-op if the enclosed tactic closed all the goals it was supposed to</p>",
        "id": 322789493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322788889\">said</a>:</p>\n<blockquote>\n<p>Current state of the proof is the better styled:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_left</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_right</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">h_right</span> <span class=\"k\">with</span> <span class=\"n\">hrl</span> <span class=\"n\">hrr</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrr</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can you link to a branch?</p>",
        "id": 322789719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674343727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a></p>",
        "id": 322790931,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674344831
    },
    {
        "content": "<p><code>show_term</code> after <code>.</code> and before <code>constructor</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exists.intro</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132259</span> <span class=\"n\">w_right</span> <span class=\"n\">w_left</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132260</span> <span class=\"n\">w_right</span> <span class=\"n\">w_left</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132136</span> <span class=\"n\">w_left</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">w_left</span><span class=\"o\">),</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132193</span> <span class=\"n\">w_left</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">w_left</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 322791038,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674344935
    },
    {
        "content": "<p>Here's another one, nicely minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mport</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Part</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Part</span> <span class=\"kn\">hiding</span> <span class=\"n\">some</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PartENat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Part</span> <span class=\"n\">‚Ñï</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">PartENat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y.Dom</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x.Dom</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y.Dom</span><span class=\"o\">,</span> <span class=\"n\">x.get</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">y.get</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">partialOrder</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">PartENat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyz‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hyz‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span> <span class=\"bp\">‚àò</span> <span class=\"n\">hyz‚ÇÅ</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">hxy‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyz‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)‚ü©</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hyx‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Part.ext'</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">‚ü©</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">hxy‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyx‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>yields: <code>(kernel) declaration has metavariables 'partialOrder'</code></p>",
        "id": 324372403,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674958942
    },
    {
        "content": "<p>It may be a coincidence that both of these have <code>Part</code> at their core...</p>",
        "id": 324372561,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674959118
    },
    {
        "content": "<p>Narrowing this down by inserting <code>by show term exact</code> before each of the definitions, the issue is in <code>Part.ext'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span>  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hyx‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Part.ext'</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">‚ü©</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">hxy‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyx‚ÇÇ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>has an errror there: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ext'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.1000.Dom</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">?</span><span class=\"n\">m.1001.Dom</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1000.Dom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1001.Dom</span><span class=\"o\">),</span> <span class=\"n\">Part.get</span> <span class=\"bp\">?</span><span class=\"n\">m.1000</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">Part.get</span> <span class=\"bp\">?</span><span class=\"n\">m.1001</span> <span class=\"n\">h‚ÇÇ</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">?</span><span class=\"n\">m.1000</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.1001</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 324373021,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674959485
    },
    {
        "content": "<p>Show term at <code>Part.ext'</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">let_fun</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">H1</span><span class=\"bp\">;</span>\n<span class=\"bp\">?</span><span class=\"n\">m.1815</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 324373482,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674959825
    },
    {
        "content": "<p>This is quite bizarre, but at least adding the remaining fields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">¬¨</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>fixes the error</p>",
        "id": 324382397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674967252
    },
    {
        "content": "<p>But even with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>the error is still there</p>",
        "id": 324382486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674967346
    },
    {
        "content": "<p>You can use <code>set_option trace.Elab.definition true in</code> to see the actual definition sent to the kernel. It really does contain metavariables.<br>\nThey seem to be related to the use of pattern-matching lambdas. With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">partialOrder</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">PartENat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">‚ü®</span><span class=\"n\">p.1</span> <span class=\"bp\">‚àò</span> <span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">p.2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q.2</span> <span class=\"n\">_</span><span class=\"o\">)‚ü©</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Part.ext'</span> <span class=\"o\">‚ü®</span><span class=\"n\">q.1</span><span class=\"o\">,</span> <span class=\"n\">p.1</span><span class=\"o\">‚ü©</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">p.2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q.2</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the error goes away.</p>",
        "id": 324383735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674968339
    },
    {
        "content": "<p>Theory: maybe at the time <code>by exact Iff.rfl</code> runs the rest of the definition is not yet fully elaborated and still contains metavariables, which end up inside the argument of <code>Iff.rfl</code>. Then when the metavariables are eventually assigned, that term doesn't get its metavariables instantiated. In any case, it looks like a bug.</p>",
        "id": 324384988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674969271
    },
    {
        "content": "<p>Here is a mathlib-free reproducer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PartENat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">PartENat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y.Dom</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x.Dom</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y.Dom</span><span class=\"o\">,</span> <span class=\"n\">x.get</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">y.get</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Pr</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">LT</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">True</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">¬¨</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PO</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Pr</span> <span class=\"n\">Œ±</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">partialOrder</span> <span class=\"o\">:</span> <span class=\"n\">PO</span> <span class=\"n\">PartENat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyz‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hyz‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">¬¨</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">‚ü®</span><span class=\"n\">hxy‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hxy‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">hyx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hyx‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 324384997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674969283
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover/lean4/pull/2071\">lean4#2071</a>.<br>\nFor now I suggest adding the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span> <span class=\"c1\">-- TODO: Remove after lean4#2071 is fixed.</span>\n</code></pre></div>",
        "id": 324386301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674970524
    },
    {
        "content": "<p>I wonder whether your other issue from last week is related to <a href=\"https://github.com/leanprover/lean4/pull/2054\">lean4#2054</a> (maybe this is already known to the experts).</p>",
        "id": 324387157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674971335
    },
    {
        "content": "<p>I replaced the proof of <code>prodMap_comp_comp</code> with a term mode one, that doesn't cause any error.</p>",
        "id": 324388817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674972838
    },
    {
        "content": "<p>Another case of this appearing -- and only one of the destructions needs to be avoided to avoid the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RelHom</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ofRel</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsRefl</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">Hom</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">RelQuiver</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsTrans</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CategoryStruct</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsSymm</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CategoryStruct</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Groupoid</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Category</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (kernel) declaration has metavariables 'RelGroupoid'</span>\n<span class=\"kd\">def</span> <span class=\"n\">RelGroupoid</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsRefl</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsSymm</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Groupoid</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsRefl.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsTrans.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsSymm.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RelHom.rel</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ofRel</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RelGroupoid'</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsRefl</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsSymm</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrans</span> <span class=\"n\">S</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Groupoid</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">RelHom</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsRefl.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsTrans.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">id_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">RelHom.ofRel</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">IsTrans.trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">IsRefl.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ofRel</span> <span class=\"o\">(</span><span class=\"n\">IsSymm.symm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.rel</span><span class=\"o\">)</span> <span class=\"c1\">-- here is where the destruction is avoided</span>\n</code></pre></div>",
        "id": 360151172,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684727879
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4232\">!4#4232</a> this declaration gives the error in the title:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_of_irreducible_of_monic</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp3</span> <span class=\"o\">:</span> <span class=\"n\">p.Monic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">dvd</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">hp2</span>\n  <span class=\"n\">eq_of_monic_of_associated</span> <span class=\"n\">hp3</span> <span class=\"o\">(</span><span class=\"n\">monic</span> <span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hp3</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">‚ü©‚ü©)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">hq.symm</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">Associated.mul_left</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">associated_one_iff_isUnit.2</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">hp1.isUnit_or_isUnit</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">not_isUnit</span> <span class=\"n\">A</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> how to fix this?</p>",
        "id": 360372070,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684788584
    },
    {
        "content": "<p>I don't know</p>",
        "id": 360372436,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684788704
    },
    {
        "content": "<p>Does Lean4 have an analogue of <code>recover</code>?  It seems like it might be useful to debug this kind of issues.</p>",
        "id": 360376870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684790142
    },
    {
        "content": "<p>After some prodding around, it turned out that all I had to do was add a pair of brackets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_of_irreducible_of_monic</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">Irreducible</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp3</span> <span class=\"o\">:</span> <span class=\"n\">p.Monic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">dvd</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">hp2</span>\n  <span class=\"n\">eq_of_monic_of_associated</span> <span class=\"n\">hp3</span> <span class=\"o\">(</span><span class=\"n\">monic</span> <span class=\"o\">‚ü®</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">hp3</span><span class=\"o\">,</span> <span class=\"n\">hp2</span><span class=\"o\">‚ü©‚ü©)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">hq.symm</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">Associated.mul_left</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">associated_one_iff_isUnit.2</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">hp1.isUnit_or_isUnit</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">not_isUnit</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360377962,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1684790502
    },
    {
        "content": "<p>Here's one I can't get rid of. Help! Filling in the sorries doesn't seem to help.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Colour</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">Colour</span>\n  <span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">Colour</span>\n  <span class=\"bp\">|</span> <span class=\"n\">green</span> <span class=\"o\">:</span> <span class=\"n\">Colour</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">horrify</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Colour</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Colour.red</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Colour.blue</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">Colour.green</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Nat.induction_on</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">motive</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Nat.cases_on</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.induction_on</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mod_invar</span> <span class=\"o\">(</span><span class=\"n\">li</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Colour</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">horrify</span> <span class=\"n\">li</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">horrify</span> <span class=\"n\">li</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚â°</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">li.2.1</span> <span class=\"bp\">+</span> <span class=\"n\">li.2.2</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">li</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">a.cases_on</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">b.cases_on</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">c.cases_on</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">horrify</span><span class=\"o\">,</span> <span class=\"n\">Nat.ModEq</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">ring_nf</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">repeat'</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_mod_right</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">(kernel) declaration has metavariables 'mod_invar'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 376101791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689612352
    },
    {
        "content": "<p>You can change the <code>rcases</code> to a <code>have</code> to destruct <code>li</code> and you get <code>don't know how to synthesize placeholder</code></p>",
        "id": 376104558,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689612962
    },
    {
        "content": "<p>Just hammering it manually with multiple lines of  <code>try {rw [h, ‚Üê add_assoc (G := ‚Ñï), Nat.add_mod_right]} &lt;;&gt;</code> gives <code>unsolved goals</code> only</p>",
        "id": 376105371,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689613141
    },
    {
        "content": "<p>So the problem is with <code>repeat'</code> (and multiple goals) probably? Thanks!</p>",
        "id": 376127774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689618561
    }
]