[
    {
        "content": "<p>The following works in mathlib3, but not in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">+</span> <span class=\"n\">s3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">+</span> <span class=\"n\">c3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">s3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">+</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linear_combination</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span>\n              <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n            <span class=\"n\">h</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span>\n                <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n              <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n            <span class=\"n\">h'</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span> <span class=\"bp\">+</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 397398948,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697674314
    },
    {
        "content": "<p>I think this is <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>",
        "id": 397399068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697674406
    },
    {
        "content": "<p><del>Though <code>macro_rules | `($x ^ $y)   =&gt; `(HPow.hPow $x $y) </code> doesn't seem to help, even though it does change the statement</del></p>",
        "id": 397399157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697674455
    },
    {
        "content": "<p><code>macro_rules | `($x ^ $y)   =&gt; `(HPow.hPow $x $y)</code> and a syntax fix makes this work</p>",
        "id": 397399204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697674496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/regression.20in.20linear_combination/near/397399068\">said</a>:</p>\n<blockquote>\n<p>I think this is <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>\n</blockquote>\n<p>Explicitly saying that all the powers are in nat doesn't fix it</p>",
        "id": 397399241,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697674518
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">s3</span> <span class=\"n\">c1</span> <span class=\"n\">c2</span> <span class=\"n\">c3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">+</span> <span class=\"n\">s3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">+</span> <span class=\"n\">c3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">s3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">+</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span>\n              <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n            <span class=\"n\">h</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">+</span>\n                <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n              <span class=\"n\">s1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n            <span class=\"n\">h'</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span> <span class=\"bp\">+</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 397399266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697674547
    },
    {
        "content": "<p>Oh, never mind, this was me being dumb all along</p>",
        "id": 397399389,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697674633
    },
    {
        "content": "<p>The syntax was broken in my original example!</p>",
        "id": 397399415,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697674662
    },
    {
        "content": "<p>So all that's happening is that the syntax for linear_combination in mathlib4 doesn't allow an extra line before the expression, and that's all that confused me</p>",
        "id": 397399487,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697674695
    },
    {
        "content": "<p>It should</p>",
        "id": 397399907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675001
    },
    {
        "content": "<p>but the next line cannot be less indented than the word <code>linear_combination</code>, as in your example</p>",
        "id": 397399937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675022
    },
    {
        "content": "<p>(which is part of why the style guide prefers to always put <code>by</code> on the previous line)</p>",
        "id": 397400002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675045
    },
    {
        "content": "<p>Hmm, that makes sense, although I got here from <code>polyrith</code></p>",
        "id": 397400213,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697675187
    },
    {
        "content": "<p>(in particular, from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">c1</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">c2</span> <span class=\"bp\">+</span> <span class=\"n\">s3</span> <span class=\"bp\">*</span> <span class=\"n\">c3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">polyrith</span>\n</code></pre></div>\n<p>but I suppose that since I should expect this to be a long call, there's no point writing the <code>by</code> as if I'm expecting a one-line proof</p>",
        "id": 397400391,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697675326
    },
    {
        "content": "<p>even for one line proofs like <code>by simp</code> the style guide is to put the <code>by</code> on the previous line (this is different from lean 3)</p>",
        "id": 397400662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675511
    },
    {
        "content": "<p>but also, what you describe is a bug in \"try this\"</p>",
        "id": 397400753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675556
    },
    {
        "content": "<p>it should have noticed that <code>polyrith</code> is 3 space indented and apply that to the resulting expression</p>",
        "id": 397400781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/regression.20in.20linear_combination/near/397400662\">said</a>:</p>\n<blockquote>\n<p>even for one line proofs like <code>by simp</code> the style guide is to put the <code>by</code> on the previous line (this is different from lean 3)</p>\n</blockquote>\n<p>Is this in the style guide? I remember checking before, and I'm just looking now and I don't see it, but I'm under the weather and clearly missing obvious things so I could be wrong</p>",
        "id": 397400919,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697675667
    },
    {
        "content": "<p>it may not be, a lot of the little details are only written in (formatter) code</p>",
        "id": 397400966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675703
    },
    {
        "content": "<p>Oh I guess it's implicit in that <code>by</code> is <em>always</em> meant to be before the first tactic call, even though some one-line examples in the style guide don't have this</p>",
        "id": 397401003,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697675730
    },
    {
        "content": "<p>If the entire theorem (statement and proof) fits on one line then there is no need for the newline, but if you have to break the line never do so between <code>:=</code> and <code>by</code></p>",
        "id": 397401140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675819
    },
    {
        "content": "<p>That makes a lot of sense, thanks</p>",
        "id": 397401200,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697675872
    },
    {
        "content": "<p>(Someday I'll write a proper code formatter, and then it can do all of this stuff. It's just such a big project...)</p>",
        "id": 397401285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697675911
    },
    {
        "content": "<p>Soon we'll be able to say \"This is correct style because Mario's code formatter says so\", in the meantime I can just say \"This is correct style because Mario says so\" :)</p>",
        "id": 397401519,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697676058
    },
    {
        "content": "<p>So the correct format is now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>? I used to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"bp\">```</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">feels</span> <span class=\"n\">clearer</span> <span class=\"n\">to</span> <span class=\"n\">me</span> <span class=\"n\">because</span> <span class=\"n\">I</span> <span class=\"n\">can</span> <span class=\"n\">see</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">proof</span> <span class=\"n\">starts</span> <span class=\"n\">easily</span>\n</code></pre></div>",
        "id": 397405465,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697678127
    },
    {
        "content": "<p>Why don't you just write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in that case?</p>",
        "id": 397406812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697679011
    },
    {
        "content": "<p>(Note that if the signature needs a linebreak, it must be indented with 4 spaces, not 2 as you have written above.)</p>",
        "id": 397406829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697679031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/regression.20in.20linear_combination/near/397406829\">said</a>:</p>\n<blockquote>\n<p>(Note that if the signature needs a linebreak, it must be indented with 4 spaces, not 2 as you have written above.)</p>\n</blockquote>\n<p>Ohh, that makes the difference then haha</p>",
        "id": 397407066,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697679208
    },
    {
        "content": "<p>my mental style guide says that Scott's version is preferred, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is also acceptable (note that it is still 4 space indented)</p>",
        "id": 397408326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697680131
    },
    {
        "content": "<p>I don't have a strong opinion, but I think the same rule should also apply to <code>axiom</code> and <code>opaque</code>: even though there isn't even a body in this case (the body is optional for <code>opaque</code>), the signature should still be 4 space indented, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397408533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697680291
    }
]