[
    {
        "content": "<p>Oof, I just noticed the following issue with the <code>continuity</code> tactic. It can't seem to apply <code>Continuous.pow</code> (separately, <code>ContinuousAt.pow</code> and friends aren't marked with the <code>continuity</code> attribute, but I'm not sure why). It can apply <code>continuous_pow</code> just fine however.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n<span class=\"c1\">-- this import is too strong, but who cares</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: apply continuous_pow</span>\n\n<span class=\"c1\">-- the following works, but only because it does it \"wrong\" and the values aren't variables</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c\">/-</span><span class=\"cm\"> Try this: by</span>\n<span class=\"cm\">  apply Continuous.mul</span>\n<span class=\"cm\">  · apply continuous_pow</span>\n<span class=\"cm\">  · aesop_unfold [npowRec]</span>\n<span class=\"cm\">    aesop_unfold [npowRec]</span>\n<span class=\"cm\">    aesop_unfold [npowRec]</span>\n<span class=\"cm\">    simp_all only [mul_one]</span>\n<span class=\"cm\">    apply Continuous.mul</span>\n<span class=\"cm\">    · apply continuous_pow</span>\n<span class=\"cm\">    · apply continuous_pow -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c1\">-- to see that it should have been able to do it:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.pow</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"c1\">-- to see that it should have been able to do it:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.pow</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I'm not familiar with diagnosing issues related to <code>aesop</code>, so suggestions for how to approach this would be helpful. (Answer for diagnosing: <code>set_option trace.aesop true</code> or variations thereof, RTFM Jireh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)</p>",
        "id": 389202301,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693923796
    },
    {
        "content": "<p>Isn't this related to the <code>HPow.hPow</code> elaboration issue rather than aesop?</p>",
        "id": 389202975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693923985
    },
    {
        "content": "<p>I don't think so, note the <code>local macro_rules</code> line. I've added short proofs of the failing examples to show that it's just failing to apply <code>Continuous.pow</code>.</p>",
        "id": 389203498,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693924137
    },
    {
        "content": "<p>It seems like <code>Continuous.sub</code> has problems too.  I'm wondering now why these things aren't being picked up by tests. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  (EDIT: answer: because we're not testing for them; the tests for <code>continuity</code> right now are very rudimentary. We either need better tests or maybe a linter.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecificLimits.Normed</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- works</span>\n<span class=\"c\">/-</span><span class=\"cm\"> again, it works, but it does it \"wrong\" by not applying `Continuous.sub`</span>\n<span class=\"cm\">Try this: apply Continuous.add</span>\n<span class=\"cm\">  · apply continuous_pow</span>\n<span class=\"cm\">  · apply Continuous.comp'</span>\n<span class=\"cm\">    · apply ContinuousNeg.continuous_neg</span>\n<span class=\"cm\">    · apply continuous_pow</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- to test whether it *can* apply `Continuous.sub` but just chose not to, we remove</span>\n<span class=\"c1\">-- its work around of using `ContinuousNeg.continuous_neg`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">aesop</span><span class=\"o\">]</span> <span class=\"n\">ContinuousNeg.continuous_neg</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- fails now</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.sub</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 389217333,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693927427
    },
    {
        "content": "<p>So, it seems that the issue with <code>Continuous.sub</code> is only that all our <code>continuity</code> rules are <code>safe</code> in the eyes of <code>aesop</code>. So, <code>aesop</code> applies <code>Continuous.add</code> (I guess because it can see through the fact that <code>a - b = a + (-b)</code> is defeq in this context? or maybe it's because of <code>simp</code> preprocessing?), then it gets stuck.</p>\n<p>So, removing <code>Continuous.add</code> results in a different error, where <code>aesop</code> tries to apply <code>Continuous.star</code> (again, I think it's seeing through the fact that <code>star = id</code> on <code>ℝ</code>, which is weird), and then gets stuck in an infinite loop. But this successfully applies <code>Continuous.sub</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">aesop</span><span class=\"o\">]</span> <span class=\"n\">Continuous.add</span> <span class=\"n\">Continuous.star</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Try this: apply Continuous.sub</span>\n<span class=\"cm\">  · apply continuous_pow</span>\n<span class=\"cm\">  · apply continuous_pow</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 389224753,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693929459
    },
    {
        "content": "<p>The issue with <code>Continuous.pow</code> is I think similar.  <code>aesop</code> applies <code>Continuous.comp'</code> first, and then gets a goal it can't solve. Basically, it tries to do the following, but without the <code>change</code>, and so <code>continuity</code> fails at that step because <code>npowRec</code> doesn't have a <code>continuity</code> lemma.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">--continuity? -- fails</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.comp'</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- `⊢ Continuous (npowRec n)`</span>\n    <span class=\"n\">change</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"n\">continuity</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- `⊢ Continuous fun x ↦ x ^ n`</span>\n    <span class=\"n\">continuity</span>\n\n<span class=\"c1\">-- obviously we want this rule, but this serves to show `continuity` *can* apply `Continuous.pow`.</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">aesop</span><span class=\"o\">]</span> <span class=\"n\">Continuous.comp'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"bp\">?</span> <span class=\"c1\">-- successfully applies `Continuous.pow`</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Try this: apply Continuous.pow</span>\n<span class=\"cm\">    apply continuous_pow</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 389228427,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693930525
    },
    {
        "content": "<p>Can we tweak the priorities of <code>aesop</code> so that it tries <code>Continuous.sub</code> before <code>Continuous.add</code>, and <code>Continuous.comp'</code> last?</p>",
        "id": 389228965,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1693930717
    },
    {
        "content": "<p>I think there are multiple issues going on here. For example, it should <em>never</em> have tried to apply <code>Continuous.star</code>, but it did (I think because <code>star = id</code> on <code>ℝ</code>).</p>",
        "id": 389229246,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693930816
    },
    {
        "content": "<p>As far as priorities go, yes, it's possible. For instance this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">erase_aesop_rules</span> <span class=\"o\">[</span><span class=\"n\">safe</span> <span class=\"n\">apply</span> <span class=\"n\">Continuous.comp'</span><span class=\"o\">]</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"mi\">2</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])]</span> <span class=\"n\">Continuous.comp'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- successfully applies `Continuous.pow`</span>\n</code></pre></div>\n<p>The <code>2</code> in the above is an <code>aesop</code> penalty. Currently the <code>continuity</code> macro doesn't set a penalty, so everything gets the default penalty of <code>1</code>.</p>\n<p>So, we could just edit the <code>continuity</code> macro to accept an option penalty argument to feed into <code>aesop</code>, but I'm wondering whether we should maybe be marking some rules as <code>unsafe</code>.</p>",
        "id": 389232726,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693931895
    }
]