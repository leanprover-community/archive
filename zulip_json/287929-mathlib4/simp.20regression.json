[
    {
        "content": "<p>While porting <code>CategoryTheory.Sites.Canonical</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3936\">!4#3936</a> I found that <code>simp</code> is no longer able to do rewrites inside the parameters of some functions, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/3936/files#diff-05251fffaaa48e9800b7258562e693d46eb691664bd89a0ae32add964dad435fR89-R110\">https://github.com/leanprover-community/mathlib4/pull/3936/files#diff-05251fffaaa48e9800b7258562e693d46eb691664bd89a0ae32add964dad435fR89-R110</a><br>\nIn the first of the similar <code>simp</code> problems which appear we have a goal <code>bind U B (m ≫ l ≫ h ≫ f)</code>, we prove first <code>this : bind U B ((m ≫ l ≫ h) ≫ f)</code>, and then <code>simpa only [assoc] using this</code> should close it, but it does not. I had to use <code>convert</code> or <code>conv</code> instead to make these proofs work. Does someone understand why simp does not work here?</p>",
        "id": 357814659,
        "sender_full_name": "Joël Riou",
        "timestamp": 1683885327
    },
    {
        "content": "<p>Kevin had the same problem in CategoryTheory.Sites.CoverLifting, so this is probably worth reporting upstream.</p>",
        "id": 357865339,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683896949
    },
    {
        "content": "<p>It seems that sometimes <code>simp</code> can't apply a lemma about <code>FunLike.coe</code>. See the first two failures of <a href=\"https://github.com/leanprover-community/mathlib4/pull/4642\">!4#4642</a>. In both cases, Lean fails to apply lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.coe_comp%27#doc\">docs4#ContinuousLinearMap.coe_comp'</a></p>",
        "id": 363419847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685853427
    },
    {
        "content": "<p>How do I debug this?</p>",
        "id": 363419862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685853450
    },
    {
        "content": "<p>P.S.: I know how I can work around this.</p>",
        "id": 363419979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685853558
    },
    {
        "content": "<p>Is this the same issue as in <code>ContDiff</code> recently, where a simp featuring that lemma was replaced by a long list of <code>rw</code>?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/4532/commits/b74605bca7b0498b800ecda2f5aa625d88d7cd37\">https://github.com/leanprover-community/mathlib4/pull/4532/commits/b74605bca7b0498b800ecda2f5aa625d88d7cd37</a></p>",
        "id": 363420274,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1685853810
    },
    {
        "content": "<p>There's a \"simp [X] fails, rw [X] works\" thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> which contained I think three distinct reasons for simp failing to apply a lemma, none of which were fixed IIRC</p>",
        "id": 363446023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685867937
    },
    {
        "content": "<p>One of these regressions is going to be really annoying in <code>geometry/manifold</code></p>",
        "id": 363585580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924615
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/model_prod\">docs#model_prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/model_pi\">docs#model_pi</a></p>",
        "id": 363585656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924654
    },
    {
        "content": "<p>And <code>simp</code> no longer can apply lemmas about, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_equiv.prod\">docs#local_equiv.prod</a> to <code>model_prod</code></p>",
        "id": 363585673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924683
    },
    {
        "content": "<p>What should we do? Duplicate parts of the API for this type?</p>",
        "id": 363585692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924700
    },
    {
        "content": "<p>BTW, the example in <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#Manifold%20type%20tags\">https://leanprover-community.github.io/mathlib_docs/notes.html#Manifold%20type%20tags</a> no longer applies in Lean 4.</p>",
        "id": 363585829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924788
    },
    {
        "content": "<p>However, <code>univ ×ˢ univ = univ</code> is still not a defeq.</p>",
        "id": 363585853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924821
    },
    {
        "content": "<p>So, we can't drop these type tags in Lean 4.</p>",
        "id": 363585884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685924843
    },
    {
        "content": "<p>Can we have a command that goes over all lemmas about <code>LocalEquiv.prod</code> marked with <code>mfld_simps</code> and adds <code>ModelProd</code> versions?</p>",
        "id": 363586104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685925010
    },
    {
        "content": "<p>Or should we drop <code>mfld_simps</code> tags from these lemmas and list them as arguments to this future command instead?</p>",
        "id": 363586128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685925039
    },
    {
        "content": "<p>One more <code>simp</code> regression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_comm</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 364947277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686337610
    },
    {
        "content": "<p>If I write <code>smul_comm m (_ : N) (_ : α)</code>, it works.</p>",
        "id": 364947377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686337632
    },
    {
        "content": "<p>This reminds me of the first regression in the \"simp [X] fails, rw [X] works\"'thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 364993769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686356598
    },
    {
        "content": "<p>FYI, the above is fixed now with <a href=\"https://github.com/leanprover/lean4/pull/2266\">lean4#2266</a></p>",
        "id": 364994233,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686356841
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/4933\">!4#4933</a> is a mathlib4 branch which uses a temporary toolchain incorporating this fix.</p>",
        "id": 364994773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686357146
    },
    {
        "content": "<p>If anyone would like to go exploring simp regressions, please do so on that branch!</p>",
        "id": 364994795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686357163
    },
    {
        "content": "<p>Tomorrow we can switch it back to the new nightly toolchain.</p>",
        "id": 364994803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686357172
    },
    {
        "content": "<p>(I only just pushed it, so there will not be oleans for another ... however long it takes a Hoskinson machine to rebuild everything?)</p>",
        "id": 364994849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686357200
    },
    {
        "content": "<p>I'm going to wait for <code>olean</code>s, then search for <code>smul_comm</code> simps</p>",
        "id": 364995368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686357518
    },
    {
        "content": "<p>oleans are available now on <code>!4#4933</code></p>",
        "id": 365004455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686363018
    },
    {
        "content": "<p>There's a build error, but I haven't looked at it. Perhaps it is good news (a simp become more powerful again).</p>",
        "id": 365004476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686363038
    },
    {
        "content": "<p>The error is on a line commented with \"porting note: added\". <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 365006321,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1686364335
    }
]