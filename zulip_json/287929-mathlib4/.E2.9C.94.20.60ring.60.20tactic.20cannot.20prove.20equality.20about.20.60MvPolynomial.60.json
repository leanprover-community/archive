[
    {
        "content": "<p><code>ring</code> tactic failed to prove equality about <code>MvPolynomial</code>.<br>\n<code>ring</code> can deal with <code>Polynomial</code> in mathlib4 as well as <code>polynomial</code> and <code>mv_polynomial</code> in mathlib3, but not <code>MvPolynomial</code> in mathlib4. (Both mathlib3 and mathlib4 used are up-to-date with the latest <code>master</code> branch)<br>\nIn mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variable [comm_ring R] -- also works with this line uncommented</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n</code></pre></div>\n<p>In mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variable [CommRing R] --also reproduces with this line uncommented</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- solved</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- not solved</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- not solved</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Edit: Add more details and examples</p>",
        "id": 352549549,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682431938
    },
    {
        "content": "<p>I can reproduce, and my first guess about the problem was incorrect: Lean knows that <code>MvPolynomial</code> is a commutative semiring.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 352576378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682437584
    },
    {
        "content": "<p>Have you tried throwing etaExperiment at it?</p>",
        "id": 352577953,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682437969
    },
    {
        "content": "<p>I would guess that we're doing a syntactic match against a ring operator somewhere that we should be doing a defeq match</p>",
        "id": 352594104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682441952
    },
    {
        "content": "<p>(though eta is very possible)</p>",
        "id": 352594198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682441980
    },
    {
        "content": "<p>If you use <code>ring1</code>, it says \"not a type\", which indicates a very early failure</p>",
        "id": 352596318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682442541
    },
    {
        "content": "<p>It's coming from this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not a type{indentExpr α}\"</span>\n</code></pre></div>\n<p>it looks like the actual type returned from <code>inferType α</code> is <code>max (u+1) (v+1)</code></p>",
        "id": 352596425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682442586
    },
    {
        "content": "<p>I tried to use <code>set_option trace.Meta.synthInstance true</code> to get some information.</p>\n<p>When <code>σ</code> and <code>R</code> aren't set to the same type universe, <code>ring_nf</code> will try to search for  <code>CommSemiring (HAdd (MvPolynomial σ R) (MvPolynomial σ R) (MvPolynomial σ R)) </code>, <code>CommSemiring (Add (MvPolynomial σ R))</code> and so on, instead of<code>CommSemiring (MvPolynomial σ R)</code>, and then cannot solve the equality.</p>\n<p>When <code>σ</code> and <code>R</code> are set to the same type universe, <code>ring_nf</code> will try to search for <code>CommSemiring (MvPolynomial σ R)</code> and success.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- not solved. ring_nf searches for `CommSemiring (Add (MvPolynomial σ R))` and so one</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"c1\">-- solved. ring_nf searches for `CommSemiring (MvPolynomial σ R)` and so one</span>\n</code></pre></div>",
        "id": 352867764,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682525647
    },
    {
        "content": "<p>At the first <code>example</code> of the above code, it seems that <code>ring_nf</code> tries to search for every <code>CommSemiring (a class actually needed)</code>(such as <code>CommSemiring (Add (MvPolynomial σ R))</code> and <code>CommSemiring (Semiring (MvPolynomial σ R))</code>)</p>",
        "id": 352916188,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682532843
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3682\">!4#3682</a> to try and fix this, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thoughts?</p>",
        "id": 353354386,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682609317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60ring.60.20tactic.20cannot.20prove.20equality.20about.20.60MvPolynomial.60/near/353354386\">said</a>:</p>\n<blockquote>\n<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3682\">!4#3682</a> to try and fix this, <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> thoughts?</p>\n</blockquote>\n<p>Thank <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  and everyone! It works!</p>",
        "id": 354605880,
        "sender_full_name": "Hagb (Junyu Guo)",
        "timestamp": 1682828502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"331356\">Hagb (Junyu Guo)</span> has marked this topic as resolved.</p>",
        "id": 354605884,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682828508
    }
]