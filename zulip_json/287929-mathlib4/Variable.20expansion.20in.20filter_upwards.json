[
    {
        "content": "<p>In complicated proofs, I try to hide some complexity behind local definitions given with <code>let</code>. Unfortunately, a few tactics expand automatically the <code>let</code>, leaving a very heavy goal state. This has been discussed about <code>simp</code> recently, but another example is <code>filter_upwards</code>. In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.IdentDistrib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Filter.atTop</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">17</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Filter.atTop</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>after the <code>filter_upwards</code> line I would expect <code>hn</code> to be <code>φ n = 0</code>, but the <code>φ</code> has been expanded and it is instead <code>3 * n + 17 = 0</code>. This is not a problem in this example, but it can be quite unpleasant in real-life examples. Is this something that would be easily fixable, or do I just have to live with it?</p>",
        "id": 391346252,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694851344
    },
    {
        "content": "<p>I've been using a lot of <code>clear_value φ</code> to deal with this kind of thing.  (Not with <code>filter_upwards</code> -- in fact I can't remember which tactics I've needed it for, but I agree with your impression that it is several of them.)</p>",
        "id": 391348007,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694852440
    },
    {
        "content": "<p>It's not a good solution.</p>",
        "id": 391348073,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694852496
    },
    {
        "content": "<p>I tried a blind fix at <a href=\"https://github.com/leanprover-community/mathlib4/commit/06900385e7bfb123eeb6cfc56145c82f218dc743\">https://github.com/leanprover-community/mathlib4/commit/06900385e7bfb123eeb6cfc56145c82f218dc743</a> on branch pm_filter_zeta. Let's see how CI likes it.</p>",
        "id": 391385305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694875485
    },
    {
        "content": "<p>Fixed at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7213\">#7213</a></p>",
        "id": 391433833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694911608
    },
    {
        "content": "<p>I think <code>field_simp</code> might be one of the other tactics with this problem -- anyone want to experiment with removing zeta-reduction there?</p>",
        "id": 391537150,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694969143
    },
    {
        "content": "<p>Do you have a test case?</p>",
        "id": 391550124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694974224
    },
    {
        "content": "<p>I created a branch <a href=\"https://github.com/leanprover-community/mathlib4/tree/field_simp_zeta\">https://github.com/leanprover-community/mathlib4/tree/field_simp_zeta</a> with a very naive fix attempt.</p>",
        "id": 391552083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694974766
    },
    {
        "content": "<p>I have a feeling that some of <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>'s porting notes about <code>field_simp</code> in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Geometry/Manifold/Instances/Sphere.lean\">Geometry.Manifold.Instances.Sphere</a> could be resolved by fixing this.</p>",
        "id": 391552299,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694974813
    },
    {
        "content": "<p>I guess the test would be to change back the proofs from the port-adjusted versions to the original mathlib3 proofs.</p>",
        "id": 391552894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694974971
    }
]