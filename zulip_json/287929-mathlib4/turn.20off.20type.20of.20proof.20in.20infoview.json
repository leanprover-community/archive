[
    {
        "content": "<p>Trying to debug a porting issue, and I would like to get my lean 4 infoview looking as much like the corresponding lean 3 infoview as possible, because I have super-unwieldy goals. Seems that lean 4 goal view displays the types of proofs by default:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">37</span> <span class=\"n\">rfl</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- ⊢ foo 37 (_ : 37 = 37) = 0</span>\n</code></pre></div>\n<p>Can I somehow get rid of that <code>: 37 = 37)</code> with some <code>set_option</code> or something? (I can see some good sides to this being the default option, it's just not good for me here)</p>",
        "id": 351235332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681976551
    },
    {
        "content": "<p><code>pp.proofs</code> maybe?</p>",
        "id": 351235572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681976630
    },
    {
        "content": "<p><code>pp.proofs.withType</code></p>",
        "id": 351235875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681976708
    },
    {
        "content": "<p>Yeah, <code>proofs</code> doesn't do it (one option shows the type, the other one the term :-) ) but <code>set_option pp.proofs.withType false</code> is what I was looking for. Thanks!</p>",
        "id": 351236105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681976764
    },
    {
        "content": "<p>Would <code>withType false</code> be a more reasonable default for widget-enabled infoviews? The option likely is older than widget support.</p>",
        "id": 351244102,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681978854
    },
    {
        "content": "<p>Is it possible (and easy) to write delaborators that turn on <code>withType true</code> for just one argument in a function?</p>",
        "id": 351256438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681981738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/turn.20off.20type.20of.20proof.20in.20infoview/near/351244102\">said</a>:</p>\n<blockquote>\n<p>Would <code>withType false</code> be a more reasonable default for widget-enabled infoviews? The option likely is older than widget support.</p>\n</blockquote>\n<p>I quite like it being on by default, personally. Though sometimes it is irrelevant it is useful information to orient oneself without having to click things</p>",
        "id": 351276855,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1681986363
    },
    {
        "content": "<p>Oh, interestingly I've just run into a situation where it's the other way around. Lean 3 goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">colimit.ι</span> <span class=\"o\">((</span><span class=\"n\">category_of_elements.π</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_op</span> <span class=\"bp\">⋙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">J</span> <span class=\"bp\">≫</span>\n  <span class=\"o\">(</span><span class=\"n\">adjunction.left_adjoint_of_equiv</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ℰ</span><span class=\"o\">),</span>\n      <span class=\"o\">({</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean 4 goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">colimit.ι</span> <span class=\"o\">((</span><span class=\"n\">CategoryOfElements.π</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leftOp</span> <span class=\"bp\">⋙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">J</span> <span class=\"bp\">≫</span>\n    <span class=\"o\">(</span><span class=\"n\">Adjunction.leftAdjointOfEquiv</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">P</span> <span class=\"n\">E</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>with no indication of the types of <code>P</code> or <code>E</code>. I've managed to solve my original problem now, but to get displays to match completely one would have to make Lean 4 display the types.</p>",
        "id": 351377280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682008621
    }
]