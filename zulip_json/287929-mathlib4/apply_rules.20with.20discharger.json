[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In your streamlining of backtracking in <code>solve_by_elim</code>, is there a new mechanism for non-backtracking with a discharger?  Here is how I used to write this -- should it be different now?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">Meta.Positivity.positivity</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">[])</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">})</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"n\">PositivityDischarge</span><span class=\"o\">,</span> <span class=\"n\">backtracking</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 355255303,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683058139
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/apply_rules.20with.20discharger\">#lean4 &gt; apply_rules with discharger</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 355261110,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683060116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Shall I open an issue for this?  No hurry, just wanted to check before filing that this wasn't a misunderstanding.</p>",
        "id": 356568624,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683507758
    },
    {
        "content": "<p>Ah, sorry, forgot about this one. I think I have broken your use case, unfortunately, and will need to change some things to make this possible again.</p>",
        "id": 356568847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683507871
    },
    {
        "content": "<p>I've not been contributing much to the <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> the last few days, and was hoping to do less metaprogramming today. :-) What are your time constraints for a fix?</p>",
        "id": 356568919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683507919
    },
    {
        "content": "<p>None in particular, I plan to keep my course on my current (pre- <a href=\"https://github.com/leanprover-community/mathlib4/pull/3480\">!4#3480</a>) mathlib4 commit for the rest of the semester (which is nearly done).</p>",
        "id": 356569179,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683508056
    },
    {
        "content": "<p>I'll open an issue and it can be fixed at leisure.</p>",
        "id": 356569339,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683508116
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3844\">!4#3844</a></p>",
        "id": 356569717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683508327
    }
]