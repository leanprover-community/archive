[
    {
        "content": "<p>In trying to solve the <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C03_Logic.html#conjunction-and-iff\">https://leanprover-community.github.io/mathematics_in_lean/C03_Logic.html#conjunction-and-iff</a><br>\nI tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Monotone</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Monotone</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>At context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">b</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p><code>exact h 0 1 this</code><br>\ngives<br>\n<code>invalid universe level, ?u.15347 is not greater than 0</code></p>",
        "id": 408514684,
        "sender_full_name": "Yuxi Liu",
        "timestamp": 1702868695
    },
    {
        "content": "<p>Yeah that's because your code currently means this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Monotone</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Monotone</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 408541136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702881509
    },
    {
        "content": "<p>This is not what you meant, so you should do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Monotone</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Monotone</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">this</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 408541240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702881547
    },
    {
        "content": "<p>That's not the (only) issue yael, it's the implicits meaning you don't need the 0 and 1 and so lean gets confused when you pass a Nat there</p>",
        "id": 408589674,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702898651
    },
    {
        "content": "<p>That too, yeah. Edited the above.</p>",
        "id": 408595964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702900809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"675062\">Yuxi Liu</span> has marked this topic as resolved.</p>",
        "id": 408670816,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702926054
    }
]