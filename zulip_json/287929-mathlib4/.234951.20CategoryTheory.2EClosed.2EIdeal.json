[
    {
        "content": "<p>Right now this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4951\">#4951</a> has three errors. I've just \"fixed\" one of them (see my comments on the PR) but I don't like it, so I didn't push. Advice appreciated! Here is a summary of the situation.</p>\n<p>Here's a theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reflective_products</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteProducts</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Reflective</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteProducts</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hasLimitsOfShape_of_reflective</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It says that <code>D</code> has finite products if you can find a <code>C</code> and an <code>i</code> with some nice properties. In Lean 3 this was made a local instance in this file! With priority 10. This seems like a totally inappropriate instance because given <code>D</code>, how the heck is typeclass inference going to find <code>i</code> and <code>C</code>? However, it worked in mathlib3! In mathlib4 you get the <code>cannot find synthesization order</code> error, and I can't figure out the right incantation of outparams and semioutparams to fix this. I am also not at all clear about whether one is supposed to be fixing this at all; the instance looks highly suspect to me. </p>\n<p>Removing the local instance attribute then throws up a bunch of new errors, all but two of which are in proofs and can be fixed by adding <code>haveI : HasFiniteProducts D := reflective_products i</code> into the proofs in appropriate places. The other two errors are in <em>statements</em> and a brief conversation with Oliver about this made me start worrying whether these statements were somehow dubious. The first was autoported as <code>def cartesianClosedOfReflective : CartesianClosed D := ...</code> and needs to be rewritten as <code>def cartesianClosedOfReflective : @CartesianClosed D _ (reflective_products i) := ...</code>. Note that this definition is not used anywhere else in mathlib. The second is <code>theorem prodComparison_iso (A B : C) : IsIso (prodComparison (leftAdjoint i) A B) :=</code> and needs to be written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prodComparison_iso</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"c1\">-- porting note: adding dangerous instance manually</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteProducts</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">reflective_products</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">prodComparison</span> <span class=\"o\">(</span><span class=\"n\">leftAdjoint</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This theorem is made into a local instance and then used in the next theorem in the file, which is used in the theorem after, which is the last declaration of the file.</p>\n<p>Should the plan be to remove the trouble-causing line <code>attribute [local instance 10] reflective_products</code> completely and fix it like in my local branch, or to try and get it up and running as we had it in Lean 3?</p>",
        "id": 369505631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687727509
    },
    {
        "content": "<p>Haven't actually opened the file yet, but I think</p>\n<ul>\n<li>that theorem should definitely not be a local instance</li>\n<li>ideally we should fix this by adding additional <code>HasFiniteProducts D</code> hypotheses to theorems, and then inside the proofs use the fact that this inferred instance must, up to isomorphism, agree with the one from <code>reflective_products</code>, to whatever extent that is actually needed</li>\n</ul>",
        "id": 369520417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687737333
    },
    {
        "content": "<p>I wouldn't object if the \"ideally\" clause there is dealt with via porting notes and TODOs for refactoring within mathlib4</p>",
        "id": 369520452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687737356
    },
    {
        "content": "<p>(Also just mentioning <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> on this thread in case they have a moment to give an opinion.)</p>",
        "id": 369520576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687737424
    },
    {
        "content": "<p>Hmm - looking at this now I agree it's a dodgy instance, but I do recall it being useful as a <em>local</em> instance only... I think Scott's suggestion of having the \"spurious\" <code>HasFiniteProducts D</code> hypotheses should work, iirc it's not needed at all that the instances agree (plus I don't even think that's an option since they're propostional?). The relevant maths here is in <a href=\"https://ncatlab.org/nlab/show/exponential+ideal\">https://ncatlab.org/nlab/show/exponential+ideal</a>; I think my intuition for why I liked this as an instance was that <code>D</code> is a \"subcategory\" of C, and the reflective instance is saying it's a nice enough subcategory that it automatically gets finite products, ie for a substructure like a subgroup / subset, the ambient thing can be inferred. But of course for (sub)categories, we're not so lucky, so I picked a very low prio local instance and things seemed to work out... That said, later in the file I had some other instance annoyances, so clearly some weird things are happening, and in hindsight this instance is at least one of those weird things!</p>",
        "id": 369562682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1687757583
    },
    {
        "content": "<p>Oh and, in the topos project one direction of this was used when applied to the category of sheaves, with sheafification as the appropriate reflective functor</p>",
        "id": 369563144,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1687757705
    },
    {
        "content": "<p>I took a crack at this, but there were some other weirdnesses (manual erw's that dsimp used to handle for us, synthesised instances not equal to inferred) I think its ok for now though. I'd like to use this material this week at <a class=\"stream\" data-stream-id=\"384459\" href=\"/#narrow/stream/384459-Copenhagen-Masterclass-2023\">#Copenhagen Masterclass 2023</a> so if it turns out to be broken in applications I should hopefully notice.</p>",
        "id": 369950033,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687852723
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 369963765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687855247
    }
]