[
    {
        "content": "<p>In Lean 4, <code>∫ x, f x ∂μ = 5</code> has to be written as <code>(∫ x, f x ∂μ) = 5</code>.</p>",
        "id": 365161357,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416005
    },
    {
        "content": "<p>This was not the case in Lean 3.</p>",
        "id": 365161428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416033
    },
    {
        "content": "<p>is this the same issue as the one about sum precedence?</p>",
        "id": 365161503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416048
    },
    {
        "content": "<p>This is about Lean 4 notation, not about <code>mathport</code> output.</p>",
        "id": 365161536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416066
    },
    {
        "content": "<p>maybe it's just missing a precedence then</p>",
        "id": 365161568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416085
    },
    {
        "content": "<p>It's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc MeasureTheory.integral]</span>\n<span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"s2\">\" ∂\"</span><span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">μ</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 365161618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416110
    },
    {
        "content": "<p>there are no precedences there...</p>",
        "id": 365161642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416121
    },
    {
        "content": "<p>this is probably a post-mathport issue</p>",
        "id": 365161679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416135
    },
    {
        "content": "<p>What is the right precedence for the measure?</p>",
        "id": 365161685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416141
    },
    {
        "content": "<p>mathport is fixed but bugfixes in mathport don't propagate to all the files that are already ported</p>",
        "id": 365161778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416167
    },
    {
        "content": "<p>so go find that line in current mathport output and apply it</p>",
        "id": 365161806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416184
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib3port/commit/3fdc57bc6b5ce9c256c25248e07a1971dafe7620\">https://github.com/leanprover-community/mathlib3port/commit/3fdc57bc6b5ce9c256c25248e07a1971dafe7620</a></p>",
        "id": 365162028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mathport name: «expr∫ , ∂ »</span>\n<span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"s2\">\" ∂\"</span><span class=\"n\">μ</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">μ</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- mathport name: «expr∫ , »</span>\n<span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">volume</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- mathport name: «expr∫ in , ∂ »</span>\n<span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"s2\">\" ∂\"</span><span class=\"n\">μ</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">Measure.restrict</span> <span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- mathport name: «expr∫ in , »</span>\n<span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">Measure.restrict</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 365162259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686416346
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 365162296,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416357
    },
    {
        "content": "<p>I'll test it.</p>",
        "id": 365162536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686416438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Integral.20notation/near/365161778\">said</a>:</p>\n<blockquote>\n<p>mathport is fixed but bugfixes in mathport don't propagate to all the files that are already ported</p>\n</blockquote>\n<p>Perhaps we should have been putting the mathport version in the header comment too so that it was easier to track these down</p>",
        "id": 365168808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686418959
    },
    {
        "content": "<p>Another obvious one is <code>open</code> vs <code>open scoped</code></p>",
        "id": 365168899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686418987
    },
    {
        "content": "<p>It should be possible to get an estimated mathport version from the mathlib3 SHA in the header. This may not pick up on things that have had forward ports, but it could be helpful as a first approximation.</p>",
        "id": 365187680,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686426955
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4960\">!4#4960</a> cleans up the majority of the <code>open scoped</code>/<code>open</code> mismatches</p>",
        "id": 365208407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438896
    },
    {
        "content": "<p>Annoyingly it's hard to fix this kind of thing because we did random cleanup when porting files (such as merging together <code>open</code> commands), and now it's hard to apply the diffs from mathport...</p>",
        "id": 365211206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686441106
    },
    {
        "content": "<p>I have a branch with precedences for integral notation, I'll fix compile and open a PR tonight.</p>",
        "id": 365213424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686442750
    },
    {
        "content": "<p>While copying integral notation from <code>mathlib3port</code>, I noticed that <code>mathport</code> often omits parentheses around <code>restrict _ _</code>.</p>",
        "id": 365228621,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452486
    },
    {
        "content": "<p>See any of its \"set integral\" notation commands.</p>",
        "id": 365228632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452500
    },
    {
        "content": "<p>(e.g., in <code>MeasureTheory.Integral.Bochner</code>)</p>",
        "id": 365228637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452517
    },
    {
        "content": "<p>Do you mean like here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">Measure.restrict</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 365228812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452659
    },
    {
        "content": "<p>which I guess should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">Measure.restrict</span> <span class=\"n\">volume</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 365228823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452674
    },
    {
        "content": "<p>I would guess that the parenthesizer doesn't work inside notations for some reason</p>",
        "id": 365228850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452711
    },
    {
        "content": "<p>Yes, here.</p>",
        "id": 365228904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452763
    },
    {
        "content": "<p>A more important question: <code>∫ x in 0..2 * π, f x</code> doesn't work, <code>∫ x in (0)..2 * π, f x</code> works</p>",
        "id": 365228943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452819
    },
    {
        "content": "<p>presumably another precedence issue</p>",
        "id": 365228963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452844
    },
    {
        "content": "<p>what's the notation?</p>",
        "id": 365228969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452851
    },
    {
        "content": "<p>It's in IntervalIntegral</p>",
        "id": 365228972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452864
    },
    {
        "content": "<p>The error message says \"invalid projection, structure has only 1 field(s)\"</p>",
        "id": 365229032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452885
    },
    {
        "content": "<p>hm, maybe another parser is triggering on it</p>",
        "id": 365229054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452927
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4963/files#diff-896f2f3c71fb2f7eaa4fcfab2a525c0d02b0879311e75727ef42dfea851f55bc\">https://github.com/leanprover-community/mathlib4/pull/4963/files#diff-896f2f3c71fb2f7eaa4fcfab2a525c0d02b0879311e75727ef42dfea851f55bc</a></p>",
        "id": 365229055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452928
    },
    {
        "content": "<p>It tries to interpret <code>0.</code> as a dot-notation on <code>0</code></p>",
        "id": 365229080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452951
    },
    {
        "content": "<p>does it work if you replace <code>\"..\"</code> by <code>\".\" \".\"</code>?</p>",
        "id": 365229113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452991
    },
    {
        "content": "<p>I'll try.</p>",
        "id": 365229180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453012
    },
    {
        "content": "<p>also try adding a space like <code>0 .. 2 pi</code></p>",
        "id": 365229188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453022
    },
    {
        "content": "<p>Adding a space breaks notation too, with <code>0</code> or without.</p>",
        "id": 365229225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453063
    },
    {
        "content": "<p>Actually I think it's not a dot notation on 0, it's a float literal</p>",
        "id": 365229248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453114
    },
    {
        "content": "<p><code>0.</code> is a float literal apparently</p>",
        "id": 365229293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453123
    },
    {
        "content": "<p>Right, <code>..</code> is not a good token because it's legal after an expression</p>",
        "id": 365229430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453251
    },
    {
        "content": "<p><code>f ..</code> means <code>f _ _ _</code> for however many <code>_</code> are needed</p>",
        "id": 365229451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453270
    },
    {
        "content": "<p>We can change notation for interval integral.</p>",
        "id": 365229461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453290
    },
    {
        "content": "<p>(or we can postpone this decision)</p>",
        "id": 365229595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453384
    },
    {
        "content": "<p>how about <code>∫ _ in [a, b], r ∂μ</code></p>",
        "id": 365229615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453405
    },
    {
        "content": "<p>Note that we have <code>∫ _ in s, r ∂μ</code>, where <code>s</code> is a set.</p>",
        "id": 365229657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453445
    },
    {
        "content": "<p>true, but sets starting with <code>[</code> are rare, no?</p>",
        "id": 365229677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453474
    },
    {
        "content": "<p>and you can use a <code>(</code> to disambiguate</p>",
        "id": 365229747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453510
    },
    {
        "content": "<p>And here comes localized notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.uIcc#doc\">docs4#Set.uIcc</a> (was <code>[a, b]</code> in mathlib3).</p>",
        "id": 365229749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453513
    },
    {
        "content": "<p>well, those should be equal so it's fine <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 365229780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453550
    },
    {
        "content": "<p>No, they are not equal because of the sign.</p>",
        "id": 365229790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453570
    },
    {
        "content": "<p><code>∫ _ in 1..0, 1 = -1</code></p>",
        "id": 365229819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453600
    },
    {
        "content": "<p>The sign is the only reason why <code>intervalIntegral</code> exists as a separate definition.</p>",
        "id": 365229896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453626
    },
    {
        "content": "<p><code>∫ₐᵇ x, f x ∂μ</code> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 365229903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453643
    },
    {
        "content": "<p>We don't have a superscript pi.</p>",
        "id": 365229935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453667
    },
    {
        "content": "<p>I think in practice we will want to use a composite version of the superscript parser and one that takes an explicit <code>^(expr)</code> for when you can't do it with unicode</p>",
        "id": 365230028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453741
    },
    {
        "content": "<p>I mean, <code>∫_{a}^{b} x, f x ∂μ</code> is closest to LaTeX...</p>",
        "id": 365230031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453746
    },
    {
        "content": "<p>Is it a problem that <code>_{}^</code> are used elsewhere too?</p>",
        "id": 365230096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453826
    },
    {
        "content": "<p>no, although this is more than <code>notation3</code> will handle</p>",
        "id": 365230152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453845
    },
    {
        "content": "<p>the fact that there is an initial (relatively) unique token helps a lot here</p>",
        "id": 365230177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686453874
    },
    {
        "content": "<p>Parses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"∫_{\"</span><span class=\"n\">a</span><span class=\"s2\">\"}^{\"</span><span class=\"n\">b</span><span class=\"s2\">\"}\"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intervalIntegral</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">volume</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span><span class=\"n\">_</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">^</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 365230234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686453943
    },
    {
        "content": "<p>oh I meant if you have multiple options for how to write the bounds</p>",
        "id": 365230342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454002
    },
    {
        "content": "<p>What other options do you want to have?</p>",
        "id": 365230377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454026
    },
    {
        "content": "<p>maybe leaving off the braces, or using the superscript parser</p>",
        "id": 365230399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454048
    },
    {
        "content": "<p>also you probably want to split the initial token or else it will break the other integral parsers</p>",
        "id": 365230420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454070
    },
    {
        "content": "<p>As a person who often writes <code>2^{3}</code> in LaTeX, I don't care.</p>",
        "id": 365230433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454082
    },
    {
        "content": "<p>It doesn't: I added it after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"∫ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">a</span><span class=\"s2\">\"..\"</span><span class=\"n\">b</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intervalIntegral</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">volume</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>and the file compiles.</p>",
        "id": 365230502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454123
    },
    {
        "content": "<p>I'll make a PR after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4963\">!4#4963</a> gets merged.</p>",
        "id": 365230545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454151
    },
    {
        "content": "<p>What else should I edit to tell <code>mathport</code> to change old notation to the new one?</p>",
        "id": 365230638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454203
    },
    {
        "content": "<p>Or should I leave both options for now?</p>",
        "id": 365230675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454224
    },
    {
        "content": "<p>BTW, should we add notation for integrals over <code>Iio a</code> and <code>Ioi a</code>? Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"∫_-∞^{\"</span><span class=\"n\">b</span><span class=\"s2\">\"}\"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">integral</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">restrict</span> <span class=\"n\">volume</span> <span class=\"o\">(</span><span class=\"n\">Iio</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 365230763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454297
    },
    {
        "content": "<p>you can't, right now, unless mathport hardcodes the new notation or you backport it to lean 3</p>",
        "id": 365230769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454299
    },
    {
        "content": "<p>and I guess backporting doesn't actually do the rewriting for you</p>",
        "id": 365230845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454330
    },
    {
        "content": "<p>how about skipping the braces for those?</p>",
        "id": 365230865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454353
    },
    {
        "content": "<p>I'm still worried about the long tokens though, I'm pretty sure lean uses a longest match parse for the tokens and this might make some cases not apply</p>",
        "id": 365230928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454412
    },
    {
        "content": "<p>It's hard for me to skip braces around <code>-∞</code>: then the infinity symbol won't be a subscript!</p>",
        "id": 365230934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454419
    },
    {
        "content": "<p>is using <code>⊥</code> too weird?</p>",
        "id": 365231019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454468
    },
    {
        "content": "<p>I tried adding new nothation both before and after the existing one, in each case file compiles.</p>",
        "id": 365231024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454471
    },
    {
        "content": "<p>Yes, it is too weird.</p>",
        "id": 365231038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454482
    },
    {
        "content": "<p>OK, I'm going to bed soon. I'll think about it again tomorrow.</p>",
        "id": 365231084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686454524
    },
    {
        "content": "<p>too bad there is no unicode subscript infinity</p>",
        "id": 365231091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686454534
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19225\">!3#19225</a> changes notation in Mathlib 3</p>",
        "id": 371212849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688139723
    },
    {
        "content": "<p>Are you sure it's more readable? Comparing in one of the first instances in the diff <code>∫ x in (-r:ℝ)..r</code> to <code>∫_{(-r:ℝ)}^{r} x</code>, I am not convinced (but maybe it's just because it takes some time to get used to it).</p>",
        "id": 371220624,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688140987
    },
    {
        "content": "<p>You can drop the type annotation.</p>",
        "id": 371221532,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141104
    },
    {
        "content": "<p>I did a search&amp;replace, so I didn't drop them.</p>",
        "id": 371221589,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141116
    },
    {
        "content": "<p>The main issue with the current notation is that <code>∫ x in 0..r, x</code> doesn't work in Lean 4 (see <a href=\"#narrow/stream/287929-mathlib4/topic/Integral.20notation/near/365228943\">above</a>).</p>",
        "id": 371221800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141155
    },
    {
        "content": "<p>We have a workaround <code>∫ x in (0)..r, x</code> but it looks strange.</p>",
        "id": 371221939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141176
    },
    {
        "content": "<p>Would <code>∫ x in [0 : r], f x</code> be too weird? Lean 4 already has <code>[0:r]</code> for a kind of interval notation (for natural number ranges), so it's at least parseable, and it even sort of looks like a closed interval.</p>",
        "id": 371223488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688141435
    },
    {
        "content": "<p>For me, the main argument pro <code>∫_{a}^{b}</code> is that it's what we write in LaTeX</p>",
        "id": 371223939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141514
    },
    {
        "content": "<p>In fact, I see no problem with <code>∫_{a}^{b} fun x =&gt; f x</code> so that <code>∫_{a}^{b} (f - g)</code> is a thing.</p>",
        "id": 371224568,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141630
    },
    {
        "content": "<p>(but I'm ready to use any other notation that works)</p>",
        "id": 371224721,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688141649
    },
    {
        "content": "<p>Yeah, I figured it was LaTeX-inspired, though the way <code>x</code> works in <code>∫_{0}^{r} x, f x</code> isn't very familiar</p>",
        "id": 371227221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688142113
    },
    {
        "content": "<p>Here's another thought: if we defined <code>I[a, b]</code> to be <code>I a b</code> (this special notation is to help eliminate some parentheses and to look like a closed interval) then <code>∫ x in I[0, r], f x</code> could rely on the <code>∫ x in s, f x</code> notation</p>",
        "id": 371227662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688142191
    },
    {
        "content": "<p>No, the main point of the interval integral notation is that it works for <code>b &lt; a</code>: <code>(∫ x in 1..0, 1) = -1</code></p>",
        "id": 371228486,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688142347
    },
    {
        "content": "<p>Oops, I was accidentally looking at the average integral in the PR</p>",
        "id": 371228680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688142382
    },
    {
        "content": "<p>For the <code>∫ x in s, f x</code> ambiguity, Mario and I discussed some ideas for extending the notation3 command to be able to give special interpretations of extended binders, so it's possible that we could have <code>∫ x ∈ s, f x</code> with the same meaning (and similarly for <code>Finset.prod</code>/<code>Finset.sum</code> notation). That could open up <code>in</code> for interval integrals.</p>",
        "id": 371230339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688142712
    },
    {
        "content": "<p>Yet another suggestion: <code>∫ x in 0 to r, x</code> (viable if we're ok with <code>to</code> becoming a keyword, and it should be Lean 4 parseable)</p>",
        "id": 371231533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688142916
    },
    {
        "content": "<p>I'm happy with any of these notations.</p>",
        "id": 371236143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688143718
    },
    {
        "content": "<p>(and can write a regexp to migrate)</p>",
        "id": 371236231,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688143733
    },
    {
        "content": "<p>Should we start a poll?</p>",
        "id": 371236262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688143737
    },
    {
        "content": "<p>Let me do it. tl;dr: <code>∫ x in 0..1, x</code> doesn't work in Lean 4. Which notation should we use instead?</p>",
        "id": 371240655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688144514
    },
    {
        "content": "<p>Is there really no way to fix the notation <code>∫ x in 0..1, x</code>?</p>",
        "id": 371241379,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688144623
    },
    {
        "content": "<p>/poll Notation for interval integral<br>\n<code>∫_{a}^{b} x, f x ∂μ</code><br>\n<code>∫ x in [a:b], f x ∂μ</code><br>\n<code>∫_{a}^{b} fun x ↦ f x ∂μ</code><br>\n<code>∫ x in a to b, f x ∂μ</code><br>\n<code>∫ x from a to b, f x ∂μ</code> (will it conflict with <code>from</code>?)</p>",
        "id": 371241815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688144712
    },
    {
        "content": "<p>As far as I understand, Lean parses <code>0..1</code> as dot notation on <code>0.</code> (decimal fraction) and fails.</p>",
        "id": 371242232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688144789
    },
    {
        "content": "<p>We can use a different symbol instead of <code>..</code>. E.g., <code>[a:b]</code> is very close. I don't know if <code>a::b</code> will work.</p>",
        "id": 371242427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688144833
    },
    {
        "content": "<p>I droped most of the explicit type annotations from the PR.</p>",
        "id": 371244594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688145253
    },
    {
        "content": "<p>It looks like option 2 is winning. I'll change the PR.</p>",
        "id": 371254130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688147200
    },
    {
        "content": "<p>Will it conflict with set integral notation + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Range#doc\">docs#Std.Range</a> notation?</p>",
        "id": 371255500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688147513
    },
    {
        "content": "<p>Let me try in Mathlib 4</p>",
        "id": 371255757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688147558
    },
    {
        "content": "<p>There's a chance you might need to give <code>(priority := high)</code> in the <code>notation3</code> command if it can't resolve the ambiguity itself</p>",
        "id": 371256473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688147686
    },
    {
        "content": "<p>Even with <code>(priority := high)</code>, it fails to parse <code>∫ _ in [j:N], (1 : ℝ) ∂ρ</code> without a type annotation.</p>",
        "id": 371272977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688151348
    },
    {
        "content": "<p>(here <code>j</code> and <code>N</code> are natural numbers)</p>",
        "id": 371273088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688151367
    },
    {
        "content": "<p>I pushed to <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-interval-integral\">branch#YK-interval-integral</a>. Have a look at <code>Probability.StrongLaw</code></p>",
        "id": 371274291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688151637
    },
    {
        "content": "<p>Note that I messed up with search&amp;replace and added extra commas after some <code>]</code>s</p>",
        "id": 371274388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688151662
    },
    {
        "content": "<p>It looks like I fixed these in that file.</p>",
        "id": 371274449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688151674
    },
    {
        "content": "<p>UPD: and now I actually pushed to github.</p>",
        "id": 371277052,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688152247
    },
    {
        "content": "<p>Any news here? <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 390602027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694555289
    },
    {
        "content": "<p>No news. I failed to implement <code>∫ x in [a:b], f x ∂μ</code>.</p>",
        "id": 390615121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694562428
    },
    {
        "content": "<p>It would be nice if someone who better understands how Lean notation work will do it.</p>",
        "id": 390615188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694562480
    },
    {
        "content": "<p>what is the desired behavior?</p>",
        "id": 390615273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694562506
    },
    {
        "content": "<p><code>∫ x in [1:10], f x ∂μ</code> should parse as an interval integral, not as set integral over a non-existent coercion of a range to set.</p>",
        "id": 390642746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694578469
    }
]