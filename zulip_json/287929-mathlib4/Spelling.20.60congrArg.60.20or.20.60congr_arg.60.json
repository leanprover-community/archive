[
    {
        "content": "<p>Which spelling is preferred in Mathlib?<br>\nI find <code>congr_arg</code> more often, but <code>congrArg</code> is what <code>exact?</code> gives me.</p>",
        "id": 390910064,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694691359
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I think the new preferred style is Kyle's <code>congr(...)</code></p>",
        "id": 390913245,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694692554
    },
    {
        "content": "<p>Can I see an example?</p>",
        "id": 390913498,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694692625
    },
    {
        "content": "<p>it's a theorem, so <code>congr_arg</code></p>",
        "id": 390913535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694692638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> If <code>h : x = y</code> you can write <code>congr(f $h)</code> to get <code>f x = f y</code></p>",
        "id": 390915242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694693202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390913535\">said</a>:</p>\n<blockquote>\n<p>it's a theorem, so <code>congr_arg</code></p>\n</blockquote>\n<p>Can we just remove the other spelling?</p>",
        "id": 390916434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694693611
    },
    {
        "content": "<p>Do we have power to rename the declaration in <code>Init.Prelude</code> please?</p>",
        "id": 390916501,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694693642
    },
    {
        "content": "<p>it's in core</p>",
        "id": 390916590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694693659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390915242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> If <code>h : x = y</code> you can write <code>congr(f $h)</code> to get <code>f x = f y</code></p>\n</blockquote>\n<p>Is there a motivation for this particular syntax?</p>",
        "id": 390916675,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694693695
    },
    {
        "content": "<p>there is a PR which does this which has been sitting for 6+ months</p>",
        "id": 390916683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694693697
    },
    {
        "content": "<p>In the meanwhile, can I PR a replacement of all <code>congrArg</code> in Mathlib?</p>",
        "id": 390916976,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694693792
    },
    {
        "content": "<p>actually almost a year <a href=\"https://github.com/leanprover/lean4/pull/1897\">lean4#1897</a></p>",
        "id": 390917003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694693809
    },
    {
        "content": "<p>can you mark a theorem in another file as deprecated?</p>",
        "id": 390917444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694693969
    },
    {
        "content": "<p><code>invalid attribute 'deprecated', declaration is in an imported module</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 390917633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694022
    },
    {
        "content": "<p>I don't know what you mean.<br>\nI would just replace all these<br>\n<a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+congrArg&amp;type=code\">https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4+congrArg&amp;type=code</a><br>\nby <code>congr_arg</code> as we prefer.</p>",
        "id": 390917669,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694694035
    },
    {
        "content": "<p>there is a really nifty mechanism I added to <del>core</del> std to make it easy to find and replace deprecated things</p>",
        "id": 390917767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">@[deprecated]</span> <span class=\"n\">alias</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n       <span class=\"c1\">-- ^^ code action here</span>\n</code></pre></div>",
        "id": 390917993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694133
    },
    {
        "content": "<p>unfortunately it only works when the alias is the one being deprecated, not the target</p>",
        "id": 390918157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390916683\">said</a>:</p>\n<blockquote>\n<p>there is a PR which does this which has been sitting for 6+ months</p>\n</blockquote>\n<p>I think this PR suffers from making too many renames at once</p>",
        "id": 390918248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694228
    },
    {
        "content": "<p>you're not wrong, it was discussed in the dev meeting and all but one or two categories was accepted</p>",
        "id": 390918445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694284
    },
    {
        "content": "<p>unfortunately I forget most of the results of the meeting. I think <code>Membership.Mem</code> was rejected and either <code>IsLawfulFunctor</code> or <code>OptParam</code> was contentious</p>",
        "id": 390918846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694426
    },
    {
        "content": "<p>Presumably a Pr to rename just <code>congrArg</code> would be fine?</p>",
        "id": 390919107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694514
    },
    {
        "content": "<p>And <code>congrFun</code> at the same time.</p>",
        "id": 390919154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694694540
    },
    {
        "content": "<p>It seems the highest-value renames are the ones where mathlib has decided it has to make an alias because of a \"bad\" name in core</p>",
        "id": 390919224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694572
    },
    {
        "content": "<p>FYI, there are quite a few aliases in <code>Mathlib.Init.Logic</code> including these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">proofIrrel</span> <span class=\"bp\">←</span> <span class=\"n\">proof_irrel</span>\n<span class=\"n\">alias</span> <span class=\"n\">congrFun</span> <span class=\"bp\">←</span> <span class=\"n\">congr_fun</span>\n<span class=\"n\">alias</span> <span class=\"n\">congrArg</span> <span class=\"bp\">←</span> <span class=\"n\">congr_arg</span>\n</code></pre></div>",
        "id": 390919519,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694694673
    },
    {
        "content": "<p>do we have aliases for <code>T.constr.inj_eq</code>?</p>",
        "id": 390919543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694680
    },
    {
        "content": "<p>Ok, so maybe the low hanging fruit is:</p>\n<ul>\n<li>A PR that makes all 14 replacements in <code>Mathlib.Init.Logic</code></li>\n<li>Another PR that changes all the <em>generated</em> names</li>\n</ul>",
        "id": 390919742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694737
    },
    {
        "content": "<p>I think that's the only generated name in my list</p>",
        "id": 390919797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694763
    },
    {
        "content": "<p>On the first point; why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_rec_heq#doc\">docs#eq_rec_heq</a> preferred to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eqRec_heq#doc\">docs#eqRec_heq</a> ?</p>",
        "id": 390919955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694832
    },
    {
        "content": "<p>is that an alias?</p>",
        "id": 390920115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694879
    },
    {
        "content": "<p>Yes</p>",
        "id": 390920143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694889
    },
    {
        "content": "<p>it was written very early on in mathlib4 history, before we had decided what to do about namespaced names and mostly only had the guidance \"theorems are snake cased\"</p>",
        "id": 390920280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694694937
    },
    {
        "content": "<p>I think this is a gap in <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> where we don't say whether to tokenize <code>Foo.barBaz</code> as <code>foo_barBaz_eq</code> or <code>fooBarBaz_eq</code></p>",
        "id": 390920316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694694952
    },
    {
        "content": "<p>I think we now have a decent amount of precedent in the form of <code>natCast_add</code> et al that they should be treated as one name including namespaces (when needed for disambiguation)</p>",
        "id": 390920533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695024
    },
    {
        "content": "<p>I don't think <a href=\"#narrow/stream/287929-mathlib4/topic/naming.20conventions.3A.20natCast.20vs.20nat_cast/near/342519952\">this thread</a> ever reached a consensus</p>",
        "id": 390920534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390915242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> If <code>h : x = y</code> you can write <code>congr(f $h)</code> to get <code>f x = f y</code></p>\n</blockquote>\n<p>Is this syntax useful for Mathlib?</p>",
        "id": 390920537,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694695025
    },
    {
        "content": "<p>I guess we proceeded in spite of a poll that is mildly negative to this conclusion</p>",
        "id": 390920799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390920533\">said</a>:</p>\n<blockquote>\n<p>I think we now have a decent amount of precedent in the form of <code>natCast_add</code> et al that they should be treated as one name including namespaces (when needed for disambiguation)</p>\n</blockquote>\n<p>We also have quite a lot of things of the form <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_multiset_sum#doc\">docs#map_multiset_sum</a>, so I'd argue there's no established convention</p>",
        "id": 390920881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695137
    },
    {
        "content": "<p>in that case it seems fine to just have the alias</p>",
        "id": 390920990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695175
    },
    {
        "content": "<p>(besides establishing a lack of convention)</p>",
        "id": 390920998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695177
    },
    {
        "content": "<p>I've revived the old thread to discuss this further. I suggest we don't rename <code>eqRec_heq</code> in core for now, and only make the other 13 renames.</p>",
        "id": 390921115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695210
    },
    {
        "content": "<p>what are the 13?</p>",
        "id": 390921173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> Have you read the documentation for the syntax? You can take a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.TermCongr.termCongr#doc\">docs#Mathlib.Tactic.TermCongr.termCongr</a> and see more examples all in one place in the test/TermCongr.lean file.</p>",
        "id": 390921816,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694695432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Spelling.20.60congrArg.60.20or.20.60congr_arg.60/near/390921173\">said</a>:</p>\n<blockquote>\n<p>what are the 13?</p>\n</blockquote>\n<p>Sorry, 12:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">proof_irrel</span> <span class=\"o\">:=</span> <span class=\"n\">proofIrrel</span>\n<span class=\"n\">alias</span> <span class=\"n\">congr_fun</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span>\n<span class=\"n\">alias</span> <span class=\"n\">congr_arg</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">Or.decidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableOr</span>\n<span class=\"n\">alias</span> <span class=\"n\">And.decidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableAnd</span>\n<span class=\"n\">alias</span> <span class=\"n\">Not.decidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableNot</span>\n<span class=\"n\">alias</span> <span class=\"n\">Iff.decidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableIff</span>\n<span class=\"n\">alias</span> <span class=\"n\">decidableTrue</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableTrue</span>\n<span class=\"n\">alias</span> <span class=\"n\">decidableFalse</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableFalse</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">by_cases</span> <span class=\"o\">:=</span> <span class=\"n\">byCases</span>\n<span class=\"n\">alias</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">:=</span> <span class=\"n\">byContradiction</span>\n<span class=\"n\">alias</span> <span class=\"n\">not_not_iff</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span>\n</code></pre></div>",
        "id": 390923045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695777
    },
    {
        "content": "<p>I guess the decidable aliases are bad too, so really only 4 should be moved to core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">proof_irrel</span> <span class=\"o\">:=</span> <span class=\"n\">proofIrrel</span>\n<span class=\"n\">alias</span> <span class=\"n\">congr_fun</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span>\n<span class=\"n\">alias</span> <span class=\"n\">congr_arg</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">Decidable.by_contradiction</span> <span class=\"o\">:=</span> <span class=\"n\">Decidable.byContradiction</span>\n</code></pre></div>",
        "id": 390923076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694695791
    },
    {
        "content": "<p>yeah they don't look very important, although I don't think you will get much pushback</p>",
        "id": 390923202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695821
    },
    {
        "content": "<p>in fact they look like what you will get if you just delete the name</p>",
        "id": 390923273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695844
    },
    {
        "content": "<p>oh wait I'm reading them backward</p>",
        "id": 390923352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695873
    },
    {
        "content": "<p>I would have expected something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">Or.instDecidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableOr</span>\n<span class=\"n\">alias</span> <span class=\"n\">And.instDecidable</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableAnd</span>\n<span class=\"n\">alias</span> <span class=\"n\">Not.instDecidable</span>  <span class=\"o\">:=</span> <span class=\"n\">instDecidableNot</span>\n<span class=\"n\">alias</span> <span class=\"n\">Iff.instDecidable</span>  <span class=\"o\">:=</span> <span class=\"n\">instDecidableIff</span>\n<span class=\"n\">alias</span> <span class=\"n\">decidableTrue</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableTrue</span>\n<span class=\"n\">alias</span> <span class=\"n\">decidableFalse</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableFalse</span>\n</code></pre></div>",
        "id": 390923473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694695913
    },
    {
        "content": "<p>those decidable aliases look like a good opportunity to test out <code>@[deprecated] alias</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 390923656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694695948
    },
    {
        "content": "<p>I think it's probably best not to make any PRs renaming instances in core; that's best left to the proposal to change the naming heuristics</p>",
        "id": 390923852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694696004
    },
    {
        "content": "<p>(the point of my comment was to replace uses of the alias in mathlib)</p>",
        "id": 390923976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696042
    },
    {
        "content": "<p>I think we should always try to keep the naming convention for instances close to the autogenerated name because people will have to deal with both anyway</p>",
        "id": 390924220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696108
    },
    {
        "content": "<p>Don't we also have <code>infer_instance</code> and <code>inferInstance</code>?</p>",
        "id": 390924622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694696242
    },
    {
        "content": "<p>That one is tactic vs term.</p>",
        "id": 390924734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694696279
    },
    {
        "content": "<p>unfortunately that's per the naming convention</p>",
        "id": 390924781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696284
    },
    {
        "content": "<p>although actually both are bad</p>",
        "id": 390924842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696308
    },
    {
        "content": "<p>the lean 3 <code>apply_instance</code> would call typeclass inference to fill your term, the lean 4 <code>infer_instance</code> is just <code>exact inferInstance</code> which infers the goal as an argument of the <code>inferInstance</code> no-op function</p>",
        "id": 390924988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696367
    },
    {
        "content": "<p>which means the term ends up with some extra garbage</p>",
        "id": 390925017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696379
    },
    {
        "content": "<p>by the way my list had <code>byCases</code> in the same category as <code>byContradiction</code></p>",
        "id": 390925369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694696490
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable.byCases#doc\">docs#Decidable.byCases</a> is special because it's sort-valued</p>",
        "id": 390929172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694697679
    },
    {
        "content": "<p>So having both versions of the name seems to fit the naming conventions</p>",
        "id": 390929267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694697707
    },
    {
        "content": "<p>Do we need to rename <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.inductionOn#doc\">docs#Quotient.inductionOn</a> (and <code>₂</code> <code>₃</code> <code>'</code> versions)?</p>",
        "id": 391149357,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694778942
    },
    {
        "content": "<p>Yes, I think so; though I think if we want any hope of these being merged they should be separate PRs</p>",
        "id": 391153202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694779988
    }
]