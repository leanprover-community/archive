[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , how should we manage the imports here? <code>Std.Classes.Cast</code> needs <code>Std.Data.Rat.Basic</code> to know what <code>Rat</code> is, but <code>Std.Data.Rat.Basic</code> depends on <code>Std.Classes.Cast</code>. (Should the definition of <code>Rat</code> move? Or should the coercion instances move to a new file <code>Std.Data.Rat.Cast</code>?)</p>",
        "id": 325495546,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675371231
    },
    {
        "content": "<p>Yeah, I was too quick to say it should go in that file. I would put it in <code>Std.Classes.RatCast</code></p>",
        "id": 325498016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372157
    },
    {
        "content": "<p>uh-oh: universe level errors</p>",
        "id": 325498734,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372444
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325498848,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372496
    },
    {
        "content": "<p>oops nvm</p>",
        "id": 325498914,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372522
    },
    {
        "content": "<p>do I need to worry about putting a copyright-related comment at the top of this new file? if so what should it be?</p>",
        "id": 325499659,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372821
    },
    {
        "content": "<p>copy it from mathlib</p>",
        "id": 325499712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372852
    },
    {
        "content": "<p>minus the \"this file is aligned\" part if any</p>",
        "id": 325499772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372874
    },
    {
        "content": "<p>from mathlib? not std?</p>",
        "id": 325499802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372890
    },
    {
        "content": "<p>the code you are PR'ing is from mathlib is it not?</p>",
        "id": 325499852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372909
    },
    {
        "content": "<p>hmmm...some of it yes</p>",
        "id": 325499977,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372938
    },
    {
        "content": "<p>some of it is derived from existing std code</p>",
        "id": 325500006,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675372950
    },
    {
        "content": "<p>you can add yourself as author if you added something significant beyond the copypasta</p>",
        "id": 325500102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372988
    },
    {
        "content": "<p>hmmm I don't know if I did. the rewritten <code>ofScientific</code> instance is in this file but is that really \"significant\"?</p>",
        "id": 325500326,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675373070
    },
    {
        "content": "<p>more of a slight change</p>",
        "id": 325500386,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675373095
    },
    {
        "content": "<p>I suppose I should union the sets of authors over all files I copied stuff from though</p>",
        "id": 325501100,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675373354
    },
    {
        "content": "<p>though different people hold the copyright...not sure how that works</p>",
        "id": 325501219,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675373398
    },
    {
        "content": "<p>the top line is the earliest contributor</p>",
        "id": 325501337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675373427
    },
    {
        "content": "<p>interesting. both you and Robert Lewis contributed stuff in 2014, but I can't pin down an exact date for when this file emerged via the <a href=\"https://github.com/leanprover-community/mathlib/commits/master/src/algebra/field/defs.lean\">github history</a>. only seems to go back a year, even via the rename. I'll leave it as Robert Lewis for now since I already committed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 325502719,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675373936
    },
    {
        "content": "<p>ok, <a href=\"https://github.com/leanprover/std4/pull/101\">std4#101</a> is up there</p>",
        "id": 325503542,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675374288
    },
    {
        "content": "<p>It does seem like this will cause at least one minor breakage in mathlib4, which I'm guessing we can fix by changing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_id</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Rat.cast</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 325509401,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675376716
    },
    {
        "content": "<p>how do we deal with this, though? can we have \"simultaneous PR's\", or do we have PR's on mathlib4 which update the manifest and fix changes, or?</p>",
        "id": 325509473,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675376748
    },
    {
        "content": "<p>Re: making overlapping <code>OfScientific</code> instances: how would we make the two instances defeq at <code>.instances</code> transparency? The following are failing for me (in a file where I can evaluate it):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">instOfScientific</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">Rat</span> <span class=\"n\">where</span> <span class=\"n\">ofScientific</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.ofScientific</span>\n<span class=\"kd\">instance</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">α</span> <span class=\"n\">where</span> <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">x'</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfScientific</span> <span class=\"n\">α</span> <span class=\"n\">where</span> <span class=\"n\">ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofScientific</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 325515847,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675379480
    },
    {
        "content": "<p>I think whoever bumps Std versions will deal with all these updates -- some of the List Perm stuff will need small changes in mathlib4 too, but easier to handle it all at once I guess</p>",
        "id": 325530753,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675387744
    },
    {
        "content": "<p>Ok, as discussed in today's mathlib porting meeting and as proposed by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20from.20Nat.20to.20ENat/near/327148856\">here</a>, I went ahead and made <code>Nat.cast</code>, <code>Int.cast</code>, and the incoming <code>Rat.cast</code> reducible in <a href=\"https://github.com/leanprover/std4/pull/101\">std4#101</a>.</p>\n<p>This also means nothing related to <code>OfScientific</code> needs to be addressed in that PR now.</p>",
        "id": 338468904,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677539512
    },
    {
        "content": "<p>Pinging <a href=\"https://github.com/leanprover/std4/pull/101\">std4#101</a> since there's been some activity on a PR which depends on it; <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I removed <code>id</code> from the reflexive instances as suggested (consider me gotcha'd <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 340454407,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678305929
    },
    {
        "content": "<p>LGTM.</p>",
        "id": 340454615,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305992
    }
]