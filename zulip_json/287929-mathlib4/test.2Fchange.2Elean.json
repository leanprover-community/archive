[
    {
        "content": "<p>When I run <code>git clone https://github.com/leanprover-community/mathlib4.git</code>, I get the following warning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">paths</span> <span class=\"k\">have</span> <span class=\"n\">collided</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span> <span class=\"n\">case</span><span class=\"bp\">-</span><span class=\"n\">sensitive</span> <span class=\"n\">paths</span>\n<span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">case</span><span class=\"bp\">-</span><span class=\"n\">insensitive</span> <span class=\"n\">filesystem</span><span class=\"o\">)</span> <span class=\"n\">and</span> <span class=\"n\">only</span> <span class=\"n\">one</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">same</span>\n<span class=\"n\">colliding</span> <span class=\"n\">group</span> <span class=\"n\">is</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">working</span> <span class=\"n\">tree</span><span class=\"o\">:</span>\n\n  <span class=\"bp\">'</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Change.lean'</span>\n  <span class=\"bp\">'</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">change.lean'</span>\n</code></pre></div>\n<p>and then when I run <code>git checkout my_branch</code>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Your</span> <span class=\"kn\">local</span> <span class=\"n\">changes</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">files</span> <span class=\"n\">would</span> <span class=\"n\">be</span> <span class=\"n\">overwritten</span> <span class=\"kd\">by</span> <span class=\"n\">checkout</span><span class=\"o\">:</span>\n        <span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">Change.lean</span>\n<span class=\"n\">Please</span> <span class=\"n\">commit</span> <span class=\"n\">your</span> <span class=\"n\">changes</span> <span class=\"n\">or</span> <span class=\"n\">stash</span> <span class=\"n\">them</span> <span class=\"n\">before</span> <span class=\"n\">you</span> <span class=\"n\">switch</span> <span class=\"n\">branches.</span>\n<span class=\"n\">Aborting</span>\n</code></pre></div>\n<p>Has anyone else run into this issue?</p>",
        "id": 387595990,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1693196826
    },
    {
        "content": "<p>I've received a message from <span class=\"user-mention\" data-user-id=\"400544\">@Buster</span> and I'm about to push a name change PR!</p>",
        "id": 387596650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693197329
    },
    {
        "content": "<p>I introduced <code>test/Change.lean</code> to test the <code>change?</code> tactic, but did not realize that this would overwrite <code>test/change.lean</code> on case-insensitive systems.</p>",
        "id": 387596742,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693197393
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6821\">#6821</a></p>",
        "id": 387597298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693197820
    },
    {
        "content": "<p>I'll also write a script to try to avoid this sort of issue in the future!</p>",
        "id": 387597362,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693197856
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>ls-files<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sort<span class=\"w\"> </span>--ignore-case<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>uniq<span class=\"w\"> </span>-D<span class=\"w\"> </span>--ignore-case\n</code></pre></div>\n<p>seems to work for checking paths that are the same ignoring case.</p>",
        "id": 387601399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693199902
    },
    {
        "content": "<p>The PR is merged!  If you pull now, things should work again.</p>\n<p>Scott, thanks for merging quickly!</p>",
        "id": 387604274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693202025
    },
    {
        "content": "<p>Let me know if this causes more problems.</p>",
        "id": 387604305,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693202043
    },
    {
        "content": "<p>For anyone else who encounters this, I actually couldn't pull the new commit, and had to delete my master branch and check it out again. Fun adventures in case sensitivity!</p>",
        "id": 387605223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693202668
    },
    {
        "content": "<p>Wow!  I am sorry to have caused this!  Would it make sense to add the pipe above to linting, in order to avoid this kind of issue in the future?  If so, I am happy to learn how to do it, but I would appreciate some guidance!</p>",
        "id": 387605406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693202796
    },
    {
        "content": "<p>I would simply add this to the style linter script, similar to how <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/scripts/lint-style.sh#L48-L55\">https://github.com/leanprover-community/mathlib4/blob/master/scripts/lint-style.sh#L48-L55</a> is implementated</p>",
        "id": 387613641,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693207366
    },
    {
        "content": "<p>Alex, thanks!  I'll do that!</p>",
        "id": 387615332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693208209
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6825\">#6825</a></p>\n<p>Disclaimer: I think that this might be the first time that some bash code that I wrote gets reviewed!</p>",
        "id": 387617505,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693209194
    },
    {
        "content": "<p>Would it be useful to have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Command</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lintUpperLowerCase</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toLowerRepetitions</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">sorted</span> <span class=\"o\">:=</span> <span class=\"n\">names.qsort</span> <span class=\"k\">fun</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n1.toString.toLower</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n2.toString.toLower</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"n\">groups</span> <span class=\"o\">:=</span> <span class=\"n\">sorted.toList.groupBy</span> <span class=\"k\">fun</span> <span class=\"n\">n1</span> <span class=\"n\">n2</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n1.toString.toLower</span> <span class=\"bp\">==</span> <span class=\"n\">n2.toString.toLower</span><span class=\"o\">)</span>\n<span class=\"n\">groups.filter</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"bp\">·</span> <span class=\"bp\">!=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#case_clashes\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">modNames</span> <span class=\"o\">:=</span> <span class=\"n\">env.header.moduleNames.push</span> <span class=\"n\">env.mainModule</span>\n  <span class=\"k\">match</span> <span class=\"n\">toLowerRepetitions</span> <span class=\"n\">modNames</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">reps</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"n\">reps.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{x}\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{y}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">))</span>\n      <span class=\"s2\">\"The following groups of files are the same modulo upper/lower-case:</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">lintUpperLowerCase</span>\n</code></pre></div>\n<p>as a Lean command, maybe added to <code>#lint</code>?</p>",
        "id": 387619434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693210047
    },
    {
        "content": "<p>Linting for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6825\">#6825</a> passed.  I have now pushed <a href=\"https://github.com/leanprover-community/mathlib4/tree/adomani%2FtestUpperLowerLinter\">branch#adomani/testUpperLowerLinter</a>, where I created an empty <code>CODe_OF_CONDUCT.md</code> file to check that the linter would pick it up (it does on my computer).</p>",
        "id": 387621093,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693210773
    },
    {
        "content": "<p>Success: it failed!</p>",
        "id": 387621247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693210834
    },
    {
        "content": "<p>I don't think doing this within lean is helpful; we want to protect against clashes in non-lean files too</p>",
        "id": 387641547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693219283
    },
    {
        "content": "<p>Yes, I agree.  Also, the test branch duplicated an <code>md</code> file and the linter caught it.</p>",
        "id": 387641638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693219321
    },
    {
        "content": "<p>Thanks! I kicked it on the bors queue</p>",
        "id": 387662534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693227131
    }
]