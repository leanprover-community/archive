[
    {
        "content": "<p>I noticed that a couple <code>isDefEq</code> checks in NormNum.Basic were changed to take advantage the nice new Qq functionality (thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>!).</p>\n<p>Is this because it's actually more efficient than the current approach somehow? Moreover, should I change the remaining <code>norm_num</code> extensions to use that style of defeq check analogously?</p>",
        "id": 342852272,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679182656
    },
    {
        "content": "<p>It's not any more efficient.  <code>assertDefEqQ</code> compiles to essentially the same code as <code>guard (&lt;- isDefEq ..)</code> (but with a better error message).  The real advantage is that the return type is better: it returns a \"proof\" that the two sides are defeq, which quote4 uses to actually make the two expressions defeq inside the <code>q(..)</code>.  (At least it tries to, the only trick it knows is turning hypothesis into a let-binding.)</p>",
        "id": 342855417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679184810
    },
    {
        "content": "<p>I can see how that would be very helpful! :) Itâ€™ll certainly be useful when writing future norm_num extensions.</p>",
        "id": 342856517,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679185622
    }
]