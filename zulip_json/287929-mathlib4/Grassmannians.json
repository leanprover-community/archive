[
    {
        "content": "<p>This is a sequel to <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space\">#narrow/stream/287929-mathlib4/topic/Projective.20space</a><br>\nIn that topics I announced that I had defined the smooth manifold structure on projective space, and was asked about grassmannians (for example by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ). So grassmannians are now done too, see there: <a href=\"https://github.com/smorel394/Grassmannian\">https://github.com/smorel394/Grassmannian</a></p>\n<p>It is less polished than projective spaces so far, I haven't tried to optimize anything and I don't even have a readme. The definition of the <code>ChartedSpace</code> and <code>SmoothManifoldWithCorners</code> structures are in the file <code>Manifold.lean</code>.  </p>\n<p>The big problem I have for now is that I can't figure out how to make these instances, so there might be a lot of pain when I start working with smooth maps on grassmannians. I don't really understand instances but I think of them as \"canonical structures\", so the problem might be that my <code>ChartedSpace</code> structure is not canonical ? It depends on a model space  $U$ and on a choice of isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and a codimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> subspace of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> (the space of which I take the grassmannian). For projective spaces I solved that problem by using the axiom of choice to pick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and the isomorphism, but then I got complaints because my model space was strange. But I really don't see what else I can do, if I want a <code>ChartedSpace</code> instance. Any advice ?</p>",
        "id": 395947135,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696965529
    },
    {
        "content": "<p>Let me try if this trick works one more time: If you've done <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and Grassmanians, shouldn't you really actually do Quot schemes? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 395947297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696965609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395947297\">said</a>:</p>\n<blockquote>\n<p>Let me try if this trick works one more time: If you've done <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and Grassmanians, shouldn't you really actually do Quot schemes? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>Do we have schemes in mathlib now ?</p>\n<p>Can't you help with my instance problem instead of torturing me ? <span aria-label=\"pleading face\" class=\"emoji emoji-1f97a\" role=\"img\" title=\"pleading face\">:pleading_face:</span></p>",
        "id": 395947473,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696965716
    },
    {
        "content": "<p>On a more serious note: <span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> can you please link to where the exact definition is that you would like to make an instance?</p>",
        "id": 395947482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696965721
    },
    {
        "content": "<p><a href=\"https://github.com/smorel394/Grassmannian/blob/master/Grassmannian/Manifold.lean\">https://github.com/smorel394/Grassmannian/blob/master/Grassmannian/Manifold.lean</a> line 103</p>",
        "id": 395947603,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696965769
    },
    {
        "content": "<p>Hmmz, so does that declaration depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>?</p>",
        "id": 395947967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696965934
    },
    {
        "content": "<p>One trick (but a bit ugly) is to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and/or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> explicit as argument to <code>Grassmanian</code>.</p>",
        "id": 395948012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696965961
    },
    {
        "content": "<p>Yes, the <code>ChartedSpace</code> structure depends on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>, I suppose that's the problem.</p>",
        "id": 395948266,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966061
    },
    {
        "content": "<p>Hm, interesting trick.</p>",
        "id": 395948331,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966083
    },
    {
        "content": "<p>The other solution is to use choice to pick an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>. I would incline towards that, since in my experience the precise model is unimportant.</p>",
        "id": 395948421,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966116
    },
    {
        "content": "<p>Yeah, it's a bit ugly from an informal maths POV. But it will certainly make typeclass inference happier (-;</p>",
        "id": 395948428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966121
    },
    {
        "content": "<p>So which do you think is less ugly: make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> an explicit argument of <code>Grassmannian</code>, or use choice to pick an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> ?</p>",
        "id": 395948520,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966181
    },
    {
        "content": "<p>I suppose what I could do if I choose the first solution is make a copy of the <code>Grassmannian</code> type that will carry the <code>ChartedSpace</code> structure. I don't want <code>Grassmannian</code> as a topological space to have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> as an argument, because it doesn't depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> !</p>",
        "id": 395948669,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966246
    },
    {
        "content": "<p>If you want to use choice to pick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> then you need to add another hypothesis, roughly asserting that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> exists, right?</p>",
        "id": 395948977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966419
    },
    {
        "content": "<p>Some <code>Prop</code> fact about the dimension of <code>U</code> and how it relates to <code>r</code>...</p>",
        "id": 395949013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966437
    },
    {
        "content": "<p>Or would you also pick <code>U</code> directly, as part of that choice?</p>",
        "id": 395949115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395948977\">said</a>:</p>\n<blockquote>\n<p>If you want to use choice to pick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> then you need to add another hypothesis, roughly asserting that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> exists, right?</p>\n</blockquote>\n<p>Yes, but if I want things to be canonical I would do a definition by cases: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> has dimension at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> then an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> exists, otherwise the grasssmannian is empty hence has a trivial <code>ChartedSpace</code> structure.</p>",
        "id": 395949196,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395949115\">said</a>:</p>\n<blockquote>\n<p>Or would you also pick <code>U</code> directly, as part of that choice?</p>\n</blockquote>\n<p>In fact I would pick a continuous linear surjection from <code>E</code> to <code>Fin r → 𝕜</code>. I already have a construction somewhere that deduces an <code>U</code> and an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>.</p>",
        "id": 395949346,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966593
    },
    {
        "content": "<p>And to construct such a continuous linear surjection, I just need a <code>SeparatingDual</code> instance on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and a suspace of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> of dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> (i.e. a point of the grassmannian). I also have code doing that.</p>",
        "id": 395949570,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966708
    },
    {
        "content": "<p>Hmm, I very much agree that the topology doesn't depend on any of this, so it also shouldn't be made visible in the type of <code>Grassmanian</code>. But I don't know what the best way is to deal with the <code>ChartedSpace</code> instance.</p>",
        "id": 395949944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966890
    },
    {
        "content": "<p>I cannot find the definition of a <code>ChartedSpace</code> structure on an empty type in mathlib, which disappoints me deeply. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  Still, I think I can manage to construct it.</p>",
        "id": 395949947,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966891
    },
    {
        "content": "<p>The problem is possibly again: what is the model? There is no canonical choice in this case, right?</p>",
        "id": 395950076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966931
    },
    {
        "content": "<p>You probably can't find an instance for a 1-pt space either...</p>",
        "id": 395950106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696966945
    },
    {
        "content": "<p>Nope. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is finite-dimensional of dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">n+r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> then you could argue that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">n</mi></mrow><mtext> </mtext><mi>n</mi><mo>→</mo><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Fin}\\ n \\to \\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Fin</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span> is the canonical model.</p>",
        "id": 395950229,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696966990
    },
    {
        "content": "<p>But I wrote everything for a possibly infinite-dimensional space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>...</p>",
        "id": 395950347,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696967026
    },
    {
        "content": "<p>For the Grassmanian, yes. But for <code>Empty</code>...</p>",
        "id": 395950453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696967048
    },
    {
        "content": "<p>Ah, for <code>Empty</code>, I don't know...</p>",
        "id": 395950531,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696967070
    },
    {
        "content": "<p>You can just use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span>, I suppose. Since there will be no charts, it doesn't matter, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span> is already part of the data. (If you are working with grassmannians at least.)</p>",
        "id": 395950856,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696967186
    },
    {
        "content": "<p>Or maybe it would make more sense to use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>. I'm not sure it matters all that much.</p>",
        "id": 395951101,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696967333
    },
    {
        "content": "<p>\"What is the model of the empty manifold?\" is truly a mathlib question <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 395951155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696967379
    },
    {
        "content": "<p>I would say that it is not entirely devoid of content.  Especially if you use the model to determine its dimension.</p>",
        "id": 395951600,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696967608
    },
    {
        "content": "<p>What is the dimension of the empty space in mathlib ? Is it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> ?</p>",
        "id": 395951762,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696967692
    },
    {
        "content": "<p>Well, you first need to give a definition of dimension, I fear</p>",
        "id": 395951830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696967745
    },
    {
        "content": "<p>For polynomials, there are <code>degree</code> and <code>natDegree</code> and in <code>natDegree</code> you would get <code>0</code>, while with <code>degree</code> you would get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 395951865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696967760
    },
    {
        "content": "<p>I imagine that there will be a <code>natDim</code> and a <code>dim</code>...</p>",
        "id": 395951917,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696967771
    },
    {
        "content": "<p>Or maybe <code>dim</code> will be a locally constant function to <code>Nat</code>?</p>",
        "id": 395952007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696967822
    },
    {
        "content": "<p>So, <code>sheafDim, dim, natDim, ...</code></p>",
        "id": 395952088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696967860
    },
    {
        "content": "<p>I assume this question was discussed a long time ago (probably before I even learned what a manifold was), but both this thread and the last one on projective spaces make me wonder wether we really want to choose a fixed model space for the whole manifold. One could imagine a definition of manifolds where structure groupoids are replaced by any sub-groupoid (in the categoretical sense) of <code>Top</code>. But I feel like this must have been ruled out for technical reasons that I don't immediately see...</p>",
        "id": 395952185,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696967893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395949947\">said</a>:</p>\n<blockquote>\n<p>I cannot find the definition of a <code>ChartedSpace</code> structure on an empty type in mathlib, which disappoints me deeply. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  Still, I think I can manage to construct it.</p>\n</blockquote>\n<p>To prove that the empty set had a perfectoid space structure we had to prove that the trivial topological ring was an arbitrary product of trivial topological rings in the category of topological rings (becuase you can cover the empty set by arbitrarily many empty sets...)</p>",
        "id": 395952216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696967912
    },
    {
        "content": "<p>Isn't the model space explicit in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ChartedSpace%3F#doc\">docs#ChartedSpace?</a> Which means that we could put a manifold structure on the empty set for <em>any</em> topological vector space?</p>",
        "id": 395952341,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696967972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395951865\">said</a>:</p>\n<blockquote>\n<p>For polynomials, there are <code>degree</code> and <code>natDegree</code> and in <code>natDegree</code> you would get <code>0</code>, while with <code>degree</code> you would get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span>.</p>\n</blockquote>\n<p>Two of my PhD students are thinking about dimension, and indeed they are considering the same set-up, this time with WithBot (WithTop Nat) and Nat.</p>",
        "id": 395952345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696967975
    },
    {
        "content": "<p>(Sorry if I'm saying nonsense, I've never actually touched the manifold library)</p>",
        "id": 395952464,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696968012
    },
    {
        "content": "<p>Honestly, I think that the more \"aesthetic\" definition is <code>degree/dim</code>, even though it only really started making sense with formalization for me.  However, the automation around <code>Nat</code> is so much better than around <code>WithBot Nat</code>, that I prefer to use <code>natDegree</code>.  I would really like this to change, though.</p>",
        "id": 395952681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696968100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395952341\">said</a>:</p>\n<blockquote>\n<p>Isn't the model space explicit in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ChartedSpace%3F#doc\">docs#ChartedSpace?</a> Which means that we could put a manifold structure on the empty set for <em>any</em> topological vector space?</p>\n</blockquote>\n<p>Yes, I think so.</p>",
        "id": 395953163,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696968282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395952185\">said</a>:</p>\n<blockquote>\n<p>I assume this question was discussed a long time ago (probably before I even learned what a manifold was), but both this thread and the last one on projective spaces make me wonder wether we really want to choose a fixed model space for the whole manifold. One could imagine a definition of manifolds where structure groupoids are replaced by any sub-groupoid (in the categoretical sense) of <code>Top</code>. But I feel like this must have been ruled out for technical reasons that I don't immediately see...</p>\n</blockquote>\n<p>In these examples, it is clear that the \"natural\" model depends on the point at which you take a chart. On the other hands, there are <code>ContinuousLinearEquiv</code>'s between all these models, and these are diffeomorphisms, and so in practice it has not made a difference for me what model I chose (so far).</p>",
        "id": 395953478,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696968404
    },
    {
        "content": "<p>Maybe the correct answer is that you should use a torsor under a topological vector space as model and then you use the empty torsor for the empty manifold, at which point maybe the actual vector space is irrelevant!</p>",
        "id": 395953500,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696968415
    },
    {
        "content": "<p>Okay, but say I want to finish formalizing the manifold structure on grassmannians in <em>finite</em> time...</p>",
        "id": 395953587,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696968458
    },
    {
        "content": "<p>So many requirements...</p>",
        "id": 395953678,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696968488
    },
    {
        "content": "<p>I already have to rewrite part of the normed space library if I want to get quaternionic grassmannians...</p>",
        "id": 395953830,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696968574
    },
    {
        "content": "<p>What parts? I'm interested to know.</p>",
        "id": 395954330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696968833
    },
    {
        "content": "<p>The parts of the automatic continuity of linear maps whose source is finite-dimensional. (RIght now we require the base ring to be a <code>NontriviallyNormedField</code>, but <code>NontriviallyNormedDivisionRing</code> would be sufficient.)<br>\nI did some of it there: <a href=\"https://github.com/leanprover-community/mathlib4/tree/NontriviallNormedDivisionRing\">https://github.com/leanprover-community/mathlib4/tree/NontriviallNormedDivisionRing</a><br>\nBut it's not enough.</p>",
        "id": 395954641,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696968982
    },
    {
        "content": "<p>I think it would be nice to discuss that in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/NormedModule.20.3F\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/NormedModule.20.3F</a>, the fact that we have twenty different threads with twenty different plans is not making it easy to agree on a plan <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 395954740,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696969054
    },
    {
        "content": "<p>And I'd be happy to help once we've agreed on what's needed and a general plan!</p>",
        "id": 395954784,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696969082
    },
    {
        "content": "<p>My plan was less ambitious. I just noticed that some mathlib results still compiled if you made the base field into a base division ring. But yes, it would be nice to have <code>NormedModule</code>.</p>",
        "id": 395954973,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696969167
    },
    {
        "content": "<p>Oh yes for that part there's no real need to wait</p>",
        "id": 395955014,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696969193
    },
    {
        "content": "<p>Well, I did have to define a <code>NontriviallyNormedDivisionRing</code> class, but it's exactly what you would expect.</p>",
        "id": 395955130,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696969240
    },
    {
        "content": "<p>Even if it's not enough, it might be nice to start merging the generalization into mathlib!</p>",
        "id": 395955174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696969262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395955130\">said</a>:</p>\n<blockquote>\n<p>Well, I did have to define a <code>NontriviallyNormedDivisionRing</code> class, but it's exactly what you would expect.</p>\n</blockquote>\n<p>This name triggers my un-bundling instinct. Do we really hate <code>[Field F] [NormedRing F]</code> that much?</p>",
        "id": 395955401,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696969375
    },
    {
        "content": "<p>We already have <code>NontriviallyNormedField</code>. Attack that one first.</p>",
        "id": 395955687,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696969508
    },
    {
        "content": "<p>This is really a question for another thread, Anatole!</p>",
        "id": 395955705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696969520
    },
    {
        "content": "<p>It's not just a normed field, there's also a condition that the norm is not trivial.</p>",
        "id": 395955767,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696969551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Grassmannians/near/395955767\">said</a>:</p>\n<blockquote>\n<p>It's not just a normed field, there's also a condition that the norm is not trivial.</p>\n</blockquote>\n<p>I know, but I was suggesting un-bundling the algebra and normed structures in general to reduce the amount of boilerplate necessary. But this would be a huge refactor and, as Yaël said, it's mostly orthogonal to the current discussion.</p>",
        "id": 395955998,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696969659
    },
    {
        "content": "<p>The model space in <code>ChartedSpace</code> is indeed explicit to allow for different charted space structure on the same type. So the empty type can be a charted space on everything simultaneously. At the start of the library, the model space was an outparam (i.e., meant to be unique), but this created nasty diamonds with products, so that's why we switched to an explicit one. In the same way, when you speak of smooth functions on a manifold <code>M</code>, there is always an explicit gadget (typically called <code>I</code>) saying which model space you're using (and also how the model space embeds in a given vector space).</p>",
        "id": 396024550,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697008256
    },
    {
        "content": "<p>Okay, so I tried a little bit to handle the case of empty grassmannian, it got nasty and I said \"screw all this\". So now we get <code>ChartedSpace</code> and <code>SmoothManifoldWithCorners</code> instances on the grassmannian (with a model space picked by <code>Classical.choice</code>), <em>given</em> you put a <code>Nonempty</code> instance on the grassmannian first.<br>\nI also kept the code defining the <code>ChartedSpace</code> etc structures from an explicit choice of model, so anybody can choose their favorite model in a given situation.</p>",
        "id": 396031929,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697011255
    },
    {
        "content": "<p>I'll write a couple of helper lemmas to prove non-emptiness of the grassmannian (like \"if the <code>finrank</code> is at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> then the grassmannian is not empty\").</p>",
        "id": 396032176,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1697011337
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396120902,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697040042
    },
    {
        "content": "<p>Out of curiosity, is there any work for the cardinality of a Grassmannian (or more specifically, q-deformed binomial coefficients)? I have some work for that in Lean 3 that I'd like to port over, but if it's been done already then I won't worry about it. I couldn't find it in the Grassmannian.lean file so I figured I'd ask.</p>",
        "id": 403438732,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1700590790
    }
]