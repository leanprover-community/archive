[
    {
        "content": "<p>In mathlib 3 I could do <code>@[simps?]</code> to see the lemmas that <code>simps</code> was generating. What can I do in Lean 4?</p>",
        "id": 324772736,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675111294
    },
    {
        "content": "<p>autocompletion I guess?</p>",
        "id": 324774182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675111826
    },
    {
        "content": "<p>There's also <code>whatsnew in @[simps] def foo := ...</code> (which works for all commands).</p>",
        "id": 324778067,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675113221
    },
    {
        "content": "<p>Did you try <code>@[simps?]</code> in Lean 4?</p>",
        "id": 324780746,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675114291
    },
    {
        "content": "<p>Yes, and that gave me nothing. Actually, <code>whatsnew</code> complains too, because of the syntax (it wants to see the <code>def</code> immediately, not the <code>@[attrs...]</code>)</p>",
        "id": 324781276,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675114462
    },
    {
        "content": "<p>So I still don't have a solution to this.</p>",
        "id": 324781298,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675114471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/finding.20.60simps.60.20lemmas/near/324781276\">said</a>:</p>\n<blockquote>\n<p>Yes, and that gave me nothing.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n<p>The code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Simps.Basic</span>\n\n<span class=\"kd\">@[simps?]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simps.verbose</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">generating</span> <span class=\"n\">projection</span> <span class=\"n\">information</span> <span class=\"n\">for</span> <span class=\"kd\">structure</span> <span class=\"n\">Prod.</span>\n\n<span class=\"o\">[</span><span class=\"n\">simps.verbose</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">generated</span> <span class=\"n\">projections</span> <span class=\"n\">for</span> <span class=\"n\">Prod</span><span class=\"o\">:</span>\n            <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">fst</span><span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span>\n            <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">snd</span><span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.snd</span>\n\n<span class=\"o\">[</span><span class=\"n\">simps.verbose</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">foo_fst</span><span class=\"o\">:</span>\n            <span class=\"bp\">&gt;</span> <span class=\"n\">foo.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"o\">[</span><span class=\"n\">simps.verbose</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">foo_snd</span><span class=\"o\">:</span>\n            <span class=\"bp\">&gt;</span> <span class=\"n\">foo.snd</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>It's a linter trace message. Did you turn anything like that off?</p>",
        "id": 324782176,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675114814
    },
    {
        "content": "<p>I confirm that your mwe works for me. However, if you want to see where it was failing for me, pull <a href=\"https://github.com/leanprover-community/mathlib4/pull/1949\">!4#1949</a> and have a look at the first <code>@[simps apply]</code> (line 143). There are lots of errors in the file, but they all occur after that declaration. I didn't turn off any linting (at least not consciously). I would troubleshoot, but I need to go teach.</p>",
        "id": 324786067,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675116263
    },
    {
        "content": "<p><code>whatsnew in</code> works for me, and says that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- `finsupp.map_range` as an equiv. -/</span>\n<span class=\"kd\">@[simps apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mapRange.equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f.symm</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mapRange</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>produces <code>Finsupp.mapRange.equiv</code>, <code>Finsupp.mapRange.equiv.proof_1</code> and <code>Finsupp.mapRange.equiv.proof_2</code>. One appealing conclusion consistent with everything is that <code>@[simps apply]</code> creates 0 lemmas. I've never understood <code>@[simps]</code> properly. What's it supposed to produce?</p>",
        "id": 324787303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675116749
    },
    {
        "content": "<p>oops, I apologize, <code>whatsnew</code> does work for me on that declaration. It didn't work later in the file, but that may have been because of various errors that showed up earlier.</p>",
        "id": 324787780,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675116954
    },
    {
        "content": "<p><code>simps?</code> doesn't though.</p>",
        "id": 324787841,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675116966
    },
    {
        "content": "<p>What I'm saying is that according to <code>whatsnew</code>, <code>simps</code> is creating 0 new lemmas, and this is consistent with <code>simps?</code> printing out nothing.</p>",
        "id": 324788161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675117097
    },
    {
        "content": "<p>And what I'm asking is what lemmas you're expecting it to produce, because I don't understand <code>simps</code>.</p>",
        "id": 324788202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675117121
    },
    {
        "content": "<p>oh, sorry, I understand. Normally <code>simps</code> produces the definitional lemmas associated to data-carrying structure projections (although in mathlib 3 at least it can sometimes do other things too, but sometimes this causes it to timeout). In this case, I think I would be expecting it to make a slightly different lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mapRange.equiv_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">f.symm</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mapRange.equiv</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">mapRange</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I think it is supposed to make this lemma because of an <code>initialize_simps_projection</code> (since it's not exactly just the structure projection), but I could be wrong.</p>",
        "id": 324789448,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675117526
    },
    {
        "content": "<p>This is caused by <code>noncomputable section</code> on line 48. It seems to disable all attributes (including <code>@[simp]</code> or <code>@[simps]</code>) with <code>applicationTime := .afterCompilation</code>. This is a bug in core.<br>\nNote: <code>@[simps?]</code> always prints something, even if there are 0 lemmas generated.</p>",
        "id": 324790937,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675118079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> shall I open an issue in the lean4 repo?</p>",
        "id": 324791264,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675118195
    },
    {
        "content": "<p>Yes please.  If you know, can you also please explain why <code>simps</code> should be <code>afterCompilation</code> (i.e., why it can't be <code>afterTypeChecking</code>).</p>",
        "id": 324791611,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675118306
    },
    {
        "content": "<p>This is left-over from Lean 3 behavior. <code>simps</code> had to be run after <code>to_additive</code>, <code>to_additive</code> had to be run after <code>simp</code> and <code>simp</code> is <code>afterCompilation</code>. I think this is all unnecessary since <a href=\"https://github.com/leanprover-community/mathlib4/pull/1314\">!4#1314</a>. I'll try to remove these application times and see if everything is ok.</p>",
        "id": 324792067,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675118493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2077\">lean4#2077</a></p>",
        "id": 324794555,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675119535
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>!</p>",
        "id": 324800982,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675122901
    }
]