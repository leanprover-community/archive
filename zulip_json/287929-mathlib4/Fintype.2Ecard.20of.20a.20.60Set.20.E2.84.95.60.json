[
    {
        "content": "<p>This works in mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, I have not been able to figure out how to make it work in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">]</span> <span class=\"c1\">-- does not do anything</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does this indicate the existence of a bug? Or maybe I'm abusing <code>Fintype.card</code>, and this shouldn't be expected to work anyways?</p>",
        "id": 329010611,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676907270
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Fintype.card_congr''</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">iB</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"n\">_</span> <span class=\"n\">iA</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"n\">_</span> <span class=\"n\">iB</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_congr'</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Fintype.card</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span><span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 329014436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676908277
    },
    {
        "content": "<p>It looks like somehow <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.card_congr'#doc\">docs4#Fintype.card_congr'</a> isn't firing</p>",
        "id": 329014853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676908400
    },
    {
        "content": "<p>cool, and then <code>  simp only [Fintype.card_ofFinset, Finset.card_range]</code> closes that <code>sorry</code></p>",
        "id": 329016496,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676908857
    },
    {
        "content": "<p>but now I'm confused about why in the mathlib3 version, the <code>simp</code> picks up the <code>finset.card_range</code> lemma, which is not tagged as <code>[simp]</code>.</p>",
        "id": 329016622,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676908891
    },
    {
        "content": "<p>The difference between <code>Fintype.card_congr'</code> and your <code>Fintype.card_congr''</code> seems to be that the former uses <code>[]</code> brackets for the <code>Fintype</code> premises, while the latter uses <code>{}</code> brackets.</p>",
        "id": 329017478,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676909140
    },
    {
        "content": "<p>Yes, I suspect this is because Lean4 chooses to be stubborn and not fill <code>[]</code> by unification even if it knows it can</p>",
        "id": 329017690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676909200
    },
    {
        "content": "<p>I don't know whether the solution is to teach <code>@[congr]</code> to use unification, or to change <code>Fintype.card_congr'</code> to use <code>{}</code> and add a porting note. Probably the thing to do is open an issue about the former, and then reference it in a comment in the latter</p>",
        "id": 329017878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676909257
    }
]