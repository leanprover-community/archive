[
    {
        "content": "<p>Reposting <a href=\"#narrow/stream/287929-mathlib4/topic/Suggestions.20for.20.23port-status/near/325675405\">another thread</a>, <a href=\"https://leanprover-community.github.io/mathlib-port-status/out-of-sync\">https://leanprover-community.github.io/mathlib-port-status/out-of-sync</a> now includes the output of the diff and list of relevant PRs. I think we probably need some more information to start clearing out this list, perhaps:</p>\n<ul>\n<li>Links to the relevant mathport output</li>\n<li>Diff in mathlib4 between the initial port and the one at HEAD</li>\n<li>Difference in #align data?</li>\n</ul>\n<p>(note I renamed the topic, since the old title referred to a header that was renamed on <a href=\"https://leanprover-community.github.io/mathlib-port-status/old\">#port-status</a>)</p>",
        "id": 325676836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675442694
    },
    {
        "content": "<p>I've made a bit more progress on this; <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/topology/constructions\">port-status#topology/constructions</a> now shows:</p>\n<ul>\n<li>The mathlib4 changes too</li>\n<li>The mathlib3 changes which claim to have been ported</li>\n</ul>\n<p>This is important because that file claims to have forward-ported something it has not!</p>",
        "id": 327419528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676225689
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_natAbs#doc\">docs4#Int.cast_natAbs</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.cast_nat_abs\">docs#int.cast_nat_abs</a> have different RHS</p>",
        "id": 327455041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676253466
    },
    {
        "content": "<p>I can fix it tomorrow unless someone fixes it today.</p>",
        "id": 327455109,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676253509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, how hard would it be for you to modify mathport to output \"dubious translations\" into a json file?</p>",
        "id": 327455112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676253513
    },
    {
        "content": "<p>What format?</p>",
        "id": 327455131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676253555
    },
    {
        "content": "<p>also it will probably be a bunch of json files, not just one</p>",
        "id": 327455200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676253614
    },
    {
        "content": "<p>Am I right that there are some false positives because of the changes in typeclasses?</p>",
        "id": 327455209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676253628
    },
    {
        "content": "<p>Although I guess it wouldn't be useful, since <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Int/Cast/Lemmas.lean#L361-L371\">the error we care about here</a> is made invisible by all the false positives in the rest of the file</p>",
        "id": 327455212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676253633
    },
    {
        "content": "<p>what makes them FPs?</p>",
        "id": 327455271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676253692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/327455200\">said</a>:</p>\n<blockquote>\n<p>also it will probably be a bunch of json files, not just one</p>\n</blockquote>\n<p>Sounds fine to me. I think any json format containing:</p>\n<ul>\n<li>mathlib3 filename</li>\n<li>mathlib3 decl name</li>\n<li>mathlib4 decl name</li>\n<li>the two types from the error message</li>\n</ul>\n<p>would do the trick. Including the mathlib3 / mathlib4 shas in the json file (if they're not already elsewhere in the mathlib3port repo) might be good too.</p>",
        "id": 327455384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676253812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/327455271\">said</a>:</p>\n<blockquote>\n<p>what makes them FPs?</p>\n</blockquote>\n<p>At a glance it looks like they're complaining about syntactically different but defeq ways of constructing TC instances</p>",
        "id": 327455446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676253866
    },
    {
        "content": "<p>Which is particularly unfortunate, because probably the most common mistake is going to be getting coercions in the wrong place because elaboration order changed, but we're pretty much guaranteed a FP on any lemma containing a coercion that's correctly ported</p>",
        "id": 327455477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676253923
    },
    {
        "content": "<p>Some sources of what I would call false positives:</p>\n<ul>\n<li><code>coe</code> vs a function;</li>\n<li><code>bit0 (bit1 0)</code> vs <code>2</code></li>\n<li>non-aligned instances (we rarely <code>#align</code> them)</li>\n</ul>",
        "id": 327455485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676253926
    },
    {
        "content": "<p>BTW, could you please change standalone <code>coe</code>s to <code>(â†‘)</code> in <code>mathport</code>?</p>",
        "id": 327455570,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676253997
    },
    {
        "content": "<p>Point 3 sounds like an argument in favor of aligning them</p>",
        "id": 327455576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676254004
    },
    {
        "content": "<p>Am I right that it's hard to generate <code>#align</code> lines in <code>mathport</code> because it's hard to predict Lean 4 names?</p>",
        "id": 327455678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676254103
    },
    {
        "content": "<p>I wouldn't bother about aligning instances before we deal with <code>coe</code> vs function.</p>",
        "id": 327455698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676254143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/327455446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/327455271\">said</a>:</p>\n<blockquote>\n<p>what makes them FPs?</p>\n</blockquote>\n<p>At a glance it looks like they're complaining about syntactically different but defeq ways of constructing TC instances</p>\n</blockquote>\n<p>No, this is an artifact of the printout. If it reports an error then they are really not defeq, but there might be a bunch of other defeq things that make it hard to see the part that isn't defeq just via diffing</p>",
        "id": 327456686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255226
    },
    {
        "content": "<p>Can the error message be adjusted to distinguish \"not defeq\" from \"declarations don't exist\", which is I assume what what the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instRingInt#doc\">docs4#Int.instRingInt</a> / Int.ring complaints are about?</p>",
        "id": 327457109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676255631
    },
    {
        "content": "<p>no, in both cases all the declarations exist</p>",
        "id": 327457331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255863
    },
    {
        "content": "<p>it wouldn't even make sense to ask for defeq if the declarations are missing</p>",
        "id": 327457346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255881
    },
    {
        "content": "<p>In most cases those declarations that you can't find were previously generated by mathport itself when processing the upstream file</p>",
        "id": 327457403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255919
    },
    {
        "content": "<p>this happens a lot for instances because instances don't get <code>#align</code> statements</p>",
        "id": 327457423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255953
    },
    {
        "content": "<p>aligning instances may silence a lot of these errors, if those instances are in fact not defeq</p>",
        "id": 327457522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676256036
    },
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib4/pull/2181\">my recent test</a> to update some out-of-sync files, I think it would be useful to have an option to sort them by import order. Here's a suggestion <a href=\"https://github.com/leanprover-community/mathlib-port-status/pull/13\">PR to mathlib-port-status</a>.</p>\n<p><a href=\"/user_uploads/3121/CdCxEHbA0v-PpNt-V_fotR_3/screenshot_port_status.png\">screenshot_port_status.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CdCxEHbA0v-PpNt-V_fotR_3/screenshot_port_status.png\" title=\"screenshot_port_status.png\"><img src=\"/user_uploads/3121/CdCxEHbA0v-PpNt-V_fotR_3/screenshot_port_status.png\"></a></div>",
        "id": 329462831,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1677080973
    },
    {
        "content": "<p>Thanks for the PR! I've left some comments.</p>",
        "id": 329475752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677083997
    },
    {
        "content": "<p>An unrelated missing feature is that we have no easy way of seeing if a resync PR already exists</p>",
        "id": 329478091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677084510
    },
    {
        "content": "<p>That's not a particularly challenging problem to solve (just crawl all the files in PRs with the \"pair\" label too), but needs time from someone.</p>",
        "id": 329478420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677084589
    },
    {
        "content": "<p>This is now live, thanks <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>  (and <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> for another change on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>)</p>",
        "id": 336454150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677236972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/329478091\">said</a>:</p>\n<blockquote>\n<p>An unrelated missing feature is that we have no easy way of seeing if a resync PR already exists</p>\n</blockquote>\n<p><del><a href=\"https://github.com/leanprover-community/mathlib-port-status/pull/15\">mathlib-port-status#15</a></del><br>\n<a href=\"https://github.com/leanprover-community/mathlib-port-status/pull/16\">mathlib-port-status#16</a></p>",
        "id": 336484329,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1677245882
    },
    {
        "content": "<p>I'm not too happy with adding more GitHub API calls to that page; I'd prefer it if we could get the API calls out of the way up front (i.e. by getting the forward-port PRs in the yaml file; or maybe with a two-phase build)</p>",
        "id": 336501789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677250103
    },
    {
        "content": "<p>(part of the reason is that API calls are a pain to test due to rate limits)</p>",
        "id": 336501871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677250123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/336501789\">said</a>:</p>\n<blockquote>\n<p>I'm not too happy with adding more GitHub API calls to that page; I'd prefer it if we could get the API calls out of the way up front (i.e. by getting the forward-port PRs in the yaml file; or maybe with a two-phase build)</p>\n</blockquote>\n<p>API rate limits are a bit of a pain indeed, having to set <code>GITHUB_TOKEN</code> etc... The two options you mentioned:</p>\n<ul>\n<li>If we added these API calls to <a href=\"https://github.com/leanprover-community/mathlib4/blob/6c36fbf691e5ea7eecc1af740de1bd0dd5373945/scripts/make_port_status.py#L117\">make_port_status.py (L. 117)</a> instead (which creates the yaml file), would that improve anything in your view?</li>\n<li>We could move these API calls together with the ones for the PR-labels on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> to a separate file next to <a href=\"https://github.com/leanprover-community/mathlib-port-status\">make_html.py</a>. And then save the output as temporary file somewhere. That way you could skip the API calls completely during testing.</li>\n</ul>\n<p>What would you prefer?</p>",
        "id": 336510520,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1677252063
    },
    {
        "content": "<p>The first option sounds easier (and was what I had planned to do)</p>",
        "id": 337906294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281152
    },
    {
        "content": "<p>Eliminating the need for make_port_status via the second option would also be nice though</p>",
        "id": 337906378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281178
    },
    {
        "content": "<p>The only slight difficulty is that to fully replace that script we need to upload to the github wiki</p>",
        "id": 337906508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281242
    },
    {
        "content": "<p>And that requires a stronger token than I'm willing to grant from my personal account</p>",
        "id": 337906541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/336484329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Out.20of.20sync.20files/near/329478091\">said</a>:</p>\n<blockquote>\n<p>An unrelated missing feature is that we have no easy way of seeing if a resync PR already exists</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib-port-status/pull/15\">mathlib-port-status#15</a></p>\n</blockquote>\n<p>Looks like you clobbered these changes by force-pushing a different branch on top of them</p>",
        "id": 338358424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677511651
    },
    {
        "content": "<p>apparently <span aria-label=\"woozy face\" class=\"emoji emoji-1f974\" role=\"img\" title=\"woozy face\">:woozy_face:</span> (<a href=\"https://github.com/leanprover-community/mathlib-port-status/pull/16\">mathlib-port-status#16</a>)</p>",
        "id": 338420186,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1677523003
    },
    {
        "content": "<p>The dashboard now shows the mathlib3port output, for the sake of forward-porting; see <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebra/star/self_adjoint\">port-status#algebra/star/self_adjoint</a> for an example</p>",
        "id": 342932339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679231110
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 342932432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679231141
    }
]