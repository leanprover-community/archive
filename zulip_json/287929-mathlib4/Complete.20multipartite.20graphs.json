[
    {
        "content": "<p>A complete bipartite graph is currently defined in mathlib as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">completeBipartiteGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Sum</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">v.isLeft</span> <span class=\"bp\">∧</span> <span class=\"n\">w.isRight</span> <span class=\"bp\">∨</span> <span class=\"n\">v.isRight</span> <span class=\"bp\">∧</span> <span class=\"n\">w.isLeft</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">v</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>A note above this reads</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">TODO</span> <span class=\"n\">also</span> <span class=\"n\">introduce</span> <span class=\"n\">complete</span> <span class=\"n\">multi</span><span class=\"bp\">-</span><span class=\"n\">partite</span> <span class=\"n\">graphs</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">vertex</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">sigma</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">an</span>\n<span class=\"n\">indexed</span> <span class=\"n\">family</span> <span class=\"n\">of</span> <span class=\"n\">vertex</span> <span class=\"n\">types</span>\n</code></pre></div>\n<p>What is a \"sigma type of an indexed family of vertex types\"? And how would this extend to a definition of complete multipartite graphs?</p>",
        "id": 386500598,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692666317
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/386500598\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get.20broken.3F\">#mathlib4 &gt; lake exe cache get broken?</a> by <span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span>.</p>",
        "id": 386500737,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692666382
    },
    {
        "content": "<p><code>Sum V W</code> is the type whose elements are either an element of <code>V</code> or an element of <code>W</code> (non-overlapping). A sigma type is a natural way to generalize this, given an indexed family of types <code>V : ι → Type _</code> (one type for each element of iota) we can form the sigma type <code>Σ i, V i</code>, this is a type whose elements are the union of those in all the <code>V i</code>s (non overlapping). So the sum type is like a sigma type indexed by <code>Fin 2</code>. You can think of elements of the sigma type as dependent pairs <code>(i, v)</code> where <code>i : ι</code> and <code>v : V i</code>.</p>",
        "id": 386583213,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692702518
    },
    {
        "content": "<p>Yeah, that's exactly what I had in mind when I wrote that TODO.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">completeMultipartiteGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 386594843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692706694
    },
    {
        "content": "<p>The definition of <code>Adj</code> should be <code>Adj v w := v.1 ≠ w.1</code> (compare this to <code>completeBipartiteGraph</code>, where it's just checking that the sides each vertex is from are not equal)</p>",
        "id": 386596678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692707321
    },
    {
        "content": "<p>Can this be written as a preimage of <code>Sigma.fst</code> on the complete graph?</p>",
        "id": 386767643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692770660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.comap#doc\">docs#SimpleGraph.comap</a> ?</p>",
        "id": 386767653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692770669
    },
    {
        "content": "<p>Yeah, that looks like it would work</p>",
        "id": 386767723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692770716
    },
    {
        "content": "<p>I guess we could have defined the bipartite case as the pullback of <code>Sum.map (fun _ =&gt; ()) (fun _ =&gt; ())</code> or similar</p>",
        "id": 386768005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692770858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/386767643\">said</a>:</p>\n<blockquote>\n<p>Can this be written as a preimage of <code>Sigma.fst</code> on the complete graph?</p>\n</blockquote>\n<p>Yes. One reason is that graph colorings are the same thing as graph homomorphisms to a complete graph, and <code>completeMultipartiteGraph</code> is the maximal graph with the given vertex colors. <code>Sigma.fst</code> gets the vertex color so to speak.</p>\n<p>I've been going back and forth on this. On one hand it's nice having concrete graphs to show how you can define a concrete SimpleGraph, but maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">completeMultipartiteGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">comap</span> <span class=\"n\">Sigma.fst</span> <span class=\"bp\">\\</span><span class=\"n\">top</span>\n</code></pre></div>\n<p>really is a better definition (note: I haven't tested this in Lean). <code>simp</code> is probably able to see that <code>(completeMultipartiteGraph V).Adj v w = v.1 ≠ w.1</code> without any help.</p>",
        "id": 386853775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692792917
    },
    {
        "content": "<p>That should be trivially true by definition, so you could always add the lemma</p>",
        "id": 386853878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692792956
    },
    {
        "content": "<p>I assume you're less keen on my suggested re-definition of <code>bipartite</code>?</p>",
        "id": 386854006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692792993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/386768005\">said</a>:</p>\n<blockquote>\n<p>I guess we could have defined the bipartite case as the pullback of <code>Sum.map (fun _ =&gt; ()) (fun _ =&gt; ())</code> or similar</p>\n</blockquote>\n<p>I'm not sure where you're going with that, but <code>comap Sum.isLeft \\top</code> with <code>\\top : SimpleGraph Bool</code> should work.</p>",
        "id": 386854135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692793042
    },
    {
        "content": "<p>The idea was to use <code>Sum Unit Unit</code> in place of <code>Bool</code> because it avoids breaking symmetry</p>",
        "id": 386854232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692793079
    },
    {
        "content": "<p>It wasn't a very serious idea though, unlike the multipartite suggestion which I genuinely believe is the right definition</p>",
        "id": 386854363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692793120
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6762\">#6762</a></p>",
        "id": 386973671,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692841490
    },
    {
        "content": "<p>How could we define complete bipartite graphs as a special case of complete multipartite graphs, using the <code>comap</code> definition above?</p>",
        "id": 387001773,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692855908
    },
    {
        "content": "<p>I note that in the <em>present</em> complete bipartite graph definition the types of the two sides can reside in different universes, whereas the indexed family requires all vertex types to be in the <em>same</em> universe</p>",
        "id": 387002480,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692856354
    },
    {
        "content": "<p>There was a <a href=\"https://github.com/leanprover-community/mathlib4/pull/6723#discussion_r1303347358\">similar discussion</a> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6723\">#6723</a>.  The conclusion there was it was probably not worth the effort.</p>\n<p>This conclusion may be very case-dependent though.</p>",
        "id": 387002981,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692856702
    },
    {
        "content": "<p>[or maybe not: <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> just posted something new!]</p>",
        "id": 387003080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692856787
    },
    {
        "content": "<p>Btw, there's a very cute definition of the Turan graph as a <code>SimpleGraph (Fin n)</code></p>",
        "id": 387083563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692886115
    },
    {
        "content": "<p>And I believe it is superior to the description as a complete multipartite graph</p>",
        "id": 387083709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692886146
    },
    {
        "content": "<p>You mean connecting two elements of <code>Fin n</code> iff they have different remainders mod k?</p>",
        "id": 387118694,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1692894185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> OK, I want to state Turán's theorem, but the statement here doesn't typecheck because <code>failed to synthesize instance  Fintype ↑(edgeSet H)</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Clique</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Extr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SimpleGraph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">turanGraph</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">Adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">%</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span> <span class=\"bp\">%</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">turan</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsMaxOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H.edgeFinset.card</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"n\">H.CliqueFree</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">turanGraph</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SimpleGraph</span>\n</code></pre></div>",
        "id": 387202905,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692935896
    },
    {
        "content": "<p>Can <code>Fintype ↑(edgeSet H)</code> where <code>H : SimpleGraph V</code> actually be proven from <code>Fintype V</code> &amp; <code>DecidableEq V</code> alone? I believe it is so but no idea how to proceed</p>",
        "id": 387203228,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692936073
    },
    {
        "content": "<p>If I had <code>[DecidableRel H.Adj]</code> this would be easy but what if I don't have it?</p>",
        "id": 387204663,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692937022
    },
    {
        "content": "<p>You definitely need that assumption, just add it</p>",
        "id": 387214729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692943546
    },
    {
        "content": "<p>If you don't have it then there's no way to ask \"is there an edge between these vertices\"</p>",
        "id": 387214905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692943586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Yes, but where do I put that assumption wrt <code>(fun H =&gt; H.edgeFinset.card)</code>?</p>",
        "id": 387215263,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692943748
    },
    {
        "content": "<p><code>H</code> in the inline <code>fun</code> is a totally local variable!</p>",
        "id": 387215489,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692943908
    },
    {
        "content": "<p>I guess you could use <code>fun H : Σ H, DecidableRel H.Adj =&gt; letI := H.2; H.1.edgeFinset.card</code></p>",
        "id": 387215496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692943914
    },
    {
        "content": "<p>I'm not familiar with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsMaxOn#doc\">docs#IsMaxOn</a>, maybe there's a nicer way</p>",
        "id": 387215564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692943941
    },
    {
        "content": "<p>This problem would go away if we had separate <code>SimpleGraph</code> and <code>FiniteSimpleGraph</code> types to mirror <code>Set</code> and <code>Finset</code>; but that obviously entails lots of duplication</p>",
        "id": 387216042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692944263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/387215496\">said</a>:</p>\n<blockquote>\n<p>I guess you could use <code>fun H : {H // DecidableRel H.Adj } =&gt; letI := H.2; H.1.edgeFinset.card</code></p>\n</blockquote>\n<p>Doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">turan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsMaxOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">K.Adj</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">H.2</span>\n      <span class=\"n\">H.1.edgeFinset.card</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"n\">H.CliqueFree</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">turanGraph</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><code>DecidableRel K.Adj</code> is a <code>Type</code>, not a <code>Prop</code></p>",
        "id": 387216654,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692944575
    },
    {
        "content": "<p>There's also no such thing as <code>IsDecidable</code></p>",
        "id": 387216860,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692944688
    },
    {
        "content": "<p>Oh good point, then it should be a sigma type (edited above)</p>",
        "id": 387217530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/387203228\">said</a>:</p>\n<blockquote>\n<p>Can <code>Fintype ↑(edgeSet H)</code> where <code>H : SimpleGraph V</code> actually be proven from <code>Fintype V</code> &amp; <code>DecidableEq V</code> alone? I believe it is so but no idea how to proceed</p>\n</blockquote>\n<p>My reasoning is this: even if <code>H.Adj</code> is <em>not</em> decidable it is still a subgraph of <code>⊤ : SimpleGraph V</code>. Since <code>Fintype V</code>, <code>⊤ : SimpleGraph V</code> has finitely many edges, so <code>H</code> must also have finitely many edges</p>",
        "id": 387217536,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692945046
    },
    {
        "content": "<p>That's not enough, Fintype requires you to know precisely what's in Finset.univ</p>",
        "id": 387217619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945106
    },
    {
        "content": "<p>Isn't there a prop-valued version of finiteness by now??</p>",
        "id": 387217940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692945254
    },
    {
        "content": "<p>Yes, but you need to replace Finset.card as well</p>",
        "id": 387218502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945620
    },
    {
        "content": "<p>This works, but…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">turan</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsMaxOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">DecidableRel</span> <span class=\"n\">H.Adj</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">H.2</span><span class=\"bp\">;</span> <span class=\"n\">H.1.edgeFinset.card</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"n\">H.1.CliqueFree</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">Sigma.mk</span> <span class=\"n\">G</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›))</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">turanGraph</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 387218562,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692945673
    },
    {
        "content": "<p>Isn't ≃g data? So that should be a <code>def</code>.</p>",
        "id": 387218598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945708
    },
    {
        "content": "<p>#lint will tell you</p>",
        "id": 387218609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945716
    },
    {
        "content": "<p>As Scott alludes to, you might have a better time with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard#doc\">docs#Set.ncard</a></p>",
        "id": 387218694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945761
    },
    {
        "content": "<p>.... Which has a very weird type in the docs</p>",
        "id": 387218755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692945810
    },
    {
        "content": "<p>Somewhat better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isoTuranGraph</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">G.Adj</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsMaxOn</span> <span class=\"o\">(</span><span class=\"n\">Set.ncard</span> <span class=\"bp\">∘</span> <span class=\"n\">edgeSet</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"bp\">|</span> <span class=\"n\">H.CliqueFree</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">turanGraph</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 387219739,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692946408
    },
    {
        "content": "<p>This has to be non-computable, right? If G has any symmetry (which it must since it's isomorphic to turans graph) then there's no way to pick the isomorphism</p>",
        "id": 387220425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692946772
    },
    {
        "content": "<p>It probably will be noncomputable – I haven't written out the proof yet</p>",
        "id": 387220708,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1692946905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20multipartite.20graphs/near/387001773\">said</a>:</p>\n<blockquote>\n<p>How could we define complete bipartite graphs as a special case of complete multipartite graphs, using the <code>comap</code> definition above?</p>\n</blockquote>\n<p>I wouldn't make them be a special case. If we wanted, we could redefine bipartite graph to be <code>comap Sum.isLeft (\\top : SimpleGraph Bool)</code>, or use Eric's <code>comap (Sum.map (fun _ =&gt; ()) (fun _ =&gt; ()) (\\top : SimpleGraph (Sum Unit Unit))</code> and bask in the symmetry.</p>",
        "id": 387267618,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692966698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, just so you know, I'm porting <span class=\"user-mention\" data-user-id=\"506168\">@John Talbot</span>'s proof of Turan's theorem over at <a href=\"https://github.com/YaelDillies/LeanTuran\">https://github.com/YaelDillies/LeanTuran</a></p>",
        "id": 387410026,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693044063
    },
    {
        "content": "<p>Füredi's proof, which is what Talbot formalized IIRC, is really nice to have because it gives stability (and even supersaturated stability) for free.</p>",
        "id": 387520252,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1693134446
    },
    {
        "content": "<p>That's my reasoning as well.</p>",
        "id": 387521294,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693135287
    }
]