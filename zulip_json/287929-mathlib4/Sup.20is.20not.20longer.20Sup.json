[
    {
        "content": "<p>What happened to <code>Sup</code>? In Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"c1\">-- ℝ</span>\n</code></pre></div>\n<p>In Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"c1\">-- Type</span>\n</code></pre></div>",
        "id": 390559210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537280
    },
    {
        "content": "<p>Oh <code>Sup</code> is now the typeclass!</p>",
        "id": 390559544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537398
    },
    {
        "content": "<p>But mathport clearly doesn't know about this.</p>",
        "id": 390559621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537410
    },
    {
        "content": "<p>Although there is a <code>#align has_Sup.Sup SupSet.sSup</code> line <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 390560079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537574
    },
    {
        "content": "<p>Mathport doesn't know that <code>Sup</code> is <code>has_Sup.Sup</code>, I think</p>",
        "id": 390560115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694537589
    },
    {
        "content": "<p>I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Class for the `sSup` operator -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">SupSet</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sSup</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">has_Sup</span> <span class=\"n\">SupSet</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">has_Sup.Sup</span> <span class=\"n\">SupSet.sSup</span>\n</code></pre></div>",
        "id": 390560542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537756
    },
    {
        "content": "<p>I think the <code>export</code> command in Lean3 is too hard for mathport to accurately understand</p>",
        "id": 390560838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694537863
    },
    {
        "content": "<p>I guess improving mathport is no longer worth the trouble.</p>",
        "id": 390561041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537936
    },
    {
        "content": "<p>mathport is not EOL yet</p>",
        "id": 390562221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538387
    },
    {
        "content": "<p>but namespaces / name resolution has always been hard for mathport</p>",
        "id": 390562273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538417
    },
    {
        "content": "<p>What about the fact that it produced </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ρ_eq_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">projI_eq_one</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>that needs to be fixed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ρ_eq_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ρ</span><span class=\"o\">,</span> <span class=\"n\">projI_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 390565511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694539711
    },
    {
        "content": "<p>keep in mind that most mathport formatting bugs are actually formatter formatting bugs and occur just as much to pretty printed exprs and any future code-writing tools like source formatters or code actions</p>",
        "id": 390565881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694539845
    },
    {
        "content": "<p>yes I am aware of this issue, I wrote the code with the bug in it and there is a <a href=\"https://github.com/leanprover/lean4/pull/1872#issue-1459220298\">long comment</a> in the lean core PR explaining why it's hard to do better</p>",
        "id": 390566008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694539917
    },
    {
        "content": "<p>(in short, when deciding whether to use one line or a new line it doesn't have the context to know whether it will overflow the line)</p>",
        "id": 390566128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694539964
    },
    {
        "content": "<p>so it uses the heuristic that if you used semicolons between every tactic then you want it on one line</p>",
        "id": 390566248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694540007
    }
]