[
    {
        "content": "<p>There's a bunch of lemmas in <a href=\"https://tqft.net/mathlib4files/Mathlib/LinearAlgebra/InvariantBasisNumber\">file#Mathlib/LinearAlgebra/InvariantBasisNumber</a> which are dropped in the root namespace even though they're very generic, eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=card_le_of_injective#doc\">docs#card_le_of_injective</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=card_le_of_surjective#doc\">docs#card_le_of_surjective</a>. cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> who wrote some of the incriminated lemmas two years ago.</p>",
        "id": 392067073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695198471
    },
    {
        "content": "<p>Please don't hesitate to rename them. :-)</p>",
        "id": 392068327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198895
    },
    {
        "content": "<p>I found some more <code>_root_</code> names in <a href=\"https://tqft.net/mathlib4files/Mathlib/Data/Complex/Module\">file#Mathlib/Data/Complex/Module</a>, specifically <code>imaginaryPart</code> and <code>realPart</code>. What namespace should these be in? (I'm adapting to <a href=\"https://github.com/leanprover/lean4/pull/2738\">lean4#2738</a>)</p>",
        "id": 398154117,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698094114
    },
    {
        "content": "<p>Oh, actually, there are a <em>lot</em> of <code>_root_</code> names nearby and in other files (e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=skewAdjoint#doc\">docs#skewAdjoint</a>). Namespacing these well probably takes library knowledge that I don't have yet!</p>",
        "id": 398154879,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698094399
    },
    {
        "content": "<p>Do we ever actually want something in <code>_root_</code>? If not (or if not most of the time), should we lint against it?</p>",
        "id": 398155247,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698094578
    },
    {
        "content": "<p>I personally don't think these names are too problematic. Certainly we <em>sometimes</em> want things in the root namespace, but arguably we have too much there currently.</p>",
        "id": 398155834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698094846
    },
    {
        "content": "<p>Hmm, do you mean that you think they're not problematic enough to lint against, but that we do have too many things in <code>_root_</code> nonetheless? Or that these specific names are not too problematic?</p>",
        "id": 398159600,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698097064
    },
    {
        "content": "<p>Both.</p>",
        "id": 398162358,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698098802
    },
    {
        "content": "<p>Maybe the linter could require us to write <code>_root_.Foo</code> if we want <code>Foo</code> to really be in the root namespace</p>",
        "id": 398163010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698099224
    },
    {
        "content": "<p>But I think that would make things less readable in a lot of places</p>",
        "id": 398163020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698099239
    },
    {
        "content": "<p>I suppose it depends on how many places we actually want that to be!</p>",
        "id": 398163163,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698099317
    },
    {
        "content": "<p>A good compromise might be to allow <code>structure SomeRootType</code> but require <code>def _root_.someRootDef</code></p>",
        "id": 398163312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698099402
    },
    {
        "content": "<p>I think <code>theorem</code>s might need to be allowed in the root namespace for free</p>",
        "id": 398163339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698099419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/_root_.20names/near/398162358\">said</a>:</p>\n<blockquote>\n<p>Both.</p>\n</blockquote>\n<p>Btw, the motivation here is that if we have a local hypothesis with the same name as a constant in the root namespace (including the theorem we're working on), then that hypothesis is the preferred interpretation. To refer to the constant instead, we then need to write e.g. <code>_root_.imaginaryPart</code>. (This is what we need to do at one point in the adaptation I mentioned.)</p>",
        "id": 398163401,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698099469
    },
    {
        "content": "<p>Basically all of the cases were of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">SpecificVersion.foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- observe: `this : Nat`</span>\n</code></pre></div>\n<p><code>foo</code> should be the <code>foo</code> we declared earlier, but instead is <code>SpecificVersion.foo</code>.</p>\n<p>(Message edited to remove unnecessary context.)</p>",
        "id": 398163612,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698099607
    },
    {
        "content": "<p>This means we have to write <code>_root_.foo</code> in these contexts, I think. Afaik there isn't another way to refer to the earlier <code>foo</code>.</p>",
        "id": 398164094,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698099914
    },
    {
        "content": "<p><code>nonrec theorem</code> should work there</p>",
        "id": 398164124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698099941
    },
    {
        "content": "<p>Can you state exactly which declarations you were needing to adapt around? It wasn't <code>realPart</code> and <code>imaginaryPart</code>, was it?</p>",
        "id": 398164198,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698099975
    },
    {
        "content": "<p>There were several I needed to adapt around, but only <code>imaginaryPart</code> required the change to <code>_root_.imaginaryPart</code>. The rest had a namespace I could use.</p>",
        "id": 398164253,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/_root_.20names/near/398164124\">said</a>:</p>\n<blockquote>\n<p><code>nonrec theorem</code> should work there</p>\n</blockquote>\n<p>True—I suppose it's trading one extra invocation for another, though.</p>",
        "id": 398164348,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100058
    },
    {
        "content": "<p>This is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7872\">#7872</a>, btw. The lemma requiring this was <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSelfAdjoint.imaginaryPart#doc\">docs#IsSelfAdjoint.imaginaryPart</a>.</p>",
        "id": 398164461,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100121
    },
    {
        "content": "<p>I think <code>nonrec</code> is probably the preferred spelling here, rather than putting <code>_root_</code> qualifiers everywhere</p>",
        "id": 398164539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100183
    },
    {
        "content": "<p>Aha, I just looked at the diff. This seems pretty minimal to me. Eric, there was only one <code>_root_</code> qualifier.</p>",
        "id": 398164614,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698100206
    },
    {
        "content": "<p>Personally, I think the status quo here is fine, but maybe other will disagree.</p>",
        "id": 398164672,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698100251
    },
    {
        "content": "<p><del>That patch looks like a fairly clear argument to me that <code>nonrec</code> should be the default for <code>theorem</code></del></p>",
        "id": 398164677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100256
    },
    {
        "content": "<p>Oh, looking again it's mostly <code>instance</code></p>",
        "id": 398164711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100292
    },
    {
        "content": "<p>I do think it is actually good to require a namespace to specify that you're referring to a constant in the environment instead of a local declaration: it makes explicit that you're not referring to the more immediate local declaration, which imo is a tad better for readability.</p>",
        "id": 398164878,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100408
    },
    {
        "content": "<p>But yeah, it's certainly not a major issue. :)</p>",
        "id": 398165003,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100466
    },
    {
        "content": "<p>It's extremely rare to refer to the local definition in a tactic block, so I'm surprised its the default</p>",
        "id": 398165123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100528
    },
    {
        "content": "<p>To be clear, by local declaration I mean a <code>LocalDecl</code>, i.e. a hypothesis, of which the definition we're constructing is just one. So I suppose the thing is \"should we really introduce it as a hypothesis by default\", i.e. should theorems be <code>rec</code> by default.</p>",
        "id": 398165473,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100688
    },
    {
        "content": "<p>(I.e., if you do deliberately introduce a hypothesis named <code>imaginaryPart</code>, you do probably want to prefer that over <code>_root_.imaginaryPart</code>. It's just that hypotheses named like theorems are pretty rare.)</p>",
        "id": 398165682,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698100790
    },
    {
        "content": "<p>Yes, exactly; the \"local hypothesis takes precedence\" behavior is sensible, the \"include the current theorem as a hypothesis\" not so much, especially since I think it's very rare that this actually works</p>",
        "id": 398165992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100924
    },
    {
        "content": "<p>I suppose we could test it out on a branch just by making <code>theorem</code> a macro for <code>nonrec theorem</code> at some early point in mathlib, then seeing how many things break... <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 398166146,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698101018
    },
    {
        "content": "<p>More generally it would be neat to make the default behavior changeable by a <code>set_option</code> (if it isn't one already, I haven't actually checked).</p>",
        "id": 398166280,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698101082
    },
    {
        "content": "<p>That will just break all theorems by induction using pattern matching, right?</p>",
        "id": 398166922,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698101429
    },
    {
        "content": "<p>Oh, right, there are probably a lot of those.</p>",
        "id": 398167836,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698101930
    },
    {
        "content": "<p>I mean, I will note that namespaces are nice even just for organization—they immediately tell you what a definition is about.</p>\n<p>Am I right in thinking that the point of using <code>root</code> is to avoid excessive <code>open</code>s? Is there a way to have theorems in a namespace \"effectively\" in <code>_root_</code> while still being namespaced? E.g. could something like <code>export_theorems namespace Foo</code> be made to work (or is there something like that already)?</p>",
        "id": 398168388,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698102182
    },
    {
        "content": "<p>My thought is that this is a sufficiently rare issue that we don't need to worry about it. Either we provide the namespace explicitly when calling the decl, or we mark as <code>nonrec</code>.</p>",
        "id": 398168460,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698102238
    },
    {
        "content": "<p>Thomas, I claim that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=imaginaryPart#doc\">docs#imaginaryPart</a> tells you everything you want to know, without any namespace.</p>",
        "id": 398168590,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698102308
    },
    {
        "content": "<p>In contrast, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.im#doc\">docs#Complex.im</a> is specialized to complex numbers and so goes in the namespace.</p>",
        "id": 398168742,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698102405
    },
    {
        "content": "<p>Ok—is that the general organization, then? Defs go in <code>_root_</code> when they're as general as possible?</p>",
        "id": 398169515,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698102907
    },
    {
        "content": "<p>(Like, outside of this issue, which I think we've established is small enough to not warrant action.)</p>",
        "id": 398169549,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698102939
    },
    {
        "content": "<p>It's not the only consideration. Of course potential naming conflicts (inside or outside mathlib) are another. Certainly we want to avoid polluting the root namespace, and, as I mentioned before, we could probably be better about it overall.</p>",
        "id": 398169916,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698103187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/_root_.20names/near/398168590\">said</a>:</p>\n<blockquote>\n<p>Thomas, I claim that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=imaginaryPart#doc\">docs#imaginaryPart</a> tells you everything you want to know, without any namespace.<br>\nIn contrast, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.im#doc\">docs#Complex.im</a> is specialized to complex numbers and so goes in the namespace.</p>\n</blockquote>\n<p>Up until I read these lines, I was convinced that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=imaginaryPart#doc\">docs#imaginaryPart</a> meant what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.im#doc\">docs#Complex.im</a> means...  <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 398206394,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698125130
    }
]