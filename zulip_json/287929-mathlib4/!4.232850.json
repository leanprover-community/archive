[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2850\">!4#2850</a> there are two remaining questions I have with this port.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">taylor_coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hasseDeriv</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">lcoeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">leval</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hasseDeriv</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"kd\">by</span>\n    <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">clear</span><span class=\"bp\">!</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>In Lean 3 the tactic state after <code>ext i</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⇑</span><span class=\"o\">(((</span><span class=\"n\">lcoeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(((</span><span class=\"n\">leval</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hasse_deriv</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>but in Lean 4 the <code>1</code>s are inaccessible variables instead, which causes the rest of the proof to fail. What can I do to introduce the <code>1</code>s?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">LinearMap.comp</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.comp</span> <span class=\"o\">(</span><span class=\"n\">lcoeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">LinearMap.comp</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.comp</span> <span class=\"o\">(</span><span class=\"n\">leval</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hasseDeriv</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n</code></pre></div>",
        "id": 341536195,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678730204
    },
    {
        "content": "<p>And in here, <code>apply_fun</code> fails for being a dependent function even though intuitively it should go through. How can I apply this dependent function to <code>h</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">taylor_injective</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">taylor_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comp</span><span class=\"o\">,</span> <span class=\"n\">X_comp</span><span class=\"o\">,</span> <span class=\"n\">C_comp</span><span class=\"o\">,</span> <span class=\"n\">C_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_add_cancel_right</span><span class=\"o\">,</span>\n    <span class=\"n\">comp_X</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.taylor_injective</span> <span class=\"n\">Polynomial.taylor_injective</span>\n</code></pre></div>",
        "id": 341536555,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678730299
    },
    {
        "content": "<p>It sounds like an <code>ext</code> lemma is being missed</p>",
        "id": 341537217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730482
    },
    {
        "content": "<p>In Lean 3 you can write <code>ext?</code> to find out which ones are applied</p>",
        "id": 341537241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730489
    },
    {
        "content": "<p>I think it's something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.ext_ring\">docs#linear_map.ext_ring</a></p>",
        "id": 341537329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730515
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.ext_ring#doc\">docs4#LinearMap.ext_ring</a></p>",
        "id": 341537428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730528
    },
    {
        "content": "<p>The priority needs raising on that ext lemma, since now the order is by default random instead of by default exactly what we want</p>",
        "id": 341537591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730576
    },
    {
        "content": "<p>yeah, <code>apply Polynomial.lhom_ext'; rintro i; apply LinearMap.ext_ring</code> in place of <code>ext i</code> works</p>",
        "id": 341537862,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678730646
    },
    {
        "content": "<p>Well don't just substitute that, please fix the priority. Then <code>ext</code> should just work</p>",
        "id": 341537939,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678730670
    },
    {
        "content": "<p>how can I get an idea for the right priority to use?</p>",
        "id": 341538193,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678730742
    },
    {
        "content": "<p>I think the default priority is 1000, so would setting it to 1100 be good?</p>",
        "id": 341538374,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678730781
    },
    {
        "content": "<p>I think the default is 1000, so I've just been setting it at 1001 (or 1002 etc. if necessary).</p>",
        "id": 341538390,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678730786
    },
    {
        "content": "<p>I'm not too picky, so long as we're going about this the right way.</p>",
        "id": 341538516,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678730823
    },
    {
        "content": "<p>I think <code>priority := high</code> is usually the right choice?</p>",
        "id": 341540525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678731411
    },
    {
        "content": "<blockquote>\n<p>I'm not too picky, so long as we're going about this the right way.</p>\n</blockquote>\n<p>Arguably the right way was the Lean3 behavior...</p>",
        "id": 341540590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678731436
    },
    {
        "content": "<p>But that's not available?</p>",
        "id": 341540875,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678731522
    },
    {
        "content": "<p><code>priority := high</code> is, right? But yes, the Lean3 behavior (currently) is not</p>",
        "id": 341540955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678731549
    },
    {
        "content": "<p>I just set the priority for the offending lemma to 1001. Let's see if it works</p>",
        "id": 341541012,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678731565
    },
    {
        "content": "<p>Yes, Eric, that's what I meant.</p>",
        "id": 341541112,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678731601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232850/near/341541012\">said</a>:</p>\n<blockquote>\n<p>I just set the priority for the offending lemma to 1001. Let's see if it works</p>\n</blockquote>\n<p><code>@[ext high]</code> is preferred I think</p>",
        "id": 341541393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678731662
    },
    {
        "content": "<p>changed again to <code>@[ext high]</code>. And what about the dependent function problem later on in the file?</p>",
        "id": 341542231,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678731904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>@[ext high]</code> fails in <code>HasseDeriv.lean</code></p>",
        "id": 341544116,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678732408
    },
    {
        "content": "<p>I would guess that's because someone changed the proof when it stopped working and didn't track down the cause</p>",
        "id": 341544186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678732438
    },
    {
        "content": "<p>Have a look at the diff from mathport in the PR that ported HasseDeriv</p>",
        "id": 341544276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678732455
    },
    {
        "content": "<p>Yeah, tracking down the offending declaration in HasseDeriv revealed that it could be shortened a bit with the new priority. casavaca rewrote the proof of <code>hasseDeriv_comp</code> in an excessively long-winded way</p>",
        "id": 341546425,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678733099
    },
    {
        "content": "<p>The <code>apply_fun (taylor (-r) ·) at h</code> problem remains</p>",
        "id": 341546636,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678733159
    },
    {
        "content": "<p>Can you make a standalone PR that fixes HasseDeriv and the ext priority?</p>",
        "id": 341587302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678747081
    },
    {
        "content": "<p>That way we can prevent other porting PRs running into the same problem</p>",
        "id": 341587366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678747098
    },
    {
        "content": "<p><code>ext_ring_op</code> should get the same treatment</p>",
        "id": 341587497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678747158
    },
    {
        "content": "<blockquote>\n<p>casavaca rewrote the proof of hasseDeriv_comp in an excessively long-winded way</p>\n</blockquote>\n<p>It's still an improvement. The old proof didn't even get <code>field_simp</code> to work. (<a href=\"https://github.com/leanprover-community/mathlib3port/blob/e3b6a9dcca4b55978e0f5517c4cb0d854115e00f/Mathbin/Data/Polynomial/HasseDeriv.lean#L260\">https://github.com/leanprover-community/mathlib3port/blob/e3b6a9dcca4b55978e0f5517c4cb0d854115e00f/Mathbin/Data/Polynomial/HasseDeriv.lean#L260</a>) It's true that it can be simplified. But that's not very important.</p>",
        "id": 341600930,
        "sender_full_name": "Casavaca",
        "timestamp": 1678754976
    },
    {
        "content": "<p>What's important is that we re-enable the ext lemma and adjust the proofs that are broken by it. We should prioritize doing that over the rest of <a href=\"https://github.com/leanprover-community/mathlib4/pull/2850\">!4#2850</a></p>",
        "id": 341601089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678755051
    },
    {
        "content": "<p>That's true. I did notice that <code>ext</code> didn't work but I didn't know what to do with it. Now I learned something new.</p>",
        "id": 341601886,
        "sender_full_name": "Casavaca",
        "timestamp": 1678755488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232850/near/341587302\">said</a>:</p>\n<blockquote>\n<p>Can you make a standalone PR that fixes HasseDeriv and the ext priority?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2859\">!4#2859</a></p>",
        "id": 341611011,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678761914
    },
    {
        "content": "<p>the backend changes made in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2850\">!4#2850</a> turned out to be enough</p>",
        "id": 341613436,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678763809
    },
    {
        "content": "<p>now that <a href=\"https://github.com/leanprover-community/mathlib4/pull/2859\">!4#2859</a> is merged how do I solve the last error?</p>",
        "id": 341813656,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678804806
    },
    {
        "content": "<p>I pushed a fix</p>",
        "id": 341824435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678806835
    },
    {
        "content": "<p>Though it's not a particularly nice one</p>",
        "id": 341825093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678806962
    },
    {
        "content": "<p>This seems like a bug in <code>apply_fun</code>, it seems too keen to dismiss <code>(a : R[X]) → (fun x =&gt; R[X]) a</code> as a dependent function, when an eta expansion gives <code>R[X] → R[X]</code> which is clearly non-dependent</p>",
        "id": 341826161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678807152
    },
    {
        "content": "<p>It works by \"hiding\" the dependent variable <code>r</code> inside a coercion, right?</p>",
        "id": 341826241,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678807168
    },
    {
        "content": "<p>I have no idea why that works, it leaves a horrible metavariable in the goal state.</p>",
        "id": 341826296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678807179
    },
    {
        "content": "<p>I pushed a clearer fix that uses <code>replace h := FunLike.congr_arg (taylor (-r)) h</code> instead</p>",
        "id": 341826335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678807187
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 341826570,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678807226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232850/near/341826161\">said</a>:</p>\n<blockquote>\n<p>This seems like a bug in <code>apply_fun</code>, it seems too keen to dismiss <code>(a : R[X]) → (fun x =&gt; R[X]) a</code> as a dependent function, when an eta expansion gives <code>R[X] → R[X]</code> which is clearly non-dependent</p>\n</blockquote>\n<p>If there's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of this I can take a look; I think I wrote the dependent-function-wrangling in <code>apply_fun</code>.</p>",
        "id": 341926771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678836522
    },
    {
        "content": "<p>Here you go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Group</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341930936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678838938
    },
    {
        "content": "<p>I think any <code>FunLike</code> object would trigger it, if you want to remove the need for groups too</p>",
        "id": 341930973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678838961
    },
    {
        "content": "<p>Here's a mwe with only the ApplyFun import:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341932784,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678839914
    },
    {
        "content": "<p>I'm wondering if it would be easier for ApplyFun to get Lean to elaborate <code>f a = f b</code> and then prove it using <code>congr!</code></p>",
        "id": 341932880,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678839960
    },
    {
        "content": "<p>It's a bit ugly (since it sort of reproduces what's already in <code>mkAppN</code>, but those functions are private and not exactly what we'd want), but I got <code>apply_fun</code> to work with anything with a <code>CoeFun</code> instance. Dependent functions too (I wanted to potentially be able to do <code>apply_fun Fintype.card at h</code>). <a href=\"https://github.com/leanprover-community/mathlib4/pull/2890\">mathlib4#2890</a> is a WIP -- I haven't looked beyond <code>applyFunHyp</code>, though maybe there's nothing to be done for <code>applyFunTarget</code>.</p>\n<p>If you want to work on it or take it over, feel free <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 341945684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678847301
    },
    {
        "content": "<p>Looks very nice!</p>",
        "id": 341946191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678847618
    },
    {
        "content": "<p>The fixes to <code>apply_fun</code> manage to address the <code>apply_fun taylor (-r) at h</code> problem: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2925\">mathlib4#2925</a></p>\n<p>The tactic now has some extra powers. If you have <code>h : a = b</code> and <code>f a</code> and <code>f b</code> are both expressions that can be elaborated (using the whole elaboration algorithm, including coercions), then it <em>should</em> succeed so long as <code>f a</code> and <code>f b</code> have the same type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- now h : f a = f b with coercions on f, a, and b!</span>\n</code></pre></div>\n<p>Here's example that almost works but could. If I were to switch <code>mvar.mvarId!.congrN</code> to <code>mvar.mvarId!.congrN!</code> in <code>applyFunHyp</code> then this works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- now h : Fintype.card α = Fintype.card β</span>\n</code></pre></div>\n<p>(there are typeclass arguments after the types in <code>Fintype.card</code>). The reason it doesn't work right now is that <code>mvar.mvarId!.congrN</code> doesn't know about <code>Subsingleton.elim</code>.</p>",
        "id": 342286860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678967315
    },
    {
        "content": "<p>So let's do that too?</p>",
        "id": 342438605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679007855
    }
]