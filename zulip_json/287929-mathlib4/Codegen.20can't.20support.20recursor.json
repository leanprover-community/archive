[
    {
        "content": "<p>This works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quaternion_group_zero_equiv_dihedral_group_zero</span> <span class=\"o\">:</span> <span class=\"n\">quaternion_group</span> <span class=\"mi\">0</span> <span class=\"bp\">≃*</span> <span class=\"n\">dihedral_group</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">quaternion_group.rec_on</span> <span class=\"n\">i</span> <span class=\"n\">dihedral_group.r</span> <span class=\"n\">dihedral_group.sr</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">dihedral_group.r</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">j</span>\n                <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">dihedral_group.sr</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xa</span> <span class=\"n\">j</span>\n                <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>For this mathport produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quaternionGroupZeroEquivDihedralGroupZero</span> <span class=\"o\">:</span> <span class=\"n\">QuaternionGroup</span> <span class=\"mi\">0</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">QuaternionGroup.recOn</span> <span class=\"n\">i</span> <span class=\"n\">DihedralGroup.r</span> <span class=\"n\">DihedralGroup.sr</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">DihedralGroup.r</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">j</span>\n    <span class=\"bp\">|</span> <span class=\"n\">DihedralGroup.sr</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xa</span> <span class=\"n\">j</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"bp\">·</span> <span class=\"n\">dsimp</span>\n        <span class=\"n\">simp</span>\n</code></pre></div>\n<p>To which Lean Infoview responds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generator</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">support</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">QuaternionGroup.recOn'</span> <span class=\"n\">yet</span><span class=\"o\">,</span>\n<span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">match</span> <span class=\"bp\">...</span> <span class=\"k\">with</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">structural</span> <span class=\"n\">recursion.</span>\n</code></pre></div>\n<p>for the <code>toFun</code> so I should do something syntactically similar to the <code>invFun</code>, right?</p>\n<p>Note that <code>.recOn</code> is used in 146 fully ported files so I don't know why it is rejecting it in this case.</p>",
        "id": 361666002,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685236323
    },
    {
        "content": "<p>It seems <a href=\"https://github.com/leanprover-community/mathlib4/pull/4097\">!4#4097</a> is still awaiting-review, it will fix all problems of this form</p>",
        "id": 361666185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685236457
    },
    {
        "content": "<p>if you want a quick patch, put <code>noncomputable</code> on the def and leave a porting note</p>",
        "id": 361666263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685236542
    },
    {
        "content": "<p>You can also use the equation compiler directly in this case (I think)</p>",
        "id": 361802965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685298645
    },
    {
        "content": "<p>It seems that this file is already being ported: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4448\">!4#4448</a>.</p>",
        "id": 361806548,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685300252
    },
    {
        "content": "<p>I thought this was supposed to be fixed, but I still get this error with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- warning: already compiled List.rec</span>\n<span class=\"n\">compile_inductive</span><span class=\"bp\">%</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- code generator does not support recursor 'List.rec'</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.chooseX'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">hp</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"o\">(</span><span class=\"n\">Exists.elim</span> <span class=\"n\">hp</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not_mem_nil</span> <span class=\"n\">a</span> <span class=\"n\">h.left</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">l</span> <span class=\"n\">ls</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">pl</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">pl</span><span class=\"o\">⟩⟩</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a_mem_ls</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span>\n        <span class=\"n\">ih</span>\n          <span class=\"o\">(</span><span class=\"n\">hp.imp</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">mem_cons.mp</span> <span class=\"n\">o</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩)</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">mem_cons.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a_mem_ls</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 405219600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701383548
    },
    {
        "content": "<p>The error message seems to be wrong, the actual problem is that <code>p l</code> is decided using <code>Classical.propDecidable</code>. Adding <code>have : Decidable (p l) := sorry</code> fixes the issue</p>",
        "id": 405234535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701390639
    }
]