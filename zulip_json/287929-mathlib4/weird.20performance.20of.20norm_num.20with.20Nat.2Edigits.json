[
    {
        "content": "<p>I'm observing <code>norm_num</code> to be surprisingly slow (taking almost a full second) on <code>Nat.digits 10 N</code> when <code>N</code> is between ~500 and ~1500.</p>\n<p>On larger values of <code>N</code>, <code>norm_num</code> finishes much more quickly (like 40ms).</p>\n<p>Does anyone have any idea about what might explain this behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">700</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.769513s] example : [0, 0, 7] = Nat.digits 10 700 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">800</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.807374s] example : [0, 0, 8] = Nat.digits 10 800 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">900</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.765223s] example : [0, 0, 9] = Nat.digits 10 900 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.741816s] example : [0, 0, 0, 1] = Nat.digits 10 1000 := by norm_num</span>\n\n<span class=\"c1\">-- The folowing examples are much faster! Why is that?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1800</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.033864s] example : [0, 0, 8, 1] = Nat.digits 10 1800 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">2800</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.032935s] example : [0, 0, 8, 2] = Nat.digits 10 2800 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">99999</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.035004s] example : [9, 9, 9, 9, 9] = Nat.digits 10 99999 := by norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">10000000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- [Elab.command] [0.043711s] example : [0, 0, 0, 0, 0, 0, 0, 1] = Nat.digits 10 10000000 := by norm_num</span>\n</code></pre></div>",
        "id": 393985095,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696012545
    },
    {
        "content": "<p><code>norm_num</code> uses <code>simp</code> -- maybe for small enough numbers it leans more on <code>simp</code>? How does <code>norm_num1</code> do?</p>",
        "id": 393985405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696012668
    },
    {
        "content": "<p><code>norm_num1</code> is unable to close any of these goals</p>",
        "id": 393985526,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696012712
    },
    {
        "content": "<p><code>simp</code> can close all but the bottom three of them</p>",
        "id": 393985668,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696012796
    },
    {
        "content": "<p>Similar weirdness <a href=\"#narrow/stream/113489-new-members/topic/Prove.20decidable.20statement.20by.20evaluation/near/390390131\">here</a>, with 317 being some kind of hole where one algorithm stopped being used and another one took over (and as it turned out didn't work).</p>",
        "id": 393986904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696013407
    },
    {
        "content": "<p>I guess <code>norm_num1</code> doesn't work because there's no norm num extension for <code>Nat.digits</code>. The way it's working is that it repeatedly applies <code>Nat.digits_add_two_add_one</code> using <code>simp</code> and then reduces the numbers involved.</p>",
        "id": 393987780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696013802
    },
    {
        "content": "<p>I think this is what the first one ends up doing, minus some intermediate simplifications using <code>List.cons.injEq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">700</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.digits_add_two_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.digits_add_two_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.digits_add_two_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 393988126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696013956
    },
    {
        "content": "<p>that proof is fast</p>",
        "id": 393988484,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696014087
    },
    {
        "content": "<p>so I guess maybe <code>simp</code> gets distracted with some other irrelevant stuff</p>",
        "id": 393988515,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696014106
    },
    {
        "content": "<p>The conclusion that I'm drawing is that we should port the Nat.digits norm_num extension before worrying too much about this</p>",
        "id": 393988624,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696014145
    },
    {
        "content": "<p>though it would still be nice to understand exactly why <code>norm_num</code> / <code>simp</code> is currently so slow here</p>",
        "id": 393988690,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696014178
    },
    {
        "content": "<p>hm... but it looks like <code>norm_num</code> extensions in mathlib4 must return an integer or rational,  and <code>Nat.digits</code> does not fit into that model?</p>\n<blockquote>\n<p>This plugin is noticeably less powerful than the equivalent version in Mathlib 3: the design of<br>\n<code>norm_num</code> means plugins have to return numerals, rather than a generic expression.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/071f47d27115f6b801ba2e4ba42334817abf2446/Mathlib/Tactic/NormNum/BigOperators.lean#L28-L29\">https://github.com/leanprover-community/mathlib4/blob/071f47d27115f6b801ba2e4ba42334817abf2446/Mathlib/Tactic/NormNum/BigOperators.lean#L28-L29</a></p>",
        "id": 393990733,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696014837
    },
    {
        "content": "<p>Yeah, I've been wondering about that. I'm not sure what the plan is for normalizing things like lists, vectors, and matrices is.</p>",
        "id": 393992791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696015875
    },
    {
        "content": "<p>This works for the above <code>digits</code> examples, and speeds up the small examples (but slows down the large examples):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 394000333,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696019647
    },
    {
        "content": "<p>Funily enough I started making a PR to change that simp lemma yesterday <a href=\"https://github.com/leanprover-community/mathlib4/pull/7428\">#7428</a> I don't think its a particularly good one as it breaks numerals down which you almost never want.</p>",
        "id": 394095132,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696088961
    },
    {
        "content": "<p>yeah, I saw that. I tried it on the above examples and it did not seem to make much difference.</p>",
        "id": 394101074,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696094391
    },
    {
        "content": "<p>Ah thats sad to hear. I still think its a better simp lemma though. I guess it makes sense that there is a deeper root cause though, <code>norm_num</code> probably doesn't have issues adding the numbers back together again when needed.</p>",
        "id": 394116642,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696111128
    },
    {
        "content": "<p>I built lean configured with <code>RELWITHDEBINFO</code>and ran it on the slow example, yielding this <a href=\"https://sandstorm-p4m4f4op1cof2gfu9j67.dwrensha.ws/out.svg\">flame graph</a>. (15MB, will take a few moments to load in your browser).</p>",
        "id": 394478661,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696266879
    },
    {
        "content": "<p>a very substantial proportion of the time is being spent in whnf stuff</p>",
        "id": 394478778,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696266919
    },
    {
        "content": "<p>29.74% of the time being spent in <code>l_Lean_Meta_whnfEasyCases___at_Lean_Meta_whnfCore_go___spec__3</code></p>",
        "id": 394479425,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696267161
    },
    {
        "content": "<p>looks like approximately 85% of the time is spent in functions with names containing \"whnf\", \"reduceMatcher\", \"forallBoundedTelescope\", or \"forallTelescopeReducing\".</p>",
        "id": 394480178,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696267431
    },
    {
        "content": "<p>Here is maybe a more striking illustration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">5000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- tactic 'simp' failed, nested error:</span>\n<span class=\"c1\">-- (deterministic) timeout at 'simp', maximum number of heartbeats (5000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1800</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- goals accomplished</span>\n</code></pre></div>",
        "id": 397963770,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697999388
    },
    {
        "content": "<p>I wonder whether <a href=\"https://github.com/leanprover/lean4/commit/9a7565d66c84bdef37f8cd021fe6ca6eebe7b425\">https://github.com/leanprover/lean4/commit/9a7565d66c84bdef37f8cd021fe6ca6eebe7b425</a> fixes this...</p>",
        "id": 397963832,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697999422
    },
    {
        "content": "<p>Works in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7834\">#7834</a>, so probably <code>norm_num</code> doesn't expect <code>simp</code> to use <code>decide</code>.</p>",
        "id": 397964630,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698000422
    },
    {
        "content": "<p>interesting!</p>",
        "id": 397964900,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698000737
    },
    {
        "content": "<p>look to me like <a href=\"https://github.com/leanprover/lean4/pull/2730\">lean4#2730</a> does <em>not</em> fix this problem.</p>",
        "id": 397965161,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698001030
    },
    {
        "content": "<p>I can test out turning off <code>decide</code> in <code>norm_num</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">diff</span> <span class=\"c1\">--git a/Mathlib/Tactic/NormNum/Core.lean b/Mathlib/Tactic/NormNum/Core.lean</span>\n<span class=\"n\">index</span> <span class=\"n\">ddb35ca06..f82790298</span> <span class=\"mi\">100644</span>\n<span class=\"c1\">--- a/Mathlib/Tactic/NormNum/Core.lean</span>\n<span class=\"bp\">+++</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NormNum</span><span class=\"bp\">/</span><span class=\"n\">Core.lean</span>\n<span class=\"bp\">@@</span> <span class=\"bp\">-</span><span class=\"mi\">233</span><span class=\"o\">,</span><span class=\"mi\">6</span> <span class=\"bp\">+</span><span class=\"mi\">233</span><span class=\"o\">,</span><span class=\"mi\">7</span> <span class=\"bp\">@@</span> <span class=\"kd\">def</span> <span class=\"n\">normNumAt</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fvarIdsToSimp</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">FVarId</span><span class=\"o\">)</span>\n   <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n   <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">toAssert</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n   <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">replaced</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n<span class=\"bp\">+</span>  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ctx.config</span> <span class=\"k\">with</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">}}</span>\n   <span class=\"n\">for</span> <span class=\"n\">fvarId</span> <span class=\"k\">in</span> <span class=\"n\">fvarIdsToSimp</span> <span class=\"k\">do</span>\n     <span class=\"k\">let</span> <span class=\"n\">localDecl</span> <span class=\"bp\">←</span> <span class=\"n\">fvarId.getDecl</span>\n     <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">localDecl.type</span>\n</code></pre></div>\n<p>Indeed, that makes the <code>maxHeartbeats 5000</code> example pass, and it makes the slow examples from further above somewhat faster. But they are still slower than I would expect.</p>",
        "id": 397966854,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698002837
    }
]