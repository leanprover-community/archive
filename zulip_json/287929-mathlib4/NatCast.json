[
    {
        "content": "<p>Is it correct that whenever I encounter a <code>instance : Coe ℕ R := sorry</code> that this should be <code>instance NatCast R :=</code> instead? Does it make a difference?</p>",
        "id": 325807004,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675509315
    },
    {
        "content": "<p>Are there any such instances?</p>",
        "id": 325836658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675521260
    },
    {
        "content": "<p>There is for example this in <code>Data.ENat.Basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[coe]</span> <span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"n\">WithTop.some</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ofNat</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and my question is would it change anything if that would say <code>instance : NatCast ℕ∞ := ⟨ofNat⟩</code></p>",
        "id": 325878789,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675542547
    },
    {
        "content": "<p>The instance should probably just be removed, along with <code>ofNat</code></p>",
        "id": 325890391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675552141
    },
    {
        "content": "<p>It's already implied via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.add_comm_monoid_with_one\">docs#enat.add_comm_monoid_with_one</a></p>",
        "id": 325890410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675552191
    },
    {
        "content": "<p>It would be nice to have a lemma/example/test</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ENat.natCast_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ENat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">WithTop.some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>to be sure that the <code>NatCast</code> instance doesn't come from some generic recursive definition.</p>",
        "id": 325898408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675559350
    },
    {
        "content": "<p>Thx, Ill add both suggestions to <a href=\"https://github.com/leanprover-community/mathlib4/pull/1892\">!4#1892</a> tonight</p>",
        "id": 325975888,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675611050
    },
    {
        "content": "<p>I'm not sure that <code>ENat.natCast_def</code> is a good idea as a lemma, as it unfolds the type synonym</p>",
        "id": 325976696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675611382
    },
    {
        "content": "<p>Having it as an <code>example</code> would probably be more appropriate</p>",
        "id": 325976742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675611404
    },
    {
        "content": "<p>We do seem to be missing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.nat_cast_def\">docs#with_top.nat_cast_def</a> though, which would be a suitable lemma</p>",
        "id": 325976807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675611433
    },
    {
        "content": "<p>Ah, it's called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.coe_nat\">docs#with_top.coe_nat</a></p>",
        "id": 325976974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675611497
    },
    {
        "content": "<p>Back in the old days before <code>norm_cast</code> it was always a total mystery to me whether the lemma you wanted would have <code>coe</code> or <code>cast</code> in its name.</p>",
        "id": 325988421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675616914
    }
]