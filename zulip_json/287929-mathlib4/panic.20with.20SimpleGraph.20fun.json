[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.Sigma</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">Adj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>typing this in gives the error:<br>\n\"Lean server printed an error: PANIC at Lean.Meta.whnfEasyCases Lean.Meta.WHNF:317:22: unreachable code has been reached\"<br>\nwith the output page saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Meta.whnfEasyCases</span> <span class=\"n\">Lean.Meta.WHNF</span><span class=\"o\">:</span><span class=\"mi\">317</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Meta.whnfEasyCases</span> <span class=\"n\">Lean.Meta.WHNF</span><span class=\"o\">:</span><span class=\"mi\">317</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n</code></pre></div>\n<p>This is on 4.0.0-nightly-2023-07-12</p>",
        "id": 376477822,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1689715948
    },
    {
        "content": "<p>I can reproduce. Maybe the attached video is evidence that it's something to do with <code>aesop_graph</code>? But maybe not -- I don't know the first thing about panics.</p>\n<p><a href=\"/user_uploads/3121/UPKvSMr6EFDwi1JcDNgQMUga/panic.gif\">panic.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UPKvSMr6EFDwi1JcDNgQMUga/panic.gif\" title=\"panic.gif\"><img src=\"/user_uploads/3121/UPKvSMr6EFDwi1JcDNgQMUga/panic.gif\"></a></div>",
        "id": 376478642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689716289
    },
    {
        "content": "<p>From reading <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/WHNF.lean#L317\">the source</a>, this panic means that there is a loose bvar in an expression that's passed to whnf. The whnf code assumes there are no loose bvars. (A bvar can show up if some code looks into the body of a forall or lambda without doing the right sort of binder initialization. I don't have any insight here though.)</p>",
        "id": 376479859,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689716816
    },
    {
        "content": "<p>I've run into this error when trying to put fragments of expressions (that had loose bvars) into a <code>DiscrTree</code>. If <code>aesop_graph</code> is involved that could be possibility.</p>",
        "id": 376510666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689730597
    },
    {
        "content": "<p>Looks like it could be an Aesop issue. I'm investigating.</p>",
        "id": 376601507,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689760906
    },
    {
        "content": "<p>Was indeed a bug in Aesop's <code>intros</code> builtin tactic, which sometimes ran <code>whnf</code> on expressions with loose bvars. Now fixed.</p>",
        "id": 376648404,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689769975
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover/lean4/pull/2338\">lean4#2338</a> to turn the panic in <code>whnf</code> into an error, though I'm not 100% sure whether this is a good idea.</p>",
        "id": 376656460,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689771478
    },
    {
        "content": "<p>I agree with that assessment :)</p>",
        "id": 376656665,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689771515
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 376659071,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689771924
    },
    {
        "content": "<p>Basically all Meta APIs assume that there are no loose bvars, it's the locally-nameless invariant. I understand that Aesop does some novel things with the context, but at least in Lean this would always point to a bug in another place</p>",
        "id": 376661779,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689772450
    },
    {
        "content": "<p>Yes, I also observe this invariant (well, usually...). But when, due to a bug, the invariant is violated, it's easier to find the bug if you have some more info. I guess you're worried that the exception might get caught by some catch-all exception handler?</p>",
        "id": 376662414,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689772595
    },
    {
        "content": "<p>Yes, we wouldn't want to bracktrack on it, say</p>",
        "id": 376662597,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689772635
    },
    {
        "content": "<p>Knowing the pretty printing of the loose bvar isn't all that much more helpful though, is it?</p>",
        "id": 376662899,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689772704
    },
    {
        "content": "<p>Makes sense. So ideally, we would carry around the whole expression, then panic with an informative error message if there's a loose bvar. But carrying around the expression is probably overkill.</p>",
        "id": 376663677,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689772873
    },
    {
        "content": "<p>Rather than <code>unreachable!</code>, it might be more friendly if it were <code>panic! \"loose bvar in expression\"</code></p>",
        "id": 376664239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689772979
    },
    {
        "content": "<p>\"unreachable code has been reached\" is not really accurate, since it's not <code>whnf</code>'s fault that the caller broke the invariant</p>",
        "id": 376665050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689773118
    },
    {
        "content": "<p>Yes, I'll refactor the PR accordingly.</p>",
        "id": 376665552,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689773193
    }
]