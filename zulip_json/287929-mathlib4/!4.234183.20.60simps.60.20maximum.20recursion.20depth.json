[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> would you mind having a look at the <code>simps</code> problem present in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4183\">!4#4183</a>? I have temporarily worked around the problem by adding the <code>simp</code> lemmas manually, but it would be good to understand the issue here and I'm out of ideas. The problem is mentioned in the PR comment and as porting notes in the file.</p>",
        "id": 360901234,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684964038
    },
    {
        "content": "<p>I found time to investigate this. The error occurs at the declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps! (config := { fullyApplied := false }) apply symm_apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">addEquivBoundedOfCompact</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LipschitzAdd</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">({</span> <span class=\"n\">toContinuousMapAddHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">equivBoundedOfCompact</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"k\">with</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃+</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>The behavior of <code>simps!</code> is to call <code>dsimp; simp</code> to simplify the resulting right-hand sides of the generated simp-lemmas. After minimizing the RHS a little bit, we get the following mwe, which indeed loops:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Compact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BoundedContinuousFunction</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LipschitzAdd</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Debug.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">100</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(({</span> <span class=\"n\">toEquiv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ContinuousMap.equivBoundedOfCompact</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">BoundedContinuousFunction.toContinuousMapAddHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≃+</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">invFun</span> <span class=\"o\">:</span>\n        <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"c1\">-- max recursion depth reached</span>\n</code></pre></div>\n<p>Looking at the simp trace, the problem is the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv.symm_mk#doc\">docs4#AddEquiv.symm_mk</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">symm_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">MulEquiv.mk</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">f.symm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.mk</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.map_mul'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It makes sense that this <code>simp</code>-lemma causes loops, since the right-hand side contains the left-hand side as a subexpression! I'm surprised we don't have a linter that catches this. <br>\nWe should remove this simp-lemma from the simp-set.</p>",
        "id": 362578448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685569256
    },
    {
        "content": "<p>Hmm... That wasn't the case in mathlib, was it? Why is it rewriting the <em>proof</em>?</p>",
        "id": 362580638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685570027
    },
    {
        "content": "<p>And certainly this simp lemma <em>is</em> useful.</p>",
        "id": 362580721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685570047
    },
    {
        "content": "<p>If nothing else can save it, turn <code>(MulEquiv.mk  h).symm.map_mul'</code> into a private lemma and use it using <code>symm_mk</code>.</p>",
        "id": 362580852,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685570108
    },
    {
        "content": "<p>Does <code>(d)simp</code> really simplify inside proofs?</p>",
        "id": 362581021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685570190
    },
    {
        "content": "<p>Did anything come of this discussion? I just ran into the <code>mul</code> version :/</p>",
        "id": 391931538,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695135495
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/7407\">#7407</a> as a temporary fix. We should either make sure that <code>simp</code> doesn't rewrite inside propositions, finds that it loops in this case, or add a linter that guards against lemmas like this.</p>",
        "id": 393508783,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695825743
    }
]