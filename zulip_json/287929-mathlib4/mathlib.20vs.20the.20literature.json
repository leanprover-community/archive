[
    {
        "content": "<p>I want to discuss the following PR by <span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span>, because it has been sitting in limbo for a while, and I think it brings up an interesting question. Here's the PR in question:</p>\n<blockquote>\n<p>chore: shift Nat.ascFactorial down by one <a href=\"https://github.com/leanprover-community/mathlib4/pull/7965\">#7965</a></p>\n</blockquote>\n<p>The tl;dr summary is:</p>\n<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ascFactorial#doc\">docs#Nat.ascFactorial</a> is currently misaligned with conventional maths literature</li>\n<li>The diff makes me think that mathlib got the definition right, and the literature got it wrong</li>\n</ol>\n<p>On the one hand, we want mathlib to stay close to established conventions, at the same time we don't want to make our lives more difficult. </p>\n<p>Here's a random thought I had, about what we might do:<br>\nWe keep both definitions (as <code>stdName</code> and <code>stdName'</code>, where the primed version departs from literature conventions). We then prove how the two notions relate, and keep on working with <code>stdName'</code> mostly.<br>\nLandmark results could be stated in two versions, with a short proof of the conventional statement that simply rewrites it in terms of the other statement and applies the other version.</p>\n<p>Happy to hear other peoples thought on this matter.</p>",
        "id": 400087527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699000860
    },
    {
        "content": "<p>Can you elaborate a little more on which bits of the diff particularly support 2)?</p>",
        "id": 400087802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699000991
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7965/files#diff-07d04a046d145326d6b194de8cc9f54deb9c9b0aee2e2f458919db2685eec351R235-R252\">https://github.com/leanprover-community/mathlib4/pull/7965/files#diff-07d04a046d145326d6b194de8cc9f54deb9c9b0aee2e2f458919db2685eec351R235-R252</a></p>",
        "id": 400087984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699001082
    },
    {
        "content": "<p>Does this mean we can have the off-by-one-fixed version of the gamma function?</p>",
        "id": 400089494,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1699001769
    },
    {
        "content": "<p>Lol, I guess <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Gamma&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> will be understood as the derivative <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 400091533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699002570
    },
    {
        "content": "<p>Why are those new statements using natural subtraction? :)</p>",
        "id": 400096611,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699004611
    },
    {
        "content": "<p>I was the one defining <code>nat.asc_factorial</code>. I definitely followed (some subset of) the literature.</p>",
        "id": 400139046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699020004
    },
    {
        "content": "<p>It's got an interesting history, as I defined it originally to prove something about cardinality of injective functions, and then yael noticed I had the names the wrong way round and swapped them to what we had to day. Maybe their lean3 pr is indicative of this?</p>",
        "id": 400145799,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699022062
    },
    {
        "content": "<p>Do you have a reference? I looked at all arXiv results for \"rising factorial\" and in every one that defined some notation like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mover accent=\"true\"><mi>n</mi><mo stretchy=\"true\">‾</mo></mover></msup></mrow><annotation encoding=\"application/x-tex\">(x)^{\\overline n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0859em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8359em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord overline mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6756em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.5776em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, it was defined in the normal way (starting from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>). Wikipedia also does not suggest that there is any other convention in use.</p>",
        "id": 400145802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699022063
    },
    {
        "content": "<p>I think Johan will be able to predict that I am strongly in favor of using the convention that is in use, as far as I can tell, everywhere other than mathlib.</p>",
        "id": 400146009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699022127
    },
    {
        "content": "<p>Or using the fulltext search, just scroll through<br>\n<a href=\"https://search.arxiv.org/?in=&amp;query=%22ascending%20factorial%22\">https://search.arxiv.org/?in=&amp;query=%22ascending%20factorial%22</a></p>",
        "id": 400148161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699022868
    },
    {
        "content": "<p>I would be very interested to see suggestions for statements that do not use natural subtraction (or are otherwise easier/more natural)!</p>",
        "id": 400203326,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1699044597
    },
    {
        "content": "<p>The definition can be written as the product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">n+i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">i\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span></span></span></span> <code>List.range k</code>, and there's no natural subtraction there. Neither the definition in the PR nor the original definition uses natural subtraction either.</p>",
        "id": 400239093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699065050
    },
    {
        "content": "<p>Sorry for the ambiguity.  The statement in question from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7965\">#7965</a> that uses natural subtraction (and has a rather messy proof) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ascFactorial_eq_factorial_mul_choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">n.ascFactorial</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 400249952,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1699072068
    },
    {
        "content": "<p>Oh I see. Yeah that is a bit weird. I'm happy with Johan's idea of making the apparently-more-useful-but-not-in-the-literature function just a primed version and keeping it.</p>",
        "id": 400273184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699088851
    },
    {
        "content": "<p>With the primed definition, we would have <code>Nat.ascFactorial' n k = Nat.ascFactorial (n+1) k</code>.  Should we instead consider the following course:</p>\n<ol>\n<li>no primed definition</li>\n<li>any results that use natural subtraction (e.g., <code>n+k-1</code>) also have primed versions with <code>n+1</code> as input parameter.  For example,</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ascFactorial_eq_factorial_mul_choose'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ascFactorial</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 400323304,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1699127654
    },
    {
        "content": "<p>Then you need another theorem covering the zero case (which is fine)</p>",
        "id": 400323674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699128048
    },
    {
        "content": "<p>I would like to suggest a third alternative: replace <code>Nat.ascFactorial</code> with some new <code>Ring.ascFactorial</code> for any semiring, since the definition immediately generalizes to that setting.  I made such a definition in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6934\">#6934</a>, but maybe I should put it in a separate file with fewer dependencies.  Is there an advantage to keeping a special version for natural numbers around?</p>",
        "id": 400406136,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1699201129
    },
    {
        "content": "<p>I think it's worth keeping <code>Nat.ascFactorial</code> around as a definition with few dependencies, having a <code>Ring.ascFactorial n k = Nat.ascFactorial n k</code> lemma (not <code>simp</code>), and in the <code>Nat.ascFactorial</code> documentation mentioning <code>Ring.ascFactorial</code>.</p>",
        "id": 400408404,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699203480
    },
    {
        "content": "<p>Why do you think that Kyle? I can't think of too many things that you could do with nat factorial without the semiring structure on Nat, which seems like all you'd need for the general def.</p>",
        "id": 400411092,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699206321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"630477\">@Scott Carnahan</span>, this already exists: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ascPochhammer#doc\">docs#ascPochhammer</a>.</p>",
        "id": 400418192,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699212901
    },
    {
        "content": "<p>I see from your PR that you know about it. Then I'm dubious of its necessity.</p>",
        "id": 400418373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699213111
    },
    {
        "content": "<p>I see - please disregard the third alternative.</p>",
        "id": 401004446,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1699469561
    }
]