[
    {
        "content": "<p>Error. Why? Bug? Should file?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">▶ 5:86-5:90: error:</span>\n<span class=\"cm\">typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">  SeminormedAddCommGroup ?m.131</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">thm1</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">thm1</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397376380,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697659445
    },
    {
        "content": "<p>How is Lean supposed to know which <code>iota</code> you want to apply <code>thm1</code> with by itself?</p>",
        "id": 397376573,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697659557
    },
    {
        "content": "<p>What do you mean, there's one iota right</p>",
        "id": 397376697,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697659611
    },
    {
        "content": "<p>Well you named them both <code>iota</code> but that doesn't mean Lean will automatically use <code>iota</code> for the argument <code>iota</code> when the theorem is applied (indeed that would be kind of annoying)</p>",
        "id": 397376798,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697659675
    },
    {
        "content": "<p>Your code is the same as this, with different letters for the types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">▶ 5:86-5:90: error:</span>\n<span class=\"cm\">typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">  SeminormedAddCommGroup ?m.131</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">thm1</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Works -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SeminormedAddCommGroup</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">thm1</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397376813,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1697659681
    },
    {
        "content": "<p>Ahhh hmm that makes sense, thanks!</p>",
        "id": 397376912,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697659717
    },
    {
        "content": "<p>In hindsight it sounds stupid haha</p>",
        "id": 397376938,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697659729
    },
    {
        "content": "<p>You are not the first person to ask this, dont worry!</p>",
        "id": 397378410,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697660437
    }
]