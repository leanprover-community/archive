[
    {
        "content": "<p>Why do I have to use French quotes to give Lean the instance of <code>Additive (Group G)</code>, when Lean3 was able to synthesise it automatically?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Deprecated.Submonoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsAddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IsAddSubmonoid</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsSubgroup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IsSubmonoid</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsNormalAddSubgroup</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IsAddSubgroup</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsNormalSubgroup</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IsSubgroup</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Additive.isAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsSubgroup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsAddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">IsAddSubgroup.mk</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Additive.isAddSubmonoid</span> <span class=\"n\">hs.toIsSubmonoid</span><span class=\"o\">)</span> <span class=\"n\">hs.inv_mem</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Additive.isNormalAddSubgroup</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsNormalSubgroup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">IsNormalAddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">IsNormalAddSubgroup.mk</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Additive.isAddSubgroup</span> <span class=\"n\">hs.toIsSubgroup</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">IsNormalSubgroup.normal</span> <span class=\"n\">_</span> <span class=\"o\">‹</span><span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">G</span><span class=\"o\">)›</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- porting note: Lean needs help synthesising</span>\n    <span class=\"c1\">-- fails: (IsNormalSubgroup.normal hs)</span>\n</code></pre></div>",
        "id": 323956687,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1674790456
    },
    {
        "content": "<p>There are a few such examples in <code>deprecated.subgroup</code></p>",
        "id": 323956838,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1674790593
    }
]