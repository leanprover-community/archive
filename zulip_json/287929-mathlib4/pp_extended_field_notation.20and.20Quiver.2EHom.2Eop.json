[
    {
        "content": "<p>Lean 3 <code>(nonempty.some h₁).map.op</code> is being pretty-printed as <code>(Quiver.Hom.op (Nonempty.some h₁).map)</code> in Lean 4, so I tried to fix this with <code>pp_extended_field_notation Quiver.Hom.op</code> but this gives me the error <code>Quiver.Hom is not a structure</code>. The other method I understand,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[app_unexpander Quiver.Hom.op]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandQuiver.Hom.op</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>seems to work fine. Should I be adding this app_unexpander? (again I'm debugging large terms and trying to compare manually)</p>",
        "id": 357954760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683915184
    },
    {
        "content": "<p>No, <code>pp_extended_field_notation</code> should work for this. It has a check For Your Own Good that the namespace corresponds to a structure, but this isn't strictly speaking needed: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ProjectionNotation.lean#L130-L131\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ProjectionNotation.lean#L130-L131</a></p>",
        "id": 357956245,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683915549
    },
    {
        "content": "<p>If that check fails, then <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ProjectionNotation.lean#L141\">this case</a> shouldn't be there</p>",
        "id": 357956525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683915619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3946\">mathlib4#3946</a></p>",
        "id": 357961687,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683917124
    }
]