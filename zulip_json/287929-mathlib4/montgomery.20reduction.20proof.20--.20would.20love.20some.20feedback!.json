[
    {
        "content": "<p>Hi all. Context: <span class=\"user-mention\" data-user-id=\"371938\">@Son Ho</span>, <span class=\"user-mention\" data-user-id=\"550342\">@Aymeric Fromherz</span> and I have been investigating Lean for proving facts about cryptographic algorithms (in the context of the Aeneas verification toolchain). Right now, we're looking at Kyber, a new post-quantum algorithm that uses a lot of linear algebra (this thesis has good background in §2.2 and §2.3: <a href=\"https://kannwischer.eu/thesis/phd-thesis-2023-01-03.pdf\">https://kannwischer.eu/thesis/phd-thesis-2023-01-03.pdf</a> -- see also <a href=\"https://bwesterb.github.io/draft-schwabe-cfrg-kyber/draft-cfrg-schwabe-kyber.html\">https://bwesterb.github.io/draft-schwabe-cfrg-kyber/draft-cfrg-schwabe-kyber.html</a>). As a warm-up project, we've been proving algorithm 6 from the thesis above (page 42), namely a Montgomery reduction. (There's a lot more interesting stuff in Kyber, including NTT, and this has been going reasonably well so far, so I won't mention it here.)</p>\n<p>The proof is 172 lines: <a href=\"https://gist.github.com/msprotz/54969de9c58106a22db3dcf50132d6ca\">https://gist.github.com/msprotz/54969de9c58106a22db3dcf50132d6ca</a> (This should be an mwe! I can successfully copy/paste it into my editor, provided I have mathlib in scope.)</p>\n<p>Our \"ask\": we would love to get a critique of the proof by some more experienced lean/mathlib users. Is there something that's abnormally tedious? Are we missing a library of lemmas somewhere? Is there some tactic that we could've used to make our lives easier? Is there a more common style of going about proof obligations? etc. etc. -- I've added some specific questions, but really, any thoughts by more experienced users would go a long way as we start fleshing out some proofs and evaluating Lean for reasoning about this flavor of algorithms. Thanks!</p>",
        "id": 392401009,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695333061
    },
    {
        "content": "<p>A quick remark: <code>ZMod.inv q r</code> should be <code>(r : ZMod q)⁻¹</code> throughout. Perhaps we need a warning on the docstring of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod.inv#doc\">docs#ZMod.inv</a> that it's an implementation detail</p>",
        "id": 392401498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695333380
    },
    {
        "content": "<p>Your first sorry can be solved with <code>by apply?</code>, which finds <code>Int.ediv_lt_of_lt_mul H H'</code></p>",
        "id": 392403150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695334498
    },
    {
        "content": "<p><code>have := ZMod.inv_mul_of_unit (a : ZMod b) (ZMod.unitOfCoprime _ H_c).isUnit</code> almost completely solves your first goal</p>",
        "id": 392403912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695334936
    },
    {
        "content": "<p>thanks, I'm getting <code>unknown identifier 'apply?'</code>, do I need to import something?</p>",
        "id": 392564749,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695401570
    },
    {
        "content": "<p>ah nevermind, just the editor that was slow to react</p>",
        "id": 392564793,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695401590
    },
    {
        "content": "<p>ah excellent! this apply? thing is great</p>",
        "id": 392564870,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695401620
    },
    {
        "content": "<p>About <code>div_lt_of_lt_mul</code>.  This is a victim of the still ongoing battle over the definition of integer division.  Lean 4 started out with the rounding convention used in C, which is terrible for formalization.  While mathlib wants (and redefines division to use!) another rounding convention (as in Python).</p>",
        "id": 393081397,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1695666162
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"c1\">-- 0</span>\n</code></pre></div>",
        "id": 393081609,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1695666236
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"c1\">-- -1</span>\n</code></pre></div>",
        "id": 393081670,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1695666245
    },
    {
        "content": "<p>Hopefully this will be resolved sometime in the future.  Long story short, the theorem you're looking for is called <code>ediv_lt_of_lt_mul</code> for now.</p>",
        "id": 393081739,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1695666272
    },
    {
        "content": "<p>My general impression is that people like <code>Zmod</code> more than <code>≡ [ZMOD]</code> and that you'll find more lemmas there.</p>",
        "id": 393082323,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1695666495
    },
    {
        "content": "<p>Would that be <code>ZMod</code>?</p>",
        "id": 393082587,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695666594
    },
    {
        "content": "<p><code>ZMod n</code> is a ring, which makes it easier to work in it, compared to congruences.</p>",
        "id": 393091882,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1695669684
    },
    {
        "content": "<p>We've found that the algorithm we were looking at was written with an \"int\" style in mind, rather than manipulating members of the zmod ring. I had an earlier version that tried to express everything within the group but since the algorithm juggles mod q and mod R, I didn't seem to go very far</p>",
        "id": 393103389,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695673221
    },
    {
        "content": "<p>Maybe I started off in the wrong direction? but predicates like \"this divides that mod something else\" became hard to express, I thought, in the group setting</p>",
        "id": 393103598,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1695673272
    },
    {
        "content": "<p>Can you give an explicit example of what you mean by \"this divides that mod something else\"? Right now I can't even typecheck that sentence.</p>",
        "id": 393190915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695718651
    }
]