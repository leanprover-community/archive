[
    {
        "content": "<p>This looks to me like an elaboration bug in the <code>mod_cases</code> tactic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ModCases</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"n\">mod_cases</span> <span class=\"n\">z</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span>\n     <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n     <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n     <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  sorryAx ?m.55</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.55 : Sort ?u.54</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">   Nat.succ _uniq.37 = Nat.succ _uniq.37 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 323603044,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674688895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Thanks for discovering this! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> I'd like to record it, could you open an issue for it?</p>",
        "id": 323635431,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674707409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/1851\">https://github.com/leanprover-community/mathlib4/issues/1851</a></p>",
        "id": 323716345,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674739169
    },
    {
        "content": "<p>Adding a <code>withMainContext</code> fixes this. PR incoming.</p>",
        "id": 323818148,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674760508
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1865\">https://github.com/leanprover-community/mathlib4/pull/1865</a></p>",
        "id": 323819902,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674761003
    },
    {
        "content": "<p>It's somewhat surprising to me that the main goal and the local context are <em>independent</em> pieces of implicit state.</p>",
        "id": 323823952,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674762235
    },
    {
        "content": "<p>I think I had kind of assumed that if the main goal is set to something, then the local context must be set to match it.</p>",
        "id": 323824100,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674762270
    },
    {
        "content": "<p>Nope. The whole <code>withContext</code> situation is by far the biggest footgun in the API.</p>",
        "id": 323914750,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1674769383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20interaction.20between.20.60mod_cases.60.20and.20.60induction.60/near/323824100\">said</a>:</p>\n<blockquote>\n<p>I think I had kind of assumed that if the main goal is set to something, then the local context must be set to match it.</p>\n</blockquote>\n<p>This wouldn't really work, since \"the main goal\" is not really a piece of state, the list of goals is the state and these can be \"accidentally\" solved by doing other things</p>",
        "id": 323915969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674769886
    },
    {
        "content": "<p><code>getMainGoal</code> calculates the first unassigned metavariable on the spot</p>",
        "id": 323916012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674769906
    },
    {
        "content": "<p>yeah, having <code>mvarId.assign</code> possibly change the local context seems like it would maybe be bad</p>",
        "id": 323916151,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674769954
    },
    {
        "content": "<p>One way to make it slightly less footgunny would be to have <code>TacticM</code> not extend <code>MetaM</code> at all but require you to \"enter\" a particular metavariable's context to run things</p>",
        "id": 323916222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674769984
    }
]