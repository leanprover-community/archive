[
    {
        "content": "<p>I'm currently porting <code>Algebra.Order.Monoid.WithZero</code>. There are a few lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_le_two</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">add_nonneg</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">zero_le_one</span>\n</code></pre></div>\n<p>Inserting the <code>[OfNat α 2]</code> assumption clears up the type error, but the proof doesn't type check because Lean doesn't know if the <code>OfNat</code> implementation of <code>2</code> agrees with <code>1 + 1</code>. What's the correct Lean 4 way of fixing this? I heard some talk a while back about a <code>Numeric</code> typeclass or <code>LawfulOfNat</code>, but I can't see them in mathlib4 currently.</p>",
        "id": 313845162,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670179964
    },
    {
        "content": "<p>Yeah, numerals are only supported for structures extending <code>AddMonoidWithOne</code>.  Separate <code>One α</code> and <code>AddZeroClass α</code> hypotheses won't do it anymore.  One possibility would be to change <code>[One α] [AddZeroClass α]</code> to <code>[AddMonoidWithOne α]</code>.</p>",
        "id": 313854292,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670186731
    },
    {
        "content": "<p>But really, I think that's a gratuitously general definition in mathlib3.  My knee-jerk reaction is usually to specialize these to a sensible algebraic structure, i.e., ordered semirings.  This doesn't seem to break much (I've just started the build): <a href=\"https://github.com/leanprover-community/mathlib/compare/zeroletwospec?expand=1\">https://github.com/leanprover-community/mathlib/compare/zeroletwospec?expand=1</a></p>",
        "id": 313854370,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670186779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> literally just generalised those lemmas.</p>",
        "id": 313854568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670186988
    },
    {
        "content": "<p>There's a couple of PRs in that direction, from what I can tell it began with <a href=\"https://github.com/leanprover-community/mathlib/pull/14510\">#14510</a> (for zero_le_two and co.), then <a href=\"https://github.com/leanprover-community/mathlib/pull/17477\">#17477</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/17465\">#17465</a>.</p>",
        "id": 313855443,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670187779
    },
    {
        "content": "<p>None of the PRs come with a good explanation what the generality is actually useful for.  I fully share Floris' feelings in <a href=\"https://github.com/leanprover-community/mathlib/pull/14510\">#14510</a>:</p>\n<blockquote>\n<p>I'm worried that every time we add a class like this, we do actually increase the compilation time (and timeout risk) of many files.<br>\n<em>Does this class actually solve a problem</em>, except proving that <code>0 &lt;= 2</code> a couple times? [emphasis mine]</p>\n</blockquote>",
        "id": 313855802,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670188085
    },
    {
        "content": "<p>I fully agree. There are a few more types that the lemmas apply to, but they are barely used afaict.</p>",
        "id": 313856809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670189087
    },
    {
        "content": "<p>In my experience, <a href=\"https://github.com/leanprover-community/mathlib/pull/14510\">#14510</a> only brought pain (through elaboration issues).</p>",
        "id": 313857289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670189458
    },
    {
        "content": "<p>What would you recommend I do in my PR for mathlib4 then?</p>",
        "id": 313862051,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670193547
    },
    {
        "content": "<p>Perhaps the easiest thing to do is remove the lemmas for now, but add a TODO to come back to them later. This file is on the hot path towards <code>algebra.order.field.defs</code>, so I think it'd be preferable to merge <em>something</em> and fix it later.</p>",
        "id": 313862208,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670193619
    },
    {
        "content": "<p>I'll try to make a PR to solve this problem.</p>",
        "id": 313883614,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670212967
    },
    {
        "content": "<p>Why not just assume you have an <code>AddMonoidWithOne</code> and make a porting note? It's hard to imagine that this will cause problems down the line.</p>",
        "id": 313901401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670224620
    },
    {
        "content": "<p>I made PR <a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> because <code>zero_le_one_class</code> seems should not be put in <code>algebra.order.monoid.with_zero.defs</code></p>",
        "id": 313913120,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670229757
    },
    {
        "content": "<p>Can't we just get rid of <code>zero_le_one_class</code>?</p>",
        "id": 313917515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670231399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfNat/near/313854370\">said</a>:</p>\n<blockquote>\n<p>But really, I think that's a gratuitously general definition in mathlib3.  My knee-jerk reaction is usually to specialize these to a sensible algebraic structure, i.e., ordered semirings.  This doesn't seem to break much (I've just started the build): <a href=\"https://github.com/leanprover-community/mathlib/compare/zeroletwospec?expand=1\">https://github.com/leanprover-community/mathlib/compare/zeroletwospec?expand=1</a></p>\n</blockquote>\n<p><del>Let's merge this one. It has the great advantage that it makes life for Sky porting <code>Algebra.Order.Monoid.WithZero.Defs</code> strictly easier, as it is just moving content out of the way.</del></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> is better, I think.</p>",
        "id": 314161826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670294862
    },
    {
        "content": "<p>Thanks for your help, the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> is now building.</p>",
        "id": 314213562,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670324930
    },
    {
        "content": "<p>Okay, porting <a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> to mathlib4 was unpleasant (I am frankly embarrassed and disgusted that I wrote and used a lemma that says 3+1=4), but done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/893\">https://github.com/leanprover-community/mathlib4/pull/893</a>. Hopefully thing means we can finally define an ordered ring.</p>\n<p>These files aren't in mathlib3port yet, so they were just ported by hand.</p>",
        "id": 314355973,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670373538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> just pinging you on this as you had claimed algebra.order.zero_le_one, which I've done in this file.</p>",
        "id": 314356355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670373749
    },
    {
        "content": "<p>I saw that I had proofs for some of the stupidly obvious lemmas?</p>",
        "id": 314356410,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670373795
    },
    {
        "content": "<p>Did you have a PR? I didn't see anything. Please feel free to edit my PR directly (or comment / approve, etc)</p>",
        "id": 314356587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670373903
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/664\">mathlib4#664</a> and you closed it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_add_one</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unaryCast</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_le_two</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unaryCast</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">one_le_two</span> <span class=\"n\">one_le_two</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_le_two'</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unaryCast</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_add</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">one_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">one_le_two'</span> <span class=\"n\">one_le_two'</span>\n</code></pre></div>",
        "id": 314356741,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670373990
    },
    {
        "content": "<p>I think this was the part which did not come from mathport</p>",
        "id": 314356769,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670374025
    },
    {
        "content": "<p>I have to do informal math now, but I can take look at it in the evening</p>",
        "id": 314356882,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670374105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfNat/near/314355973\">said</a>:</p>\n<blockquote>\n<p>Okay, porting <a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> to mathlib4 was unpleasant (I am frankly embarrassed and disgusted that I wrote and used a lemma that says 3+1=4), but done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/893\">https://github.com/leanprover-community/mathlib4/pull/893</a>. Hopefully thing means we can finally define an ordered ring.</p>\n<p>These files aren't in mathlib3port yet, so they were just ported by hand.</p>\n</blockquote>\n<p>Does the encoding of numerals in <code>AddMonoidWithOne</code> are not the same as lean3 numerals?</p>",
        "id": 314357138,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670374282
    },
    {
        "content": "<p>no, it is slightly different</p>",
        "id": 314357253,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670374330
    },
    {
        "content": "<p>oops</p>",
        "id": 314357718,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670374664
    },
    {
        "content": "<p>It's okay, we can clean it up later.</p>",
        "id": 314357897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670374765
    },
    {
        "content": "<p>There was some discussion upstream about reorganizing <code>zero_le_one_class</code> (possibly in fact reorganizing it out of existence).  Where did this land?  We currently have a discrepancy between <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/monoid/with_zero/defs.lean\">Lean 3 algebra/order/monoid/with_zero/defs</a> and <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Order/Monoid/WithZero/Defs.lean\">Lean 4 algebra/order/monoid/with_zero/defs</a>, the former including <code>zero_le_one_class</code> instances and the latter not.</p>\n<p>I hit this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/903\">mathlib4#903</a>.</p>",
        "id": 314664339,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670502456
    },
    {
        "content": "<p>I think it's just because we merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> before <a href=\"https://github.com/leanprover-community/mathlib4/pull/893\">mathlib4#893</a>.</p>",
        "id": 314679778,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670507343
    },
    {
        "content": "<p>In that case, shouldn't there be an alert somewhere saying \"this file has been modified since the last verified commit\"?  I wonder if something is broken in the tooling.</p>\n<p>We have that</p>\n<ol>\n<li><code>Algebra/Order/Monoid/WithZero/Defs</code> was ported in <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> modelled on <time datetime=\"2022-12-03T22:52:00Z\">2022-12-03T23:52:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/tree/dad7ecf9a1feae63e6e49f07619b7087403fb8d4\">dad7ecf9a1feae63e6e49f07619b7087403fb8d4</a> </li>\n<li><time datetime=\"2022-12-04T17:00:00Z\">2022-12-04T18:00:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/pull/17465\">#17465</a> modified the file in mathlib3</li>\n<li><time datetime=\"2022-12-06T04:12:00Z\">2022-12-06T5:12:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> modified the file again in mathlib3</li>\n<li><time datetime=\"2022-12-06T13:59:00Z\">2022-12-06T14:59:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> was merged into mathlib4</li>\n<li><time datetime=\"2022-12-07T05:18:00Z\">2022-12-07T06:18:00+01:00</time> the bot marked the file in mathlib3 as frozen.</li>\n</ol>",
        "id": 314694846,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670511619
    },
    {
        "content": "<p>The bot is supposed to check that the file hasn't been modified in mathlib3 since the porting basis commit, right?</p>",
        "id": 314695412,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670511764
    },
    {
        "content": "<p>There's no bot that checks for differences in files (so far, but I think there was talk about it), it has to be done manually, but the port status script should tell you which files have changes since the last commit at which they were verified</p>",
        "id": 314708433,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670515320
    },
    {
        "content": "<p>The port status script is not complaining about this file, though!</p>",
        "id": 314708586,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670515353
    },
    {
        "content": "<p>Admittedly, this file doesn't show up on the port status script though.</p>",
        "id": 314708594,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670515355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfNat/near/314694846\">said</a>:</p>\n<blockquote>\n<p>In that case, shouldn't there be an alert somewhere saying \"this file has been modified since the last verified commit\"?  I wonder if something is broken in the tooling.</p>\n<p>We have that</p>\n<ol>\n<li><code>Algebra/Order/Monoid/WithZero/Defs</code> was ported in <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> modelled on <time datetime=\"2022-12-03T22:52:00Z\">2022-12-03T23:52:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/tree/dad7ecf9a1feae63e6e49f07619b7087403fb8d4\">dad7ecf9a1feae63e6e49f07619b7087403fb8d4</a> </li>\n<li><time datetime=\"2022-12-04T17:00:00Z\">2022-12-04T18:00:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/pull/17465\">#17465</a> modified the file in mathlib3</li>\n<li><time datetime=\"2022-12-06T04:12:00Z\">2022-12-06T5:12:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib/pull/17820\">#17820</a> modified the file again in mathlib3</li>\n<li><time datetime=\"2022-12-06T13:59:00Z\">2022-12-06T14:59:00+01:00</time> <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a> was merged into mathlib4</li>\n<li><time datetime=\"2022-12-07T05:18:00Z\">2022-12-07T06:18:00+01:00</time> the bot marked the file in mathlib3 as frozen.</li>\n</ol>\n</blockquote>\n<p>Also note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_comm_monoid_with_zero.to_zero_le_one_class\">docs#linear_ordered_comm_monoid_with_zero.to_zero_le_one_class</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid.to_zero_le_one_class\">docs#canonically_ordered_add_monoid.to_zero_le_one_class</a> were already in <code>algebra/order/monoid/with_zero/def</code> before <a href=\"https://github.com/leanprover-community/mathlib/tree/dad7ecf9a1feae63e6e49f07619b7087403fb8d4\">dad7ecf9a1feae63e6e49f07619b7087403fb8d4</a>.</p>",
        "id": 314722636,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1670519280
    },
    {
        "content": "<p>I see.  So in fact both <code>dad7ecf9a1feae63e6e49f07619b7087403fb8d4</code> mathlib3 and current mathlib3 have the two <code>zero_le_one_class</code> instances in that file.  But the people reviewing <a href=\"https://github.com/leanprover-community/mathlib4/pull/851\">mathlib4#851</a>, aware of the general chaos around <code>zero_le_one_class</code>, incorrectly assumed that their deletion was deliberate and supposed to match a mathlib3 change.</p>",
        "id": 314723675,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670519633
    },
    {
        "content": "<p>One more reason not to refactor right when the port hits!</p>",
        "id": 314724135,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670519768
    },
    {
        "content": "<p>32 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.23port-status.20not.20showing.20modified.20files\">#mathlib4 &gt; #port-status not showing modified files</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 314744425,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670524636
    }
]