[
    {
        "content": "<p>Hi, I am back for more bugs. I am not sure why the following is slow. What is the \"type checking\" in question? Isn't everything just <code>Nat</code>? lol. Also, if you remove the <code>rewrite</code>, the problem goes away. If you replace <code>digitsLen</code> with a simpler function like <code>fun a =&gt; a + 1</code>, the problem goes away. If you make <code>128</code> bigger, it gets even worse.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">digitsLen</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> type checking took 6.1s -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"n\">digitsLen</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">977778</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sum_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 401672206,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699843788
    },
    {
        "content": "<p>Not sure if <a href=\"#narrow/stream/287929-mathlib4/topic/Slow.20rfl.20.2F.20Nat.2Elog/near/401276216\">this</a> is related.</p>",
        "id": 401672252,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699843804
    },
    {
        "content": "<p>Don't forget that propositions are types, and theorems have types, etc.</p>\n<p>Probably something is being unfolded, but I didn't look into it beyond noticing that if you give arguments explicitly it's fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"n\">digitsLen</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">977778</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sum_mul</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">range</span> <span class=\"mi\">128</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">digitsLen</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 401673006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699844265
    },
    {
        "content": "<p>I see, I also think the sum over the range is unfolded, but not sure why it is happening. Your fix works so thanks! :)</p>",
        "id": 401673305,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699844423
    }
]