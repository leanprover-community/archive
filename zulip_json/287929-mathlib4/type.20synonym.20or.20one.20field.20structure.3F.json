[
    {
        "content": "<p>If X^new is \"X but with a different typeclass\", then what governs whether we use a type synonym or a one-field structure when defining it? <br>\nExamples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OrderDual</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"n\">α</span>\n</code></pre></div>\n<p>(changing &lt;= to &gt;=) is a type synonym, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PreOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The element of `PreOpposite α` that represents `x : α`. -/</span> <span class=\"n\">op'</span> <span class=\"o\">::</span>\n  <span class=\"sd\">/-- The element of `α` represented by `x : PreOpposite α`. -/</span> <span class=\"n\">unop'</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PreOpposite</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>(changing a * b to b * a) is a one field structure.</p>",
        "id": 401827920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699902192
    },
    {
        "content": "<p>I think the answer is: \"do we want to abuse defeq?\" If so, then we use the former. If not, then the latter. But I could be wrong.</p>",
        "id": 401828189,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699902286
    },
    {
        "content": "<p>I think the answer is a pragmatic one: we had performance issues during the port and <code>MulOpposite</code> fell into our firing line</p>",
        "id": 401828205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699902296
    },
    {
        "content": "<p>Both of these are good examples of types where a synonym is more useful than a one-field structure, as in both cases it's reasonable to want a \"very\" canonical identification between <code>F (F X)</code> and <code>X</code></p>",
        "id": 401828315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699902359
    },
    {
        "content": "<p>Well, throughout the order library we're always doing <code>lemma Antitone.... := Monotone.... (α := αᵒᵈ)</code></p>",
        "id": 401828383,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699902378
    },
    {
        "content": "<p>For types like <code>Set</code>, I think we could switch to a one-field structure, because we almost never abuse defeq (except for in analysis somewhere where we didn't like the notation...)</p>",
        "id": 401828553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699902471
    },
    {
        "content": "<p>A good example of the case where a one-field structure would be a good idea is <code>AddMonoidAlgebra</code>; there's no use in any type defeq. Unfortunately, the tradeoff is between:</p>\n<ul>\n<li>Having lots of ways to shoot yourself in the foot</li>\n<li>Having to write a very large amount of boilerplate</li>\n</ul>",
        "id": 401828742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699902562
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/7932\">#7932</a> for an example of what writing that boilerplate looks like</p>",
        "id": 401828789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699902583
    }
]