[
    {
        "content": "<p>Sometimes a structure might have two plausible instances of a typeclass but one is obviously the canonical one, like <code>PartialOrder Nat</code> from <code>Nat.lt</code> when <code>Dvd.dvd</code> could also define one. Sometimes there's no obvious one like <code>CommMonoid</code>, and then people use different notions for the different instances like <code>CommMonoid</code> and <code>AddCommMonoid</code> e.g. in <code>Nat</code> too. But what if it's somewhere in-between?</p>\n<p>We've been looking at <code>Bitvector</code> a bit and there there's different variants of a bunch of operations for both signed and unsigned bitvectors. Unsigned bitvectors seems to be a sensible default, for stuff typeclass instances like <code>Preorder</code> (for which there's already an instance, albeit a pretty old one), but also things like <code>ShiftRight</code> or even <code>Div</code> are different for signed or unsigned bitvectors. It probably doesn't make sense to define their own typeclasses for the signed variants, it's not like it's something that arises all over like <code>AddCommMonoid</code>. There seems to be four distinct options here:</p>\n<ul>\n<li>define no instances for anything and just prove stuff again if we need it</li>\n<li>define a new type (e.g. <code>SignedBitvector</code>) and prove everything twice for both types and have to deal with converting back and forth explicitly</li>\n<li>define 1 default instance (here, concretely, for unsigned bitvectors) and treat the other version like a less important one</li>\n<li>define 2 instances and put them away <code>scoped</code> under a namespace, in the same spirit of <code>protected</code> definitions.</li>\n</ul>\n<p>I like the last one because if we do that, if we open that namespace, everything works seamlessly for that structure, and we can choose which structure we work with explicitly. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> pointed out that then sometimes say a rewrite might not work without passing an explicit typeclass instance, if the namespace is closed. I can see why this version of hiding things under a namespace might seem evil, but I wanted to hear other opinions, as none of the options seems clearly like the best here.</p>",
        "id": 369783723,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687800772
    },
    {
        "content": "<p>I'd definitely define a new type... would it really double the proofs? You already need to prove correctness for both signed and unsigned operations separately, no?</p>",
        "id": 369784313,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687800909
    },
    {
        "content": "<p>Sure, for things that are different. I guess for the ones that are the same the proofs would be fairly trivial by just unfolding the type alias. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 369785125,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687801090
    },
    {
        "content": "<p>The proof might be defeq, even :)</p>",
        "id": 369785676,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687801218
    },
    {
        "content": "<p>You might even not have to copy the name into the new namespace, since I think the name resolution algorithm unfolds the head term if it can't find any matching names</p>",
        "id": 369786163,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687801332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Different.20Instance.20on.20same.20structure/near/369786163\">said</a>:</p>\n<blockquote>\n<p>You might even not have to copy the name into the new namespace, since I think the name resolution algorithm unfolds the head term if it can't find any matching names</p>\n</blockquote>\n<p>that went a bit over my head <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> meaning that <code>MyType.someTheorem</code> would be found if I just write <code>someTheorem</code> on an element of the alias? That'd be pretty cool indeed! </p>\n<p>I guess I'm not sure what the best way is to define a type alias like that, as <code>@abbrev</code> will make the definition reducible for typeclass synthesis. Looking around in <code>Mathlib/GroupTheory/GroupAction/ConjAct.lean</code> there's a definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A type alias for a group `G`. `ConjAct G` acts on `G` by conjugation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ConjAct</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>But that doesn't seem to work e.g. if I try to copy <code>ConjAct</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyNat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">LT</span> <span class=\"n\">Nat</span><span class=\"o\">⟩</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  { lt := LT Nat }</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  LT Nat</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type : Type 1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  MyNat → MyNat → Prop : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 369791358,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1687802543
    },
    {
        "content": "<p>Hm, I might be wrong. Let me search around zulip for a moment</p>",
        "id": 369802655,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687805245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo'</span> <span class=\"o\">:=</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.bar</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo'</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"k\">#eval</span> <span class=\"n\">foo.bar</span>\n</code></pre></div>\n<p>is what I was talking about</p>",
        "id": 369806340,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687806212
    },
    {
        "content": "<p>if you want to copy instances across defs, you generally have to do something like <code>instance : Foo X := inferInstanceAs (FooDef X)</code></p>",
        "id": 369806673,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687806287
    },
    {
        "content": "<p>Try <code>instance : LT MyNat := inferInstanceAs (LT Nat)</code></p>",
        "id": 369844281,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1687817196
    }
]