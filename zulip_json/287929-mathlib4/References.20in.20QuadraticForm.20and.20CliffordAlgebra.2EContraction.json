[
    {
        "content": "<p>There are a few empty references in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuadraticForm#doc\">docs#QuadraticForm</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CliffordAlgebra.contractLeft#doc\">docs#CliffordAlgebra.contractLeft</a> , namely:</p>\n<ul>\n<li><code>[izhakian2016][]</code>, which seems to be <code>[Zur Izhakian et al., *Quadratic and symmetric bilinear forms on modules with unique base over a semiring*, Documenta Mathematica 21 (2016): 773-808.][izhakian2016]</code></li>\n<li><code>[grinberg_clifford_2016][]</code>, which seems to be <code>[Darij Grinberg, *The Clifford algebra and the Chevalley map - a computational approach*][grinberg_clifford_2016]</code></li>\n<li><code>[bourbaki2007][]</code>, which seems to be <code>[N. Bourbaki, *Elements de Mathematique: Algebre*, Chapitre 9 , Springer 2007][bourbaki2007]</code></li>\n</ul>\n<p>I have 4 questions:</p>\n<ol>\n<li>Is it better to fill in these references? (I can PR them)</li>\n<li>Is the style above consistent with Mathlib4's convention about it? (I've tried to be consistent with existing references in Mathlib)</li>\n<li>Is the raw render of references intended? (This format is not exactly Markdown, so it doesn't render to links, footnotes or anything, just raw brackets with full title and the shot ref)</li>\n<li>Since the render is raw, what if I wish to add links, particularly for <code>[grinberg_clifford_2016]</code>, how should I do it? (Found no precedent in Mathlib)</li>\n</ol>\n<p>Sorry for the nitpick, but I always wished for good references in Mathlib, although the actual implementation usually deviates from references in a non-trivial manner (sometimes worthy of a new paper).</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , as the first one is yours.</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, as the last 2 are yours.</p>",
        "id": 400464524,
        "sender_full_name": "Utensil Song",
        "timestamp": 1699248461
    },
    {
        "content": "<p>They should be added to the bibfile I think.</p>",
        "id": 400465908,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1699249615
    },
    {
        "content": "<p>Thanks for the pointer, I see, but it seems that the <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/docs/references.bib\">bibfile</a> is not used by doc-gen4 to render the references while doc-gen3 <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fdoc-gen%20bib&amp;type=code\">does</a>.</p>",
        "id": 400466096,
        "sender_full_name": "Utensil Song",
        "timestamp": 1699249794
    },
    {
        "content": "<p>Yeah, it would be great if Someone(tm) fixed that :)</p>",
        "id": 400469688,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699252135
    },
    {
        "content": "<p>I think the idea was that <code>[refname][]</code> would be expanded to the full name by doc-gen4, but obviously that isn't the case</p>",
        "id": 400475341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699255452
    },
    {
        "content": "<p>I'm pretty sure this is actually legal markdown, in the presence of an eventual <code>[refname]: url</code> or similar.</p>",
        "id": 400475472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699255539
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/leanprover/doc-gen4/pull/147\">leanprover/doc-gen4#147</a></p>\n<p>It seems not too difficult to adapt the doc-gen3 python script for the purpose, but eventually it needs to generate a Lean file for doc-gen4 to consume.</p>\n<p>The more tricky parts would be:</p>\n<ol>\n<li>to include into doc-gen4, it's preferable to not use Python (doc-gen4 is pure Lean) but only CLI tools and Lean, such adaptation can't reuse the Python script</li>\n<li>for an outline and referencing, maybe every entry need to be a definition in the Lean file, not just some markdown in comments</li>\n<li>refer by something like <code>[refname][]</code> could be parsed similar to what's done in<code>extendAnchor</code>or <code>autoLink</code> in <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/DocString.lean\"><code>DocString</code></a></li>\n<li>doc-gen3 has support for <a href=\"https://leanprover-community.github.io/mathlib_docs/references.html\">back-referencing</a>, which would need to collect the files/declarations referring to a bib entry.</li>\n</ol>",
        "id": 400484720,
        "sender_full_name": "Utensil Song",
        "timestamp": 1699260137
    },
    {
        "content": "<p>Looks like pybtex can convert to yaml. Is there a yaml parser in lean already?</p>",
        "id": 400487620,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699261321
    },
    {
        "content": "<p>Not that I can find (searched Zulip and Github).</p>\n<p>Compared to depending on parsing YAML (likely a FFI to <code>libyaml</code> which is an event-based low-level parser, or simply using parsec as doc-gen4 did with simple xml) or bibfile (many <a href=\"http://artis.imag.fr/~Xavier.Decoret/resources/xdkbibtex/bibtex_summary.html\">quirks</a>), <a href=\"https://docs.pybtex.org/formats.html?highlight=yaml#output-formats\">generating Markdown</a> by pybtex then parse with <code>CMark</code> is more immediately feasible if we only need the list of <code>refname</code>s as metadata.</p>",
        "id": 400515685,
        "sender_full_name": "Utensil Song",
        "timestamp": 1699271592
    },
    {
        "content": "<p>But if already using pytex, better just choose to depend on the old Python script for now.</p>",
        "id": 400516165,
        "sender_full_name": "Utensil Song",
        "timestamp": 1699271763
    }
]