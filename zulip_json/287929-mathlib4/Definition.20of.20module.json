[
    {
        "content": "<p>Hi all, consider the following definition of modules</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.Ring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">isAddCommMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span>\n  <span class=\"n\">isDistribMulAction</span> <span class=\"o\">:</span> <span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>This allows us to use the <code>Blundled</code> APIs to construct the concrete category of modules in analogy to that of other algebraic stuctures</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.ConcreteCategory.Bundled</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">def</span> <span class=\"n\">ModuleCat'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Bundled</span> <span class=\"o\">(</span><span class=\"n\">Module'</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However one drawback is that it breaks the inheritance of <code>Module'</code> to <code>DistribMulAction</code>, is there other reasons why it shouldn't be done this way?</p>",
        "id": 403494448,
        "sender_full_name": "Qi Ge",
        "timestamp": 1700616334
    },
    {
        "content": "<p>This is explained in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html\">https://leanprover-community.github.io/mathematics_in_lean/C07_Hierarchies.html</a></p>",
        "id": 403495322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700616730
    },
    {
        "content": "<p>I understand why <code>DistribMulAction</code> and (for that nature <code>AddCommMonoid</code>) cannot be inferred from a module defined this way, but my point is exactly that! I think <code>Blundled</code> captures well the algebraic hierarchy of \"sets with extra structures\", and gives a natural way to construct their concrete categories and forgetful functors via <code>CategoryTheory.BundledHom.mkHasForget₂</code>. And thus shouldn't the typeclass for module be made to work with <code>Bundled</code>?</p>",
        "id": 403502436,
        "sender_full_name": "Qi Ge",
        "timestamp": 1700620199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> As Patrick says there's a good reason why the <code>AddCommMonoid</code> instance is not bundled as part of the <code>Module</code> class, specifically because it would cause lengthy typeclass searches. That means that, unfortunately, you can't use the <code>Bundled</code> construction to construct the category of modules, but it's easy enough to make a bespoke structure for the category of modules (which is indeed what's done in the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleCat#doc\">docs#ModuleCat</a> ).</p>",
        "id": 403505429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700621566
    },
    {
        "content": "<p>Besides, I think that <code>Bundled</code> isn't as useful in Lean4 as it used to be in Lean3, and this has caused difficulties issues when porting some files involving algebraic categories.</p>",
        "id": 403505653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700621667
    },
    {
        "content": "<p><code>ModuleCat</code> is more or less doing exactly the bundled approach above. What motivates my question is that it feels to me there are too many non-mathematical bookkeeping defeq lemmas dealing with coercion in <code>Mathlib.Algebra.Category.ModuleCat.Basic</code>. When I'm thinking about having a group acting on a ring and its module (and possibly topology comes into play) there is a long chain in the hierarchy, it seems highly inefficient having to add all the lemmas to make simplifiers work well(?) and I was hoping that <code>Bundled</code> reduces some redundancy. (I haven't really think this through though so maybe this is also not the case.)</p>",
        "id": 403508291,
        "sender_full_name": "Qi Ge",
        "timestamp": 1700622842
    },
    {
        "content": "<p>It's probably correct to think of the algebraic categories as just wrappers around the algebraic constructions using the typeclass system. These wrappers are mostly just there so that the algebraic categories can interact with other categories and the category theory library in general. When you do actual algebra, you mostly just deal with types and classes, not categories. It's important to be able to go back and forth between the two approaches though, which is where all these boilerplate lemmas come into play.</p>",
        "id": 403509042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700623185
    },
    {
        "content": "<p>Imagine having to show that forgetful functor and \"going to typeclass\" need to commute with one another, on both objects and morphisms in a long of hierarchy... I hoped there is some elegant \"functorial\" way to construct categories from typeclasses. Sad to see that category really is hard <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 403509770,
        "sender_full_name": "Qi Ge",
        "timestamp": 1700623519
    },
    {
        "content": "<p>So if you have a group <code>G</code> and a ring <code>R</code> with a <code>G</code>-action, as well as an <code>R</code>-module with a compatible <code>G</code> action (as in the case of Galois representations that you know), then the right approach is probably to start by defining the typeclass, keeping in mind what's written in the section of <code>mathematics in lean</code> that Patrick mentioned since now there are <em>three</em> type parameters, and only then define the category.</p>",
        "id": 403509797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700623535
    },
    {
        "content": "<p>What do you mean by \"going to typeclass\"? In practice the commutativity of all such things should be true \"by rfl\" if things are set up correctly.</p>",
        "id": 403510036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700623646
    },
    {
        "content": "<p>I have constructed the category of rings with group action with existing type class. I was trying to cheat with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action#doc\">docs#Action</a> and just showing that they are equivalent requires many of the <code>rfl</code> lemma. it feels messy. Maybe it just takes some getting used to it.</p>",
        "id": 403510643,
        "sender_full_name": "Qi Ge",
        "timestamp": 1700623962
    },
    {
        "content": "<p>Aha, okay in this case I can imagine things getting tedious because you're going from category theory to algebra, whereas the rest of the library goes the other way around :)</p>",
        "id": 403510964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700624138
    },
    {
        "content": "<p>In group cohomology we have to go in both directions and it's not always plain sailing</p>",
        "id": 403543127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700641884
    }
]