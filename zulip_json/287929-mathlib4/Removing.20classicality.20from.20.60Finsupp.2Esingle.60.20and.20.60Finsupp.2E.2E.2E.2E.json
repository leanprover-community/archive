[
    {
        "content": "<p>I noticed that as-is you can’t <code>#eval</code> code involving finitely supported functions defined using the nice <code>fun₀</code> notation—which is counterintuitive, as all of the data is finite.</p>\n<p>The issue is just that we use classicality to get decidable equality on the domain and codomain types. Would it be reasonable to demand <code>DecidableEq</code> instances in <code>single</code> and <code>update</code>, and then turn on classicality when necessary to supply those instances? </p>\n<p>(Or is this not how it works? I’m making some assumptions; I haven’t worked much with classicality in mathlib.)</p>",
        "id": 406978970,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702160456
    },
    {
        "content": "<p>I already have an open PR attempting to do this</p>",
        "id": 406979005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160509
    },
    {
        "content": "<p>I had the impression that DFinsupp is the decidable one though, right?</p>",
        "id": 406979051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702160534
    },
    {
        "content": "<p>But in the short term, the answer is \"use DFinsupp\"</p>",
        "id": 406979054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160536
    },
    {
        "content": "<p>Yes, but that's not what the D is supposed to mean</p>",
        "id": 406979068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160553
    },
    {
        "content": "<p>Although, as far as I understand <code>D</code> is for dependent.</p>",
        "id": 406979079,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702160567
    },
    {
        "content": "<p>Eric, we seem to have crossed messages!</p>",
        "id": 406979098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702160594
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions\">https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions</a></p>",
        "id": 406979165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160645
    },
    {
        "content": "<p>Would using DFinsupp require changing my types everywhere? If so I might just hand-roll decidable versions of <code>single</code> and <code>update</code> and override the macro in the meantime; it’s just scratch work, and I don’t plan on PRing anything in the short term. :)</p>",
        "id": 406979341,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702160744
    },
    {
        "content": "<p>Yes, it not only means adjusting your types but also defining a dfinsupp version of the syntax!</p>",
        "id": 406979410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160779
    },
    {
        "content": "<p>Though it would be cool to have a dfinsupp version anyway</p>",
        "id": 406979425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160797
    },
    {
        "content": "<p>Especially if we can use one syntax, and have it use the expected type to disambiguate</p>",
        "id": 406979458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Removing.20classicality.20from.20.60Finsupp.2Esingle.60.20and.20.60Finsupp.2E.2E.2E.2E/near/406979005\">said</a>:</p>\n<blockquote>\n<p>I already have an open PR attempting to do this</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6317\">#6317</a>, though it does not pass CI</p>",
        "id": 406979555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160937
    },
    {
        "content": "<p>Ah, this doesn't really solve the problem, as it still remains non-computable</p>",
        "id": 406979590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702160978
    },
    {
        "content": "<p>(because it only adds <code>DecidableEq ι</code> not <code>DecidableEq α</code>)</p>",
        "id": 406979681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702161041
    },
    {
        "content": "<p>But it’s halfway there! :)</p>",
        "id": 406979692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702161056
    },
    {
        "content": "<p>It has the merit of doing the half of the refactor that is shared between your proposal and replacing finsupp with an alias for dfinsupp</p>",
        "id": 406979709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702161073
    },
    {
        "content": "<p>Where the second halves of those refsctors diverge</p>",
        "id": 406979717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702161088
    },
    {
        "content": "<p>(also, please could you add this thread to the list of threads on the wiki page I link above?)</p>",
        "id": 406979851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702161214
    },
    {
        "content": "<p>(Done—had to run right as that message came in :P)</p>",
        "id": 406982943,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702164287
    }
]