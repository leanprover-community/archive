[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/!4.233333.20Data.2EZMod.2EQuotient/near/359083427\">said</a>:</p>\n<blockquote>\n<p>What the heck is going on here BTW? I have an obscure error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Subgroup</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Normal.toAddSubgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">AddSubgroup.Normal</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.toAddSubgroup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conj_mem</span> <span class=\"o\">:=</span> <span class=\"n\">Normal.conj_mem</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Normal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientAddEquivOfEq</span> <span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">toAddSubgroup</span> <span class=\"n\">S</span> <span class=\"bp\">≃+</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.quotientKerEquivOfSurjective</span>\n    <span class=\"o\">(</span><span class=\"n\">MonoidHom.toAdditive</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">IR check failed at 'foo._rarg', error: unknown declaration 'QuotientAddGroup.quotientKerEquivOfSurjective'</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">QuotientAddGroup.quotientKerEquivOfSurjective</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p>Edit: fixed by marking <code>foo</code> noncomputable. That's a pretty weird way to tell me to do that :-/</p>\n</blockquote>\n<p>Did we diagnose failure in IR here?</p>",
        "id": 359759114,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684527211
    },
    {
        "content": "<p>I fixed it by searching for IR check.failed and discovering that they had shown up several times on Zulip and were always fixed by making the declaration noncomputable.</p>",
        "id": 359759799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684527437
    },
    {
        "content": "<p>Doesn't that just turn off the code generation?</p>",
        "id": 359759883,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684527471
    },
    {
        "content": "<p>Yes, this means that <code>quotientKerEquivOfSurjective</code> was not compiled (e.g. because it's marked <code>noncomputable</code>).</p>",
        "id": 359760021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684527523
    },
    {
        "content": "<blockquote>\n<p>For a <code>computable</code> version, see <code>QuotientGroup.quotientKerEquivOfRightInverse</code>.</p>\n</blockquote>",
        "id": 359760055,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684527537
    },
    {
        "content": "<p>Right now there's a lot of definitions unnecessarily marked <code>noncomputable</code>.  This will change after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4097\">!4#4097</a>.</p>",
        "id": 359760205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684527595
    },
    {
        "content": "<p>Ok. I just ran into another incident. It turned out not be important for progress. Should I record it?</p>",
        "id": 359760766,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684527804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/IR.20failure.20in.20example/near/359760205\">said</a>:</p>\n<blockquote>\n<p>Right now there's a lot of definitions unnecessarily marked <code>noncomputable</code>.  This will change after <a href=\"https://github.com/leanprover-community/mathlib4/pull/4097\">!4#4097</a>.</p>\n</blockquote>\n<p>Will it? IIRC Lean 4 doesn't complain if you marked something <code>noncomputable</code> that was actually computable.</p>",
        "id": 359771399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531855
    },
    {
        "content": "<p>It will change in the sense that <a href=\"https://github.com/leanprover-community/mathlib4/pull/4097\">!4#4097</a> removes countless noncomputable markers, as well as the reason why those were added in the first place (missing code for <code>.rec</code>).</p>",
        "id": 359771660,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684531973
    }
]