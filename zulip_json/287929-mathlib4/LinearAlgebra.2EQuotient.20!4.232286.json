[
    {
        "content": "<p>This file is also unimaginably slow (cf. <a href=\"#narrow/stream/287929-mathlib4/topic/linear_algebra.2Efinsupp.20!4.232277\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/linear_algebra.2Efinsupp.20!4.232277</a>). It's having trouble (slow, but successful) with <code>rfl</code> proofs. I haven't investigated much yet.</p>",
        "id": 327881795,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676411992
    },
    {
        "content": "<p>I managed to finish this (i.e., it builds and lints), but there are a few issues I think still need to be addressed:</p>\n<ol>\n<li>Adding type ascriptions to <code>mk</code> or <code>mk x</code> and friends greatly speeds up elaboration issues. (this is just for your information and fixes the <code>rfl</code> issues mentioned above)</li>\n<li>What is the proper casing convention for <code>mkq</code> or <code>liftq</code> (and variants). Is is <code>mkq</code>, or <code>mkQ</code>?</li>\n<li>How should <code>submodule.comap_mkq.rel_iso</code> be called according to our naming conventions?</li>\n<li>Why can't Lean fill in <code>optParams</code> automatically in <code>simp</code> or <code>rw</code>?  (This is <em>super</em> inconvenient)</li>\n<li>Why did I need to add an <code>optParam</code> in <code>Submodule.Quotient.equiv_apply</code> that wasn't needed in Lean 3, and why didn't <code>simps</code> generate this lemma?</li>\n<li>There are some instances I feel like we may want to be <code>default_instance</code>s, but I'm not sure.</li>\n</ol>",
        "id": 328048947,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676477327
    },
    {
        "content": "<p>Re2: I would prefer <code>mkq</code> and <code>liftq</code>.<br>\nRe3: The current name <code>Submodule.ComapMkq.relIso</code> looks good to me.</p>",
        "id": 328064716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676481531
    },
    {
        "content": "<p>Sorry, Johan, just to confirm about 3: you realize that there is no <code>def</code> called <code>comapMkq</code>, right? It's just <code>comap_mkq</code>, which is a proof of some prop.</p>",
        "id": 328087399,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676488099
    },
    {
        "content": "<p>hmm... ok, now I'm in doubt again what the naming convention wants...</p>",
        "id": 328087936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676488275
    },
    {
        "content": "<p>Yeah, this seems like an edge case. I think my feeling is that the name is just entirely wrong (even in Lean 3). I think it should be something like <code>Submodule.comapMkqRelIso</code> or <code>RelIso.submoduleComapMkq</code>. I don't htink there is any reason for a secondary namespace.</p>",
        "id": 328088557,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676488445
    },
    {
        "content": "<p>Re: 2, I think it “should” be <code>mkQ</code> and <code>liftQ</code>, since <code>q</code> is an abbreviation for a different word (make + quotient) so there’s a casing boundary. We write things like <code>getI</code> and <code>mapM</code>, and this is of the same form. But, if they’re very widely used names prior to this file and are sufficiently lexicalized into their own thing, like <code>foldr</code> and [other prominent example I’m not thinking of], I think <code>mkq</code>, <code>liftq</code> is fine—but I can’t speak to whether that’s really the case.</p>\n<p>My tentative guess is they’re not though…if that’s true, then the <code>liftQ</code> case is pretty unambiguous imo, and I think there’s a strong case for <code>mkQ</code>.</p>",
        "id": 328090535,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676489052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you know what's going on with item 4+5 above?</p>",
        "id": 328190327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676540255
    },
    {
        "content": "<p>simp and rw have never inferred optional parameters</p>",
        "id": 328199918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676543257
    },
    {
        "content": "<p>So in Lean 3 this was also fake?</p>",
        "id": 328200036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676543294
    },
    {
        "content": "<p>?</p>",
        "id": 328200042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676543298
    },
    {
        "content": "<p>I guess I don't know the context here</p>",
        "id": 328200066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676543310
    },
    {
        "content": "<p>I agree with thomas re: <code>mkQ</code> and <code>liftQ</code>, those look more consistent with the rest of the naming convention to me</p>",
        "id": 328200267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676543374
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2286/files/78a7161fdd8dd5b3edeb145628f7cdec5c92a088..ca4ff42c2c4e133e8bf69c6710619ffe3261cf65#diff-231484eaa15206e44d62480604548dfef568324265aba7d3b34a6c1affdb42bbR454-R459\">https://github.com/leanprover-community/mathlib4/pull/2286/files/78a7161fdd8dd5b3edeb145628f7cdec5c92a088..ca4ff42c2c4e133e8bf69c6710619ffe3261cf65#diff-231484eaa15206e44d62480604548dfef568324265aba7d3b34a6c1affdb42bbR454-R459</a> suggests that Lean 3 was smarter than Lean 4. But maybe for different reasons.</p>",
        "id": 328200412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676543417
    },
    {
        "content": "<p>the proof looks rather different. In the first version you wouldn't even need the optParam in <code>mapq_comp</code> (which is not even being passed to <code>simp</code>?) since everything is determined by unification</p>",
        "id": 328201328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676543701
    },
    {
        "content": "<p>Sorry, I missed a place where I should have put a porting note. You're right that that proof looks quite different. A better example of the way Lean 4 is failing in comparison to Lean 3 is here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2286/files/78a7161fdd8dd5b3edeb145628f7cdec5c92a088..ca4ff42c2c4e133e8bf69c6710619ffe3261cf65#diff-231484eaa15206e44d62480604548dfef568324265aba7d3b34a6c1affdb42bbR576-R586\">https://github.com/leanprover-community/mathlib4/pull/2286/files/78a7161fdd8dd5b3edeb145628f7cdec5c92a088..ca4ff42c2c4e133e8bf69c6710619ffe3261cf65#diff-231484eaa15206e44d62480604548dfef568324265aba7d3b34a6c1affdb42bbR576-R586</a></p>",
        "id": 328259610,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676559597
    },
    {
        "content": "<p>Regarding naming, I have renamed <code>mkq</code>, <code>liftq</code> and <code>mapq</code> to <code>mkQ</code>, <code>liftQ</code> and <code>mapQ</code>. In addition, I have made <code>Submodule.ComapMkq.relIso</code> into <code>Submodule.comapMkQRelIso</code> and <code>Submodule.ComapMkq.orderEmbedding</code> into <code>Submodule.ComapMkQOrderEmbedding</code> Since there isn't really any reason for the extra namespace.</p>",
        "id": 328353184,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676588558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I think most of your points have been addressed. Could you please update the top comment on the PR page? Which questions remain?</p>",
        "id": 328711576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676745130
    },
    {
        "content": "<p>I've updated the PR comment. Basically, I still don't know why <code>simp</code> and <code>rw</code> need so much information in Lean 4 as compared to Lean 3 in the diff I linked above. I've encountered this kind of thing before in porting, and every time it's a royal pain. I think anything with quotients will only make it worse.</p>\n<p>But if you want to merge the PR so we can proceed, that's fine.</p>",
        "id": 328719018,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676749650
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 328720143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676750453
    }
]