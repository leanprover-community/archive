[
    {
        "content": "<p>Can someone direct me towards extensionality for functors?</p>",
        "id": 382756634,
        "sender_full_name": "Dean Young",
        "timestamp": 1691441685
    },
    {
        "content": "<p>Did you try searching for those two words on the <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs</a>? (try \"functor ext\" in the search box)</p>",
        "id": 382759678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691442680
    },
    {
        "content": "<p>It's a bit confusing because we have both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Functor#doc\">docs#CategoryTheory.Functor</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Functor#doc\">docs#Functor</a>, but hopefully you know which one you want!</p>",
        "id": 382759882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691442731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  This is a pretty good category library.</p>\n<p>I kind of want vertical composition to infer that two functors are equal (perhaps with a type class) by first applying some rewrite rules (Id‚ÇÅ Id‚ÇÇ and associativity in Cat). Is that something this library can do?</p>",
        "id": 383131795,
        "sender_full_name": "Dean Young",
        "timestamp": 1691552006
    },
    {
        "content": "<p>For instance, in many triangle identities I end up having to add in a natural transformation to handle simply associativity of functors, and I think it would be good to try to have it infer that equality on its own so I don't have to add in these extra natural transformations in the rewrite system.</p>",
        "id": 383131915,
        "sender_full_name": "Dean Young",
        "timestamp": 1691552088
    },
    {
        "content": "<p>Such normal forms for natural transformations and functors could make things a lot easier.</p>",
        "id": 383132011,
        "sender_full_name": "Dean Young",
        "timestamp": 1691552153
    },
    {
        "content": "<p>If using the existing category theory library, try <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Functor.ext#doc\">docs#CategoryTheory.Functor.ext</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Functor.hext#doc\">docs#CategoryTheory.Functor.hext</a></p>",
        "id": 383132851,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691552656
    },
    {
        "content": "<p>Based on your <a href=\"https://proofassistants.stackexchange.com/questions/2352/dependent-replacement-in-lean\">PA post</a> (and my currently wrong answer), I think the second is likely what you want.</p>",
        "id": 383133076,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691552812
    },
    {
        "content": "<p>Also, I don't know much about the category theory library, but you might want to play with it more (instead of developing your own).  I think they do have a lot of automation of various forms already in use.  I think the <code>tidy</code> tactic was originally developed for this library, and it looks like now they are using the <code>aesop</code> tactic.</p>",
        "id": 383134806,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691553803
    },
    {
        "content": "<p>I know Lean for the Curious Mathematician has a section on the category theory library complete with a tutorial and exercises to learn it better.  The materials for the 2020 version is on github (<a href=\"https://github.com/leanprover-community/lftcm2020\">https://github.com/leanprover-community/lftcm2020</a>), but that is Lean 3.  The <a href=\"https://lftcm2023.github.io/colloquium/index.html\">2023 version</a> (in September) will cover Lean 4.</p>",
        "id": 383142386,
        "sender_full_name": "Jason Rute",
        "timestamp": 1691554863
    },
    {
        "content": "<p>I think that's what I'll do, and it makes sense to assimilate their approach, but I was worried at first that I would pick up idiosyncrasies, such as that not having all of the fields of the various structures. I also needed to know which extensionality results are actually possible and which are limited in the way of <code>HEq</code>, though lack of CatExt is not critical. I'm more interested in not having to redo things three years from now. It would also help if the tutorials were more systematic, with completed tables and so on.</p>\n<p>I think what I'm going to do is use their category, functor, natural transformation, and prove it makes an example of my \"twocategory\", of which my ‚ÑÇùïíùï• is also an example. Going forward, I'll be able to switch to their ‚ÑÇùïíùï•.Obj, ‚ÑÇùïíùï•.Hom, ‚ÑÇùïíùï•.Idn, ‚ÑÇùïíùï•.Id‚ÇÅ, ‚ÑÇùïíùï•.Id‚ÇÇ, ‚ÑÇùïíùï•.Ass when I start to need more sophisticated maneuvers and help from the community.</p>\n<p>I also have to check out their \"Eilenberg Moore adjunction of a (co)monad\", \"(co)monad corresponding to (co)Eilenberg Moore adjunction\". There are some requirements from what I'll need out of this (I need the canonical maps  out of the (co)Eilenberg (co)Moore adjunctions as functors as well as a commutative triangle involving them).</p>",
        "id": 383145850,
        "sender_full_name": "Dean Young",
        "timestamp": 1691556270
    },
    {
        "content": "<p>The library already has bicategories, and the fact that categories/functors/natural transformations form a bicategory.</p>",
        "id": 383147858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691557355
    },
    {
        "content": "<p>Bicategories, but I wanted strict two category.</p>",
        "id": 383148014,
        "sender_full_name": "Dean Young",
        "timestamp": 1691557431
    },
    {
        "content": "<p>Strict = suffering.</p>",
        "id": 383148329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691557554
    },
    {
        "content": "<p>I took a look at the generators of the bicategory class. I do like how it uses the whiskers.</p>",
        "id": 383148406,
        "sender_full_name": "Dean Young",
        "timestamp": 1691557570
    },
    {
        "content": "<p>What is autoparam?</p>",
        "id": 383148786,
        "sender_full_name": "Dean Young",
        "timestamp": 1691557708
    },
    {
        "content": "<p>Run a tactic to try and fill in the field, so the user can omit it. Read the category theory library -- we don't give any boring proofs, because <code>aesop</code> can do them all.</p>",
        "id": 383150729,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691558594
    },
    {
        "content": "<p>Oh maybe I begin to see.</p>",
        "id": 383150848,
        "sender_full_name": "Dean Young",
        "timestamp": 1691558646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Suppose I wanted to compose two 2-morphisms <code>f : F ‚ü∂  G‚ÇÅ</code>, <code>g : G‚ÇÇ ‚ü∂ H</code>, but <code>G‚ÇÅ</code> and <code>G‚ÇÇ</code> were only equal after applying associativity or a unit law for ordinary composition of functors. For instance, that happens when trying to build the triangle identities. Does this library have a way of inserting that cell on its own maybe or a type class for proving <code>G‚ÇÅ = G‚ÇÇ</code>?</p>",
        "id": 383270461,
        "sender_full_name": "Dean Young",
        "timestamp": 1691585543
    },
    {
        "content": "<p>Can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 383272377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691585871
    },
    {
        "content": "<p>You can always compose with the associator/unitor or in the middle</p>",
        "id": 383273127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691585988
    },
    {
        "content": "<p>Oh ok I get it, it's associator and leftUnitor rightUnitor like Adam says.</p>",
        "id": 383277546,
        "sender_full_name": "Dean Young",
        "timestamp": 1691586635
    },
    {
        "content": "<p>So basically those three are natural isomorphisms and its best to avoid the corresponding equalities.</p>",
        "id": 383283986,
        "sender_full_name": "Dean Young",
        "timestamp": 1691587750
    },
    {
        "content": "<p>These will introduce compositions with identity morphisms under the hood, but in practice <code>simp</code> will get rid of those in proofs.</p>",
        "id": 383285917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691588043
    },
    {
        "content": "<p>You might like <code>‚äó‚â´</code> in the monoidal category library, which automatically inserts associators and unitors when the composition doesn't otherwise typecheck. There is (I think?) a corresponding operator for bicategories as well.</p>",
        "id": 383432362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691622608
    },
    {
        "content": "<p>Yes. For example, <code>‚äó‚â´</code> composes 2-morphisms <code>Œ∑</code> and <code>Œµ</code> without inserting an associator in this image.<br>\n<a href=\"/user_uploads/3121/HtUFiDVrysZ8_2scu7fMh6y2/diagram.png\">diagram.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HtUFiDVrysZ8_2scu7fMh6y2/diagram.png\" title=\"diagram.png\"><img src=\"/user_uploads/3121/HtUFiDVrysZ8_2scu7fMh6y2/diagram.png\"></a></div>",
        "id": 383434768,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1691624228
    },
    {
        "content": "<p>Does this work for Mathlib's bicategory of categories though?</p>",
        "id": 383756757,
        "sender_full_name": "Dean Young",
        "timestamp": 1691700953
    },
    {
        "content": "<p>Can you direct me to the bicategory of categories type?</p>",
        "id": 383756867,
        "sender_full_name": "Dean Young",
        "timestamp": 1691700984
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.bicategory\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.bicategory</a></p>",
        "id": 383758541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691701535
    },
    {
        "content": "<p>In the implementation notes it says that \"In the literature of category theory, a strict bicategory (usually called a strict 2-category) is often defined as a bicategory whose left unitors, right unitors, and associators are identities. We cannot use this definition directly here since the types of 2-morphisms depend on 1-morphisms. For this reason, we use <code>eqToIso</code>, which gives isomorphisms from equalities, instead of identities.\"</p>",
        "id": 383830027,
        "sender_full_name": "Dean Young",
        "timestamp": 1691732037
    },
    {
        "content": "<p>\"Suppose I wanted to compose two 2-morphisms f : F ‚ü∂  G‚ÇÅ, g : G‚ÇÇ ‚ü∂ H, but G‚ÇÅ and G‚ÇÇ were only equal after applying associativity or a unit law for ordinary composition of functors. For instance, that happens when trying to build the triangle identities. Does this library have a way of inserting that cell on its own maybe or a type class for proving G‚ÇÅ = G‚ÇÇ?\"</p>\n<p>It looks like Adam has answered this.</p>\n<p>My next goal is to construct an example of a bicategory.</p>",
        "id": 384074666,
        "sender_full_name": "Dean Young",
        "timestamp": 1691782188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>  Can you help me with those triangle unicode characters in your picture? What are the U####?</p>",
        "id": 384384836,
        "sender_full_name": "Dean Young",
        "timestamp": 1691895110
    },
    {
        "content": "<p>Do you mean the whiskering operators? I don't know the unicode numbers, but I'm typing them by \\lhd and \\rhd in VSCode.</p>",
        "id": 384385413,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1691895422
    },
    {
        "content": "<p>oh ok awesome</p>",
        "id": 384385465,
        "sender_full_name": "Dean Young",
        "timestamp": 1691895455
    },
    {
        "content": "<p>Hovering over a unicode character in VSCode tells you how to type it.</p>",
        "id": 384388303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691896969
    },
    {
        "content": "<p>Take a look at this... exactly what I wanted.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Bicategory</span> <span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">CategoryTheory.Cat.bicategory</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Cat</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">Hom</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">G</span> <span class=\"s2\">\"‚àò\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C‚ÇÅ</span> <span class=\"n\">C‚ÇÇ</span> <span class=\"n\">C‚ÇÉ</span> <span class=\"n\">C‚ÇÑ</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D‚ÇÅ</span> <span class=\"n\">D‚ÇÇ</span> <span class=\"n\">D‚ÇÉ</span> <span class=\"n\">D‚ÇÑ</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"n\">C</span> <span class=\"s2\">\"‚≠¢\"</span> <span class=\"n\">D</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">D</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">B‚ÇÄ</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">B‚ÇÄ</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Cod</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Dom</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ∑</span> <span class=\"o\">:(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Fst</span><span class=\"o\">)}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œµ</span> <span class=\"o\">:(</span><span class=\"n\">Fst</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Cod</span><span class=\"o\">)}</span>\n\n\n\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerLeft</span>\n<span class=\"kd\">notation</span> <span class=\"n\">F</span> <span class=\"s2\">\"‚óÅ\"</span> <span class=\"n\">Œ∑</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerLeft</span> <span class=\"n\">F</span> <span class=\"n\">Œ∑</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerRight</span>\n<span class=\"kd\">notation</span> <span class=\"n\">Œ∑</span> <span class=\"s2\">\"‚ñ∑\"</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerRight</span> <span class=\"n\">Œ∑</span> <span class=\"n\">G</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">Hom</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">id</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">comp</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">associator</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">leftUnitor</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">rightUnitor</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerLeft_id</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerLeft_comp</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">id_whiskerLeft</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">comp_whiskerLeft</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">id_whiskerRight</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">comp_whiskerRight</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerRight_comp</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whiskerRight_id</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whisker_assoc</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">whisker_exchange</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">pentagon</span>\n<span class=\"k\">#check</span> <span class=\"n\">‚ÑÇ</span><span class=\"bp\">ùïíùï•.</span><span class=\"n\">triangle</span>\n\n<span class=\"c1\">-- the first triangle identity</span>\n<span class=\"kd\">def</span> <span class=\"n\">AdjId‚ÇÅ</span>\n <span class=\"o\">(</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Cod</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Dom</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Fst</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Cod</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"n\">Fst</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Fst</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Fst</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- the second triangle identity</span>\n<span class=\"kd\">def</span> <span class=\"n\">AdjId‚ÇÇ</span>\n <span class=\"o\">(</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Cod</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Dom</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"o\">:(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Fst</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Cod</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Œµ</span> <span class=\"bp\">‚ñ∑</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">‚óÅ</span> <span class=\"n\">Œ∑</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Snd</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- definition of an adjunction</span>\n<span class=\"kd\">structure</span> <span class=\"n\">adjunction</span> <span class=\"n\">where</span>\n  <span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n  <span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n  <span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Cod</span>\n  <span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">Dom</span>\n  <span class=\"n\">Œ∑</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Fst</span><span class=\"o\">)</span>\n  <span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">‚àò</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"bp\">‚≠¢</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Cod</span><span class=\"o\">)</span>\n  <span class=\"n\">Id‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">AdjId‚ÇÅ</span> <span class=\"n\">Dom</span> <span class=\"n\">Cod</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span> <span class=\"n\">Œ∑</span> <span class=\"n\">Œµ</span>\n  <span class=\"n\">Id‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">AdjId‚ÇÇ</span> <span class=\"n\">Dom</span> <span class=\"n\">Cod</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span> <span class=\"n\">Œ∑</span> <span class=\"n\">Œµ</span>\n</code></pre></div>",
        "id": 384600428,
        "sender_full_name": "Dean Young",
        "timestamp": 1691969060
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">left_adjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">adjunction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.Dom</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">f.Cod</span> <span class=\"o\">:=</span> <span class=\"n\">f.Fst</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"s2\">\"‡•±\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left_adjoint</span> <span class=\"n\">f</span>\n\n\n\n<span class=\"kd\">def</span> <span class=\"n\">right_adjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">adjunction</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.Cod</span> <span class=\"bp\">‚≠¢</span> <span class=\"n\">f.Dom</span> <span class=\"o\">:=</span> <span class=\"n\">f.Snd</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"s2\">\"õ≤î\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right_adjoint</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 384607661,
        "sender_full_name": "Dean Young",
        "timestamp": 1691972760
    },
    {
        "content": "<p>That unicode dot pair is a hard find.</p>",
        "id": 384607770,
        "sender_full_name": "Dean Young",
        "timestamp": 1691972782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/287929-mathlib4/topic/extensionality.20for.20functors/near/383142386\">said</a>:</p>\n<blockquote>\n<p>I know Lean for the Curious Mathematician has a section on the category theory library complete with a tutorial and exercises to learn it better.  The materials for the 2020 version is on github (<a href=\"https://github.com/leanprover-community/lftcm2020\">https://github.com/leanprover-community/lftcm2020</a>), but that is Lean 3.  The <a href=\"https://lftcm2023.github.io/colloquium/index.html\">2023 version</a> (in September) will cover Lean 4.</p>\n</blockquote>\n<p>I hope the material will be on github and videos online as in past years !</p>",
        "id": 385293602,
        "sender_full_name": "Nicolas Rolland",
        "timestamp": 1692137986
    }
]