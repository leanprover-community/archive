[
    {
        "content": "<p>I defined the <code>Pmf</code> for binominal distributions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">binominal</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Pmf</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">ofFintype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n.choose</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n  <span class=\"bp\">…</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I want to do some calculations about $E[f(X)]$ where $X$ is binominally distributed, and I am trying to find my way around the library. It seems that expected values are written using <code>integral</code> and require a <code>Measure</code>, and I saw that I can turn a <code>Pmf</code> into a measure, so I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"o\">((</span><span class=\"n\">binominal</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMeasure</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but that gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Am I approaching this the wrong way? If not, will this way lead me to a formula involving a finite ∑ somehow?<br>\n(I could just state stuff explicitly as a finite sum, without connecting to the existing infrastructure for probability theory, but that doesn't seem nice.)</p>",
        "id": 382741704,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691436902
    },
    {
        "content": "<p>It works for <code>Pmf.bernoulli</code>, which is already in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.ProbabilityMassFunction.Constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"o\">((</span><span class=\"n\">Pmf.bernoulli</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMeasure</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And it’s because there is a  <code>MeasurableSpace Bool</code> instance. So should there simply be <code>Measurablespace (Fin (n+1))</code> instances?</p>",
        "id": 382742594,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691437173
    },
    {
        "content": "<p>Indeed, writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Fin.instMeasurableSpace</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">comap</span>  <span class=\"n\">Fin.val</span> <span class=\"n\">Nat.instMeasurableSpace</span>\n</code></pre></div>\n<p>make the definition go through. Is that something that should be in <code>Mathlib.MeasureTheory.MeasurableSpace</code> (e.g. as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6431\">mathlib4#6431</a>)?</p>",
        "id": 382743258,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691437370
    },
    {
        "content": "<p>Ah, there is <code>lintegral_fintype</code> to prove <code>∫⁻ (x : α), f x ∂μ = ∑x,  f x * ↑↑μ {x}</code>. But no such lemma for <code>∫ (x : α), f x ∂μ</code> it seems.</p>",
        "id": 382752598,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691440313
    },
    {
        "content": "<p>And for <code>integral</code> the answer is probably “it’s just not done yet”, so I started porting some of the <code>lintegral</code> API to <code>integral</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6446\">https://github.com/leanprover-community/mathlib4/pull/6446</a></p>\n<p>Once this is in, I can combine it with a <code>pmf.ToMeasure {x} = pmf x</code>, and after some shuffling of <code>.toReal</code> I’ll be able to related <code>E[f(X)]</code> for a binomial <code>X</code> to the explicit finite sum formula</p>",
        "id": 382952982,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691500530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Is the expectation of a binomial random variable already in Mathlib at this point?</p>",
        "id": 404751124,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1701220370
    },
    {
        "content": "<p>Not that I know of – only the exponential and normal distributions have landed at this point</p>",
        "id": 404751589,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1701220550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>  It looks like there is <code>PMF.bernoulli</code> on the measure space <code>Bool</code> and then there is <code>PMF.binomial</code> on the measure space <code>Fin (n+1)</code>. But I don't see a binomial on <code>Fin n → Bool</code>, which would be the most natural way to get the expectation as the expectation of a sum.</p>",
        "id": 404753266,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1701221137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/From.20Pmf.20to.20Expectations/near/382752598\">said</a>:</p>\n<blockquote>\n<p>Ah, there is <code>lintegral_fintype</code> to prove <code>∫⁻ (x : α), f x ∂μ = ∑x,  f x * ↑↑μ {x}</code>. But no such lemma for <code>∫ (x : α), f x ∂μ</code> it seems.</p>\n</blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_fintype#doc\">docs#MeasureTheory.integral_fintype</a> .</p>",
        "id": 404796630,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701240560
    },
    {
        "content": "<p><em>Now</em> there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_fintype#doc\">docs#MeasureTheory.integral_fintype</a>  :-)</p>\n<p>I think the expectation of a binomial was the next thing I would have done had I had time to continue that project, but then didn’t get to it. So go for it!</p>",
        "id": 404808165,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701245342
    },
    {
        "content": "<p>Sorry, I did not see the date on those first messages :)</p>",
        "id": 404808504,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701245515
    },
    {
        "content": "<p>Thanks for adding it!</p>",
        "id": 404808598,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701245547
    },
    {
        "content": "<p>We use it a lot in the PFR project</p>",
        "id": 404808676,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701245601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/From.20Pmf.20to.20Expectations/near/404753266\">said</a>:</p>\n<blockquote>\n<p>It looks like there is <code>PMF.bernoulli</code> on the measure space <code>Bool</code></p>\n</blockquote>\n<p>From having tried using it, I want to change it to be Prop-valued.</p>",
        "id": 404810562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701246365
    },
    {
        "content": "<p>And I want to be able to take an average of Bernoulli random variables, so I want something that can be coerced to 0 and 1 in Q. We might need several versions for different purposes.</p>",
        "id": 404811234,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701246662
    }
]