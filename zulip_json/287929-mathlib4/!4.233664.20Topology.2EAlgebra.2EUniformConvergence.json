[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3664\">!4#3664</a> I need help with the five remaining errors in this file; it's on the same critical path as <code>Analysis.Seminorm</code></p>",
        "id": 353017142,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682558977
    },
    {
        "content": "<p>I've fixed a few errors here, but have observed something weird I don't understand. There's a point where an <code>OfNat.ofNat</code> leaks into the goal, where I would have expected to just see <code>0</code>.</p>\n<p>I extracted the problem out into a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- FIXME this declaration is just isolating a problem that occurs below, for diagnosis.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span><span class=\"o\">):</span>\n    <span class=\"bp\">@</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">hom</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span><span class=\"o\">[</span><span class=\"bp\">ùîñ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">SMulHomClass.toFunLike</span> <span class=\"n\">œÜ</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- `OfNat.ofNat` has leaked into the goal: `‚ä¢ OfNat.ofNat 0 x ‚àà V`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>which you can find in this branch <a href=\"https://github.com/leanprover-community/mathlib4/pull/3664\">!4#3664</a>.</p>\n<p>If anyone has a suggestion for a general diagnosis for leaking <code>OfNat.ofNat</code>'s, please let us know!</p>",
        "id": 353026159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682560943
    },
    {
        "content": "<p>(This is not blocking the PR, but still I would like to fix / understand.)</p>",
        "id": 353026214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682560958
    },
    {
        "content": "<p>Actually, the remaining two errors in this PR are caused by the same issue. We could work around them but I'd prefer to just avoid the <code>OfNat.ofNat</code>s here.</p>",
        "id": 353030071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682561767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do you recognise this one?</p>",
        "id": 353030119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682561776
    },
    {
        "content": "<p>Note that in the line <code>convert UniformFun.hasBasis_nhds_of_basis Œ± _ (1 : Œ± ‚Üí·µ§ G) this</code> the type-ascripted <code>1</code> was originally just that, without ascription (in the mathport output)</p>",
        "id": 353035185,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682562787
    },
    {
        "content": "<p>And similarly for the other such <code>convert</code></p>",
        "id": 353035237,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682562796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Usually when you see a <code>OfNat.ofNat 0</code> that means it's a double <code>ofNat</code> expression (i.e. the <code>0</code> is not a raw numeral, which you can tell by hovering on it in the infoview - raw numerals just show <code>0</code> again in the infoview but normal numerals reveal an <code>ofNat</code>)</p>",
        "id": 353041480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564041
    },
    {
        "content": "<p>needless to say, that's not supposed to happen</p>",
        "id": 353041695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564071
    },
    {
        "content": "<p>That's not the case here. The pop-up-infoview just shows <code>0</code> (or <code>1</code> in the other examples).</p>",
        "id": 353043477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682564442
    },
    {
        "content": "<p>in that case it might be a non-canonical term? Ah! the <code>x</code> there is an over-application</p>",
        "id": 353044699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564699
    },
    {
        "content": "<p>core lean doesn't handle over-applications well, Std has a delaborator combinator to handle that</p>",
        "id": 353044857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564728
    },
    {
        "content": "<p>(over-application means that the constructor is applied to more arguments than it is declared to have, which is generally a type error but can be valid if it's a generic function instantiated at a function type)</p>",
        "id": 353045300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564823
    },
    {
        "content": "<p>lean's delaborators usually bail out upon seeing this, but they should instead match the arguments they are expecting and add some parentheses for the rest</p>",
        "id": 353045511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564864
    },
    {
        "content": "<p>in which case it would be printed as <code>0 x ‚àà V</code></p>",
        "id": 353045633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564888
    },
    {
        "content": "<p>Hmm... but here it's not just a pretty-printing issue: a simp lemma is failing to fire.</p>",
        "id": 353047271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682565202
    },
    {
        "content": "<p>what lemma?</p>",
        "id": 353048035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565347
    },
    {
        "content": "<p>the MWE only shows the pretty printing issue</p>",
        "id": 353048195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565380
    },
    {
        "content": "<p>Yeah, you're right. Maybe it is a <em>missing</em> simp lemma, that <code>0 x = 0</code>.</p>",
        "id": 353048981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682565535
    },
    {
        "content": "<p>(But I'm a bit confused what has changed, if such a lemma wasn't already needed in mathlib3.)</p>",
        "id": 353049124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682565560
    },
    {
        "content": "<p>So back in mathlib3 simp is successfully deploying <code>pi.zero_apply</code>. Trying to generate a clear example showing the difference.</p>",
        "id": 353051548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682566010
    },
    {
        "content": "<p>Okay, so indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--- mathlib3:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span><span class=\"o\">[</span><span class=\"bp\">ùîñ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>   <span class=\"c1\">-- succeeds, using `simp only [pi.zero_apply, eq_self_iff_true]`</span>\n\n<span class=\"c1\">--- mathlib4:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span><span class=\"o\">[</span><span class=\"bp\">ùîñ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>    <span class=\"c1\">-- does nothing,</span>\n<span class=\"c1\">-- displays goal as `OfNat.ofNat 0 x = 0`</span>\n</code></pre></div>",
        "id": 353052234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682566158
    },
    {
        "content": "<p>So perhaps the <code>OfNat.ofNat</code> is just a red herring, and Lean 4 will just need a more specific simp lemma here.</p>",
        "id": 353052649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682566233
    },
    {
        "content": "<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := simp)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UniformFun.one_apply</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[to_additive (attr := simp)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UniformOnFun.one_apply</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span><span class=\"o\">[</span><span class=\"bp\">ùîñ</span><span class=\"o\">]</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>has resolved the issues, but I worry that later we will need more of them.</p>\n<p>I guess this is just overusing type synonyms biting us.</p>",
        "id": 353056197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682566946
    },
    {
        "content": "<p>Okay, I've marked this PR as awaiting review now.</p>",
        "id": 353057443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682567202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, if I'm understanding this correctly, those are not the right lemmas to have as simp. Instead you should have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := [simp, norm_cast]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UniformFun.coe_one</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[to_additive (attr := [simp, norm_cast]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UniformOnFun.coe_one</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span><span class=\"o\">[</span><span class=\"bp\">ùîñ</span><span class=\"o\">]</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 353142760,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682581610
    },
    {
        "content": "<p>You can (and should) still have the <code>apply</code> lemmas, but you don't need to tag them as simp (and might get shouted at by the simp-nf linter if you do so).</p>",
        "id": 353143208,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682581675
    },
    {
        "content": "<p>Would you be able to try those in the PR?</p>",
        "id": 353143379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682581696
    },
    {
        "content": "<p>Let's try</p>",
        "id": 353143426,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682581704
    },
    {
        "content": "<p>Ohohoh, that's bad. We're missing the <code>fun_like</code> instance.</p>",
        "id": 353146711,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682582061
    },
    {
        "content": "<p>I would declare this file as not ready to port and fix all that back in mathlib.</p>",
        "id": 353147027,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682582101
    },
    {
        "content": "<p>If you're happy with that, I'll go and fix the design.</p>",
        "id": 353147535,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682582162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233664.20Topology.2EAlgebra.2EUniformConvergence/near/353147535\">said</a>:</p>\n<blockquote>\n<p>If you're happy with that, I'll go and fix the design.</p>\n</blockquote>\n<p>Have a mathlib3 PR ready when you can</p>",
        "id": 353148914,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682582338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, I don't think it is helpful for you to answer for me here!</p>",
        "id": 353164275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>, presumably you want to put <code>FunLike</code> in <code>Topology.Algebra.UniformConvergenceTopology</code>, right? That file has already been ported, so we'll have to do some back and forth to synchronize everything here.</p>",
        "id": 353165702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584717
    },
    {
        "content": "<p>Yeah, unfortunately</p>",
        "id": 353165789,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682584736
    },
    {
        "content": "<p>Perhaps you could verify that you can install the <code>fun_like</code> in the right place in mathlib3, and then directly port the change as part of the current PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/3644\">!4#3644</a>?</p>",
        "id": 353165974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584767
    },
    {
        "content": "<p>That would save an extra round of waiting for PRs, at the cost of having to get the port right manually. :-)</p>",
        "id": 353166126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584789
    },
    {
        "content": "<p>We can still let my mathlib PR run through mathport, right? Then nothing needs to be manual and we can still do everything in one mathlib4 PR.</p>",
        "id": 353166562,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682584847
    },
    {
        "content": "<p>Alternatively we could merge the current PR in the state it's in now, and then once you've installed <code>fun_like</code> successfully the forward port could remove my lemmas?</p>",
        "id": 353166607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584855
    },
    {
        "content": "<p>We could --- I'm just interested in speeding things up if possible as other significant files are downstream of this one, I think.</p>",
        "id": 353166788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682584880
    },
    {
        "content": "<p>Sorry for the mess around these type aliases. If I'm honest it was already painful in mathlib3 so it's not surprising that these are annoying to port. If you have ideas on how to make these cleaner it would be great !</p>",
        "id": 353487400,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1682628685
    },
    {
        "content": "<p>My experience with some affine PRs is that a lot of downstream hacks quickly pile up if a funlike instance is missing</p>",
        "id": 353492304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682629554
    },
    {
        "content": "<p>So it really probably is best to make the mathlib PR first rather than proceed with the fun_like-less version</p>",
        "id": 353492649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682629609
    },
    {
        "content": "<p>I just found Anatole's note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note: we don't declare a `has_coe_to_fun` instance because Lean wouldn't insert it when writing</span>\n<span class=\"c1\">-- `f x` (because of definitional equality with `Œ± ‚Üí Œ≤`).</span>\n</code></pre></div>",
        "id": 353704214,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682667887
    },
    {
        "content": "<p>and indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">uniform_fun.fun_like</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective_id</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí·µ§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ‚ä¢ f a = f a</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 353704482,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682667920
    },
    {
        "content": "<p>So either we make <code>uniform_fun</code> irreducible, or we make it a structure.</p>",
        "id": 353705062,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682667990
    },
    {
        "content": "<p>... or we give up on <code>fun_like</code></p>",
        "id": 353705174,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682668008
    },
    {
        "content": "<p>Given the information I know have, I think it is acceptable to go forward with Scott's simp lemmas and no <code>fun_like</code> for now. The situation is analogous to <code>set</code>, which is semireducible too. And indeed there were <code>set</code> lemmas misfiring on predicates in Lean 3.</p>",
        "id": 353712047,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1682668942
    }
]