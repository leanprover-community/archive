[
    {
        "content": "<p>The following surprsies me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.primesBelow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">n.primesBelow</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Set.indicator</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p.Prime</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Set.sum_indicator_subset</span> <span class=\"n\">f</span> <span class=\"n\">Finset.mem_of_mem_filter</span> <span class=\"n\">using</span> <span class=\"mi\">2</span> <span class=\"c1\">-- `with m hm` does not work</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After <code>convert</code>, the tactic state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Set.indicator</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">Set.indicator</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>Trying to name the hidden variables by appending <code>with m hm</code> does not work: there is no error message, but the tactic state is the same as before. This looks like a bug to me.<br>\n(Of course, I can (and do) rename them via <code>rename_i</code>, but it should be possible to give them names through the call to <code>convert</code>.)</p>",
        "id": 401526875,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699720035
    },
    {
        "content": "<p>Yes, there's some sort of bug in <code>with</code> that I've noticed and haven't tracked down yet. Here's a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">Set.sum_indicator_subset</span> <span class=\"n\">f</span> <span class=\"n\">Finset.mem_of_mem_filter</span> <span class=\"n\">using</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">hm</span>\n</code></pre></div>",
        "id": 401532138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699725172
    },
    {
        "content": "<p>The problem with this is that it will break once the bug is fixed...</p>",
        "id": 401536876,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699730276
    },
    {
        "content": "<p>I'm sorry for the bug (I wrote this feature), but there are at least a couple workarounds and you can decide which you want to use.</p>\n<p>At least if you use <code>_</code>'s you can delete them once the bug is fixed. The bug seems to be that the <code>with</code> clause variables get unnecessarily consumed.</p>",
        "id": 401537114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699730592
    },
    {
        "content": "<p>The <em>advantage</em> of something breaking once a bug is fixed is that we are not stuck with the workaround forever!</p>",
        "id": 401543886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699738183
    }
]