[
    {
        "content": "<p>After spending some time working on personal lean coding projects in relative obscurity, I would like to contribute to mathlib. Specifically, I'm interested in incorporating Coxeter Groups. Before diving in, I'm hoping to seek advice from the maintainers on the most efficient approach to ensure smooth integration with mathlib, given that Coxeter/Weyl/Reflection groups have many connections to various areas of mathematics. Do any maintainers have implementation suggestions for this endeavor?</p>\n<p>For example, would classifying the finite Coxeter groups: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>D</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>E</mi><mn>6</mn></msub><mo separator=\"true\">,</mo><msub><mi>E</mi><mn>7</mn></msub><mo separator=\"true\">,</mo><msub><mi>E</mi><mn>8</mn></msub><mo separator=\"true\">,</mo><msub><mi>F</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_n,  B_n, D_n, I_2(p), E_6, E_7, E_8, F_4, H_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">H_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> be a good starting point?</p>",
        "id": 391027690,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694730787
    },
    {
        "content": "<p>Even giving the definitions of some of them would be a good start!</p>",
        "id": 391035692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694735839
    },
    {
        "content": "<p>Currently refreshing my memory with <em>The Geometry and Topology of Coxeter Groups</em> by Michael W. Davis, but that sounds like a good first PR, the definitions, and then work up from there.</p>",
        "id": 391036417,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694736221
    },
    {
        "content": "<p>Be sure to look at the Lie theory formalized by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>. In particular, mathlib already has the Cartan matrices for most of the Dynkin types that you list.</p>",
        "id": 391060625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694745865
    },
    {
        "content": "<p>I have often thought that Coxeter groups would make a great project, and I'd love to see someone do this. Actually I recently decided to add a bit more Lie theory to Mathlib and if all goes well I'll probably add the definition the root systems (and data) in the next month or so (together with the proof that the collection of non-zero vectors satisfying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LieAlgebra.IsRoot#doc\">docs#LieAlgebra.IsRoot</a> form a root system, subject suitable hypotheses). So then we'd have Weyl groups and it would be really nice if some abstract theory of Coxeter groups was starting to take shape in parallel!</p>",
        "id": 391128972,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694772041
    },
    {
        "content": "<p>I should add that <span class=\"user-mention\" data-user-id=\"363669\">@Deepro Choudhury</span> did some nice work on root systems in Lean, though it's in a private repository.</p>",
        "id": 391129146,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694772098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I have the time to put into this but some guidance might be necessary.  Today I will try and wrap my head around Bourbaki/Davis and associated mathlib code that might serve as an indication of how to formulate the definition properly and will post my initial attempts here in order to get some feedback.</p>",
        "id": 391223452,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694797824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> that sounds great! I'm happy to help however I can.</p>",
        "id": 391362670,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694860978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  As you may already know...</p>\n<p>I am thinking I would define <code>CoxeterGroup</code> abstractly via <code>FreeGroup α</code> similar to what you did in <code>CartanMatrix</code> but instead I plan using<code>PresentedGroup</code> which creates the quotient group modulo the relations you pass it.    On top of this I would need to define a <code>CoxeterSystem</code>.  However, before getting into the details and specifics of that, and as a first step to acquaint myself with mathlib's group API, I have started creating the presentation for the Dihedral group using <code>PresentedGroup</code>.   Once the <code>PresentedGroup</code> for a <code>CoxeterGroup</code> or <code>CoxeterSystem</code> is defined appropriately, I could then show that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> that the Coxeter group is equivalent to the presentation of the Dihedral group.  </p>\n<p>Below is the code I have so far (I still have some proofs to finish).  However, some questions/comments I have before making PR(s):</p>\n<ul>\n<li>\n<p>The property that the <code>normalClosure</code> is equal to the kernel of the lifted homomorphism depends on textbook.  Dummit and Foote (3ed, pg. 218) assumes this in the definition of a presentation group.   Other textbooks do not, see example 2, pg. 448 of Gallian 8ed.  My take on it is that this should be proved (rather than updating the current definition of <code>PresentedGroup</code>) and that is what I am currently working on.  Thoughts?  </p>\n</li>\n<li>\n<p>If the aforementioned is to be added to <code>PresentedGroup.lean</code>, then I will need to refactor what I am currently still working on to make it more abstract.  Instead of using <code>2 * n</code> I would need to make it so that it was some constant.  Thoughts?</p>\n</li>\n<li>\n<p>The code below still needs some cleaning up with naming conventions and such but if you (or anyone else) has comments/suggestions please advise.  Thanks!</p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Dihedral</span>\n\n<span class=\"c1\">-- The code here in the PresentedGroup namespace would got inside of PresentedGroup in a separate PR</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">PresentedGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- mathport name: exprF</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"F\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">rels</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thirdIsoThm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n    <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span>\n    <span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.quotientQuotientEquivQuotient</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closure_rels_subset_ker</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This theorem is an axiom of the definitons for Presentation of a Group in Dummit and Foote (3ed, pg. 218).</span>\n<span class=\"c1\">-- However, it seems that we should be proving this rather than adding it to the definition axioms.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">closure_rels_eq_ker</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Noether's first isomorphism theorem states G ⧸ ker φ ≃* range φ, i.e. FreeGroup α ⧸ ker F ≃* range F -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">presented_group_eq_range_lift</span> <span class=\"o\">:</span> <span class=\"n\">PresentedGroup</span> <span class=\"n\">rels</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">MulEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.quotientMulEquivOfEq</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">closure_rels_eq_ker</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PresentedGroup</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DihedralPresentedGroup</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">generator</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">genMap</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.a</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.b</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"n\">i</span>\n\n<span class=\"sd\">/-- The presentation of the Dihedral group which makes it a Coxeter group is</span>\n<span class=\"sd\">⟨a, b | a^2 = 1, b^2 = 1, (a * b)^n = 1⟩ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Rels</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{(</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">DihedralPresentedGroup</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">KerQuotClosure</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">factor_group_closure_ker</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">≃*</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">DihedralPresentedGroup</span><span class=\"o\">,</span> <span class=\"n\">FreeGroupQuotLift</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">PresentedGroup.presented_group_eq_range_lift</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">genHom</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.kerLift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">genHom</span>\n  <span class=\"n\">exact</span> <span class=\"n\">QuotientGroup.kerLift_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">surjective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">genHom</span> <span class=\"n\">genMap</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">QuotientGroup.kerLift_mk</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span>\n      <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">genHom</span> <span class=\"n\">genMap</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">QuotientGroup.kerLift_mk</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bijective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">injective_genHom</span><span class=\"o\">,</span> <span class=\"n\">surjective_genHom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">RangeLift_eq_DihedralGroup</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulEquiv.ofBijective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bijective_genHom</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- | F / K | = | Dn |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RangeLift_eq_DihedralGroup_card</span>\n    <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.card_congr</span> <span class=\"bp\">?</span><span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RangeLift_eq_DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n\n<span class=\"c1\">-- | F / K | = 2n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RangeLift_eq_2n_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat_card</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">RangeLift_eq_DihedralGroup_card</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">r_i_pow_n</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">i.val</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">r.injEq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ZMod.nat_cast_zmod_val</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">i.val</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Eq.symm</span> <span class=\"o\">(</span><span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i.val</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i.val</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">ZMod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"n\">ZMod.cast_id'</span><span class=\"o\">,</span>\n      <span class=\"n\">id_eq</span><span class=\"o\">,</span> <span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_relsGenMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">b_relsGenMap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_b_relsGenMap</span>\n    <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">generator.b</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">genMap</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_sr</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">r_i_pow_n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">one_of_Rels</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">r</span> <span class=\"n\">hr</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rels</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.union_singleton</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">hr₁</span> <span class=\"bp\">|</span> <span class=\"n\">hr₂</span> <span class=\"bp\">|</span> <span class=\"n\">hr₃</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₁</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">a_b_relsGenMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₂</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">b_relsGenMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr₃</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">,</span> <span class=\"n\">a_relsGenMap</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- | F / N / K / N | = | F / K |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thirdIsoThm_eq_RangeLift_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">⧸</span> <span class=\"n\">KerQuotClosure</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FreeGroupQuotLift</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.card_congr</span> <span class=\"bp\">?</span><span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">PresentedGroup.thirdIsoThm</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">one_of_Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n\n<span class=\"c1\">-- | F / N / K / N | = 2n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thirdIsoThm_card_eq_2n</span>\n    <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">⧸</span> <span class=\"n\">KerQuotClosure</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat_card</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">RangeLift_eq_DihedralGroup_card</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">thirdIsoThm_eq_RangeLift_card</span>\n\n<span class=\"c1\">-- | F / N | = | K / N | * 2 * n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dihedral_presented_group_eq_mul_2n_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">KerQuotClosure</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- 1 ≤ | K / N |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ker_quot_closure_ge_one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">KerQuotClosure</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- | F / N | ≤  2 * n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dihedral_presented_group_le_2n_card</span>\n    <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dihedral_presented_group_eq_mul_2n_card</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- | F / K | ≤ | F / N |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RangeLift_le_dihedral_presented_group_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Since N ≤ K then | F / K | ≤ | F / N |</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- | F / N | ≥ 2 * n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dihedral_presented_group_ge_2n_card</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">RangeLift_le_dihedral_presented_group_card</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">RangeLift_eq_2n_card</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- | F / N | = 2 * n</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">dihedral_presented_group_eq_2n_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dihedral_presented_group_ge_2n_card</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dihedral_presented_group_le_2n_card</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- | F / K | = | F / N |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RangeLift_eq_dihedral_presented_group_card</span>\n    <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dihedral_presented_group_eq_2n_card</span><span class=\"o\">,</span> <span class=\"n\">RangeLift_eq_2n_card</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- | N | = | K |</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">normalClosure_eq_kernel_card</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">RangeLift_eq_dihedral_presented_group_card</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">FreeGroupQuotLift</span><span class=\"o\">,</span> <span class=\"n\">DihedralPresentedGroup</span><span class=\"o\">,</span> <span class=\"n\">PresentedGroup</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- N = K</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">normalClosure_eq_kernel</span>\n    <span class=\"o\">:</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Since N ≤ K and their orders are equal they are equal (finite groups)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DihedralPresentedGroup_eq_DihedralGroup</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulEquiv.trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">factor_group_closure_ker</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RangeLift_eq_DihedralGroup</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DihedralPresentedGroup</span>\n</code></pre></div>",
        "id": 393411307,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695799240
    },
    {
        "content": "<p>Also, I feel like I might need to show that the quotient groups I am dealing with are <code>Fintype</code> so that I can show that if <code>N \\leq K</code> and their orders are equal that they therefore must be equal.</p>",
        "id": 393411688,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695799365
    },
    {
        "content": "<p>I think I'm not saying anything you're not already contemplating, but it would be nice to have an interface where you can give a Coxeter matrix to get a Coxeter group, vs doing a construction for each family individually.</p>\n<p>There's a related family of groups, Artin-Tits groups, where the relation is that if you add in the relations that each generator's square is the identity you get Coxeter groups. Here's some old Lean 3 code for Artin-Tits groups: <a href=\"#narrow/stream/113489-new-members/topic/knot.20theory/near/280767378\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/knot.20theory/near/280767378</a></p>\n<p>For Artin-Tits groups, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> family gives the braid groups, and for Coxeter groups it gives the symmetric groups, and the homomorphism from a braid group to a symmetric group you get by adding in these extra relations is a useful one.</p>",
        "id": 393415374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695800667
    },
    {
        "content": "<p>What's the role of the <code>ZMod n</code> element in each generator? It looks like the set of relations only ever refers to the generators for a specific <code>i</code>, and I can't figure out what the function is of the other <code>2 * (n - i)</code> generators is.</p>",
        "id": 393416769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695801217
    },
    {
        "content": "<p>I originally had the definition without it but ran into problems trying to prove surjectivity/injectivity as the mapping to <code>DihedralGroup</code>s generators <code>ZMod</code> argument wasn't lining up. This was something that was bugging me quite a bit actually. Maybe there is a way to do it without <code>ZMod</code> in the definition and still make everything work correctly but I wasn't seeing it.</p>",
        "id": 393419468,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695802145
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> that the there should be only two generators rather than a family (for fixed <code>n</code>).  With only small modifications your code works for just two generators:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Dihedral</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">r_one_zpow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">i.eq_nat_or_neg</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zpow_neg</span><span class=\"o\">,</span> <span class=\"n\">zpow_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">r_one_pow</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_neg</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ofNat</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- Should probably be a `simp` lemma to avoid this `rfl` proof</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span> <span class=\"c1\">-- TODO Bump to latest Mathlib, remove this, and fix the errors</span>\n\n<span class=\"c1\">-- The code here in the PresentedGroup namespace would got inside of PresentedGroup in a separate PR</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">PresentedGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n\n<span class=\"c1\">-- mathport name: exprF</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"F\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">rels</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thirdIsoThm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n    <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span>\n    <span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.quotientQuotientEquivQuotient</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">closure_rels_subset_ker</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- This theorem is an axiom of the definitons for Presentation of a Group in Dummit and Foote (3ed, pg. 218).</span>\n<span class=\"c1\">-- However, it seems that we should be proving this rather than adding it to the definition axioms.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">closure_rels_eq_ker</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Noether's first isomorphism theorem states G ⧸ ker φ ≃* range φ, i.e. FreeGroup α ⧸ ker F ≃* range F -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">presented_group_eq_range_lift</span> <span class=\"o\">:</span> <span class=\"n\">PresentedGroup</span> <span class=\"n\">rels</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"n\">α</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">MulEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.quotientMulEquivOfEq</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">closure_rels_eq_ker</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PresentedGroup</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">DihedralGroup</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DihedralPresentedGroup</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">generator</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">genMap</span> <span class=\"o\">:</span> <span class=\"n\">generator</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">generator.b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sr</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- The presentation of the Dihedral group which makes it a Coxeter group is</span>\n<span class=\"sd\">⟨a, b | a^2 = 1, b^2 = 1, (a * b)^n = 1⟩ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Rels</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span><span class=\"o\">}</span> <span class=\"bp\">∪</span>\n  <span class=\"o\">{(</span><span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">DihedralPresentedGroup</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">KerQuotClosure</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">Subgroup.normalClosure</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rels</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"n\">abbrev</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">factor_group_closure_ker</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"bp\">≃*</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PresentedGroup.presented_group_eq_range_lift</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">genHom</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">→*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.kerLift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">QuotientGroup.kerLift_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">FreeGroup.lift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genMap</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">surjective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.a</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">generator</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FreeGroup.of</span> <span class=\"n\">generator.b</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">genHom</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">genHom</span><span class=\"o\">,</span> <span class=\"n\">genMap</span><span class=\"o\">,</span> <span class=\"n\">sr_mul_r</span><span class=\"o\">,</span> <span class=\"n\">QuotientGroup.kerLift_mk</span><span class=\"o\">,</span> <span class=\"n\">FreeGroup.lift.of</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bijective_genHom</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">injective_genHom</span><span class=\"o\">,</span> <span class=\"n\">surjective_genHom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">RangeLift_eq_DihedralGroup</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroupQuotLift</span> <span class=\"n\">n</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulEquiv.ofBijective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">genHom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bijective_genHom</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">DihedralPresentedGroup_eq_DihedralGroup</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DihedralPresentedGroup</span> <span class=\"n\">n</span> <span class=\"bp\">≃*</span> <span class=\"n\">DihedralGroup</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">factor_group_closure_ker</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">RangeLift_eq_DihedralGroup</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 393448994,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695809611
    },
    {
        "content": "<p>I've been puzzled about how the original version managed to prove that the cardinality is <code>2 * n</code> even though <code>DihedralPresentedGroup</code> was an infinite group. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and I were discussing it, and he noticed that the first sorry'd theorem is not true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">closure_rels_eq_ker</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What if <code>f</code> maps everything to the identity? The <code>h'</code> hypothesis allows this, but then <code>MonoidHom.ker F</code> is the top subgroup. The fix seems to be that <code>Subgroup.normalClosure rels</code> is a subgroup of <code>MonoidHom.ker F</code>.</p>",
        "id": 393474460,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695816645
    },
    {
        "content": "<p>Yea, when I originally had defined the generators I wasn't passing it <code>n</code>, and not doing that was driving me crazy!  More evidence that getting the definitions correct is very important.  Thanks for the help.  I have updated my code with your changes <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> .  Now, in regards to: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">closure_rels_eq_ker</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup.normalClosure</span> <span class=\"n\">rels</span> <span class=\"bp\">=</span> <span class=\"n\">MonoidHom.ker</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>from my understanding this is a true statement (<em>if we have the hypothesis</em> that <code>Subgroup.normalClosure rels</code> is a subgroup of <code>MonoidHom.ker F</code>).  Is this what you meant <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ?</p>",
        "id": 393528716,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1695831726
    },
    {
        "content": "<p>I think <code>h'</code> is equivalent to  <code>Subgroup.normalClosure rels</code> being a subgroup of <code>MonoidHom.ker F</code></p>",
        "id": 393529663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695832074
    },
    {
        "content": "<p>After getting distracted in a rabbit hole of trying to prove that the Dihedral group is isomorphic to its presentation group I have finally come around back to Coxeter groups.  This is what I have cooked up so far for definitions.   Thoughts <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>?: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Coxeter Systems</span>\n\n<span class=\"cm\">This file develops Coxeter Systems.  The pair `(W, S)` where `W` is a Coxeter group with</span>\n<span class=\"cm\">generators `S = {r₁, r₂, ... , rₙ}` is called a Coxeter System.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterSystem</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Generators</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Generators</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Relations</span>\n\n<span class=\"sd\">/-- The relation terms corresponding to a Coxeter matrix. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofMatrix</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.uncurry</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"sd\">/-- The relations of the Coxeter System. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toSet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.range</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofMatrix</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Relations</span>\n\n<span class=\"sd\">/-- The Presentation Coxeter group corresponding to a Coxeter matrix.</span>\n\n<span class=\"sd\">Note that it is defined for any matrix of natural numbers.</span>\n<span class=\"sd\">Its value for non-Coxetermatrices should be regarded as junk. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">CoxeterGroup</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">Relations.toSet</span> <span class=\"n\">n</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CoxeterSystem</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `W` is a CoxeterGroup. -/</span>\n  <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CoxeterGroup</span> <span class=\"n\">n</span> <span class=\"n\">M</span>\n  <span class=\"sd\">/-- `S` are the generators of `W`. -/</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Generators</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterSystem</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"sd\">/-- The Coxeter matrix of type A₂.</span>\n\n<span class=\"sd\">The corresponding Coxeter diagram is:</span>\n</code></pre></div>\n<p>o --- o</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">A₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The Coxeter matrix of type Aₙ.</span>\n\n<span class=\"sd\">The corresponding Coxeter diagram is:</span>\n</code></pre></div>\n<p>o --- o --- o ⬝ ⬝ ⬝ ⬝ o --- o</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Aₙ</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterSystem</span>\n\n<span class=\"sd\">/-- Example: Finite Coxeter group A₂. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">A₂</span> <span class=\"o\">:=</span> <span class=\"n\">CoxeterGroup</span> <span class=\"n\">CoxeterMatrix.A₂</span>\n\n<span class=\"sd\">/-- Finite Coxeter System for Aₙ. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Aₙ</span> <span class=\"o\">:=</span> <span class=\"n\">CoxeterSystem</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CoxeterMatrix.Aₙ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterSystem</span>\n</code></pre></div>",
        "id": 399568041,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698772594
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 399570642,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698773530
    },
    {
        "content": "<p>I would think you could replace <code>Fin n</code> by any type <code>S</code> such that <code>[Finite S]</code>. Also, I am confused with your definition of <code>CoxeterSystem</code>. The <code>CoxeterGroup M</code> you define is already the type of elements of a group (defined by generators and relations). Then, <code>W : CoxeterGroup M</code> is an element in this group; presumably, it is not what you intented. I am not expert in Coxeter groups, but some references allow matrices with <code>\\infty</code>entries (using <code>0</code> instead should be fine though).<br>\n(There might be some typo in your definition of <code>Aₙ</code> because I understand that generators should commute if their indices are further enough).</p>",
        "id": 399572085,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698774052
    },
    {
        "content": "<p>Ah yes, looks like I was half way inbetween doing that with <code>B</code>.</p>",
        "id": 399572838,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698774347
    },
    {
        "content": "<p>Let me update that.</p>",
        "id": 399572938,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698774374
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Coxeter Systems</span>\n\n<span class=\"cm\">This file develops Coxeter Systems.  The pair `(W, S)` where `W` is a Coxeter group with</span>\n<span class=\"cm\">generators `S = {r₁, r₂, ... , rₙ}` is called a Coxeter System.</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Generators</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Generators</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Generators.r</span> <span class=\"n\">default</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Relations</span>\n\n<span class=\"sd\">/-- The relation terms corresponding to a Coxeter matrix. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofMatrix</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.uncurry</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"sd\">/-- The relations of the Coxeter group. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toSet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.range</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofMatrix</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Relations</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterGroup</span>\n\n<span class=\"sd\">/-- The Presentation Coxeter group corresponding to a Coxeter matrix.</span>\n\n<span class=\"sd\">Note that it is defined for any matrix of natural numbers.</span>\n<span class=\"sd\">Its value for non-Coxeter matrices should be regarded as junk. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Matrix.ToCoxeterGroup</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">CoxeterGroup.Relations.toSet</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CoxeterSystem</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `W` is a CoxeterGroup. -/</span>\n  <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Matrix.ToCoxeterGroup</span> <span class=\"n\">M</span>\n  <span class=\"sd\">/-- `S` are the generators of `W`. -/</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CoxeterGroup.Generators</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"sd\">/-- The Coxeter matrix of type A₂.</span>\n\n<span class=\"sd\">The corresponding Coxeter diagram is:</span>\n</code></pre></div>\n<p>o --- o</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">A₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The Coxeter matrix of type Aₙ.</span>\n\n<span class=\"sd\">The corresponding Coxeter diagram is:</span>\n</code></pre></div>\n<p>o --- o --- o ⬝ ⬝ ⬝ ⬝ o --- o</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Aₙ</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Matrix.of</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterSystem</span>\n\n<span class=\"sd\">/-- Example: Finite Coxeter group A₂. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">A₂</span> <span class=\"o\">:=</span> <span class=\"n\">CoxeterSystem</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">CoxeterMatrix.A₂</span>\n\n<span class=\"sd\">/-- Finite Coxeter System for Aₙ. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Aₙ</span> <span class=\"o\">:=</span> <span class=\"n\">CoxeterSystem</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">@</span><span class=\"n\">CoxeterMatrix.Aₙ</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterSystem</span>\n</code></pre></div>",
        "id": 399581119,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698777330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> when I spoke with <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> about this a bit he mentioned defining <code>CoxeterSystem</code> as a structure that will have the Coxeter group and also the generators of that group.  I could be doing it totally wrong here, or maybe it just seems odd with how the definitions are setup since I am using <code>PresentedGroup</code> for generating the Coxeter group.  I am not sure.</p>",
        "id": 399582089,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698777682
    },
    {
        "content": "<p>As I said, what you have formalized is not what you intended to formalize. What makes sense is, given a matrix <code>M</code> with some index set <code>S</code>, a group <code>W</code> and a map <code>S → W</code>, a condition <code>IsCoxeterGroup</code> which would assert that the given elements in <code>W</code> satisfies the relations and that the morphism <code>M.toCoxeterGroup → W</code> from the constructed presented group is an isomorphism. In other words, for each matrix <code>M</code>, there is an \"abstract\" group defined by generators and relations (as a quotient of the free group), and we may also have particular \"models\" of it. For example, it would be interesting to show that the symmetric group in <code>n+1</code> letters equipped with the transpositions <code>(i i+1)</code> satisfies the property <code>IsCoxeterGroup</code> for <code>An</code>.</p>",
        "id": 399584297,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698778476
    },
    {
        "content": "<p>I'm also no expert on Coxeter groups but two things strike me after comparing the above code with Bourbaki:</p>\n<ol>\n<li>In Bourbaki a Coxeter system is the data of a group <code>W</code> and a subset <code>S</code> of <code>W</code> subject to hypotheses.</li>\n<li>In Bourbaki, the subset <code>S</code> is not required to be finite.</li>\n</ol>\n<p>My null hypothesis would be that following Bourbaki is the right approach. Have you considered doing this?</p>\n<p>I don't know if 2 matters, but I would check the wider literature to see (my guess is yes).</p>",
        "id": 399696376,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1698834152
    },
    {
        "content": "<p>Instead of a subset as in Bourbaki, we should probably use a map from another type, as we do for bases in linear algebra: this design has proved to be more flexible than the set-based one.</p>",
        "id": 399704815,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1698837284
    },
    {
        "content": "<p>Good point, agreed!</p>\n<p>I still want to emphasise that the data that forms part of a Coxeter system should (I think) be a group (as in Bourbaki) and not the data of a presentation (as in code snippet above).</p>",
        "id": 399709532,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1698839383
    },
    {
        "content": "<p>I think we should have three kind of objects:</p>\n<ul>\n<li><code>CoxeterGroup M</code>, as the concrete Coxeter group  associated to a matrix <code>M</code> subject to some conditions</li>\n<li><code>CoxeterBasis M G</code>: given a group <code>G</code>, this would record an isomorphism between <code>CoxeterGroup M</code> and <code>G</code>. Equivalently, this can be seen as a list of generators of <code>G</code> parameterized by the underlying type of <code>M</code>, together with the fact that they satisfy exactly the relations we want.</li>\n<li><code>IsCoxeterGroup G</code> would be a <code>Prop</code>-valued typeclass registering the existence of a Coxeter basis of <code>G</code>, for some <code>M</code>.</li>\n</ul>\n<p>We already do that for free groups, or for localizations, or for any construction that has concrete instances which are not definitionally the preferred construction.</p>",
        "id": 399713742,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1698840997
    },
    {
        "content": "<p>Awesome, thanks for the guidance everyone. :)</p>",
        "id": 399765368,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1698858356
    },
    {
        "content": "<p>Hello again.  I wanted to get feedback to make sure I am on the right track.  Here is what I have come up with so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.PresentedGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Symmetric</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Generators</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Generators</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Generators.r</span> <span class=\"n\">default</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A Coxeter matrix is a B × B symmetric matrix with ones on the diagonal</span>\n<span class=\"sd\">  and off-diagonal elements greater than or equal to 2. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Matrix.IsCoxeter</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">M.IsSymm</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Relations</span>\n\n<span class=\"sd\">/-- The relation terms corresponding to a Coxeter matrix. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofMatrix</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.uncurry</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">FreeGroup.of</span> <span class=\"o\">(</span><span class=\"n\">Generators.r</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"sd\">/-- The relations corresponding to a Coxeter matrix. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toSet</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">FreeGroup</span> <span class=\"o\">(</span><span class=\"n\">Generators</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.range</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ofMatrix</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Relations</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterGroup</span>\n\n<span class=\"sd\">/-- The group presentation corresponding to a Coxeter matrix.</span>\n\n<span class=\"sd\">Note that it is defined for any matrix of natural numbers. Its value for non-Coxeter</span>\n<span class=\"sd\">matrices should be regarded as junk. `IsCoxeterGroup` checks that the matrix `IsCoxeter`. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Matrix.ToCoxeterPresentation</span> <span class=\"o\">:=</span> <span class=\"n\">PresentedGroup</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">CoxeterGroup.Relations.toSet</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CoxeterGroupBasis</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- `CoxeterGroupBasis.ofRepr` constructs a basis given an equivalence with the group</span>\n<span class=\"sd\">  presentation corresponding to a Coxeter matrix `M`. -/</span>\n  <span class=\"n\">ofRepr</span> <span class=\"o\">::</span>\n    <span class=\"sd\">/-- `repr` is the isomorphism between the group `W` and the group presentation</span>\n<span class=\"sd\">    corresponding to a Coxeter matrix `M`. -/</span>\n    <span class=\"n\">repr</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">≃*</span> <span class=\"n\">Matrix.ToCoxeterPresentation</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsCoxeterGroup</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">nonempty_basis</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">B</span> <span class=\"n\">B</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">M.IsCoxeter</span> <span class=\"bp\">∧</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">CoxeterGroupBasis</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The Coxeter matrix of type A₂.</span>\n\n<span class=\"sd\">The corresponding Coxeter diagram is:</span>\n</code></pre></div>\n<p>o --- o</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">A₂</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">A₂IsCoxeter</span> <span class=\"o\">:</span> <span class=\"n\">A₂.IsCoxeter</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.IsCoxeter</span><span class=\"o\">,</span> <span class=\"n\">Matrix.IsSymm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CoxeterMatrix</span>\n\n<span class=\"c1\">-- EXAMPLE: DihedralGroup 3 equivalant to the group presentation corresponding to</span>\n<span class=\"c1\">-- Coxeter matrix `A₂`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">DihedralGroup3EquivCoxeterGroup</span> <span class=\"o\">:</span>\n    <span class=\"n\">DihedralGroup</span> <span class=\"mi\">3</span> <span class=\"bp\">≃*</span> <span class=\"n\">Matrix.ToCoxeterPresentation</span> <span class=\"n\">_</span> <span class=\"n\">A₂</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Suppose we have a proof</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DihedralGroup3HasCoxeterGroupBasis</span> <span class=\"o\">:</span>\n    <span class=\"n\">CoxeterGroupBasis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">A₂</span> <span class=\"o\">(</span><span class=\"n\">DihedralGroup</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CoxeterGroupBasis.ofRepr</span> <span class=\"n\">DihedralGroup3EquivCoxeterGroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DihedralGroup3IsCoxeterGroup</span> <span class=\"o\">:</span> <span class=\"n\">IsCoxeterGroup</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">DihedralGroup</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">A₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">A₂IsCoxeter</span><span class=\"o\">,</span> <span class=\"n\">Nonempty.intro</span> <span class=\"n\">DihedralGroup3HasCoxeterGroupBasis</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 400331348,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699137231
    },
    {
        "content": "<p>The sorried <code>theorem</code> should be a <code>def</code> because it's data, it's not a proof of the statement \"these groups are isomorphic\", it's the claim that a given map is an isomorphism. Same for the \"theorem\" after. But this looks good to me -- try filling in the sorry!</p>",
        "id": 400332001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699137912
    },
    {
        "content": "<p>The example was just to make sure I was getting the definitions right.  First I would like to nail down the definitions before working on proofs.  If no objections, yeah, time to start working on proofs <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 400332276,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699138230
    },
    {
        "content": "<p>Well that sorry is still hiding two more definitions :-)</p>",
        "id": 400332437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699138440
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv#doc\">docs#MulEquiv</a></p>\n<p>Looks to me like the thing you have to prove is a group homomorphism is the left-to-right function, so I suggest you flip the two sides of <code>DihedralGroup3EquivCoxeterGroup</code> because you'll get that the map from the presentation to D_3 is a group hom for free.</p>\n<p>I think that before you start on this it might be easier to establish a presentation (any presentation will do, I should imagine) of D_3. Otherwise your proofs will be a case bash hell. It should be pretty easy to prove that a map between presentations is an isomorphism, but the defniition of D_3 in mathlib is a case bash.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DihedralGroup#doc\">docs#DihedralGroup</a></p>",
        "id": 400332710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699138719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coxeter.20Groups/near/400332710\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv#doc\">docs#MulEquiv</a></p>\n<p>Looks to me like the thing you have to prove is a group homomorphism is the left-to-right function, so I suggest you flip the two sides of <code>DihedralGroup3EquivCoxeterGroup</code> because you'll get that the map from the presentation to D_3 is a group hom for free.</p>\n</blockquote>\n<p>Interesting... I wasn't aware that switching sides would have this effect.  Still trying to see what you are talking about here.</p>",
        "id": 400333391,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699139271
    },
    {
        "content": "<p>If you figure out a presentation of D_3 then you won't need to flip. What I'm envisaging here (with any presentation, not just the one you're using here) is that it's easy to write down a group hom from &lt;Gens|Rels&gt; to D_3 as defined by mathlib, and to prove it's a surjection, but to prove it's a bijection you will have to do something like write down a map from D_3 back to the presentation and prove that this is a two-sided inverse. Perhaps the easiest way to do this would be by proving that the map back is also a group hom (by a case split, so this would be 4 checks) and then showing that it sends each generator back to itself. And my gut feeling is that the calculations are going to be much easier if you use the usual generators of order n and 2, rather than generators of order 2, for this argument (which I think you're not going to be able to get away from). </p>\n<p>My instinct is that it will be less painful to present D_n in the usual way and then finish the job from there, than by launching straight into the sorry, but maybe it ends up being the same amount of work either way.</p>\n<p>I guess another advantage of giving the presentation for D_n is that it's useful for other people.</p>",
        "id": 400333880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699139785
    },
    {
        "content": "<p>Ah I think I understand what you were referring to above in terms of one direction free.  The lifting of the hom between the free group to D_n, which becomes the presentation to D_n is given to us.</p>\n<p>I don't know how to prove there is a bijection.  The issue I had when trying to prove this is that the map from D_n to the presentation is easy to prove cause you can just match on the constructors of D_n, but going in the opposite direction what do you match on?  The presentation is a quotient group and therefore you are dealing with cosets.  I at least didn't see an easy way of doing this.</p>",
        "id": 400334354,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699140420
    },
    {
        "content": "<p>I tried unfolding the layers on the definitions to get towards the map that underlies the presentation but that didn't help.</p>",
        "id": 400334429,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699140502
    },
    {
        "content": "<p>To prove that D_n = &lt;a,b|a^n=b^2=1,bab=a^{-1}&gt; I would first write down a group hom from the presented group to D_n (easy), then write down a set-theoretic map from D_n to &lt;a,b&gt; (two cases), then prove that the set-theoretic map is a group hom (4 cases), then prove that the composite in both directions is the identity. If you choose your maps wisely then showing that D_n -&gt; &lt;a,b&gt; -&gt; D_n is the identity should basically be rfl in both cases. To go the other way, just check that a goes to a and b to b.</p>",
        "id": 400334898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699141128
    },
    {
        "content": "<p>In so many words this is the two-sided inverse no?  I was able to prove one direction but not the other.</p>",
        "id": 400335010,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699141285
    },
    {
        "content": "<p>I don't know how to deconstruct the terms of the presentation and not sure there is a good way of doing this.  However, I didn't try with the presentation you mentioned and I only tried with &lt;a,b | a^2 = 1, b^2 = 1, (ab)^n=1&gt;</p>",
        "id": 400335076,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699141379
    },
    {
        "content": "<p>From the proofs I have found in the literature they do a counting argument by showing the multiplicative closure of the set of the left cosets of the normal closure of the relations, but this is something I haven't tried to formalize yet.  Additionally, I they are doing it on D_4 and this would need to be extrapolated to D_n which seems cumbersome.</p>",
        "id": 400335180,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699141517
    },
    {
        "content": "<p>I mean I guess you can use that presentation, it will just make the algebra a bit messier. You don't need any counting as my argument shows.</p>",
        "id": 400336694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699143020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coxeter.20Groups/near/400334898\">said</a>:</p>\n<blockquote>\n<p>To prove that D_n = &lt;a,b|a^n=b^2=1,bab=a^{-1}&gt; I would first write down a group hom from the presented group to D_n (easy), then write down a set-theoretic map from D_n to &lt;a,b&gt; (two cases), then prove that the set-theoretic map is a group hom (4 cases), then prove that the composite in both directions is the identity. If you choose your maps wisely then showing that D_n -&gt; &lt;a,b&gt; -&gt; D_n is the identity should basically be rfl in both cases. To go the other way, just check that a goes to a and b to b.</p>\n</blockquote>\n<p>This last sentence, I don't see how you can do that.  Maybe you can you show me what you are talking about. How do you get the generators a and b isolated from &lt;a, b&gt;?</p>",
        "id": 400340416,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699145597
    },
    {
        "content": "<p>That would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PresentedGroup.of#doc\">docs#PresentedGroup.of</a>.</p>",
        "id": 400355255,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699155779
    },
    {
        "content": "<p>I just threw up a WIP PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8195\">#8195</a> of what I have in regards to the recent conversation (not Coxeter groups) and I haven't tried getting past where I currently am for several weeks now but any suggestions welcome <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (or anyone else) in regards to what you were mentioning above .  I still haven't figured out the map you mention in regards to &lt;a, b&gt; -&gt; D_n -&gt; &lt;a, b&gt; as you see in what I am currently calling <code>leftInverseHoms</code> (don't mind the WIP names).</p>",
        "id": 400363739,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699163466
    },
    {
        "content": "<p>To prove that two group homomorphisms from a presented group to some other group are equal, it suffices to prove that the generators get mapped to the same things. Hence to prove that a group homomorphism from a presented group to itself is the identity, it suffices to check that the generators get mapped to themselves.</p>",
        "id": 400379798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699177405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coxeter.20Groups/near/400331348\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Generators</span>\n  <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Generators</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I do not think that this definition is necessary. You may just use <code>FreeGroup B</code> below, right?<br>\n(Otherwise, the code looks much better!)</p>",
        "id": 400412796,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699208044
    },
    {
        "content": "<p>Thanks!</p>\n<p>AFAIK we need a way to index the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> different generators <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{r_1, \\dots, r_n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> and I don't see how to do that with <code>FreeGroup B</code> by itself.</p>",
        "id": 400419751,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699214740
    },
    {
        "content": "<p>I do not think that you <em>need</em> a bijection between <code>Fin n</code> and <code>B</code> and I do not understand why creating an auxiliary type equivalent to <code>B</code> would be relevant here. If you just replace <code>FreeGroup (Generators B)</code> by <code>FreeGroup B</code>, and remove <code>Generators.r</code> everywhere, your code still compiles.</p>",
        "id": 400425507,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699221918
    },
    {
        "content": "<p>Yes, you are right, when I had tried to make the changes before commenting above I had made a mistake.  It does compile.  Thanks for your persistence with me!</p>",
        "id": 400453920,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699243351
    },
    {
        "content": "<p>Here is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8223\">#8223</a> if anyone is up for a review.</p>",
        "id": 400490740,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1699262497
    }
]