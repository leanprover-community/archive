[
    {
        "content": "<p>when I try to update my project to use mathlib more recent than <a href=\"https://github.com/leanprover-community/mathlib4/pull/7747\">mathlib4#7747</a>, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>update\nmathlib:<span class=\"w\"> </span>updating<span class=\"w\"> </span>repository<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/mathlib'</span><span class=\"w\"> </span>to<span class=\"w\"> </span>revision<span class=\"w\"> </span><span class=\"s1\">'ace6e09154439335a48190750134bb5bb5656007'</span>\nmathlib:<span class=\"w\"> </span>running<span class=\"w\"> </span>post-update<span class=\"w\"> </span>hooks\nerror:<span class=\"w\"> </span>invalid<span class=\"w\"> </span>toolchain<span class=\"w\"> </span>name:<span class=\"w\"> </span><span class=\"s1\">'leanprover/lean4:v4.3.0-rc1</span>\n<span class=\"s1\">'</span>\nerror:<span class=\"w\"> </span>mathlib:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>fetch<span class=\"w\"> </span>cache\n</code></pre></div>",
        "id": 401660788,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699839284
    },
    {
        "content": "<p>That pull request added a newline to mathlib's lean-toolchain, so I thought that maybe updating my project's lean-toolchain to have a matching newline would help. It did not.</p>",
        "id": 401661389,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699839632
    },
    {
        "content": "<p>Actually, it seems that <code>lake update</code> is modifying my <code>lean-toolchain</code> file to ensure that it always has a newline at the end.</p>",
        "id": 401661463,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699839677
    },
    {
        "content": "<p>Ah, looks like I can still manually do <code>lake exe cache get</code> and everything works.</p>",
        "id": 401661699,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699839808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20update.3A.20invalid.20toolchain.20name/near/401661463\">said</a>:</p>\n<blockquote>\n<p>Actually, it seems that <code>lake update</code> is modifying my <code>lean-toolchain</code> file to ensure that it always has a newline at the end.</p>\n</blockquote>\n<p>I think it’s just copying it from  <code>mathlib</code>, with or without newline?</p>\n<p>On mathlib, “feat(FieldTheory.AbsoluteGaloisGroup): add the absolute Galois group and its topological abelianization (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7783\">#7783</a>)” removed the newline and “perf(AlgebraicGeometry): Fix slow and bad proofs (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7747\">#7747</a>)” added it again :-D</p>",
        "id": 401740341,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699873524
    },
    {
        "content": "<p>It would be really nice to fix this issue because students are confused about it.</p>",
        "id": 401855123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699914272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> do you have any ideas why we're getting this \"invalid toolchain name\" error?</p>",
        "id": 401859366,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699916376
    },
    {
        "content": "<p>The problem here is that the post update hook I added does not trim the toolchain when passed to Elan (as this was previously unnecessary), so Elan is getting a toolchain with a newline at the end. Fixing this just requires a <code>mathlibToolchain.trim</code>, though it might also be a good idea to change the Elan command to just <code>\"elan\"</code> to additionally fix a different post-update hook error mentioned in another <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401507908\">Zulip thread</a>.</p>",
        "id": 401860157,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699916689
    },
    {
        "content": "<p>I'm having the same issue.</p>",
        "id": 401867969,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1699920730
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8401\">#8401</a></p>\n<p>I haven't done any testing --- if someone affected by this issue could try it out that would be great.</p>",
        "id": 401899864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699933727
    },
    {
        "content": "<blockquote>\n<p>as this was previously unnecessary</p>\n</blockquote>\n<p>I’m curious, did elan change, and really support</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"s2\">\"leanprover/lean:stable \"</span>\n</code></pre></div>\n<p>before, or was it previously not necessary for other reasons (e.g. because it was invoked in a shell like <code>elan $(cat lean-toolchain)</code>, where the shell would trim the arguments.)</p>",
        "id": 401932440,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699950809
    },
    {
        "content": "<p>It was previously invoked as <code>lean</code> :) . When elan reads the toolchain from the file itself, it does trim the string. There is no regression in elan.</p>",
        "id": 401933610,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699951113
    },
    {
        "content": "<p>Actually, I don't understand why we're not just calling <code>lake</code> here. The toolchain file has already been updated.</p>",
        "id": 401935185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699951499
    },
    {
        "content": "<p>Presumably calling <code>lake</code> fails if the \"lake path\" or \"toolchain\" setting is overridden in vscode?</p>",
        "id": 401947175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699955629
    },
    {
        "content": "<p>But if the toolchain is overridden, the <code>lake</code> call \"succeeds\" and overwrites the current oleans in <code>build/</code> with ones incompatible with the override, which is what <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> was complaining about earlier.</p>",
        "id": 401948509,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699956044
    },
    {
        "content": "<p><code>Lean.versionString</code> is part of the cache hash, so calling <code>lake exe cache get</code> with an overridden toolchain would result in a full cache miss, which I think is more desirable (assuming they would get rejected by Lake later on).</p>",
        "id": 401949533,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699956321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20update.3A.20invalid.20toolchain.20name/near/401935185\">said</a>:</p>\n<blockquote>\n<p>Actually, I don't understand why we're not just calling <code>lake</code> here. The toolchain file has already been updated.</p>\n</blockquote>\n<p>Elan adds the old toolchain's <code>bin</code> directory to the front of <code>PATH</code> when calling the top-level <code>lake</code>. Thus, a bare <code>\"lake\"</code> will just pick up the old toolchain's Lake.</p>",
        "id": 402057787,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20update.3A.20invalid.20toolchain.20name/near/401932440\">said</a>:</p>\n<blockquote>\n<p>was it previously not necessary for other reasons</p>\n</blockquote>\n<p>It was not necessary because mathlib's<code>lean-toolchain</code> did not previously have a newline. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 402058189,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699991518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20update.3A.20invalid.20toolchain.20name/near/402057787\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20update.3A.20invalid.20toolchain.20name/near/401935185\">said</a>:</p>\n<blockquote>\n<p>Actually, I don't understand why we're not just calling <code>lake</code> here. The toolchain file has already been updated.</p>\n</blockquote>\n<p>Elan adds the old toolchain's <code>bin</code> directory to the front of <code>PATH</code> when calling the top-level <code>lake</code>. Thus, a bare <code>\"lake\"</code> will just pick up the old toolchain's Lake.</p>\n</blockquote>\n<p>Yikes, this is a Windows workaround in rustup that was fixed only this year in <a href=\"https://github.com/rust-lang/rustup/pull/3178\">https://github.com/rust-lang/rustup/pull/3178</a>. But at least for the time being we're stuck with it.</p>",
        "id": 402181973,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700039396
    }
]