[
    {
        "content": "<p>Compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"n\">for</span> <span class=\"n\">_k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">B</span>\n  <span class=\"n\">return</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"n\">for</span> <span class=\"n\">_k</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">B</span>\n  <span class=\"n\">return</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Can you guess which one will feature an incomprehensible (to me) error message? Do you have an explanation?</p>",
        "id": 354837591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682936728
    },
    {
        "content": "<p>Is it something like \"everything monadic will blow up outside of <code>Type 0</code>\"?</p>",
        "id": 354838035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682936802
    },
    {
        "content": "<p>Now that I minimized that far and suddenly thought of the <code>Type 0</code> explanation, I can see that putting everything in <code>Type</code> also fixes my real code.</p>",
        "id": 354840240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682937289
    },
    {
        "content": "<p>Are there cases when you would want your real code to apply outside <code>Type</code> (i.e. are you actually using an arbitrary ring)? (I only ask because you spend a lot of teaching time just with reals and naturals)</p>",
        "id": 354841011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682937535
    },
    {
        "content": "<p>Yes, the entire monad framework wants everything to be in the same universe, which means you'd need to ulift <code>[0:3]</code> to the same universe as <code>R</code> (I don't know how to do this)</p>",
        "id": 354841115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682937568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  and I had some idea on how to change this, but didn't have time to follow through on them</p>",
        "id": 354841279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682937610
    },
    {
        "content": "<p>This is part of an experiment about actually programming something in Lean 4 (see also the discussion about iteration on <code>Fin</code> in the Lean 4 stream), so I definitely intend to use it with actual types such as <code>ℤ</code> of <code>ZMod 5</code></p>",
        "id": 354841530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682937706
    }
]