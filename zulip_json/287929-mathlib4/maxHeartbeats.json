[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233388.20.28revert.20porting.20of.20to_interval_mod.29/near/356029330\">said</a>:</p>\n<blockquote>\n<p>I can add the shameful <code>maxHeartbeats</code> bumps to <a href=\"https://github.com/leanprover-community/mathlib4/pull/3457\">!4#3457</a> myself :)</p>\n</blockquote>\n<p><code>maxHeartbeats</code> is never shameful. As long as it does the job it's OK</p>",
        "id": 356073654,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1683296259
    },
    {
        "content": "<p>No, \"As long as it does the job it's ok\" is wrong.</p>",
        "id": 356075028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683296533
    },
    {
        "content": "<p>It is the last thing to do when everything else failed.</p>",
        "id": 356075098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683296552
    },
    {
        "content": "<p>Sometimes we've opted to set a high<code>maxHearbeats</code> even when there was an alternative, because the alternative was just too ugly; with the hope that a future lean4 refactor will speed things up. That way we have no hack left to revert.</p>",
        "id": 356075900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683296697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233388.20.28revert.20porting.20of.20to_interval_mod.29/near/356075900\">said</a>:</p>\n<blockquote>\n<p>Sometimes we've opted to set a high<code>maxHearbeats</code> even when there was an alternative, because the alternative was just too ugly; with the hope that a future lean4 refactor will speed things up. That way we have no hack left to revert.</p>\n</blockquote>\n<p>A particular case: when bumping <code>maxHeartbeats</code> is not needed in the <code>reenableeta</code> branch, hacky solutions should arguably be accepted less often.</p>",
        "id": 356077103,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683296944
    },
    {
        "content": "<p>Yeah, bumping the heartbeats is not necessary on <code>reenableeta</code>.</p>",
        "id": 356102525,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683301959
    },
    {
        "content": "<p>I think also one should not add <code>maxHeartbeats</code> unless you've checked in mathlib3 how slow that declaration was, and noted in the porting comment whether this is a regression or just something that was already slow.</p>",
        "id": 356174030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683325179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233388.20.28revert.20porting.20of.20to_interval_mod.29/near/356174030\">said</a>:</p>\n<blockquote>\n<p>I think also one should not add <code>maxHeartbeats</code> unless you've checked in mathlib3 how slow that declaration was, and noted in the porting comment whether this is a regression or just something that was already slow.</p>\n</blockquote>\n<p>I had to add a bunch of <code>maxHeartbeats</code> to port <a href=\"https://github.com/leanprover-community/mathlib4/pull/3777\">!4#3777</a>. Was I not supposed to do that? What are the other options?</p>\n<p>Also, how do you test how slow a declaration is in mathlib3?</p>",
        "id": 356216891,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1683352112
    },
    {
        "content": "<blockquote>\n<p>Also, how do you test how slow a declaration is in mathlib3?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>(I guess you could also <code>set_option timeout N</code> for some N less than the default 100000.)</p>",
        "id": 356217898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683352771
    },
    {
        "content": "<p>Or just eyeball how long the yellow bar takes. :-)</p>",
        "id": 356217907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683352785
    },
    {
        "content": "<p>Usually when I encountered a <code>maxHeartbeats</code> problem, I:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>and then look to see if I can see what is going wrong. Sometimes you can guess from the output if there is a bad instance.  (e.g. I just noticed <a href=\"https://github.com/leanprover-community/mathlib/pull/18951\">https://github.com/leanprover-community/mathlib/pull/18951</a> from looking at these trace outputs for the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4871640921/jobs/8688850183\">timeout </a> that occurred on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3780\">!4#3780</a>.)</p>",
        "id": 356218221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683352974
    },
    {
        "content": "<p>It's not a science, and if nothing is obvious then just putting the increased timelimits and noting them in the PR description is fine.</p>",
        "id": 356218266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683353003
    },
    {
        "content": "<p>12 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.233388.20.28revert.20porting.20of.20to_interval_mod.29\">#mathlib4 &gt; !4#3388 (revert porting of to_interval_mod)</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 356239995,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683361975
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3457\">!4#3457</a>, the expensive steps for the <code>Ideal.Quotient.normedAlgebra</code> instance seem to be <code>AddCommMonoid.toAddMonoid =?= SubNegMonoid.toAddMonoid</code> and <code>SubNegMonoid.toAddMonoid =?= AddMonoidWithOne.toAddMonoid</code></p>",
        "id": 356242708,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683362855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> are you able to apply a small permutation to mathlib to make this issue far less prevalent? Is this the sort of question which a small permutation might solve?</p>",
        "id": 356246147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683363963
    },
    {
        "content": "<p>It's all a question of balance: maybe you can do it better here by a small perturbation, but it is likely that it will have some influence elsewhere, which could be positive or negative. The good news is that mathlib is now large enough that such tests are meaningful on the global scale. The bad news is that it takes time.</p>",
        "id": 356248315,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683364649
    },
    {
        "content": "<p>I'm very impressed that your permutation made so many of the files green in the bench. Was it precalculated or did it come from experimentation?</p>",
        "id": 356366759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683404817
    },
    {
        "content": "<p>A fun data point: of the 31 <code>set_option maxHeartbeats</code> commands in current <code>master</code>, 29 are not needed in the <code>reenableeta</code> branch. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3845\">!4#3845</a>.</p>",
        "id": 356574132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683511022
    },
    {
        "content": "<p>If anyone feels like fixing the 2 \"genuine\" ones, they are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.pullbackDiagonalMapIso#src\">src4#CategoryTheory.Limits.pullbackDiagonalMapIso</a> <del>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_mul#src\">src4#Matrix.det_mul</a>.</del> Apparently I wasn't actually at <code>master</code>, and one of those is already fixed.</p>",
        "id": 356574423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683511225
    },
    {
        "content": "<p>Is the <code>reenableeta</code> branch globally faster, on any benchmark?</p>",
        "id": 356574667,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683511367
    },
    {
        "content": "<p>Yes, considerably faster.</p>",
        "id": 356574683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683511378
    }
]