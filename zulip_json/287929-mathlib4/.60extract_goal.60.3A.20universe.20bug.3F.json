[
    {
        "content": "<p>Dear All,</p>\n<p>I am reporting here what I consider to be a bug in <code>extract_goal</code>.  I can probably take care of this later, but I did not want to forget about it!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ExtractGoal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">extract_goal</span>\n\n<span class=\"c1\">-- suggestion:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- a universe level named 'u' has already been declared</span>\n</code></pre></div>",
        "id": 382067149,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691224288
    },
    {
        "content": "<p>That seems like an unintended consequence of the universe management system (snappy, isn't it?). Does that mean we can't shadow global universe declarations with local ones?</p>",
        "id": 382067857,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691224473
    },
    {
        "content": "<p>Yes, there might be some upstream change, but simply using \"unused\" universe levels or recycling available ones in <code>extract_goal</code> should not be hard either.</p>",
        "id": 382068354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691224603
    },
    {
        "content": "<p>I just do not have the time to take care of it right now... but wanted a record of this.</p>",
        "id": 382068415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691224619
    },
    {
        "content": "<p>Yaël, do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">new</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new</span>\n</code></pre></div>\n<p>The same error show up, but I am not sure that I understood what you meant by \"local ones\".</p>",
        "id": 382069124,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691224795
    },
    {
        "content": "<p>Local ones meaning universe variables declared on the theorem itself, as in <code>theorem extracted_1.{u}</code> here. I agree that this should be legal and cause name shadowing like everywhere else in lean</p>",
        "id": 382116002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691235334
    },
    {
        "content": "<p>although I suppose Yael didn't actually say that</p>",
        "id": 382116039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691235346
    },
    {
        "content": "<p>Ah, I see.  So I guess that the example above was already an answer: universe name-shadowing is not allowed!</p>",
        "id": 382117291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691235650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60extract_goal.60.3A.20universe.20bug.3F/near/382116039\">said</a>:</p>\n<blockquote>\n<p>although I suppose Yael didn't actually say that</p>\n</blockquote>\n<p>Sorry for the delay. This is what I meant, yeah. Is \"local\" the proper technical term for \"declaration-bound\"?</p>",
        "id": 382129686,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691238440
    },
    {
        "content": "<p>it's not really a formal term in this context but sure it makes sense</p>",
        "id": 382135826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691239947
    }
]