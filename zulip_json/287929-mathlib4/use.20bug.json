[
    {
        "content": "<p>Trying to write exercises for <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a>, I wrote the following code that has several issues.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">J</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>  <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Submodule.smul_induction_on</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">hx</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"n\">existsi</span> <span class=\"mi\">1</span>\n    <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">b</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">tauto</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n    <span class=\"n\">use</span> <span class=\"n\">Fin.addCases</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n    <span class=\"n\">use</span> <span class=\"n\">Fin.addCases</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">i</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"n\">using</span> <span class=\"n\">Fin.addCases</span>\n        <span class=\"n\">next</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n        <span class=\"n\">next</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n      <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"n\">using</span> <span class=\"n\">Fin.addCases</span>\n        <span class=\"n\">next</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n        <span class=\"n\">next</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fin.sum_univ_add</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ideal.sum_mem</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">_</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Submodule.mul_mem_mul</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>First I could sweat we add that kind of lemma somewhere but couldn't find it. Then the two calls to <code>existsi</code> cannot be replaced by <code>use</code> without a weird error <code>unknown free variable '_uniq.259659'</code> (that seem to be a fashionable error message those days). Then I'd like to use <code>apply Submodule.smul_induction_on</code> without defining <code>P</code> first. Then I couldn't find <code>Fin.addCases</code> using Loogle, what would be a good request? Then how to find the correct syntax to use <code>induction</code> using <code>Fin.addCases</code> with the <code>|</code> syntax instead of <code>next</code>?. And finally the brand new <code>aesop</code> powers from <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> do not seem to be able to replace the last three lines. Short version: nothing worked smoothly in this proof.</p>",
        "id": 397784284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697841386
    },
    {
        "content": "<p><del>What are the new <code>aesop</code> powers?</del> See <a href=\"#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/397741320\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60aesop.60.20for.20.60SetLike.60/near/397741320</a></p>",
        "id": 397807967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697858365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> as for <code>aesop</code>, it's just missing attributes. I'm going to have a follow-up PR where I add the attributes more widely as I try to golf these sorts of things across the library. I'll try to collect a list of lemmas that need it, so if you run across any just let me know. In this case, I think the attribute to add is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">SetLike</span><span class=\"o\">])]</span>\n  <span class=\"n\">sum_mem</span>\n  <span class=\"n\">Submodule.mul_mem_mul</span>\n</code></pre></div>",
        "id": 397811809,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697861503
    },
    {
        "content": "<p>This is the <code>|</code> syntax for <code>induction</code> using <code>Fin.addCases</code>, but admittedly I had to go-to-def to see what the names were. I don't think we have a code action for this yet, and I'm not sufficiently experienced with metaprogramming yet to write it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"n\">using</span> <span class=\"n\">Fin.addCases</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n        <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397812316,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697861932
    },
    {
        "content": "<p>I don't have a really good suggestion for searching for <code>Fin.addCases</code> unless you know or can guess <code>Case</code> would be in the name. Then ...<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"Cases\", FIn (?a + ?b)</p>",
        "id": 397812846,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697862469
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'FIn'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=%22Cases%22%2C%20MLList.fin%20%28%3Fa%20%2B%20%3Fb%29\">\"Cases\", MLList.fin (?a + ?b)</a> or <a href=\"https://loogle.lean-lang.org/?q=%22Cases%22%2C%20FIn%20%28%3Fa%20%2B%20%3Fb%29\">something else</a>?</p>",
        "id": 397812847,
        "sender_full_name": "loogle",
        "timestamp": 1697862469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"Cases\", Fin (?a + ?b)</p>",
        "id": 397812904,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697862496
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Fin/Lemmas.html#Fin.addCases\">Fin.addCases</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Fin/Lemmas.html#Fin.lastCases\">Fin.lastCases</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22Cases%22%2C%20Fin%20%28%3Fa%20%2B%20%3Fb%29\">12 more</a></p>",
        "id": 397812905,
        "sender_full_name": "loogle",
        "timestamp": 1697862496
    },
    {
        "content": "<p>but that's probably too much cheating.</p>",
        "id": 397812917,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697862510
    },
    {
        "content": "<p>i'm not really sure what's going on with the <code>use</code> versus <code>existsi</code>, but the variable it's complaining about it <code>P</code>, which you can see by using this quick tactic I used to show the <code>FVarId</code> associated to a local declaration.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">fvar_id</span><span class=\"o\">)</span> <span class=\"s2\">\"fvar_id\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"fvar_id\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">ldecl.userName</span> <span class=\"bp\">==</span> <span class=\"n\">h.getId</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{ldecl.userName} : {ldecl.type} has FVarId : {ldecl.fvarId.name}\"</span>\n</code></pre></div>",
        "id": 397815030,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697864078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Thank you very much for your answer.</p>",
        "id": 397854469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697898889
    },
    {
        "content": "<p>To everyone, here is a somewhat minimized version of the <code>use</code> bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">•</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Submodule.smul_induction_on</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">hx</span>\n   <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n   <span class=\"n\">use'</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397854500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697898916
    },
    {
        "content": "<p>The first idea, which to wrap more stuff into <code>withMainContext</code> is not enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.Operations</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"sd\">/-- Run the `useLoop` on the main goal then discharge remaining explicit `Prop` arguments. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">runUse'</span> <span class=\"o\">(</span><span class=\"n\">eager</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">discharger</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">egoals</span> <span class=\"bp\">←</span> <span class=\"n\">focus</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">egoals</span><span class=\"o\">,</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"n\">insts</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">useLoop</span> <span class=\"n\">eager</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">)</span> <span class=\"n\">args</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n    <span class=\"c1\">-- Try synthesizing instance arguments</span>\n    <span class=\"n\">for</span> <span class=\"n\">inst</span> <span class=\"k\">in</span> <span class=\"n\">insts</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inst.isAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">observing</span><span class=\"bp\">?</span> <span class=\"k\">do</span> <span class=\"n\">inst.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inst.getType</span><span class=\"o\">))</span>\n    <span class=\"c1\">-- Set the goals.</span>\n    <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">egoals</span> <span class=\"bp\">++</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"n\">pruneSolvedGoals</span>\n    <span class=\"n\">pure</span> <span class=\"n\">egoals</span>\n  <span class=\"c1\">-- Run the discharger on non-assigned proposition metavariables</span>\n  <span class=\"c1\">-- (`trivial` uses `assumption`, which isn't great for non-propositions)</span>\n  <span class=\"n\">for</span> <span class=\"n\">g</span> <span class=\"k\">in</span> <span class=\"n\">egoals</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.isAssigned</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getType</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">tactic.use</span><span class=\"o\">]</span> <span class=\"s2\">\"running discharger on {g}\"</span>\n        <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">run</span> <span class=\"n\">g</span> <span class=\"n\">discharger</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">useSyntax'</span><span class=\"o\">)</span>\n    <span class=\"s2\">\"use'\"</span> <span class=\"n\">discharger</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">Parser.Tactic.discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ppSpace</span> <span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">runUse</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkUseDischarger</span> <span class=\"n\">discharger</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"n\">args.getElems.toList</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n</code></pre></div>",
        "id": 397854583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697898962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think I found the <code>use</code> bug, but I haven't tested the fix yet</p>",
        "id": 397857475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697901380
    },
    {
        "content": "<p>I can test it if you want.</p>",
        "id": 397857499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697901400
    },
    {
        "content": "<p>What would be the fix?</p>",
        "id": 397857505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697901405
    },
    {
        "content": "<p>I'll push a branch in a moment</p>",
        "id": 397857562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697901454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Here's a WIP branch with a few fixes: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7827\">#7827</a></p>",
        "id": 397858647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697902162
    },
    {
        "content": "<p>Nice. I can see some pattern here.</p>",
        "id": 397858760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697902219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> It looks like at least one of these fixes addressed the problem! Do you think it would be hard to minimize the example so that it can go into the tests/Use file and not need any more imports? I'm guessing the key is that <code>P</code> is let-bound.</p>",
        "id": 397859370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697902771
    },
    {
        "content": "<p>Naive minimization didn't work, but I'll try some more.</p>",
        "id": 397859447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697902827
    },
    {
        "content": "<p>Kyle, I thought that as well, but <code>letI</code> didn't make the problem go away, which I would have expected it to do.</p>",
        "id": 397859481,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697902874
    },
    {
        "content": "<p>Yeah, got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"bp\">;</span> <span class=\"n\">P</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">P</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397859588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697902965
    },
    {
        "content": "<p>Nice!</p>",
        "id": 397859618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697902995
    },
    {
        "content": "<p>You need a step like <code>intro</code> at the beginning to make sure you have a new local context before the offending tactic, since otherwise you might accidentally be inside a local context that hides the problem.</p>",
        "id": 397859630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697903016
    },
    {
        "content": "<p>I wasn't fast enough. And mine is more complicated</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">_n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">_k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_n</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">_k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.rec</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- use 1</span>\n  <span class=\"n\">existsi</span> <span class=\"mi\">1</span>\n  <span class=\"n\">trivial</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">_</span>\n  <span class=\"n\">existsi</span> <span class=\"mi\">1</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 397859721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697903098
    },
    {
        "content": "<p>I delegated the PR, let's wait for CI.</p>",
        "id": 397859849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697903241
    }
]