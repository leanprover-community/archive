[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427\">!4#3427</a> I'm getting an unhelpful error from <code>Qq</code> while trying to quote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Matrix.of\">docs#Matrix.of</a>; my guess is that it's tripping over the coercion from equiv to function?</p>\n<p>The error message is just <code>unquoteExpr: inst✝².2 : Expr</code></p>",
        "id": 349220692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681423705
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3430\">!4#3430</a> is slightly more self-contained</p>",
        "id": 349227612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426837
    },
    {
        "content": "<p>Qq tries to reduce types when unquoting them, this also unfolds let-bindings.  The easy fix is just to replace let by have.</p>",
        "id": 349229465,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681427740
    },
    {
        "content": "<p>Is this also the reason that I can't seem to inline the <code>let</code>s into the <code>q(...)</code>?</p>",
        "id": 349229539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681427766
    },
    {
        "content": "<p>And unfolding throws away the type annotation from the <code>Q(...)</code> tag, in case it's not clear.  The error message is a bit cryptic though.</p>",
        "id": 349229554,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681427777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unquoteExpr.3A.20inst.E2.9C.9D.C2.B2.2E2.20.3A.20Expr/near/349229539\">said</a>:</p>\n<blockquote>\n<p>Is this also the reason that I can't seem to inline the <code>let</code>s into the <code>q(...)</code>?</p>\n</blockquote>\n<p>You can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">vecCons</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">eα</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"n\">vecHead</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">eα</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"n\">vecTail</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 349229678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681427856
    },
    {
        "content": "<p>Oh, so there's no need to call <code>ToExpr.toExpr</code> on <code>n</code>?</p>",
        "id": 349230023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681428009
    },
    {
        "content": "<p>Yes, it will automatically insert that.  But it only really works for terms of closed type (Nat) which have a ToExpr instance available.</p>",
        "id": 349230147,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681428086
    },
    {
        "content": "<p>Like it doesn't know that α and eα are related so it can't automatically convert (vecHead v : α)</p>",
        "id": 349230238,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681428127
    },
    {
        "content": "<p>Could it be taught the relationship between <code>toTypeExpr</code> and <code>toExpr</code>?</p>",
        "id": 349230287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681428156
    },
    {
        "content": "<p>Something like this perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">nonrec</span> <span class=\"kd\">def</span> <span class=\"n\">Qq.toExpr.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Qq.QQ</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">toTypeExpr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toExpr</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 349230657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681428348
    },
    {
        "content": "<p>This is the closest I've managed to come:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">toTypeExprQ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">toExprQ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toTypeExprQ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toExpr</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">instance</span> <span class=\"n\">_root_.PiFin.toExpr</span> <span class=\"o\">[</span><span class=\"n\">ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">toTypeExpr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}))</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toTypeExprQ</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">toTypeExpr</span><span class=\"o\">,</span> <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">vecEmpty</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toTypeExprQ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span> <span class=\"n\">toTypeExpr</span><span class=\"o\">,</span> <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">PiFin.toExpr</span> <span class=\"n\">n</span>\n      <span class=\"k\">have</span> <span class=\"n\">et</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toTypeExprQ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">toExprQ</span> <span class=\"o\">(</span><span class=\"n\">vecTail</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n      <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">vecCons</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toExprQ</span> <span class=\"o\">(</span><span class=\"n\">vecHead</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">$</span><span class=\"n\">et</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 349273797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681452719
    },
    {
        "content": "<p>Unfortunately, the <code>toTypeExprQ</code> is opaque here, so we don't know that <code>$(vecTail v)</code> has type <code>Fin _ → _</code>.</p>",
        "id": 349274149,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1681452861
    },
    {
        "content": "<p>Do you think a <code>toQq</code> typeclass that implies <code>toExpr</code> could help here?</p>",
        "id": 349298815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681460439
    }
]