[
    {
        "content": "<p>Suppose I have a hypothesis which looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there some one-line tactic I can use to get the hypotheses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_inr_0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h_inr_1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h_inl_0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h_inl_1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 405612642,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701587118
    },
    {
        "content": "<p><code>simp_rw [Sum.forall, Fin.forall_fin_succ, Fin.forall_fin_one] at h</code>?</p>",
        "id": 405614306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701588679
    },
    {
        "content": "<p>Thanks. I was wondering if there was something a bit more general that would work on any finite type, but I suppose that works.</p>",
        "id": 405614414,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701588781
    },
    {
        "content": "<p>I guess I was thinking it would be useful for automation to have access to splitting things into hypotheses, but I guess it could actually just do this and then split into cases.</p>",
        "id": 405614575,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701588895
    },
    {
        "content": "<p><code>fin_cases</code> could handle this, I guess. But it's not super fast, compared to using the appropriate lemmas straight ahead.</p>",
        "id": 405614619,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701588940
    },
    {
        "content": "<p>I agree that this would be a nice tactic. I've noticed the gap before (there would be some nice use cases in the matrix computations in the <a href=\"https://hrmacbeth.github.io/computations_in_lean\"><code>polyrith</code> tutorial</a>).</p>",
        "id": 405704954,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701643376
    },
    {
        "content": "<p>I'm confused how fin_cases isn't the right tool for this job</p>",
        "id": 405705109,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701643484
    },
    {
        "content": "<p>Maybe I'm missing something, what did you have in mind Eric?</p>",
        "id": 405705394,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701643703
    },
    {
        "content": "<p>Oh I understand now, it's in the hypothesis and not the goal.</p>",
        "id": 405706617,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701644537
    },
    {
        "content": "<p><code>fin_cases at</code> it could be, though</p>",
        "id": 405762875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701674935
    },
    {
        "content": "<p>Luckily for speed, it doesn't even have to prove that the list is exhaustive (for foralls at least, not for exist).</p>",
        "id": 405762979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701674973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20for.20getting.20all.20hypotheses.20out.20of.20a.20finite.20forall/near/405762875\">said</a>:</p>\n<blockquote>\n<p><code>fin_cases at</code> it could be, though</p>\n</blockquote>\n<p>Yeah, at first I thought/hoped that might be the name</p>",
        "id": 405762999,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701674982
    },
    {
        "content": "<p>Possibly related: A tactic that would convert a hypothesis of the form <code>h : ∑ x : Fin 4, f x = 0</code> into <code>f 0 + f 1 + f 2 + f 3 = 0</code>. Does this exist?</p>",
        "id": 405993642,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701761601
    },
    {
        "content": "<p><code>simp_rw [Fin.sum_univ_succ, Fin.sum_univ_zero]</code></p>",
        "id": 405993958,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701761706
    }
]