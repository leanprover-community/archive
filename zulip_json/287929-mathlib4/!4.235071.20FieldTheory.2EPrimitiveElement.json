[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5071\">!4#5071</a> right, how do I fix the last error in this file? There's a subtype I can't get rid of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">eq_X_sub_C_of_separable_of_root_eq</span> <span class=\"n\">h_sep</span> <span class=\"n\">h_root</span> <span class=\"n\">h_splits</span> <span class=\"n\">h_roots</span><span class=\"o\">]</span>\n  <span class=\"n\">trans</span> <span class=\"n\">EuclideanDomain.gcd</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n  <span class=\"bp\">·</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">gcd_map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">γ</span><span class=\"bp\">⟯</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.map_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">IsScalarTower.algebraMap_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- here</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">EuclideanDomain.gcd</span>\n    <span class=\"o\">(</span><span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">γ</span><span class=\"bp\">⟯</span> <span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AdjoinSimple.gen</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">-</span>\n          <span class=\"bp\">↑</span><span class=\"n\">C</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">γ</span><span class=\"bp\">⟯</span> <span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 366440844,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1686824685
    },
    {
        "content": "<p>Maybe try squeezing the simp in mathlib3/mathlib4 and seeing what's different?</p>",
        "id": 366442978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686825003
    },
    {
        "content": "<p>I was going to take a look, but it is green now and marked as <code>help-wanted</code>: is it ready for review, instead?</p>",
        "id": 366454077,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686826922
    },
    {
        "content": "<p>I've hit merge.</p>",
        "id": 366456424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686827362
    },
    {
        "content": "<p>This PR depends on SplittingField.Construction which is receiving forward ports at the moment, and that thread suggests not merging it yet: <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234891.20.20FieldTheory.2ESplittingField/near/366437263\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/!4.234891.20.20FieldTheory.2ESplittingField/near/366437263</a></p>",
        "id": 366458573,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1686827802
    }
]