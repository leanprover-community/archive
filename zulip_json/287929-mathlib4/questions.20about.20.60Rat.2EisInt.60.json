[
    {
        "content": "<p>I was reading through the Rat source, and noticed that it defines <code>isInt</code> but then seems to not use it much of anywhere. Is this to avoid needing to constantly unfold the definition? Could this be \"fixed\" by marking it as simp? While playing about, I also proved the following trivial things that I couldn't see in the library but which I may have overlooked. Are they worth adding, potentially as simp rules? Not sure if I've followed the naming convention or style guide.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--!</span>\n<span class=\"sd\">Some theorems describing cases where ℚ corresponds to ℤ.</span>\n<span class=\"sd\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInt_ofInt</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Rat.ofInt</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isInt</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Rat.ofInt</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">floor_eq_self_if_isInt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.isInt</span> <span class=\"bp\">→</span> <span class=\"n\">a.floor</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Nat.beq_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">Rat.floor</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ite</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha1</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">den_eq_one_iff</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ceil_eq_self_if_isInt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.isInt</span> <span class=\"bp\">→</span> <span class=\"n\">a.ceil</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Nat.beq_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">Rat.ceil</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_ite</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_add</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha1</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">den_eq_one_iff</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_isInt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.isInt</span> <span class=\"bp\">→</span> <span class=\"n\">b.isInt</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isInt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Nat.beq_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">Rat.add_def</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Rat.normalize</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sub_isInt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.isInt</span> <span class=\"bp\">→</span> <span class=\"n\">b.isInt</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isInt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Nat.beq_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">Rat.sub_def</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Rat.normalize</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_isInt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.isInt</span> <span class=\"bp\">→</span> <span class=\"n\">b.isInt</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isInt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.isInt</span><span class=\"o\">,</span> <span class=\"n\">Nat.beq_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">Rat.mul_def</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Rat.normalize</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 391389970,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694877636
    },
    {
        "content": "<p>It seems to be used in the internals of the <code>norm_num</code> tactic.</p>",
        "id": 391401867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694884565
    },
    {
        "content": "<ul>\n<li>Your first lemma could be a simp lemma. The others not really.</li>\n<li>I would prove all these lemmas in the <code>isInt</code> namespace and call them something like <code>floor_eq</code>, <code>ceil_eq</code>, <code>add</code>, <code>sub</code>, <code>mul</code>, so that the resulting names become <code>isInt.add</code>, etc... Then they can be used with dot-notation, which is really useful.</li>\n<li>The arguments <code>a</code> and <code>b</code> should be implicit in all statements.</li>\n</ul>",
        "id": 391402032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694884708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/questions.20about.20.60Rat.2EisInt.60/near/391402032\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I would prove all these lemmas in the <code>isInt</code> namespace and call them something like <code>floor_eq</code>, <code>ceil_eq</code>, <code>add</code>, <code>sub</code>, <code>mul</code>, so that the resulting names become <code>isInt.add</code>, etc... Then they can be used with dot-notation, which is really useful.</li>\n</ul>\n</blockquote>\n<p>Would this mean creating a file <code>isInt.lean</code> within the rat directory? Shall I put together a pull request?</p>",
        "id": 391408868,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694889799
    },
    {
        "content": "<p>What's the goal here? Will this make <code>norm_num</code> more powerful?</p>",
        "id": 391412882,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694892897
    },
    {
        "content": "<p>The <code>.isInt</code> from <code>norm_num</code> is actually a different <code>.isInt</code>: it’s <code>Result.isInt</code>, and can be distinguished by the fact that it takes several arguments (most of them <code>Expr</code>s). This one is <code>Rat.isInt</code>, and afaik is not used by…anything outside of core, yet? I couldn’t find any references for it beyond <code>Lean.Meta.Tactic.LinearArith</code></p>",
        "id": 391413512,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694893337
    },
    {
        "content": "<p>Looks like it's defined in Std and not used there at all?</p>",
        "id": 391413686,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694893504
    },
    {
        "content": "<p>Interestingly, there’s a copy of the definition at <code>Std.Data.Rat.Basic</code>, with the only difference being that this one is <code>@[inline]</code></p>",
        "id": 391413725,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694893515
    },
    {
        "content": "<p>(The core version is in <code>Lean.Data.Rat</code>)</p>",
        "id": 391413857,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694893568
    },
    {
        "content": "<p>Hm. Does the documentation search not index core?</p>",
        "id": 391413908,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694893618
    },
    {
        "content": "<p>Anyway, the question would be whether <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is interested in more API about it, I suppose</p>",
        "id": 391413975,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694893665
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Rat.isInt#doc\">docs#Lean.Rat.isInt</a> in core</p>",
        "id": 391416054,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1694895512
    },
    {
        "content": "<p>Interesting that <a href=\"https://github.com/leanprover/lean4/blob/ec941735c80dc54c53948e30c428905b6600f95a/src/Lean/Data/Rat.lean#L34-L35\">Lean core</a> uses <code>==</code> for <code>=</code> while <a href=\"https://github.com/leanprover/std4/blob/ba5e5e3af519b4fc5221ad0fa4b2c87276f1d323/Std/Data/Rat/Basic.lean#L82-L95\">Std</a> uses both.</p>\n<p>(Oh <code>==</code> is probably <code>Bool</code>-valued comparison ...)</p>",
        "id": 391416104,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1694895581
    },
    {
        "content": "<p>Btw all those should be called <code>IsInt</code>.</p>",
        "id": 391416315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694895715
    },
    {
        "content": "<p>My motivation was that I'm playing with the collatz conjecture, and wanted to prove to myself that a computation that has to go through Rat is guaranteed to have integer values, despite intermediate values having fractional parts.  So I thought I could sprinkle things with some <code>isInt</code> constraints, but then found there did not seem to be any machinery to track these through the calculations.</p>",
        "id": 391417566,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694896696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/questions.20about.20.60Rat.2EisInt.60/near/391413686\">said</a>:</p>\n<blockquote>\n<p>Looks like it's defined in Std and not used there at all?</p>\n</blockquote>\n<p>Right, but there are a ton of places that test <code>den = 1</code>. So it seems odd there's a def that tests exactly this, and every place I looked at where <code>den = 1</code> is checked, the intention is to show that the Rat is equivalent to an integer. That got my software engineering spidie senses tingling.</p>",
        "id": 391418072,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694897105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/questions.20about.20.60Rat.2EisInt.60/near/391416315\">said</a>:</p>\n<blockquote>\n<p>Btw all those should be called <code>IsInt</code>.</p>\n</blockquote>\n<p>Note that they are both <code>Bool</code>s, not <code>Prop</code>s! :)</p>",
        "id": 391418181,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694897184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/questions.20about.20.60Rat.2EisInt.60/near/391418181\">said</a>:</p>\n<blockquote>\n<p>Note that they are both <code>Bool</code>s, not <code>Prop</code>s! :)</p>\n</blockquote>\n<p>Being a bool was a bit annoying, to be honest. Would it be worth refactoring this to an <code>IsInt</code> Prop?</p>",
        "id": 391418892,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694897890
    },
    {
        "content": "<p><code>IsInt</code> certainly sounds nicer to work with and more canonical! What I’m personally not sure of is if there’s another way to phrase it that might be even better (e.g. that there exists an <code>n : ℤ</code> such that <code>a = (n : ℚ)</code>) or if some equivalent definition exists in mathlib already under a different name. <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries\">loogle</a> might be helpful!</p>",
        "id": 391424619,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694903760
    },
    {
        "content": "<p>Being in the range of <code>Int.cast</code> has the advantage of generalising to any <code>AddGroupWithOne</code>.</p>",
        "id": 391424690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694903809
    },
    {
        "content": "<p>Note: the core rats are just pairs of ints and nats, no proofs in the structure. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Rat#doc\">docs#Lean.Rat</a></p>",
        "id": 391451073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694923634
    },
    {
        "content": "<p>So while washing dishes and buying milk, I kept getting nagged at a comment in the Rat file -- it notes that Int is embedded in Rat, by which I take it to mean that there is a function to convert each Int into a corresponding Rat, where a wide range of typeclass behaviours are conserved. But I couldn't see the machinery to check any of this. And I think this is the same issue as I was having with <code>isInt</code> writ-large.</p>\n<p>So I got to tinkering, and I'm sure that what I've made is well-trod ground, but it seems to me that with some code generation and a couple of typeclasses, we can put \"embeds X into Y\" on a rather more sound footing, and get a ton of machinery from it for free. I am hoping that I've reinvented poorly something that is already essentially implemented.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Claim a natural embedding of one type into another</span>\n<span class=\"kd\">class</span> <span class=\"n\">NatEmb</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">embed</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>       <span class=\"c1\">-- project every α to a corresponding β that is its natural representation</span>\n  <span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span>   <span class=\"c1\">-- the set of embedded values, allowing us to track that calculations in β have an interpretation in α</span>\n\n<span class=\"c1\">-- we assume (perhaps hastily) that `Coe` always sanely embeds α into β</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NatEmb</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">embed</span> <span class=\"o\">:=</span> <span class=\"n\">Coe.coe</span>\n  <span class=\"n\">embedding</span> <span class=\"o\">:=</span> <span class=\"n\">c.coe</span> <span class=\"bp\">''</span> <span class=\"n\">Set.univ</span>\n\n<span class=\"c1\">-- an example of claiming that an embedding preserves a particular typeclass</span>\n<span class=\"c1\">-- I would expect that these could (mostly) be code-generated</span>\n<span class=\"kd\">class</span> <span class=\"n\">NatEmb_LT</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">NatEmb</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n    <span class=\"n\">embeds_lt</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LT.lt</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">↔</span> <span class=\"n\">LT.lt</span> <span class=\"o\">(</span><span class=\"n\">e.embed</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.embed</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- this would be hand-written, as somebody needs to make the claim that the natural embedding</span>\n<span class=\"c1\">-- of Nat into Int exists</span>\n<span class=\"kd\">instance</span> <span class=\"n\">NatEmb_LT</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">where</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 391583491,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1694990706
    },
    {
        "content": "<p>I would claim this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharZero#doc\">docs#CharZero</a></p>",
        "id": 391591446,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694997433
    },
    {
        "content": "<p>Oh, maybe not with LT, but probably if <code>R</code> is a strict ordered semiring then you get LT too.</p>",
        "id": 391591540,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694997483
    },
    {
        "content": "<p>The NatEmb then gives us things like (not compiled, so may contain errors):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- test if a value is an embedding</span>\n<span class=\"kd\">def</span> <span class=\"n\">NatEmb.IsEmbedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">NatEmbed</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">e.embedding</span>\n\n<span class=\"c1\">-- test if a value is an embedding of an Int</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int.IsInt</span> <span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">NatEmbed</span> <span class=\"n\">Int</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b.IsEmbedding</span>\n</code></pre></div>\n<p>I think this gives us a uniform way to ask questions about embeddings.</p>",
        "id": 391668344,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695032924
    }
]