[
    {
        "content": "<p>I'm getting full rebuilds after <code>lake exec cache get</code>, as of commit <code>ae7a2e405</code> (as determined by <code>git bisect</code>).<br>\nI added a comment here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7056#issuecomment-1712688172\">https://github.com/leanprover-community/mathlib4/pull/7056#issuecomment-1712688172</a></p>",
        "id": 390087627,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694312359
    },
    {
        "content": "<p>I noticed the behavior on a downstream project that depends on mathlib4, but it happens on mathlib4 itself too.</p>",
        "id": 390087716,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694312414
    },
    {
        "content": "<p>Me too!</p>",
        "id": 390088254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694312849
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390088282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694312881
    },
    {
        "content": "<p>Just cross linking to the thread about the PRs that caused this breakage: <a href=\"#narrow/stream/345428-mathlib-reviewers/topic/requests.20for.20speedy.20review.2Fdelegation\">https://leanprover.zulipchat.com/#narrow/stream/345428-mathlib-reviewers/topic/requests.20for.20speedy.20review.2Fdelegation</a></p>",
        "id": 390088761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313230
    },
    {
        "content": "<p>Okay, I have reverted the relevant commits. There will be a brief period still without a cache until <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6134666739/job/16647685010\">this workflow</a> provides a cache.</p>",
        "id": 390089637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313879
    },
    {
        "content": "<p>(the perhaps more relevant thread is <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390039754\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390039754</a> )</p>",
        "id": 390119045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694335263
    },
    {
        "content": "<p>Is there a way to see whether <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> would produce a valid cache?</p>",
        "id": 390200942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694390434
    },
    {
        "content": "<p>At present I don't know how to do this in CI.</p>",
        "id": 390208944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694393382
    },
    {
        "content": "<p>You can verify locally by:<br>\n<code>lake build &amp;&amp; lake exe cache put &amp;&amp; lake exe cache get</code> and then observing that <code>lake build</code> does further work.</p>",
        "id": 390209102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694393419
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2528\">lean4#2528</a> is about this issue. Hopefully <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> can advise!</p>",
        "id": 390209265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694393479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> There is not presently a way to do a dry run with Lake to determine which, if any, files would be rebuilt without building them. Thus, would be a new feature.</p>",
        "id": 390212801,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694394625
    },
    {
        "content": "<p>Indeed it's still failing. Any idea about how to fix this?</p>",
        "id": 390218524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694397657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> has been trying to diagnose this at <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390161984\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390161984</a>.</p>\n<p>Let's continue this discussion there.</p>",
        "id": 390220105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694398613
    },
    {
        "content": "<p>I have a bit of a wonky internet connection at the moment, which consistently makes <code>cache get</code> hang on retrieving the last few files. But when I kill it with Ctrl-C, it doesn't even try to query those four files again, with <code>build</code> predictably rebuilding the world afterwards. Are others experiencing this? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you see why the .part files don't make <code>cache</code> retry the files here?</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get!\n<span class=\"go\">Attempting to download 3777 file(s)</span>\n<span class=\"go\">Downloaded: 3773 file(s) [attempted 3773/3777 = 99%]</span>\n<span class=\"go\">^C</span>\n<span class=\"go\">lake exe cache get!  0.39s user 0.14s system 0% cpu 3:25.24 total</span>\n<span class=\"gp\">$ </span><span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\n<span class=\"go\">No files to download</span>\n<span class=\"go\">Decompressing 3777 file(s)</span>\n<span class=\"go\">unpacked in 51 ms</span>\n<span class=\"go\">lake exe cache get  0.73s user 0.33s system 116% cpu 0.911 total</span>\n</code></pre></div>",
        "id": 392111227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695214428
    },
    {
        "content": "<p>Oh no, it rebuilds even after a successful <code>get</code>...</p>",
        "id": 392112933,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695214973
    },
    {
        "content": "<p>I did just then have a problem with <code>lake exe cache get &amp;&amp; lake build</code> rebuilding.</p>\n<p>However a <code>lake clean &amp;&amp; lake exe cache get! &amp;&amp; lake build</code> worked fine.</p>",
        "id": 392113804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695215229
    },
    {
        "content": "<p>Yes, <code>clean</code> did it!</p>",
        "id": 392114228,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695215366
    },
    {
        "content": "<p>Maybe <code>lake exe cache get!</code> should imply <code>lake clean</code>. Doesn't really make sense, but perhaps nevertheless helpful. :-)</p>",
        "id": 392114580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695215487
    },
    {
        "content": "<p>Once you're taking emergency measures, you might as well take all of them!</p>",
        "id": 392114613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695215501
    },
    {
        "content": "<p>Fortunately I saved the misbehaving <code>build</code>, so I was able to confirm it was due to bad (Lake) caching: <code>rm build/**/*.hash</code> between <code>cache get</code> and <code>build</code> fixes it /cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 392114895,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695215593
    },
    {
        "content": "<p>So the most probable answer here is that <code>cache</code> is violating Lake's (new) invariants and should delete all <code>.hash</code> files</p>",
        "id": 392115137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695215663
    },
    {
        "content": "<p>I have certainly seen <code>lake exe cache get</code> stopping at 99% several times and I was not convinced that it was to do with wonky internet.</p>",
        "id": 392133589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695221250
    },
    {
        "content": "<p>There are, naturally, curl options that could help here: <code>--speed-time</code> and <code>--speed-limit</code> can be used to detect stalled downloads and could be coupled with <code>--retry</code></p>",
        "id": 392135155,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695221747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I can now definitely confirm the issue was on my end: restarting the router turned a 5min <code>cache get!</code> terminating with 4 SSL connection timeouts into a 40s 100% successful retrieval</p>",
        "id": 392140102,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695223155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Yeah, Lake trusts the hashes in the <code>build</code> folder, so if they are wrong, trace-checking will break. You can force a rehash with <code>--rehash</code> / <code>-H</code>.</p>",
        "id": 392160617,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695229689
    },
    {
        "content": "<p>As <code>cache</code> does not currently call any Lake commands after retrieval, it might be easier to go the manual removal route. Do you agree?</p>",
        "id": 392161220,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695229946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Yes, the principled fix is that cache should delete or replace them (like it does with <code>.trace</code> files).</p>",
        "id": 392162441,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695230412
    }
]