[
    {
        "content": "<p>In porting <a href=\"https://github.com/leanprover-community/mathlib4/pull/3836\">!4#3836</a>, in 5 or so of the theorems \"no applicable extensionality lemma found\" , so<code>ext</code> does not work anymore. <br>\nI looked in lean3 and figured out that in one of those writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine'</span> <span class=\"n\">Multiequalizer.hom_ext</span> <span class=\"o\">((</span><span class=\"n\">unop</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">J.diagram</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span>\n          <span class=\"o\">((</span><span class=\"n\">isLimitOfPreserves</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"o\">((</span><span class=\"n\">unop</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">multicospan</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">conePointUniqueUpToIso</span>\n          <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"o\">(((</span><span class=\"n\">unop</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">multicospan</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">≪≫</span>\n          <span class=\"n\">HasLimit.isoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">GrothendieckTopology.Cover.multicospanComp</span> <span class=\"n\">F</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span>\n          <span class=\"o\">(((</span><span class=\"n\">isLimitOfPreserves</span> <span class=\"n\">F</span>\n          <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"o\">((</span><span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">multicospan</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">conePointUniqueUpToIso</span>\n          <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"o\">(((</span><span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">multicospan</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">≪≫</span>\n          <span class=\"n\">HasLimit.isoOfNatIso</span> <span class=\"o\">(</span>\n          <span class=\"n\">GrothendieckTopology.Cover.multicospanComp</span> <span class=\"n\">F</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span>\n          <span class=\"o\">(</span><span class=\"n\">J.diagram</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">unop</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fixes the theorem, but this seems awfully long for what has been \"<code>ext</code>\" before. Do I need to add a suitable extensionality lemma? If yes, which one would that be?</p>\n<p>Another issue:  <code>plusFunctorWhiskerRightIso</code> only works after setting maxHeartbeats to 400000<br>\nHelp would be appreciated!</p>",
        "id": 356545490,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683490900
    },
    {
        "content": "<p>I believe there's cases where we needed to add more ext lemmas</p>",
        "id": 356546071,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683491291
    },
    {
        "content": "<p>In the flat functor PR I found an <code>ext</code> failure where the missing lemma looked very pathological. Maybe we're better off writing an <code>ext!</code> tactic which emulates the lean 3 \"try all ext lemmas and see which unify\" approach?</p>",
        "id": 356556666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683499428
    },
    {
        "content": "<p>Having <code>ext!</code> sounds good to me.</p>",
        "id": 356611164,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683529021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233836.20CategoryTheory.2ESites.2ECompatiblePlus/near/356546071\">said</a>:</p>\n<blockquote>\n<p>I believe there's cases where we needed to add more ext lemmas</p>\n</blockquote>\n<p>I don't know how to figure out which ext lemmas are needed here</p>",
        "id": 356611230,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683529054
    },
    {
        "content": "<p>Is the issue that a lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsLimit.hom_ext#doc\">docs4#CategoryTheory.Limits.IsLimit.hom_ext</a> not firing?</p>",
        "id": 356718560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683554518
    },
    {
        "content": "<p>Well, it’s not firing because it’s not tagged with ext. but I think the lean3 version was… <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_limit.hom_ext\">docs#category_theory.limits.is_limit.hom_ext</a></p>",
        "id": 356718906,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683554589
    },
    {
        "content": "<p>Hmm maybe not.</p>",
        "id": 356719119,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683554638
    },
    {
        "content": "<p>Does <code>apply Multiequalizer.hom_ext</code> work?</p>",
        "id": 356723166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683555324
    },
    {
        "content": "<p>yes, great, this worked at least for a few of the cases. Now there are two non-working <code>ext</code> left. </p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Multiequalizer.hom_ext#doc\">docs4#CategoryTheory.Limits.Multiequalizer.hom_ext</a> seems to have the <code>[ext]</code> attribute. What is the reason that <code>ext</code> is not finding it?</p>",
        "id": 358098933,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683980877
    },
    {
        "content": "<p>Does it syntactically match? Lean 3 <code>ext</code>, if nothing syntactially matched, apparently just tried all <code>ext</code> lemmas to se if anything unified. Lean 4 has dropped this (although there have been suggestions of writing <code>ext!</code> which tries all ext lemmas, although I'm in no position to write this myself).</p>",
        "id": 358100668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683981508
    },
    {
        "content": "<p>The problem wasn't really the <code>ext</code>s, but just not following the proof in mathlib3. :-) An <code>erw</code> had mysteriously changed to an ineffective <code>simp only</code>, and there was a mistranslation of <code>colim_map</code> to <code>colim_map</code> (which unfortunately exists!) rather than <code>colimMap</code>.</p>",
        "id": 364141890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686099643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span>, if you want to review my change at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3836/commits/5ae1b6ef51d294ec82b8b39c880e0a336be611f1\">https://github.com/leanprover-community/mathlib4/pull/3836/commits/5ae1b6ef51d294ec82b8b39c880e0a336be611f1</a>, I think we can mark this <code>awaiting-review</code>.</p>",
        "id": 364141947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686099677
    },
    {
        "content": "<p>Done. Great fix!</p>",
        "id": 364160424,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1686112893
    }
]