[
    {
        "content": "<p>I have an issue with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.Positivity.evalMul#doc\">docs#Mathlib.Tactic.Positivity.evalMul</a> (which came from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/578\">#578</a>). <a href=\"https://github.com/leanprover-community/mathlib4/blob/20fb81821d7bb3b3bff5da563638068af7b19108/Mathlib/Tactic/Positivity/Basic.lean#L198\">This line</a> means that the extension only works in <code>StrictOrderedSemiring</code>s, except that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_nonneg#doc\">docs#mul_nonneg</a> works more generally in ordered semirings.</p>",
        "id": 391124775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694770807
    },
    {
        "content": "<p>This is relevant to me since I am using <code>positivity</code> to prove goals of the form <code>0 ≤ f * g</code> where <code>f g : ι → ℝ</code>, and <code>ι → ℝ</code> is not a strictly ordered semiring.</p>",
        "id": 391124979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694770863
    },
    {
        "content": "<p>Is there an easy fix?</p>",
        "id": 391125032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694770881
    },
    {
        "content": "<p>So what's the issue? Does weakening that line break its support for <code>0 &lt;</code> goals?</p>",
        "id": 391128658,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694771943
    },
    {
        "content": "<p>Isn't the easy fix replacing that synthesis line?</p>",
        "id": 391128660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694771944
    },
    {
        "content": "<p>If that's the case, could we move the synthesis into each of the match arms?</p>",
        "id": 391128861,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694772006
    },
    {
        "content": "<p>That's what I would think. But I have no Lean 4 metaprogramming experience, and even less experience with Qq!</p>",
        "id": 391128949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694772033
    },
    {
        "content": "<p>I think we might need to tweak the code slightly to look more like what I wrote in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7089\">#7089</a></p>",
        "id": 391128965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694772037
    },
    {
        "content": "<p>That is, to find the initial instances by unification so that we can call <code>core</code> on them, before looking for stronger instances in the match arms</p>",
        "id": 391129053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694772066
    },
    {
        "content": "<p>While I'm at it, is there any obvious reason why the following extension doesn't work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Rat.num_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.num_eq_zero.not</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Function</span> <span class=\"n\">Rat</span>\n\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_pos_of_pos</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_pos_iff_pos</span>\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_nonneg_of_nonneg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_nonneg_iff_zero_le</span>\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_ne_zero_of_ne_zero</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_ne_zero</span>\n\n<span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `Rat.num a`,</span>\n<span class=\"sd\">such that `positivity` successfully recognises `a`. -/</span>\n<span class=\"kd\">@[positivity (Rat.num _)]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalRatnum</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_u</span> <span class=\"n\">_α</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not Rat.num\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">zα'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">pα'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα'</span> <span class=\"n\">pα'</span> <span class=\"n\">a</span>\n  <span class=\"k\">match</span> <span class=\"n\">ra</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_pos_of_pos</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_nonneg_of_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_ne_zero_of_ne_zero</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `Rat.den a`. -/</span>\n<span class=\"kd\">@[positivity Rat.den _]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalRatden</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_u</span> <span class=\"n\">_α</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not Rat.den\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">den_pos</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.num</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- failed</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q.num</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- failed</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- failed</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- failed</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n</code></pre></div>",
        "id": 391129818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694772311
    },
    {
        "content": "<p>(actually, feel free to move this to <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a>, I forgot that stream existed)</p>",
        "id": 391130319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694772487
    },
    {
        "content": "<p>Update: Just added my attempt for <code>Rat.den</code>, which is even easier but which I still failed miserably <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 391131738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694773016
    },
    {
        "content": "<p>I'll have a go at those in half an hour</p>",
        "id": 391132044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694773135
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Function</span> <span class=\"n\">Rat</span>\n\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_pos_of_pos</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_pos_iff_pos</span>\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_nonneg_of_nonneg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_nonneg_iff_zero_le</span>\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">num_ne_zero_of_ne_zero</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">num_ne_zero</span>\n\n<span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `Rat.num a`,</span>\n<span class=\"sd\">such that `positivity` successfully recognises `a`. -/</span>\n<span class=\"kd\">@[positivity (Rat.num _)]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalRatnum</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_u</span> <span class=\"n\">_α</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Rat.num</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not Rat.num\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">zα'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">pα'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- TODO: what's the right way to write these `: Expr`s?</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα'</span> <span class=\"n\">pα'</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_pos_of_pos</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_nonneg_of_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"n\">pa</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">num_ne_zero_of_ne_zero</span> <span class=\"bp\">$</span><span class=\"n\">pa</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `Rat.den a`. -/</span>\n<span class=\"kd\">@[positivity Rat.den _]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalRatden</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_u</span> <span class=\"n\">_α</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Rat.den</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not Rat.den\"</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">den_pos</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.num</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- ok!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q.num</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- ok!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- ok!</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.den</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- ok!</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n</code></pre></div>",
        "id": 391164928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694782859
    },
    {
        "content": "<p>These <code>: Expr</code>s feel like one of:</p>\n<ul>\n<li>A design flaw in <code>PositivityExt</code></li>\n<li>A Qq bug</li>\n<li>Me not knowing what I'm doing with Qq</li>\n</ul>",
        "id": 391165060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694782895
    },
    {
        "content": "<p>So my mistake was the match?</p>",
        "id": 391166048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694783148
    },
    {
        "content": "<p>Aaah, I see. Am I right in thinking it's because I didn't type-ascript <code>e</code>, so Qq couldn't derive the type-correctness of my subsequent match?</p>",
        "id": 391166645,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694783289
    },
    {
        "content": "<p>Yes, the match isn't even well-typed if you don't first lie about the type of <code>e</code></p>",
        "id": 391254215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694808597
    },
    {
        "content": "<p>in what sense is that ascription a \"lie\"?</p>",
        "id": 391254698,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694808798
    },
    {
        "content": "<p>My understanding of <code>(e : Q(ℕ))</code> is that we are asserting that <code>e</code> is an expression of type <code>ℕ</code>.</p>",
        "id": 391254835,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694808855
    },
    {
        "content": "<p>Right, but we've been told it's of type <code>_α : Q(Type u)</code> (we also aren't told that <code>u = level.zero</code>)</p>",
        "id": 391255795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694809317
    },
    {
        "content": "<p>Which we're ignoring because we \"know better\" (about the internals of the positivity tactic and how it promises to call us)</p>",
        "id": 391255917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694809364
    },
    {
        "content": "<p>it's more about the fact that your <code>let ~q(Rat.num $a) := e</code> implies some things about u and alpha which the type system doesn't know</p>",
        "id": 391256123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694809454
    },
    {
        "content": "<p>Is it something that the type system could know?</p>",
        "id": 391256179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694809482
    },
    {
        "content": "<p>working on it</p>",
        "id": 391256193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694809494
    },
    {
        "content": "<p>It seems like we could refactor positivity extensions somehow so that the match and lookup are simultaneous</p>",
        "id": 391256326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694809558
    },
    {
        "content": "<p><code>positivity</code> extension for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt#doc\">docs#Real.sqrt</a> doesn't work for me.</p>",
        "id": 399117970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698557419
    },
    {
        "content": "<p>How do I debug it?</p>",
        "id": 399117979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698557433
    },
    {
        "content": "<p>More details: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.sqrt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 399118689,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698558204
    },
    {
        "content": "<p>It looks like the function doesn't get past the <code>let ra ← core zα' pα' a</code> line without <code>(_ : 0 &lt; x)</code>.</p>",
        "id": 399121912,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698560982
    },
    {
        "content": "<p>Probably, the call to <code>core</code> fails instead of returning <code>none</code>.</p>",
        "id": 399122446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698561527
    },
    {
        "content": "<p>Yep:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/b56efa53d7479fda9740f364170cbaef34699dee/Mathlib/Tactic/Positivity/Core.lean#L304\">https://github.com/leanprover-community/mathlib4/blob/b56efa53d7479fda9740f364170cbaef34699dee/Mathlib/Tactic/Positivity/Core.lean#L304</a></p>",
        "id": 399150578,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698583715
    },
    {
        "content": "<p>This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">diff</span> <span class=\"c1\">--git a/Mathlib/Data/Real/Sqrt.lean b/Mathlib/Data/Real/Sqrt.lean</span>\n<span class=\"n\">index</span> <span class=\"mi\">970</span><span class=\"n\">b33638..ca73aab94</span> <span class=\"mi\">100644</span>\n<span class=\"c1\">--- a/Mathlib/Data/Real/Sqrt.lean</span>\n<span class=\"bp\">+++</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Real</span><span class=\"bp\">/</span><span class=\"n\">Sqrt.lean</span>\n<span class=\"bp\">@@</span> <span class=\"bp\">-</span><span class=\"mi\">380</span><span class=\"o\">,</span><span class=\"mi\">7</span> <span class=\"bp\">+</span><span class=\"mi\">380</span><span class=\"o\">,</span><span class=\"mi\">7</span> <span class=\"bp\">@@</span> <span class=\"kd\">def</span> <span class=\"n\">evalSqrt</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Real</span><span class=\"o\">)))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not Real.sqrt\"</span>\n   <span class=\"k\">let</span> <span class=\"n\">zα'</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span>\n   <span class=\"k\">let</span> <span class=\"n\">pα'</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span>\n<span class=\"bp\">-</span>  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα'</span> <span class=\"n\">pα'</span> <span class=\"n\">a</span>\n<span class=\"bp\">+</span>  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"bp\">←</span> <span class=\"n\">catchNone</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">core</span> <span class=\"n\">zα'</span> <span class=\"n\">pα'</span> <span class=\"n\">a</span>\n   <span class=\"n\">assertInstancesCommute</span>\n   <span class=\"k\">match</span> <span class=\"n\">ra</span> <span class=\"k\">with</span>\n</code></pre></div>",
        "id": 399151038,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698584098
    },
    {
        "content": "<p>But makes me wonder why the <code>throwNone</code> exists in the first place</p>",
        "id": 399151054,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698584109
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8014\">mathlib4#8014</a></p>",
        "id": 399151738,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698584551
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 399164133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698593503
    }
]