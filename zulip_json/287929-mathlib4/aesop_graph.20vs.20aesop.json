[
    {
        "content": "<p>Dear All,</p>\n<p>this question arises from a discussion with a student -- I do not know my way around the <code>SimpleGraph</code> part of <code>Mathlib</code>, so this may be a known feature.</p>\n<p>In the code below, the <code>symm</code> and <code>loopless</code> fields of <code>SimpleGraph</code> are \"auto-solved\" by <code>aesop_graph</code>.  <code>symm</code> works, while <code>loopless</code> does not.  So far, so good.  However, <code>aesop</code> does prove <code>loopless</code>.  Is this expected?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--  loopless a b := by aesop  --  &lt;--- uncomment and `aesop` actually succeeds</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'aesop' failed, failed to prove the goal after exhaustive search.</span>\n\n<span class=\"cm\">⊢ Irreflexive fun x y =&gt; x = 0 ∧ y = 1 ∨ x = 1 ∧ y = 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The error message is also kind of ironic: \"<code>aesop</code> does not solve it\", so you try with <code>aesop</code> and it does actually solve it!</p>",
        "id": 399796199,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698869293
    },
    {
        "content": "<p>I'm not sure how carefully <code>aesop_graph</code> has been reviewed -- it appeared during the port to replace the Lean 3 <code>obviously</code> tactic, and I don't know enough about aesop to know if it's been configured correctly!</p>",
        "id": 399802679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872415
    },
    {
        "content": "<p>Fair enough!</p>\n<p>A simple way out could be to make the error message say <code>tactic 'aesop_graph'</code>, rather than <code>tactic 'aesop'</code>, to avoid similar oddities!</p>",
        "id": 399802905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698872497
    },
    {
        "content": "<p>This doesn't seem good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop_graph_nonterminal</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    aesop: error in norm unfold: maximum recursion depth has been reached</span>\n<span class=\"cm\">    (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>",
        "id": 399803019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872526
    },
    {
        "content": "<p>Hmm, I'm not seeing that <code>aesop</code> can solve it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 399803426,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872680
    },
    {
        "content": "<p><code>aesop</code> can solve it: it is <code>aesop_graph</code> that cannot.</p>",
        "id": 399803649,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698872802
    },
    {
        "content": "<p>But when <code>aesop_graph</code> fails, it reports that <code>aesop</code> could not solve it, which is not true.</p>",
        "id": 399803765,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698872866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I had an accidental double negative in what I said, check the code snippet, I don't see <code>aesop</code> working.</p>",
        "id": 399803950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698872946
    },
    {
        "content": "<p>I used <code>loopless x y := by aesop</code>: note the <code>intro</code>duced <code>x y</code>.</p>",
        "id": 399804295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698873117
    },
    {
        "content": "<p>But <code>aesop_graph</code> fails also with <code>x y</code>.</p>",
        "id": 399804373,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698873145
    },
    {
        "content": "<p>Anyway, maybe the answer is simply: try <code>aesop</code>, if <code>aesop_graph</code> does not work!</p>",
        "id": 399804541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698873240
    },
    {
        "content": "<p>After all, they are different algorithms, so they will perform differently.</p>",
        "id": 399804615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698873271
    },
    {
        "content": "<p>I just found it a little ironic that <code>aesop_graph</code> fails to prove that the complete graph on two vertices is a graph!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 399804730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698873345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  Thanks for bringing up this issue with <code>aesop_graph</code>. The culprit seems to be <a href=\"https://github.com/leanprover-community/mathlib4/blob/404b225cc7af8823e6759120282a7a5b437d4306/Mathlib/Combinatorics/SimpleGraph/Basic.lean#L181\">this line</a>, which adds an <code>aesop</code> attribute to <code>Ne.irrefl</code> to show that a <code>completeGraph</code> is a graph.</p>\n<p>Here is a snippet where <code>aesop_graph</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"n\">erase_aesop_rules</span> <span class=\"o\">[</span><span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">SimpleGraph</span><span class=\"o\">])</span> <span class=\"n\">Ne.irrefl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_graph</span> <span class=\"c1\">-- now works</span>\n</code></pre></div>",
        "id": 399909266,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1698923159
    },
    {
        "content": "<p>Anand, thank you very much!</p>",
        "id": 399911444,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698923692
    },
    {
        "content": "<p>In fact, now that it works, you can completely omit the field!</p>",
        "id": 399911651,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698923746
    }
]