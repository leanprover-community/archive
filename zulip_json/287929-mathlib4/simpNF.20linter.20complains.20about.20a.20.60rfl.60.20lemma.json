[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"sd\">/-- `primesBelow n` is the set of primes less than `n` as a finset. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">primesBelow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">primesBelow_zero</span> <span class=\"o\">:</span> <span class=\"n\">primesBelow</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.primesBelow_zero</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [@Finset.filter_congr_decidable,</span>\n<span class=\"cm\"> Finset.range_zero,</span>\n<span class=\"cm\"> @Finset.not_mem_empty,</span>\n<span class=\"cm\"> @IsEmpty.forall_iff,</span>\n<span class=\"cm\"> @forall_const,</span>\n<span class=\"cm\"> @Finset.filter_true_of_mem]</span>\n<span class=\"cm\">One of the lemmas above could be a duplicate.</span>\n<span class=\"cm\">If that's not the case try reordering lemmas or adding @[priority].</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>I guess I should remove the <code>simp</code> attribute.<br>\nBut it still strikes me as strange that the linter insists on a more complicated proof. Is this expected behavior?</p>",
        "id": 400606596,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699303002
    },
    {
        "content": "<p>Replacing <code>abbrev</code> by <code>def</code> also seems to help.</p>",
        "id": 400606950,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699303183
    },
    {
        "content": "<p>I guess the point is that because you made it an <code>abbrev</code> Lean can see things like <code>(Finset.range 0).filter</code> which it already knows how to simplify, so it's arguing that you don't need to tell it again.</p>",
        "id": 400606977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699303201
    }
]