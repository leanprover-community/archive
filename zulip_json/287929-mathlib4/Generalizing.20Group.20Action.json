[
    {
        "content": "<p>Hi all, I'm looking at <code>Mathlib.GroupTheory.GroupAction.Hom</code> and I would like to generalize <code>MulActionHom</code> <code>DistribMulActionHom</code> and <code>MulSemiringActionHom</code> to allow for compatibility with morphisms of monoids, just like the definition of <code>LinearMap</code> allows for a semilinear map w.r.t. a morphism of the coefficient ring. Is this something mathlib would like to incorporate or I should make separate Hom classes for my own project?</p>",
        "id": 405417806,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701455632
    },
    {
        "content": "<p><del>Also, <code>MulActionHom</code> as it is currently defined isn't really for \"homomorphisms of <code>MulAction</code> but instead it should be <code>SMulHom</code>, as <code>MulActionHom</code> currently does not assume the action is a monoid action but a generic type.</del> It is true that there is no need to put in the extra parameter.</p>",
        "id": 405418244,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701455844
    },
    {
        "content": "<p>There is already at least one other person in the middle of such a project</p>",
        "id": 405419934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701456588
    },
    {
        "content": "<p>Great! Do you have any pointer for that?</p>",
        "id": 405420148,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701456680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> you're not talking about me, are you?</p>",
        "id": 405420946,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701457025
    },
    {
        "content": "<p>I think it was maybe <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>? I really don't remember</p>",
        "id": 405425641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701458831
    },
    {
        "content": "<p>Yes, it is me. Everything is in the branch #SMulSemiHom . There is a PR in progress, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6057\">#6057</a></p>",
        "id": 405439811,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701465682
    },
    {
        "content": "<p>If you're willing to go on with that, feel free, because I don't really have the time now.</p>",
        "id": 405439873,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701465720
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/SMulSemiHom\">branch#SMulSemiHom</a></p>",
        "id": 405440841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701466182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> I managed to work a little bit on it yesterday night, and implemented all (I hope so) remarks by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> .  Everytime something compiles, it goes further into building mathlib. This morning, I needed to fix something earlier (precisely as suggested by Anne)  to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharacterSpace#doc\">docs#CharacterSpace</a> compile smoothly, and it now goes to reverting stupid modifications I had done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarHom#doc\">docs#StarHom</a>â€¦ This is slow and a bit painful.</p>\n<p>One thing that will need to be updated is how composition behaves, because for now, I do provide something analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHomCompTriple#doc\">docs#RingHomCompTriple</a> but did not rewrite the latter in terms of the former. The reason is that the latter seems to play with TypeClasses to make a lot of equalities defeq, it is probably unreasonable to expect that in the overall generality.</p>\n<p>Another thing that could be checked is having a consistent naming of similar functions <code>map_smul</code>, <code>map_smul underscore sl</code>, etc., possibly with primes, according to the function belonging to the structure or the class. I am not sure mathlib is consistent though, and I can't make my mind on what is reasonable. Maybe <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has an idea about this.</p>",
        "id": 406002896,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701765298
    }
]