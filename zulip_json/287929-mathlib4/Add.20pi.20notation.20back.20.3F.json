[
    {
        "content": "<p>Should we add a notation (maybe scoped) to allow pi notation again ? It seems very weird to read that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.module#doc\">docs4#Pi.module</a> is about the module structure on <code>∀ i, M i</code>or <code>(i : I) → M i</code> ...</p>",
        "id": 353491228,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1682629365
    },
    {
        "content": "<p>I think this is probably low enough priority that we can revisit it after the port; but I agree it's pretty weird to have pi in all the names when we no longer use the symbol with that name.</p>",
        "id": 353491983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682629500
    },
    {
        "content": "<p>About this pi notation issue, does anyone has code doing that I could paste in my teaching material? There is no way I can use <code>∀ i, M i</code> for a product of types.</p>",
        "id": 355779132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683207865
    },
    {
        "content": "<p>I assume you also don't like using <code>(i : I) → M i</code>?</p>",
        "id": 355785410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683209204
    },
    {
        "content": "<p>Here's a scoped notation and pretty printer for pi notation, as a synonym for forall:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PiNotation</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span> <span class=\"n\">Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kd\">@[scoped term_parser]</span>\n<span class=\"kd\">def</span> <span class=\"n\">piNotation</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span><span class=\"o\">:</span><span class=\"n\">leadPrec</span>\n  <span class=\"n\">unicodeSymbol</span> <span class=\"s2\">\"Π\"</span> <span class=\"s2\">\"Pi\"</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">many1</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">binderIdent</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"n\">optType</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">termParser</span>\n\n<span class=\"kd\">@[scoped macro piNotation]</span> <span class=\"kd\">def</span> <span class=\"n\">replacePiNotation</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Macro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">_</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Term.forall</span> <span class=\"n\">args</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n\n<span class=\"kd\">@[scoped delab forallE]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabPi</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabForall</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PiNotation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">PiNotation</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span>\n<span class=\"c1\">-- Π (i : Nat), Fin i : Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span>\n<span class=\"c1\">-- Π {i : Nat}, Fin i : Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">j</span>\n<span class=\"c1\">-- Π (i j : Nat), Fin i × Fin j : Type</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">Bool</span> <span class=\"k\">else</span> <span class=\"n\">Unit</span>\n<span class=\"c1\">-- Π (p : Prop) [inst : Decidable p], if p then Bool else Unit : Type</span>\n</code></pre></div>",
        "id": 355787931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683209610
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I just updated this to have a pretty printer too)</p>",
        "id": 355800328,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683211978
    },
    {
        "content": "<p>Amazing, thanks!</p>",
        "id": 355800977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683212101
    },
    {
        "content": "<p>I was surprised to find your code above still correctly prints <code>Π i : Nat, i = i</code> as <code>∀ (i : Nat), i = i</code>; where's the detection of Type vs Prop happening?</p>",
        "id": 355802549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683212389
    },
    {
        "content": "<p>It's calling the main <code>delabForall</code>, so it's happening here: <code>| `($group:bracketedBinder → $body) =&gt;</code></p>",
        "id": 355802869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683212436
    },
    {
        "content": "<p>And I guess you can golf the delaborator to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[scoped delab forallE]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabPi</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">delabForall</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span> <span class=\"bp\">$</span><span class=\"n\">groups</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"bp\">$</span><span class=\"n\">group</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n</code></pre></div>\n<p>which avoids re-matching against the output you just generated</p>",
        "id": 355805278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683212858
    },
    {
        "content": "<p>Does repeating <code>:bracketedBinder</code> on the RHS as you do in your example make any difference?</p>",
        "id": 355805367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683212877
    },
    {
        "content": "<p>Probably not here. It's just to make sure the antiquote parses as the right sort of thing when there's ambiguity, and I don't have a good sense of when these hints are needed (omitting them sometimes gives you compilable but wrong code)</p>",
        "id": 355807686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683213341
    },
    {
        "content": "<p>PR?</p>",
        "id": 355914897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683249419
    },
    {
        "content": "<p>Scott, where do you want this to be PRed? More importantly, don't we want this by default at least in mathlib? It would be a bit silly to have <code>open PiNotation</code> on top of every mathlib file.</p>",
        "id": 355964387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683271059
    },
    {
        "content": "<p>I was assuming we would just put it in mathlib, and rejigger so it's not behind a namespace?</p>",
        "id": 356025976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683286395
    }
]