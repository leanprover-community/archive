[
    {
        "content": "<p><code>Polynomial R</code> is defined as <code>AddMonoidAlgebra R ℕ</code> while <code>PowerSeries R</code> is defined as <code>MvPowerSeries Unit R</code>.<br>\nIsn't there a reasonable reason to make these two definitions parallel, and either defining <code>Polynomial R</code> as <code>MvPolynomial Unit R</code>, or defining <code>PowerSeries R</code> as <code>(Unit →₀ ℕ) → R</code>.<br>\nAnd if yes, which one to choose?</p>",
        "id": 398492969,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698242734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398492969\">said</a>:</p>\n<blockquote>\n<p>either defining <code>Polynomial R</code> as <code>MvPolynomial Unit R</code></p>\n</blockquote>\n<p>I think we used to do this, but it was annoying</p>\n<blockquote>\n<p>, or defining <code>PowerSeries R</code> as <code>(Unit →₀ ℕ) → R</code>.</p>\n</blockquote>\n<p>Wish granted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.PowerSeries.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PowerSeries</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">Unit</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 398493725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698242935
    },
    {
        "content": "<p>It think it's reasonable to align them. The question is, which definition makes it easiest to set up the API?<br>\nAnd of course aligning them might be a sizable refactor...</p>",
        "id": 398493743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698242940
    },
    {
        "content": "<p>Maybe you meant</p>\n<blockquote>\n<p>or defining <code>PowerSeries R</code> as <code>ℕ → R</code>.</p>\n</blockquote>",
        "id": 398493932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698242980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398492969\">said</a>:</p>\n<blockquote>\n<p><code>Polynomial R</code> is defined as <code>AddMonoidAlgebra R ℕ</code></p>\n</blockquote>\n<p>Wait, no it's not. It's a one field structure wrapper around it.</p>",
        "id": 398494171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698243042
    },
    {
        "content": "<p>We really should make <code>AddMonoidAlgebra</code> the one field structure and <code>Polynomial</code> an <code>abbrev</code>.</p>",
        "id": 398494358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698243102
    },
    {
        "content": "<p>Some more general API would really be good for polynomials, so that we dont have to keep reproving things, can we just make <code>coeff</code> an abbreviation for taking the component in the <code>n</code>th graded piece or something? So many arguments would be a lot cleaner if we were allowed to talk about the <code>-1</code> coefficient of a polynomial but setting up a parallel <code>zcoeff</code> seems really annoying</p>",
        "id": 398496483,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698243685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398494358\">said</a>:</p>\n<blockquote>\n<p>We really should make <code>AddMonoidAlgebra</code> the one field structure and <code>Polynomial</code> an <code>abbrev</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> and I were discussing the same thing at LftCM 2023 (and agree with you)</p>",
        "id": 398496516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698243693
    },
    {
        "content": "<p>I take this opportunity to make one further remark.<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPowerSeries#doc\">docs#MvPowerSeries</a> makes no assumption on the type of coefficients which is just a type, while <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidAlgebra#doc\">docs#AddMonoidAlgebra</a> assumes that  it is a semiring. The first choice is better, because it paves the way to having <code>MvPowerSeries M</code> with coefficients in a <code>M : Module R</code>, which would be a module over <code>MvPowerSeries  R</code>. <br>\nIn Bourbaki, Algebra, they play with <code>M[X]</code>, with <code>M</code> a module, but it is defined there using tensor product, and this gives rise to useless complications (for us only, for <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  and I in particular; of course, they don't let any such identification bother them more than 2 seconds).<br>\nMy feeling is that would be nice to have this, but I have no idea of how it should be set up.<br>\nI don't expect we should have <code>AddMonoidAddMonoid</code>, <code>AddMonoidModule</code>, etc.</p>",
        "id": 398498499,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698244260
    },
    {
        "content": "<p>Morally <code>AddMonoidModule</code> is just <code>Finsupp</code>; but I guess it's nice to allow <code>AddMonoidAlgebra</code> to be used in the general case</p>",
        "id": 398499512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698244550
    },
    {
        "content": "<p>Note also we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PolynomialModule#doc\">docs#PolynomialModule</a> already, defined in terms of Finsupp</p>",
        "id": 398500403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698244790
    },
    {
        "content": "<p>Can we introduce <code>IsPowerSeries</code> and <code>IsPolynomial</code> classes (also for <code>mv</code> variants) similar to <code>IsLocalization</code>? We shouldn't care about the actual definition of the types themselves at the end of the day.</p>",
        "id": 398502377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245318
    },
    {
        "content": "<p>Presumably <code>M[X]</code> would not satisfy <code>IsPolynomial</code>?</p>",
        "id": 398502786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245433
    },
    {
        "content": "<p>What is <code>M[X]</code>?</p>",
        "id": 398502829,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245449
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PolynomialModule#doc\">docs#PolynomialModule</a> (admittedly <code>M[X]</code> isn't actually notation)</p>",
        "id": 398502849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245455
    },
    {
        "content": "<p>Oh so it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><msub><mo>⊗</mo><mi>R</mi></msub><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">{R}[X] \\otimes_R M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>?</p>",
        "id": 398502994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245498
    },
    {
        "content": "<p>I guess that's what was meant by</p>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398498499\">said</a>:</p>\n<blockquote>\n<p>In Bourbaki, Algebra, they play with <code>M[X]</code>, with <code>M</code> a module, but it is defined there using tensor product</p>\n</blockquote>",
        "id": 398503155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245539
    },
    {
        "content": "<p>Right. In that case I would suggest we also introduce a <code>IsBaseChange</code> class for modules.</p>",
        "id": 398503256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245566
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTensorProduct#doc\">docs#IsTensorProduct</a></p>",
        "id": 398503369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245593
    },
    {
        "content": "<p>But it's not clear to me how <code>IsPolynomial</code> would be useful; what instances do you envisage?</p>",
        "id": 398503484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245624
    },
    {
        "content": "<p>That's a good start, but thinking of a module as a base-change would include some additional API</p>",
        "id": 398503508,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245634
    },
    {
        "content": "<p>(I have to teach in 5 mins, so I need to run!)</p>",
        "id": 398503626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698245657
    },
    {
        "content": "<p>I think making IsTensorProduct heterobasic would suffice; but maybe an easier approach would be to define <code>IsBaseChange</code> in terms of a module isomorphism with the appropriate tensor product</p>",
        "id": 398503667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245670
    },
    {
        "content": "<p>Then things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CliffordAlgebra.equivBaseChange#doc\">docs#CliffordAlgebra.equivBaseChange</a> would directly populate the instance</p>",
        "id": 398503843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245726
    },
    {
        "content": "<p>I presume that <code>Is(Mv)Polynomial</code> would contain the universal property? What about <code>Is(Mv)PowerSeries</code>?</p>",
        "id": 398504237,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698245852
    },
    {
        "content": "<p>Unless we can think of more than one instance for each of these typeclasses, I claim they are pointless</p>",
        "id": 398504561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698245945
    },
    {
        "content": "<p>For <code>IsPolynomial</code>, I see two of them, one using <code>Nat</code>, and the other using <code>Unit to Nat</code>.</p>",
        "id": 398504849,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698246022
    },
    {
        "content": "<p>Ah, so you'd have <code>IsPolynomial R (MvPolynomial Unit R)</code>?</p>",
        "id": 398504947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698246046
    },
    {
        "content": "<p>yes</p>",
        "id": 398505028,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698246061
    },
    {
        "content": "<p>This may also simplify working with polynomials in several variables as polynomials in one variable over the rest, using locally the instance inside a proof.</p>",
        "id": 398505769,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698246215
    },
    {
        "content": "<p>I'm worried that this would end up more confusing than just applying the isomorphisms we already have (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.pUnitAlgEquiv#doc\">docs#MvPolynomial.pUnitAlgEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.optionEquivLeft#doc\">docs#MvPolynomial.optionEquivLeft</a>)</p>",
        "id": 398505963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698246262
    },
    {
        "content": "<p>Right now it is possible, but somewhat inconvenient to prove results on MvPolynomials by induction on the number of variables...</p>",
        "id": 398505965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698246263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398505963\">said</a>:</p>\n<blockquote>\n<p>I'm worried that this would end up more confusing than just applying the isomorphism we already have</p>\n</blockquote>\n<p>That's possible, and I trust your judgement on what is easier to get a computer to understand!</p>\n<p>However, I find the current setup a little clunky.</p>",
        "id": 398506269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698246349
    },
    {
        "content": "<p>Is there an <code>isGradedBy</code> typeclass?  That might generalise (Mv)Polynomial(Module).</p>",
        "id": 398510511,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698247463
    },
    {
        "content": "<p>For the series version, I do not currently see a way around completions.</p>",
        "id": 398510759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698247526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398510511\">said</a>:</p>\n<blockquote>\n<p>Is there an <code>isGradedBy</code> typeclass?  That might generalise (Mv)Polynomial(Module).</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.Decomposition#doc\">docs#DirectSum.Decomposition</a>, but you have to specify what you're decomposing into as subobjects of the original type</p>",
        "id": 398515668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698248959
    },
    {
        "content": "<p>I guess then it is just a matter of trying it out and seeing if using it for (Mv)Polynomials is helpful or not...</p>",
        "id": 398519461,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698250031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398494358\">said</a>:</p>\n<blockquote>\n<p>We really should make <code>AddMonoidAlgebra</code> the one field structure and <code>Polynomial</code> an <code>abbrev</code>.</p>\n</blockquote>\n<p>I'd be inclined to prioritize this refactor, but maybe others have different opinions</p>",
        "id": 398520553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698250415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398496516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28Mv.29Polynomial.20vs.20.28Mv.29PowerSeries/near/398494358\">said</a>:</p>\n<blockquote>\n<p>We really should make <code>AddMonoidAlgebra</code> the one field structure and <code>Polynomial</code> an <code>abbrev</code>.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> and I were discussing the same thing at LftCM 2023 (and agree with you)</p>\n</blockquote>\n<p>I'm about to do something that would make the refactor harder, since the defeq is really convenient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"o\">}</span>\n<span class=\"sd\">/-- The submodule of polynomials that are sum of monomials in the set `s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">restrictSupport</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finsupp.supported</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span>\n\n<span class=\"sd\">/-- `restrictSupport R s` has a canonical `R`-basis indexed by `s`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">basisRestrictSupport</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">s</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">restrictSupport</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">repr</span> <span class=\"o\">:=</span> <span class=\"n\">Finsupp.supportedEquivFinsupp</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>The first def is extracted from both <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.restrictTotalDegree#doc\">docs#MvPolynomial.restrictTotalDegree</a> and restrictDegree. If we make AddMonoidAlgebra a one field structure, this would need to be defined using <code>Submodule.comap</code> with the (algebra or linear) Equiv between AddMonoidAlgebra and MvPolynomial. (<code>comap</code> is definitionally better but we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.submoduleMap#doc\">docs#LinearEquiv.submoduleMap</a> with <code>map</code>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degreeLE#doc\">docs#Polynomial.degreeLE</a> and degreeLT are currently defined in a different way, but we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.degreeLTEquiv#doc\">docs#Polynomial.degreeLTEquiv</a>.)</p>",
        "id": 409040359,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703032171
    },
    {
        "content": "<p>We already have to pay this price for polynomial, the refactor being proposed just moves where this toll lies to be finsupp/addmonoidalgebra rather than addmonoidalgebra/polynomial</p>",
        "id": 409043875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703033509
    }
]