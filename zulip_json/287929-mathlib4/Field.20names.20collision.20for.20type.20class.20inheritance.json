[
    {
        "content": "<p>Suppose I want to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Class1</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Class2</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- ...</span>\n</code></pre></div>\n<p>but both <code>Class1.bar</code> and <code>Class2.bar</code> are defined for different type, what should I do?</p>",
        "id": 405424812,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701458485
    },
    {
        "content": "<p>This arises in practice for <code>LinearMap</code> and <code>MulActionHom</code> where both define <code>map_smul'</code> field for compatibility with respect to different actions.</p>",
        "id": 405425011,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701458572
    },
    {
        "content": "<p>in lean3 it was possible to write <code>... extends Class1 A, Class2 A renaming foo -&gt; bar ...</code> but I don't think this has been introduced in Lean4.</p>",
        "id": 405426085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701459025
    },
    {
        "content": "<p><code>MulActionHom</code> is relatively simple I will try hardcoding it and see how far I can go for now...</p>",
        "id": 405426753,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701459356
    },
    {
        "content": "<p>Does it matter in lean4? I thought extends is just sugar for generating projections</p>",
        "id": 405437934,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701464691
    },
    {
        "content": "<p>It also affects dot notation</p>",
        "id": 405439247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701465365
    },
    {
        "content": "<p>But I guess for <code>class</code> that's irrelevant anyway</p>",
        "id": 405439254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701465371
    }
]