[
    {
        "content": "<p>Does a structure that encodes redundancy for list length exist in mathlib4/std4/lean4 currently? For my current tactic port I'm appending lots of lists (I need the sharing, so I can't use <code>Array</code>s), and want to avoid measuring their <code>length</code> each time I do. I rolled my own (shown below), but want to make sure I'm not duplicating something. Or, is it advisable to just track the length internally to the function and deal with pairs <code>(n, list)</code>? I thought the structure approach would be more legible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A list redundantly accompanied by its length. This redundancy is not enforced with a `Prop` field, as this structure is used only for optimization. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MeasuredList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The number of elements in the stored list. -/</span>\n  <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"sd\">/-- The list represented by an instance of this structure. -/</span>\n  <span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>(Oops, meant to post in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> , but I suppose this is ok.)</p>",
        "id": 356179530,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683328263
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector#doc\">docs4#Vector</a> where the length is part of the type</p>",
        "id": 356182102,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683330057
    },
    {
        "content": "<p>I'm sure this doesn't exist already. It's obviously a weird example, carrying the length around but neither carrying a proof or using dependent types. I'd suggest just defining this locally to its use case, and we can punt on whether others would want to use it.</p>",
        "id": 356182107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683330060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>: Thomas is looking for the run-time efficiency of a cached value, but doesn't want to have to deal with proofs, or DTT hell.</p>",
        "id": 356182139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683330095
    },
    {
        "content": "<p>Gotcha.</p>",
        "id": 356182149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683330111
    },
    {
        "content": "<p>I guess in principle you could just <code>sorry</code> all proofs (since props are dropped when the code is compiled), then the measured lists would be essentially equivalent to the sigma type of <code>Vector n</code> as n varies.</p>",
        "id": 356182766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683330607
    },
    {
        "content": "<p>Is this a place where computed properties can be used?</p>",
        "id": 356207537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683346408
    },
    {
        "content": "<p>Hmm, are you referring to <code>computed_field</code>s? (Interesting, I didn’t know about these!) Would that let me specify transformations on computed fields somehow? Like I’m guessing this would look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MeasuredList</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MeasuredList</span> <span class=\"n\">α</span>\n<span class=\"k\">with</span>\n  <span class=\"kd\">@[computed_fields]</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">MeasuredList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>\n<p>right? (untested, on mobile) Then I would need something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MeasuredList.append</span> <span class=\"o\">:</span> <span class=\"n\">MeasuredList</span> <span class=\"n\">α</span><span class=\"bp\">→</span> <span class=\"n\">MeasuredList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MeasuredList</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">l'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I’d worry Lean would then have to recompute the computed field for the result. Is there a way to somehow tell Lean the quick way to calculate the new computed field (just add the two existing computed fields) in this definition?</p>",
        "id": 356210770,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683348534
    },
    {
        "content": "<p>List append involves iterating through the whole first list, so you don't get sharing there -- I just want to check that this is OK (maybe you're always appending small lists to the front?) Otherwise I'd suggest working with a tree of list/size pairs, where the size is the sum of all lengths in the tree, if possible</p>",
        "id": 356241939,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683362587
    },
    {
        "content": "<p>I actually wound up finding computed fields useful, but in a different way! But: is this doing what I think it is? Here <code>s</code> is a \"size\" function I'd like to be generic, if possible. I'm not sure if that parameter is messing the memoization up.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">s</span>\n<span class=\"k\">with</span>\n  <span class=\"kd\">@[computed_field]</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t₁.size</span> <span class=\"bp\">+</span> <span class=\"n\">t₂.size</span>\n</code></pre></div>",
        "id": 356242191,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683362662
    },
    {
        "content": "<p>Oops, sorry, just so happened to be writing that before your message came in! Yes, I was appending small lists to the front, but I've now switched to trees and gluing them all together later, as you can see is hinted at from the example :)</p>",
        "id": 356242364,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683362729
    },
    {
        "content": "<p>I'm also trying to store the sum of the lengths as a computed field at each node—I could just store it in the node the usual way, but I thought I may as well use this tech if it's available.</p>",
        "id": 356242712,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683362858
    },
    {
        "content": "<p>I think that if Lean accepts that code, then you should expect the computed field to memoize correctly (after all, Lean has strict evaluation and needs to fill in the size field). We could check the generated IR or C code just to be sure</p>",
        "id": 356243275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683363041
    },
    {
        "content": "<p>Some relevant IR (from <code>set_option trace.Compiler true</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"kd\">def</span> <span class=\"n\">Foo.node._override._redArg</span> <span class=\"n\">a.1</span> <span class=\"n\">a.2</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span>\n        <span class=\"n\">jp</span> <span class=\"n\">_jp.3</span> <span class=\"n\">_y.4</span> <span class=\"n\">_y.5</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_y.4</span> <span class=\"n\">_y.5</span><span class=\"bp\">;</span>   <span class=\"c1\">--- Sizes are added here</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.node._impl</span> <span class=\"n\">_</span> <span class=\"bp\">◾</span> <span class=\"n\">_x.6</span> <span class=\"n\">a.1</span> <span class=\"n\">a.2</span><span class=\"bp\">;</span>\n          <span class=\"n\">return</span> <span class=\"n\">_x.7</span><span class=\"bp\">;</span>\n        <span class=\"n\">jp</span> <span class=\"n\">_jp.8</span> <span class=\"n\">_y.9</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span>\n          <span class=\"n\">cases</span> <span class=\"n\">a.2</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"c1\">-- sizes of the second argument are extracted from a field here</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Foo.of._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.10</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">goto</span> <span class=\"n\">_jp.3</span> <span class=\"n\">_y.9</span> <span class=\"n\">size</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Foo.node._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.11</span> <span class=\"n\">a.12</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">goto</span> <span class=\"n\">_jp.3</span> <span class=\"n\">_y.9</span> <span class=\"n\">size</span><span class=\"bp\">;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">a.1</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"c1\">-- sizes of the first argument are extracted from a field here</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.of._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.13</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.8</span> <span class=\"n\">size</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.node._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.14</span> <span class=\"n\">a.15</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.8</span> <span class=\"n\">size</span>\n      <span class=\"kd\">def</span> <span class=\"n\">Foo.node._override</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">a.1</span> <span class=\"n\">a.2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span> <span class=\"c1\">-- override of the `Foo.node` constructor</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.node._override._redArg</span> <span class=\"n\">a.1</span> <span class=\"n\">a.2</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.3</span>\n      <span class=\"kd\">def</span> <span class=\"n\">Foo.size._override</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"c1\">-- override of the `Foo.size` accessor; gets the pre-stored fields</span>\n        <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.of._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.1</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">return</span> <span class=\"n\">size</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.node._impl</span> <span class=\"n\">size</span> <span class=\"n\">a.2</span> <span class=\"n\">a.3</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">return</span> <span class=\"n\">size</span>\n</code></pre></div>",
        "id": 356245307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683363711
    },
    {
        "content": "<p>Oh, that's interesting! Thanks for the comments, I might not have felt confident interpreting that IR otherwise. I can make sense of it pretty well now! :)</p>",
        "id": 356248550,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683364713
    },
    {
        "content": "<p>Though, thinking about it, these are both for <code>size</code> on the <code>.node</code> constructor, which takes no meaningful parameters—my inclusion of <code>s</code> was unnecessary. I suppose the issue, if there was one, would likely be in <code>Foo.of._override</code>. But I'll continue tomorrow...</p>",
        "id": 356250469,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683365300
    },
    {
        "content": "<p>Ah, I just checked, and it does immediately perform <code>let _x.2 := s a.1</code> :)</p>",
        "id": 356250868,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683365438
    },
    {
        "content": "<p>Time for more IR!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"kd\">def</span> <span class=\"n\">Foo.of._override._redArg</span> <span class=\"n\">s</span> <span class=\"n\">a.1</span> <span class=\"o\">:</span> <span class=\"n\">Foo._impl</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">a.1</span><span class=\"bp\">;</span> <span class=\"c1\">-- call the function</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.of._impl</span> <span class=\"n\">_</span> <span class=\"bp\">◾</span> <span class=\"n\">_x.2</span> <span class=\"n\">a.1</span><span class=\"bp\">;</span> <span class=\"c1\">-- save it using the actual 2-argument constructor</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.3</span>\n      <span class=\"kd\">def</span> <span class=\"n\">Foo.of._override</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">a.1</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">lcErased</span> <span class=\"n\">lcErased</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.of._override._redArg</span> <span class=\"n\">s</span> <span class=\"n\">a.1</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n</code></pre></div>",
        "id": 356250879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683365441
    },
    {
        "content": "<p>Great! Oh, I was wondering! What is that <code>◾</code> operation?</p>",
        "id": 356251072,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683365500
    },
    {
        "content": "<p>I think it's a marker that the argument was erased since it's irrelevant? The <code>s</code> argument doesn't need to actually be stored inside constructors since it's a parameter to the inductive type.</p>",
        "id": 356251470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683365600
    },
    {
        "content": "<p>It looks like <code>_</code> is used to mark arguments that are inherently irrelevant (like types)</p>",
        "id": 356251679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683365662
    },
    {
        "content": "<p>I'm speculating, but at least in Lean 3 all erased arguments were displayed with a box.</p>",
        "id": 356251788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683365698
    },
    {
        "content": "<p>Hmm, that would make sense! Though if that's the case, I wonder why the argument just before it isn't a box as well, but an underscore, since I'm guessing it's not needed either... (Maybe it's things which have <em>just</em> been erased?)</p>",
        "id": 356252177,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683365839
    },
    {
        "content": "<p>That's a type -- I'm figuring that type and proof arguments are erased first because they're <em>never</em> computed, but then there's a pass to erase arguments that correspond to constructor parameters. My guess is that the first sort of erasure is indicated differently from the second type.</p>",
        "id": 356252653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683365965
    },
    {
        "content": "<p>Sounds reasonable! I searched in the lean4 repo, and <code>◾</code> is indeed arguments or <code>IRTypes</code> which are <code>irrelevant</code> internally. Maybe a closer look at Lean.Compiler.IR.Format would reveal the rule for <code>_</code> as well.</p>",
        "id": 356253026,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683366062
    }
]