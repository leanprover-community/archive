[
    {
        "content": "<p>Using <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/348664964\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/348664964</a>, here are interactive flamegraphs of the three most time-consuming mathlib4 files:</p>\n<ol>\n<li><a href=\"https://www.speedscope.app/#profileURL=https://pp.ipd.kit.edu/~ullrich/tmp/Mathlib.Data.Polynomial.FieldDivision.flame.gz\">Mathlib.Data.Polynomial.FieldDivision</a></li>\n<li><a href=\"https://www.speedscope.app/#profileURL=https://pp.ipd.kit.edu/~ullrich/tmp/Mathlib.Topology.Algebra.Module.Basic.flame.gz\">Mathlib.Topology.Algebra.Module.Basic</a></li>\n<li><a href=\"https://www.speedscope.app/#profileURL=https://pp.ipd.kit.edu/~ullrich/tmp/Mathlib.GroupTheory.MonoidLocalization.flame.gz\">Mathlib.GroupTheory.MonoidLocalization</a></li>\n</ol>",
        "id": 349406451,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681483719
    },
    {
        "content": "<p>This looks very nice, but do you also have explanation about how to read this and use it to make things faster?</p>",
        "id": 349406891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681483806
    },
    {
        "content": "<p>Interestingly, the graph structure is quite different between the three modules. No. 1 is visibly dominated by big unification problems (of diamonds, presumably), some but not all of them contained in <code>etaExperiment</code>. For no. 2 I don't see a clear pattern, there is one expensive declaration but also many cheaper ones; with 2.8k lines, the file is much longer than the other ones. No. 3 is notable for the absence of tracked time: it is probably spent interpeting <code>[to_additive]</code>, which you can see being used in many top-level frames.</p>",
        "id": 349408100,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681484115
    },
    {
        "content": "<p>It would be nice if different components could be colored differently, but that doesn't seem possible at least with speedscope</p>",
        "id": 349408704,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681484278
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3414\">!4#3414</a> improves the first one by 78.5% and the second one by 55% (measured in instructions)</p>",
        "id": 349408838,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1681484308
    },
    {
        "content": "<p>Sebastian, I'm asking a much more basic question. I have no idea what I'm looking at.</p>",
        "id": 349522215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681484394
    },
    {
        "content": "<p>Well the second part of your original question couldn't be more complex! But as to the first part, it is basically a timeline (in microseconds, showing components taking &gt;10ms) of Lean processing the respective file. On the top, you can see the first line of each declaration, and nested below them you can mostly see tactic, TC, and defeq invocations.</p>",
        "id": 349749683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681484659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Actually it seems to be a reverse timeline: <code>derivative_rootMultiplicity_of_root</code> should be the first theorem in the first file</p>",
        "id": 349865259,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681485256
    },
    {
        "content": "<p>Ah! I knew the fact that I just <code>new :: events</code> in <code>addChild</code> will come to bite me at some point :D</p>",
        "id": 349865414,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681485299
    },
    {
        "content": "<p>Ok, so for instance it says <code>theorem divByMonic_add_X_sub_C_mul_derivate_divByMonic_eq_derivative</code> used 7.8 seconds, right? And then how do I interpret the next lines?</p>",
        "id": 349865915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681485414
    },
    {
        "content": "<p>This example is the second one in the graph</p>",
        "id": 349865992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681485433
    },
    {
        "content": "<p>Most of the time in that theorem seems to be spent in a tactic block starting with <code>have</code> (you need to be a bit careful here if text is elided with <code>[...]</code> since it might hide further tactics apart from that <code>have</code>). If you go further down, you can see that time is mostly spent in two <code>rw</code> calls in that block, each of which is mostly made up of one big unification problem (when emojis come in, it's either TC or unification).</p>",
        "id": 349980154,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681485708
    },
    {
        "content": "<p>The <code>[...]</code> seems to be unfortunate in some places, for example the biggest top level theorem sorting by \"left-heavy\" in the first graph is <code>set_option synthInstance.etaExperiment true in [...]</code></p>",
        "id": 349980717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681485839
    },
    {
        "content": "<p>sure would be nice to know what the next line is</p>",
        "id": 349980809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681485853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/flamegraphs/near/349406891\">said</a>:</p>\n<blockquote>\n<p>This looks very nice, but do you also have explanation about how to read this and use it to make things faster?</p>\n</blockquote>\n<p>The flamegraph format originnates from here: <a href=\"https://github.com/brendangregg/FlameGraph/\">https://github.com/brendangregg/FlameGraph/</a> (in general brendan is like <em>the</em> performance guy he has a million tools, methodologies guides and what not that you can use to make things fast but flamegraphs are by far his most popular invention)</p>\n<p>Now if you look at this slightly less chaotic example in the README: <a href=\"https://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg\">https://www.brendangregg.com/FlameGraphs/cpu-bash-flamegraph.svg</a> (you do not have to understand the program that it runs its just because I like this visualization more than the one from speedscope :D)</p>\n<p>Basically each of the lines here is a function, if a function calls another function it is displayed on top of the previous functions line. The width of a line tells you how much run time it consumed. Now this is still not enough to do performance engineering though. If you look at the example flamegraph you can see that <code>__libc_start_main</code> seems to consume all the time right? But if you were to look at it its actually just a few CPU instructions before jumping into main. The things that are actually <em>consuming</em> time are the sections of lines above which no function can be seen. These are of course the most top level functions but for example if we zoom in on this inode function: <a href=\"/user_uploads/3121/ew0mww3H1noWsWRFaT7hJt_6/image.png\">image.png</a> you can see that it does consume some time itself bbut also calls other functions. Most notably <code>ext4_mark_iloc_dirty</code> which has the largest \"free space above the line\" and is thus the function in the call stack that is actually consuming the most time.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ew0mww3H1noWsWRFaT7hJt_6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ew0mww3H1noWsWRFaT7hJt_6/image.png\"></a></div><p>Now going back to the visualization from above. My tool does not look at nested function calls but instead it looks at the components of Lean. So for example the elaborator starts working on a theorem, then it does a tactic call that does maybe a type class thing and a unification and so on. However the same principle still applies, width is time, and if its above each other one caused the other and free space is actual computation time.</p>\n<p>Now how can you use it to make stuff faster, mostly in two ways:</p>\n<ol>\n<li>Reduce the \"space without stuff above it\" as good as possible. This is probably not something you can do yourself but rather something a Lean compiler / tactic developer can do by improving their algorithm</li>\n<li>Use it to find stuff that is consuming time in general (this can just be wide bars in general, regardless of whether they have much open space above them) and then<br>\n   a) get rid of it by replacing it wiith something that consumes less time<br>\n   b) report it as an issue because you dont think that Lean should be doing such an expensive thing here</li>\n</ol>",
        "id": 349980917,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681485880
    },
    {
        "content": "<p>I'm sorry, I still don't understand. My naive reading gives a total greater that 7.8 seconds. To me it looks like the have takes 7.4s, then the first rw takes 3s, the second rw takes 0.2s, third one 0.3s and fourth one 3.7s and then assumption takes 0.04s. How does that add up to 7.8s?</p>",
        "id": 349981519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681486048
    },
    {
        "content": "<p>Is the <code>have</code> processed in parallel?</p>",
        "id": 349981560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681486060
    },
    {
        "content": "<p>The bars form a tree, any bars below a specific bar are included in its execution time. The entire tactic block starting with <code>have</code> takes ~7.4s, then within that two <code>rw</code>s take ~3s. The <code>have</code> itself must be too quick to even be recorded.</p>",
        "id": 349982332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681486215
    },
    {
        "content": "<p>The <code>have</code> line really is something like <code>have ...; rw ...; ...</code></p>",
        "id": 349982669,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681486303
    },
    {
        "content": "<p>Ok, thanks to both of you this is now a lot clearer.</p>",
        "id": 349982927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681486366
    },
    {
        "content": "<p>This is really a very unintuitive tool, but I can believe it could be very useful once people get used to it.</p>",
        "id": 349983024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681486396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/flamegraphs/near/349408704\">said</a>:</p>\n<blockquote>\n<p>It would be nice if different components could be colored differently, but that doesn't seem possible at least with speedscope</p>\n</blockquote>\n<p>There are still many things we could improve on the export side: record missing parts like attribute application in the third example, probably drop docstrings, improve one-line formatting of classes like term elaboration and tactic blocks, ...</p>",
        "id": 349983532,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681486536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/flamegraphs/near/349983532\">said</a>:</p>\n<blockquote>\n<p>record missing parts</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2187\">https://github.com/leanprover/lean4/pull/2187</a> <em>wink wink</em> :P</p>",
        "id": 349984213,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681486712
    },
    {
        "content": "<p>Let me check I understand what this graph is telling us. Is it really telling me, still in the same proof, that Lean spends 3.6s unifying<code>↑Polynomial.C (Polynomial.eval a f) =?= ↑Polynomial.C ?m.2043350</code>?</p>",
        "id": 349986004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681487172
    },
    {
        "content": "<p>I'm afraid we do currently, though it is hard to say what's actually being done without looking at implicit arguments as well, for which it can be easier to switch to the editor and use <code>trace.profiler</code> directly to get the usual trace widgets</p>",
        "id": 349986890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681487393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Oh, I just realized <code>;</code> is probably not escaped in the flamegraph export, this should be one frame <a href=\"/user_uploads/3121/O4ws4HpUJZnOAGl-5gFBoJLS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O4ws4HpUJZnOAGl-5gFBoJLS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/O4ws4HpUJZnOAGl-5gFBoJLS/image.png\"></a></div>",
        "id": 349988910,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681487925
    },
    {
        "content": "<p>Does it allow for escaping with a backslash?</p>",
        "id": 349989035,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681487954
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Bw_QV0xXLpH_jRjd4I5hT_kR/image.png\">image.png</a>  thats a no^^</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Bw_QV0xXLpH_jRjd4I5hT_kR/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Bw_QV0xXLpH_jRjd4I5hT_kR/image.png\"></a></div>",
        "id": 349989383,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681488031
    },
    {
        "content": "<p>This flamegraph format may be a bit too limited after all</p>",
        "id": 349989600,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681488085
    }
]