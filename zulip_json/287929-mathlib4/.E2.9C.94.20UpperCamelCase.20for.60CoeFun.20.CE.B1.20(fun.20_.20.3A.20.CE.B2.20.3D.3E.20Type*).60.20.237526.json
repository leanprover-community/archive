[
    {
        "content": "<p>Should we change the naming convention document as follow:<br>\nOld: 2. <code>Prop</code>s and <code>Type</code>s (or <code>Sort</code>) (inductive types, structures, classes) are in <code>UpperCamelCase</code>.<br>\nNew: 2. <code>Prop</code>s and<code>Type</code>s (or <code>Sort</code>, <code>α</code> which has a <code>CoeFun α (fun _ : β =&gt; Type u)</code> instance) (inductive types, structures, classes) are in <code>UpperCamelCase</code>.</p>",
        "id": 397011205,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1697509590
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeSort#doc\">docs#CoeSort</a> ?</p>",
        "id": 397029539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697519815
    },
    {
        "content": "<p>If not, can you give an example of something that would change under your proposal?</p>",
        "id": 397029680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697519885
    },
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib4/pull/7526\">#7526</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">MvPFunctor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TypeVec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Obj</span>\n</code></pre></div>",
        "id": 397037603,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1697524362
    },
    {
        "content": "<p>Are you talking about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MvPFunctor</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 397040759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697525805
    },
    {
        "content": "<p>I think this falls into the same category as deciding whether <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitary#doc\">docs#unitary</a> should be <code>Unitary</code>; CoeFun vs CoeSort is just <code>n+1</code>-ary vs nullary.</p>",
        "id": 397041010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697525897
    },
    {
        "content": "<p>Have there been discussion around <code>unitary</code> vs <code>Unitary</code> before? In this case, I like the naming change because it improves consistency between <code>MvPFunctor</code> and <code>MvFunctor</code>, but above all we do want to make sure we have a consistent naming convention</p>",
        "id": 397061674,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697533268
    },
    {
        "content": "<p>I think it's difficult because they're used sometimes as types and sometimes as terms</p>",
        "id": 397062769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697533676
    },
    {
        "content": "<p>Things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.kernel#doc\">docs#MeasureTheory.kernel</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=circle#doc\">docs#circle</a> because them being submonoids of some ambient space is an implementation detail.</p>",
        "id": 397116625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697551519
    },
    {
        "content": "<p>In this case, MvPFunctor is almost always used as a type function. The structure is only an implementation detail needed to construct the fixpoints</p>",
        "id": 397132946,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697556179
    },
    {
        "content": "<p>Maybe we change the naming convention to say that structures with coercion to Type (-valued functions) <em>may</em> behave as if they were a Type (-valued function), so long as: (1) this is consistently followed for all uses of the structure, and (2) this is indicated in the docstring?</p>",
        "id": 397133534,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697556329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/UpperCamelCase.20for.60CoeFun.20.CE.B1.20.28fun.20_.20.3A.20.CE.B2.20.3D.3E.20Type*.29.60.20.237526/near/397116625\">said</a>:</p>\n<blockquote>\n<p>Things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.kernel#doc\">docs#MeasureTheory.kernel</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=circle#doc\">docs#circle</a> because them being submonoids of some ambient space is an implementation detail.</p>\n</blockquote>\n<p>It's only an implementation detail if it's from the <code> : Type</code> region of Lean, otherwise it's just a sparkling lack of abstraction</p>",
        "id": 397137065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697557360
    },
    {
        "content": "<p>(which is to say: if you believe it's an implementation detail, then <code>circle</code> should be defined to include the coercion to type)</p>",
        "id": 397137186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697557404
    },
    {
        "content": "<p>What do you mean? <code>circle</code> already has a coercion to <code>Type</code> and is used as such.</p>",
        "id": 397143474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697559479
    },
    {
        "content": "<p>Sure, but it's not literally <code>def circle : Type := Submonoid.mk _ _ _</code></p>",
        "id": 397143544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697559496
    },
    {
        "content": "<p>From this discussion, I decided to use lowerCamelCase. Thank you!</p>",
        "id": 397208226,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1697592453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Miyahara Kō</span> has marked this topic as resolved.</p>",
        "id": 397213301,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697595571
    }
]