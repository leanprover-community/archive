[
    {
        "content": "<p>Should we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Ord</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">compare</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">compareOfLessAndEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>somewhere in mathlib4? if so where?</p>",
        "id": 341346234,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678663219
    },
    {
        "content": "<p>(Context: existing minimizing functions on <code>Array</code>s rely on <code>Ord</code>, and since I'm writing more such functions, I wanted to stay consistent with that. But analogous existing minimizing functions for lists rely on <code>LinearOrder</code>, so I figured there should be a way to move between them in  at least one direction. Then we can have theorems about these functions on arrays which depend on <code>LinearOrder</code>.)</p>",
        "id": 341346440,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678663441
    },
    {
        "content": "<p>We should definitely not have an <code>instance</code> because that creates diamonds, but a <code>def</code> would be good.</p>",
        "id": 341504077,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678723025
    },
    {
        "content": "<p>What types would it create diamonds on?</p>",
        "id": 341505568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723374
    },
    {
        "content": "<p>So far the only existing instance that isn't implemented as <code>compareOfLessAndEq</code> seems to be <code>Fin</code>, and that could easily be changed</p>",
        "id": 341506294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723530
    },
    {
        "content": "<p>Indeed, the extra <code>Ord</code> class isn't really used (yet).  Notably, <code>Bool</code> has a different implementation as well.</p>",
        "id": 341506724,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678723628
    },
    {
        "content": "<p>I guess I can see the appeal for <code>String</code> or <code>Lex ...</code>, where likely it can be computed more efficiently</p>",
        "id": 341506872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723666
    },
    {
        "content": "<p>So in the long run a <code>compare</code> field of <code>LinearOrder</code> probably makes sense</p>",
        "id": 341506943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723680
    },
    {
        "content": "<p>But in the short term just making the above instance global (and adjusting the instances for<code>Fin</code> and <code>Bool</code>) is probably more useful than doing nothing</p>",
        "id": 341507089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723712
    },
    {
        "content": "<p>If we have no theorems about <code>Ord</code> then diamonds don't matter anyway</p>",
        "id": 341507160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678723733
    },
    {
        "content": "<p>Hmm, would it be any harm to jump straight to the long run and have LinearOrder extend Ord with the above as a default field value?  (afaict structure instances prefer typeclass synthesis of substructures to optparams for their field values, so I don’t <em>think</em> this would interfere with any Ord instances that were already defined, and so any diamonds should be defeq…)</p>",
        "id": 341577452,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678743388
    },
    {
        "content": "<p>I guess as a default it probably won't interfere with porting</p>",
        "id": 341580531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678744466
    },
    {
        "content": "<p>Now that I think about it, though, if we’re going to add <code>compare</code> to <code>LinearOrder</code> it should be lawful—namely we should add fields <code>compare_lt_iff_lt</code> and <code>compare_eq_iff_eq</code> (we can prove the would-be remaining field as a theorem)</p>",
        "id": 341584158,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678745755
    },
    {
        "content": "<p>(These ofc can also have default proofs so that it doesn’t affect porting)</p>",
        "id": 341585217,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678746208
    },
    {
        "content": "<p>Or you could just ask the user to prove that <code>compare a b = compareOfLessAndEq a b</code> to save a field</p>",
        "id": 341586076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678746576
    },
    {
        "content": "<p>true! fields are at a premium, I gather?</p>",
        "id": 341586260,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678746659
    },
    {
        "content": "<p>I'd probably go for the single-field approach until we actually know what specialized instances to expect and which ones will be annoying to prove. Right now, almost every instance will just have <code>rfl</code> in that field, whereas proving your fields is very marginally harder.</p>",
        "id": 341586734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678746863
    },
    {
        "content": "<p>Exploring this on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2858\">!4#2858</a> (have yet to supply the lawfulness field for Fin)</p>",
        "id": 341597169,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678752779
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2858\">!4#2858</a> is green; I've tentatively put it out for review, in case we decide to go with it.</p>",
        "id": 341675563,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678789494
    }
]