[
    {
        "content": "<p>It looks like in category theory (where we use a lot of <code>simps</code>) there are many complaints by the simpNF linter about lemmas generated by simps. Can we make the linter less strict?</p>",
        "id": 327702092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676357195
    },
    {
        "content": "<p>See e.g.: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2206/files#diff-67a442ca7af88b3eaf1884a67020cd1ad87fcc27122f52efd091fc0297346030R173-R195\">https://github.com/leanprover-community/mathlib4/pull/2206/files#diff-67a442ca7af88b3eaf1884a67020cd1ad87fcc27122f52efd091fc0297346030R173-R195</a></p>",
        "id": 327702122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676357215
    },
    {
        "content": "<p>What lemmas is it generating? Hard to imagine how they could trigger the linter</p>",
        "id": 327704109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676358360
    },
    {
        "content": "<p>Unless the projections themselves are not in simp NF?</p>",
        "id": 327704222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676358389
    },
    {
        "content": "<p>In <a href=\"#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EAdjunction.2EBasic\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EAdjunction.2EBasic</a> 6/8 complaints are \"simp can prove this\". That could mean that we can just remove <code>simps</code>. But I don't think that's desirable.</p>\n<p>I have not yet looked in detail into the complaints in the PR linked in OP.</p>",
        "id": 327704458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676358485
    },
    {
        "content": "<p>That is also hard to understand, unless one simps lemma is a prefix of another?</p>",
        "id": 327704769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676358634
    },
    {
        "content": "<p>Yeah, I agree. It is also hard to see how it could be problematic.</p>",
        "id": 327705024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676358762
    },
    {
        "content": "<p>Maybe there are more simp lemmas getting later which interfere?</p>",
        "id": 327705924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676359266
    },
    {
        "content": "<p>Here another example that Yury just pointed out to me:<br>\nOn the branch <code>YK-coe-fn-grp</code> go to the file <code>GroupTheory.Subsemigroup.Operations</code> and add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subsemigroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Subsemigroup.map</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.toMulHom</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">MulEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.subsemigroupMap</span> <span class=\"n\">e</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.symm</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>all the way at the bottom of the file, but just before the <code>end MulEquiv</code>. You'll get a nasty timeout.<br>\nWhereas <code>simp</code> should just find <code>MulEquiv.subsemigroupMap_symmApply_coe</code>, and indeed if you feed that lemma to <code>simp only</code> then all is fine.</p>",
        "id": 327730217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676367875
    },
    {
        "content": "<p>This likely happens because of misconfigured <code>initialize_simps_projections</code>. Note that <a href=\"https://github.com/leanprover-community/mathlib4/pull/2042\">!4#2042</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2045\">!4#2045</a> are improving the default behavior for Lean 4 and fixing a bunch of them.</p>",
        "id": 327787053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676384481
    }
]