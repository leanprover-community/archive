[
    {
        "content": "<p>As discussed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9105\">#9105</a>, there's a slight difference in naming &amp; assumptions for lemmas of the form <code>A ≃ A × B</code> for when <code>B</code> is the zero ring/zero module/singleton; we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingEquiv.prodZeroRing#doc\">docs4#RingEquiv.prodZeroRing</a> for <code>Ring</code>, but e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.prodUnique#doc\">docs4#Equiv.prodUnique</a> for general <code>Type</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv.prodUnique#doc\">docs4#AddEquiv.prodUnique</a> for <code>Monoid</code>. The former also assumes <code>[Subsingleton B]</code>, the latter (necessarily) <code>[Unique B]</code>.</p>\n<p>I'm wondering what's the nicest way to treat these. Arguably, these could all just use <code>[Unique B]</code> and be named <code>prodUnique</code> -- then again, personally, I was first looking for something like <code>prodZero</code> or <code>prodZeroModule</code> when I started hunting these down, so the <code>prodZeroRing</code> approach may be more intuitive. Any thoughts?</p>\n<p>If nothing else, I'll make them refer to one another in the PR.</p>",
        "id": 408442484,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1702820212
    },
    {
        "content": "<p>I'm slightly in favor of <code>prodUnique</code></p>",
        "id": 408442542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702820284
    },
    {
        "content": "<p>The nice thing about assuming <code>[Subsingleton R]</code> instead of <code>[Unique R]</code> is that the equiv is defeq to <code>0</code> in certain place, whereas for <code>Unique</code> it's defeq to <code>default</code> which may only be <code>Prop</code>-eq to <code>0</code>.</p>",
        "id": 408448834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702825664
    },
    {
        "content": "<p>I think that's orthogonal to the name?</p>",
        "id": 408448916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702825723
    },
    {
        "content": "<p>Not entirely, using <code>unique</code> in a name is <em>slightly</em> harder to justify if the assumptions don't mention <code>Unique</code></p>",
        "id": 408449207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702825971
    },
    {
        "content": "<p>Does that have any precedent in mathlib, naming related statements consistently with respect to one another, but in contradiction with their direct assumptions? Otherwise I feel inclined to just leave things as they are, and hope that end-users will find their way through the docstrings linking the theorems. <code>theorem prodUnique [Subsingleton S]</code>looks dirty to me :)</p>",
        "id": 408621830,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1702909424
    },
    {
        "content": "<p>I mean, it's not even like the <code>Unique</code> in <code>prodUnique</code> really refers to an assumption.</p>",
        "id": 408622747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702909707
    }
]