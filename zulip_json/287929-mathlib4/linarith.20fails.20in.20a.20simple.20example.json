[
    {
        "content": "<p>I have a tactic state as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">xy</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">hx₀</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">hx₁</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arg</span> <span class=\"n\">x</span>\n<span class=\"n\">hx₂</span><span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">hy₀</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">hy₁</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arg</span> <span class=\"n\">y</span>\n<span class=\"n\">hy₂</span><span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">arg</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">k</span>\n<span class=\"n\">H₁</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">arg</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">H₂</span><span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">arg</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span>\n<span class=\"n\">H₂'</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n<span class=\"n\">H₁'</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Here <code>linarith</code> \"fails to find a contradiction\", but <code>have : k = 0 := by linarith; exact this</code> works.</p>\n<p>WE (not minimal; see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/log.20.28x*y.29.20.3D.20log.20x.20.2B.20log.20y.20for.20complex.20numbers/near/401233495\">this thread</a> for context):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.Log</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">arg_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx₂</span> <span class=\"o\">:</span> <span class=\"n\">x.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy₀</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy₂</span> <span class=\"o\">:</span> <span class=\"n\">y.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"n\">x.arg</span> <span class=\"bp\">+</span> <span class=\"n\">y.arg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">arg_mul_coe_angle</span> <span class=\"n\">hx₀</span> <span class=\"n\">hy₀</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.Angle.coe_add</span><span class=\"o\">,</span> <span class=\"n\">Real.Angle.angle_eq_iff_two_pi_dvd_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">arg</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">arg</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁'</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">H₁.trans_eq</span> <span class=\"n\">hk</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₂'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"o\">:=</span> <span class=\"n\">hk.symm.trans_lt</span> <span class=\"n\">H₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span><span class=\"o\">)),</span> <span class=\"n\">neg_mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Real.pi_pos</span><span class=\"o\">,</span> <span class=\"n\">Real.pi_ne_zero</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">neg_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span> <span class=\"n\">H₂'</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span> <span class=\"n\">H₂'</span>\n  <span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span> <span class=\"c1\">-- why does `norm_cast` introduce `Int.negSucc 0`??</span>\n  <span class=\"c1\">-- `linarith` does not work here</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk₀</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hk₀</span>\n</code></pre></div>",
        "id": 401242539,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699566667
    },
    {
        "content": "<p>This is very strange, the minified example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"c1\">--set_option pp.raw true</span>\n<span class=\"c1\">--set_option trace.linarith true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- linarith -- works</span>\n  <span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"c1\">-- linarith -- fails!</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hk</span>\n</code></pre></div>\n<p>But I cannot see why linarith suddely fails, the first stage of the linarith traces I can see that differs is in the strengthen int inequalities step, but I have no idea why</p>",
        "id": 401267407,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699579812
    },
    {
        "content": "<p>sometimes this kind of thing is due to mdata: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1930\">mathlib4#1930</a></p>",
        "id": 401278315,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699585798
    },
    {
        "content": "<p><code>pp.raw</code> shows the exact same term -- I'm going to go with a missing <code>withContext</code></p>",
        "id": 401278951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699586186
    },
    {
        "content": "<p>This seems to fix it.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Tactic/Linarith/Preprocessing.lean b/Mathlib/Tactic/Linarith/Preprocessing.lean</span>\n<span class=\"gh\">index 0b0aae659..c666acc9f 100644</span>\n<span class=\"gd\">--- a/Mathlib/Tactic/Linarith/Preprocessing.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Tactic/Linarith/Preprocessing.lean</span>\n<span class=\"gu\">@@ -212,7 +212,7 @@ If `pf` is a proof of a strict inequality `(a : ℤ) &lt; b`,</span>\n<span class=\"w\"> </span>and similarly if `pf` proves a negated weak inequality.\n<span class=\"w\"> </span>-/\n<span class=\"w\"> </span>def mkNonstrictIntProof (pf : Expr) : MetaM Expr := do\n<span class=\"gd\">-  match (← inferType pf).getAppFnArgs with</span>\n<span class=\"gi\">+  match (← whnfR (← inferType pf)).getAppFnArgs with</span>\n<span class=\"w\"> </span>  | (``LT.lt, #[_, _, a, b]) =&gt;\n<span class=\"w\"> </span>    return mkApp (← mkAppM ``Iff.mpr #[← mkAppOptM ``Int.add_one_le_iff #[a, b]]) pf\n<span class=\"w\"> </span>  | (``GT.gt, #[_, _, a, b]) =&gt;\n<span class=\"gu\">@@ -233,7 +233,7 @@ into a proof of `t1 ≤ t2 + 1`. -/</span>\n<span class=\"w\"> </span>def strengthenStrictInt : Preprocessor where\n<span class=\"w\"> </span>  name := \"strengthen strict inequalities over int\"\n<span class=\"w\"> </span>  transform h := do\n<span class=\"gd\">-    if isStrictIntComparison (← inferType h) then</span>\n<span class=\"gi\">+    if isStrictIntComparison (← whnfR (← inferType h)) then</span>\n<span class=\"w\"> </span>      return [← mkNonstrictIntProof h]\n<span class=\"w\"> </span>    else\n<span class=\"w\"> </span>      return [h]\n</code></pre></div>",
        "id": 401284211,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699589883
    },
    {
        "content": "<p>I'll put up a PR</p>",
        "id": 401284322,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699589978
    },
    {
        "content": "<p>I believe that it's an fvar (not an mdata as I previously guessed) that needs to be weak-head-normalized.</p>",
        "id": 401284426,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699590059
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8310\">mathlib4#8310</a></p>",
        "id": 401284707,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699590302
    },
    {
        "content": "<p>Nice detective work David!</p>",
        "id": 401299735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699600450
    },
    {
        "content": "<p>Any thoughts on whether there is actually an underlying issue with <code>change</code> producing a sub-optimal term? Or is this just to be expected</p>",
        "id": 401332819,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699610456
    },
    {
        "content": "<p>I looked into this a bit deeper.</p>\n<p>In the failure case, when the <code>strengthenStrictInt</code> preprocessor does <code>inferType</code> on the <code>h₁ : -1 &lt; k</code> hypothesis, it sees it as an mvar.<br>\nAdding a <code>whnfR</code> normalizes past that mvar, and makes the expression an app, so that the isStrictIntComparison function acts as expected.</p>",
        "id": 401385486,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699624827
    },
    {
        "content": "<p>This makes me wonder whether we should additionally add in an <code>instantiateMVars</code>.</p>",
        "id": 401385914,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699624939
    },
    {
        "content": "<p>Or maybe add that instead of <code>whnfR</code>.</p>",
        "id": 401385952,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699624951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20fails.20in.20a.20simple.20example/near/401332819\">said</a>:</p>\n<blockquote>\n<p>Any thoughts on whether there is actually an underlying issue with <code>change</code> producing a sub-optimal term? Or is this just to be expected</p>\n</blockquote>\n<p>I think it's expected that <code>change</code> will produce a metavariable.</p>",
        "id": 401386680,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699625195
    },
    {
        "content": "<p>So the problem was caused by a combination of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span> <span class=\"n\">H₂'</span>\n  <span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">H₁'</span> <span class=\"c1\">-- why does `norm_cast` introduce `Int.negSucc 0`??</span>\n</code></pre></div>\n<p>and the fact that <code>change</code> produced a sub-optimal term for <code>linarith</code> to work with.</p>\n<p>Is the <code>norm_cast</code> thing a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- goal is `Int.negSucc 36 = -n`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401388336,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699625841
    },
    {
        "content": "<p><del>Maybe the norm_cast thing is a delaborator bug?</del></p>",
        "id": 401389352,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699626234
    },
    {
        "content": "<p>Yeah that certainly looks like a bug too, but not the cause of this later one.</p>",
        "id": 401390087,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699626524
    },
    {
        "content": "<p><code>show_term norm_cast</code>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">Eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Data.Int.Cast.Basic._auxLemma.3</span> <span class=\"mi\">36</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>where <code>Mathlib.Data.Int.Cast.Basic._auxLemma.3</code> is not actually a lemma name (\"unknown identifier\"). It seems to be an auto-generated lemma from <code>Mathlib.Data.Int.Cast.Basic</code>.</p>",
        "id": 401390125,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699626541
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_negSucc#doc\">docs#Int.cast_negSucc</a> has a <code>norm_cast</code>attribute.</p>",
        "id": 401390205,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699626580
    },
    {
        "content": "<p>Trying <code>attribute [-norm_cast] Int.cast_negSucc</code>, I get the message \"attribute cannot be erased\".</p>",
        "id": 401390378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699626649
    },
    {
        "content": "<p>The docs don't show the <code>norm_cast</code>attribute, BTW. The source code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_negSucc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddGroupWithOne.intCast_negSucc</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Does <code>norm_cast</code> apply these lemmas right-to-left?</p>",
        "id": 401390645,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699626749
    },
    {
        "content": "<p>The strange thing is that <code>rw [← Int.cast_negSucc]</code> does not work.</p>",
        "id": 401391422,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699627064
    },
    {
        "content": "<p>But I guess  I would have to rewrite with the aux lemma, but I don't find a way to actually see it...</p>",
        "id": 401392066,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699627325
    },
    {
        "content": "<p><code>norm_cast</code> applies right to left, <code>push_cast</code> left to right.</p>",
        "id": 401393804,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699627962
    },
    {
        "content": "<p>The auto-generated lemma seems to look like this (found by copying into a file importing Mathlib and using <code>whatsnew in</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">cast_negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"mi\">36</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_id</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>has the same effect as <code>norm_cast</code>.</p>",
        "id": 401395151,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699628476
    },
    {
        "content": "<p>Should the <code>norm_cast</code> attribute be removed? Or is it there for a good reason?</p>",
        "id": 401395354,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699628538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would you agree that it would make sense to remove the <code>norm_cast</code> attribute from <code>Int.cast_negSucc</code>? The way it is now, <code>norm_cast</code> exposes the ugly implementation details of <code>Int</code>.</p>",
        "id": 401592369,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699778565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_negSucc#doc\">docs#Int.cast_negSucc</a></p>",
        "id": 401592411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699778620
    },
    {
        "content": "<p>Is it being used backwards by <code>norm_cast</code>? It doesn't seem like it would expose any implementation details if used in the forward direction</p>",
        "id": 401592496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699778681
    },
    {
        "content": "<p><code>norm_cast</code> is supposed to categorize the lemmas it is given into a few groups depending on the shape, which determines whether it is used in the \"push\" or \"pull\" phases</p>",
        "id": 401592542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699778745
    },
    {
        "content": "<p>Yes; see the example further up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- goal is `Int.negSucc 36 = n`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401592551,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699778757
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401592611,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699778808
    },
    {
        "content": "<p>that is, it could be an issue in the categorization, what happens if you use <code>@[norm_cast squash]</code> or so?</p>",
        "id": 401592640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699778847
    },
    {
        "content": "<p>No idea. I don't know about the internal workings of <code>norm_cast</code>; I just came across a situation like the one in the example and thought that this is likely a bug.</p>",
        "id": 401592723,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699778921
    },
    {
        "content": "<p>the question is whether it is something that better tagging can fix</p>",
        "id": 401593016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699779200
    },
    {
        "content": "<p>or if it is a bug in the tactic</p>",
        "id": 401593021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699779207
    },
    {
        "content": "<p>I've now tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span> <span class=\"n\">squash</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_negSucc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddGroupWithOne.intCast_negSucc</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and this makes the example behave as expected.<br>\nBut I don't know if this has perhaps bad side effects, but I can try to find out.</p>",
        "id": 401593422,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699779566
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8365\">#8365</a></p>",
        "id": 401594085,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699779850
    },
    {
        "content": "<p>Can we please merge <a href=\"https://github.com/leanprover/std4/pull/351\">https://github.com/leanprover/std4/pull/351</a> first?</p>",
        "id": 401594952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699780203
    },
    {
        "content": "<p>What is that supposed to do?</p>",
        "id": 401595713,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699780648
    },
    {
        "content": "<p>It moves <code>norm_cast</code> to Std, and also sets up <code>norm_cast</code> lemmas in Std.</p>",
        "id": 401596854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699781774
    },
    {
        "content": "<p>It's possible we can make the changes independently.</p>",
        "id": 401596884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699781822
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.cast_negSucc#doc\">docs#Int.cast_negSucc</a> is in <code>Mathlib.Data...</code><br>\nAnyway, the concrete use case where this came up was superseded by a better proof, so from my POV it is not urgent.</p>",
        "id": 401597047,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699781907
    },
    {
        "content": "<p>yeah, this issue has nothing to do with std</p>",
        "id": 401598661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699782820
    },
    {
        "content": "<p>In any case, <a href=\"https://github.com/leanprover-community/mathlib4/pull/8365\">#8365</a> is green now, so nothing broke.</p>",
        "id": 401600532,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699784081
    },
    {
        "content": "<p>What is <code>squash</code> meant to do, BTW?</p>",
        "id": 401600585,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699784145
    },
    {
        "content": "<p>Can <a href=\"https://github.com/leanprover-community/mathlib4/pull/8365\">#8365</a> be merged now?</p>",
        "id": 402414765,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700124143
    }
]