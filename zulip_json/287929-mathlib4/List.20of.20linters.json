[
    {
        "content": "<p>I'd like to try to define a new linter, that would complain if a lemma uses a <code>[MetricSpace X]</code> assumption but only uses the topology of<code>X</code> in the statement, telling the user to use a <code>[MetrizableSpace X]</code> assumption instead. My idea was to get inspiration from another linter for decidable assumption which does roughly the same (if the assumption is only used in the proof, tell the user to use <code>classical</code> instead in the proof). But I can't find this linter in mathlib4 (I know it existed in mathlib3, but I don't know if it has been ported). When I went to the documentation to learn more about which linters we have, in <a href=\"https://leanprover-community.github.io/glossary.html#code-linter\">https://leanprover-community.github.io/glossary.html#code-linter</a>, the link <code>a collection of Lean programs</code> goes unfortunately to mathlib3 docs. </p>\n<p>Is there a way to see a list of active linters? And do you know if the above decidable linter has been ported to Lean 4?</p>",
        "id": 400478888,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699257397
    },
    {
        "content": "<p>Same thing as the fintypefinite linter, right?</p>",
        "id": 400480071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699257975
    },
    {
        "content": "<p>Could we also have enumerablecountable?</p>",
        "id": 400480090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699257989
    },
    {
        "content": "<p><code>#list_linters</code> lists the available mathlib linters (this is import dependent)</p>",
        "id": 400480217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258066
    },
    {
        "content": "<p>I have just found <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Lint/Frontend.html\">https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Lint/Frontend.html</a> and the #list_linters command.</p>",
        "id": 400480228,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699258074
    },
    {
        "content": "<p>It looks like the linter I was looking for has not been ported.</p>",
        "id": 400480301,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699258095
    },
    {
        "content": "<p>it looks like mathlib currently has no linters at all, they are all in std now</p>",
        "id": 400480398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258158
    },
    {
        "content": "<p>except for the <code>structureInType</code> linter</p>",
        "id": 400480425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258172
    },
    {
        "content": "<p>Are the missing linters tracked anywhere? I don't see any conspicuously long comments containing lean 3 implementations</p>",
        "id": 400480580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258251
    },
    {
        "content": "<p>mathlib3 has the following comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">User commands to spot common mistakes in the code</span>\n\n<span class=\"sd\">* `#lint`: check all declarations in the current file</span>\n<span class=\"sd\">* `#lint_mathlib`: check all declarations in mathlib (so excluding core or other projects,</span>\n<span class=\"sd\">  and also excluding the current file)</span>\n<span class=\"sd\">* `#lint_all`: check all declarations in the environment (the current file and all</span>\n<span class=\"sd\">  imported files)</span>\n\n<span class=\"sd\">The following linters are run by default:</span>\n<span class=\"sd\">1. `unused_arguments` checks for unused arguments in declarations.</span>\n<span class=\"sd\">2. `def_lemma` checks whether a declaration is incorrectly marked as a def/lemma.</span>\n<span class=\"sd\">3. `dup_namespce` checks whether a namespace is duplicated in the name of a declaration.</span>\n<span class=\"sd\">4. `ge_or_gt` checks whether ≥/&gt; is used in the declaration.</span>\n<span class=\"sd\">5. `instance_priority` checks that instances that always apply have priority below default.</span>\n<span class=\"sd\">6. `doc_blame` checks for missing doc strings on definitions and constants.</span>\n<span class=\"sd\">7.  `has_nonempty_instance` checks whether every type has an associated `inhabited`, `unique`</span>\n<span class=\"sd\">    or `nonempty` instance.</span>\n<span class=\"sd\">8.  `impossible_instance` checks for instances that can never fire.</span>\n<span class=\"sd\">9.  `incorrect_type_class_argument` checks for arguments in [square brackets] that are not classes.</span>\n<span class=\"sd\">10. `dangerous_instance` checks for instances that generate type-class problems with metavariables.</span>\n<span class=\"sd\">11. `fails_quickly` tests that type-class inference ends (relatively) quickly when applied to</span>\n<span class=\"sd\">    variables.</span>\n<span class=\"sd\">12. `has_coe_variable` tests that there are no instances of type `has_coe α t` for a variable `α`.</span>\n<span class=\"sd\">13. `inhabited_nonempty` checks for `inhabited` instance arguments that should be changed to</span>\n<span class=\"sd\">    `nonempty`.</span>\n<span class=\"sd\">14. `simp_nf` checks that the left-hand side of simp lemmas is in simp-normal form.</span>\n<span class=\"sd\">15. `simp_var_head` checks that there are no variables as head symbol of left-hand sides of</span>\n<span class=\"sd\">    simp lemmas.</span>\n<span class=\"sd\">16. `simp_comm` checks that no commutativity lemmas (such as `add_comm`) are marked simp.</span>\n<span class=\"sd\">17. `decidable_classical` checks for `decidable` hypotheses that are used in the proof of a</span>\n<span class=\"sd\">    proposition but not in the statement, and could be removed using `classical`.</span>\n<span class=\"sd\">    Theorems in the `decidable` namespace are exempt.</span>\n<span class=\"sd\">18. `has_coe_to_fun` checks that every type that coerces to a function has a direct</span>\n<span class=\"sd\">    `has_coe_to_fun` instance.</span>\n<span class=\"sd\">19. `check_type` checks that the statement of a declaration is well-typed.</span>\n<span class=\"sd\">20. `check_univs` checks that there are no bad `max u v` universe levels.</span>\n<span class=\"sd\">21. `syn_taut` checks that declarations are not syntactic tautologies.</span>\n<span class=\"sd\">22. `check_reducibility` checks whether non-instances with a class as type are reducible.</span>\n<span class=\"sd\">23. `unprintable_interactive` checks that interactive tactics have parser documentation.</span>\n<span class=\"sd\">24. `to_additive_doc` checks if additive versions of lemmas have documentation.</span>\n\n<span class=\"sd\">The following linters are not run by default:</span>\n<span class=\"sd\">1. `doc_blame_thm`, checks for missing doc strings on lemmas and theorems.</span>\n<span class=\"sd\">2. `explicit_vars_of_iff` checks if there are explicit variables used on both sides of an iff.</span>\n\n<span class=\"sd\">The command `#list_linters` prints a list of the names of all available linters.</span>\n\n<span class=\"sd\">You can append a `*` to any command (e.g. `#lint_mathlib*`) to omit the slow tests (4).</span>\n\n<span class=\"sd\">You can append a `-` to any command (e.g. `#lint_mathlib-`) to run a silent lint</span>\n<span class=\"sd\">that suppresses the output if all checks pass.</span>\n<span class=\"sd\">A silent lint will fail if any test fails.</span>\n\n<span class=\"sd\">You can append a `+` to any command (e.g. `#lint_mathlib+`) to run a verbose lint</span>\n<span class=\"sd\">that reports the result of each linter, including  the successes.</span>\n\n<span class=\"sd\">You can append a sequence of linter names to any command to run extra tests, in addition to the</span>\n<span class=\"sd\">default ones. e.g. `#lint doc_blame_thm` will run all default tests and `doc_blame_thm`.</span>\n\n<span class=\"sd\">You can append `only name1 name2 ...` to any command to run a subset of linters, e.g.</span>\n<span class=\"sd\">`#lint only unused_arguments`</span>\n\n<span class=\"sd\">You can add custom linters by defining a term of type `linter` in the `linter` namespace.</span>\n<span class=\"sd\">A linter defined with the name `linter.my_new_check` can be run with `#lint my_new_check`</span>\n<span class=\"sd\">or `lint only my_new_check`.</span>\n<span class=\"sd\">If you add the attribute `@[linter]` to `linter.my_new_check` it will run by default.</span>\n\n<span class=\"sd\">Adding the attribute `@[nolint doc_blame unused_arguments]` to a declaration</span>\n<span class=\"sd\">omits it from only the specified linter checks.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">add_tactic_doc</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>                     <span class=\"o\">:=</span> <span class=\"s2\">\"linting commands\"</span><span class=\"o\">,</span>\n  <span class=\"n\">category</span>                 <span class=\"o\">:=</span> <span class=\"n\">doc_category.cmd</span><span class=\"o\">,</span>\n  <span class=\"n\">decl_names</span>               <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">lint_cmd</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">lint_mathlib_cmd</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">lint_all_cmd</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">list_linters</span><span class=\"o\">],</span>\n  <span class=\"n\">tags</span>                     <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"linting\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>what ever happened to these notes? They seem to have been deleted in the port</p>",
        "id": 400480861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258399
    },
    {
        "content": "<p>there are a few <code>add_tactic_doc</code> commands in mathlib4 (all commented out, because the <a href=\"https://github.com/leanprover-community/mathlib4/pull/639\">PR</a> which adds this command was never merged), but not nearly enough - there are 290 hits for <code>add_tactic_doc</code> in mathlib3 and 5 in mathlib4</p>",
        "id": 400481229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699258568
    },
    {
        "content": "<p>I am trying to update a little bit the mathlib documentation pages to mathlib 4. Doing this, I notice that the library notes are apparently not in mathlib 4 documentation. Am I missing something?</p>",
        "id": 400481907,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699258894
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> who had a general tool for detecting such issues (e.g. lemma about rings only uses group structure)  in Lean 3.</p>",
        "id": 400481961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699258920
    },
    {
        "content": "<p>From the list of linters above, I found that the following linters are missing in lean 4:</p>\n<ol start=\"4\">\n<li><code>ge_or_gt</code> checks whether ≥/&gt; is used in the declaration.</li>\n<li><code>instance_priority</code> checks that instances that always apply have priority below default.</li>\n<li>\n<p><code>has_nonempty_instance</code> checks whether every type has an associated <code>inhabited</code>, <code>unique</code><br>\n    or <code>nonempty</code> instance.</p>\n</li>\n<li>\n<p><code>incorrect_type_class_argument</code> checks for arguments in [square brackets] that are not classes.</p>\n</li>\n<li><code>dangerous_instance</code> checks for instances that generate type-class problems with metavariables.</li>\n<li><code>fails_quickly</code> tests that type-class inference ends (relatively) quickly when applied to<br>\n    variables.</li>\n<li><code>has_coe_variable</code> tests that there are no instances of type <code>has_coe α t</code> for a variable <code>α</code>.</li>\n<li><code>inhabited_nonempty</code> checks for <code>inhabited</code> instance arguments that should be changed to<br>\n<code>nonempty</code>.</li>\n<li><code>decidable_classical</code> checks for <code>decidable</code> hypotheses that are used in the proof of a<br>\n    proposition but not in the statement, and could be removed using <code>classical</code>.<br>\n    Theorems in the <code>decidable</code> namespace are exempt.</li>\n<li><code>has_coe_to_fun</code> checks that every type that coerces to a function has a direct<br>\n<code>has_coe_to_fun</code> instance.</li>\n<li><code>check_reducibility</code> checks whether non-instances with a class as type are reducible.</li>\n<li><code>unprintable_interactive</code> checks that interactive tactics have parser documentation.</li>\n<li><code>to_additive_doc</code> checks if additive versions of lemmas have documentation.</li>\n</ol>\n<p>Additionally there are some more (non-default) linters which are not listed in the library note and which are also missing:</p>\n<ul>\n<li><code>assert_not_exists</code>: A linter for checking that the declarations marked <code>assert_not_exists</code> eventually exist.</li>\n<li><code>assert_no_instance</code>: A linter for checking that the declarations marked <code>assert_no_instance</code> eventually exist.</li>\n<li>\n<p><code>class_structure</code>: Checks that all uses of the <code>@[class]</code> attribute apply to structures or inductive types.<br>\n  This is future-proofing for lean 4, which no longer supports <code>@[class] def</code>.</p>\n</li>\n<li>\n<p><code>fintype_finite</code>: Checks whether a declaration is <code>Prop</code>-valued and takes a <code>fintype _</code><br>\n  hypothesis that is unused elsewhere in the type.<br>\n  In this case, that hypothesis can be replaced with <code>casesI nonempty_fintype _</code> in the proof.</p>\n</li>\n</ul>",
        "id": 400483203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699259491
    },
    {
        "content": "<p>I hope to port my linter at some point, but probably it will only be in a couple of months from now.<br>\nCertainly that shouldn't stop people making useful intermediate versions though! If you know how the typeclass graph looks for some specific TCs it should be quite ok to fold over the proof term and look for whether you find any bare <code>_inst_1</code> of that type if you stop searching whenever you hit <code>instTopologyPseudoMetricSpace</code> or whatever the specific edge you want to know if everything is passing through is. Of course it does start the get harder when you have multiple possible paths!</p>",
        "id": 400566499,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699287406
    },
    {
        "content": "<p>Regarding library notes; I think those are not implemented anywhere in lean 4: neither doc-gen4 or vscode knows about them</p>",
        "id": 400640296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699320210
    }
]