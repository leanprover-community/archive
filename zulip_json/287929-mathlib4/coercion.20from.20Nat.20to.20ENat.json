[
    {
        "content": "<p>It seems that we'll have to restate many <code>WithTop</code> lemmas for <code>ENat</code> because <code>WithTop</code> lemmas use <code>WithTop.some</code> and <code>ENat</code> uses <code>Nat.cast</code>.</p>",
        "id": 326995158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676019539
    },
    {
        "content": "<p>In Lean 3, this didn't matter because these were defeq instances of <code>has_coe_t</code> but in Lean 4 these are different functions.</p>",
        "id": 326995291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676019580
    },
    {
        "content": "<p>I'm adding a lemma <code>some_eq_coe</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2186\">!4#2186</a> (not pushed yet).</p>",
        "id": 326995422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676019616
    },
    {
        "content": "<p>This seems like a pretty annoying problem, and it will come up again for:</p>\n<ul>\n<li>ennreal</li>\n<li>any future attempt to unrevert <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s refactor merging nat.cast and algebra_map</li>\n</ul>",
        "id": 326996170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676019871
    },
    {
        "content": "<ul>\n<li>lemmas about Int.ofNat in Std vs the same lemmas about Nat.cast in mathlib</li>\n</ul>",
        "id": 326996350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676019937
    },
    {
        "content": "<p>I was hoping there weren't many <code>WithTop</code> lemmas. I added stuff like <code>bot_add</code> when I ported the file.</p>",
        "id": 327014774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1676025447
    },
    {
        "content": "<p>Are these functions not definitionally equal anymore in Lean 4? Since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NatCast#doc\">docs4#NatCast</a> is a class, can we just provide an instance that is definitionally the right function?</p>\n<p>Or are they definitionally equal, but only after unfolding semireducible definitions (and in Lean 3 it was just unfolding instances)?</p>",
        "id": 327054639,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676036739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<ul>\n<li>We don't have a <code>RealCast</code>, so I don't know how this will come up for <code>ENNReal</code>.</li>\n<li>I don't see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ofNat#doc\">docs4#Int.ofNat</a>. Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NatCast#doc\">docs4#NatCast</a> ?</li>\n</ul>",
        "id": 327055533,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676036979
    },
    {
        "content": "<p>It's the later, they're definitionally equal but syntactically different</p>",
        "id": 327055542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676036981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.ofNat#doc\">docs4#Int.ofNat</a> not working is a docs bug, it's the constructor for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int#doc\">docs4#Int</a></p>",
        "id": 327055666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676037014
    },
    {
        "content": "<p>Maybe there's no coercion defined though</p>",
        "id": 327055734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676037037
    },
    {
        "content": "<p>Hopefully Std still formulates all user-facing lemmas about <code>Int</code> using <code>NatCast</code>, not <code>Int.ofNat</code>? That should mostly eliminate that problem, I think.</p>",
        "id": 327056415,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676037243
    },
    {
        "content": "<p>They are defeq but the function themselves are semireducible.</p>",
        "id": 327056671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676037324
    },
    {
        "content": "<p>I see, that indeed sounds inconvenient.</p>",
        "id": 327056737,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676037346
    },
    {
        "content": "<p>It would be straightforward to add a shim to restore Lean3 behavior by having a global <code>coe</code> function that provides all <code>Coe</code> instances in mathlib</p>",
        "id": 327057777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676037599
    },
    {
        "content": "<p>But perhaps not a good idea</p>",
        "id": 327057800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676037603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20from.20Nat.20to.20ENat/near/327056671\">said</a>:</p>\n<blockquote>\n<p>They are defeq but the function themselves are semireducible.</p>\n</blockquote>\n<p>Should we just make Nat.cast and co. reducible then?  I think we already had issues with nondefeq diamonds because one instance used Int.ofNat and the other Nat.cast</p>",
        "id": 327148856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676064223
    },
    {
        "content": "<p>If <code>foo</code> is reducibly <code>bar</code>, does that means that <code>rw lemma_about_foo</code> can apply to <code>bar</code>?</p>",
        "id": 327150139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676064720
    },
    {
        "content": "<p>I only propose to make <code>def Nat.cast</code> reducible.  <code>Nat.cast n</code> and <code>Int.ofNat</code> still wouldn't be reducibly defeq with this change.</p>",
        "id": 327150807,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676065018
    },
    {
        "content": "<p>I don't understand the difference between those claims; are you suggesting <code>Nat.cast</code> would unfold reducibly to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NatCast#doc\">docs4#NatCast</a> .natCast?</p>",
        "id": 327150994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676065094
    },
    {
        "content": "<p>Yes!</p>",
        "id": 327151015,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676065106
    },
    {
        "content": "<p>Why would that make any difference?</p>",
        "id": 327151027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676065112
    },
    {
        "content": "<p>Is it because <code>NatCast.natCast</code> has special instance/projection reducibility?</p>",
        "id": 327151082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676065137
    },
    {
        "content": "<p>Because IIRC we use the <code>.instances</code> transparency to unify TC instances, which unfolds <code>NatCast.natCast</code> but doesn't unfold (the current, semireducible) <code>Nat.cast</code>.</p>",
        "id": 327151138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676065156
    },
    {
        "content": "<p><code>NatCast.natCast</code> is the projection btw.</p>",
        "id": 327151160,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676065167
    },
    {
        "content": "<p>I don't see how that would solve the problem in this thread, but I can't imagine it being a bad idea either.</p>",
        "id": 327151278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676065206
    },
    {
        "content": "<p>Aside, but as another example of this policy helping with diamonds:</p>\n<p>if we made <code>Nat.cast</code>, <code>Int.cast</code>, and the incoming <code>Rat.cast</code> (<a href=\"https://github.com/leanprover/std4/pull/101\">std4#101</a>) reducible, the basic <code>OfScientific Rat</code> instance wouldn’t need a “pointless” <code>Rat.cast</code> in the definition in order to be defeq at <code>.instances</code> transparency to the division-ring-based instance for <code>OfScientific Rat</code>. (defequality at this transparency is required for <code>norm_num</code> to work safely with it, as long as we want to avoid a <code>LawfulOfScientific</code> class)</p>",
        "id": 327189201,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676091224
    },
    {
        "content": "<p>fwiw, I built mathlib4 on master locally with <code>Nat.cast</code> and <code>Int.cast</code> marked reducible in std4, and nothing seemed to break. (It would be good if someone else could confirm, though.) Is there any risk of the change slowing anything down?</p>",
        "id": 327341830,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676182756
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EAlgebra.2EBasic\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Algebra.2EAlgebra.2EBasic</a> for discussion about <code>algebra_map</code> as a <code>coe</code>.</p>",
        "id": 327487049,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676275705
    }
]