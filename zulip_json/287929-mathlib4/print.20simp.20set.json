[
    {
        "content": "<p>How can I find out whether a given lemma belongs to a given simp set?</p>",
        "id": 328380577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676605821
    },
    {
        "content": "<p>I have some strange <code>simp only [mfld_simps]</code> failures and I want to find out whether <code>simps! (config := mfld_cfg)</code> correctly assigns these attrs.</p>",
        "id": 328381805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676606661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 328393427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676615483
    },
    {
        "content": "<p>The errors appear in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2231\">!4#2231</a></p>",
        "id": 328393633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676615613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 328393731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676615667
    },
    {
        "content": "<p>You are correct, the support for custom attributes was not yet implemented in simps. I'll prioritize that.</p>",
        "id": 328467915,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676639899
    },
    {
        "content": "<p>Then I'll fix the proofs and add a porting note. Anyway, is there some command (or a simple metaprogram) that prints all lemmas tagged with a given simp attr?</p>",
        "id": 328484766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676644497
    },
    {
        "content": "<p>Here are some useful functions. I'll PR them. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are these welcome in Std (or Core)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span> <span class=\"c1\">-- just to transitively import some things</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span> <span class=\"n\">Simp</span>\n\n<span class=\"sd\">/-- Checks whether `declName` is in `SimpTheorems` as either a lemma or definition to unfold. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.SimpTheorems.hasAttribute</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">d.isLemma</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">decl</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">d.isDeclToUnfold</span> <span class=\"n\">declName</span>\n\n<span class=\"sd\">/-- Tests whether `decl` has `simp`-attribute `simpAttr`. Returns `false` is `simpAttr` is not a</span>\n<span class=\"sd\">valid simp-attribute. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">isInSimpSet</span> <span class=\"o\">(</span><span class=\"n\">simpAttr</span> <span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">simpDecl</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpExtension</span><span class=\"bp\">?</span> <span class=\"n\">simpAttr</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpDecl.getTheorems</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasAttribute</span> <span class=\"n\">decl</span>\n\n<span class=\"sd\">/-- Returns all declarations with the `simp`-attribute `simpAttr`.</span>\n<span class=\"sd\">  Note: this also returns many auxiliary declarations. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getAllSimpDecls</span> <span class=\"o\">(</span><span class=\"n\">simpAttr</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">simpDecl</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpExtension</span><span class=\"bp\">?</span> <span class=\"n\">simpAttr</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">simpDecl.getTheorems</span>\n  <span class=\"n\">return</span> <span class=\"n\">thms.toUnfold.toList</span> <span class=\"bp\">++</span> <span class=\"n\">thms.lemmaNames.toList.filterMap</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">decl</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">decl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"sd\">/-- Gets all simp-attributes given to declaration `decl`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getAllSimpAttrs</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">simpAttrs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">simpAttr</span><span class=\"o\">,</span> <span class=\"n\">simpDecl</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpExtensionMapRef.get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpDecl.getTheorems</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasAttribute</span> <span class=\"n\">decl</span> <span class=\"k\">then</span>\n      <span class=\"n\">simpAttrs</span> <span class=\"o\">:=</span> <span class=\"n\">simpAttrs.push</span> <span class=\"n\">simpAttr</span>\n  <span class=\"n\">return</span> <span class=\"n\">simpAttrs</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← isInSimpSet `simp `foo}\"</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← isInSimpSet `simp `foo}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← getAllSimpAttrs `foo}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← getAllSimpDecls `simp}\"</span>\n</code></pre></div>",
        "id": 328519518,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676653354
    },
    {
        "content": "<p>It could go in either std4 or mathlib4 <code>Lean</code> directory</p>",
        "id": 328520407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676653596
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/2350\">!4#2350</a> so that I can reference it in comments.</p>",
        "id": 328563996,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676668358
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2398\">!4#2398</a></p>",
        "id": 329040054,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676916267
    }
]