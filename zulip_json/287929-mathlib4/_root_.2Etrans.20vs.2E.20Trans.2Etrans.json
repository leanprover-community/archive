[
    {
        "content": "<p>Trying to build</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">ab</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">662</span><span class=\"bp\">/</span><span class=\"mi\">663</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">TransBug</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">irving</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-09-17/bin/lean ./././TransBug.lean -R ././. -o ./build/lib/TransBug.olean -i ./build/lib/TransBug.ilean -c ./build/ir/TransBug.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">TransBug.lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">_root_.trans</span> <span class=\"bp\">?</span><span class=\"n\">m.164</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n  <span class=\"n\">Trans.trans</span> <span class=\"bp\">?</span><span class=\"n\">m.244</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">irving</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-09-17/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>Is this expected?</p>",
        "id": 391518192,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1694962372
    },
    {
        "content": "<p>did you mean to declare the variable <code>r</code> somewhere?</p>",
        "id": 391518614,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694962636
    },
    {
        "content": "<p>(you might try <code>set_option autoImplicit false</code>to catch that kind of thing)</p>",
        "id": 391518735,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694962691
    },
    {
        "content": "<p>That seems  like an issue yes, this happens as there is a theorem <code>trans</code> and one <code>Trans.trans</code> but prelude.lean has the line <code>export Trans (trans)</code> so the two are essentially always in scope and hence in conflict. To fix this locally you can just specify <code>_root_.trans</code> or <code>Trans.trans</code> (or even <code>LE.le.trans</code> in this case). But that seems like a conflict that should be fixed in mathlib or core, I'm not sure which</p>",
        "id": 391518738,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694962694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/_root_.2Etrans.20vs.2E.20Trans.2Etrans/near/391518614\">said</a>:</p>\n<blockquote>\n<p>did you mean to declare the variable <code>r</code> somewhere?</p>\n</blockquote>\n<p>Even if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">ab</span>\n</code></pre></div>\n<p>you see the same behaviour so the problem itself is not due to autoimplicits or lack thereof</p>",
        "id": 391518874,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694962779
    },
    {
        "content": "<p>Sorry, as Alex says the missing <code>r</code> is just me overaggressively minimizing; the underlying problem is unrelated.  </p>\n<p>And yes, using <code>le_trans</code> or <code>lt_trans</code> explicitly fixes it, since those aren't ambiguous.</p>",
        "id": 391519660,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1694963078
    },
    {
        "content": "<p>It looks like <code>Trans.trans</code> is the more general one, since it includes <code>lt_of_lt_of_le</code> and the like, so it would be preferable if that was the default.</p>",
        "id": 391523522,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1694964238
    },
    {
        "content": "<p>On the other hand presumably making it more general might break a ton of unifications?</p>",
        "id": 391523811,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1694964292
    }
]