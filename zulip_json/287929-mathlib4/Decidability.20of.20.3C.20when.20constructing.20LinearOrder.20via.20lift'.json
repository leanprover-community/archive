[
    {
        "content": "<p>We have the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Lex</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Lex</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">PairLinearOrder</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearOrder.lift'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u.pair</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">comparePairDecidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">PairLinearOrder</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">l.decidable_lt</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n  <span class=\"n\">exact</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>Lean complains that the types don't match via the amusing error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">q</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>If we set <code>set_option pp.explicit true</code> we can see that the types don't match exactly, note <code>@SemilatticeInf.toPartialOrder</code> vs <code>@LinearOrder.toPartialOrder</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">q</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Decidable</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LT.lt</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLT</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrder.toPartialOrder</span> <span class=\"n\">Pair</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"n\">p1</span>\n      <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Decidable</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LT.lt</span> <span class=\"n\">Pair</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLT</span> <span class=\"n\">Pair</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder</span> <span class=\"n\">Pair</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeInf.toPartialOrder</span> <span class=\"n\">Pair</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeInf</span> <span class=\"n\">Pair</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DistribLattice.toLattice</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instDistribLattice</span> <span class=\"n\">Pair</span> <span class=\"n\">PairLinearOrder</span><span class=\"o\">))))))</span>\n      <span class=\"n\">p1</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>with the former coming from the definition of LinearOrder and the latter coming from <code>LinearOrder.lift'</code>.</p>\n<p>Is there something we can do here?</p>",
        "id": 342111643,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1678898512
    },
    {
        "content": "<p><code>have</code> means \"create this instance and forget everything\"</p>",
        "id": 342119563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678900372
    },
    {
        "content": "<p>Use <code>let</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">comparePairDecidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">PairLinearOrder</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">l.decidable_lt</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">q</span>\n  <span class=\"n\">exact</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 342119608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678900385
    },
    {
        "content": "<p>But note that you don't need to do anything at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean already knows where the instance is</span>\n<span class=\"kd\">instance</span> <span class=\"n\">comparePairDecidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 342119712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678900417
    },
    {
        "content": "<p>Ah yes of course, <code>infer_instance</code>is exactly what I was looking for. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> thank you very much.</p>",
        "id": 342248754,
        "sender_full_name": "Jure Taslak (Slovenia)",
        "timestamp": 1678957183
    }
]