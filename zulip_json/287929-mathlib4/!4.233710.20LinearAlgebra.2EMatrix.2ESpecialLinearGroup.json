[
    {
        "content": "<p>What is the correct syntax to express coercion to a fixed type as a prefix, so that the following example will work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.GeneralLinearGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Adjugate</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.ToLin</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SpecialLinearGroup</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SpecialLinearGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasCoeToMatrix</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A.val</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> In this file, Lean often has a hard time working out the values of `n` and `R` for an expression</span>\n<span class=\"cm\">like `det ↑A`. Rather than writing `(A : Matrix n n R)` everywhere in this file which is annoyingly</span>\n<span class=\"cm\">verbose, or `A.val` which is not the simp-normal form for subtypes, we create a local notation</span>\n<span class=\"cm\">`↑ₘA`. This notation references the local `n` and `R` variables, so is not valid as a global</span>\n<span class=\"cm\">notation. -/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"s2\">\"↑ₘ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">↑ₘ</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">↑ₘ</span><span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.ext_iff.trans</span> <span class=\"n\">Matrix.ext_iff.symm</span>\n</code></pre></div>",
        "id": 353842128,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682685473
    },
    {
        "content": "<p>Here I want to have <code>↑ₘA</code> mean <code>(A : Matrix n n R)</code></p>",
        "id": 353842484,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682685517
    },
    {
        "content": "<p>What goes wrong with the above?</p>",
        "id": 353848314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682686231
    },
    {
        "content": "<p><code>unknown identifier 'coe' at quotation precheck; you can use </code>set_option quotPrecheck false<code> to disable this check.</code></p>",
        "id": 353863985,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682688006
    },
    {
        "content": "<p>And I don't know what to replace <code>coe</code> by – <code>(↑)</code> certainly doesn't work</p>",
        "id": 353864803,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682688112
    },
    {
        "content": "<p><code>Subtype.val</code> will work here</p>",
        "id": 353869743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682688644
    },
    {
        "content": "<p>The comment about <code>.val</code> in the docstring no longer applies in Lean 4, since the two are now the same thing</p>",
        "id": 353869838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682688661
    },
    {
        "content": "<p>Now in this piece of code Lean is complaining about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Inv</span> <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"bp\">//</span> <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>despite the <code>hasInv</code> instance being in plain sight of it. How do I get <code>coe_inv</code> to compile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.GeneralLinearGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Adjugate</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.ToLin</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SpecialLinearGroup</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">A.det</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasCoeToMatrix</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"s2\">\"↑ₘ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.val</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasInv</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_adjugate</span><span class=\"o\">,</span> <span class=\"n\">A.prop</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]⟩⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_inv</span> <span class=\"o\">:</span> <span class=\"bp\">↑ₘ</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">adjugate</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 353885376,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682690375
    },
    {
        "content": "<p>Ah, this indeed isn't going to work</p>",
        "id": 353887690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682690624
    },
    {
        "content": "<p>The problem is that <code>Subtype.val</code> has the wrong type</p>",
        "id": 353888285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682690684
    },
    {
        "content": "<p>This is part of porting PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/3710\">!4#3710</a>, <code>LinearAlgebra.Matrix.SpecialLinearGroup</code>. Have a look</p>",
        "id": 353888975,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682690752
    },
    {
        "content": "<p><code>local notation \"↑ₘ\" A:1024 =&gt; ((A : SpecialLinearGroup n R) : Matrix n n R)</code> seems to work</p>",
        "id": 353890056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682690864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233710.20LinearAlgebra.2EMatrix.2ESpecialLinearGroup/near/353890056\">said</a>:</p>\n<blockquote>\n<p><code>local notation \"↑ₘ\" A:1024 =&gt; ((A : SpecialLinearGroup n R) : Matrix n n R)</code> seems to work</p>\n</blockquote>\n<p>But then I have to put brackets around all the <code>↑ₘA</code>s and <code>↑ₘB</code>s to prevent a syntax error in the earlier <code>ext_iff</code> lemma, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">SpecialLinearGroup</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑ₘ</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑ₘ</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.ext_iff.trans</span> <span class=\"n\">Matrix.ext_iff.symm</span>\n</code></pre></div>",
        "id": 353892293,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682691100
    },
    {
        "content": "<p>It sounds like I have the precedence wrong</p>",
        "id": 353893549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682691238
    },
    {
        "content": "<p>I unfortunately don't know the Lean4 syntax, and I can't use <code>#print notation</code> like I could in Lean 3 to learn it</p>",
        "id": 353893808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682691260
    },
    {
        "content": "<p>Pushed a commit that fixes it</p>",
        "id": 353896880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682691601
    },
    {
        "content": "<p>Right, I might have to call <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> to fix the eta-related errors left in this file</p>",
        "id": 353899714,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682691898
    },
    {
        "content": "<p><code>toLin'</code> is proving tough, even with the new <code>eta_experiment%</code> (local eta) feature</p>",
        "id": 353899983,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682691930
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">coe'</span> <span class=\"n\">at</span> <span class=\"n\">quotation</span> <span class=\"n\">precheck</span><span class=\"bp\">;</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">disable</span> <span class=\"n\">this</span> <span class=\"n\">check.</span>\n</code></pre></div>",
        "id": 353993204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682702698
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Expressing.20coercion.20in.20a.20prefix\">#mathlib4 &gt; Expressing coercion in a prefix</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 353997157,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682703227
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, this thread ended up split</p>",
        "id": 353997481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682703257
    }
]