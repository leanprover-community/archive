[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342006742\">said</a>:</p>\n<blockquote>\n<p>Lean 4's <code>haveI</code> does not mean the same thing as Lean 3's <code>haveI</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342010273\">said</a>:</p>\n<blockquote>\n<p>Can you elaborate on this?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342010573\">said</a>:</p>\n<blockquote>\n<p>It's now \"I\" for \"inline\" rather than \"instance cache\". I still don't know what that means in practice</p>\n</blockquote>\n<p>Is there a linkifier like tactic4#haveI that would have told me that?</p>",
        "id": 342010682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875535
    },
    {
        "content": "<p>sadly no, there is a docs4 linkifier but lean 4 tactic declaration names are not very guessable</p>",
        "id": 342010881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875599
    },
    {
        "content": "<p>Because there is nothing forcing them to live inside the <code>tactic.interactive</code> namespace like there was in Lean 3?</p>",
        "id": 342011030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875628
    },
    {
        "content": "<p>Because they are not even named at all in many cases, the names are autogenerated</p>",
        "id": 342011177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875668
    },
    {
        "content": "<p>Do they have doc entries at all?</p>",
        "id": 342011236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875682
    },
    {
        "content": "<p>they do</p>",
        "id": 342011255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875689
    },
    {
        "content": "<p>the <code>#help</code> command will find them</p>",
        "id": 342011303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875702
    },
    {
        "content": "<p>Sorry, what I meant is, do those entries appear on docgen4?</p>",
        "id": 342011458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875728
    },
    {
        "content": "<p>they do</p>",
        "id": 342011469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875732
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.tacticHaveI_#doc\">docs4#Std.Tactic.tacticHaveI_</a></p>",
        "id": 342011654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875785
    },
    {
        "content": "<p>It's unfortunate it doesn't show notation</p>",
        "id": 342011827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875839
    },
    {
        "content": "<p>The raw output from <code>#help</code> might be a bit more helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.HelpCmd</span>\n\n<span class=\"k\">#help</span> <span class=\"n\">tactic</span> <span class=\"bp\">«</span><span class=\"n\">haveI</span><span class=\"bp\">»</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"haveI\"</span><span class=\"bp\">...</span> <span class=\"o\">[</span><span class=\"n\">Std.Tactic.tacticHaveI_</span><span class=\"o\">]</span>\n  <span class=\"bp\">`</span><span class=\"n\">haveI</span><span class=\"bp\">`</span> <span class=\"n\">behaves</span> <span class=\"n\">like</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">inlines</span> <span class=\"n\">the</span> <span class=\"n\">value</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">producing</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">let_fun</span><span class=\"bp\">`</span> <span class=\"n\">term.</span>\n</code></pre></div>",
        "id": 342011935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875862
    },
    {
        "content": "<p>12 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.232894\">#mathlib4 &gt; !4#2894</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 342011938,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678875865
    },
    {
        "content": "<p>unfortunately this also does not show the complete syntax declaration, it tries its best but the relevant data is not really in the environment</p>",
        "id": 342012109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875916
    },
    {
        "content": "<p>but <code>[Std.Tactic.tacticHaveI_]</code> is clickable there so you can go to the declaration if you want to see it</p>",
        "id": 342012381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875975
    }
]