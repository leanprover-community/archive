[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2773\">!4#2773</a> I can't understand why <code>refine' mul_dvd_mul _ ih</code> in Lean 4 generates a type mismatch error but mathlib 3 <code>refine mul_dvd_mul _ ih</code> doesn't</p>",
        "id": 340785458,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678435146
    },
    {
        "content": "<p>Looks like a change in a lemma statement</p>",
        "id": 340797204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678438917
    },
    {
        "content": "<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2582</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∣</span> <span class=\"bp\">?</span><span class=\"n\">m.2583</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∣</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 340797277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678438928
    },
    {
        "content": "<p>Note the arrows are in different places</p>",
        "id": 340797331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678438937
    },
    {
        "content": "<p>You should open the lean3 and work out where they are supposed to be</p>",
        "id": 340797385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678438956
    },
    {
        "content": "<p>And track down where the proof diverges</p>",
        "id": 340797467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678438966
    },
    {
        "content": "<p>using the lean web editor I find that</p>\n<ul>\n<li>in mathlib3, after the last pow_succ in <code>rw [pow_succ' p k, pow_mul, pow_mul, ← geom_sum₂_mul, pow_succ]</code> the coercion distributes and the term <code>↑p * ↑p ^ k.succ</code> appears</li>\n<li>but in mathlib4 at the same place the coercion doesn't distribute and <code>↑(p * p ^ (k + 1))</code> remains</li>\n</ul>",
        "id": 340806118,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678441177
    },
    {
        "content": "<p>I need a way to distribute the coercion</p>",
        "id": 340806840,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678441309
    },
    {
        "content": "<p>but as I have only barely scratched the surface of mathlib I don't know how to look for suitable rewriting theorems</p>",
        "id": 340820843,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678444426
    },
    {
        "content": "<p>The <code>norm_cast</code> tactic is useful when having do move coercions around.</p>",
        "id": 340824604,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678445300
    },
    {
        "content": "<p><code>Nat.mul_cast</code> worked, but now I'm getting a whnf heartbeat error</p>",
        "id": 340832271,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678447307
    },
    {
        "content": "<p>I pushed a partial fix. Now in the proof at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">RingHom.map_geom_sum₂</span><span class=\"o\">,</span> <span class=\"n\">RingHom.map_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">RingHom.map_pow</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">geom_sum₂_self</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>when Lean tries to rewrite using <code>h</code> it reaches the max number of heartbeats</p>",
        "id": 340832446,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678447354
    },
    {
        "content": "<p>just before <code>rw [... h]</code> the goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">}))</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">}))</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n</code></pre></div>\n<p>and I have <code>h: ↑(mk (span {↑p})) a = ↑(mk (span {↑p})) b</code></p>",
        "id": 340832939,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678447482
    },
    {
        "content": "<p>the comment at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2757\">!4#2757</a> should solve it though:</p>\n<blockquote>\n<p>For instance, in a statement of an equality a = b... The solution in that case was to provide a type ascription to a to avoid the metavariables.</p>\n</blockquote>\n<p>how would that be done in this case?</p>",
        "id": 340834378,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678447858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> how do I apply a type ascription here to solve the heartbeat problem without setting max heartbeats?</p>",
        "id": 340994041,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678495877
    },
    {
        "content": "<p>The issue I described there may not be the same thing occurring here.</p>",
        "id": 340998069,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678498076
    },
    {
        "content": "<p>In fact I doubt it is.</p>",
        "id": 340998144,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678498103
    },
    {
        "content": "<p>should I just apply the max heartbeat adjustment suggested on the PR or is there a better way out?</p>",
        "id": 340998221,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678498177
    },
    {
        "content": "<p>There are generally other workarounds when dealing with <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a>. You can grep mathlib for 2074 to find some.</p>",
        "id": 340998532,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678498371
    },
    {
        "content": "<p>If you want to see if it is caused by 2074, you can do <code>set_option synthInstance.etaExperiment true</code> before the declaration. If that doesn't fix it then it's probably not 2074.</p>",
        "id": 340998688,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678498503
    },
    {
        "content": "<p>like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 340998817,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678498593
    },
    {
        "content": "<p>but it doesn't seem to change anything</p>",
        "id": 340998853,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678498634
    },
    {
        "content": "<p>Okay, in that case I would move on to something else for now and come back to it. I don't have time to actually pull it up right now.</p>",
        "id": 340998995,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678498748
    },
    {
        "content": "<p>I've adopted the heartbeat fix for now</p>",
        "id": 340999574,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678499185
    },
    {
        "content": "<p>Please add a porting note so it doesn't get merged that way.</p>",
        "id": 341001010,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678500159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Note added. Now what?</p>",
        "id": 341001303,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678500356
    },
    {
        "content": "<p>If there are no other things to be done for the PR, just wait. If there are, keep fixing other things.</p>",
        "id": 341001396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678500404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't get what the two instances are</p>",
        "id": 341125824,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678541855
    },
    {
        "content": "<p>Did you search for \"2074\"?</p>",
        "id": 341126229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542013
    },
    {
        "content": "<p>hold on</p>",
        "id": 341126288,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542035
    },
    {
        "content": "<p>You will find things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: TODO: workaround for lean4#2074</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Ring.toNonAssocRing</span>\n</code></pre></div>",
        "id": 341126294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542038
    },
    {
        "content": "<p>what does that line do?</p>",
        "id": 341126888,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542233
    },
    {
        "content": "<p>It disables that instance, so that typeclass resolution can't use it.</p>",
        "id": 341127045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542272
    },
    {
        "content": "<p>adding the two lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Semiring.toNonAssocSemiring</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">NonAssocRing.toNonAssocSemiring</span>\n</code></pre></div>\n<p>together (and only together) work, but then I get another error where I introduced <code>Nat.cast_mul</code></p>\n<ul>\n<li>adding just one of the two lines still leads to heartbeat error</li>\n</ul>",
        "id": 341127154,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542319
    },
    {
        "content": "<p>What kind of error?</p>",
        "id": 341127383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542383
    },
    {
        "content": "<p>rewrite just fails; <code>↑(p * p ^ (k + 1))</code> is there where <code>Nat.cast_mul</code> expects <code>↑(m * n) = ↑m * ↑n</code></p>",
        "id": 341127491,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542431
    },
    {
        "content": "<p>in the code with the heartbeat expansion this rewrite went through, allowing <code>mul_dvd_mul</code> on the next line to work</p>",
        "id": 341127529,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542456
    },
    {
        "content": "<p>Can you try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>on a line on its own? (So remove it from the current <code>rw</code>)</p>",
        "id": 341127644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542493
    },
    {
        "content": "<p>still fails</p>",
        "id": 341127701,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542519
    },
    {
        "content": "<p>Crazy</p>",
        "id": 341127737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542538
    },
    {
        "content": "<p>I'll load it up in VScode</p>",
        "id": 341127793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542561
    },
    {
        "content": "<p>(the code with the disabled instances has been pushed in place of the heartbeat expansion, by the way)</p>",
        "id": 341127843,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542584
    },
    {
        "content": "<p>ok, I'll pull again</p>",
        "id": 341128180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678542684
    },
    {
        "content": "<p>Watching bors stage, compile and commit the approved PRs is almost hypnotic</p>",
        "id": 341128501,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678542804
    },
    {
        "content": "<p>The problem seems to be the <code>rw [h]</code> on the last line. But I don't understand why.</p>",
        "id": 341131942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678544030
    },
    {
        "content": "<p>I had a discussion with Jireh earlier in this narrow and he asked me to perform the eta-experiment. We determined that this was probably not a 2074 issue</p>",
        "id": 341132230,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678544121
    },
    {
        "content": "<blockquote>\n<p>If you want to see if it is caused by 2074, you can do <code>set_option synthInstance.etaExperiment true</code> before the declaration. If that doesn't fix it then it's probably not 2074.</p>\n</blockquote>",
        "id": 341132323,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678544149
    },
    {
        "content": "<p>Which was why I simply opted for the heartbeat expansion suggested by Lukas</p>",
        "id": 341132652,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678544262
    },
    {
        "content": "<p>I pushed a fix and golf</p>",
        "id": 341133601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678544579
    },
    {
        "content": "<p>hmm... this may contain a lot for me to learn</p>",
        "id": 341133691,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678544605
    },
    {
        "content": "<p>Yeah, I think that besides 2074, there might be some orthogonal issue with quotients. But I don't understand the details.</p>",
        "id": 341133743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678544624
    },
    {
        "content": "<p>I've ported a few quotient files and they have been a royal pain.</p>",
        "id": 341137123,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678545708
    }
]