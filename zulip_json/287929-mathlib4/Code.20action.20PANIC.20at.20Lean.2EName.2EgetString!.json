[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MathLib.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TpVar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">TpVar</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">TpVar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">TpVar</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">TpVar</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"o\">:</span> <span class=\"n\">Tp</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"n\">Tp</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Tp</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Clicking on \"generate explicit pattern matching\", VSCode shows an error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>PANIC at Lean.Name.getString! Lean.Data.Name:22:15: unreachable code has been reached\n</code></pre></div>\n<p>while generating the code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">X</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"k\">Pi</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which contains too many underscores. Is it a problem with implicit variables?</p>",
        "id": 388056741,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693384229
    },
    {
        "content": "<p>I'm using Lean (version 4.0.0-nightly-2023-08-29, commit 4a41e7eb5368, Release), just updated mathlib, and OS X (M1 chip) if that's relevant.</p>",
        "id": 388056941,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1693384302
    },
    {
        "content": "<p>fixed in <a href=\"https://github.com/leanprover/std4/commit/dd3a248c2a22c37644ad21029ecfa38f6a36d813\"><code>std4@dd3a248</code></a></p>",
        "id": 388062416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693386297
    }
]