[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2580\">https://github.com/leanprover-community/mathlib4/pull/2580</a> I got it to compile but:</p>\n<ul>\n<li>I made a <code>def</code> noncomputable since it was using <code>Quiver.Path.Rec</code></li>\n<li>In <code>composePath_id</code>, I had to force a type cast through an alias using <code>id</code>, what should one do in cases like this?</li>\n</ul>",
        "id": 339091324,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677762004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  (discussing here to stay on-topic): I have a preference for the simple solution of <code>noncomputable</code> plus a porting note, versus implementing a new function, but if the latter is considered better, I can do that.</p>",
        "id": 339096163,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677763230
    },
    {
        "content": "<p>The latter is definitely better in general for when things are <code>noncomputable</code> that should obviously be computable (as was the case for Nat and List). I don't know how reasonable it is to consider <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Path#doc\">docs4#Quiver.Path</a> a computable object.</p>\n<p>Note though that it ought to be straighforward to implement the computable <code>rec</code> anyway in the style of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.recC#doc\">docs4#Nat.recC</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.rec_eq_recC#doc\">docs4#Nat.rec_eq_recC</a>; you just write out the obvious equations.</p>",
        "id": 339096606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677763330
    },
    {
        "content": "<p>It looks like morallly Quiver.Path is just a cleverly typed list, so probably it deserves the same treatment as <code>List</code>; but on the other hand, there's no reason it needs to block porting the file</p>",
        "id": 339096964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677763415
    },
    {
        "content": "<p>I guess I shouldn't squeeze such an addition (<code>Quiver.Path.recC</code>) in the present PR?</p>",
        "id": 339097255,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677763476
    },
    {
        "content": "<p>Right; it probably makes sense as prework or as a follow-up</p>",
        "id": 339098556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677763778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Path.recC</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">Path.nil</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">p.cons</span> <span class=\"n\">e</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Path.nil</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Path.cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Quiver.Path.recC</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[csimp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Path.rec_eq_recC</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Path.rec</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Path.recC</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">motive</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Path.recC</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>lean tells me: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">csimp'</span> <span class=\"kd\">theorem</span><span class=\"o\">,</span> <span class=\"n\">only</span> <span class=\"kd\">constant</span> <span class=\"n\">replacement</span> <span class=\"n\">theorems</span> <span class=\"o\">(</span><span class=\"n\">e.g.</span><span class=\"o\">,</span> <span class=\"bp\">`@</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">g</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"n\">are</span> <span class=\"n\">currently</span> <span class=\"n\">supported.</span>\n</code></pre></div>",
        "id": 339100444,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764205
    },
    {
        "content": "<p>You have to have the arguments in exactly the same order for <code>recC</code></p>",
        "id": 339100667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764253
    },
    {
        "content": "<p>I think the universe arguments have to be in the same order too</p>",
        "id": 339100713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764262
    },
    {
        "content": "<p>Ah, I dropped them, let me try</p>",
        "id": 339100778,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764280
    },
    {
        "content": "<p>They might even have to have the same names</p>",
        "id": 339100954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764315
    },
    {
        "content": "<p>not the same name, it works with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Path.recC.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">Path.nil</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">p.cons</span> <span class=\"n\">e</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">b</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Path.nil</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Path.cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Quiver.Path.recC</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339101329,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764408
    },
    {
        "content": "<p>but I had to use new letters because <code>u,v</code> were already universe variables.</p>",
        "id": 339101397,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764428
    },
    {
        "content": "<p>I would guess that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Path.recC.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>works with the ambient universe variables</p>",
        "id": 339101613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764486
    },
    {
        "content": "<p>But trying to replace the use of <code>rec</code> by <code>recC</code> gives me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span> <span class=\"k\">with</span> <span class=\"bp\">`@`</span> <span class=\"n\">modifier</span>\n</code></pre></div>",
        "id": 339101933,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EPathCategory/near/339101613\">said</a>:</p>\n<blockquote>\n<p>I would guess that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Path.recC.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Path</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>works with the ambient universe variables</p>\n</blockquote>\n<p>not in my case it seems</p>",
        "id": 339102192,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764634
    },
    {
        "content": "<p>Where/why are you trying to replace the use of <code>rec</code> with <code>recC</code>?</p>",
        "id": 339102364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764671
    },
    {
        "content": "<p>The purpose of <code>csimp</code> is that it does that for you behind the scenes</p>",
        "id": 339102436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764694
    },
    {
        "content": "<p>In the PathCategory PR</p>",
        "id": 339103052,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764854
    },
    {
        "content": "<p>and it knows that I can drop the <code>noncomputable</code> thing?</p>",
        "id": 339103118,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764872
    },
    {
        "content": "<p>Yes, it should do</p>",
        "id": 339103235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764901
    },
    {
        "content": "<p>Doesn't seem to work for me, but the error might be something I'm doing wrong.</p>",
        "id": 339103355,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764933
    },
    {
        "content": "<p>I'm tempted to push it to the PR so you can have a look, but that would probably not be ideal.</p>",
        "id": 339103440,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677764950
    },
    {
        "content": "<p>You could push to a different branch</p>",
        "id": 339103580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677764991
    },
    {
        "content": "<p>D: that's the limit of my git-fu <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...bottine:mathlib4:investigating_things?expand=1\">https://github.com/leanprover-community/mathlib4/compare/master...bottine:mathlib4:investigating_things?expand=1</a></p>",
        "id": 339104262,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765142
    },
    {
        "content": "<p>Just to check; you restarted lean after editing the other file?</p>",
        "id": 339104404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677765182
    },
    {
        "content": "<p>nope</p>",
        "id": 339104431,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765188
    },
    {
        "content": "<p>ah, it's a compiler thing, so I should restart?</p>",
        "id": 339104458,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765197
    },
    {
        "content": "<p>By default, lean4 does not rebuild downstream files after changes in upstream ones</p>",
        "id": 339104463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677765199
    },
    {
        "content": "<p>I think there's a \"refresh dependencies\" command too</p>",
        "id": 339104510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677765213
    },
    {
        "content": "<p>Works now :)</p>",
        "id": 339104807,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765288
    },
    {
        "content": "<p>Should I open a PR just for the <code>rec</code> thing ?</p>",
        "id": 339104871,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765302
    },
    {
        "content": "<p>Fixes work much better when you actually run the code that contains them ;)</p>",
        "id": 339104942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677765318
    },
    {
        "content": "<p>Haha, yeah, I've just been drilled on \"is there some orange or red anywhere\"</p>",
        "id": 339105315,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677765403
    },
    {
        "content": "<p>Merged, and I updated the present PR. I've got #lint complaining about a lemma not being in simp normal form and provable by other simp lemmas, so I just removed it.</p>",
        "id": 339126100,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677769766
    },
    {
        "content": "<p>The simpNF problem is <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20on.20defs.20.28lean4.232042.29/near/339141703\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simp.20on.20defs.20.28lean4.232042.29/near/339141703</a></p>",
        "id": 339142351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677773317
    },
    {
        "content": "<p>Thanks, I removed the simp attribute, added lemmas and made a note.</p>",
        "id": 339144304,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677773842
    },
    {
        "content": "<p>To what extent is it allowed to shorten proofs when porting?</p>",
        "id": 339259545,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677823549
    },
    {
        "content": "<p>If it is due to technical problems, please record this in a porting note. Otherwise, a bit of golfing is fine. But I encourage you to keep it proof-local, otherwise it becomes a refactor that needs to be backported.</p>",
        "id": 339262884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677825732
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2580\">https://github.com/leanprover-community/mathlib4/pull/2580</a> In the case I'm looking at now, it's stuff where more can be easily moved to term mode, or extraneous <code>dsimp</code>.</p>",
        "id": 339263253,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677825970
    },
    {
        "content": "<p>Which proof specifically are you looking at?</p>",
        "id": 339263353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677826018
    },
    {
        "content": "<p>I think the golf should be uncontroversial. If there's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> chance that someone might complain during review, then I wouldn't do it during the port. You can leave a <code>Porting note: TODO golf</code> instead.</p>",
        "id": 339263469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677826080
    },
    {
        "content": "<p>From:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotientPathsEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">pathsHomRel</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">≌</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n<span class=\"n\">functor</span> <span class=\"o\">:=</span> <span class=\"n\">quotientPathsTo</span> <span class=\"n\">C</span>\n  <span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">toQuotientPaths</span> <span class=\"n\">C</span>\n  <span class=\"n\">unitIso</span> <span class=\"o\">:=</span>\n    <span class=\"n\">NatIso.ofComponents</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">cases</span> <span class=\"n\">X</span>\n        <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span>\n        <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n        <span class=\"n\">cases</span> <span class=\"n\">X</span>\n        <span class=\"n\">cases</span> <span class=\"n\">Y</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Quot.ind</span>\n        <span class=\"n\">intro</span> <span class=\"n\">f</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">Category.id_comp</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Quotient.CompClosure.of</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pathsHomRel</span><span class=\"o\">])</span>\n  <span class=\"n\">counitIso</span> <span class=\"o\">:=</span> <span class=\"n\">NatIso.ofComponents</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iso.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quot.liftOn_mk</span><span class=\"o\">])</span>\n  <span class=\"n\">functor_unitIso_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X</span>\n    <span class=\"n\">cases</span> <span class=\"n\">X</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.quotient_paths_equiv</span> <span class=\"n\">CategoryTheory.quotientPathsEquiv</span>\n</code></pre></div>\n<p>to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotientPathsEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">pathsHomRel</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">≌</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">functor</span> <span class=\"o\">:=</span> <span class=\"n\">quotientPathsTo</span> <span class=\"n\">C</span>\n  <span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">toQuotientPaths</span> <span class=\"n\">C</span>\n  <span class=\"n\">unitIso</span> <span class=\"o\">:=</span>\n    <span class=\"n\">NatIso.ofComponents</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.ind</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Quotient.CompClosure.of</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">Category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">pathsHomRel</span><span class=\"o\">])</span>\n  <span class=\"n\">counitIso</span> <span class=\"o\">:=</span> <span class=\"n\">NatIso.ofComponents</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iso.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quot.liftOn_mk</span><span class=\"o\">])</span>\n  <span class=\"n\">functor_unitIso_comp</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">X</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pathsHomRel</span><span class=\"o\">,</span> <span class=\"n\">pathComposition_obj</span><span class=\"o\">,</span> <span class=\"n\">pathComposition_map</span><span class=\"o\">,</span> <span class=\"n\">Functor.id_obj</span><span class=\"o\">,</span>\n               <span class=\"n\">quotientPathsTo_obj</span><span class=\"o\">,</span> <span class=\"n\">Functor.comp_obj</span><span class=\"o\">,</span> <span class=\"n\">toQuotientPaths_obj_as</span><span class=\"o\">,</span>\n               <span class=\"n\">NatIso.ofComponents_hom_app</span><span class=\"o\">,</span> <span class=\"n\">Iso.refl_hom</span><span class=\"o\">,</span> <span class=\"n\">quotientPathsTo_map</span><span class=\"o\">,</span> <span class=\"n\">Category.comp_id</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.quotient_paths_equiv</span> <span class=\"n\">CategoryTheory.quotientPathsEquiv</span>\n</code></pre></div>\n<p>Granted, it's nothing especially impressive, but long winded <code>intro; case; case; dsimp; simp; …</code> sequences kind of hurt my eyes.</p>",
        "id": 339263642,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677826191
    },
    {
        "content": "<p>Yeah, this golf looks good.</p>",
        "id": 339263752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677826235
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 339263824,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677826278
    },
    {
        "content": "<p>You don't seem to use <code>{X} {Y}</code> in the 2nd branch of <code>NatIso.ofComponents</code>. So you can even leave them out, I guess.</p>",
        "id": 339263831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677826284
    },
    {
        "content": "<p>Mmh, yep, thanks but now I'm confused.</p>",
        "id": 339263959,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677826355
    },
    {
        "content": "<p>Is that a lean4 thing where lambdas can have hidden arguments?</p>",
        "id": 339264074,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677826410
    },
    {
        "content": "<p>yep</p>",
        "id": 339264094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677826427
    },
    {
        "content": "<p>But in this case, there is actually no lambda. The expected type is <code>({X} {Y} (f) -&gt; …)</code> and I'm feeding it a <code>(f -&gt; …)</code> and I guess it auto-inserts <code>X</code> and <code>Y</code>. That's close to the limits of magic for me!</p>",
        "id": 339264500,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677826614
    },
    {
        "content": "<p>that's implicit lambda</p>",
        "id": 339266325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677827590
    },
    {
        "content": "<p>when the goal is <code>\\forall {x}, A x</code> and you write <code>e</code> lean autocompletes that to <code>fun {x} =&gt; e</code></p>",
        "id": 339266459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677827648
    },
    {
        "content": "<p>if you want to suppress the automatic lambda and add it yourself either use <code>@(e)</code> or <code>fun {x} =&gt; e</code></p>",
        "id": 339266590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677827732
    },
    {
        "content": "<p>Ah, thanks, that makes sense.</p>",
        "id": 339282572,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677833341
    }
]