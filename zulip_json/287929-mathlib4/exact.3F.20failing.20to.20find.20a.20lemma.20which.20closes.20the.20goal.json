[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This <code>exact?</code> call fails, but <code>disjoint_inf_sdiff</code> closes the goal directly. Why does <code>exact?</code> struggle here?</p>",
        "id": 401428561,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699644755
    },
    {
        "content": "<p>Probably because of the difference between inf and inter</p>",
        "id": 401430092,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699645710
    },
    {
        "content": "<p>Ah I assumed that it was smart enough to see through that defeq, but I guess in general that's too slow. Cases like this seem unhelpful for beginners...</p>",
        "id": 401430173,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699645783
    },
    {
        "content": "<p>Clearly we should drop the set notation <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 401430288,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699645840
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> whom I talked about this with</p>",
        "id": 401430445,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699645944
    },
    {
        "content": "<p>Or if we're entertaining heretical ideas, use \\cup and \\cap for lattice operations</p>",
        "id": 401431422,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699646480
    },
    {
        "content": "<p>Our idea with Kyle was to kill the set-specific operators and let lattice notation delaborate to it instead.</p>",
        "id": 401431876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699646662
    },
    {
        "content": "<p>Then we'd only have <code>⊔</code> and <code>⊓</code> in the terms, but we would keep <code>∪</code> and <code>∩</code> in the infoview.</p>",
        "id": 401431955,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699646710
    },
    {
        "content": "<p>Thereby making copy and paste unnecessarily dangerous? :-)</p>",
        "id": 401451856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699661672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failing.20to.20find.20a.20lemma.20which.20closes.20the.20goal/near/401430173\">said</a>:</p>\n<blockquote>\n<p>Ah I assumed that it was smart enough to see through that defeq, but I guess in general that's too slow. Cases like this seem unhelpful for beginners...</p>\n</blockquote>\n<p>Now that <code>exact?</code> is so much faster than in Lean 3, it might be possible to let it see though more defeq. Someone should try!</p>",
        "id": 401451946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699661729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/exact.3F.20failing.20to.20find.20a.20lemma.20which.20closes.20the.20goal/near/401451856\">said</a>:</p>\n<blockquote>\n<p>Thereby making copy and paste unnecessarily dangerous? :-)</p>\n</blockquote>\n<p>How so? That would only be a problem if you copy-pasted a <code>Set</code> expression and used it as a <code>Lattice</code> expression (which is already a problem currently). You will still be able to input code  using <code>∪</code>/<code>∩</code>/ It just won't show up differently from <code>⊔</code>/<code>⊓</code> in the <em>term</em>.</p>",
        "id": 401488621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699687602
    }
]