[
    {
        "content": "<p>Not sure where I should ask this. Here's an MWE of something I'm trying to prove, I don't know how to get <code>WitBot</code>'s arithmetic instances to play nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">withBotManipulation</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">val'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396581939,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1697238889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s contain all imports ;-)</p>",
        "id": 396582241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697239204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">H1</span> <span class=\"c1\">-- this line not necessary but proof becomes unreadable without it</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H1</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">withBotManipulation</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">val'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">val'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">H1</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 396582813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697239692
    },
    {
        "content": "<p>Which <code>some</code> is that?</p>",
        "id": 396582962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697239820
    },
    {
        "content": "<p>Aha, super, <code>norm_cast</code> was indeed what I was looking for! Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !</p>",
        "id": 396583011,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1697239882
    },
    {
        "content": "<p>It should be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithBot.some#doc\">docs#WithBot.some</a>, but I suspect it's actually Option.some</p>",
        "id": 396583130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697239967
    },
    {
        "content": "<p>I just checked; it's the wrong <code>some</code>, and that's going to make proving things annoying</p>",
        "id": 396583285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697240077
    }
]