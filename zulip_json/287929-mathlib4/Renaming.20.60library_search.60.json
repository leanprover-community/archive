[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wrote to me saying</p>\n<blockquote>\n<p>And also it's really awfully long to type so we told students to start all their files with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"ls\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">library_search</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So... shall I rename library_search?</p>",
        "id": 364394790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686171798
    },
    {
        "content": "<p>/poll Possible names for <code>library_search</code></p>",
        "id": 364394820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686171813
    },
    {
        "content": "<p>what about <code>apply?</code> (and <code>have?</code> and <code>rewrite?</code>), in the spirit of using <code>*?</code> for try-this-like behavior?</p>",
        "id": 364395643,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686172107
    },
    {
        "content": "<p>just thinking out loud: <code>ls</code> is confusing unless you know what it's short for, doubly so because in the shell it means \"list\". I guess that's also true of <code>rw</code>, but I feel like there's less options to expand <code>rw</code> into a meaningful word.</p>",
        "id": 364395759,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686172173
    },
    {
        "content": "<p>One key thing though: <code>library_search</code> doesn't show appear in finished code, so there is no sacrifice for readability if we make it ultra short like <code>ls</code>. But <code>ls</code> could easily be a variable name. To appease my thoughts above, I've added <code>lib</code> to the list of choices. It is:</p>\n<ul>\n<li>short and quick to type</li>\n<li>indicative of the expanded word</li>\n<li>not so likely to be a variable in context (I guess maybe this doesn't matter from a parsing perspective though.)</li>\n</ul>",
        "id": 364395937,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686172243
    },
    {
        "content": "<p><code>search</code> is proving popular, but I worry that it's just cause y'all are used to using <code>library_search</code>, and haven't got in the habit of using the also useful search tools <code>propose</code> and <code>rewrites</code>. :-)</p>",
        "id": 364396690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686172529
    },
    {
        "content": "<p>Does <code>library_search</code> ever actually produce <code>apply foo</code>?</p>",
        "id": 364401228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686174460
    },
    {
        "content": "<p>Doesn't it produce <code>exact foo</code>, suggesting <code>exact?</code> would be better than <code>apply?</code>?</p>",
        "id": 364401245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686174478
    },
    {
        "content": "<p>Well it uses either exact or refine via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.TryThis.addExactSuggestion#doc\">docs4#Std.Tactic.TryThis.addExactSuggestion</a></p>",
        "id": 364401604,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1686174650
    },
    {
        "content": "<p>I agree it is a little strange given the \"Try this:\" output never says <code>apply</code>. I would prefer <code>apply?</code> over <code>exact?</code>, but only mildly. (And perhaps only because I already know too much about how it works internally -- try <code>apply</code>ing everything, then clean up the mess if possible.) In favor of <code>apply</code> is that everyone knows that it is the basic \"backwards reasoning tactic\", not necessarily a finishing tactic. That is, while <code>exact</code> is only for finishing, and <code>refine</code> is not for finishing, <code>apply</code> can be either.</p>",
        "id": 364416437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686182795
    },
    {
        "content": "<p>One disadvantage with the <code>apply?</code> approach is that we already use <code>?</code> like this for \"execute this command, but show more information what you did\" (like <code>simp?</code>/<code>tidy?</code>/<code>@[simps?]</code>/<code>@[to_additive?]</code>/...) and this is a very different use.</p>",
        "id": 364554608,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686229332
    },
    {
        "content": "<p>An option for the name could be <code>close?</code>, with the ambiguity of \"closing the goal/are we close to the end\".</p>",
        "id": 364560116,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686230439
    },
    {
        "content": "<p>Could call it \"finish\"</p>",
        "id": 364561022,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686230638
    },
    {
        "content": "<p>Or \"omega\"</p>",
        "id": 364561092,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686230646
    },
    {
        "content": "<p>those are both tactics already, with significantly different behaviors</p>",
        "id": 364631100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686244650
    },
    {
        "content": "<p>TBH naming a tactic as essentially \"thing that closes the goal\" is a terribly vague description</p>",
        "id": 364631245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686244683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20.60library_search.60/near/364554608\">said</a>:</p>\n<blockquote>\n<p>One disadvantage with the <code>apply?</code> approach is that we already use <code>?</code> like this for \"execute this command, but show more information what you did\" (like <code>simp?</code>/<code>tidy?</code>/<code>@[simps?]</code>/<code>@[to_additive?]</code>/...) and this is a very different use.</p>\n</blockquote>\n<p>I think “show me how to do this” and “show me what you’re doing when you do this” are sufficiently close notions (since the latter is essentially still “show me how to do this”, just with the fact that it also gets done) such that these both are what you’d intuitively expect <code>?</code> to mean given the context.</p>\n<p>And, crucially, they’re in complementary settings, so that <code>?</code> always means the only thing it intuitively could. That is, I don’t think it’s possible for these uses to overlap—you’ll never want to see more information on what happens <em>and</em> see how to replace an incomplete command.</p>",
        "id": 364641532,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686247467
    },
    {
        "content": "<p>I think that either way, we need a standard way to tell lean “show me how to do this”/“try completing this yourself”; I think e.g. <code>rw?</code> and <code>have?</code> are <em>so</em> much better than <code>rewrites</code> and <code>propose</code> because of their closer relationship to existing names and intuitive meaning.</p>\n<p>(I don’t think I’d guess that nounifying and pluralizing an imperative verb would get me a search; besides, <code>rewrites</code> looks like a present tense indicative verb, which introduces a little friction.)</p>\n<p>Another option could be <code>rw...</code>, I guess? <code>rw?</code> seems the most natural to me, though, and what I would expect given that the user is asking a question of lean.</p>",
        "id": 364648427,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686249317
    },
    {
        "content": "<p>I would advise against <code>rw?</code> specifically because there has been this idea going round of a tactic that finds possible things to rewrite in the goal, and this not yet existing tactic would most naturally be called <code>rw?</code>.</p>",
        "id": 364656174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686251596
    },
    {
        "content": "<p>Wait, what’s the difference between that and <code>rewrites</code>?</p>",
        "id": 364656569,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686251724
    },
    {
        "content": "<p>(Also if it’s not clear I’m talking about <code>rw?</code> as a renaming of <code>rewrites</code> just as an example; <code>library_search</code> would presumably turn into an analogous modification of <code>apply</code> or <code>exact</code>)</p>",
        "id": 364658058,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686252133
    },
    {
        "content": "<p>Ahah that tactic was already implemented! Can you tell I'm not following? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 364666149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686254436
    },
    {
        "content": "<p><code>rw?</code>, <code>have?</code>, and <code>apply?</code> as a combo do look really intuitive!<br>\n(as long as they really do stuff one could achieve with the corresponding tactics if one knew the correct lemmas to use)</p>\n<p>that being said, for me <code>apply</code> and <code>refine</code> are also really close, I dont think it would be confusing if <code>apply?</code> suggests a <code>refine</code> term</p>",
        "id": 364676125,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1686257511
    },
    {
        "content": "<p>I think if we make <code>apply?</code> an alias for <code>library_search</code>, we should do the same thing for <code>refine?</code></p>",
        "id": 364690790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686263406
    },
    {
        "content": "<p>We could keep <code>exact?</code> for \"library search but no side goals allowed\"</p>",
        "id": 364690829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686263423
    },
    {
        "content": "<p>(which I think was what library_search always meant in lean 3, but I get the feeling it no longer does in Lean 4?)</p>",
        "id": 364690873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686263458
    },
    {
        "content": "<p>Yes, the Lean 3 version was a <code>exact?</code> and the <code>refine?</code> one was called <code>suggest</code>. They got merged in Lean 4.</p>",
        "id": 364690949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686263503
    },
    {
        "content": "<p>note there is now a PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4885\">!4#4885</a></p>",
        "id": 366178951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686748394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20.60library_search.60/near/364690949\">said</a>:</p>\n<blockquote>\n<p>Yes, the Lean 3 version was a <code>exact?</code> and the <code>refine?</code> one was called <code>suggest</code>. They got merged in Lean 4.</p>\n</blockquote>\n<p>Do you have an example in mind where the <code>refine?</code> one works? The web editor seems to just crash for me.</p>",
        "id": 366180450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686748718
    },
    {
        "content": "<p>Should we change the name of the import from <code>Mathlib.Tactic.LibrarySearch</code> now that that's not the preferred name of the tactic?<br>\nWeirdly <code>Mathlib.Tactic.Apply?</code>is valid to Lean, but the filename it searches for is illegal on windows.</p>",
        "id": 366193562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686751170
    },
    {
        "content": "<p>I could have sworn that issue has already been tackled in at least one other tactic... there is <code>SimpTrace.lean</code> which supplies the <code>simp?</code> tactic</p>",
        "id": 366250905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686762271
    },
    {
        "content": "<p>but maybe <code>ApplyTrace.lean</code> doesn't work in this case because it is using <code>?</code> very liberally</p>",
        "id": 366251057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686762307
    },
    {
        "content": "<p>Perhaps you were thinking of <code>Tactic.Clear!</code>? (I remember because it broke the Nix setup)</p>",
        "id": 366277628,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686768748
    },
    {
        "content": "<p>I suppose that's an example of <em>not</em> solving the problem, and also probably my recollection</p>",
        "id": 366287623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686771490
    },
    {
        "content": "<p>I think we should just rename it, it's nice if lean can handle such files but for a project naming convention I would be inclined to stick to a very restricted character set for file names because of the myriad other ways files get processed</p>",
        "id": 366287658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686771500
    },
    {
        "content": "<p>Notice that not only did I leave the file names the same, I left the \"plumbing\" version of the tactics with their original names as well.</p>",
        "id": 366332881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686789791
    }
]