[
    {
        "content": "<p>Why do we have <code>headI</code> and <code>getLastI</code> in <code>Mathlib.Init.Data.List.Basic</code>, instead of just using <code>head!</code> and <code>getLast!</code>?</p>",
        "id": 346132312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680337873
    },
    {
        "content": "<p>I see these as having mostly disjoint uses:</p>\n<ul>\n<li><code>head!</code> is for programming in a situation where you know or think you know that your list is nonempty. If your \"knowledge\" turns out to be incorrect, you would prefer to be notified by a panic rather than continuing with garbage data. (Lean panics don't always work how one would expect, but hopefully that can be fixed in the future without too much cost in the runtime system.)</li>\n<li><code>headI</code> is for mathematical definitions where you cannot just panic, you don't necessarily know that the list is nonempty, and either the default value is appropriate or you don't care about returning a garbage value. The function is regarded as total so if in some situation you want to evaluate it, you want it to not panic even in the empty list case.</li>\n</ul>\n<p>In particular, even though the logic thinks they are interchangeable, from a pragmatic point of view of running programs they are not.</p>",
        "id": 346138928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680340237
    },
    {
        "content": "<p>Basically <code>head! = headI</code> is kind of a \"garbage fact\". <code>headI</code> is supposed to be total; <code>head!</code> is not, but there's no way to fit it into Lean's logic without turning it into <code>headI</code>.</p>",
        "id": 346139915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680340586
    },
    {
        "content": "<p>Great, thanks. I guess we should eventually have doc-strings that explain this. :-)</p>",
        "id": 346140130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680340675
    }
]