[
    {
        "content": "<p>I was looking for a statically sized Array type in the std/mathlib and came upon <a href=\"https://github.com/leanprover-community/mathlib4/blob/c6979569edc545f999b82d8a833b190c918aec2e//Mathlib/Data/Vector.lean#L22-L23\"><code>Vector</code></a> and was surprised to see it's defined as a subtype of <code>List</code>. Not being all that familiar with Lean, I was expecting it to either be defined inductively (to maybe make some proofs simpler?) or as a subtype of Array (for a generally more performant CPU representation). Is there any advantage to it being defined the way it is?</p>",
        "id": 403246560,
        "sender_full_name": "Aiken Cairncross",
        "timestamp": 1700514906
    },
    {
        "content": "<p>This definition is a bit simpler for proofs than the inductive type, because it means you can prove the theorem about <code>List</code> and lift it to <code>Vector</code></p>",
        "id": 403250278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700516568
    },
    {
        "content": "<p>Hopefully eventually we have custom eliminators a.k.a. pattern synonyms and you can freely switch between the two worlds as is most convenient.</p>",
        "id": 403252120,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700517575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"665938\">@Aiken Cairncross</span> for some stuff, people also use tuples, i.e. Fin n -&gt; YourTypeHere, though I'm not sure they have great performance.</p>",
        "id": 403352875,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700563432
    },
    {
        "content": "<p><code>Fin n -&gt; Typ</code> is not a good runtime representation at all and should probably only be used for proof stuff.</p>",
        "id": 403356986,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700564793
    },
    {
        "content": "<p>It's pretty reasonable as a way to <em>consume</em> tuples, as it lets you pass <code>Array.get</code> which should be just as efficient as passing an array</p>",
        "id": 403357999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700565148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20Vector.20is.20defined.20as.20a.20List.20subtype/near/403356986\">said</a>:</p>\n<blockquote>\n<p><code>Fin n -&gt; Typ</code> is not a good runtime representation at all and should probably only be used for proof stuff.</p>\n</blockquote>\n<p>Would that I had thought about this without writing my thing that currently uses tuples. Though in my defense they are the easiest way to use a permutation on something.</p>",
        "id": 403358175,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700565215
    },
    {
        "content": "<p>Not that I guess permutations are that nice computationally.</p>",
        "id": 403358306,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700565245
    }
]