[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3280\">!4#3280</a> 5 errors remain in this file:</p>\n<ul>\n<li>2 <code>continuity</code> failures</li>\n<li>2 instance failures</li>\n<li>1 deterministic timeout</li>\n</ul>\n<p>Would really appreciate continuing the work on this file!</p>",
        "id": 347694688,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680882328
    },
    {
        "content": "<p>It looks like the <code>continuity</code> failures are (partially) due to order of attribute application. Eg </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (attr := continuity) something]</span>\n</code></pre></div>\n<p>look like we get the additive version in the rules set for continuity<br>\nvs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[continuity, to_additive something]</span>\n</code></pre></div>\n<p>where we do not. For example <code>continuous_norm</code> is not currently in the rules set. This goes beyond this particular example and should probably be taken care of globally before continuing with this PR. Assuming my understanding of the situation is correct.</p>",
        "id": 347715952,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680889499
    },
    {
        "content": "<p>The other fixes should be incoming momentarily.</p>",
        "id": 347716035,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680889530
    },
    {
        "content": "<p>I suspect it's easier to just add missing <code>continuity</code> tags whenever we find them instead of trying to fix it all at once.</p>",
        "id": 347716992,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1680889826
    },
    {
        "content": "<p>Can’t we do a global search and replace taking the latter to former? My <code>awk</code>-foo is non-existent (or is it <code>sed</code>)?</p>",
        "id": 347719893,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680890826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Analysis.2ENormedSpace.2EBasic.20!4.233280/near/347716035\">said</a>:</p>\n<blockquote>\n<p>The other fixes should be incoming momentarily.</p>\n</blockquote>\n<p>Hmm. One will be. The instance failures are the same and are being more annoying.</p>",
        "id": 347720045,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680890884
    },
    {
        "content": "<p>We should definitely do a standalone first pass at catching all the obviously missing continuity lemmas before continuing with this porting PR</p>",
        "id": 347720204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890957
    },
    {
        "content": "<p>Ah. I see some confusion. They are not “missing” in that they are missing the tag altogether. They are “missing” in that the tag is out of order. We don’t need to find anything that doesn’t already start with <code>@[continuity, to_additive…]</code></p>",
        "id": 347721704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680891510
    },
    {
        "content": "<p>(There are some other things that need to be tagged that are not but those I agree should be added case by case)</p>",
        "id": 347721809,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680891553
    },
    {
        "content": "<p>I think probably every <code>to_additive</code> not immediately following a <code>@[</code> is probably a mistake</p>",
        "id": 347722094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680891643
    },
    {
        "content": "<p>The only possible exception I can think of is <code>reducible</code> after seeing some weirdness there with <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>; there we found that <code>@[reducible, to_additive (attr := reducible)]</code> seemed to behave differently to all the other options.</p>",
        "id": 347722338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680891726
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>)</p>",
        "id": 347722371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680891741
    },
    {
        "content": "<p>Oh wait. There might be only two instances of this. There were next to each in the file I jumped into so I assumed it was more prevalent</p>",
        "id": 347723349,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680892100
    },
    {
        "content": "<p>Grepping only gives <code>continuous_norm’</code> and <code>continuous_nnnorm’</code></p>",
        "id": 347723470,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680892161
    },
    {
        "content": "<p>I flush regex from my mind after each use so I didn’t do the more general pattern <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggests</p>",
        "id": 347723592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680892204
    },
    {
        "content": "<p>Hmm, I just realized that the <code>continuity</code> tag doesn't show up in the mathlib4 docs like it did for mathlib3. I see your point now.</p>",
        "id": 347729950,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1680894767
    },
    {
        "content": "<p>I searched for <code>continuous_norm</code> in the docs and was under the impression that the tag was missing altogether.</p>",
        "id": 347730010,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1680894809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span></p>\n<blockquote>\n<p>Continuity is a still a little fiddly. Further diagnostics are a good idea before merging</p>\n</blockquote>\n<p>How are we going to collect diagnostics?</p>",
        "id": 347778572,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680920772
    },
    {
        "content": "<p>There are two issues that I noticed:</p>\n<ul>\n<li>editor misbehaves around continuity (eg hangs) </li>\n<li>since everything is currently marked a safe rule in <code>aesop</code> it gets itself into some pickles. For example, <code>npowRec</code> gets exposed when proving <code>f^2</code> is continuous or <code>Inv.inv</code> when <code>f^-1</code>. The first can be handled by give a normalisation rule. The latter is more problematic. These examples stem from safe applications of <code>comp</code> which gets applied before the more appropriate rules. I tried to make it unsafe but that broke a good deal more. </li>\n</ul>\n<p>I've made continuity work as much as possible with quick fixes and included the tactic terms that close the goals as comments.</p>",
        "id": 347848629,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680953303
    },
    {
        "content": "<p>I am guessing these problems will persist later in analysis (though people more intimately familiar with the library would know better) so getting good continuity behavior will save time in the long run</p>",
        "id": 347848866,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680953398
    },
    {
        "content": "<p>Fixing issues with <code>continuity</code> is not hard, but fixing <code>continuity</code> is more involved and I don't think that it is just a matter of finding the right aesop rules for various lemmas, but it will probably need some support from <code>aesop</code> itself.</p>",
        "id": 348187115,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681124390
    },
    {
        "content": "<p>I'll try to see whether adding a penalty to <code>Continuous.comp'</code> fixes some of the issues</p>",
        "id": 348189554,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681125179
    },
    {
        "content": "<p>Maybe I'll try a clean implementation of <code>continuity</code> not using <code>aesop</code> at some point...? It feels like the sort of thing that <code>solve_by_elim</code> with its new flow-control handles should be able to manage fine.</p>",
        "id": 348191335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681125795
    },
    {
        "content": "<p>One of the big advantages of <code>aesop</code> is that it makes it very easy to create more tactics that are very similar in spirit. When proving the Taylor theorem I was very annoyed by the fact that there was no <code>continuity</code> for <code>continuous_on</code> and the lack of a <code>smoothness</code> tactic has been discussed here as well.</p>",
        "id": 348195729,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681127117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Analysis.2ENormedSpace.2EBasic.20!4.233280/near/347848629\">said</a>:</p>\n<blockquote>\n<p>There are two issues that I noticed:</p>\n<ul>\n<li>editor misbehaves around continuity (eg hangs) </li>\n<li>since everything is currently marked a safe rule in <code>aesop</code> it gets itself into some pickles. For example, <code>npowRec</code> gets exposed when proving <code>f^2</code> is continuous or <code>Inv.inv</code> when <code>f^-1</code>. The first can be handled by give a normalisation rule. The latter is more problematic. These examples stem from safe applications of <code>comp</code> which gets applied before the more appropriate rules. I tried to make it unsafe but that broke a good deal more. </li>\n</ul>\n<p>I've made continuity work as much as possible with quick fixes and included the tactic terms that close the goals as comments.</p>\n</blockquote>\n<p>Was your 'the editor misbehaves' problem that the linter was saying that tactics were never executed? that was what I was seeing when playing around with in the file and the answer was that <code>continuity</code> was proving the continuity of the inverse without any help.</p>",
        "id": 348202836,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681129248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Analysis.2ENormedSpace.2EBasic.20!4.233280/near/348202836\">said</a>:</p>\n<blockquote>\n<p><code>continuity</code> was proving the continuity of the inverse without any help.</p>\n</blockquote>\n<p>I still get an error from <code>aesop</code> here. Manually putting in <code>continuous_invFun :=  by continuity</code> also does not work. Odd.</p>",
        "id": 348211671,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681131747
    },
    {
        "content": "<p>Mostly my editor failed to update reliably and showed old state.</p>",
        "id": 348211882,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681131827
    },
    {
        "content": "<p>I am quite confused, I was getting no errors in VSCode, but the CI run failed.</p>",
        "id": 348212459,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681131992
    },
    {
        "content": "<p>(I am at the moment compiling some modifications of <code>continuity</code>, maybe that magically solves the issue <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> )</p>",
        "id": 348212774,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1681132066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Analysis.2ENormedSpace.2EBasic.20!4.233280/near/348195729\">said</a>:</p>\n<blockquote>\n<p>One of the big advantages of <code>aesop</code> is that it makes it very easy to create more tactics that are very similar in spirit. When proving the Taylor theorem I was very annoyed by the fact that there was no <code>continuity</code> for <code>continuous_on</code> and the lack of a <code>smoothness</code> tactic has been discussed here as well.</p>\n</blockquote>\n<p>I don't think this need be an obstacle. Heather Macbeth has written several nice frontends for <code>solve_by_elim</code> as teaching tactics, and we should be able to make a \"generic\" version of <code>continuity</code> that is customisable for different goals.</p>",
        "id": 348562643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681247438
    }
]