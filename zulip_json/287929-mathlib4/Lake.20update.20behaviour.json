[
    {
        "content": "<p>The following happened today:</p>\n<ol>\n<li>I have a (verification) project that depends on mathlib4. </li>\n<li>I run <code>lake update</code> inside the project directory.</li>\n<li>lake downloads new versions of mathlib, Qq, Aesop, and Std. </li>\n<li>The lean-toolchain files of these deps are last week's nightly.</li>\n<li>But the lean-toolchain of the project itself remained unchanged. I manually updated <code>lean-toolchain</code> </li>\n<li>I performed <code>lake exe cache get!</code> followed by <code>lake build</code>, which worked  </li>\n</ol>\n<p>The question is about step 5. This issue has come up before, but does this behaviour of <code>lake update</code> make sense? Wouldn't it be better if <code>lake update</code> also copy pasted the toolchain and downloaded it, along with the dependencies?</p>",
        "id": 356974702,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683636989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour/near/356974702\">said</a>:</p>\n<blockquote>\n<ol start=\"4\">\n<li>The lean-toolchain files of these deps are last week's nightly.</li>\n</ol>\n</blockquote>\n<p>If only it was that simple:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>rg<span class=\"w\"> </span>.<span class=\"w\"> </span>**/lean-toolchain\n<span class=\"go\">lean-toolchain</span>\n<span class=\"go\">1:leanprover/lean4:nightly-2023-05-06</span>\n\n<span class=\"go\">lake-packages/std/lean-toolchain</span>\n<span class=\"go\">1:leanprover/lean4:nightly-2023-04-20</span>\n\n<span class=\"go\">lake-packages/aesop/lean-toolchain</span>\n<span class=\"go\">1:leanprover/lean4:nightly-2023-04-11</span>\n\n<span class=\"go\">lake-packages/Qq/lean-toolchain</span>\n<span class=\"go\">1:leanprover/lean4:nightly-2023-03-17</span>\n</code></pre></div>\n<p>What should happen now? Should Lake ignore all but the toolchains of direct dependencies? What if there are multiple direct dependencies that disagree?</p>",
        "id": 356978308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683637662
    },
    {
        "content": "<p>That's a fair point. the toolchains of std and Qq  are different for me too. So I tried switching to the toolchain of Std. Funnily enough after <code>lake exe cache get!</code>, <code>lake build</code> worked with no errors. But vscode did give me errors.</p>",
        "id": 356981610,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683638340
    },
    {
        "content": "<p>So either mathlib has a stronger requirement or the latest of the four toolchains is needed. This is a bit confusing.</p>",
        "id": 356981797,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683638389
    },
    {
        "content": "<p>or somehow the vscode extension behaves differently</p>",
        "id": 356981912,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683638406
    },
    {
        "content": "<p>Either way, at least for mathlib projects, the successfully working heuristic seems to be \"match lean-toolchain with mathlib's lean-toolchain\"</p>",
        "id": 356982705,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683638548
    },
    {
        "content": "<p>Perhaps we could have a <code>lake update math</code> subcommand?</p>",
        "id": 356982931,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683638601
    },
    {
        "content": "<p>Have we considered doing something similar to Haskell stack?</p>",
        "id": 356987416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683639489
    },
    {
        "content": "<p>One simple approach would be to add a Lakefile flag \"keep toolchain in sync with this dependency\" and have <code>init math</code> set this flag for mathlib4, i.e. a sticky opt-in</p>",
        "id": 356990371,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683640018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour/near/356990371\">said</a>:</p>\n<blockquote>\n<p>One simple approach would be to add a Lakefile flag \"keep toolchain in sync with this dependency\" and have <code>init math</code> set this flag for mathlib4, i.e. a sticky opt-in</p>\n</blockquote>\n<p>This would be nice. </p>\n<p>I am still curious why <code>lake build</code> worked as it did but the vscode extension threw errors.</p>",
        "id": 356995763,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683641063
    }
]