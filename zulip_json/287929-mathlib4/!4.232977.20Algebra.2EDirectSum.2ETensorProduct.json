[
    {
        "content": "<p>I've spent more than an hour on a single declaration in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2977\">!4#2977</a> (<a href=\"https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/direct_sum/tensor_product\">port-status#linear_algebra/direct_sum/tensor_product</a>) and am having a very bad tmie</p>",
        "id": 345742488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680196765
    },
    {
        "content": "<p>The proof takes on the order of minutes before spitting out an error, and about every other change the syntax highlighting breaks and I have to restart the lean server</p>",
        "id": 345742739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680196833
    },
    {
        "content": "<p>Example of broken highlighting:</p>\n<p><a href=\"/user_uploads/3121/QvFJ_-1NMtOqt_OKfZGOd8aw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QvFJ_-1NMtOqt_OKfZGOd8aw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QvFJ_-1NMtOqt_OKfZGOd8aw/image.png\"></a></div>",
        "id": 345743290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680196994
    },
    {
        "content": "<p>The error message there is nonsensical and refers to <code>unknown constant 'DirectSum.toModulR'</code>, which feels as though it's reporting an error about the mangled code that it's highlighting, not the code that is actually in the editor</p>",
        "id": 345743496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197045
    },
    {
        "content": "<p>One hack I found when Lean gets into this state is to go up to the theorem or definition you're working on and just change theorem to <code>theoremq</code> or definition to <code>defq</code> and then change it back. It's quicker than recompiling the entire file and seems to fix the syntax highlighting issue.</p>",
        "id": 345743822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197137
    },
    {
        "content": "<p>That doesn't work for me here</p>",
        "id": 345745266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197470
    },
    {
        "content": "<p>The orange bars jump around, but the syntax remains broken</p>",
        "id": 345745327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197485
    },
    {
        "content": "<p>I'm about to get on the tube <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> but I don't want to duplicate work. Is it safe for me to play around with this (and possibly get nowhere)?</p>",
        "id": 345746171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197682
    },
    {
        "content": "<p>I might keep fighting it, but absolutely</p>",
        "id": 345746267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197710
    },
    {
        "content": "<p>I'd like to know if the bizarre editing experience is something weird with gitpod or something you can reproduce</p>",
        "id": 345746359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680197731
    },
    {
        "content": "<p>ain't no gitpod underground. I'll get back to you in an hour.</p>",
        "id": 345746476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680197762
    },
    {
        "content": "<p>Is this working now?</p>",
        "id": 345752325,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680199390
    },
    {
        "content": "<p>It does take a little bit to check but the proof you pushed for this result seems to work ok</p>",
        "id": 345752849,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680199553
    },
    {
        "content": "<p>I was able to get it to work just now</p>",
        "id": 345752925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680199566
    },
    {
        "content": "<p>But I had to add a nasty number of <code>(_)</code>s</p>",
        "id": 345752960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680199578
    },
    {
        "content": "<p>Does adding <code>set_option profiler true</code> slow things down considerably?</p>",
        "id": 345755373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680200306
    },
    {
        "content": "<p>A bit, yes. Tracing <code>isDefEq</code> also seems to to drag. I’ve had to bump heart beats after adding these</p>",
        "id": 345755607,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680200397
    },
    {
        "content": "<p>Ah, my lean server had crashed, but the orange bars stick around so it's hard to tell. The result is <code>compilation of TensorProduct.directSum took 47.7s</code>.</p>",
        "id": 345756326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680200631
    },
    {
        "content": "<p>Better than a lot of files</p>",
        "id": 345759438,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680201450
    },
    {
        "content": "<p>So I got it working too. I didn't experience the desyncing error reporting but perhaps that was a problem with the earlier long proof which was working when I pulled. Here's some diffs between my solution and what's on github:</p>\n<p>You said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">repeat'</span>\n      <span class=\"n\">first</span>\n        <span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">compr₂_apply</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id_apply</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mk_apply</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">DirectSum.toModule_lof</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_tmul</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift.tmul</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">flip_apply</span><span class=\"o\">]</span><span class=\"bp\">|</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">curry_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">compr₂_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">id_apply</span><span class=\"o\">,</span> <span class=\"n\">mk_apply</span><span class=\"o\">,</span> <span class=\"n\">DirectSum.toModule_lof</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">lift.tmul</span><span class=\"o\">,</span> <span class=\"n\">flip_apply</span><span class=\"o\">,</span> <span class=\"n\">curry_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>because it looks less odd. And you said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">directSumLeft_tmul_lof</span><span class=\"o\">,</span> <span class=\"n\">Dfinsupp.mapRange.linearEquiv_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Dfinsupp.mapRange_single</span>\n</code></pre></div>\n<p>but I said</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">directSumLeft_tmul_lof</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Dfinsupp.mapRange_single</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345762738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680202510
    },
    {
        "content": "<p>which makes me wonder if Lean 3 <code>exact</code> was able to solve  an implicit<code>fun _ =&gt; rfl</code> before.</p>",
        "id": 345762920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680202573
    },
    {
        "content": "<p>There are other records of weird syntax errors on Zulip. I don’t know if a single culprit has been identified. </p>\n<p>Did you try outlining the fields of <code>directSum</code> to speed it up?</p>",
        "id": 345764811,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680203081
    },
    {
        "content": "<p>What do you mean by outlining?</p>",
        "id": 345764840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680203092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the <code>repeat</code> <code>first</code> stuff was from mathport, your proof sounds much beter</p>",
        "id": 345764923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680203116
    },
    {
        "content": "<p>Construct each field in a separate declaration</p>",
        "id": 345764927,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680203116
    },
    {
        "content": "<p>Feel free to push your tidier proofs</p>",
        "id": 345765254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680203207
    },
    {
        "content": "<p>I removed the <code>repeat</code> proof because in my experience proofs like that can be super slow and I wondered if this was causing the slowdown</p>",
        "id": 345779798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680207887
    },
    {
        "content": "<p>But it was still slow afterwards</p>",
        "id": 345779821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680207896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232977.20Algebra.2EDirectSum.2ETensorProduct/near/345765254\">said</a>:</p>\n<blockquote>\n<p>Feel free to push your tidier proofs</p>\n</blockquote>\n<p>Just comments from the peanut gallery. Are we happy with the time?</p>",
        "id": 345781369,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680208377
    }
]