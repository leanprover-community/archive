[
    {
        "content": "<p>Last year when the interface to <code>linear_combination</code> was being discussed -- in particular the idea of embedding equality proofs into expressions -- <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> suggested a general interface for creating congruence lemmas, and I made <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313979.20arbitrary.20proof.20terms.20in.20.60linear_combination.60/near/281627870\">a hacky Lean 3 implementation</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> suggested a couple weeks ago that it might be nice to investigate this again, and I got a term elaborator working. It just has to wire up a couple things (the usual term elaborator and the simplifier) without needing to write custom syntax walkers or congruence generators.</p>",
        "id": 369254333,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687635639
    },
    {
        "content": "<p>You write <code>congr% expression</code> where the expression can include <code>c(equality proof)</code> terms.</p>\n<p>Simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>It works under binders:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And since it uses the simp machinery, you get congruences for delicate dependent types as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That's not something you can get with just <code>congr_arg</code> and <code>congr_fun</code>.</p>",
        "id": 369254352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687635653
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>prototype</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Congr</span><span class=\"bp\">!</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`congr% expr` generates an congruence where each `c(h)` subexpression</span>\n<span class=\"sd\">indicates a hole where `h : a = b` indicates that on the left-hand side</span>\n<span class=\"sd\">`a` is substituted in and on the right-hand side `b` is.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">termCongr</span><span class=\"o\">)</span> <span class=\"s2\">\"congr% \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">`c(h)` is a hole in a `congr%` expression, where `h` is an equality or iff.</span>\n<span class=\"sd\">-/</span>\n<span class=\"c1\">-- Copying the `paren` parser but with `c` out front.</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">termCongrEq</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"c(\"</span> <span class=\"n\">withoutPosition</span><span class=\"o\">(</span><span class=\"n\">withoutForbidden</span><span class=\"o\">(</span><span class=\"n\">ppDedentIfGrouped</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)))</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"invalid occurrence of `c(...)` notation, it must appear in a `congr%` expression\"</span>\n\n<span class=\"sd\">/-- Extracts the LHS of an equality while holding onto the equality. -/</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">c_lhs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">c_lhs_eq_lhs</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c_lhs</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">c_lhs_eq_rhs</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c_lhs</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[term_elab termCongr]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabTermCongr</span> <span class=\"o\">:</span> <span class=\"n\">Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">expEq</span><span class=\"o\">,</span> <span class=\"n\">expTy</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">getEq</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n    <span class=\"c1\">-- Use `c_lhs` to store the equalities in the terms</span>\n    <span class=\"k\">let</span> <span class=\"n\">left</span> <span class=\"bp\">←</span> <span class=\"n\">t.raw.replaceM</span> <span class=\"k\">fun</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">c_lhs</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">preLeft</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">left</span> <span class=\"n\">expTy</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsUsingDefault</span>\n    <span class=\"c1\">-- Unfold the `c_lhs` terms to get the true LHS</span>\n    <span class=\"k\">let</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">preLeft.replace</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_rhs</span><span class=\"o\">,</span> <span class=\"n\">_eq</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.app4</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">c_lhs</span> <span class=\"k\">then</span> <span class=\"n\">lhs</span> <span class=\"k\">else</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- Rewrite the `c_lhs` terms to get the RHS. `c_lhs` is reducible, so using a pre-transform.</span>\n    <span class=\"k\">let</span> <span class=\"n\">simpCtx</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Context</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">Simp.neutralConfig</span><span class=\"o\">,</span>\n        <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n        <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">preTrans</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpM</span> <span class=\"n\">Simp.Step</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_α</span><span class=\"o\">,</span> <span class=\"n\">_lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.app4</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">c_lhs</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">visit</span> <span class=\"o\">{</span><span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"o\">}</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">visit</span> <span class=\"o\">{</span><span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Simp.main</span> <span class=\"n\">preLeft</span> <span class=\"n\">simpCtx</span> <span class=\"o\">(</span><span class=\"n\">methods</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"n\">preTrans</span> <span class=\"o\">})</span>\n    <span class=\"c1\">-- Check the expected type and then create the final proof.</span>\n    <span class=\"k\">let</span> <span class=\"n\">eq'</span> <span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">left</span> <span class=\"n\">res.expr</span>\n    <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.isDefEq</span> <span class=\"n\">eq'</span> <span class=\"n\">expEq</span> <span class=\"k\">do</span>\n      <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Generated congruence {← Meta.mkHasTypeButIsExpectedMsg eq' expEq}\"</span>\n    <span class=\"n\">mkExpectedTypeHint</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">res.getProof</span><span class=\"o\">)</span> <span class=\"n\">eq'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">getEq</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term.TermElabM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshTypeMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">ty</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">ty</span>\n    <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"o\">:=</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.isDefEq</span> <span class=\"n\">expectedType</span> <span class=\"n\">eq</span> <span class=\"k\">do</span>\n        <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Congruence {← Meta.mkHasTypeButIsExpectedMsg eq expectedType}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">bar</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"n\">case</span> <span class=\"n\">foo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">bar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Need type ascription, otherwise it gets confused due to coercion.</span>\n  <span class=\"c1\">-- (In `c_lhs h` it's `s` that gets coerced but `h` does not get coerced with it.)</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">11</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">11</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">)</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h4</span><span class=\"o\">)</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hef</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">hcd</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">hef</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- this: 1 + a + c * e = 1 + b + d * f</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- It works under binders too:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 369254387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687635665
    },
    {
        "content": "<p>It has some similarities to <code>congrm</code>, for example you can do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr</span><span class=\"bp\">%</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>but <code>congrm</code> uses the LHS, the RHS, and the pattern to come up with a congruence, and <code>congr%</code> generates its lemma using only the pattern. My feeling is that they serve different (yet overlapping) purposes and can't be unified.</p>",
        "id": 369256482,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687636720
    },
    {
        "content": "<p>Is there a version for <code>convert</code>/<code>convert_to</code>?</p>",
        "id": 369297748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687662474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> What would you be looking for in a <code>convert</code>/<code>convert_to</code> version?</p>\n<p>I see this as doing something fairly different from <code>convert</code>/<code>convert_to</code>/<code>congr!</code>. These tactics are about computing a diff given two expressions, but <code>congr%</code> is about generating an equality given a single pattern. <code>congr%</code> is like a generalized <code>congr_arg</code>/<code>congr_fun</code>/etc. that handles anything that <code>simp</code> can.</p>",
        "id": 369466335,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687713220
    },
    {
        "content": "<p>Something like <code>convert myproof with congrPattern%</code></p>",
        "id": 369466554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687713272
    },
    {
        "content": "<p>E.g., if I have a proof of <code>h : Tendsto f l (nhds x)</code> and I want to get <code>Tendsto f l (nhds y)</code>, then <code>convert h with Tendsto f l (nhds ?_)</code></p>",
        "id": 369466933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687713373
    },
    {
        "content": "<p>I think that'd be <code>rw [congr% Tendsto f l (nhds c(?_))]; exact h</code></p>",
        "id": 369467540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687713524
    },
    {
        "content": "<p>or <code>convert h using 0; congrm Tendsto f l (nhds _)</code>, once <code>congrm</code> is in mathlib4</p>",
        "id": 369467679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687713567
    },
    {
        "content": "<p>or <code>refine (congr% Tendsto f l (nhds c(?_))).mp h</code></p>",
        "id": 369467975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687713639
    }
]