[
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4335\">#4335</a>. I managed to \"fix\" 4 errors as follows. But that's a terrible solution. If someone knows how we can get back our precious <code>•</code> on the right hand side of the statement, that would be awesome!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: writing the `SMul.smul` explicitly is terrible. Needs a fix</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">SLOnGLPos_smul_apply</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁺</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">SMul.smul</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁺</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 369598988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687766600
    },
    {
        "content": "<p>Is the reason this is necessary because it makes it be homogeneous (i.e. <code>a -&gt; b -&gt; b</code>)?</p>",
        "id": 369606121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687768182
    },
    {
        "content": "<p>That certainly seems to help. But I don't understand why. Because Lean shouldn't have any trouble figuring out the \"return type\"</p>",
        "id": 369606721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687768283
    },
    {
        "content": "<p>It knows the expected type, because the LHS is elaborated without problems</p>",
        "id": 369606794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687768298
    },
    {
        "content": "<p>If you want to experiment, <a href=\"#narrow/stream/287929-mathlib4/topic/syntax.20for.20powers.3F/near/368647662\">here's</a> an override of the binary operator system, and a few messages down I have an <code>\\bul</code> notation macro that hooks into it. I'm curious if it helps here</p>",
        "id": 369607029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687768336
    },
    {
        "content": "<p>Thanks. I'm not yet sure how to use/test that.</p>",
        "id": 369617213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687770356
    },
    {
        "content": "<p>At least the file now compiles without errors. But this hack is still in place.</p>",
        "id": 369617360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687770375
    },
    {
        "content": "<p>Steps:</p>\n<ol>\n<li>Copy <a href=\"https://gist.github.com/kmill/bc58941368cc60738f3c932fe2546c9d\">https://gist.github.com/kmill/bc58941368cc60738f3c932fe2546c9d</a> into <code>Mathlib/Binop2.lean</code></li>\n<li>Add <code>import Mathlib.Binop2</code> to the top of your file</li>\n<li>Add <code>macro_rules | `($x • $y) =&gt; `(leftact% HSMul.hSMul $x $y)</code> somewhere before your use of <code>\\bul</code></li>\n</ol>",
        "id": 369619185,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687770714
    },
    {
        "content": "<p>Unfortunately, that doesn't work. It still errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">HSMul</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">GL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁺</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">SpecialLinearGroup.map</span> <span class=\"o\">(</span><span class=\"n\">Int.castRingHom</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">ℍ</span> <span class=\"bp\">?</span><span class=\"n\">m.1787518</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369636404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687774126
    },
    {
        "content": "<p>I pushed the experiment to the branch <code>smul-experiment</code></p>",
        "id": 369636760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687774203
    },
    {
        "content": "<p>Pro tip: don't call your ext lemma <code>_root_.ext</code></p>\n<p>Pro tip 2: definitely don't call a second ext lemma <code>_root_.ext</code></p>",
        "id": 370133109,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687883954
    },
    {
        "content": "<p>This is green now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>I'm not sure if we want to merge this with the current hacks or debug further - either way works for me</p>",
        "id": 370143562,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687885858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> do you think you could rewrite history in such a way that github will be happy to show me a diff between mathport output and PR head?</p>",
        "id": 370144614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687886071
    },
    {
        "content": "<p>I can, but probably not in the next three hours</p>",
        "id": 370145769,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687886311
    },
    {
        "content": "<p>I guess the explicit <code>SMul.smul</code> hack deserves some extra attention</p>",
        "id": 370163250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687889758
    },
    {
        "content": "<p>But I have no idea how to improve on it</p>",
        "id": 370163341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687889767
    },
    {
        "content": "<p>Maybe try giving explicit type ascriptions? You might just need to give it for the whole rhs</p>",
        "id": 370177641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687892938
    },
    {
        "content": "<p>It's on the queue now. I don't think there's any file left to port that will unblock more files at once:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/746UUkfapa1TWuf53jzHiNQY/Screenshot-from-2023-06-27-23-14-09.png\"><img src=\"/user_uploads/3121/746UUkfapa1TWuf53jzHiNQY/Screenshot-from-2023-06-27-23-14-09.png\"></a></div>",
        "id": 370208101,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687900595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I found that if you add some auxiliary notation for the <code>Coe SL(2, ℤ) GL(2, ℝ)⁺</code> instance, then it being semireducible somehow lets <code>SMul.smul ((s : GL(2, ℝ)⁺) * g) z</code> be written as <code>(s * g) • z</code> without getting a deterministic timeout.</p>\n<p>I've partially fixed this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5747\">#5747</a>. Feel free to take over from here!</p>",
        "id": 372993713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688669579
    }
]