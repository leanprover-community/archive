[
    {
        "content": "<p>It is well known that if A and B a two Hilbert spaces, then A × B is a Hilbert space. So I want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">InnerProductSpace</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod_inner</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inner</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">inner</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">prod_inner_product_space</span> <span class=\"o\">:</span>\n  <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inner</span> <span class=\"o\">:=</span> <span class=\"n\">prod_inner</span>\n</code></pre></div>\n<p>I'm completely stuck on this, I haven't found any relevant lemmas in Mathlib yet.<br>\nDo I really need to construct it by myself?</p>",
        "id": 388330879,
        "sender_full_name": "Zhang Ruichong",
        "timestamp": 1693490382
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/6136\">#6136</a></p>",
        "id": 388331171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693490453
    },
    {
        "content": "<p>To explain a bit more: this issue has been discussed several times already, but the main problem is that, as currently stated, this is false. The reason is that, in mathlib, the default norm on <code>A × B</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∥</mi><mi>a</mi><mi mathvariant=\"normal\">∥</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∥</mi><mi>b</mi><mi mathvariant=\"normal\">∥</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Vert(a, b)\\Vert = \\max(\\Vert a\\Vert, \\Vert b\\Vert)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∥</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">∥</span><span class=\"mclose\">)</span></span></span></span>, not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∥</mi><mi>a</mi><msup><mi mathvariant=\"normal\">∥</mi><mn>2</mn></msup><mo>+</mo><mi mathvariant=\"normal\">∥</mi><mi>b</mi><msup><mi mathvariant=\"normal\">∥</mi><mn>2</mn></msup><msup><mo stretchy=\"false\">)</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></msup></mrow><annotation encoding=\"application/x-tex\">\\Vert(a, b)\\Vert = (\\Vert a\\Vert^2 + \\Vert b\\Vert^2)^{\\frac12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord\">∥</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.204em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">b</span><span class=\"mord\"><span class=\"mord\">∥</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span></span></span></span>. And in general this norm is not a Hilbert space norm at all.</p>",
        "id": 388331990,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693490656
    },
    {
        "content": "<p>The solution will be to use <code>WithLp 2 (A × B)</code>, which will soon have the structure you are looking for</p>",
        "id": 388332464,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693490787
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithLp#doc\">docs#WithLp</a></p>",
        "id": 388332506,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693490796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Cartesian.20product.20of.20two.20Hilbert.20spaces/near/388332464\">said</a>:</p>\n<blockquote>\n<p>The solution will be to use <code>WithLp 2 (A × B)</code>, which will soon have the structure you are looking for</p>\n</blockquote>\n<p>Did you mean that it hasn't been implemented, and I have to wait for some time before implementation?</p>",
        "id": 388334778,
        "sender_full_name": "Zhang Ruichong",
        "timestamp": 1693491349
    },
    {
        "content": "<p>Yes, the implementation is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6136/files#diff-6b0848aaa3ae891c30ef5b9eb01955396ad8f99017f51346a1dd490af954d643R26-R27\">here</a>, which is not part of mathlib yet.</p>",
        "id": 388335095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693491420
    }
]