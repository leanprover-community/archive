[
    {
        "content": "<p>I can't use <code>suffices</code> in practice because (a) I am old and stupid, and can't remember the syntax, which seems to be different to what is in my brain and (b) I can't get the system to help me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- function expected at 5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- expected command</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- expected command</span>\n</code></pre></div>\n<p>Ok it's fine that I'm old and can't learn the new syntax -- but the problem is that in all cases when I hover over <code>suffices</code> it just says \"An extension of the suffices tactic that turns the hypothesis into a goal to be proved later\".</p>\n<p>Am I naive to expect the system to help me here?</p>",
        "id": 391230600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800179
    },
    {
        "content": "<p>Oh got it -- no colon after <code>suffices</code>. But why isn't it telling me this nicely? And isn't this different to lots of other tactics?</p>",
        "id": 391230828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800257
    },
    {
        "content": "<p>I remember this syntax change driving me nuts during porting.</p>",
        "id": 391230896,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800290
    },
    {
        "content": "<p>Kevin, I guess the simplest solution is to add a bit to the docstring explaining the syntax.</p>",
        "id": 391231023,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800333
    },
    {
        "content": "<p>In Lean 3 I would just stop what I was doing and <code>#check tactic.interactive.suffices</code> and I'd be able to jump to the definition and read the docstring, but I can't do this in Lean 4, I click on it and it takes me to the mathlib extension, and I don't know how to get to the other unextended definition.</p>",
        "id": 391231050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800348
    },
    {
        "content": "<p><code>#help tactic suffices</code></p>",
        "id": 391231150,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800392
    },
    {
        "content": "<p>Jireh I literally cannot use Lean at all to get to the docstring. I have no understanding of the Lean 4 syntax for declaring a tactic (so I can't search) and I cannot invoke the tactic in a way which will make me jump to the place where the docstring is. This is one of the sources of my frustration.</p>",
        "id": 391231156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800395
    },
    {
        "content": "<p>Oh nice -- thanks! That solves the problem for me.</p>",
        "id": 391231431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800480
    },
    {
        "content": "<p>But also, we definitely need a web page of tactics like we had in Lean 3.</p>",
        "id": 391231508,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800510
    },
    {
        "content": "<p>yeah but I don't want to stop what I'm doing and go to a browser -- your solution is perfect for me. Thanks a lot :-)</p>",
        "id": 391231570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800532
    },
    {
        "content": "<p>What's the import for <code>#help tactic suffices</code>?</p>",
        "id": 391231623,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694800548
    },
    {
        "content": "<p><code>Mathlib.Tactic.HelpCmd</code> I think</p>",
        "id": 391231736,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60suffices.60.20whinge/near/391231508\">said</a>:</p>\n<blockquote>\n<p>But also, we definitely need a web page of tactics like we had in Lean 3.</p>\n</blockquote>\n<p>You don't have <a href=\"https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md\">https://github.com/haruhisa-enomoto/mathlib4-all-tactics/blob/main/all-tactics.md</a> bookmarked?</p>",
        "id": 391231844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800634
    },
    {
        "content": "<p>I mean, it's great that it exists for now, but no one should have to manually create it; and I don't think it's being updated. I'm not using it on principle to remind myself continually that we still don't have a solution for this. Which will either cause me to learn enough to figure it out, or complain enough that someone else does it.</p>",
        "id": 391232096,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694800715
    },
    {
        "content": "<p>I only bookmarked it just now anyway, because I couldn't find the docstring for <code>suffices</code> :-)</p>",
        "id": 391232298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800779
    },
    {
        "content": "<p>Is it a stupid feature request to make <code>suffices : </code> work  and just mean the same as <code>suffices</code>? Or is that somehow a step backwards? I noticed other tactics like <code>repeat</code> just eat the right thing by default without any delimiter (this was not true in Lean 3 IIRC)</p>",
        "id": 391232567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694800848
    },
    {
        "content": "<p>This definitely used to work. I think as a mathlib extension</p>",
        "id": 391233869,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694801324
    },
    {
        "content": "<p><code>suffices h : type by ...</code> should definitely still work</p>",
        "id": 391233984,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694801369
    },
    {
        "content": "<p>Doesn't it?</p>",
        "id": 391234177,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694801436
    },
    {
        "content": "<p><del>It does not.</del> It does, but not if you remove <code>h</code>.</p>",
        "id": 391234240,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694801467
    },
    {
        "content": "<p>Aah it works without the := !</p>",
        "id": 391234441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694801543
    },
    {
        "content": "<p>wait, what? It doesn't for me.</p>",
        "id": 391234560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694801608
    },
    {
        "content": "<p>oops, sorry, I forgot the label <code>h</code>. Ignore me.</p>",
        "id": 391234617,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694801633
    },
    {
        "content": "<p>You can't have it autoname to <code>this</code>and use a <code>:</code>.</p>",
        "id": 391234723,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694801661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60suffices.60.20whinge/near/391232567\">said</a>:</p>\n<blockquote>\n<p>Is it a stupid feature request to make <code>suffices : </code> work  and just mean the same as <code>suffices</code>? Or is that somehow a step backwards? I noticed other tactics like <code>repeat</code> just eat the right thing by default without any delimiter (this was not true in Lean 3 IIRC)</p>\n</blockquote>\n<p>this used to be possible but I think they're being forcibly removed: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6964\">#6964</a></p>",
        "id": 391235089,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694801802
    },
    {
        "content": "<p>e.g. <br>\n<a href=\"/user_uploads/3121/paqJPxrDNGTodX8CaZ-NZJ4w/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/paqJPxrDNGTodX8CaZ-NZJ4w/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/paqJPxrDNGTodX8CaZ-NZJ4w/image.png\"></a></div>",
        "id": 391235146,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694801827
    },
    {
        "content": "<p>so <code>suffices h : 2 + 2 = 5 by</code> and <code>suffices 2 + 2 = 5 by</code> both work, and almost nothing else works for <code>suffices</code>, but neither <code>have h : 2 + 2 = 5 by</code> nor <code>have 2 + 2 = 5 by</code> work. For me this is causing real trouble when trying and failing to upgrade my not very plastic brain to Lean 4.</p>",
        "id": 391235230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694801866
    },
    {
        "content": "<p>The thing is that the syntax <code>h : type := term</code> should really only be used when <code>term : type</code>, and that is not the case with <code>suffices</code></p>",
        "id": 391235505,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694801950
    },
    {
        "content": "<p><del>And actually what comes after a <code>suffices</code> is not a term, it’s a tactic block, unlike what happens with <code>have</code></del></p>",
        "id": 391236188,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694802122
    },
    {
        "content": "<p>well it's term/tactic depending on whether you put <code>from</code>/<code>by</code>.</p>",
        "id": 391236467,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694802180
    },
    {
        "content": "<p>Yes nevermind that was stupid. I meant that the tactic state changed, but that’s completely irrelevant</p>",
        "id": 391236802,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694802252
    },
    {
        "content": "<p>I complained on the <code>suffices</code> strange syntax in <a href=\"https://github.com/leanprover/lean4/issues/2520\">https://github.com/leanprover/lean4/issues/2520</a>. If you also think it would be better to uniformize it with the other tactics, you can upvote there (although I doubt anything will change).</p>",
        "id": 391237153,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694802333
    },
    {
        "content": "<p>Can we not just make some macro magic which makes suffices also work the same way as have? Or would this somehow be regarded as a bad idea by some programming language enthusiasts?</p>",
        "id": 391237429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694802386
    },
    {
        "content": "<p>Oh an issue was opened about this last week! Thanks Sebastien!</p>",
        "id": 391237646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694802438
    },
    {
        "content": "<p>Kevin, I think this is the main comment that you should remember in order to recall syntax.<br>\n<span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60suffices.60.20whinge/near/391235505\">said</a>:</p>\n<blockquote>\n<p>The thing is that the syntax <code>h : type := term</code> should really only be used when <code>term : type</code>, and that is not the case with <code>suffices</code></p>\n</blockquote>\n<p>So when you do <code>have</code>, you can do <code>have label := term</code>, where Lean infers the type, or <code>have label : type := term</code> to specify the type, or, if you don't want to provide the label and have it automatically use <code>this</code>, you can do <code>have : type := term</code>, but the colon is necessary so that it is not parsed as the first syntax. Of course, all these terms can be given with <code>by tactics</code>.</p>\n<p>As for <code>suffices</code>, It's <code>suffices type from/by</code>, and the hypothesis is autonamed <code>this</code>. And optionally, if you want to name it, you can do <code>suffices label : type from/by</code>. But here, we don't need to have a <code>:</code> in the <code>this</code> case because the syntax <code>suffices label from/by</code> wouldn't make any sense (since you always need to provide the type in a <code>suffices</code> statement).</p>",
        "id": 391238691,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694802635
    },
    {
        "content": "<p>Relevant Mario quote from a different thread:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390303139\">said</a>:</p>\n<blockquote>\n<p>I think it is best to just wait until we are basically already about to hit the merge button since this PR conflicts with everything and will be disruptive to existing PRs as well</p>\n<p>Note that this is going to be one more thing where Std diverges from Mathlib because Std only uses theorem while mathlib now only uses lemma</p>\n<p>In many other programming language ecosystems there are concerns about \"splitting the ecosystem\" or \"creating a dialect\" and FYI this is exactly what mathlib is doing</p>\n</blockquote>\n<p>On the other hand, I don't see why we're being so willfully inflexible on syntax; it's very easy to make everyone happy and just allow <code>:</code>s. For what it's worth, the <code>\\.</code> style is also seen as \"not Lean4\" officially; this is going to have to get figured out at some point</p>",
        "id": 391239210,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694802783
    },
    {
        "content": "<p>As I recall, the syntax with and without <code>:</code> weren't quite compatible either, though I don't recall how. That's fixable, though</p>",
        "id": 391239750,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694802968
    },
    {
        "content": "<p>Well maybe my original post (made out of frustration of simply not knowing any way forward without moving to a browser and looking for help there) is evidence that what we have right now isn't ideal, but having now read the github thread I do understand the <code>:=</code> explanation, and I suspect that this understanding will now actually teach/remind me about the := at the end -- however Lean was already telling me about the :=. It's now the bit at the start (disallowing suffices : blah) that I don't really get.</p>",
        "id": 391239835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694802991
    },
    {
        "content": "<p>Kevin, I think it's just for the reason I mentioned (that <code>have</code> only uses the <code>have : type := term</code> syntax including the colon out of necessity for parsing), but I agree it wouldn't be insane to allow it.</p>",
        "id": 391240762,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694803346
    },
    {
        "content": "<p>At the very least it would be nice if the error message was more informative.</p>",
        "id": 391240804,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694803367
    },
    {
        "content": "<p>Why is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">·</span> <span class=\"n\">tac</span>\n</code></pre></div>\n<p>considered \"not Lean 4\"? This looks exactly like the corresponding <code>have</code> syntax.</p>",
        "id": 391243313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694804343
    },
    {
        "content": "<p>Oof, here is something <em>really</em> disgusting. There is another syntax that exists (the one that <a href=\"https://github.com/leanprover-community/mathlib4/pull/6964\">#6964</a> was trying to eliminate) where you can use <code>suffices</code> to create two goals temporarily. The problem is that this syntax <em>doesn't</em> match the other one. I think this is likely the biggest source of confusion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- without `from/by`, colon without label valid, no colon invalid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- no `by` or `from`!</span>\n  <span class=\"c1\">-- two goals now:</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- no `by` or `from`! and names with `this`, despite the colon!</span>\n  <span class=\"c1\">-- two goals now:</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- no `by` or `from`!</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"c1\">-- error: expected `by` or `from`</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- with `from/by`, colon without label invalid, no colon valid</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span> <span class=\"c1\">-- error: expected command</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 391243514,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694804407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  In Lean 4, that doesn't match the preferred <code>have</code> syntax which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tac</span>\n</code></pre></div>\n<p>The point is there should be no intermediate point where there are multiple goals.</p>",
        "id": 391243811,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694804523
    },
    {
        "content": "<p>Uh, why is that even something we care about? Are you telling me that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">lhs</span>\n   <span class=\"bp\">=</span> <span class=\"n\">mhs</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n   <span class=\"bp\">=</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>\n<p>is \"not Lean 4\" because there's two goals at the end of the fourth line?</p>",
        "id": 391244225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694804692
    },
    {
        "content": "<p>Let me turn it around: is there any use case for using <code>suffices</code> and then not immediately solving the goal?</p>",
        "id": 391244583,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694804846
    },
    {
        "content": "<p>There's certainly other cases where its nice to have more than one goal available</p>",
        "id": 391244819,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694804926
    },
    {
        "content": "<p>I'm not saying there's never a case when we want intermediate goals, just that it's only rarely that you want that from a <code>have</code> or a <code>suffices</code> (or maybe never for <code>suffices</code>).</p>",
        "id": 391244887,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694804948
    },
    {
        "content": "<p>The place where it would be valid for <code>have</code> is <code>have := some term with a ?_ hole</code>. But there's not really a reason to use <code>have : type \\n · tac</code></p>",
        "id": 391245167,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694805038
    },
    {
        "content": "<p>(<code>\\n</code> is newline, in case it wasn't obvious)</p>",
        "id": 391245208,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694805052
    },
    {
        "content": "<p>With normal suffices it's not useful, but with rsuffices it's often useful for when the term that suffices is a disjunction. And I think it'd be weird to have two different styles for two very closely related tactics.</p>",
        "id": 391245231,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694805059
    },
    {
        "content": "<p>I also think (and maybe this is just me extrapolating from a small sample sizes) that the \\. notation is quite well-liked</p>",
        "id": 391245318,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694805091
    },
    {
        "content": "<p>We're arguing about separate things.</p>",
        "id": 391245345,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694805105
    },
    {
        "content": "<p>Sure, there are cases when you want multiple goals, and you definitely want to use <code>·</code> to organize them. It's just that <code>have : type \\n · tac</code> and <code>suffices : type \\n · tac</code> are artifacts of Lean 3. Something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rsuffices</span> <span class=\"n\">pattern</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- eww, the syntax for `rsuffices` doesn't match `suffices` because it uses `obtain` under the hood</span>\n  <span class=\"n\">tac</span>\n<span class=\"bp\">·</span> <span class=\"n\">tac1</span>\n<span class=\"bp\">·</span> <span class=\"n\">tac2</span>\n</code></pre></div>\n<p>is a totally legitimate use case</p>",
        "id": 391245796,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694805257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60suffices.60.20whinge/near/391244887\">said</a>:</p>\n<blockquote>\n<p>I'm not saying there's never a case when we want intermediate goals, just that it's only rarely that you want that from a <code>have</code> or a <code>suffices</code> (or maybe never for <code>suffices</code>).</p>\n</blockquote>\n<p>Actually, I have definitely done this before with <code>suffices,</code> in lean 3. This puts <code>this : _</code> in the context, and by using it in the proof of the goal you can get <code>this</code> to be resolved to a specific type, which you then work on in the second part.</p>",
        "id": 391250179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694806966
    },
    {
        "content": "<p>I think we should make <code>suffices</code> require <code>:</code>, i.e. <code>\"suffices\" (ident)? \":\" ...</code> instead of <code>\"suffices\" (ident \":\")? ...</code>, this is more consistent with have, setting aside the issues with <code>:=</code></p>",
        "id": 391250511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694807108
    },
    {
        "content": "<p>I would argue the correct thing to do there is still</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"n\">_</span> <span class=\"kd\">by</span>\n  <span class=\"n\">tactic_proof_involving</span> <span class=\"n\">this</span>\n<span class=\"n\">tac</span>\n</code></pre></div>",
        "id": 391250656,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694807165
    },
    {
        "content": "<p><del>although that seems not to be valid, which is a bit annoying.</del> nevermind</p>",
        "id": 391250743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694807210
    },
    {
        "content": "<p>in what way?</p>",
        "id": 391250782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694807222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think of suffices in Lean4 like <code>show</code>. I.e. <code>suffices foo from bar</code> : <code>suffices foo by baz</code> :: <code>show foo from bar</code> : <code>show foo by baz</code>.</p>",
        "id": 391251724,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694807569
    },
    {
        "content": "<p>Mario, ignore me, I was wrong when I did a simple test. It works (without the <code>:</code> of course).</p>",
        "id": 391252073,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694807698
    },
    {
        "content": "<p>full disclosure: I want to change <code>show</code> too, to <code>show ty := e</code> or <code>show ty; e</code> / <code>show ty \\n e</code></p>",
        "id": 391252824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694807981
    },
    {
        "content": "<p>to be more consistent with <code>let</code> and <code>have</code></p>",
        "id": 391253002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694808044
    },
    {
        "content": "<p>That's at least consistent with the rule that <code>... type := term</code> should require <code>term : type</code>.</p>",
        "id": 391253229,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694808140
    }
]