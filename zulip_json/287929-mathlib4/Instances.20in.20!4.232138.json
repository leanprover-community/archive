[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2138\">!4#2138</a>, mathport generated (modulo minor fixes):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ContinuousOrderHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n    <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">ContinuousOrderHomClass.toContinuousMapClass</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContinuousMapClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">ContinuousOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOrderHomClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">Co</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n    <span class=\"n\">congr</span>\n  <span class=\"n\">map_rel</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">f.monotone'</span> <span class=\"n\">h</span>\n  <span class=\"n\">map_continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.continuous_toFun</span>\n</code></pre></div>\n<p>With these instances, Lean often fails to find a coercion of <code>f : ContinuousOrderHom α β</code> to function (but sometimes it succeeds).</p>",
        "id": 326314687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675761919
    },
    {
        "content": "<p>I suspect that this is related to some <code>outParam</code>s.</p>",
        "id": 326314840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675761962
    },
    {
        "content": "<p>It seems that the issue is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderHomClass#doc\">docs4#OrderHomClass</a></p>",
        "id": 326315985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675762276
    },
    {
        "content": "<p>It unfolds to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RelHomClass#doc\">docs4#RelHomClass</a> which uses relations as <code>outParam</code>s</p>",
        "id": 326316086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675762308
    },
    {
        "content": "<p>IMHO, relations should not be <code>outParam</code>s because the same map can be <code>RelHomClass</code> for <code>le</code> and for <code>lt</code>.</p>",
        "id": 326316224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675762339
    },
    {
        "content": "<p>Can you add a shortcut coefun instance? (Defined as FunLike.coe)</p>",
        "id": 326319843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675763439
    },
    {
        "content": "<p>I left a comment on the PR, because I suspect <code>ContinuousOrderHomClass.toContinuousMapClass</code> is a dangerous instance.</p>",
        "id": 326335952,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1675768220
    },
    {
        "content": "<p>Yes, this is a bug.  <a href=\"https://github.com/leanprover/std4/pull/102\">https://github.com/leanprover/std4/pull/102</a></p>",
        "id": 326466779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675807340
    },
    {
        "content": "<p>If I add a shortcut <code>CoeFun</code> instance, then Lean will unfold coercions to <code>toFun</code></p>",
        "id": 326501916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675829484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 326501930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675829491
    },
    {
        "content": "<blockquote>\n<p>Defined as FunLike.coe</p>\n</blockquote>\n<p>not as <code>toFun</code></p>",
        "id": 326549367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675851554
    },
    {
        "content": "<p>I should read more carefully. Anyway, it compiles now.</p>",
        "id": 326602251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675866642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Do you think TC search fails in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2163\">!4#2163</a> for a similar reason? If yes, how can we fix it?</p>",
        "id": 326602449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675866687
    },
    {
        "content": "<p>From <code>trace.Meta.synthInstance</code> and <code>trace.Meta.isDefEq</code> we get a suggestion of the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">InfₛHomClass.toInfTopHomClass</span> <span class=\"n\">to</span> <span class=\"n\">InfTopHomClass</span> <span class=\"o\">(</span><span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">InfTopHomClass</span> <span class=\"o\">(</span><span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">≟</span> <span class=\"n\">InfTopHomClass</span> <span class=\"bp\">?</span><span class=\"n\">m.17844</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">?</span><span class=\"n\">m.17846</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">InfTopHomClass</span> <span class=\"o\">(</span><span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">=?=</span> <span class=\"n\">InfTopHomClass</span> <span class=\"bp\">?</span><span class=\"n\">m.17844</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">?</span><span class=\"n\">m.17846</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.17844</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.17846</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.17628</span> <span class=\"bp\">=?=</span> <span class=\"n\">CompleteLattice.toTop</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.17629</span> <span class=\"bp\">=?=</span> <span class=\"n\">CompleteLattice.toTop</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">SemilatticeInf</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[</span><span class=\"n\">synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">CompleteLattice</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">SemilatticeInf.toHasInf</span> <span class=\"bp\">=?=</span> <span class=\"n\">Lattice.toHasInf</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">InfTopHomClass</span> <span class=\"o\">(</span><span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">=?=</span> <span class=\"n\">InfTopHomClass</span> <span class=\"bp\">?</span><span class=\"n\">m.17844</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">?</span><span class=\"n\">m.17846</span>\n        <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">InfTopHomClass</span> <span class=\"o\">(</span><span class=\"n\">InfₛHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.17624</span> <span class=\"bp\">?</span><span class=\"n\">m.17625</span> <span class=\"bp\">=?=</span> <span class=\"n\">InfTopHomClass</span> <span class=\"bp\">?</span><span class=\"n\">m.17844</span> <span class=\"bp\">?</span><span class=\"n\">m.17845</span> <span class=\"bp\">?</span><span class=\"n\">m.17846</span>\n</code></pre></div>\n<p>What's happening here is that <code>InfₛHomClass.toInfTopHomClass</code> needs stronger assumptions (<code>CompleteLattice</code>) than can be found either in <code>InfₛHomClass</code> (<code>InfSet</code>) or in <code>InfTopHomClass</code> (<code>Inf</code> + <code>Top</code>). So to apply this instance, unification needs to find a <code>CompleteLattice</code> record that projects into the right <code>InfSet</code>, <code>Inf</code> and <code>Top</code> instances. This can't really be done automatically, so instead we can \"unstuck\" the problem through instance synthesis: find a <code>CompleteLattice</code> instance and check it satisfies the conditions. But we haven't yet reached the end of the inheritance chain that will tell us what the domain and codomain for the morphisms are, so we are left with a <code>CompleteLattice ?m.17845</code> instance search which fails.</p>\n<p>This is a limitation in Lean 4, although I am not sure that this counts as a bug: Lean 3 actually has trouble with similar cases, where we have diamond inheritance in instance parameters depending on <code>outParam</code>s.</p>\n<p>If we expect this limitation to be fixed at some point, I would advise to try to fix the issue here: for that, we need some way to inform Lean about either the <code>CompleteLattice</code> structure, or at least the type on which to find this structure. If we do not expect it to be fixed, we should instead add a shortcut instance giving <code>OrderHom</code> on <code>InfₛHomClass</code> without needing to go through diamond inheritance of <code>CompleteLattice</code>.</p>",
        "id": 326644735,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1675877225
    }
]