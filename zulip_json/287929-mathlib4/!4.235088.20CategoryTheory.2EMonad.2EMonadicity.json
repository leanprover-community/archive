[
    {
        "content": "<p>Here there seems to be an incoming <code>local notation \"F\" =&gt; leftAdjoint G</code> (and one for <code>\"adj\"</code>) which is causing problems.</p>\n<p>I thought I'd see if I can help with the <code>help-wanted</code> PRs, so I'm new to this issue; it seems that so far an attempt has been made to replace it with an <code>abbrev</code>, but that means that some instances aren't getting synthesized when they need to in certain places. The issue with local notation is that there are many instances of e.g. <code>F.obj</code>, meaning we'd need to write e.g. <code>F |&gt;.obj</code> for it to parse correctly instead.</p>\n<p>Should we</p>\n<ol>\n<li>use local notation and <code>|&gt;.</code></li>\n<li>declare syntax and write a local macro/delaborator that can handle dot notation (does this exist somewhere already?)</li>\n<li>manually inline <code>leftAdjoint G</code> in the cases that cause issues</li>\n<li>do something else?</li>\n</ol>",
        "id": 368747096,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687494367
    },
    {
        "content": "<p>I mean, how bad is it to inline <code>leftAdjoint G</code> everywhere in that file? At first glance the notation seems not that helpful.</p>",
        "id": 368749425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687495684
    },
    {
        "content": "<p>It's not hard, but it might be a little verbose, as the <code>\"adj\"</code> local notation is for <code>Adjunction.ofRightAdjoint G</code>, and both are used quite a lot. I suppose we could leave a porting note and just find-replace later!</p>",
        "id": 368750244,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687495970
    },
    {
        "content": "<p>(Also there are two manual-inline options, now that I think about it: use <code>abbrev</code> and manually inline everywhere that's necessary, or manually inline everywhere.)</p>",
        "id": 368751109,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687496311
    },
    {
        "content": "<p>Separately, I'm running into the <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20parametric.20local.20instance\">#lean4 &gt; ✔ invalid parametric local instance</a> error discussed in that thread in a couple of the main defs, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monadicOfCreatesGSplitCoequalizers</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G.IsSplitPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">CreatesColimit</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MonadicRightAdjoint</span> <span class=\"n\">G</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monadicOfHasPreservesReflectsGSplitCoequalizers</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G.IsSplitPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">HasCoequalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G.IsSplitPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">PreservesColimit</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G.IsSplitPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">ReflectsColimit</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MonadicRightAdjoint</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>one other def with similar requirements, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsReflexivePair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">PreservesColimit</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The fix suggested in the linked thread would mean introducing a total of 5 classes with names like <code>ReflectsColimitOfGSplitPair</code>. Is this the right way to address these particular issues?</p>",
        "id": 368782158,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687504545
    },
    {
        "content": "<p>(We could actually do it with 2 classes: one parametric in the property for <code>G.IsSplitPair</code>, e.g. <code>OfGSplitPairs G PreservesColimit</code> and one to handle <code>IsReflexivePair</code>. We could even just introduce one class <code>OfPair</code> which would be parametric in the <em>kind</em> of pair, but that seems like overkill...)</p>",
        "id": 368790800,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687506410
    },
    {
        "content": "<p>This PR still has a few problems, but an interesting one is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsReflexivePair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">PreservesColimit</span> <span class=\"o\">(</span><span class=\"n\">parallelPair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>failing with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">parametric</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"kd\">parameter</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"n\">IsReflexivePair</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">forward</span> <span class=\"n\">dependencies</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"n\">resolution</span> <span class=\"n\">cannot</span> <span class=\"n\">use</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">will</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">able</span> <span class=\"n\">to</span> <span class=\"n\">infer</span> <span class=\"n\">a</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"kd\">parameter</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>This looks to me like a regression from Lean 3, which would have happily used this variable to generate a typeclass search for <code>IsReflexivePair f g</code>, when faced with <code>PreservesColimit (parallelPair f g) G</code>.</p>",
        "id": 373074719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688703335
    },
    {
        "content": "<p>Minimisation is pretty minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- fails with `invalid parametric local instance`</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- and hence fails</span>\n</code></pre></div>\n<p>while in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">],</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Regression, not a feature, right?</p>",
        "id": 373076027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688704165
    },
    {
        "content": "<p>Is it worth trying to solve it a la the methods mentioned in the earlier thread <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.235088.20CategoryTheory.2EMonad.2EMonadicity\">#mathlib4 &gt; !4#5088 CategoryTheory.Monad.Monadicity</a>?</p>",
        "id": 373076067,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688704194
    },
    {
        "content": "<p>Oh, I should link the thread which that thread links to directly—relevant prior discussion (though not with the motivation of \"can we change the underlying issue\"): <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20parametric.20local.20instance\">#lean4 &gt; ✔ invalid parametric local instance</a></p>",
        "id": 373076219,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688704269
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EMonad.2EMonadicity.20.235088\">#mathlib4 &gt; CategoryTheory.Monad.Monadicity #5088</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 373076410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688704365
    },
    {
        "content": "<p>Yes, I guess Gabriel is saying <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20invalid.20parametric.20local.20instance/near/340930408\">here</a> that this is by design, even if it is a regression.</p>",
        "id": 373076470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688704415
    },
    {
        "content": "<p>I'm a bit unconvinced actually. With a one line patch to Lean 4 (disabling this check if the <code>BinderInfo</code> is <code>.instImplicit</code>), this example works fine.</p>",
        "id": 373077333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688704901
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2311\">lean4#2311</a> (as an issue), and <a href=\"https://github.com/leanprover/lean4/pull/2312\">lean4#2312</a> (a proposed fix).</p>",
        "id": 373107222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688715143
    }
]