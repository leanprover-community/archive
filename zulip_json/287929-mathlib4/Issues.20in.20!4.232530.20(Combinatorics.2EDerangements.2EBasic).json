[
    {
        "content": "<p>I've got most of the issues addressed here. Two remaining that need higher power attention:</p>\n<p>1) In <code>atMostOneFixedPointEquivSumDerangements</code></p>\n<ul>\n<li>we had a universe issue, which I think I've annotated correctly, but now we have a type/sort issue. If I follow the logic on the Lean 3 side, this didn't seem to bother Lean 3 but does worry Lean 4.</li>\n<li>we have a timeout figuring out that if <code>a</code> is <code>DecidableEq</code> then <code>p a</code> is <code>Decidable</code></li>\n</ul>\n<p>2) In <code>derangementsOptionEquivSigmaAtMostOneFixedPoint</code> as far as I can tell, Lean 3 accepted an <code>Equiv</code> to close the goal, but Lean 4 won't. <code>library_search</code> tells me that I can close the goal with a classical assumption, but this requires marking the <code>def</code> as <code>noncomputable</code></p>",
        "id": 338657848,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677608166
    },
    {
        "content": "<p>Are you sure the Lean3 universes in question are the same as the Lean4 ones?</p>",
        "id": 338663906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677609743
    },
    {
        "content": "<p>I don't see anything on the Lean 3 side that's not <code>u_1</code></p>",
        "id": 338664634,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677609954
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.subtypeSubtypeEquivSubtypeInter#doc\">docs4#Equiv.subtypeSubtypeEquivSubtypeInter</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.subtype_subtype_equiv_subtype_inter\">docs#equiv.subtype_subtype_equiv_subtype_inter</a></p>",
        "id": 338664740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677609983
    },
    {
        "content": "<p>The Lean4 one is <code>Sort u</code>, the Lean3 one is <code>Type u</code></p>",
        "id": 338664791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677609999
    },
    {
        "content": "<p>There's the type/sort issue.</p>",
        "id": 338664862,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610023
    },
    {
        "content": "<p>It's confusing because when I hover over the type in VS Code, I get <code>Sort u</code></p>",
        "id": 338665036,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610075
    },
    {
        "content": "<p>So either we should undo the generalization of that def, or we should backport it and see what breaks</p>",
        "id": 338665110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610089
    },
    {
        "content": "<p>(On the Lean 3 side).</p>",
        "id": 338665122,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610094
    },
    {
        "content": "<p>Note that mathport <a href=\"https://github.com/leanprover-community/mathlib3port/blob/e3a205b1f51e409563e9e4294f41dd4df61f578a/Mathbin/Logic/Equiv/Basic.lean#L1729-L1735\">gives an error message about this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> warning: equiv.subtype_subtype_equiv_subtype_inter -&gt; Equiv.subtypeSubtypeEquivSubtypeInter is a dubious translation:</span>\n<span class=\"cm\">lean 3 declaration is</span>\n<span class=\"cm\">  forall {α : Type.{u1}} (p : α -&gt; Prop) (q : α -&gt; Prop), Equiv.{succ u1, succ u1} (Subtype.{succ u1} (Subtype.{succ u1} α p) (fun (x : Subtype.{succ u1} α p) =&gt; q (Subtype.val.{succ u1} α p x))) (Subtype.{succ u1} α (fun (x : α) =&gt; And (p x) (q x)))</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  forall {α : Sort.{u1}} (p : α -&gt; Prop) (q : α -&gt; Prop), Equiv.{max 1 u1, max 1 u1} (Subtype.{max 1 u1} (Subtype.{u1} α p) (fun (x : Subtype.{u1} α p) =&gt; q (Subtype.val.{u1} α p x))) (Subtype.{u1} α (fun (x : α) =&gt; And (p x) (q x)))</span>\n<span class=\"cm\">Case conversion may be inaccurate. Consider using '#align equiv.subtype_subtype_equiv_subtype_inter Equiv.subtypeSubtypeEquivSubtypeInterₓ'. -/</span>\n<span class=\"sd\">/-- A subtype of a subtype is equivalent to the subtype of elements satisfying both predicates. -/</span>\n</code></pre></div>",
        "id": 338665322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610159
    },
    {
        "content": "<p>But no one ever reads these because they don't appear till after the port has already happened</p>",
        "id": 338665374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610176
    },
    {
        "content": "<p>Ah, no, that's not right. There's an explicit annotation on the Lean 3 side.</p>",
        "id": 338665385,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A subtype of a subtype is equivalent to the subtype of elements satisfying both predicates. -/</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">subtype_subtype_equiv_subtype_inter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">x.1</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">subtype_subtype_equiv_subtype_exists</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span>\n</code></pre></div>",
        "id": 338665441,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610199
    },
    {
        "content": "<p>Right, that def was ported incorrectly</p>",
        "id": 338665526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610215
    },
    {
        "content": "<p>I'll fix in this PR.</p>",
        "id": 338665563,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677610224
    },
    {
        "content": "<p>Or at least, someone made a refactor while porting it, and you're dealing with the fallout from that</p>",
        "id": 338665574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610227
    },
    {
        "content": "<p>There are quite a lot of declarations with the same Type/Sort generalization in that file.</p>",
        "id": 338666018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610332
    },
    {
        "content": "<p>I think it's enough of a mess to warrant its own PR fixing all of the errors that mathport is complaining about</p>",
        "id": 338666090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677610349
    },
    {
        "content": "<p>lmk if you want me to do the PR or if you want to, and I'll make this PR dependent.</p>\n<p>As an update, the <code>Sort</code> -&gt; <code>Type</code> update makes progress, but we are in type/instance inference hell.</p>",
        "id": 338707504,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677624519
    },
    {
        "content": "<p>I'd still lean towards backporting a switch to <code>Sort</code> instead</p>",
        "id": 338707814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677624633
    },
    {
        "content": "<p>Update on this one: I did the surgical Sort to Type switch to make progress, and I've got the file to the point where this is the only error.</p>\n<p>Right now, it times out in instance search for the same reasons as noted here: <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20search.20timeouts.20in.20!4.232547\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/instance.20search.20timeouts.20in.20!4.232547</a></p>\n<p>I have a type for the type hole from the Lean 3 side, but that leads to a metavar leaking through the <code>refine'</code></p>",
        "id": 338974757,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677712775
    },
    {
        "content": "<p>It's all documented in the file (and I'll add a comment in the PR itself) if anyone wants to take a look.</p>",
        "id": 338974843,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677712815
    },
    {
        "content": "<p>I've now got it down to either a wanting proof or declaration that <code>DecidablePred (fun (x: α) =&gt; x ∈ ({a}ᶜ : Set α))</code></p>",
        "id": 338975471,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677713170
    },
    {
        "content": "<p>It <em>feels</em> like membership in a singleton should be decidable...</p>",
        "id": 338977789,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677714567
    },
    {
        "content": "<p>That sounds the same as decidable equality</p>",
        "id": 339016499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677740047
    },
    {
        "content": "<p>In the binding, we have <code> [DecidableEq α]</code> so yeah...</p>",
        "id": 339143669,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677773667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232530.20.28Combinatorics.2EDerangements.2EBasic.29/near/338707814\">said</a>:</p>\n<blockquote>\n<p>I'd still lean towards backporting a switch to <code>Sort</code> instead</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/18543\">#18543</a></p>",
        "id": 339159599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677777420
    },
    {
        "content": "<p>Lmk when it hits the Mathlib4 side &amp; I’ll take a dependency</p>",
        "id": 339183688,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677783801
    },
    {
        "content": "<p>You can already mark a dependency from a mathlib4 to a mathlib3 PR, although I guess it won't help you</p>",
        "id": 339184351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677784000
    },
    {
        "content": "<p>Documented with a plan in the PR.</p>\n<p>In the meantime, any proof that <code>DecidableEq a → DecidablePred (fun (x: α) =&gt; x ∈ ({a}ᶜ : Set α))</code> welcome</p>",
        "id": 339200810,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677789675
    },
    {
        "content": "<p>Does lean3 prove it with <code>apply_instance</code>?</p>",
        "id": 339216352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677795896
    },
    {
        "content": "<p>If so, look at the term it produces and work out which piece is missing</p>",
        "id": 339216397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677795917
    },
    {
        "content": "<p>Traveling now but will try this.</p>",
        "id": 339232008,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677803796
    },
    {
        "content": "<p>Lean 3 tells me that that the Lean 3 equivalent of <code>fun (a : α) =&gt; Set.Compl.decidableMem {a} a</code> shows what's required, but this isn't accepted on the Lean 4 side, because <code>failed to synthesize instance (j : α) → Decidable (j ∈ {a})</code></p>\n<p>I'll work on adding <code>Decidable (j ∈ {a})</code>, which seems easy given <code>[DecidableEq a]</code></p>",
        "id": 339723995,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678036379
    },
    {
        "content": "<p>That will already exist in lean 3</p>",
        "id": 339727160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678038212
    },
    {
        "content": "<p>Play the same game again and ask lean3 how it found that</p>",
        "id": 339727178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678038226
    },
    {
        "content": "<p>Or use <code>set_option pp.explicit true</code> on your original experiment</p>",
        "id": 339727251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678038249
    },
    {
        "content": "<p>That game got confusing very quickly, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">singleton.decidableMem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.singleton</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>",
        "id": 339747032,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678052112
    },
    {
        "content": "<p>What instance does lean 3 find for that</p>",
        "id": 339747779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678052774
    },
    {
        "content": "<p>That's where things got very confusing...</p>",
        "id": 339747798,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678052792
    },
    {
        "content": "<p>What does <code>by show_term { apply_instance }</code> give for that example in lean 3?</p>",
        "id": 339747842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678052828
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 339748107,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678053019
    },
    {
        "content": "<p>oh, that was <code>infer_instance</code>.... </p>\n<p><code>set.decidable_set_of j (λ (b : α), b = a)</code></p>",
        "id": 339748169,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678053063
    },
    {
        "content": "<p>Which does exist in mathlib4....</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.decidableSetOf#doc\">docs4#Set.decidableSetOf</a></p>",
        "id": 339748288,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678053154
    },
    {
        "content": "<p>And this works too</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">singleton.decidableMem</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">decidableSetOf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>",
        "id": 339748414,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678053248
    },
    {
        "content": "<p>So it looks like the conclusion is that in Lean 3, typeclass resolution unfolded <code>{x} </code> to <code>{y | y = x}</code></p>",
        "id": 339750160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678054715
    },
    {
        "content": "<p>But that this doesn't work in lean 4</p>",
        "id": 339750184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678054748
    },
    {
        "content": "<p>I think your instance is reasonable (especially with the last proof), though it should be called <code>Set.decidableMemSingleton</code>.</p>",
        "id": 339750273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678054824
    },
    {
        "content": "<p>Yeah this seems to be a recurring issue with decidability (I doubt it is specific to decidability, rather decidability just hits it the most often).</p>",
        "id": 339751656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678055921
    },
    {
        "content": "<p>The lean 4 behavior seems pretty reasonable here, it's just annoying to track down when ported code breaks</p>",
        "id": 339751853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678056115
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2671\">!4#2671</a></p>",
        "id": 339753308,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678057274
    }
]