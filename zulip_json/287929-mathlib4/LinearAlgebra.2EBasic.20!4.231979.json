[
    {
        "content": "<p>This file is ready for porting! Another milestone!</p>",
        "id": 325106390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675244534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> is either of you working on this right now?</p>",
        "id": 325106433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675244551
    },
    {
        "content": "<p>Not me. I got confused by <code>coeFn</code></p>",
        "id": 325106536,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675244582
    },
    {
        "content": "<p>Sorry had to run, there are a few simp issues ive run into and have been unable to fix. Not much other than that to push, so feel free to work on it</p>",
        "id": 325108343,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1675245067
    },
    {
        "content": "<p>I _was_ able to solve <code>coeFn</code> with <code>FunLike</code>, though</p>",
        "id": 325111410,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1675245795
    },
    {
        "content": "<p>Is it worth attempting a mathlib3 split of this file before the port, since it's so long?</p>",
        "id": 325112759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675246160
    },
    {
        "content": "<p>It looks like the amount of effort spent on the PR so far is low, so it's not too late to do that if we agree it's worthwhile</p>",
        "id": 325113837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675246444
    },
    {
        "content": "<p>If it's done quickly...</p>",
        "id": 325113962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675246486
    },
    {
        "content": "<p>I haven't looked at the file yet. Is it a red carpet?</p>",
        "id": 325114038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675246514
    },
    {
        "content": "<p>Otherwise, I would suggest that we split after porting.</p>",
        "id": 325114091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675246526
    },
    {
        "content": "<p>It does not look too bad. And in many cases it is the same wrong terminology in a lot of places (a few I fixed were just case errors).</p>",
        "id": 325114698,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675246703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EBasic.20!4.231979/near/325114038\">said</a>:</p>\n<blockquote>\n<p>I haven't looked at the file yet. Is it a red carpet?</p>\n</blockquote>\n<p>In terms of splitting or porting? For splitting I think the answer is no, as I already split the low-hanging thousands of lines from it in the past. <a href=\"https://github.com/leanprover-community/mathlib/pull/18345\">#18345</a> splits out the last 50 or so lines in an easy way, but for the same reason would be easy to forward-port later</p>",
        "id": 325117993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675247612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> fyi, I just pushed some fixes</p>",
        "id": 325138770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675253273
    },
    {
        "content": "<p>yep me too, I don't think we're working on anything conflicting, but I'm happy to stop if it makes things easier</p>",
        "id": 325139808,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1675253518
    },
    {
        "content": "<p>No, please go ahead</p>",
        "id": 325140074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675253588
    },
    {
        "content": "<p>Having a typeclass resolution issue on line 339, it works with <code>set_option synthInstance.maxHeartbeats 500000</code><br>\ntrace: <a href=\"https://paste.sr.ht/~pounce/59cd529832fc534a3ad60449274b671dc28e078c\">https://paste.sr.ht/~pounce/59cd529832fc534a3ad60449274b671dc28e078c</a></p>",
        "id": 325148872,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1675255816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">132600</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">})</span> <span class=\"bp\">≟</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">Module.End</span> <span class=\"bp\">?</span><span class=\"n\">m.179306</span> <span class=\"bp\">?</span><span class=\"n\">m.179307</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">104616</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">096173</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">096049</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">096203</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099098</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106227</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103798</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106911</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">109596</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106846</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">104730</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103525</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103775</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">102245</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">107397</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">108276</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">104062</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097365</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097216</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097538</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095381</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">098824</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">101104</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106123</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">110068</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">105849</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106301</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">104094</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">102728</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">106125</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">104456</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103311</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">112193</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">110938</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097567</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095208</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099329</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103886</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">111523</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">098682</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">094006</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">113392</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097390</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">098329</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095917</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">094190</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">092369</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">096521</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">105390</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097593</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">096123</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">094200</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097183</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">098124</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">126267</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095530</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095839</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099397</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">094540</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">097697</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099212</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">101507</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099770</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">099125</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">095121</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">098686</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">102678</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">103136</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">102466</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">094496</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 325189622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675265372
    },
    {
        "content": "<p>Might be this <a href=\"https://github.com/leanprover/lean4/issues/2055\">https://github.com/leanprover/lean4/issues/2055</a> ?</p>",
        "id": 325191179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675265756
    },
    {
        "content": "<p>Only 70 failures as opposed to the 300+ in that example, but they each take 0.1 seconds.</p>",
        "id": 325191475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675265817
    },
    {
        "content": "<p>That's <em>weird</em></p>",
        "id": 325191633,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675265865
    },
    {
        "content": "<p>Here's the behaviour on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Lattice</span>\n\n\n<span class=\"c1\">-- default maximum heartbeats = 20000</span>\n\n\n<span class=\"c1\">--set_option profiler true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">120000</span> <span class=\"c1\">-- 100000 (five times the default) is not enough</span>\n<span class=\"c1\">--set_option trace.Meta.synthInstance true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Module.End</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 325202541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675268587
    },
    {
        "content": "<p>About an interesting porting note in the file (after line 1048):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n<span class=\"c1\">--Porting note: Why doesn't inferInstance work here?</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.addCommGroup</span>\n</code></pre></div>\n<p>Replacing <code>[Ring R]</code> with <code>[Semiring R]</code> makes <code>inferInstance</code> work in the given example, so <code>inferInstance</code> seems unable to make use of the fact that <code>Ring</code> extends <code>Semiring</code> here. I don't know how to remedy this, but if someone has ideas, I believe this would solve quite a lot of issues in the file.</p>",
        "id": 325709682,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675452759
    },
    {
        "content": "<p>This sounds like it's caused by new structures to me</p>",
        "id": 325711117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453304
    },
    {
        "content": "<p>We had this problem a few times in mathlib3 too around <code>normed_space</code> (which is a new-style structure)</p>",
        "id": 325711219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453331
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra.to_normed_space'\">docs#normed_algebra.to_normed_space'</a></p>",
        "id": 325711298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453373
    },
    {
        "content": "<p>Are new structures the cause of some of the typeclass inference issues we're seeing in the port?</p>",
        "id": 325720920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675456999
    },
    {
        "content": "<p>My speculation is yes, but maybe that's based on a lean3-centric model. It would be possible to test the theory by removing any uses of <code>extend</code>s in the algebraic heirarchy and manually copying fields instead, but that's not a very pleasant thing to try or place to end up at</p>",
        "id": 325722346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675457569
    },
    {
        "content": "<p>we've made it to under 100 errors! <a href=\"/user_uploads/3121/yOvXi15WxsAPq2uEpC1DNZu3/image.png\">image.png</a><br>\nmost of these are instance failures for linear maps—from what I can tell.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yOvXi15WxsAPq2uEpC1DNZu3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yOvXi15WxsAPq2uEpC1DNZu3/image.png\"></a></div>",
        "id": 325760666,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1675479946
    },
    {
        "content": "<p>I just made a copy of this branch <code>LinAlgBas-bump</code> which merges <a href=\"https://github.com/leanprover-community/mathlib4/pull/2105\">!4#2105</a> into it. That branch now has no red errors anymore.</p>",
        "id": 326133338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675692950
    },
    {
        "content": "<p>I also cherry-picked all fixes into the original branch.</p>",
        "id": 326133383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675692962
    },
    {
        "content": "<p>Oh that's great news! So the bump is definitely solving problems as well as causing exciting new problems</p>",
        "id": 326147808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675694974
    },
    {
        "content": "<p>this issue seems to persist after bumping to 4.0.0-nightly-2023-02-10, however (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2178\">!4#2178</a>)</p>",
        "id": 327121339,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1676054266
    },
    {
        "content": "<p>Right, because the relevant PR to Lean 4 was reverted. Since it caused massive slowdowns in <code>linarith</code> (amongst other problems)</p>",
        "id": 327125712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676055719
    },
    {
        "content": "<p>As a temporary remedy, this command removes all red errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Ring.toNonAssocRing</span>\n</code></pre></div>",
        "id": 327344715,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676185331
    },
    {
        "content": "<p>This theorem is not simp-normal form in Lean 3 and Lean 4, but this doesn't get lint in Lean 3.<br>\nShould we remain <code>nolint simpNF</code>? Or erase <code>simp</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib\\LinearAlgebra\\Basic.lean L2513</span>\n<span class=\"kd\">@[simp, nolint simpNF]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.mem_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">submodule.mem_map_equiv</span> <span class=\"n\">Submodule.mem_map_equiv</span>\n</code></pre></div>",
        "id": 327349191,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676188935
    },
    {
        "content": "<p>I think: leave it like this, but add a porting note with your remark.</p>",
        "id": 327349760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676189345
    },
    {
        "content": "<p>Could it be that many of the non structure projection \"short cut\" instances which were helping in lean 3 are hindering in Lean 4?</p>",
        "id": 327355443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676193352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EBasic.20!4.231979/near/327349191\">said</a>:</p>\n<blockquote>\n<p>This theorem is not simp-normal form in Lean 3 and Lean 4, but this doesn't get lint in Lean 3.<br>\nShould we remain <code>nolint simpNF</code>? Or erase <code>simp</code>?</p>\n</blockquote>\n<p>What is the simp normal form in lean 3?</p>",
        "id": 327361739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676197010
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/linear_algebra/basic.lean L2005</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule.mem_map</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">mem_map_equiv</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- (∃ (y : M), y ∈ p ∧ ⇑e y = x) ↔ ⇑(e.symm) x ∈ p</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is the same in Lean 4.</p>",
        "id": 327367390,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676200080
    },
    {
        "content": "<p>The solution is lean4 is to increase the priority I think</p>",
        "id": 327367672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676200219
    },
    {
        "content": "<p>Does <code>simp</code> use the new lemma in lean 4, or end up in that lean 3 goal state?</p>",
        "id": 327367799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676200294
    },
    {
        "content": "<p>This ends up in the lean 3 goal state.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/LinearAlgebra/Basic.lean L2513</span>\n<span class=\"c1\">-- Porting note: This theorem is not simp-normal form in Lean 3 and Lean 4, but this got no lint</span>\n<span class=\"c1\">-- in Lean 3.</span>\n<span class=\"kd\">@[simp, nolint simpNF]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.mem_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">submodule.mem_map_equiv</span> <span class=\"n\">Submodule.mem_map_equiv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">mem_map_equiv</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- (∃ y, y ∈ p ∧ ↑e y = x) ↔ ↑(LinearEquiv.symm e) x ∈ p</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>",
        "id": 327368919,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676200944
    },
    {
        "content": "<p>I mean <code>simp</code> instead of <code>simp [-mem_map_equiv]</code></p>",
        "id": 327370398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676201773
    },
    {
        "content": "<p>Even using <code>simp</code>, the result is the same.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/LinearAlgebra/Basic.lean L2513</span>\n<span class=\"c1\">-- Porting note: This theorem is not simp-normal form in Lean 3 and Lean 4, but this got no lint</span>\n<span class=\"c1\">-- in Lean 3.</span>\n<span class=\"kd\">@[simp, nolint simpNF]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.mem_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">submodule.mem_map_equiv</span> <span class=\"n\">Submodule.mem_map_equiv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- (∃ y, y ∈ p ∧ ↑e y = x) ↔ ↑(LinearEquiv.symm e) x ∈ p</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>",
        "id": 327371077,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676202126
    },
    {
        "content": "<p>However, <code>@[simp high]</code> solved this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib/LinearAlgebra/Basic.lean L2513</span>\n<span class=\"c1\">-- Porting note: This theorem is not simp-normal form in Lean 3 and Lean 4, but this got no lint</span>\n<span class=\"c1\">-- in Lean 3.</span>\n<span class=\"kd\">@[simp high, nolint simpNF]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Submodule.mem_map</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">submodule.mem_map_equiv</span> <span class=\"n\">Submodule.mem_map_equiv</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"c1\">-- No goals</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>",
        "id": 327371903,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676202540
    },
    {
        "content": "<p>I commited this change (with erasing <code>nolint simpNF</code>). Thank you!</p>",
        "id": 327372245,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676202694
    },
    {
        "content": "<p>Does that match the Lean3 behavior now, or does lean3 also need a higher priority?</p>",
        "id": 327373926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676203370
    },
    {
        "content": "<p>That match the Lean3 behavior.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/linear_algebra/basic.lean L2005</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_map_equiv</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule.mem_map</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">τ₁₂</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">e.symm</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goals accomplished 🎉</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 327375461,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676204091
    },
    {
        "content": "<p>I think this problem is caused because the type class synthesizer fails to unify diamond inheritances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Hom</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Submodule.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Dfinsupp.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">ᵣ</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">iₘ₁</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">ᵣₘ₁</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">iₘ₂</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">ᵣₘ₂</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   AddCommGroup (M₁ →ₗ[R] M₂)</span>\n</code></pre></div>\n<p>In the above example, originally, this instance should be matched.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">LinearMap.addCommGroup</span> <span class=\"o\">{</span><span class=\"n\">R₁</span> <span class=\"n\">R₂</span> <span class=\"n\">N₁</span> <span class=\"n\">N₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₁</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₂</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">jₙ₁</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">N₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">jₙ₂</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">N₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">ᵣₙ₁</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R₁</span> <span class=\"n\">N₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">ᵣₙ₂</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R₂</span> <span class=\"n\">N₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ₁₂</span> <span class=\"o\">:</span> <span class=\"n\">R₁</span> <span class=\"bp\">→+*</span> <span class=\"n\">R₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">N₁</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">N₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, the synthesizer considers these are not def-eq.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">N₁</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">N₂</span><span class=\"o\">)</span>\n<span class=\"c1\">-- explicit</span>\n<span class=\"n\">AddCommGroup</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearMap</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">)))</span>\n    <span class=\"n\">M₁</span> <span class=\"n\">M₂</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"n\">M₁</span> <span class=\"n\">iₘ₁</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"n\">M₂</span> <span class=\"n\">iₘ₂</span><span class=\"o\">)</span>\n    <span class=\"n\">i</span><span class=\"bp\">ᵣₘ₁</span> <span class=\"n\">i</span><span class=\"bp\">ᵣₘ₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">=?=</span>\n<span class=\"n\">AddCommGroup</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearMap</span> <span class=\"bp\">?</span><span class=\"n\">R₁</span> <span class=\"bp\">?</span><span class=\"n\">R₂</span>\n    <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₁</span>\n    <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₂</span>\n    <span class=\"bp\">?</span><span class=\"n\">σ₁₂</span>\n    <span class=\"bp\">?</span><span class=\"n\">N₁</span> <span class=\"bp\">?</span><span class=\"n\">N₂</span>\n    <span class=\"bp\">?</span><span class=\"n\">jₙ₁</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"bp\">?</span><span class=\"n\">N₂</span> <span class=\"bp\">?</span><span class=\"n\">jₙ₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣₙ₁</span> <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣₙ₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The most obstacles to unify these is this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">R</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">))</span>\n  <span class=\"bp\">=?=</span>\n<span class=\"bp\">?</span><span class=\"n\">σ₁₂</span>\n</code></pre></div>\n<p>The key is these types.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">R</span> <span class=\"n\">i</span><span class=\"bp\">ᵣ</span><span class=\"o\">))</span>\n  <span class=\"bp\">=?=</span>\n<span class=\"bp\">@</span><span class=\"n\">RingHom</span> <span class=\"bp\">?</span><span class=\"n\">N₁</span> <span class=\"bp\">?</span><span class=\"n\">N₂</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">?</span><span class=\"n\">R₁</span> <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">?</span><span class=\"n\">R₂</span> <span class=\"bp\">?</span><span class=\"n\">j</span><span class=\"bp\">ᵣ₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The instances of <code>NonAssocSemiring</code> on LHS is derived from <code>NonAssocRing</code>, in contrast LHS, the instances of <code>NonAssocSemiring</code> on RHS is derived from <code>Semiring</code>.<br>\nI think this difference is the cause of red errors on <code>LinearAlgebra/Basic</code>, but I have no idea to fix this without disabling <code>Ring.toNonAssocRing</code>.</p>",
        "id": 327458361,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676256975
    },
    {
        "content": "<p>Is this related to <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> ?</p>",
        "id": 327469258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676266852
    },
    {
        "content": "<p>I think it is related.</p>",
        "id": 327471269,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1676268365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span> Thank you so much for this fix! I kicked the PR on the queue</p>",
        "id": 327471364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676268440
    },
    {
        "content": "<p>We'll have to find a long-term solution later. But at least this way the port is unblocked again!</p>",
        "id": 327471395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676268473
    }
]