[
    {
        "content": "<p>Could somebody look at my hack here:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3360/commits/d13b8a047372cef061fdeec692059ca1100216ca#r1181537830\">https://github.com/leanprover-community/mathlib4/pull/3360/commits/d13b8a047372cef061fdeec692059ca1100216ca#r1181537830</a></p>\n<p>This changes seemingly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">s.toProd.fst</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">b.toProd.fst</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">b.toProd.fst</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">s.toProd.fst</span>\n</code></pre></div>\n<p>and while this works as it changes some hidden <code>OrderDual α</code> to <code>α</code> (and the corresponding <code>LE</code> instance), I think there is a lot of potential for improvement with the current <code>OrderDual</code> API.  Maybe somebody  who knows <code>OrderDual</code> better could try to golf that hack and give an educated opinion on what would need to be done here to make working with <code>OrderDual</code> more pleasant.</p>",
        "id": 354861493,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682943719
    },
    {
        "content": "<p>What exactly is the problem? Is it that Lean unifies things wrongly?</p>",
        "id": 354861710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682943784
    },
    {
        "content": "<p>Have you tried doing <code>@lemma αᵒᵈ (_) _ _</code> (with some combination of <code>_</code> and <code>(_)</code> to be figured out)?</p>",
        "id": 354861954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682943858
    },
    {
        "content": "<p>The API for <code>OrderDual</code> is pretty much optimal with regards to Lean 3. It seems that Lean 4's new unification algorithm is throwing a massive wrench in the gears by preventing us from using our type synonyms to dualise lemmas. The better solution would be a dedicated dualisation tactic, but that's yet to be written.</p>",
        "id": 354863163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682944227
    },
    {
        "content": "<p>What are you finding sketchy about the API?</p>",
        "id": 354863381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682944296
    },
    {
        "content": "<p>I think it's just the problems caused by the new lean 4 unification algorithm I experienced here.</p>\n<p>The porting comment saying \"sketchy\" was before I realized what's happening and <code>a.toProd ≤ b.toProd → b.toProd ≤ a.toProd</code> seemed quite odd. I'll change that comment.</p>",
        "id": 354867421,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682945383
    },
    {
        "content": "<p>The lean3 proof here had basically the following three assumptions (in lean4 names)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">NonemptyInterval.toDualProd</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">NonemptyInterval.toDualProd</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">NonemptyInterval.toDualProd</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">NonemptyInterval.toDualProd</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">s.toProd.fst</span> <span class=\"bp\">≤</span> <span class=\"n\">s.toProd.snd</span>\n</code></pre></div>\n<p>and then <code>h₁.trans (h₃.trans h₂)</code> was a proof of type <code>b.toProd.fst ≤ c.toProd.snd</code>, so there were a lot of implicit things going on there that don't work anymore now. It took me a while to figure out what steps where supposed to happen.</p>",
        "id": 354869029,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682945790
    },
    {
        "content": "<p>Have you tried inserting <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderDual.toDual_le_toDual#doc\">docs4#OrderDual.toDual_le_toDual</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderDual.ofDual_le_ofDual#doc\">docs4#OrderDual.ofDual_le_ofDual</a> in the correct places?</p>",
        "id": 354869600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682945925
    },
    {
        "content": "<p>Those are type-correct versions of your <code>OrderDual.le_def</code></p>",
        "id": 354869672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682945948
    },
    {
        "content": "<p>The general rule in lean 3 was never to use defeq abuse in lemma statements, but to allow it in super-golfed proofs</p>",
        "id": 354872083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682946524
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ! That'sthe lemma I was missing</p>",
        "id": 354883376,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682949440
    },
    {
        "content": "<p>Yes, porting sometimes indicates Lean 3 proofs which strictly speaking shoudln't typecheck, and only do because of definitional abuse.</p>",
        "id": 354922242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682959164
    }
]