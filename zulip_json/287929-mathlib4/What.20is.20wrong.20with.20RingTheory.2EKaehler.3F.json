[
    {
        "content": "<p>This is from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7257\">#7257</a>.</p>\n<p><a href=\"/user_uploads/3121/LgpeNuKHgo0OVlky7bZVanzl/Screenshot-from-2023-09-26-18-20-47.png\">Screenshot-from-2023-09-26-18-20-47.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LgpeNuKHgo0OVlky7bZVanzl/Screenshot-from-2023-09-26-18-20-47.png\" title=\"Screenshot-from-2023-09-26-18-20-47.png\"><img src=\"/user_uploads/3121/LgpeNuKHgo0OVlky7bZVanzl/Screenshot-from-2023-09-26-18-20-47.png\"></a></div><p>Whatever could explain that? <code>RingTheory.Kaehler</code> is just a laughing stock. Every time someone sneezes in the vicinity of mathlib it takes slightly longer to compile. What is going on? Where does one start debugging?</p>",
        "id": 393288697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695748989
    },
    {
        "content": "<p>Line 419</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"n\">instR</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The profiler trace is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Elab.command] [2.316087s] /-- A shortcut instance to prevent timing out. Hopefully to be removed in the future. -/\n    local instance instR : Module R (KaehlerDifferential.ideal R S).cotangentIdeal :=\n      Submodule.module' _ ▼\n  [step] [0.032803s] expected type: Prop, term\n      IsScalarTower R S M ▶\n  [step] [0.033099s] expected type: Type (max v u), term\n      Module R (KaehlerDifferential.ideal R S).cotangentIdeal ▶\n  [step] [1.319372s] expected type: Module R { x // x ∈ Ideal.cotangentIdeal (KaehlerDifferential.ideal R S) }, term\n      Submodule.module' _ ▼\n    [Meta.synthInstance] [0.125008s] ✅ SMul R (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2) ▶\n    [Meta.isDefEq] [0.012858s] ✅ ?m.760468 =?= Submodule.Quotient.instSMul' (KaehlerDifferential.ideal R S ^ 2) ▶\n    [Meta.synthInstance] [0.847184s] ✅ Module R (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2) ▶\n    [Meta.isDefEq] [0.247414s] ✅ ?m.760469 =?= Submodule.Quotient.module' (KaehlerDifferential.ideal R S ^ 2) ▼\n      [assign] [0.247408s] ✅ ?m.760469 := Submodule.Quotient.module' (KaehlerDifferential.ideal R S ^ 2) ▼\n        [checkTypes] [0.247371s] ✅ (?m.760469 : Module R\n              (S ⊗[R] S ⧸\n                KaehlerDifferential.ideal R S ^\n                  2)) := (Submodule.Quotient.module'\n              (KaehlerDifferential.ideal R S ^ 2) : Module R (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2)) ▼\n          [] [0.247367s] ✅ Module R\n                (S ⊗[R] S ⧸\n                  KaehlerDifferential.ideal R S ^ 2) =?= Module R (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2) ▼\n            [] [0.012813s] ✅ S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2 =?= S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2 ▶\n            [] [0.234528s] ✅ NonUnitalNonAssocSemiring.toAddCommMonoid =?= AddCommGroup.toAddCommMonoid ▼\n              [] [0.234426s] ✅ NonUnitalNonAssocSemiring.toAddCommMonoid =?= AddCommMonoid.mk _ ▼\n                [] [0.234419s] ✅ NonAssocSemiring.toNonUnitalNonAssocSemiring.1 =?= AddCommMonoid.mk _ ▼\n                  [] [0.234356s] ✅ AddCommMonoid.mk _ =?= AddCommMonoid.mk _ ▼\n                    [] [0.025764s] ✅ RingCon.Quotient\n                          (Ideal.Quotient.ringCon\n                            (KaehlerDifferential.ideal R S ^ 2)) =?= S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2 ▶\n                    [] [0.208557s] ✅ AddMonoidWithOne.toAddMonoid =?= SubNegMonoid.toAddMonoid ▼\n                      [] [0.208449s] ✅ AddGroupWithOne.toAddMonoidWithOne.2 =?= AddGroup.toSubNegMonoid.1 ▼\n                        [] [0.208404s] ✅ AddMonoidWithOne.toAddMonoid =?= SubNegMonoid.toAddMonoid ▼\n                          [] [0.208378s] ✅ (Function.Surjective.addMonoidWithOne Quotient.mk'' _ _ _ _ _\n                                  _).2 =?= (Function.Surjective.subNegMonoid Quotient.mk'' _ _ _ _ _ _ _).1 ▼\n                            [] [0.208356s] ✅ AddMonoid.mk _ _ AddMonoid.nsmul =?= AddMonoid.mk _ _ AddMonoid.nsmul ▼\n                              [] [0.052568s] ✅ AddMonoid.nsmul =?= AddMonoid.nsmul ▶\n                              [] [0.025516s] ✅ RingCon.Quotient\n                                    (Ideal.Quotient.ringCon\n                                      (KaehlerDifferential.ideal R S ^\n                                        2)) =?= AddCon.Quotient\n                                    (QuotientAddGroup.con (Submodule.toAddSubgroup (KaehlerDifferential.ideal R S ^ 2))) ▶\n                              [] [0.078742s] ✅ AddMonoid.toAddSemigroup =?= AddMonoid.toAddSemigroup ▶\n                              [] [0.051482s] ✅ AddMonoid.toZero =?= AddMonoid.toZero ▶\n    [Meta.synthInstance] [0.051575s] ✅ IsScalarTower R (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2)\n          (S ⊗[R] S ⧸ KaehlerDifferential.ideal R S ^ 2) ▶\n    [Meta.isDefEq] [0.015287s] ✅ ?m.760470 =?= isScalarTower_R_right R S ▶\n  [Kernel] [0.025764s] typechecking declaration\nAll Messages (3)\n</code></pre></div>\n<p>and all that <code> [] [0.078742s] ✅ AddMonoid.toAddSemigroup =?= AddMonoid.toAddSemigroup ▶</code> stuff looks superficially like it's a <code>with</code> problem. <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> have you eliminated that possibility though?</p>\n<p>If </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">234528</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"bp\">▼</span>\n</code></pre></div>\n<p>is anything to go by, we're paying a lot in typeclass inference in that file.</p>",
        "id": 393290876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695749699
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6854\">#6854</a> is a more targeted elimination of <code>with</code> in <code>Function.Surjective.X</code>/ <code>Function.Injective.X</code> def's used in these instances. The regressions from CI are very similar.</p>",
        "id": 393291518,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695749911
    },
    {
        "content": "<p>This comports with my poking at the synthesis traces in this file and in AG</p>",
        "id": 393292068,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695750096
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6858\">#6858</a> is probably a better reference</p>",
        "id": 393294665,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695750855
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6854\">#6854</a> never compiled, was never benched as far as I can see, and has now been closed. Is that what you meant?</p>\n<p>OK maybe it's not a <code>with</code> issue: this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">489021</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SubNegMonoid.toAddMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubNegMonoid.toAddMonoid</span>\n</code></pre></div>\n<p>is unfolding to things which really aren't syntactically equal. The divergence is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">112779</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span>\n          <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n        <span class=\"n\">n</span> <span class=\"bp\">•</span>\n          <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span>\n          <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n        <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">057235</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span>\n          <span class=\"n\">x</span> <span class=\"bp\">//</span>\n          <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n            <span class=\"bp\">↑</span><span class=\"n\">AddSubgroup.opposite</span>\n              <span class=\"o\">(</span><span class=\"n\">Submodule.toAddSubgroup</span>\n                <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span>\n                    <span class=\"n\">R</span>\n                    <span class=\"n\">S</span> <span class=\"bp\">•</span>\n                  <span class=\"bp\">⊤</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span>\n          <span class=\"n\">x</span> <span class=\"bp\">//</span>\n          <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n            <span class=\"bp\">↑</span><span class=\"n\">AddSubgroup.opposite</span>\n              <span class=\"o\">(</span><span class=\"n\">Submodule.toAddSubgroup</span>\n                <span class=\"o\">(</span><span class=\"n\">Submodule.restrictScalars</span>\n                  <span class=\"n\">S</span>\n                  <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span>\n                      <span class=\"n\">R</span>\n                      <span class=\"n\">S</span> <span class=\"bp\">•</span>\n                    <span class=\"bp\">⊤</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Note the extra <code>Submodule.restrictScalars</code> on one side but not the other.</p>",
        "id": 393294839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695750915
    },
    {
        "content": "<p>Those weren't benched. But there were timeouts all over <code>Kaehler</code> (and <code>Jacobson</code>)</p>",
        "id": 393295020,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695750969
    },
    {
        "content": "<p>I don't see the AG consequences there but digging through things in AG landed me back at <code>Function.Injective</code>/<code>Function.Surjective</code> def's also</p>",
        "id": 393295238,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695751047
    },
    {
        "content": "<p>Oh I understand your posts now :-) I'm supposed to be looking at the CI failures! Yeah this is the sort of thing I meant by \"if you sneeze near mathlib it times out\". I think Jireh had a similar thing -- \"I'm working with C* algebras and I changed something and Kaehler broke even though it has nothing to do with what I'm doing\"</p>",
        "id": 393295405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695751097
    },
    {
        "content": "<p>But <a href=\"https://github.com/leanprover-community/mathlib4/pull/6858\">#6858</a> only really touches one file which seems like a nerve for <code>Kaehler</code></p>",
        "id": 393295559,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695751150
    },
    {
        "content": "<p>(It is not relevant for this discussion but there is also a ton of compiling <code>Kaehler</code>)</p>",
        "id": 393295785,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695751205
    },
    {
        "content": "<p>Oh wow it is exactly the two red files in the screenshot which start timing out all over the place in that PR. It would be really good to get to the bottom of this.</p>",
        "id": 393297944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695751880
    },
    {
        "content": "<p>Rebuilding it now</p>",
        "id": 393298023,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695751912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> is what you did for flt-regular maybe relevant for this file?</p>",
        "id": 393298051,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1695751923
    },
    {
        "content": "<p>Is there a link to the commit(s)?</p>",
        "id": 393298144,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695751946
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/pull/94/files\">Link</a></p>",
        "id": 393298641,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695752124
    },
    {
        "content": "<p>I just added instances like these<br>\n<a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378638708\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378638708</a><br>\nI think this is already tried on this file before?</p>",
        "id": 393298862,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1695752206
    },
    {
        "content": "<p>Yeah, and then <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> fights that change</p>",
        "id": 393298934,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695752234
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/30ecd69c-342d-4e8a-910a-8d71c0ebd171/to/d7e29aae-f9b9-4dcc-8687-b2288eff805a\">Bench</a></p>",
        "id": 393340920,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695767431
    },
    {
        "content": "<p>At this point does it makes sense to just discard RingTheory.Kaehler and rewrite it from scratch?</p>",
        "id": 393343780,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695769065
    },
    {
        "content": "<p>I don't know if that would help much</p>",
        "id": 393344464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695769377
    },
    {
        "content": "<p>I regularly run into timeouts when working with tensor products</p>",
        "id": 393344474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695769386
    },
    {
        "content": "<p>This seems to be the worst of the bad performers from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7257\">#7257</a></p>",
        "id": 393344722,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695769546
    },
    {
        "content": "<p>I was hoping for more unambiguously bad. I have no sense atm what differentiates the green from the red</p>",
        "id": 393345369,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695769940
    },
    {
        "content": "<p>Does making tensor products irreducible help with tensor product timeouts? I have a PR which does this but it correctly has conflicts and I've been traveling all day yesterday and today so I didn't fix it up yet.</p>\n<p>I think the problem with this file might be that there are some defeq non-diamonds regarding actions which take a long time to be proved defeq.</p>\n<p>That failure to synthesize Smul R R (for R some complicated commuting) is pretty weird though</p>",
        "id": 393345748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695770151
    },
    {
        "content": "<p>It's really rather handy to have the fact that <code>lift f (x \\otimes y) = f x y</code> be true by definition on the tensor product, which I think any attempt at irreducibility would lose</p>",
        "id": 393345980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695770290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/What.20is.20wrong.20with.20RingTheory.2EKaehler.3F/near/393344474\">said</a>:</p>\n<blockquote>\n<p>I regularly run into timeouts when working with tensor products</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7394\">#7394</a> is my current example of this, where building the definitions is impossible due to every edit taking multiple minutes to apply</p>",
        "id": 393355721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695775213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/What.20is.20wrong.20with.20RingTheory.2EKaehler.3F/near/393345980\">said</a>:</p>\n<blockquote>\n<p>It's really rather handy to have the fact that <code>lift f (x \\otimes y) = f x y</code> be true by definition on the tensor product, which I think any attempt at irreducibility would lose</p>\n</blockquote>\n<p>But should this really be a defeq? Do you get into DTT hell without it? Or is it just convenient, but could <code>simp</code> also take care of it?</p>",
        "id": 393387976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695788730
    },
    {
        "content": "<p>I think this is not the only problem...</p>",
        "id": 393398124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695793990
    },
    {
        "content": "<p>I would be really happy to drop defeq if it leads to performance improvements. After all, this defeq is an implementation detail, and a simp lemma would be just as good.</p>",
        "id": 393401693,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695795680
    }
]