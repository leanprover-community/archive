[
    {
        "content": "<p>For Yuri's Q about <code>ModelProd</code>, perhaps <code>no_index</code> might help?</p>",
        "id": 363844421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686000947
    },
    {
        "content": "<p>What is <code>no_index</code>?</p>",
        "id": 363844657,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686001039
    },
    {
        "content": "<p>It's an instruction to tell the discrimination tree used for lookup to not \"index\" the lookup on the term that <code>noindex</code> refers to</p>",
        "id": 363846817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686002035
    },
    {
        "content": "<p>How do I use it? Can't find it in Mathlib 4</p>",
        "id": 363866665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686013188
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ModelProd</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ModelProd</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo_eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ModelProd</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 363869505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015327
    },
    {
        "content": "<p>The problem with this solution is that we have to go over all lemmas that we may want to apply with a type synonym.</p>",
        "id": 368740581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687490372
    },
    {
        "content": "<p>E.g., vector bundles define a type synonym for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap#doc\">docs#ContinuousLinearMap</a> and lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.add_apply#doc\">docs#ContinuousLinearMap.add_apply</a> don't work on <code>Bundle.ContinuousLinearMap</code>s.</p>",
        "id": 368740715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687490451
    },
    {
        "content": "<p>There are many basic lemmas that we may want to use for <code>Bundle.ContinuousLinearMap</code>, some of them are generated by <code>@[simps]</code> and adding <code>no_index</code> to all of them doesn't look like a good solution.</p>",
        "id": 368740911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687490577
    }
]