[
    {
        "content": "<p>How do people feel about removing the <code>@[ext]</code> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.ext%3F#doc\">docs#Complex.ext?</a> It's annoying that I must manually stop <code>ext</code> before it duplicates every goal whenever I deal with complex-valued functions.</p>",
        "id": 393550101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695839834
    },
    {
        "content": "<p>Out of curiosity: Is there a way to override that locally?</p>",
        "id": 393550394,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1695839978
    },
    {
        "content": "<p>Last time I tried, you couldn't but it seems now you can!</p>",
        "id": 393550707,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695840115
    },
    {
        "content": "<p>I think <code>Complex.ext</code> should be locally turned into an ext-lemma when setting up the API for complex numbers. But when that's done, it probably shouldn't be an ext-lemma by default.</p>",
        "id": 393560116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695844025
    },
    {
        "content": "<p>Yeah that's exactly my thought.</p>",
        "id": 393560172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695844050
    },
    {
        "content": "<p>That was also my conclusion when I made the <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game/blob/49d6ca66ded53a56dcd8a3f6dc87dbd755fcd0ac/src/complex/Level_00_basic.lean#L200-L240\">complex number game</a>. It was super-useful to have it as an ext lemma when making the API and then annoying afterwards.</p>",
        "id": 393583452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695856498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2Eext/near/393550707\">said</a>:</p>\n<blockquote>\n<p>Last time I tried, you couldn't but it seems now you can!</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Which version of Std are/were you on?  I added the ability to locally remove ext attributes in <a href=\"https://github.com/leanprover/std4/pull/235\">https://github.com/leanprover/std4/pull/235</a></p>",
        "id": 393606328,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695870917
    },
    {
        "content": "<p>The first time I tried was beginning of July. Now I've just synced my project with mathlib. Are you telling me you can now <em>globally</em> erase <code>@[ext]</code>? I thought we could only locally erase attributes now.</p>",
        "id": 393615362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695876421
    },
    {
        "content": "<p>I think it would be great if you could PR a change so that @[ext] is only ever add locally to <code>Complex.ext</code>.</p>",
        "id": 394354320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696234220
    },
    {
        "content": "<p>I'm implementing this now because I just realized no one ever did it (no blame here!). Should it be a <em>local</em> attribute or a <em>scoped</em> attribute (in the <code>Complex</code> namespace). I was thinking local, and I <em>think</em> that's what people were suggesting above, but I wanted to be sure.</p>",
        "id": 407562959,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702413697
    },
    {
        "content": "<p>That appears to agree with Johan's suggestion. It makes sense to me too, since you should have to do more than <code>open Complex</code> to cause <code>Complex.ext</code> to be an <code>@[ext]</code> lemma.</p>",
        "id": 407564087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702414060
    },
    {
        "content": "<p>I definitely think it should be local and not scoped; this is not something we want by default when working with complex numbers.</p>",
        "id": 407564451,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702414195
    },
    {
        "content": "<p>Hmmm... I wonder if it's worth extending the syntax for <code>ext</code> so that it can accept a list of identifiers to use as <code>ext</code> lemmas. Probably not.</p>",
        "id": 407565032,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702414375
    },
    {
        "content": "<p>At that point it's probably easier to use the lemma you want manually with <code>refine</code>.</p>",
        "id": 407565297,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702414464
    },
    {
        "content": "<p>yes, unless it's being applied as part of a larger seequence of <code>ext</code> lemmas and you don't want to call them all manually. But you're right I think. I expect that to be a pretty niche use case.</p>",
        "id": 407565545,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702414561
    },
    {
        "content": "<p>In the spirit of composable interfaces, I'd say the current syntax is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">thm1</span> <span class=\"bp\">...</span> <span class=\"n\">thmn</span>\n\n<span class=\"kd\">theorem</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"bp\">...</span>\n   <span class=\"n\">ext</span>\n   <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's not very precise, but it's probably sufficient in most cases.</p>",
        "id": 407567503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702415153
    },
    {
        "content": "<p>Yeah, I'm at 3978/4012 and I only had this issue come up once.</p>",
        "id": 407569754,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702415959
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9010\">#9010</a></p>",
        "id": 407577235,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702418032
    }
]