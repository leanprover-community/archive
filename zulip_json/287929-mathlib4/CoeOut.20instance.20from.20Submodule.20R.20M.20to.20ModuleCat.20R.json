[
    {
        "content": "<p>The <code>CoeOut</code> instance from <code>Submodule R M</code> to <code>ModuleCat R</code> in the last two lines of <code>Mathlib.Algebra.Category.ModuleCat.Basic</code> causes this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">S₁</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">S₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">T</span> <span class=\"c1\">-- with 2nd import, says `Submodule R ↑(ModuleCat.of R { x // x ∈ S₁ })`</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- so this fails with 2nd import</span>\n</code></pre></div>\n<p>In Lean 3 the instance was just a <code>has_coe</code> and this example doesn't fail. Is the failure known/expected? (edited to minimise)</p>",
        "id": 376734733,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1689785951
    },
    {
        "content": "<p>I guess the contention here is <code>Submodule</code> -&gt; <code>ModuleCat</code> -&gt; <code>Type</code> vs <code>Submodule</code> -&gt; <code>Type</code></p>",
        "id": 376735358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689786078
    },
    {
        "content": "<p>The two paths are defeq. That was enough in Lean3 because they shared the same <code>coe</code> head symbol, but in Lean4 coercions are transparent so you need syntactic equality</p>",
        "id": 376735690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689786139
    },
    {
        "content": "<p>I see, thanks. What's the right approach - do I need to avoid this coercion?</p>",
        "id": 376738926,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1689786937
    },
    {
        "content": "<p>Oh, is the answer to this \"just use <code>Subtype.val</code>, since it's now syntactically equal to the coercion when the coercion works\"?</p>",
        "id": 377028890,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1689867686
    },
    {
        "content": "<p>I think the <code>Submodule -&gt; ModuleCat</code> coercion is just bad</p>",
        "id": 377029975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689867867
    },
    {
        "content": "<p>Does anything in mathlib use it?</p>",
        "id": 377030021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689867873
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/commit/7e6edb1c939762262b32b9bc288eff1fcd3ce9d3\">apparently not!</a> I'll open a PR</p>",
        "id": 377046754,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1689871127
    },
    {
        "content": "<p>It's probably a good idea to track down the blame in mathlib3 and link to the PR that added it</p>",
        "id": 377047321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689871258
    }
]