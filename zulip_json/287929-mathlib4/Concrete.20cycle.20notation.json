[
    {
        "content": "<p>In mathlib3, we have on-the-fly <code>dec_trivial</code> proofs of nodup in the cycle perm notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cycle.form_perm</span> <span class=\"bp\">↑</span><span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">cycle.nodup_coe_iff.mpr</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>while in mathlib4, we somehow lost that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"s2\">\"c[\"</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"s2\">\", \"</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Cycle.formPerm</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cycle.nodup_coe_iff.mpr</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The new notation does not work as expected, the <code>c[</code> lines don't work below, but my <code>cx[</code> variant does. <span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> any thoughts on what's going on here (you've edited these lines). There was no porting note.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Cycle.Concrete</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.SpecificGroups.Dihedral</span>\n\n<span class=\"n\">notation3</span> <span class=\"s2\">\"cx[\"</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"s2\">\", \"</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Cycle.formPerm</span> <span class=\"o\">(</span><span class=\"n\">Cycle.ofList</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">cx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">DihedralGroup</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sr</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 366024039,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686704899
    },
    {
        "content": "<p>I don't think the mathlib4 version looks like your quote</p>",
        "id": 366024145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686704981
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"c[\"</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"s2\">\", \"</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Cycle.formPerm</span> <span class=\"o\">(</span><span class=\"n\">Cycle.ofList</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Iff.mpr</span> <span class=\"n\">Cycle.nodup_coe_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 366024227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686705009
    },
    {
        "content": "<p>Yes, sorry, I copied the line out of the PR. Semantically, it's the same, the coercion is the <code>Cycle.ofList</code> and the <code>Iff.mpr</code> is said explicitly.</p>",
        "id": 366025551,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686705808
    },
    {
        "content": "<p>why doesn't <code>Cycle.formPerm</code> just use an auto param for the second argument? This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">formPerm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Cycle</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nodup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">),</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"n\">notation3</span> <span class=\"s2\">\"c[\"</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"s2\">\", \"</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">List.nil</span><span class=\"o\">)</span><span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Cycle.formPerm</span> <span class=\"o\">(</span><span class=\"n\">Cycle.ofList</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Cycle.formPerm ↑[0, 3, 2, 1] : Equiv.Perm (Fin 4)</span>\n</code></pre></div>\n<p>It does not delaborate properly though, Kyle's change was about making it work with the delaborator</p>",
        "id": 366025799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686705952
    },
    {
        "content": "<p>I think that pushing the autoParam into the definition makes sense.</p>",
        "id": 366027105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686706681
    }
]