[
    {
        "content": "<p>I am again facing tactic state explosion and I would really like to get an answer because this is a huge pain for teaching. Compare the following Lean 3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H.one_mem</span><span class=\"o\">,</span>\n    <span class=\"n\">group</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">H.inv_mem</span> <span class=\"n\">h_in</span><span class=\"o\">],</span>\n    <span class=\"n\">group</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H.mul_mem</span> <span class=\"n\">h_in</span> <span class=\"n\">k_in</span><span class=\"o\">],</span>\n    <span class=\"n\">group</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conjugate_one</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conjugate</span> <span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">conjugate</span><span class=\"o\">,</span> <span class=\"c1\">-- State isn't great, but better than in Mathlib4</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with its Lean 4 analogue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Group</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- Note crazy tactic state here</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">use</span> <span class=\"mi\">1</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H.one_mem</span>\n    <span class=\"n\">group</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- Note crazy tactic state is becoming even crazier</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">H.inv_mem</span> <span class=\"n\">h_in</span>\n    <span class=\"n\">group</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- But here it's getting better??</span>\n    <span class=\"n\">dsimp</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k_in</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H.mul_mem</span> <span class=\"n\">h_in</span> <span class=\"n\">k_in</span>\n    <span class=\"n\">group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conjugate_one</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conjugate</span> <span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">conjugate</span> <span class=\"c1\">-- crazy crazy tactic state</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 396343938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697135603
    },
    {
        "content": "<p>For instance at the beginning of the first proof, you get in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which isn't what you would hope for, which is <code>∃ (h : G), h ∈ H ∧ 1 = x * h * x⁻¹</code>, but is much better than the Lean 4 version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">∈</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n      <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n          <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n            <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n              <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</code></pre></div>",
        "id": 396344169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697135715
    },
    {
        "content": "<p>And in the last proof, after <code>unfold conjugate</code>, the Lean 3 goal is displayed as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>which again is not perfect, but the Lean 4 version is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">toSubmonoid</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">toSubsemigroup</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n              <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                      <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">},</span>\n          <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n              <span class=\"mi\">1</span> <span class=\"bp\">∈</span>\n                <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n                    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                        <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                          <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                            <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                              <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n          <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n            <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                <span class=\"o\">{</span>\n                      <span class=\"n\">toSubsemigroup</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n                          <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                                <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                  <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">},</span>\n                      <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"mi\">1</span> <span class=\"bp\">∈</span>\n                            <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n                                <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                                      <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                        <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                          <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n                                            <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toSubsemigroup.carrier</span> <span class=\"bp\">→</span>\n              <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span>\n                <span class=\"o\">{</span>\n                      <span class=\"n\">toSubsemigroup</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n                          <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                                <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                  <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">},</span>\n                      <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"mi\">1</span> <span class=\"bp\">∈</span>\n                            <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span>\n                                <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n                                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span>\n                                      <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                        <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n                                          <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n                                            <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">})</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toSubsemigroup.carrier</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 396344377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697135804
    },
    {
        "content": "<p>I think part of this is because Lean 4 is printing the types of proof fields, which is exploding the state. For me that setting is turned off, and I wonder if for teaching it might be an unhelpful option. In particular, in your first example my goal looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">carrier</span>\n</code></pre></div>",
        "id": 396344574,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697135888
    },
    {
        "content": "<p>I don't know whether this is related to new structures vs flat structures or if we are missing a delaborator. But we need to do something. It makes Lean+Mathlib a lot less usable for teaching, and it will also be a problem for ambitious formalization projects.</p>",
        "id": 396344609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697135898
    },
    {
        "content": "<p>Do you mean <code>set_option pp.proofs.withType false</code>?</p>",
        "id": 396344711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697135951
    },
    {
        "content": "<p>Yes</p>",
        "id": 396344739,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697135965
    },
    {
        "content": "<p>Indeed this already make things a little better.</p>",
        "id": 396344837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697136005
    },
    {
        "content": "<p>Actually a lot better, but still the last tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">toSubmonoid</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span> <span class=\"n\">toSubsemigroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">⁻¹</span><span class=\"o\">},</span> <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span> <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n      <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>which looks like nested classes are acting badly.</p>",
        "id": 396344920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697136053
    },
    {
        "content": "<p>Is there a <code>pp.etaReduce</code>? that seems like it would fix the extra <code>.carrier</code>?</p>",
        "id": 396344941,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697136064
    },
    {
        "content": "<p>No there isn't.</p>",
        "id": 396345317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697136249
    },
    {
        "content": "<p>And I also don't understand why <code>dsimp</code> does nothing after <code>unfold conjugate</code>.</p>",
        "id": 396345875,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697136436
    },
    {
        "content": "<p>It does in Lean 3.</p>",
        "id": 396345907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697136460
    },
    {
        "content": "<p>Would it be a good idea to have something like <code>pp.flattenStructures</code> to handle the nested structures part of the issue? Do we have something like that already somewhere? (I couldn’t find it.)</p>",
        "id": 396357921,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697141688
    },
    {
        "content": "<p>Do you understand why <code>dsimp</code> doesn't work?</p>",
        "id": 396358057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697141760
    },
    {
        "content": "<p>Hmm, no, I don't; I was thinking about how to clean up the appearance of <code>toSubmonoid</code> and <code>toSubSemigroup</code>.</p>",
        "id": 396362139,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697143672
    },
    {
        "content": "<p>Ah, I think I (sort of) figured it out: mathlib3's <code>dsimp</code> can rewrite using <code>subgroup.mem_mk</code> (now <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.mem_mk#doc\">docs#Subgroup.mem_mk</a>), whereas mathlib4's <code>dsimp</code> can't.</p>",
        "id": 396366090,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697145595
    },
    {
        "content": "<p>Why this difference exists, I'm not sure yet.</p>",
        "id": 396366232,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697145642
    },
    {
        "content": "<p>I think we're getting closer! It has to do with <code>↔</code>-theorems marked <code>@[simp]</code> which consist of <code>Iff.rfl</code>. These aren't recognized as <code>dsimp</code>-worthy in Lean 4, but are in Lean 3. Compare:</p>\n<p>Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- dsimp made no progress</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">defthm</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- dsimp made no progress</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">defthm'</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- unsolved goals `⊢ a`</span>\n</code></pre></div>\n<p>Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- (no progress) unsolved goals `⊢ w a`</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">defthm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- unsolved goals `⊢ a`</span>\n</code></pre></div>",
        "id": 396368116,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697146639
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20and.20Iff.2Erfl\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/dsimp.20and.20Iff.2Erfl</a></p>",
        "id": 396368265,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697146720
    },
    {
        "content": "<p>I see! It doesn't look like an issue was ever filed...should one be?</p>",
        "id": 396369218,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697147258
    },
    {
        "content": "<p>I looked around and I think it would be a minor change—we'd just want to mark these theorems as <code>rfl</code> theorems to <code>simp</code> internally, which (I think) amounts to just changing the condition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">2</span> <span class=\"bp\">||</span> <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">rfl</span> <span class=\"mi\">2</span>  <span class=\"k\">then</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">2</span> <span class=\"bp\">||</span> <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">rfl</span> <span class=\"mi\">2</span> <span class=\"bp\">||</span>\n    <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Iff.refl</span> <span class=\"mi\">1</span> <span class=\"bp\">||</span> <span class=\"n\">proof.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">Iff.rfl</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in <code>isRflProofCore</code> (in Lean.Meta.Tactic.Simp.SimpTheorems). (EDIT: actually a couple other small changes need to be made, but the gist is the same.) Though I haven't tested it out.</p>\n<p>I'd be happy to make an issue + a draft PR to see if it really is this simple, if there's support. :)</p>",
        "id": 396374327,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697149408
    },
    {
        "content": "<p>Yes please! It's an annoying regression.</p>",
        "id": 396374571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697149537
    },
    {
        "content": "<p>Yes, please.</p>",
        "id": 396375538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697150050
    },
    {
        "content": "<p>On it. :)</p>",
        "id": 396375753,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697150172
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover/lean4/pull/2678\">lean4#2678</a><br>\nDraft PR forthcoming...</p>",
        "id": 396377962,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697151555
    },
    {
        "content": "<p>(Subsequent messages moved to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/using.20.02klzzwxh.3A0000.03.20rfl.20proofs.20in.20.02klzzwxh.3A0001.03\">#mathlib4 &gt; using <code>Iff</code> rfl proofs in <code>dsimp</code></a>. Apparently I forgot to tick the box that automates this message... :) )</p>",
        "id": 397580217,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697751035
    }
]