[
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/2122\">mathlib4#2122</a> porting Tactic.Group<br>\nI'm pretty new to lean4, and this is my first PR to mathlib4, so any feedback would be much appreciated.<br>\nIn particular, the tactic really should really keep alternating between two auxiliary tactics (<code>simp</code> and <code>ring</code>), but I'm not sure how to do this and am currently just running <code>simp &lt;;&gt; ring &lt;;&gt; simp</code> which works for the test cases.</p>",
        "id": 326265725,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675730956
    },
    {
        "content": "<p>I haven't looked at the PR yet, but can't you do it essentially the same way as mathlib3? It used a call to <code>repeat</code> I think.</p>",
        "id": 326275735,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675739090
    },
    {
        "content": "<p>Nice work! :) I pulled the branch and tried using <code>repeat</code>, but it makes some applications of <code>group</code> very slow—e.g. when the target is some equality that group simplifies but does not prove. Is there some tactic of the form <code>fail_if_no_progress tacs</code> (or equivalent meta code)?</p>",
        "id": 326279300,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675742340
    },
    {
        "content": "<p>also here's a convenient example that fails without an extra ring call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">group</span>\n</code></pre></div>",
        "id": 326279837,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675742795
    },
    {
        "content": "<p>I wrote a quick one already that should do the trick (until/unless an existing version is found). :) <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>  is it ok if I commit on the PR?</p>",
        "id": 326281535,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675744501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Yes, go for it!</p>",
        "id": 326284689,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675747421
    },
    {
        "content": "<p>Maaaaaaybe that new tactic should have been a separate PR. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> But it's small and, I imagine, fairly low-use—and the port is chugging along—so maybe it's ok if we bundle it together with <code>group</code>.</p>\n<p>Or I can split it out and we can make it a PR dependence; that wouldn't be a problem.</p>",
        "id": 326305464,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675758719
    },
    {
        "content": "<p>Of course, we might still find that some tactic or functionality like <code>fail_if_no_progress</code> already existed and I just couldn't find it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> but it was a fun exercise in any case :)</p>",
        "id": 326311692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675760923
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 326394308,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1675785148
    },
    {
        "content": "<p>No problem, happy to! And nice work porting <code>group</code>! :D</p>",
        "id": 326456509,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675803443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> is <code>group</code> with your <code>failIfNoProgress</code> relatively quick? If not, is it in part because we're in <code>TacticM</code> instead of <code>MetaM</code> and there's more overhead?</p>",
        "id": 327130375,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676057283
    },
    {
        "content": "<p>A good test case would be line 114 in the open PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2143\">!4#2143</a>. If it works there and doesn't take forever then it's probably okay.</p>",
        "id": 327130765,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676057433
    },
    {
        "content": "<p>I just checked. It works.</p>",
        "id": 327131461,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676057707
    },
    {
        "content": "<p>Good to hear! :) I’m also going to take another look at <code>fail_if_no_progress</code> today if I can, and maybe improve it a little further.</p>",
        "id": 327131953,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676057903
    },
    {
        "content": "<p>I'm thinking we should:</p>\n<ul>\n<li>merge <code>Tactic.Group</code> as-is, bundled with the current version of <code>fail_if_no_progress</code></li>\n<li>enhance <code>fail_if_no_progress</code> afterwards to use simpler checks</li>\n</ul>\n<p>instead of perfecting <code>fail_if_no_progress</code> first, so that we don't slow down the port. Does that sound reasonable?</p>",
        "id": 327164749,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676071368
    },
    {
        "content": "<p>Agreed, but I don't have merge powers</p>",
        "id": 327178237,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676080745
    }
]