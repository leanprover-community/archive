[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this a bug in <code>ring</code>, or am I misunderstanding something? The call to <code>ring</code> succeeds and closes the goal, but it asks to try <code>ring_nf</code>. So <code>ring1</code> fails to close the goal, but <code>ring_nf</code> does? I was under the impression that this shouldn't happen.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span> <span class=\"c1\">-- I'm lazy</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- Try this: ring_nf</span>\n  <span class=\"c1\">-- also: no goals</span>\n</code></pre></div>",
        "id": 373312583,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688758460
    },
    {
        "content": "<p>this can certainly happen, that's why it makes the suggestion</p>",
        "id": 373342451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688769608
    },
    {
        "content": "<p>in this case it's because you need to unify the <code>x + y</code> and <code>y + x</code> inside <code>max</code></p>",
        "id": 373346559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688771694
    },
    {
        "content": "<p>This is happening to a student of mine. At the end of the day I am very confused why <code>ring</code> can <em>ever</em> both (a) close a goal and (b) tell the user they should be using another tactic instead. My student's work has 5 blue outputs telling them that they should be using <code>ring_nf</code> for no obvious reason. Both <code>ring</code> and <code>ring_nf</code> close all 5 goals. Is this expected behaviour?</p>",
        "id": 387265194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692965761
    },
    {
        "content": "<p>Are they situation where <code>ring</code> works on a subexpression of the goal, not the entire goal?</p>",
        "id": 387265381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692965835
    },
    {
        "content": "<p>I think this is expected, it is maybe also a hint that you are using <code>ring</code> which is a finishing tactic, in a potentially nonfinishing way.</p>",
        "id": 387266002,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692966080
    },
    {
        "content": "<p>But <code>ring</code> <em>is</em> closing the goals. It's just moaning anyway.</p>",
        "id": 387278521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692970971
    },
    {
        "content": "<p>That's why I said _potentially_ the difference is whether ring is being asked to prove an equality of rings (which it should finish on every time if the goal is a ring identity). Or just normalize all ring expressions it finds as subexpressions of the goal, which may happen to prove the goal but <code>ring</code> has no guarentee of doing so</p>",
        "id": 387278830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692971098
    },
    {
        "content": "<p>when <code>ring</code> moans about calling another tactic, it also calls that tactic itself</p>",
        "id": 387278833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971099
    },
    {
        "content": "<p>it's just saying \"you must have called me by mistake, here I'll call that tactic you meant to say but you may as well call that other tactic yourself\"</p>",
        "id": 387278972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971148
    },
    {
        "content": "<p>I am very unclear about why <code>ring</code> is telling me that I should not be using it when it is closing the goal.</p>",
        "id": 387279397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692971294
    },
    {
        "content": "<p>Is this situation unique to <code>ring</code>?</p>",
        "id": 387279548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692971351
    },
    {
        "content": "<p><code>simpa</code> does this too</p>",
        "id": 387280032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971517
    },
    {
        "content": "<p>it's basically a lint</p>",
        "id": 387280128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971530
    },
    {
        "content": "<p><code>polyrith</code> too</p>",
        "id": 387280278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971567
    },
    {
        "content": "<p>So I just tell the student to change to the \"non-finishing tactic\" <code>ring_nf</code> and ignore the fact that it closes the goal despite the existence of this tactic being precisely because we want a non-finishing <code>ring</code>?</p>",
        "id": 387281496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692971904
    },
    {
        "content": "<p>nf stands for normal form, not non-finishing</p>",
        "id": 387281576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971933
    },
    {
        "content": "<p>it can close goals</p>",
        "id": 387281641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971955
    },
    {
        "content": "<p>Probably if they want to write a very maintainable proof it should be something like <code>congr; ring</code>. Do you have examples you are thinking of?</p>",
        "id": 387281690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692971973
    },
    {
        "content": "<p>I thought the point of the normal form version of <code>ring</code> was to use it in non-finishing contexts?</p>",
        "id": 387281756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692971991
    },
    {
        "content": "<p>it is not necessarily finishing</p>",
        "id": 387281954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972028
    },
    {
        "content": "<p>Right! I get the impression that we're told that <code>ring_nf</code> has a second usage, namely to shut <code>ring</code> up when it closes the goal but randomly complains.</p>",
        "id": 387281976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972034
    },
    {
        "content": "<p>ring didn't close the goal, it failed and then called <code>ring_nf</code> which closed the goal</p>",
        "id": 387282075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972061
    },
    {
        "content": "<p><code>ring</code> closed the goal in the sense that I ran <code>ring</code> and the goal was closed.</p>",
        "id": 387282156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972076
    },
    {
        "content": "<p>Okay, but then what is <code>ring_nf</code> if not a subprocess of <code>ring</code>?</p>",
        "id": 387282224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692972093
    },
    {
        "content": "<p>I don't see the logic here. If you <em>want</em> <code>ring</code> to fail then why not just let it fail?</p>",
        "id": 387282238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972096
    },
    {
        "content": "<p>because otherwise you might not realize (1) that <code>ring_nf</code> exists and (2) it closes your goal</p>",
        "id": 387282338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972122
    },
    {
        "content": "<p>By this logic why don't we have <em>every</em> tactic calling <code>ring_nf</code> if it fails?</p>",
        "id": 387282538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972157
    },
    {
        "content": "<p>In my mind, <code>ring</code> is a big machine, calling several (sub)tactics, one of which is <code>ring_nf</code>. Is my mental picture wrong?</p>",
        "id": 387282563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692972163
    },
    {
        "content": "<p>the version that fails and does not play games with ring_nf is called <code>ring1</code></p>",
        "id": 387282565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972164
    },
    {
        "content": "<p>Great, so let's redefine <code>rw</code> to be <code>try rw; ring_nf</code> and have a new tactic <code>rw1</code> which is the old <code>rw</code>.</p>",
        "id": 387282890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972227
    },
    {
        "content": "<p>This is just like <code>tidy</code>, the simple to call tactic does a bunch of things, maybe more than you really ought to leave in a completed proof</p>",
        "id": 387283025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972250
    },
    {
        "content": "<p>as an aside, <code>rw</code> is already doing a similar thing</p>",
        "id": 387283267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972316
    },
    {
        "content": "<p>it calls <code>rfl</code> at the end, and you need <code>rewrite</code> if you don't want the trailing <code>rfl</code></p>",
        "id": 387283352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972334
    },
    {
        "content": "<p>That's a bit different though, since <code>rw []</code> solving a goal by <code>rfl</code> doesn't report any suggestion</p>",
        "id": 387283593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692972378
    },
    {
        "content": "<p>although it doesn't bug you about the difference since it's using a weak <code>rfl</code></p>",
        "id": 387283628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I think the thing to realize is that <code>ring</code> used to not complain at all, but they we decided \"actually, it shouldn't be used on these goals at all\". Instead of changing it to fail, which would be very annoying for new users, we changed it to complain and tell them to write something eles which is less annoying.</p>",
        "id": 387283647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692972389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20ring.3F/near/387283593\">said</a>:</p>\n<blockquote>\n<p>That's a bit different though, since <code>rw []</code> solving a goal by <code>rfl</code> doesn't report any suggestion</p>\n</blockquote>\n<p>it probably should imo</p>",
        "id": 387283697,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692972400
    },
    {
        "content": "<p>Maybe when <code>ring</code> calls <code>ring_nf</code> and it succeeds, it should <em>fail</em> with the helpful suggestion that <code>ring_nf</code> would succeed?</p>",
        "id": 387283788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692972415
    },
    {
        "content": "<p>If <code>ring</code> is just like <code>tidy</code> then are you suggesting that it should never occur in any mathlib code and should always be replaced by <code>ring_nf</code>, like <code>tidy</code> should be replaced with the output of <code>tidy?</code>?</p>",
        "id": 387283815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972419
    },
    {
        "content": "<p><code>ring</code> could certainly dress its suggestion up in the style of a linter warning</p>",
        "id": 387283926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972437
    },
    {
        "content": "<p>Right now the situation is that <code>ring</code> sometimes happily closes goals with no complaints, and sometimes closes goals with complaints, and sometimes doesn't close goals and complains. I think this makes it unique: none of the other suggestions of \"tactics which are like <code>ring</code>\" above have such a wide range of possibilities.</p>",
        "id": 387284193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972504
    },
    {
        "content": "<p>when <code>ring</code> succeeds, it is basically equivalent to <code>ring1</code> (and it doesn't waste its time doing something else) so there isn't much value in suggesting <code>ring1</code> there unless you are interested in using it for control flow</p>",
        "id": 387284194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972504
    },
    {
        "content": "<p>Mario, is <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20ring.3F/near/387283647\">my claim above</a> that this was a backwards-compatibility feature correct?</p>",
        "id": 387284388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692972560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20ring.3F/near/387283926\">said</a>:</p>\n<blockquote>\n<p><code>ring</code> could certainly dress its suggestion up in the style of a linter warning</p>\n</blockquote>\n<p>Why a linter warning and not a full error? It seems like <code>ring</code>'s suggestion to use <code>ring_nf</code> is more of a pointer to the user for what to try instead, and it's nice of it to try <code>ring_nf</code> for you ahead of offering the suggestion.</p>",
        "id": 387284416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692972565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  I believe so</p>",
        "id": 387284452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972573
    },
    {
        "content": "<p>I suppose it could be an error, although that's an interesting combination of diagnostics</p>",
        "id": 387284691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972621
    },
    {
        "content": "<p>since we have an error on top of an info message on top of an interesting final state</p>",
        "id": 387284829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972645
    },
    {
        "content": "<p>(the final state is important because it shows the uncancelled terms)</p>",
        "id": 387285004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692972683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20ring.3F/near/387284193\">said</a>:</p>\n<blockquote>\n<p>Right now the situation is that <code>ring</code> sometimes happily closes goals with no complaints, and sometimes closes goals with complaints, and sometimes doesn't close goals and complains. I think this makes it unique: none of the other suggestions of \"tactics which are like <code>ring</code>\" above have such a wide range of possibilities.</p>\n</blockquote>\n<p>Aah, this is false: <code>simpa</code> also has this property (sometimes it will close the goal and tell the user to use <code>simp</code> instead).</p>",
        "id": 387285522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692972800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20ring.3F/near/387282563\">said</a>:</p>\n<blockquote>\n<p>In my mind, <code>ring</code> is a big machine, calling several (sub)tactics, one of which is <code>ring_nf</code>. Is my mental picture wrong?</p>\n</blockquote>\n<p>Yes, that's not how it works. The <code>ring1</code> tactic is monolithic, and all it does is take both sides of an equality, evaluate them into a normal form, and if both sides are the same, it generates a proof of the original equality. The <code>ring_nf</code> tactic uses the internals of <code>ring1</code> and <code>simp</code> to evaluate subexpressions into a normal form, where it evaluates the expressions into a normal form to rewrite the expression.</p>\n<p>Then this is the <code>ring</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"o\">)</span> <span class=\"s2\">\"ring\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ring1</span> <span class=\"bp\">|</span> <span class=\"n\">ring_nf</span><span class=\"bp\">;</span> <span class=\"n\">trace</span> <span class=\"s2\">\"Try this: ring_nf\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387287610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692973417
    },
    {
        "content": "<p>Both <code>ring1</code> and <code>ring_nf</code> share the ring expression normalizer, but <code>ring_nf</code> has code supporting it that <code>ring1</code> doesn't have.</p>",
        "id": 387287899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692973511
    }
]