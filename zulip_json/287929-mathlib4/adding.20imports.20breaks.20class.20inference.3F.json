[
    {
        "content": "<p>I really do not understand what is going on here: this first bit works perfectly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Suppose now that I have a valuation ring, that I assume to be a DVR, is noetherian: I can <code>import Mathlib.RingTheory.Valuation.ValuationSubring</code> and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ValuationSubring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">w.valuationSubring</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">w.valuationSubring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>is also OK. But if I am importing <code>Mathlib.RingTheory.DedekindDomain.AdicValuation</code> as well, the second code breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.AdicValuation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ValuationSubring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">w.valuationSubring</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">w.valuationSubring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n<span class=\"c1\">-- failed to synthesize</span>\n<span class=\"c1\">--  IsNoetherian (↥Valuation.valuationSubring w) (↥Valuation.valuationSubring w)</span>\n<span class=\"c1\">-- (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n</code></pre></div>\n<p>(and I have tried all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn><mo>=</mo><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"fraktur\">S</mi><mn>3</mn></msub><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">6=\\vert\\mathfrak{S}_3\\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathfrak\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span> permutations of the <code>import</code> with the same result). Nevertheless, the first still works, and therefore I can make do with the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Valuation.ValuationSubring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DedekindDomain.AdicValuation</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span> <span class=\"c1\">--this is still OK</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">L</span> <span class=\"bp\">Γ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">w.valuationSubring</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsNoetherianRing</span> <span class=\"n\">w.valuationSubring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span> <span class=\"c1\">-- it works!</span>\n</code></pre></div>\n<p>So I am mainly puzzled by three things:</p>\n<ol>\n<li>Adding an  <code>import</code> breaks an <code>infer_instance</code>;</li>\n<li>Adding <em>this</em> import breaks the inference that the valuation subring is Noetherian, but here the noetherianity is just a consequence of the assumption that <code>w.valuationSubring</code> be a DVR (and should really have nothing to do about the fact that it is a valuation subring, rather than an arbitrary CommRing that is a DVR), and for such a ring <code>foo</code> works;</li>\n<li>The lemma <code>foo</code> does nothing but applying an instance, yet <code>apply foo</code> is able to close <code>bar</code>, but <code>infer_instance</code> is not.</li>\n</ol>",
        "id": 400432240,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699228868
    },
    {
        "content": "<p>Adding the import just makes typeclass inference time out because it goes on a wild goose chase. You can fix it with <code>set_option synthInstance.maxHeartbeats 200000 in</code>.</p>",
        "id": 400434560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699230623
    },
    {
        "content": "<p>What’s the trace? Is there something we need to fix?</p>",
        "id": 400434766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699230786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">874236</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span>\n                      <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">Valuation.valuationSubring</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>is what it finds with the extra import.</p>",
        "id": 400434817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699230825
    },
    {
        "content": "<p>It's one of these again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918449</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918426</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918418</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918405</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Valuation.valuationSubring</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918349</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"n\">Function.Injective.ring</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918273</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing</span> <span class=\"bp\">=?=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective.mulZeroClass</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n                                    <span class=\"k\">let</span> <span class=\"n\">src_1</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective.addGroupWithOne</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n                                    <span class=\"k\">let</span> <span class=\"n\">src_2</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective.addCommGroup</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n                                    <span class=\"k\">let</span> <span class=\"n\">src_3</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective.monoid</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n                                    <span class=\"k\">let</span> <span class=\"n\">src_4</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Injective.distrib</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n                                    <span class=\"n\">Ring.mk</span> <span class=\"n\">AddGroupWithOne.zsmul</span> <span class=\"n\">_</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 400434892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699230855
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                     <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">918170</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.mk</span> <span class=\"n\">Ring.zsmul</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.mk</span> <span class=\"n\">AddGroupWithOne.zsmul</span> <span class=\"n\">_</span> <span class=\"bp\">▼</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">347698</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.zsmul</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddGroupWithOne.zsmul</span> <span class=\"bp\">▶</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">561553</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▼</span>\n                                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">561492</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">Function.Injective.ring</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▼</span>\n                                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">561451</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▼</span>\n                                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">276237</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">=?=</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▶</span>\n                                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">616143</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">_</span> <span class=\"bp\">▶</span>\n                                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">337922</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddMonoidWithOne.toOne</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoidWithOne.toOne</span> <span class=\"bp\">▶</span>\n                                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">330563</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddMonoidWithOne.toNatCast</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoidWithOne.toNatCast</span> <span class=\"bp\">▶</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">336362</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toNeg</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddGroupWithOne.toNeg</span> <span class=\"bp\">▶</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">338485</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSub</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddGroupWithOne.toSub</span> <span class=\"bp\">▶</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">333761</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddGroupWithOne.toIntCast</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>etc</p>",
        "id": 400434959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699230918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/adding.20imports.20breaks.20class.20inference.3F/near/400434817\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">874236</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span>\n                      <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">Valuation.valuationSubring</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>is what it finds with the extra import.</p>\n</blockquote>\n<p>Ah, so it tries to understand that it is a domain as a subring of a domain instead of just seeing that it is a DVR?</p>",
        "id": 400478759,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699257333
    }
]