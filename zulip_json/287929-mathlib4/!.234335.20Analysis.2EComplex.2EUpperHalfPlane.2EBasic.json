[
    {
        "content": "<p>I'm not managing to translate these at all - is there someone with notation / coercion experience who'd like to take a look?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mathport name: «expr↑ₘ »</span>\n<span class=\"kn\">local</span> <span class=\"kd\">prefix</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"s2\">\"↑ₘ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- mathport name: «expr↑ₘ[ ]»</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"s2\">\"↑ₘ[\"</span> <span class=\"n\">R</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- mathport name: «exprGL( , )⁺»</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"GL(\"</span> <span class=\"n\">n</span> <span class=\"s2\">\", \"</span> <span class=\"n\">R</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\"⁺\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Matrix.GLPos</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 361258319,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685091160
    },
    {
        "content": "<p>I think we already solved this problem in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SpecialLinearGroup#src\">src4#SpecialLinearGroup</a> which has the same notation trick</p>",
        "id": 361269320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685094037
    },
    {
        "content": "<p>At least, for the first two</p>",
        "id": 361269352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685094048
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/a6885a1a7f1c301ca3061ca678024788cf82aa54/Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.lean#L91\">https://github.com/leanprover-community/mathlib4/blob/a6885a1a7f1c301ca3061ca678024788cf82aa54/Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.lean#L91</a></p>",
        "id": 361269639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685094123
    },
    {
        "content": "<p>I've been copying from there, but somehow can't get it to work</p>",
        "id": 361316718,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685105275
    }
]