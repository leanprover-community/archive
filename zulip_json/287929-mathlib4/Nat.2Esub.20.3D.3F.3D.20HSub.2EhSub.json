[
    {
        "content": "<p>What's the right way to check (on the meta/expression level) that a particular <code>HSub.hSub</code> is (or is not) <code>Nat.sub</code>?</p>\n<p>They're not defeq: <code>Nat.sub</code> is not defeq to  <code>@HSub.hSub.{0, 0, 0} Nat Nat Nat (@instHSub.{0} Nat instSubNat)</code>. (Is this a transparency issue, maybe?)</p>\n<p>(This is for the <code>norm_num</code> extension for <code>Nat.sub</code>, if the context is helpful!)</p>",
        "id": 325288973,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675293862
    },
    {
        "content": "<p>Though, <code>Nat.sub a b</code> <em>is</em> defeq to <code>HSub.hSub a b</code>. What's going on there?</p>",
        "id": 325289785,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294300
    },
    {
        "content": "<p>you have to unfold instances to see them as refl:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">HSub.hSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instSubNat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">HSub.hSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instSubNat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">HSub.hSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instSubNat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 325290039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294427
    },
    {
        "content": "<p>which makes sense since <code>instSubNat</code> is an instance, and not a reducible definition</p>",
        "id": 325290163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294470
    },
    {
        "content": "<p>ok, I see! instances have a separate transparency which is not seen through by default in isDefeq? Hmmm...I take it <code>rfl</code> uses a different transparency than <code>isDefeq</code> by default then?</p>",
        "id": 325290357,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294569
    },
    {
        "content": "<p>is there a general rule describing what uses what transparency?</p>",
        "id": 325290406,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294599
    },
    {
        "content": "<p>no, <code>rfl</code> and <code>isDefEq</code> use the current transparency set in the <code>MetaM</code> monad</p>",
        "id": 325290459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294636
    },
    {
        "content": "<p><code>with_reducible</code> (the tactic combinator) and <code>withReducible</code> (the function) change this setting to <code>.reducible</code> instead of whatever is inherited</p>",
        "id": 325290606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294708
    },
    {
        "content": "<p>do tactics set a different initial transparency than you'd see in e.g. norm_num extensions then? this makes sense, I'm just wondering why they're different in different places</p>",
        "id": 325290656,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294735
    },
    {
        "content": "<p>that's why <code>with_reducible</code> is able to change the behavior of the <code>rfl</code> tactic in this example</p>",
        "id": 325290666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294742
    },
    {
        "content": "<p>The default transparency is <code>.default</code>, normally tactics will be running in that context</p>",
        "id": 325290701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294768
    },
    {
        "content": "<p>norm_num extensions are also running with the same inherited transparency</p>",
        "id": 325290744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294799
    },
    {
        "content": "<p>I don't know what code you are talking about specifically though</p>",
        "id": 325290860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675294838
    },
    {
        "content": "<p>interesting, <code>guard &lt;|← withNewMCtxDepth &lt;| isDefEq f q(Nat.sub)</code> fails (<code>guard &lt;|← withNewMCtxDepth &lt;| withReducibleAndInstances &lt;| isDefEq f q(Nat.sub)</code> succeeds) when evaluated pretty much at the top of <code>evalSub</code></p>",
        "id": 325291105,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294958
    },
    {
        "content": "<p>(aside: do I need the new metavariable context depth? I couldn't see any metavariables that might be accidentally set but just wanted to be sure)</p>",
        "id": 325291156,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675294994
    },
    {
        "content": "<p>the metavariables in question are in <code>f</code></p>",
        "id": 325291193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295018
    },
    {
        "content": "<p>you don't want the user to have a <code>HSub.hSub ?A ?inst 1 2</code> expression where calling <code>norm_num</code> assigns <code>?A := Nat</code> just because we decided to see whether we can evaluate it as <code>Nat.sub</code></p>",
        "id": 325291365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295095
    },
    {
        "content": "<p>I think it would be better to use <code>HSub.hSub (\\alpha := Nat)</code> instead of <code>Nat.sub</code> here since that's the more common expression to find</p>",
        "id": 325291673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295286
    },
    {
        "content": "<p>re: mvars, makes sense! unification is pretty strong, then...</p>",
        "id": 325291764,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2Esub.20.3D.3F.3D.20HSub.2EhSub/near/325291673\">said</a>:</p>\n<blockquote>\n<p>I think it would be better to use <code>HSub.hSub (\\alpha := Nat)</code> instead of <code>Nat.sub</code> here since that's the more common expression to find</p>\n</blockquote>\n<p>hmm, are we sure no one ever gives another <code>HSub</code> instance for <code>Nat</code> though? after all <code>HSub.hSub : Nat → Nat → Int</code> would make sense, and I wouldn't want to try the <code>Nat.sub</code> part of the extension for that</p>",
        "id": 325291989,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295485
    },
    {
        "content": "<p>the two expressions are defeq, it's just that you will more often see nat subtraction expressed using <code>-</code> than <code>Nat.sub</code></p>",
        "id": 325292097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295536
    },
    {
        "content": "<p>right, I just want to guard against false positives if there's another <code>HSub</code> instance</p>",
        "id": 325292152,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295580
    },
    {
        "content": "<p>so this would avoid having to unfold the instance unless it is a weird instance</p>",
        "id": 325292160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295586
    },
    {
        "content": "<p>or maybe setting all three parameters to <code>Nat</code> would be safe</p>",
        "id": 325292177,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295599
    },
    {
        "content": "<p>that expression (inside <code>Qq</code>) will elaborate it at tactic declaration time, to the <code>Nat.sub</code> instance</p>",
        "id": 325292214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295620
    },
    {
        "content": "<p>you can mouse over the expression and observe that all three parameters are set regardless</p>",
        "id": 325292297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295646
    },
    {
        "content": "<p>if a <code>Nat -&gt; Nat -&gt; Int</code> instance was added, it wouldn't change anything unless it was added upstream of <code>NormNum.Basic</code>, and even then it would probably not be selected since the <code>Nat -&gt; Nat -&gt; Nat</code> instance is a default instance</p>",
        "id": 325292405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675295718
    },
    {
        "content": "<p>ah, it's a dependency and elaboration time thing, got it</p>",
        "id": 325292464,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295762
    },
    {
        "content": "<p>(unless we <em>changed</em> the default instance in mathlib...which might be nice...one day...far in the future... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) (but, yeah, I see your point! makes sense)</p>",
        "id": 325292725,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675295897
    },
    {
        "content": "<p>also btw I traced it and apparently <code>norm_num</code> extensions run under <code>.reducible</code> transparency, at least when using <code>norm_num1</code>, which I suppose makes intuitive sense, since we don't want to be diving too deep into things. the more you know.</p>",
        "id": 325293350,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675296225
    },
    {
        "content": "<p>(also I guess <code>simp</code> is run <em>before</em> norm_num extensions when using <code>norm_num</code>? I don't get any <code>norm_num</code> traces in some cases when I delete the <code>1</code>. interesting.)</p>",
        "id": 325293495,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675296292
    },
    {
        "content": "<p>who is setting that transparency?</p>",
        "id": 325294695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675297022
    },
    {
        "content": "<p>I didn't see any such things in <code>NormNum.Core</code>, but I didn't look in <code>simp</code></p>",
        "id": 325294755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675297064
    },
    {
        "content": "<p>I didn't see anything in <code>Core</code> either, so I figured <code>simp</code>—I'll take a look</p>",
        "id": 325294865,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675297122
    },
    {
        "content": "<p><code>Simp.main</code> calls <code>withSimpConfig</code> which uses <code>withReducible</code></p>",
        "id": 325294920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675297149
    },
    {
        "content": "<p>ok, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1997\">!4#1997</a> works! (<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>) (but I wonder if my style is off re: how I structured the branches.)</p>",
        "id": 325297221,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675298441
    },
    {
        "content": "<p>oh, re: github comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/1997\">!4#1997</a>, what's the best way to separate the PR dependency <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> after having set it up like this? honestly I have no experience with this kind of thing unfortunately.  (\"delete it all and make a new PR\" is my go-to strategy.)</p>\n<p>But, if it helps, only the 2 commits at the end belong to this PR.</p>",
        "id": 325297798,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675298786
    },
    {
        "content": "<p>as long as you retain the branch name, you don't need to close/make a new PR, no matter how much git surgery you do</p>",
        "id": 325297904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675298867
    },
    {
        "content": "<p>I would try doing a rebase to master, there is a way to say \"move all the commits from HEAD~2 to now onto master\"</p>",
        "id": 325298045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675298956
    },
    {
        "content": "<p>Another way to clear all the history is to <code>git reset master</code>, which resets the branch to master (undoing all your commits) but without actually changing the files in the working directory, so you end up in a state as if you had just made all the changes and they are awaiting staging/commit. So you can go through the changes, revert anything that you don't want in the PR, and then make a single commit with everything you do want</p>",
        "id": 325298302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675299115
    },
    {
        "content": "<p>ok, I'll google how to spell that and/or just do some copy-pasting! (<code>Nat.sub</code> is so small compared to <code>ofScientific</code>)</p>\n<p>btw the point of the dependency was to make it easy to work on top of this branch with all finished features for <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>—but, I guess merging is possible? 😅 maybe it would be best to make a non-PR'd branch <code>norm_num-all</code> or something which stayed up to date with all finished but not-yet-merged features</p>",
        "id": 325298492,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675299218
    },
    {
        "content": "<p>I think you should let Heather do that locally, assuming there are no nontrivial interactions between the PRs</p>",
        "id": 325298679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675299329
    },
    {
        "content": "<p>if there are, then they should probably be dependent PRs</p>",
        "id": 325298691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675299347
    },
    {
        "content": "<p>I think this one can be separated</p>",
        "id": 325298728,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675299363
    },
    {
        "content": "<p>however, <code>ofScientific</code> is used for teaching prior to <code>Nat.sub</code>, so it's \"higher priority\" in a sense</p>",
        "id": 325298806,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675299401
    },
    {
        "content": "<p>also I'm not sure how it works for teaching—a branch might be useful if all students are using it or something. but I'll let Heather direct what should happen here</p>",
        "id": 325298851,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675299435
    },
    {
        "content": "<p>it's also a lot harder to review :P</p>",
        "id": 325298863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675299443
    },
    {
        "content": "<p>lol true</p>",
        "id": 325298880,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675299455
    },
    {
        "content": "<p>the commit history of that PR is also in shambles, there are a ton of things which seem to be from old branches</p>",
        "id": 325299083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675299593
    },
    {
        "content": "<p>right—I'll try to fix that later! for now <a href=\"https://github.com/leanprover-community/mathlib4/pull/1997\">!4#1997</a> seems to be cleaned up</p>",
        "id": 325300330,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675300494
    },
    {
        "content": "<p>When you say it should be a separate <code>norm_num</code> extension: do we match against <code>_ - _, Sub.sub _ _, Nat.sub _ _</code> in the new extension?</p>",
        "id": 325302568,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675302451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2Esub.20.3D.3F.3D.20HSub.2EhSub/near/325298679\">said</a>:</p>\n<blockquote>\n<p>I think you should let Heather do that locally, assuming there are no nontrivial interactions between the PRs</p>\n</blockquote>\n<p>Yup, I'm maintaining a branch<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/tree/hrmacbeth-math2001\">https://github.com/leanprover-community/mathlib4/tree/hrmacbeth-math2001</a><br>\nwhich has all the un-merged features I need (currently <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1897\">!4#1897</a>,  <a href=\"https://github.com/leanprover-community/mathlib4/pull/1999\">!4#1999</a>, and I will add in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1997\">!4#1997</a>!)</p>",
        "id": 325304382,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675304061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2Esub.20.3D.3F.3D.20HSub.2EhSub/near/325302568\">said</a>:</p>\n<blockquote>\n<p>When you say it should be a separate <code>norm_num</code> extension: do we match against <code>_ - _, Sub.sub _ _, Nat.sub _ _</code> in the new extension?</p>\n</blockquote>\n<p><code>(_ : Nat) - _, Sub.sub (_ : Nat) _, Nat.sub _ _</code></p>",
        "id": 325306731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675305950
    },
    {
        "content": "<p>ah...that transparency issue is actually a problem for most of the extensions (e.g. <code>Mul.mul</code> doesn't work)</p>",
        "id": 325307962,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675306861
    },
    {
        "content": "<p>do we prepend each defeq check with <code>withReducibleAndInstances</code> or do we do multiple defeq checks? (is <code>||</code> short-circuited at the stage of evaluation we need it to be?)</p>",
        "id": 325308152,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675306989
    },
    {
        "content": "<p>also, separate PR or just deal with it in this PR?</p>",
        "id": 325308226,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675307043
    },
    {
        "content": "<p>we could put <code>withReducibleAndInstances</code> in the norm_num harness</p>",
        "id": 325312386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675310159
    },
    {
        "content": "<p>hmm, you mean set the transparency in norm_num right before the <code>eval</code>? like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A simp plugin which calls `NormNum.eval`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tryNormNum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Simp.Step</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span> <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducibleAndInstances</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"n\">post</span><span class=\"o\">))</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>(not sure what you mean by harness tbh, just going off vibes <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 325319642,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675316543
    },
    {
        "content": "<p>that definitely works, so I'll commit it to <a href=\"https://github.com/leanprover-community/mathlib4/pull/1997\">!4#1997</a>, and if we don't like it we can revert it</p>",
        "id": 325320360,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675317160
    },
    {
        "content": "<p>probably better to put it on the norm_num eval itself (line 527 <code>ext.eval e</code> in <code>derive</code>)</p>",
        "id": 325322153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675318314
    },
    {
        "content": "<p>cool, done :)</p>",
        "id": 325331362,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675323438
    },
    {
        "content": "<p>btw, cleaned up <code>ofScientific</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a><br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2Esub.20.3D.3F.3D.20HSub.2EhSub/near/325299083\">said</a>:</p>\n<blockquote>\n<p>the commit history of that PR is also in shambles, there are a ton of things which seem to be from old branches</p>\n</blockquote>\n<p>history has been rewritten and that PR now has just 13 commits. :)</p>",
        "id": 325344739,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675328749
    }
]