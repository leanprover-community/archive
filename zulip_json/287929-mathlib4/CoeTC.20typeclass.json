[
    {
        "content": "<p>I am still building up my understanding of coercions in Lean 4. Looking at the source in core <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Coe.lean#L132-L139\">here</a> I note that the guidance is not to use <code>CoeTC</code> directly. However if I search Mathlib4 for instances I find lots. Even <a href=\"https://github.com/leanprover-community/mathlib4/search?q=instance+%3A+CoeTC\">this basic search</a> shows we have many.</p>",
        "id": 339823601,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678097042
    },
    {
        "content": "<p>Can someone who understands this properly comment on this? In particular is it correct that we have these instances. See also <a href=\"https://github.com/leanprover-community/mathlib4/pull/2637#discussion_r1125663661\">this comment</a> for my motivation.</p>",
        "id": 339823901,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678097103
    },
    {
        "content": "<p>I suspect it's caused by <a href=\"https://github.com/leanprover-community/mathlib4/blob/17abfa705cdef525a0d7e3c41d3b78c1fed8c9aa/Mathlib/Init/Align.lean#L37\"><code>#align has_coe_t CoeTC</code></a> here. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTC#doc\">docs4#CoeTC</a> do behave the same in terms of composition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe\">docs#has_coe</a> / <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Coe#doc\">docs4#Coe</a> so it makes some level of sense that the automated port matches them.</p>",
        "id": 339825487,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678097485
    },
    {
        "content": "<p>As for manual porting, I believe it's best to replace new instances of <code>CoeTC</code> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTail#doc\">docs4#CoeTail</a>, which should have the same semantics as the Lean 3 usages of <code>has_coe_t</code>.</p>",
        "id": 339826068,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678097615
    },
    {
        "content": "<p>I see, so these <code>CoeTC</code> instances in Mathlib4 are generated by mathport when it sees <code>has_coe_t</code> instances in Mathlib3. (Indeed looking <a href=\"https://github.com/leanprover-community/mathlib4/pull/2269/commits/0a01f7a20262b08d1fb3f17d1a27c9286e4f029c\">here</a> I confirmed this is the case for the one that I encountered.) But you're saying that it might be better if instead mathport generated instances of <code>CoeTail</code>?</p>",
        "id": 339829783,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678098449
    },
    {
        "content": "<p>I'm not sure if that is possible because we don't want to have instances like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_trans\">docs#coe_trans</a> returning a <code>CoeTail</code>. Although the exceptions to aligning <code>has_coe_t</code> to <code>CoeTail</code> should be easily enumerable, and in fact probably consist of the set { <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_base\">docs#coe_base</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_trans\">docs#coe_trans</a> }</p>",
        "id": 339833874,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678099614
    },
    {
        "content": "<p>OK thanks. Perhaps there is some small improvement to be made but it doesn't seem like a priority.</p>",
        "id": 339835742,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678100160
    },
    {
        "content": "<p>I'm grateful for the explanations.</p>",
        "id": 339835807,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678100169
    }
]