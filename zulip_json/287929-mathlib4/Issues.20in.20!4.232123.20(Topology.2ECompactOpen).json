[
    {
        "content": "<p>I looked at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2123\">!4#2123</a>, and was able to fix a couple of issues. I left <code>continuous_comp'</code> in a place where it's mostly together, but line 148 has an error despite all the types lining up between the Lean 3 and 4 sides and no apparent implicit issues or such. It appears to be an issue where <code>(φ, ψ).fst ∈ {φ : C(α, β) | ⇑φ '' K ⊆ interior L}</code> can be seen as a subset relation in Lean 3 and fails to typecheck in Lean4. It's frustrating because when I give Lean 4 a placeholder, or use <code>library_search</code> I get back the same type that the proof is providing.</p>\n<p>(The second issue is is also a mystery to me)...</p>",
        "id": 326626327,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675872389
    },
    {
        "content": "<p>It is quite strange, but here is a hacky workaround that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hφ</span>\n</code></pre></div>",
        "id": 326628538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873029
    },
    {
        "content": "<p>Even better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hφ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326628706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873073
    },
    {
        "content": "<p>In Lean 3 <code>by exact</code> just changed elaboration order a little (which was very occasionally the key idea)</p>",
        "id": 326629286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675873205
    },
    {
        "content": "<p>Does <code>(hφ:)</code> work?</p>",
        "id": 326629828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675873343
    },
    {
        "content": "<p>not in any way I tried, but I didn't try for too long</p>",
        "id": 326629922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873373
    },
    {
        "content": "<p>This fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">K</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326630010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873399
    },
    {
        "content": "<p>Oh, this works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">K</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"n\">hφ</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326630111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873427
    },
    {
        "content": "<p>This is as minimal as I could get it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"n\">hφ</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326630327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873470
    },
    {
        "content": "<p>maybe <code>interior</code> is the culprit?</p>",
        "id": 326630359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873481
    },
    {
        "content": "<p>Maybe not, since this also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">use</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"o\">⟩</span> <span class=\"o\">⟨(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">''</span> <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hψ</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">subset_trans</span> <span class=\"n\">hφ</span> <span class=\"o\">(</span><span class=\"n\">interior_subset.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">image_subset_iff.mp</span> <span class=\"n\">hψ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326630491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675873518
    },
    {
        "content": "<p>just push whichever of these workarounds you find the least objectionable. <code>by exact hφ</code> highlights the weirdness the best, IMHO</p>",
        "id": 326631817,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675873860
    },
    {
        "content": "<p>That's so weird that <code>_ '' _ ⊆ _</code> and <code>_ ⊆ interior _</code> both work. Presumably <code>_ ⊆ _</code> does not work? (or you would have mentioned it) (if it works then it's not weird any more)</p>",
        "id": 326633290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675874203
    },
    {
        "content": "<p>that's right, $$_ \\subseteq _$$ doesn't work</p>",
        "id": 326634068,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874392
    },
    {
        "content": "<p>I pushed the <code>(hφ : φ '' K ⊆ interior L)</code> variant.</p>",
        "id": 326634198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874416
    },
    {
        "content": "<p>I also fixed the other error in this file, which was in some <code>calc</code> block.</p>",
        "id": 326634274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874431
    },
    {
        "content": "<p>The following (from the mathport file) did not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">calc</span>\n          <span class=\"n\">f'</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">f'</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">us</span> <span class=\"n\">hx'</span><span class=\"o\">)</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">hf'</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">vn</span>\n</code></pre></div>\n<p>it results in the following error (on the <code> _ ⊆ v := hf'</code> line)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">Membership.mem</span> <span class=\"n\">Subset</span> <span class=\"bp\">?</span><span class=\"n\">m.23225</span>\n</code></pre></div>",
        "id": 326634460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874481
    },
    {
        "content": "<p>Finally, on line 238, we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">compactOpen_eq_Inf_induced</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ContinuousMap.compactOpen</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n        <span class=\"n\">TopologicalSpace.induced</span> <span class=\"o\">(</span><span class=\"n\">ContinuousMap.restrict</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">ContinuousMap.compactOpen</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>and <code>hs</code> results in an unused variables warning. If I replace <code>hs</code> with <code>_</code> to try to get rid of the warning, I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">Lean.Parser.Command.</span><span class=\"bp\">«</span><span class=\"n\">termExpand_binders</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">=&gt;</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">»'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"n\">expand_binders</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inf</span><span class=\"bp\">ᵢ✝</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n    <span class=\"n\">TopologicalSpace.induced</span> <span class=\"o\">(</span><span class=\"n\">ContinuousMap.restrict</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">ContinuousMap.compactOpen</span>\n</code></pre></div>\n<p>This seems like an actual issue that should be resolved IMO</p>",
        "id": 326634880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232123.20.28Topology.2ECompactOpen.29/near/326634460\">said</a>:</p>\n<blockquote>\n<p>The following (from the mathport file) did not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">calc</span>\n          <span class=\"n\">f'</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">f'</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">us</span> <span class=\"n\">hx'</span><span class=\"o\">)</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">hf'</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">vn</span>\n</code></pre></div>\n<p>it results in the following error (on the <code> _ ⊆ v := hf'</code> line)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">Membership.mem</span> <span class=\"n\">Subset</span> <span class=\"bp\">?</span><span class=\"n\">m.23225</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Basic question: <code>@[trans]</code> generates <code>Transitive</code> instance?</p>",
        "id": 326635261,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675874694
    },
    {
        "content": "<p>That's what it usually does in lean3, but I can only guess that the same holds for lean4 as I haven't done it myself</p>",
        "id": 326635560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232123.20.28Topology.2ECompactOpen.29/near/326634880\">said</a>:</p>\n<blockquote>\n<p>If I replace <code>hs</code> with <code>_</code> to try to get rid of the warning, I get the error:</p>\n</blockquote>\n<p>Does it work with <code>_hs</code>?</p>",
        "id": 326635759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675874828
    },
    {
        "content": "<p>yes it does!</p>",
        "id": 326635807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874844
    },
    {
        "content": "<p>okay I fixed the remaining errors/warnings</p>",
        "id": 326636331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874983
    },
    {
        "content": "<p>Why does <code>_hs</code> work but not <code>_</code>?</p>",
        "id": 326636366,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675874991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232123.20.28Topology.2ECompactOpen.29/near/326636331\">said</a>:</p>\n<blockquote>\n<p>okay I fixed the remaining errors/warnings</p>\n</blockquote>\n<p>I already pushed these fixes -- sorry....</p>",
        "id": 326636581,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675875041
    },
    {
        "content": "<p>oops :)</p>",
        "id": 326636612,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675875048
    },
    {
        "content": "<p>well the file seems to still build even after we both fixed things twice :)</p>",
        "id": 326636666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675875062
    },
    {
        "content": "<p>we fixed in exactly the same way....</p>",
        "id": 326636735,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675875083
    },
    {
        "content": "<p>yeah I know</p>",
        "id": 326636782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675875093
    },
    {
        "content": "<p>I guess because <code>_hs</code> is an identifier and <code>_</code> is a ... something else, for syntax purposes</p>",
        "id": 326636879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675875118
    },
    {
        "content": "<p>Yeah that makes sense. But I think the syntax <code>_</code> should be accepted in such situations.</p>",
        "id": 326637061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675875154
    },
    {
        "content": "<p>Yeah, this has been discussed a few times on zulip already. Can't find it now, though</p>",
        "id": 326642359,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675876607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232123.20.28Topology.2ECompactOpen.29/near/326634460\">said</a>:</p>\n<blockquote>\n<p>The following (from the mathport file) did not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">calc</span>\n          <span class=\"n\">f'</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">f'</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">us</span> <span class=\"n\">hx'</span><span class=\"o\">)</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">hf'</span>\n          <span class=\"n\">_</span> <span class=\"bp\">⊆</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">vn</span>\n</code></pre></div>\n<p>it results in the following error (on the <code> _ ⊆ v := hf'</code> line)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"k\">calc</span><span class=\"bp\">'</span> <span class=\"n\">step</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"bp\">`</span><span class=\"n\">Trans</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Trans</span> <span class=\"n\">Membership.mem</span> <span class=\"n\">Subset</span> <span class=\"bp\">?</span><span class=\"n\">m.23225</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What is the appropriate way to make this type of proof work again?<br>\nI tried putting something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_subset_trans</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>before my use case, but it didn't do the trick.</p>",
        "id": 385547279,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1692222162
    },
    {
        "content": "<p>I think this is not the \"right\" <code>trans</code>. The attribute is for the tactic <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.tacticTrans___#doc\">docs#Mathlib.Tactic.tacticTrans___</a>, what you are looking for is probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs#Trans</a>.</p>",
        "id": 385547561,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692222310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232123.20.28Topology.2ECompactOpen.29/near/385547561\">said</a>:</p>\n<blockquote>\n<p>I think this is not the \"right\" <code>trans</code>. The attribute is for the tactic <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.tacticTrans___#doc\">docs#Mathlib.Tactic.tacticTrans___</a>, what you are looking for is probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs#Trans</a>.</p>\n</blockquote>\n<p>I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Set.Mem</span> <span class=\"n\">Set.Subset</span> <span class=\"n\">Set.Mem</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mem_subset_trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>after the theorem, but it didn't work either. Anyway, I can put it in just one line (is this preferred?) but I would like to know how to add such an instance.</p>\n<p>EDIT: Also tried with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">Set.Mem</span> <span class=\"n\">Set.Subset</span> <span class=\"n\">Set.Mem</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mem_subset_trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>just in case I had messed with the order of variables.</p>",
        "id": 385657585,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1692273045
    }
]