[
    {
        "content": "<p>(deleted)</p>",
        "id": 350536651,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681742544
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3484\">!4#3484</a> Most of the remaining errors in this file stem from the <code>comp</code> declaration at line 302:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Composition of a seminorm with a linear map is a seminorm. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú‚ÇÇ</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí‚Çõ‚Çó</span><span class=\"o\">[</span><span class=\"n\">œÉ‚ÇÅ‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">p.toAddGroupSeminorm.comp</span> <span class=\"n\">f.toAddMonoidHom</span> <span class=\"k\">with</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_smul‚Çõ‚Çó</span><span class=\"o\">,</span> <span class=\"n\">map_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">RingHomIsometric.is_iso</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">seminorm.comp</span> <span class=\"n\">Seminorm.comp</span>\n</code></pre></div>\n<p>If I could make this definition compile without making another error at <code>[IsScalarTower R ‚Ñù‚â•0 ‚Ñù]</code> (L299) I'd cut the error count by about half</p>",
        "id": 350537985,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681742819
    },
    {
        "content": "<p>Note that I haven't committed any <img alt=\":eta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/37966.png\" title=\"eta\">s yet</p>",
        "id": 350540658,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681743315
    },
    {
        "content": "<p>I've done a bunch of work on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3484\">!4#3484</a>, dealing with most but not quite all of the errors. If anyone would like to take another look that would be great. This is the highest priority file for now!</p>",
        "id": 351504753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682050823
    },
    {
        "content": "<p>I was taking a look just out of curiosity and noted this <em>terrible</em> way to get <code>comp_smul</code> to typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">comp_smul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú‚ÇÇ</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí‚Çõ‚Çó</span><span class=\"o\">[</span><span class=\"n\">œÉ‚ÇÅ‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ‚Çä</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">p.comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">map_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">NNReal.smul_def</span><span class=\"o\">,</span> <span class=\"n\">coe_nnnorm</span><span class=\"o\">,</span>\n      <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I'd assume this is a last resort. (Note: <code>set_option</code> at least doesn't appear in the type of the lemma when used later on.) What do you do when the lhs needs eta experiment but the rhs needs to <em>not</em> have eta experiment?</p>",
        "id": 352373355,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682368034
    },
    {
        "content": "<p>Often \"needs to not have eta experiment\" is just \"needs a higher heartbeat limit with eta experiment than without\"</p>",
        "id": 352375730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682368933
    },
    {
        "content": "<p>Hmm, that does work eventually...but I will note that in this case upping the heartbeats causes the declaration to take 116 seconds instead of 6 seconds <span aria-label=\"woozy face\" class=\"emoji emoji-1f974\" role=\"img\" title=\"woozy face\">:woozy_face:</span></p>",
        "id": 352377792,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682369731
    },
    {
        "content": "<p>Hesitantly offering</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Elaborate the following term with `set_option synthInstance.etaExperiment true`. -/</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"eta% \"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for legibility and speedups during this eta era. But, I don't know if that ~2 minutes is actually fine and negligible, or if there's another, better way to fix this lemma</p>",
        "id": 352378887,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682370168
    },
    {
        "content": "<p>I think we can't stay with a declaration taking two minutes, especially when the proof is two lines long.</p>",
        "id": 352379502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682370430
    },
    {
        "content": "<p>I'm game to use <code>eta%</code>, perhaps renamed to <code>etaExperiment%</code> so it's a big easier to track / more obviously a hack. :-)</p>",
        "id": 352382408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682371727
    },
    {
        "content": "<p>Ok, sounds good! (I think snake case is the standard for elaborators, so I guess it ought to be <code>eta_experiment%</code>!) What's a good location to put the macro in?</p>",
        "id": 352423665,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682396498
    },
    {
        "content": "<p>Different issue: I took a look at the remaining error and fixed it, but it's weird: I needed to force <code>Subtype.val</code> to be used as the coercion instead of <code>.toAddGroupSeminorm</code>. Or, at least, that's what I think is happening.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n          <span class=\"n\">refine'</span> <span class=\"n\">csup</span><span class=\"bp\">·µ¢</span><span class=\"n\">_le</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_le'</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">add_le_add</span>\n              <span class=\"c1\">-- Porting note: `f` is provided to force `Subtype.val` to appear.</span>\n              <span class=\"c1\">-- A type ascription on `_` would have also worked, but would have been more verbose.</span>\n              <span class=\"o\">(</span><span class=\"n\">le_csup</span><span class=\"bp\">·µ¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">le_csup</span><span class=\"bp\">·µ¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Removing <code>Subtype.val</code> produces the following error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">le_csup</span><span class=\"bp\">·µ¢</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.711983</span><span class=\"o\">)</span> <span class=\"bp\">‚Üë</span><span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">le_csup</span><span class=\"bp\">·µ¢</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.711983</span><span class=\"o\">)</span> <span class=\"bp\">‚Üë</span><span class=\"n\">i</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">AddGroupSeminorm.toFun</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddGroupSeminorm</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddGroupSeminorm.toFun</span> <span class=\"n\">i.toAddGroupSeminorm</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">AddGroupSeminorm.toFun</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAddGroupSeminorm</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚Üë‚Üë</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Removing <code>f</code> altogether causes lean to struggle to unify the type (<code>?m.711950 i ‚â§ sup·µ¢ ?m.711950 : Prop</code>).</p>\n<p>Is the above an acceptable fix? Or is there an obvious better way to do this?</p>",
        "id": 352434821,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682401844
    },
    {
        "content": "<p>Ok, I pushed since I'm going to sleep soonish and I know this is a high-prio file; that <em>should</em> fix all the errors, unless something's weird with my setup (it might be). if any choices I made were suboptimal, we can always change them :)</p>",
        "id": 352449841,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682407060
    },
    {
        "content": "<p>I put the <code>eta_experiment%</code> macro in <code>Mathlib/Lean/Meta.lean</code>, where it's imported by most things. (<code>synthInstance.etaExperiment</code> was registered in <code>Lean.Meta.SynthInstance</code>, but I didn't think we should make a whole file for just this macro‚Äîespecially because Mathlib's <code>Lean.Meta</code> file is a grab-bag of Meta utilities, unlike Lean's version of that file.)</p>",
        "id": 352450056,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682407116
    },
    {
        "content": "<p>(Well, couldn't sleep.) Huh, that's really weird. The file does just fine in my VS code, but fails under <code>lake build</code> (both in CI and locally). The Lean version is the same according to <code>#eval Lean.versionString</code>...what could be going on?</p>",
        "id": 352471939,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682413148
    },
    {
        "content": "<p>Whoa, this is weird. Writing <code>set_option synthInstance.etaExperiment false in</code> before the first offending declaration (<code>smul_le_smul</code>) causes it to error the same way lake does‚Äîbut omitting that shows no errors. Can anyone reproduce?</p>",
        "id": 352479813,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682414831
    },
    {
        "content": "<p>(Note that <code>#eval show MetaM Bool from do return synthInstance.etaExperiment.get (‚Üê getOptions)</code> evaluated the line just before returns <code>false</code>, so it's definitely not <code>true</code>‚Äîand turning eta <em>on</em> instead causes worse errors.)</p>",
        "id": 352480003,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682414873
    },
    {
        "content": "<p>Interestingly, setting other options to either true or false (such as <code>pp.explicit</code>) <em>also</em> causes the (correct?) lake-like erroring behavior. Setting them at the top of the file works too. But other commands, like <code>#check</code> or <code>#eval</code>, don't.</p>",
        "id": 352481008,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682415102
    },
    {
        "content": "<p>Anyway, the actual problem here seems to be something like \"HSMul can't find the return type, even when it's provided as a type ascription\"‚ÄîI'm not sure what to do about that.</p>",
        "id": 352485355,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682416047
    },
    {
        "content": "<p>Wow, if the return type of <code>smul_le_smul</code> is anything less than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">HSMul.hSMul</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:=</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>then <code>HSMul</code> can't find its return type in time, giving the error <code>failed to synthesize HSMul ‚Ñù‚â•0 (Seminorm ùïú E) ?m.454788 (deterministic) timeout at 'typeclass'...</code>. <em>Both</em> means of specifying the output type need to be there...but I don't quite understand why there's a metavariable in the first place when we supply the argument directly? Does this have to do with <code>outParam</code> shenanigans somehow?</p>",
        "id": 352487734,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682416605
    },
    {
        "content": "<p>MWE, sufficiently far down in the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HSMul</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"c1\">-- failed to synthesize HSMul ‚Ñù‚â•0 (Seminorm ùïú E) ?m.202055 (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n</code></pre></div>\n<p>Huh?? The argument is right there! Why is it a metavariable?</p>",
        "id": 352491645,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682417677
    },
    {
        "content": "<p>probably because it is an out param</p>",
        "id": 352491696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682417694
    },
    {
        "content": "<p>But why doesn't it get unified with what <em>is</em> there?</p>",
        "id": 352491766,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682417709
    },
    {
        "content": "<p>the typeclass problem is solved without it</p>",
        "id": 352491866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682417743
    },
    {
        "content": "<p>it appears to have timed out before returning</p>",
        "id": 352492026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682417761
    },
    {
        "content": "<p>Weird! Isn't that a lot of heartbeats to figure out what you \"already know\", so to speak...?</p>",
        "id": 352492484,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682417873
    },
    {
        "content": "<p>it's not trying to figure out the out param, it's trying to figure out the instance to get there</p>",
        "id": 352492676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682417902
    },
    {
        "content": "<p>Oh, I see‚Äîwhich I could see making sense if you didn't want to venture on a long unification search. But I feel like an exception should be made when the info is \"immediate\" somehow, lest this happen...ofc I have no idea what this entails, tho.</p>",
        "id": 352493314,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682418053
    },
    {
        "content": "<p>I'm saying that the value of the out param doesn't help much to find the instance, and it can get in the way sometimes so it is temporarily replaced by a metavariable</p>",
        "id": 352493524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682418116
    },
    {
        "content": "<p>the real question is why the instance problem <code>HSMul ‚Ñù‚â•0 (Seminorm ùïú E) ?_</code> isn't being solved</p>",
        "id": 352493724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682418152
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 352493787,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682418170
    },
    {
        "content": "<p>Anyway, I'm pretty sure that accounts for the last two errors in the file. I'll leave the decision of whether to increase max heartbeats, make everything explicit as above, or figure out the underlying problem to others‚ÄîI'm heading to sleep :)</p>",
        "id": 352496191,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682418827
    },
    {
        "content": "<p>(Also, that \"invisible error\" issue above all this maybe deserves a separate thread if anyone can reproduce it (if relevant, I'm on macOS ventura)‚Äînot seeing errors that are actually there is quite jarring)</p>",
        "id": 352497505,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682419133
    },
    {
        "content": "<p>This instance problem <code>HSMul ‚Ñù‚â•0 (Seminorm ùïú E) ?_</code> is in fact solved, it just needs slightly beyond the 20000 heartbeat limit.</p>",
        "id": 352678948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682479501
    },
    {
        "content": "<p>Okay, I have this building, and given this file is on the critical path and has been for a long while, I think I would like to merge. We still have some signs of sickness here, that we should keep thinking about.</p>\n<p>The worst one, with a double porting note, is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: unhappily, turning on `synthInstance.etaExperiment` isn't enough here:</span>\n<span class=\"c1\">-- we need to elaborate a fragment of the type using `eta_experiment%`, but then can't use it for the proof!</span>\n<span class=\"c1\">-- Porting note:</span>\n<span class=\"c1\">-- finding the instance `SMul ‚Ñù‚â•0 (Seminorm ùïú E)` is slow,</span>\n<span class=\"c1\">-- and needs an increase to `synthInstance.maxHeartbeats`.</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">30000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_smul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú‚ÇÇ</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí‚Çõ‚Çó</span><span class=\"o\">[</span><span class=\"n\">œÉ‚ÇÅ‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p.comp</span> <span class=\"o\">(</span><span class=\"n\">eta_experiment</span><span class=\"bp\">%</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">c</span><span class=\"bp\">‚Äñ‚Çä</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">p.comp</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">map_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">NNReal.smul_def</span><span class=\"o\">,</span> <span class=\"n\">coe_nnnorm</span><span class=\"o\">,</span>\n      <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 352679306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682479756
    },
    {
        "content": "<p>It passes CI now. Since (the apparently <em>now</em> correct) <code>coe_smul</code> is not needed in the rest of the file, should I revert the last changes I made that replaced <code>coe_smul</code> with <code>rfl</code>?</p>",
        "id": 352686349,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682484801
    },
    {
        "content": "<p>I don't think there's any need to revert. It's not like the <code>rfl</code>s you added are expensive.</p>",
        "id": 352686845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682485060
    },
    {
        "content": "<p>I've hit merge.</p>",
        "id": 352686851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682485063
    }
]