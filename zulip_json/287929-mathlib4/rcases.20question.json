[
    {
        "content": "<p>I don't understand the behavior of <code>rintro</code> in the following. Hopefully I am just dense. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BaseType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n  <span class=\"bp\">|</span> <span class=\"n\">two</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BaseType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BaseTypeHom</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span> <span class=\"bp\">→</span> <span class=\"n\">BaseType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">one</span> <span class=\"n\">two</span>\n  <span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">one</span> <span class=\"n\">two</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">triv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span>  <span class=\"c1\">--- rcases tactic failed: one is not a fvar</span>\n</code></pre></div>",
        "id": 338913278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677693125
    },
    {
        "content": "<p>I am guessing it is trying to pull the <code>X</code> from the <code>id</code> branch of <code>BaseTypeHom</code> but making it implicit doesn't help</p>",
        "id": 338913550,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677693197
    },
    {
        "content": "<p>If my understanding is correct, what is the proper incantation with <code>|</code> and <code>_</code> to capture all three constructors for <code>BaseTypeHom</code>?</p>",
        "id": 338914159,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677693365
    },
    {
        "content": "<p>This is fine  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">triv</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338918800,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677694538
    },
    {
        "content": "<p>This works as expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">unit</span> <span class=\"n\">unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">triv₂</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">unit</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338922577,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677695476
    },
    {
        "content": "<p>This does not </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BaseType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BaseType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BaseTypeHom</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span> <span class=\"bp\">→</span> <span class=\"n\">BaseType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">one</span> <span class=\"n\">one</span>\n  <span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">triv₂</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- rcases tactic failed: one is not a fvar</span>\n</code></pre></div>",
        "id": 338925773,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this expected behavior?</p>",
        "id": 338926361,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696495
    },
    {
        "content": "<p>yes this is expected</p>",
        "id": 338926578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696561
    },
    {
        "content": "<p>try using <code>\\&lt;\\&lt;\\&gt;\\&gt;</code> instead for the last pattern match</p>",
        "id": 338926637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696579
    },
    {
        "content": "<p>if your goal is just to pattern match once on BaseTypeHom and get three cases, the earlier pattern matches are only confusing matters. Just use <code>_ _ (_|_|_)</code></p>",
        "id": 338926972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">triv₂</span> <span class=\"o\">:</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨⟩⟩</span>\n</code></pre></div>\n<p>gives the same not an fvar error</p>",
        "id": 338926976,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696668
    },
    {
        "content": "<p>does <code>intro h; cases h</code> work in the last example?</p>",
        "id": 338927143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20question/near/338926972\">said</a>:</p>\n<blockquote>\n<p>if your goal is just to pattern match once on BaseTypeHom and get three cases, the earlier pattern matches are only confusing matters. Just use <code>_ _ (_|_|_)</code></p>\n</blockquote>\n<p>I think this works for my use. Thanks</p>",
        "id": 338927443,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20question/near/338927143\">said</a>:</p>\n<blockquote>\n<p>does <code>intro h; cases h</code> work in the last example?</p>\n</blockquote>\n<p>Yes that does work for the last example.</p>",
        "id": 338927497,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696832
    },
    {
        "content": "<p>in that case I think there is a bug in rcases</p>",
        "id": 338928010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696949
    },
    {
        "content": "<p>the \"one is not an fvar\" error is not supposed to happen</p>",
        "id": 338928106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677696967
    },
    {
        "content": "<p>Should I make an issue?</p>",
        "id": 338928172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677696993
    },
    {
        "content": "<p>Darn. The error also pops up in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">triv₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">BaseType</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">BaseTypeHom</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338930181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677697338
    },
    {
        "content": "<p>Over the second hom</p>",
        "id": 338930453,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677697368
    },
    {
        "content": "<p>you can probably just do <code>rintro _ (_|_) h &lt;;&gt; cases h</code></p>",
        "id": 338937878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677699385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20question/near/338937878\">said</a>:</p>\n<blockquote>\n<p>you can probably just do <code>rintro _ (_|_) h &lt;;&gt; cases h</code></p>\n</blockquote>\n<p><del>Hmm that tosses the same error</del> I think the infoview wasn't updating...It wasn't</p>",
        "id": 338940280,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677700002
    }
]