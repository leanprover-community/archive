[
    {
        "content": "<p>With <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> ,  we bumped onto strange time out issues when defining a commutative algebra by generators and relations, as a quotient of some <code>MvPolynomial R M</code>  by a relation <code>r : (MvPolynomial M R) → (MvPolynomial M R) → Prop</code>.<br>\nWe took inspiration from the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorAlgebra#doc\">docs#TensorAlgebra</a>, except that our variables commute hence we started from <code>MvPolynomial</code>. It appeared that without tweaking with priorities of some instances, Lean cannot prove that this algebra has quotients by ideals.<br>\nHere is a MWE that shows some of the problems (but even with the priorities indicated there, further steps do not work).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Ideal.Quotient</span> <span class=\"n\">Ideal</span> <span class=\"n\">RingQuot</span>\n\n<span class=\"c1\">-- Defining an algebra as a quotient of polynomials</span>\n<span class=\"c1\">-- Experiments</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A trivial relation is enough to show problems</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quot_r</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">999</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We have to make the priority of CommSemiring very low,</span>\n<span class=\"cm\">  or else the `HasQuotient` instance below takes about 3s. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot.instCommSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instAlgebra</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instAlgebraRingQuotInstSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- verify there is no diamond</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">algebraNat</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">instAlgebra</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instSMulCommClassRingQuotInstSMulRingQuotInstSMulRingQuot</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span>  <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instIsScalarTowerRingQuotInstSMulRingQuotInstSMulRingQuot</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.hasQuotient</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommRing</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.commRing</span> <span class=\"n\">I</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- This one is still too slow</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instAlgebra'</span> <span class=\"o\">(</span>\n    <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Quotient.algebra</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 384574082,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691956248
    },
    {
        "content": "<p>Does making <code>Quot_r</code> reducible make things better or worse?</p>",
        "id": 384574719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691956458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I don't know which version of mathlib you're on, but on current master</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>works fine with no heartbeat bumps, and takes 933 heartbeats (not 100000). A lot has happened in the last week or two.</p>",
        "id": 384592482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691965077
    },
    {
        "content": "<p>One of the things which seems to have changed is the naming convention for instance names(?), so your code doesn't compile for me on current master.</p>",
        "id": 384592912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691965277
    },
    {
        "content": "<p>Thanks a lot. I just dit <code>lake update</code>, and here is an updated version.<br>\nIf I don't change the priorities (they are commented in the example below), the final example <code>instAlgebra'</code> does not compile, Lean cannot synthesize <code>Semiring ((Quot_r S M)  ⧸ I) </code> while it was just shown to be a <code>CommRing</code> in the example just above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Ideal.Quotient</span> <span class=\"n\">Ideal</span> <span class=\"n\">RingQuot</span>\n\n<span class=\"c1\">-- Defining an algebra as a quotient of polynomials</span>\n<span class=\"c1\">-- Experiments</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A trivial relation is enough to show problems</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quot_r</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"c1\">-- (priority := 999) :</span>\n    <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We have to make the priority of CommSemiring very low,</span>\n<span class=\"cm\">  or else the `HasQuotient` instance below takes about 3s. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"c1\">-- (priority := 10) :</span>\n    <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot.instCommSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instAlgebra</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instAlgebraRingQuot</span> <span class=\"n\">_</span>\n\n<span class=\"c1\">-- verify there is no diamond</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">algebraNat</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">instAlgebra</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instSMulCommClassRingQuot</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span>  <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instIsScalarTowerRingQuot</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasQuotient</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Submodule.hasQuotient</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">CommRing</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.commRing</span> <span class=\"n\">I</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- This one is still too slow</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instAlgebra'</span> <span class=\"o\">(</span>\n    <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Quotient.algebra</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 384603042,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691970604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20priorities.20for.20quotients.20of.20MvPolynomial/near/384574719\">said</a>:</p>\n<blockquote>\n<p>Does making <code>Quot_r</code> reducible make things better or worse?</p>\n</blockquote>\n<p>This is slow but within the main heartbeat limit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Ideal.Quotient</span> <span class=\"n\">Ideal</span> <span class=\"n\">RingQuot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A trivial relation is enough to show problems</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Quot_r</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 384605081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691971734
    },
    {
        "content": "<p>As a bonus it takes far less code</p>",
        "id": 384605092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691971739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20priorities.20for.20quotients.20of.20MvPolynomial/near/384574719\">said</a>:</p>\n<blockquote>\n<p>Does making <code>Quot_r</code> reducible make things better or worse?</p>\n</blockquote>\n<p>In the file below (the one adjusted after Kevin's indication that we had an obsolete mathlib),  everything is just slightly faster, but not enough to have the last <code>Algebra</code> instance compile.</p>",
        "id": 384658878,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691992542
    },
    {
        "content": "<p>Doesn't my message above show that making it reducible and removing all the redundant instances makes things faster?</p>",
        "id": 384696632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692002930
    },
    {
        "content": "<p>I had written<code>@[reducible]</code> and switching to <code>abbrev</code> made it faster. <br>\nApparently not enough for what comes later, unless the problem is different: I see Lean struggling with universes, telling me that <code>max u  v</code> is not <code>max v u</code>…</p>",
        "id": 384740636,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692012328
    },
    {
        "content": "<p>Are you using <code>Type _</code> or <code>Type*</code>?</p>",
        "id": 384751996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692014498
    },
    {
        "content": "<p><code>Type u</code>, <code>Type v</code>, etc., but let me check that there isn't a hidden <code>Type _</code> somewhere…</p>",
        "id": 384754245,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692014923
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 384759631,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692016005
    },
    {
        "content": "<p>Forget what I said about theses universes, I had written something that couldn't type…<br>\nOTOH, it takes 15s to compile the final example, and in a real life application, it ends up being unable to synthesize the instance necessary to have <code>algebraMap R (Quot_r R M ⧸ I)</code>…</p>",
        "id": 384767387,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692017637
    },
    {
        "content": "<p>Someone should double check me but this seems instant on <code>mrb/reduce_eta2</code></p>",
        "id": 384770531,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692018230
    },
    {
        "content": "<p>Maybe related: if you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">symmetricSubalgebra</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>after <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial.symmetricSubalgebra#src\">src#MvPolynomial.symmetricSubalgebra</a>, you get a timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">AddCommMonoid</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">symmetricSubalgebra</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(on commit 3d6112b5c7d095d3088b359c611a5a2704c5dbdc)</p>",
        "id": 384775963,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692019238
    },
    {
        "content": "<p>Oops, the timeout only appears  with <code>import Mathlib.Data.Finsupp.WellFounded</code> which was authored by me ...</p>",
        "id": 384776868,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692019416
    },
    {
        "content": "<p>We have problems all over mathlib where we struggle to infer algebraic instances on <code>Subalgebra</code>s</p>",
        "id": 384780671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692020119
    },
    {
        "content": "<p>You mean in Lean 4, right?</p>",
        "id": 384781726,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692020308
    },
    {
        "content": "<p>Actually in front of the computer now. Yes, this takes 0.05s for me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instAlgebra'</span> <span class=\"o\">(</span>\n    <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Quotient.algebra</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 384785135,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692020923
    },
    {
        "content": "<p>Eric's shorter one takes ~0.07s (and about half that with <code>Type*</code>).</p>",
        "id": 384790490,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692021897
    },
    {
        "content": "<p>The same one takes 18s on my computer…</p>",
        "id": 384820826,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692027300
    },
    {
        "content": "<p>together with a strange error : <code>compiler IR check failed at '_example._rarg', error: unknown declaration 'MvPolynomial.instCommRingMvPolynomial'</code></p>",
        "id": 384821724,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692027456
    },
    {
        "content": "<p>I am using a toolchain where given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span>  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Lean will expand <code>b</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"o\">{</span> <span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"n\">src</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This presentation of the term seems more suited to unification. </p>\n<p>There are some instances (somewhere) that would benefit from going from the <code>{a with}</code> pattern to <code>{toA := a}</code>. This is not very actionable alas.</p>",
        "id": 384822843,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692027657
    },
    {
        "content": "<p>The <code>IR</code> error just means \"write <code>noncomputable</code>\"</p>",
        "id": 384876143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692038954
    },
    {
        "content": "<p>The <code>IR</code> error was strange because I was already in a <code>noncomputable section</code>. But if I switch the order of <code>open</code> and <code>section</code>, it disappeared.</p>",
        "id": 385138482,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692109251
    },
    {
        "content": "<p>Well, if I want things to go fast, here is what runs best:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Ideal.Quotient</span> <span class=\"n\">Ideal</span> <span class=\"n\">RingQuot</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- Defining an algebra as a quotient of polynomials</span>\n<span class=\"c1\">-- Experiments</span>\n<span class=\"c1\">-- A trivial relation is enough to show problems</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quot_r</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instCommRing'</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instAlgebra'</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Quot_r</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Ideal.Quotient.algebra</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">instAlgebra'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 385138600,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692109279
    }
]