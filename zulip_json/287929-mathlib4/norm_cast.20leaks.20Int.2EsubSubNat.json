[
    {
        "content": "<p>Why does <code>norm_cast</code> put a <code>Int.subSubNat</code> in the goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Interestingly, as I was reducing imports, <code>norm_cast</code> went from putting <code>int.subSubNat</code> in the goal to being a no-op back and forth several times.</p>",
        "id": 375809299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689528861
    },
    {
        "content": "<p>From doing <code>show_term</code>, the culprit seems to be <code>Mathlib.Data.Int.Cast.Basic._auxLemma.5</code>, which I cannot even <code>#print</code>.</p>",
        "id": 375809469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689528959
    },
    {
        "content": "<p>simp-like tactics can transform simp lemmas to put them into a better form, and it gives them <code>_auxLemma.nnn</code> names. Lean doesn't let you type in names with numbers, and I'm not aware of any way to write them yourself. (They're not names with numeral strings, but a completely different kind of part of a name.)</p>\n<p>Here's a special hacked-together <code>#print</code> that you can use to get their definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#printNum \"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Name.num</span> <span class=\"n\">n.getId</span> <span class=\"n\">i.getNat</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">name</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no such declaration {name}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} : {decl.type} :=</span><span class=\"se\">\\n</span><span class=\"s2\">{decl.value?.getD (.bvar 0)}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">printNum</span> <span class=\"n\">Mathlib.Data.Int.Cast.Basic._auxLemma</span> <span class=\"mi\">5</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Mathlib.Data.Int.Cast.Basic._auxLemma.5 : ∀ {R : Type u} [inst : AddGroupWithOne R] (m n : ℕ),</span>\n<span class=\"cm\">  ↑m - ↑n = ↑(Int.subNatNat m n) :=</span>\n<span class=\"cm\">fun {R} [AddGroupWithOne R] m n ↦ Eq.symm (Int.cast_subNatNat m n)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 375827016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689536330
    },
    {
        "content": "<p>So this auxLemma is wrapping <code>Int.cast_subNatNat</code></p>",
        "id": 375827053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689536343
    }
]