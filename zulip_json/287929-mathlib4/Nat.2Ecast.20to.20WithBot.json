[
    {
        "content": "<p>From <a href=\"https://github.com/leanprover-community/mathlib4/pull/2631\">!4#2631</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: In Lean3, these are same `coe`, but not in Lean4.</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">_root_.WithBot.some_eq_nat_cast</span> <span class=\"o\">:</span> <span class=\"n\">WithBot.some</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there a std way to fix this?</p>",
        "id": 340308837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678268404
    },
    {
        "content": "<p>Apparently this already exists as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.cast_withBot</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">WithBot.some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but that doesn't solve the <code>coe</code> issue</p>",
        "id": 340311659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678269248
    },
    {
        "content": "<p>I think the comment is slightly misleading. In lean 3 it was <code>@coe _ _ inst1 n = @coe _ _ inst2 n</code> which had the same head symbol and explicit arguments (which is enough for simp and rw to not know the difference), but in lean4 the head symbols are no longer the same</p>",
        "id": 340344881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678277916
    },
    {
        "content": "<p>I think this behavior is by design, as part of the \"coe instances are inlined\" behavior</p>",
        "id": 340345231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678278016
    },
    {
        "content": "<p>If we want all casts to have the same head symbol as they did in lean3, that amounts to either reverting that design decision in lean4, or hacking around it in mathlib4/std4 to pretend the decision was never made (i.e by adding a global <code>Std.coe</code> function and using it in all instances).</p>",
        "id": 340345434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678278076
    },
    {
        "content": "<p>IIUI the issue here is that we've got two coercions <code>ℕ → WithBot ℕ</code>, right?  There's <code>Nat.cast</code> if you coerce to <code>WithBot ℕ</code> directly, and <code>WithBot.coe</code> if you coerce to <code>WithBot α</code> and then substitute <code>α</code> by <code>ℕ</code> later.</p>",
        "id": 340432212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678299059
    },
    {
        "content": "<p>My suggestion for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2631\">!4#2631</a> would be to just use the <code>Nat.cast</code> API here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.cast_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">degree_eq_natDegree</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 340433226,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678299359
    }
]