[
    {
        "content": "<p>Is there a difference between these? The tooltip for <code>ℕ</code> says <code>ℕ : Prop</code> and the tooltip for <code>Nat</code> says <code>Nat : Type</code>?</p>",
        "id": 375404316,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689375280
    },
    {
        "content": "<p>They are exactly the same (search for <code>notation \"ℕ\" =&gt; Nat</code> in mathlib; that's a command giving extra syntax for <code>Nat</code>). For me they both seem to show <code>Nat : Type</code> in the tooltip for me.</p>",
        "id": 375404787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689375499
    },
    {
        "content": "<p>Hmm.<br>\n<a href=\"/user_uploads/3121/tWOuV_N78mKlkPdSronHBTIJ/Screenshot-from-2023-07-14-19-00-15.png\">Screenshot-from-2023-07-14-19-00-15.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tWOuV_N78mKlkPdSronHBTIJ/Screenshot-from-2023-07-14-19-00-15.png\" title=\"Screenshot-from-2023-07-14-19-00-15.png\"><img src=\"/user_uploads/3121/tWOuV_N78mKlkPdSronHBTIJ/Screenshot-from-2023-07-14-19-00-15.png\"></a></div>",
        "id": 375405089,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689375661
    },
    {
        "content": "<p>The last line here (<code>let major ← List.get? Γ major_index</code>) reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"bp\">Γ</span> <span class=\"n\">major_index</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">major_index</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">pure</span> <span class=\"n\">PUnit.unit</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">PUnit.unit</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">PUnit</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.4441</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var_</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Formula</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax_1</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax_2</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span>\n<span class=\"bp\">|</span> <span class=\"n\">ax_3</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span>\n<span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Step</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">checkStep</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Formula</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">ax_1</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Except.ok</span> <span class=\"o\">(</span><span class=\"n\">phi.imp_</span> <span class=\"o\">(</span><span class=\"n\">psi.imp_</span> <span class=\"n\">phi</span><span class=\"o\">))</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">ax_2</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">chi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Except.ok</span> <span class=\"o\">((</span><span class=\"n\">phi.imp_</span> <span class=\"o\">(</span><span class=\"n\">psi.imp_</span> <span class=\"n\">chi</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">imp_</span> <span class=\"o\">((</span><span class=\"n\">phi.imp_</span> <span class=\"n\">psi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp_</span> <span class=\"o\">(</span><span class=\"n\">phi.imp_</span> <span class=\"n\">chi</span><span class=\"o\">)))</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">ax_3</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Except.ok</span> <span class=\"o\">(((</span><span class=\"n\">not_</span> <span class=\"n\">phi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp_</span> <span class=\"o\">(</span><span class=\"n\">not_</span> <span class=\"n\">psi</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">imp_</span> <span class=\"o\">(</span><span class=\"n\">psi.imp_</span> <span class=\"n\">phi</span><span class=\"o\">))</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"n\">major_index</span> <span class=\"n\">minor_index</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">major</span> <span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span> <span class=\"bp\">Γ</span> <span class=\"n\">major_index</span>\n</code></pre></div>",
        "id": 375406096,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689376165
    },
    {
        "content": "<p>Maybe I need to import something?</p>",
        "id": 375406469,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689376323
    },
    {
        "content": "<p>Does the file import mathlib? What happens if you put <code>set_option autoImplicit false</code> above <code>inductive Step</code>?</p>",
        "id": 375406732,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689376437
    },
    {
        "content": "<p><code>unknown identifier 'ℕ'</code></p>",
        "id": 375406871,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689376487
    },
    {
        "content": "<p>I guess there is some minimal file I need to import?</p>",
        "id": 375406942,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689376522
    },
    {
        "content": "<p>That's what I thought :) The notation <code>ℕ</code> is only defined in mathlib. If you import mathlib, that symbol will mean <code>Nat</code>. If you don't, Lean will instead use the 'auto-bound implicit' feature and silently introduce a variable <code>ℕ : Sort u</code> for you. I'm not sure why it figured that it should live in <code>Prop</code>, though.</p>\n<p>If you just want that one notation, simply put <code>notation \"ℕ\" =&gt; Nat</code> somewhere; there is no need to import all of mathlib. Also, I would recommend setting <code>set_option autoImplicit false</code> at the top of the file: it can be quite confusing when you make a typo and an identifier is introduced silently.</p>",
        "id": 375407375,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689376690
    },
    {
        "content": "<p>Ah. Ok. Thank you!</p>",
        "id": 375407530,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1689376772
    },
    {
        "content": "<p>There is a reason why we require an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, not a screenshot: all imports are visible.</p>",
        "id": 375408258,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689377155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> has marked this topic as resolved.</p>",
        "id": 375863473,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689556874
    }
]