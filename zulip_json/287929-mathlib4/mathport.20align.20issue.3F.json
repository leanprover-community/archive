[
    {
        "content": "<p>I noted in a port I just did that <code>forall_and_distrib</code> needed to be manually aligned from <code>Mathlib.Logic.Basic</code> to <code>forall_and</code> in <code>Std.Logc</code> despite the align statement:</p>\n<p><code>#align forall_and_distrib forall_and</code></p>\n<p>Is there something that needs fixing either in the align statement or in mathport?</p>",
        "id": 325234928,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675275674
    },
    {
        "content": "<p>what was the situation?</p>",
        "id": 325235146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675275736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> Was it in a situation like <code>simp [forall_and_distrib]</code>?</p>",
        "id": 325235781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675275914
    },
    {
        "content": "<p>Identifiers that are part of tactic invocations are currently not really ported by mathport. But hopefully this will change soon.</p>",
        "id": 325235968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675275959
    },
    {
        "content": "<p>After manual aligning (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1990\">!4#1990</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine'</span>\n    <span class=\"n\">mem_finsupp_iff.trans</span>\n      <span class=\"o\">(</span><span class=\"n\">forall_and.symm.trans</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"n\">forall_congr'</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ht</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_support_iff.2</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_support_iff.1</span> <span class=\"n\">hi</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩)</span>\n</code></pre></div>",
        "id": 325236850,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675276187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> do you think this is part of the same issue? I guess <code>refine'</code> is a bit different from <code>rw</code> and <code>simp</code>...</p>",
        "id": 325237118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675276269
    },
    {
        "content": "<p>it seems to have something to do with <code>forall_and_distrib.foo</code></p>",
        "id": 325238224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675276559
    },
    {
        "content": "<p>Maybe combined with the fact that it is in a tactic</p>",
        "id": 325238915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675276735
    },
    {
        "content": "<p>Perhaps the parser sees the whole <code>forall_and_distrib.symm.trans</code> as a single ident</p>",
        "id": 325238983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675276754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20align.20issue.3F/near/325238983\">said</a>:</p>\n<blockquote>\n<p>Perhaps the parser sees the whole <code>forall_and_distrib.symm.trans</code> as a single ident</p>\n</blockquote>\n<p>I believe this is the issue. if it was not in a tactic then it would be resolved on the spot but here it is being preserved as a pexpr and it won't be resolved until the tactic is run. Depending on what local variables are in scope when it is run that ident might get split up in different ways at elaboration time</p>",
        "id": 325255156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675281268
    }
]