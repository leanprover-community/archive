[
    {
        "content": "<p>On clean master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3919</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3928</span><span class=\"bp\">/</span><span class=\"mi\">3928</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">files</span> <span class=\"n\">were</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">cache.</span>\n<span class=\"n\">This</span> <span class=\"n\">usually</span> <span class=\"n\">means</span> <span class=\"n\">that</span> <span class=\"n\">your</span> <span class=\"kn\">local</span> <span class=\"n\">checkout</span> <span class=\"n\">of</span> <span class=\"n\">mathlib4</span> <span class=\"n\">has</span> <span class=\"n\">diverged</span> <span class=\"k\">from</span> <span class=\"n\">upstream.</span>\n<span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">push</span> <span class=\"n\">your</span> <span class=\"n\">commits</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">branch</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">mathlib4</span> <span class=\"n\">repository</span><span class=\"o\">,</span> <span class=\"n\">CI</span> <span class=\"n\">will</span> <span class=\"n\">build</span> <span class=\"n\">the</span> <span class=\"n\">oleans</span> <span class=\"n\">and</span> <span class=\"n\">they</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">available</span> <span class=\"n\">later.</span>\n</code></pre></div>\n<p>Anyone else noticed this?</p>",
        "id": 402777514,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700254101
    },
    {
        "content": "<p>Yes, I've noticed. It looks like some widget code isn't part of the cache?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">2758</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.SelectPanelUtils</span>\n<span class=\"o\">[</span><span class=\"mi\">2793</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.CommDiag</span>\n<span class=\"o\">[</span><span class=\"mi\">3919</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.Calc</span>\n<span class=\"o\">[</span><span class=\"mi\">3919</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.Conv</span>\n<span class=\"o\">[</span><span class=\"mi\">3919</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.Congrm</span>\n<span class=\"o\">[</span><span class=\"mi\">3919</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Widget.Gcongr</span>\n<span class=\"o\">[</span><span class=\"mi\">3924</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"o\">[</span><span class=\"mi\">3925</span><span class=\"bp\">/</span><span class=\"mi\">3926</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib</span>\n</code></pre></div>",
        "id": 402779697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700255064
    },
    {
        "content": "<p>They are part of the cache, unfortunately they now need to be rebuilt every time.</p>",
        "id": 402810584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270030
    },
    {
        "content": "<p>Actually, I realise I am confused.</p>",
        "id": 402811080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270236
    },
    {
        "content": "<p>Those <code>Mathlib.Tactic.Widget</code> oleans are definitely being stored in the cache.</p>",
        "id": 402811132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270268
    },
    {
        "content": "<p>The source of this issue is going to be that we use the <code>lake</code> release bundle for ProofWidgets, to retrieve javascript files, but this <em>also</em> delivers olean files for ProofWidgets.</p>",
        "id": 402811272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270313
    },
    {
        "content": "<p>However at the moment those ProofWidgets oleans are being built with an older toolchain, so are invalid.</p>",
        "id": 402811351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270344
    },
    {
        "content": "<p>(We can fix that, but I still don't understand why the observed behaviour is happening.)</p>",
        "id": 402811405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270376
    },
    {
        "content": "<p>I would have thought that <code>cache</code> would see the ProofWidgets oleans are no good, and get them from the <code>lake exe cache</code> cache, after which the <code>Mathlib.Tactic.ProofWidgets.*</code> oleans would be fine, and no rebuilding would be necessary.</p>",
        "id": 402811533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270424
    },
    {
        "content": "<p>This is an unfortunate interaction between caching systems, and yet another reminder that we need to integrate them!</p>",
        "id": 402811717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do either of you understand what is happening here?</p>",
        "id": 402811778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700270529
    },
    {
        "content": "<p>This sounds like an issue that came up before but it should have been fixed already</p>",
        "id": 402812095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700270654
    },
    {
        "content": "<p>Is it the case that the downloaded ltar files do not work in lake?</p>",
        "id": 402812268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700270744
    },
    {
        "content": "<p>Or are they just missing</p>",
        "id": 402812278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700270750
    },
    {
        "content": "<p>I think the issue is that the hack that proofwidgets was using to avoid downstream rebuilds no longer works because of the git hash check</p>",
        "id": 402829844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700281785
    },
    {
        "content": "<p>ProofWidgets doesn't actually build from source. If the release oleans don't work then building the lean files will not work either, because there are missing build files. I just tried getting a fresh mathlib and <code>lake exe cache get; lake build</code> and I get stuck on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">3826</span><span class=\"bp\">/</span><span class=\"mi\">3836</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Compat</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.3.0-rc2/bin/lean ./.lake/packages/proofwidgets/././ProofWidgets/Compat.lean -R ./.lake/packages/proofwidgets/./. -o ./.lake/packages/proofwidgets/build/lib/ProofWidgets/Compat.olean -i ./.lake/packages/proofwidgets/build/lib/ProofWidgets/Compat.ilean -c ./.lake/packages/proofwidgets/build/ir/ProofWidgets/Compat.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/././</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Compat.lean</span><span class=\"o\">:</span><span class=\"mi\">174</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/././</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/../</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">js</span><span class=\"bp\">/</span><span class=\"n\">compat.js</span>\n<span class=\"bp\">./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/././</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Compat.lean</span><span class=\"o\">:</span><span class=\"mi\">170</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"n\">code</span> <span class=\"n\">because</span> <span class=\"bp\">'</span><span class=\"n\">sorryAx'</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">contains</span> <span class=\"n\">errors</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.3.0-rc2/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>The offending line is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">widget</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">metaWidget</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Widget.UserWidgetDefinition</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- The header is sometimes briefly visible before compat.tsx loads and hides it</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Loading ProofWidgets..\"</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"n\">include_str</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"build\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"js\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"compat.js\"</span>\n</code></pre></div>\n<p>where the <code>include_str</code> refers to a file that does not exist, because the ProofWidgets lakefile is set up to not build the javascript files if you are a downstream project</p>",
        "id": 402830162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700281991
    },
    {
        "content": "<p>I have seen that error a few times, but deleting <code>.lake</code> seemed to resolve it. I had assumed it was a consequence of switching between <code>v4.3.0-rc2</code> and pre-<code>v.4.3.0-rc2</code>.</p>",
        "id": 402836191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700285712
    },
    {
        "content": "<p>There appears to be an issue in the CI script which checks the cache, see <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6912140188/job/18807525121\">https://github.com/leanprover-community/mathlib4/actions/runs/6912140188/job/18807525121</a> which \"fails successfully\" and would have caught this issue</p>",
        "id": 402836910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286190
    },
    {
        "content": "<p>oh you are right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">.</span><span class=\"n\">lake</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">builds</span> <span class=\"mi\">9</span> <span class=\"n\">files</span><span class=\"o\">,</span> <span class=\"n\">works</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">clean</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">fails</span> <span class=\"n\">to</span> <span class=\"n\">build</span> <span class=\"n\">ProofWidgets.Compat</span>\n</code></pre></div>",
        "id": 402837228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286438
    },
    {
        "content": "<p>I don't think this can be explained as a versioning issue</p>",
        "id": 402837245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286471
    },
    {
        "content": "<p>I diffed the two <code>.lake</code> folders and the only difference is that <code>.lake/packages/proofwidgets/build</code> is present in the first case and absent in the second</p>",
        "id": 402837479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286650
    },
    {
        "content": "<p>It seems that when you run <code>lake exe cache</code> with a missing <code>.lake</code> folder, lake will clone all the repos <em>and fetch the proofwidgets cloud release</em>, while <code>lake clean; lake exe cache</code> does not fetch the cloud release</p>",
        "id": 402837824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286955
    },
    {
        "content": "<p><code>lake env true</code> does not fetch the release, so this must have something to do with the compilation dependencies of <code>cache</code></p>",
        "id": 402837903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700286994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 402837943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700287030
    },
    {
        "content": "<p>The part that is still not explained here is why the upload doesn't work even though the build does</p>",
        "id": 402838079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700287122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think there are likely two problems here:</p>\n<ul>\n<li>ProofWidgets build directory is now in the non-default location of <code>proofwidgets/build</code>, which  cache does not handle properly</li>\n<li><code>lake clean</code> does not clean the build archive files and Lake does not re-unpack the files if the build archive is still present.</li>\n</ul>",
        "id": 402921424,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700347413
    },
    {
        "content": "<p>the second issue seems pretty severe, right now I don't know any way to get back to a sensible state if those files are missing other than deleting <code>.lake</code></p>",
        "id": 402921520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700347496
    },
    {
        "content": "<p>What I don't understand about this is why lake wouldn't see that the files are missing and unpack or re-download in response</p>",
        "id": 402921874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700347810
    },
    {
        "content": "<p>The answer is a bug.</p>",
        "id": 402953397,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700366097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is it possible to get the mathlib CI to detect this kind of error?</p>",
        "id": 403197448,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700495207
    },
    {
        "content": "<p>Yes, I have a branch that does this, it's not merged because it fails right now (maybe things are better if the proofwidgets bump has landed)</p>",
        "id": 403204778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700497687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8535\">#8535</a></p>",
        "id": 403204895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700497746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Oh, I see you changed the ProofWidgets output directory. I had specifically requested that it  be specified and not be in <code>.lake</code> (since code depends on its location). Can cache not be adjusted to handle different build directories for different packages?</p>",
        "id": 403396920,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700578234
    },
    {
        "content": "<p>It can, but it would also require baking information about where lake puts its stuff in <code>cache</code>. I'm not convinced that it is a good idea to make this configurable by the project (it may be configurable by the user though). The issue with having <code>.lake/build</code> show up 20 times in the proofwidgets source code should be solved by having lake pass the location of the build directory to lean elaboration, similar to how <code>env!(\"OUT_DIR\")</code> works in rust + cargo.</p>",
        "id": 403426256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700586233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20files.20not.20found.20in.20the.20cache/near/403426256\">said</a>:</p>\n<blockquote>\n<p>It can, but it would also require baking information about where lake puts its stuff in <code>cache</code>.</p>\n</blockquote>\n<p>Cache already does this? (The lake directories for packages, libraries, binaries, etc. are already built into cache.)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20files.20not.20found.20in.20the.20cache/near/403426256\">said</a>:</p>\n<blockquote>\n<p>lake pass the location of the build directory to lean elaboration, similar to how env!(\"OUT_DIR\") works in rust + cargo</p>\n</blockquote>\n<p>Yes, passing an extended environment to Lean elaboration would one way to solve this that seems reasonable. Part of me would still prefer more sophisticated interaction between Lake and Lean (and other Lean executors).</p>",
        "id": 403517588,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700627985
    },
    {
        "content": "<p>Environment variables are one way only and can only hold so much information.</p>",
        "id": 403517669,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700628012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20files.20not.20found.20in.20the.20cache/near/403517669\">said</a>:</p>\n<blockquote>\n<p>and can only hold so much information.</p>\n</blockquote>\n<p>That just means you haven't tried hard enough <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 403533439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700637363
    },
    {
        "content": "<p>currently it takes a long time to get VSCode responsive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">;</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">.</span><span class=\"n\">lake</span>\n<span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std'</span>\n<span class=\"n\">Qq</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq'</span>\n<span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop'</span>\n<span class=\"n\">proofwidgets</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets'</span>\n<span class=\"n\">Cli</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli</span> <span class=\"n\">to</span> <span class=\"bp\">'./.</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli'</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">running</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">update</span> <span class=\"n\">hooks</span>\n<span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span> <span class=\"n\">cloud</span> <span class=\"n\">release</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span> <span class=\"n\">cloud</span> <span class=\"n\">release</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">5</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">4009</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">4454</span> <span class=\"n\">ms</span>\n<span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">310</span><span class=\"bp\">/</span><span class=\"mi\">495</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Compat</span>\n<span class=\"o\">[</span><span class=\"mi\">930</span><span class=\"bp\">/</span><span class=\"mi\">4007</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Component.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">931</span><span class=\"bp\">/</span><span class=\"mi\">4007</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Component.MakeEditLink</span>\n<span class=\"o\">[</span><span class=\"mi\">931</span><span class=\"bp\">/</span><span class=\"mi\">4007</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Component.Panel.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">931</span><span class=\"bp\">/</span><span class=\"mi\">4007</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Data.Html</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is that related to this issue?</p>",
        "id": 407179822,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702279689
    },
    {
        "content": "<p>What happens after the ... ? Does it build 10 files in total or 3000? If 3000, are you on windows?</p>",
        "id": 407180008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702279762
    },
    {
        "content": "<p>Seems to be around 3000, on macOS sonoma 14.1</p>\n<p>other version info:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">;</span> <span class=\"n\">elan</span> <span class=\"bp\">-</span><span class=\"n\">V</span>\n<span class=\"n\">elan</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">cdb40bff5</span> <span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"o\">)</span>\n<span class=\"bp\">;</span> <span class=\"n\">elan</span> <span class=\"k\">show</span>\n<span class=\"n\">installed</span> <span class=\"n\">toolchains</span>\n<span class=\"c1\">--------------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">)</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">17</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.3.0</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.3.0</span><span class=\"bp\">-</span><span class=\"n\">rc2</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.4.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span>\n\n<span class=\"n\">active</span> <span class=\"n\">toolchain</span>\n<span class=\"c1\">----------------</span>\n\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">v4.4.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span> <span class=\"o\">(</span><span class=\"n\">overridden</span> <span class=\"kd\">by</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">llwu</span><span class=\"bp\">/</span><span class=\"n\">git</span><span class=\"bp\">/@</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib42</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain'</span><span class=\"o\">)</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">b0fe9d6cdca8</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n\n<span class=\"bp\">;</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">b0fe9d6</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407181096,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702280168
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib4/pull/8968\">#8968</a> solve the issue for you?</p>",
        "id": 407181227,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1702280234
    },
    {
        "content": "<p>note that <code>ProofWidgets.Compat</code> needing to be rebuilt is also a bug, but it's probably best to work on it after landing <a href=\"https://github.com/leanprover-community/mathlib4/pull/8968\">#8968</a></p>",
        "id": 407181513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702280330
    },
    {
        "content": "<p>It does fix it! I guess the issue isn't Windows-specific?</p>",
        "id": 407182160,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702280572
    },
    {
        "content": "<p>It seems that (on linux) <code>lake exe cache get</code> and <code>lake build</code> will battle to set their own values in <code>.lake/packages/proofwidgets/.lake/build/lib/ProofWidgets/Compat.olean.hash</code>. The run which produced the file that is downloaded when I <code>lake exe cache get ProofWidgets.Compat</code>  is <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7154688761/job/19482498392#step:13:29\">https://github.com/leanprover-community/mathlib4/actions/runs/7154688761/job/19482498392#step:13:29</a>, which is odd because it doesn't actually build anything because it was canceled by an earlier build step... but of course it has already downloaded the out of date oleans from the proofwidgets release, and laundering them through a CI run like this gives them the current lean stamp of approval incorrectly.</p>",
        "id": 407182604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702280768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think the <code>upload cache</code> action should run only if the <code>build mathlib</code> step has already run (even if it failed). Otherwise I don't see how we can avoid confusing bad oleans from good ones without a <code>lake check-hash</code> command</p>",
        "id": 407183836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702281358
    },
    {
        "content": "<p>The bad cache files have been purged, so <code>lake exe cache get</code> on master now works properly (on linux). What happens on windows?</p>",
        "id": 407191730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702284474
    },
    {
        "content": "<p>(You may need to use <code>lake exe cache get!</code> if you have previously downloaded the bad cache files)</p>",
        "id": 407191855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702284508
    },
    {
        "content": "<p>It works perfectly, nothing is rebuilt. Thanks!</p>",
        "id": 407192568,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1702284723
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8987\">#8987</a></p>",
        "id": 407333455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702335141
    },
    {
        "content": "<p>Is there a meaningful difference in terms of cache risk between \"build was skipped\" and \"build was cancelled part way though\"?</p>",
        "id": 407341142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702339445
    },
    {
        "content": "<p>I'm not sure there.</p>\n<p>However there's a big upside to uploading the cache when the build was cancelled part way through!!</p>",
        "id": 407343147,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702340583
    },
    {
        "content": "<p>An aside: one problem I think we might have is that if you push a new commit to a PR with an in progress build, you can end up with:</p>\n<ul>\n<li>new: start</li>\n<li>old: cancel build step</li>\n<li>new: get cache</li>\n<li>old: upload partial cache</li>\n<li>new: build, but without the cache that was just uploaded</li>\n</ul>",
        "id": 407346970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702342416
    },
    {
        "content": "<p>I worry that the upside to the partial caches is the same as the problem we're trying to solve...</p>",
        "id": 407347095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702342474
    },
    {
        "content": "<p>I think the optimal solution for us in CI would be to run a pre-<code>cache put</code> step which deletes any oleans which have bad hashes (i.e. lake refuses to use them in <code>lake build</code>). Unfortunately this requires lake support</p>",
        "id": 407399545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702362976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Some.20files.20not.20found.20in.20the.20cache/near/407183836\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> I think the <code>upload cache</code> action should run only if the <code>build mathlib</code> step has already run (even if it failed). Otherwise I don't see how we can avoid confusing bad oleans from good ones without a <code>lake check-hash</code> command</p>\n</blockquote>\n<p>If the goal is to just make <code>lake</code> not trust the hash files, there is already an option for that (<code>--rehash</code> / <code>-H</code>)</p>",
        "id": 407578491,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702418293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> the goal is to make sure that after lake runs there are no (reachable) olean files in the build directory that are not correct.</p>",
        "id": 407660281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702452723
    },
    {
        "content": "<p>but we don't want to rebuild anything, hence we have to just remove the bad files</p>",
        "id": 407660403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702452776
    },
    {
        "content": "<p>The problem is not files with correct hashes and incorrect content (which is what <code>--rehash</code> handles), it is files with incorrect hashes and incorrect content. <code>lake build</code> would want to replace them, but it may not actually do so because of build errors or because it was canceled. We need something that does not take an hour to run</p>",
        "id": 407660833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702452955
    }
]