[
    {
        "content": "<p>Is this not a thing any more? Or maybe I'm just doing something silly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">hPQR</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hPQR</span><span class=\"bp\">;</span> <span class=\"c1\">-- two goals</span>\n  <span class=\"n\">assumption</span> <span class=\"c1\">-- only closes one</span>\n</code></pre></div>",
        "id": 346640382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680544032
    },
    {
        "content": "<p>It's <code>&lt;;&gt;</code> now.</p>",
        "id": 346640586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680544085
    },
    {
        "content": "<p>The <code>;</code> is the new <code>,</code>.</p>",
        "id": 346640608,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1680544091
    },
    {
        "content": "<p>Thanks. I've ported some files but this is the first time for a long time that I've tried to write Lean 4 code and I've forgotten a lot of what I knew; being in my 50s I find it hard to retain information which I've only learnt relatively recently and am not constantly using.</p>",
        "id": 346641926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680544468
    },
    {
        "content": "<p>You're still young!</p>",
        "id": 346643007,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680544790
    },
    {
        "content": "<p>The plan was to get this system proving theorems for me so I could retire early!</p>",
        "id": 346646747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680545790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/semicolon/near/346643007\">said</a>:</p>\n<blockquote>\n<p>You're still young!</p>\n</blockquote>\n<p>It's just frustrating because once Gabriel pointed this out I remembered that I'd been told it before. I've even seen it in porting. But porting doesn't actually teach me syntax and basic stuff, as the autoporter gets all that stuff right.</p>",
        "id": 346648545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680546268
    },
    {
        "content": "<p>So, porting mathlib files is not such a great way of learning Lean4 after all?</p>",
        "id": 346649824,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680546626
    },
    {
        "content": "<p>It's a great way of learning about things like the changes in <code>simp</code>, typeclass inference and so on! But on the other hand I couldn't prove <code>0 + n = n</code> because <code>induction n with d hd</code> has changed, and I didn't notice this because the autoporter is dealing with that correctly and I was not reading the stuff which worked.</p>",
        "id": 346650831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680546927
    }
]