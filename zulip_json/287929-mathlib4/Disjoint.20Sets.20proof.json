[
    {
        "content": "<p>I'm trying to do a proof on Partial Functions who's domains are disjoint.<br>\nI'm proving that <code>p1 ∪ p2 = p2 ∪ p1</code> if p1 and p2 have disjoint domains.<br>\nI'm attempting to do it by cases, with the 4 options being both combinations of x being in and not in the domain of each of p1 and p2. The case where x is in the domain of p1 and p2 means they're not disjoint, which is a contradiction.<br>\nThe problem is I can't work out how to demonstrate that contradiction.<br>\nI've got to <code>disjoint_proof: ∀ ⦃a : A⦄, a ∈ PFun.Dom p1 → ¬a ∈ PFun.Dom p2</code> and <code>x: A</code>, but I can't work out how to instantiate the forall with the value of x I want. The double-braces are messing me up and I don't know how to handle them.<br>\nCan anyone offer any advice, or point me in the direction of what tactics I need?</p>\n<p>Thanks, Rosie</p>",
        "id": 357830251,
        "sender_full_name": "Rosie Baish",
        "timestamp": 1683889337
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 357835619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683890581
    },
    {
        "content": "<p><code>have := @disjoint_proof x</code> should solve your immediate issue</p>",
        "id": 357835704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683890607
    },
    {
        "content": "<p>Hi Rosie! Nice seeing you here.</p>",
        "id": 357842012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683891870
    },
    {
        "content": "<p>The answer is that those double curly braces are <em>semi-implicit</em> argument. They behave like explicit arguments (they don't get instantiated by a metavariable when they're the outer binder) until a later argument is provided (and there they behave as if they were implicit). So here the next argument <code>disjoint_proof</code> expects is <code>a in PFun.Dom p1</code>, not <code>a</code> (and Lean will figure out what <code>a</code> is from the <code>a in PFun.Dom p1</code> argument).</p>",
        "id": 357842923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683892069
    }
]