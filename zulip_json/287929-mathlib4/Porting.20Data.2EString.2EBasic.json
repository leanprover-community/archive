[
    {
        "content": "<p>I had a quick look at Data.String.Basic, and it seems that Data.String.Defs was only partially ported. Is the plan to finish porting the missing definitions in that file? I have also noticed that Control.Monad.Writer was partially ported as Control.Writer. Should Control.Monad.Writer now import Control.Writer?</p>",
        "id": 313190888,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669859757
    },
    {
        "content": "<p>When <code>Control.Monad.Writer</code> is fully ported, we should just delete <code>Control.Writer</code> (I'm presuming there is no <code>control.writer</code> in mathlib3).</p>",
        "id": 313191455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669860125
    },
    {
        "content": "<p>I suspect that a good chunk of <code>Data.String.Basic</code> is going to be <code>#align</code>d away to <code>Std</code></p>",
        "id": 313191691,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669860354
    },
    {
        "content": "<p>I've started to work on <code>Data.String.Basic</code>. There's the issue that the new implementation of <code>Iterator</code> looks completely different under the hood and it seems harder to prove anything about it</p>",
        "id": 313924947,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670234077
    },
    {
        "content": "<p>Also, I'm not really sure <em>why</em> the file adds an additional instance of <code>LT String</code></p>",
        "id": 313928886,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670235302
    },
    {
        "content": "<p>The same goes for properties of evyerthing that's built on top of <code>String.extract</code> which now uses an external function and UTF8 byte indices. So to prove anything meaningful about these String operations would require a whole stack of helper lemmas</p>",
        "id": 313943186,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670240100
    },
    {
        "content": "<p>Those helper lemmas sound like something to be added to std</p>",
        "id": 314058617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670253748
    },
    {
        "content": "<p>The only place where the stuff in <code>Data.String.Basic</code> is needed, is <code>Data.Buffer.Parser.Basic</code> of which I'm not sure if it's well-portable either</p>",
        "id": 314075694,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670258531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/313191455\">said</a>:</p>\n<blockquote>\n<p>When <code>Control.Monad.Writer</code> is fully ported, we should just delete <code>Control.Writer</code> (I'm presuming there is no <code>control.writer</code> in mathlib3).</p>\n</blockquote>\n<p>I'm looking at <code>Control.Monad.Writer</code> -- do I want to move code from <code>Control.Writer</code> here?</p>",
        "id": 314129426,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670276269
    },
    {
        "content": "<p>i.e., as part of the single PR?</p>",
        "id": 314129500,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670276283
    },
    {
        "content": "<p>I think that would be fine.</p>",
        "id": 314145998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670283285
    },
    {
        "content": "<p>Made a new PR for this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1054\">mathlib4#1054</a></p>",
        "id": 316079056,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671120545
    },
    {
        "content": "<p>Some stuff involving <code>Iterator</code>, <code>String.popn</code> and <code>String.head</code> still missing</p>",
        "id": 316079124,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671120567
    },
    {
        "content": "<p>This reminds me that I keep going back to the proofs in <code>Control.Monad.Writer</code> and getting stuck.</p>\n<p>Happy to unwind the PR here.</p>",
        "id": 316089678,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671123324
    },
    {
        "content": "<p>So the one thing I'm stuck at is to prove that <code>Iterator.hasNext { s := { data := hd :: tl }, i := 0 }</code> holds</p>",
        "id": 316222778,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671183949
    },
    {
        "content": "<p>I'm trying to rewrite the proof of <code>String.lt_iff_toList_lt</code> from the beginning, but I'm stuck on the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">cons.cons.inl</span>\n<span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">Char</span>\n<span class=\"n\">cs₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">),</span> <span class=\"n\">ltb</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">cs₁</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">l₂</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">cs₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l₂</span>\n<span class=\"n\">cs₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ltb</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">csize</span> <span class=\"n\">c₁</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">csize</span> <span class=\"n\">c₁</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"n\">ltb</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">cs₁</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">cs₂</span> <span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The above goal is the tactic state of the <code>sorry</code> in my proof:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>String.lt_iff_toList_lt</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2018 Mario Carneiro. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Mario Carneiro</span>\n\n<span class=\"cm\">! This file was ported from Lean 3 source module data.string.basic</span>\n<span class=\"cm\">! leanprover-community/mathlib commit d13b3a4a392ea7273dfa4727dbd1892e26cfd518</span>\n<span class=\"cm\">! Please do not edit these lines, except to modify the commit id</span>\n<span class=\"cm\">! if you have ported upstream changes.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Char</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Strings</span>\n\n<span class=\"cm\">Supplementary theorems about the `String` type.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_byteIdx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_add</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">i.byteIdx</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_add_char</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_add_string</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- `&lt;` on string iterators. This coincides with `&lt;` on strings as lists. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ltb</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">s₂.hasNext</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">s₁.hasNext</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">s₁.curr</span> <span class=\"bp\">=</span> <span class=\"n\">s₂.curr</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s₁.i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₁.next.i</span> <span class=\"o\">:=</span>\n          <span class=\"k\">match</span> <span class=\"n\">s₁</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">i.byteIdx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n            <span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"n\">ltb</span> <span class=\"n\">s₁.next</span> <span class=\"n\">s₂.next</span>\n      <span class=\"k\">else</span> <span class=\"n\">s₁.curr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂.curr</span>\n    <span class=\"k\">else</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.ltb</span> <span class=\"n\">String.ltb</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ltb.inductionOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span>\n      <span class=\"n\">get</span> <span class=\"n\">s₁</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"n\">s₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Iterator.next</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Iterator.next</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">base_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span>\n      <span class=\"bp\">¬</span> <span class=\"n\">get</span> <span class=\"n\">s₁</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"n\">s₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">base₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">base₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">s₂.hasNext</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s₁.hasNext</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">s₁.curr</span> <span class=\"bp\">=</span> <span class=\"n\">s₂.curr</span> <span class=\"k\">then</span>\n        <span class=\"n\">ind</span> <span class=\"n\">s₁.s</span> <span class=\"n\">s₂.s</span> <span class=\"n\">s₁.i</span> <span class=\"n\">s₂.i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">inductionOn</span> <span class=\"n\">s₁.next</span> <span class=\"n\">s₂.next</span> <span class=\"n\">ind</span> <span class=\"n\">base_eq</span> <span class=\"n\">base₁</span> <span class=\"n\">base₂</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">base_eq</span> <span class=\"n\">s₁.s</span> <span class=\"n\">s₂.s</span> <span class=\"n\">s₁.i</span> <span class=\"n\">s₂.i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">eq</span>\n    <span class=\"k\">else</span> <span class=\"n\">base₁</span> <span class=\"n\">s₁.s</span> <span class=\"n\">s₂.s</span> <span class=\"n\">s₁.i</span> <span class=\"n\">s₂.i</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">else</span> <span class=\"n\">base₂</span> <span class=\"n\">s₁.s</span> <span class=\"n\">s₂.s</span> <span class=\"n\">s₁.i</span> <span class=\"n\">s₂.i</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">LT'</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltb</span> <span class=\"n\">s₁.mkIterator</span> <span class=\"n\">s₂.mkIterator</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.has_lt'</span> <span class=\"n\">String.LT'</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidableLT</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DecidableRel</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LT'</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.decidable_lt</span> <span class=\"n\">String.decidableLT</span>\n\n<span class=\"c1\">-- short-circuit type class inference</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_iff_toList_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">},</span> <span class=\"n\">s₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂</span> <span class=\"bp\">↔</span> <span class=\"n\">s₁.toList</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂.toList</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">l₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">l₁</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">l₂</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">↔</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l₂</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">l₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₂</span> <span class=\"n\">cs₂</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">iff_of_true</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ne_false_of_eq_true</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">decide_eq_true</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.add_pos_right</span> <span class=\"o\">(</span><span class=\"n\">utf8ByteSize.go</span> <span class=\"n\">cs₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">List.nil_lt_cons</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₁</span> <span class=\"n\">cs₁</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">iff_of_false</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_lt</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.nil_lt_cons</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₁</span> <span class=\"n\">cs₁</span> <span class=\"n\">ih</span> <span class=\"n\">c₂</span> <span class=\"n\">cs₂</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iterator.hasNext</span><span class=\"o\">,</span> <span class=\"n\">Iterator.curr</span><span class=\"o\">,</span> <span class=\"n\">Iterator.next</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span>\n            <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">,</span> <span class=\"n\">csize_pos</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_iff</span><span class=\"o\">]</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">c₂</span> <span class=\"k\">then</span>\n              <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₂</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₂</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n            <span class=\"k\">else</span> <span class=\"n\">c₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c₂</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n      <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">c₂</span>\n        <span class=\"k\">suffices</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n          <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">cs₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">List.Lex.cons_iff.symm</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"bp\">.</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">List.Lex.rel</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h'</span>\n        <span class=\"bp\">.</span> <span class=\"n\">contradiction</span>\n        <span class=\"bp\">.</span> <span class=\"n\">assumption</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.lt_iff_to_list_lt</span> <span class=\"n\">String.lt_iff_toList_lt</span>\n</code></pre></div>\n</div></div>\n<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/313943186\">said</a>:</p>\n<blockquote>\n<p>The same goes for properties of evyerthing that's built on top of <code>String.extract</code> which now uses an external function and UTF8 byte indices. So to prove anything meaningful about these String operations would require a whole stack of helper lemmas</p>\n</blockquote>\n<p>I don't know whether I should create a new git branch because I'm attempting not to use these helper lemmas to prove <code>String.lt_iff_toList_lt</code>.</p>",
        "id": 342701852,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679109617
    },
    {
        "content": "<p>I've managed to prove <code>String.lt_iff_toList_lt</code>. This theorem took me over 30 hours to prove. I'll soon push my commit to the git branch.</p>\n<p>It's my first time porting a Mathlib file, and I think I picked the wrong one for a novice. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>String.lt_iff_toList_lt</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2018 Mario Carneiro. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Mario Carneiro</span>\n\n<span class=\"cm\">! This file was ported from Lean 3 source module data.string.basic</span>\n<span class=\"cm\">! leanprover-community/mathlib commit d13b3a4a392ea7273dfa4727dbd1892e26cfd518</span>\n<span class=\"cm\">! Please do not edit these lines, except to modify the commit id</span>\n<span class=\"cm\">! if you have ported upstream changes.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Char</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Strings</span>\n\n<span class=\"cm\">Supplementary theorems about the `String` type.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.eq_iff</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">i₂</span> <span class=\"bp\">↔</span> <span class=\"n\">i₁.byteIdx</span> <span class=\"bp\">=</span> <span class=\"n\">i₂.byteIdx</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"n\">i₁.byteIdx</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">i₂.byteIdx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_add_char</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Pos.zero_add_string</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">s.utf8ByteSize</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Induction on `String.utf8GetAux`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">utf8GetAux.inductionOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">[]</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span> <span class=\"n\">i</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n      <span class=\"n\">eq</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n    <span class=\"k\">else</span> <span class=\"n\">ind</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">inductionOn</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"n\">p</span> <span class=\"n\">nil</span> <span class=\"n\">eq</span> <span class=\"n\">ind</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">utf8GetAux.add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">utf8GetAux.inductionOn</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">utf8GetAux</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">subst</span> <span class=\"n\">i</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">show</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">utf8GetAux</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">get.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_pos_right</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"n\">utf8GetAux</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Pos.zero_add_char</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">utf8GetAux.add_right_cancel</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Iterator.hasNext.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">hasNext</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"n\">hasNext</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hasNext</span><span class=\"o\">,</span> <span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- `&lt;` on string iterators. This coincides with `&lt;` on strings as lists. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ltb</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">s₂.hasNext</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">s₁.hasNext</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">s₁.curr</span> <span class=\"bp\">=</span> <span class=\"n\">s₂.curr</span> <span class=\"k\">then</span>\n        <span class=\"n\">ltb</span> <span class=\"n\">s₁.next</span> <span class=\"n\">s₂.next</span>\n      <span class=\"k\">else</span> <span class=\"n\">s₁.curr</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂.curr</span>\n    <span class=\"k\">else</span> <span class=\"n\">true</span>\n  <span class=\"k\">else</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.ltb</span> <span class=\"n\">String.ltb</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">LT'</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"bp\">↦</span> <span class=\"n\">ltb</span> <span class=\"n\">s₁.iter</span> <span class=\"n\">s₂.iter</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.has_lt'</span> <span class=\"n\">String.LT'</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidableLT</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DecidableRel</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LT'</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.decidable_lt</span> <span class=\"n\">String.decidableLT</span>\n\n<span class=\"sd\">/-- Induction on `String.ltb`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ltb.inductionOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">it₁</span> <span class=\"n\">it₂</span> <span class=\"o\">:</span> <span class=\"n\">Iterator</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span>\n      <span class=\"n\">get</span> <span class=\"n\">s₁</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"n\">s₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Iterator.next</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Iterator.next</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span>\n      <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span>\n      <span class=\"bp\">¬</span> <span class=\"n\">get</span> <span class=\"n\">s₁</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">get</span> <span class=\"n\">s₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">base₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span>\n      <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"n\">base₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">Iterator.hasNext</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">it₁</span> <span class=\"n\">it₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">it₂.hasNext</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">it₁.hasNext</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">it₁.curr</span> <span class=\"bp\">=</span> <span class=\"n\">it₂.curr</span> <span class=\"k\">then</span>\n        <span class=\"n\">ind</span> <span class=\"n\">it₁.s</span> <span class=\"n\">it₂.s</span> <span class=\"n\">it₁.i</span> <span class=\"n\">it₂.i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">heq</span> <span class=\"o\">(</span><span class=\"n\">inductionOn</span> <span class=\"n\">it₁.next</span> <span class=\"n\">it₂.next</span> <span class=\"n\">ind</span> <span class=\"n\">eq</span> <span class=\"n\">base₁</span> <span class=\"n\">base₂</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">eq</span> <span class=\"n\">it₁.s</span> <span class=\"n\">it₂.s</span> <span class=\"n\">it₁.i</span> <span class=\"n\">it₂.i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">heq</span>\n    <span class=\"k\">else</span> <span class=\"n\">base₁</span> <span class=\"n\">it₁.s</span> <span class=\"n\">it₂.s</span> <span class=\"n\">it₁.i</span> <span class=\"n\">it₂.i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">else</span> <span class=\"n\">base₂</span> <span class=\"n\">it₁.s</span> <span class=\"n\">it₂.s</span> <span class=\"n\">it₁.i</span> <span class=\"n\">it₂.i</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ltb.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs₁</span> <span class=\"n\">cs₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ltb.inductionOn</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩⟩)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">])</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">])</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iterator.hasNext.cons_add_csize</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">heq</span> <span class=\"n\">ih</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iterator.curr</span><span class=\"o\">,</span> <span class=\"n\">Iterator.next</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext.cons_add_csize</span><span class=\"o\">,</span>\n          <span class=\"n\">get.cons_add_csize</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"k\">show</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩)⟩⟩</span>\n             <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩)⟩⟩</span> <span class=\"bp\">=</span>\n         <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₁</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩)⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i₂</span><span class=\"o\">⟩)⟩⟩</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span> <span class=\"n\">hne</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iterator.curr</span><span class=\"o\">,</span> <span class=\"n\">Iterator.hasNext.cons_add_csize</span><span class=\"o\">,</span> <span class=\"n\">get.cons_add_csize</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n\n<span class=\"c1\">-- short-circuit type class inference</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_iff_toList_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">},</span> <span class=\"n\">s₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂</span> <span class=\"bp\">↔</span> <span class=\"n\">s₁.toList</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂.toList</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">s₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s₁</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s₂</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">↔</span> <span class=\"n\">s₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s₂</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">s₂</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">s₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₂</span> <span class=\"n\">cs₂</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">iff_of_true</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ne_false_of_eq_true</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">decide_eq_true</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">,</span> <span class=\"n\">csize_pos</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">List.nil_lt_cons</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₁</span> <span class=\"n\">cs₁</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">iff_of_false</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_lt</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">List.nil_lt_cons</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rename_i</span> <span class=\"n\">c₁</span> <span class=\"n\">cs₁</span> <span class=\"n\">ih</span> <span class=\"n\">c₂</span> <span class=\"n\">cs₂</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ltb</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iterator.hasNext</span><span class=\"o\">,</span> <span class=\"n\">Iterator.curr</span><span class=\"o\">,</span> <span class=\"n\">Iterator.next</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span>\n          <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">,</span> <span class=\"n\">csize_pos</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_iff</span><span class=\"o\">]</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">c₂</span> <span class=\"k\">then</span>\n            <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₂</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₂</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n          <span class=\"k\">else</span> <span class=\"n\">c₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c₂</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">c₂</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c₁</span> <span class=\"o\">::</span> <span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c₁</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"n\">ltb</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₁</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs₂</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n        <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">cs₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">List.Lex.cons_iff.symm</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Pos.zero_add_char</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ltb.cons_add_csize</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">List.Lex.rel</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n      <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h'</span>\n      <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n      <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">string.lt_iff_to_list_lt</span> <span class=\"n\">String.lt_iff_toList_lt</span>\n</code></pre></div>\n</div></div>",
        "id": 343096653,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679313154
    },
    {
        "content": "<p>Why did you choose to rewrite it from scratch?</p>",
        "id": 343156389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679326842
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/9d69d92e11a00bfb6420affaffc776793f80a983/Mathlib/Data/String/Basic.lean#L196-L227\">The previous proof</a> didn't work, and its comment said, \"TODO This proof probably has to be completely redone.\"</p>",
        "id": 343234335,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679349743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/313924947\">said</a>:</p>\n<blockquote>\n<p>I've started to work on <code>Data.String.Basic</code>. There's the issue that the new implementation of <code>Iterator</code> looks completely different under the hood and it seems harder to prove anything about it</p>\n</blockquote>\n<p>I had to prove several new theorems and lemmas because the definition of <code>String.Iterator</code> in Mathlib4 was different from that of Mathlib3.</p>",
        "id": 343236198,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679350544
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.Iterator#doc\">docs4#String.Iterator</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/string.iterator\">docs#string.iterator</a></p>",
        "id": 343237451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679351083
    },
    {
        "content": "<p>Does it help to define <code>String.Iterator.fst</code> as <code>it.extract it.toEnd</code> and <code>String.Iterator.snd</code> as <code>it.string.iter.extract it</code>, and then use those two properties as before?</p>",
        "id": 343238861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679351661
    },
    {
        "content": "<p>I'm not sure, but I assume it'll help only when you change the definition of <code>String.Iterator</code> back into the Mathlib3 one.</p>",
        "id": 343255294,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679360496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/313190888\">said</a>:</p>\n<blockquote>\n<p>I had a quick look at Data.String.Basic, and it seems that Data.String.Defs was only partially ported. Is the plan to finish porting the missing definitions in that file?</p>\n</blockquote>\n<p><del>I'll port <code>data.string.defs</code> before I push my commit to the <code>port-data-string-basic-2</code> branch.</del></p>\n<p>I first pushed my commits to the <code>port-data-string-basic-2</code> branch, since porting <code>data.string.defs</code> would take more time than I expected.</p>",
        "id": 343257065,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679361511
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/1054\">!4#1054</a> is now ready to merge. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 344875298,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1679926039
    },
    {
        "content": "<p>That's really cool! I felt bad about letting it sit for so long</p>",
        "id": 345639055,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1680175298
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_toList_le.mpr</span> <span class=\"n\">le_rfl</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_toList_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">toList_inj</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_total</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">String.decidableLE</span>\n</code></pre></div>\n<p>The above code has the following error, which didn't occur before. Can anyone tell me how to solve this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk</span>\n<span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"n\">data</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">compare</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compareOfLessAndEq</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>GitHub PR discussion: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1054#discussion_r1158533762\">https://github.com/leanprover-community/mathlib4/pull/1054#discussion_r1158533762</a></p>",
        "id": 347150944,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680702458
    },
    {
        "content": "<p>Maybe related to <a href=\"https://github.com/leanprover-community/mathlib4/pull/2858\">!4#2858</a></p>",
        "id": 347152669,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680702805
    },
    {
        "content": "<p>Solution: add the line <code>compare a b := compareOfLessAndEq a b</code> to the instance declaration.</p>",
        "id": 347164595,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680704876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> has marked this topic as resolved.</p>",
        "id": 347164763,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680704902
    },
    {
        "content": "<p>That's the wrong solution</p>",
        "id": 347591030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680853331
    },
    {
        "content": "<p>It discards the optimized string comparison function and replaces it with the naive one</p>",
        "id": 347591154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680853370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>, please don't resolve topics you're not involved in.</p>",
        "id": 347603228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680857193
    },
    {
        "content": "<p>Or simply don't resolve topics. It's noisy and broken.</p>",
        "id": 347603262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680857211
    },
    {
        "content": "<p>(re \"broken\": if you resolve a topic, anyone who shared a link to that topic will find that the link they shared no longer works)</p>",
        "id": 347622197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680862699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> has marked this topic as unresolved.</p>",
        "id": 347636644,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680866176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347591154\">said</a>:</p>\n<blockquote>\n<p>It discards the optimized string comparison function and replaces it with the naive one</p>\n</blockquote>\n<p>Hmm, I'm not sure what I should do to solve the error correctly. Can you help me?</p>",
        "id": 347678370,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680877758
    },
    {
        "content": "<p>You need to provide a manual <code>compare_eq</code> field, I think</p>",
        "id": 347682340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680878880
    },
    {
        "content": "<p>The error is coming from the default value for a proof field which no longer works; you need to provide that proof field explicitly, rather than replacing the data field with something that creates a diamond.</p>",
        "id": 347682557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680878935
    },
    {
        "content": "<p>I'm afraid I don't know the name of the field; does the error message not tell you?</p>",
        "id": 347682672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680878969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347682672\">said</a>:</p>\n<blockquote>\n<p>I'm afraid I don't know the name of the field; does the error message not tell you?</p>\n</blockquote>\n<p>No, I don't think it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk</span>\n<span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"n\">data</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">compare</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compareOfLessAndEq</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is the field you mentioned <code>compare_eq_compareOfLessAndEq</code>?</p>",
        "id": 347685525,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680879669
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_toList_le.mpr</span> <span class=\"n\">le_rfl</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_toList_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">toList_inj</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_total</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">String.decidableLE</span>\n  <span class=\"n\">compare_eq_compareOfLessAndEq</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 347686050,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680879818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347682557\">said</a>:</p>\n<blockquote>\n<p>The error is coming from the default value for a proof field which no longer works; you need to provide that proof field explicitly, rather than replacing the data field with something that creates a diamond.</p>\n</blockquote>\n<p>Right now, I'm clueless about how to prove <code>compare_eq_compareOfLessAndEq</code>. I'll try it again later.</p>",
        "id": 347693955,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680882089
    },
    {
        "content": "<p>I'm confused - the PR seems to be closed already?</p>",
        "id": 347694456,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680882245
    },
    {
        "content": "<p>Yes. <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 347695029,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680882443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347591154\">said</a>:</p>\n<blockquote>\n<p>It discards the optimized string comparison function and replaces it with the naive one</p>\n</blockquote>\n<p>Can you elaborate on \"the optimized string comparison function\"?</p>",
        "id": 347705485,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680886033
    },
    {
        "content": "<p>Here is my attempt to prove <code>compare_eq_compareOfLessAndEq</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_toList_le.mpr</span> <span class=\"n\">le_rfl</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_toList_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">toList_inj</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_total</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">String.decidableLE</span>\n  <span class=\"n\">compare_eq_compareOfLessAndEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compare</span><span class=\"o\">,</span> <span class=\"n\">compareOfLessAndEq</span><span class=\"o\">]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">lt_iff_toList_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">String</span>\n</code></pre></div>",
        "id": 347705802,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680886148
    },
    {
        "content": "<p>So where is the code that doesn't work? Or can you make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> including imports?</p>",
        "id": 347706289,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680886352
    },
    {
        "content": "<p>I edited the above message.</p>",
        "id": 347706641,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680886505
    },
    {
        "content": "<p><code>Data.String.Basic</code> has the instance <code>String.LT'</code>, which overrides the default instance of <code>LT String</code>.</p>",
        "id": 347708153,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680887038
    },
    {
        "content": "<p>So, how do you close the following goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt</span> <span class=\"n\">String</span> <span class=\"n\">instLTString</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">@</span><span class=\"n\">LT.lt</span> <span class=\"n\">String</span> <span class=\"n\">LT'</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 347709726,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680887531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347164595\">said</a>:</p>\n<blockquote>\n<p>Solution: add the line <code>compare a b := compareOfLessAndEq a b</code> to the instance declaration.</p>\n</blockquote>\n<p>I don't know. Perhaps my naive solution isn't wrong?</p>",
        "id": 347710547,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680887824
    },
    {
        "content": "<p>It is wrong, because there is already a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOrdString#doc\">docs4#instOrdString</a> and your fix creates a second instance that is not defeq</p>",
        "id": 347719119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890563
    },
    {
        "content": "<p>\"404 Not Found\"</p>",
        "id": 347719391,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680890647
    },
    {
        "content": "<p>The <code>sorry</code> you're stuck on is proving that the instance you wanted to provide is defeq to the existing one. The proof is probably not completely trivial.</p>",
        "id": 347719485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890688
    },
    {
        "content": "<p>Although now I'm questioning whether it's actually not already defeq</p>",
        "id": 347719859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890809
    },
    {
        "content": "<p>Although now I'm questioning whether it's actually not already defeq</p>",
        "id": 347719908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890831
    },
    {
        "content": "<p>@thorimur can probably advise here, I'm not at lean so can't really help.</p>",
        "id": 347719915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680890835
    },
    {
        "content": "<p>This might be relevant: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a897757abcb0bffa1dc96f46017f1d65e0fd1f9b/Mathlib/Data/List/Lex.lean#L178-L181\">https://github.com/leanprover-community/mathlib4/blob/a897757abcb0bffa1dc96f46017f1d65e0fd1f9b/Mathlib/Data/List/Lex.lean#L178-L181</a></p>\n<p>It's 3:12 a.m. here in KR, so I'll get into bed now. <span aria-label=\"in bed\" class=\"emoji emoji-1f6cc\" role=\"img\" title=\"in bed\">:in_bed:</span></p>",
        "id": 347720752,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680891164
    },
    {
        "content": "<p>I don't think it's urgent to fix this</p>",
        "id": 347722416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680891763
    },
    {
        "content": "<p>Feel free to open an issue, assign it to me/ thorimur, and abandon it entirely if you're not that interested in this.</p>",
        "id": 347722502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680891803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.lt_iff_lex_char_lt</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.lt</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">↔</span> <span class=\"n\">List.Lex</span> <span class=\"n\">Char.lt</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Lex.nil</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">head</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">Lex.rel</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">tail</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">hba</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n      <span class=\"n\">subst</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Lex.cons</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">List.lt.nil</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">List.lt.tail</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">b</span> <span class=\"n\">bs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">List.lt.head</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">String</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_iff_toList_le.mpr</span> <span class=\"n\">le_rfl</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_toList_lt</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">toList_inj</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_iff_toList_le</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_total</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">String.decidableLE</span>\n  <span class=\"n\">compare_eq_compareOfLessAndEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compare</span><span class=\"o\">,</span> <span class=\"n\">compareOfLessAndEq</span><span class=\"o\">,</span> <span class=\"n\">toList</span><span class=\"o\">,</span> <span class=\"n\">instLTString</span><span class=\"o\">,</span> <span class=\"n\">List.instLTList</span><span class=\"o\">,</span> <span class=\"n\">List.LT'</span><span class=\"o\">]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.lt_iff_lex_char_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">contradiction</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347719485\">said</a>:</p>\n<blockquote>\n<p>The <code>sorry</code> you're stuck on is proving that the instance you wanted to provide is defeq to the existing one. The proof is probably not completely trivial.</p>\n</blockquote>\n<p>It took me over an hour to prove <code>compare_eq_compareOfLessAndEq</code>. Thank you so much for your guidance!</p>",
        "id": 347841069,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680951132
    },
    {
        "content": "<p>GitHub PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3339\">!4#3339</a></p>",
        "id": 347851681,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1680954432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Data.2EString.2EBasic/near/347622197\">said</a>:</p>\n<blockquote>\n<p>(re \"broken\": if you resolve a topic, anyone who shared a link to that topic will find that the link they shared no longer works)</p>\n</blockquote>\n<p>Is that still true? I thought zulip fixed that long ago <a href=\"https://github.com/zulip/zulip/issues/19651\">https://github.com/zulip/zulip/issues/19651</a>. If not we should report it of course</p>",
        "id": 347886145,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680967925
    }
]