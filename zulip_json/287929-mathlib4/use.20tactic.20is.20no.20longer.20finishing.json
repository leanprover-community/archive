[
    {
        "content": "<p>A small detail that is not very important but a bit confusing. In Lean 3 you could use <code>use</code> as a finishing tactic, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 323906683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766314
    },
    {
        "content": "<p>This no longer works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 323906787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766333
    },
    {
        "content": "<p><code>invalid constructor ⟨...⟩, insufficient number of arguments, constructs 'True.intro' does not have explicit fields, but #2 provided</code></p>",
        "id": 323906824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The capabilities of <code>use</code> have been changing, most recently I downgraded them slightly: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1153\">mathlib4#1153</a></p>",
        "id": 323907437,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674766565
    },
    {
        "content": "<p>I think this is completely unrelated. Here I'm not using the trivial tactic, only the term.</p>",
        "id": 323908058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766790
    },
    {
        "content": "<p>Maybe a less confusing example would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 323908344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766865
    },
    {
        "content": "<p>The first one works in Lean 3.</p>",
        "id": 323908367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674766875
    }
]