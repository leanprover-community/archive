[
    {
        "content": "<p>Do we use the SubType pretty-printer on purpose when using the coercion to type of <code>SetLike</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- goal is now { x // x ∈ H } instead of ↥H</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subgroup.one_mem</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>I would really like to get back the <code>↥H</code> that we had in Lean 3. In the above <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it isn't too bad but in actual example it really blows up the tactic state complexity.</p>",
        "id": 395954068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696968695
    },
    {
        "content": "<p>What about we make <code>SetLike.coe</code> semireducible, the same way as <code>FunLike.coeFn</code> is?</p>",
        "id": 395954420,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696968872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 395954657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696968991
    },
    {
        "content": "<p>I don't think making types semireducible is a good idea, it's caused us problems in lots of places (eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual#doc\">docs#Module.Dual</a>)</p>",
        "id": 395956698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696970023
    },
    {
        "content": "<p>But we could certainly write a custom pretty printer that shows the output you want</p>",
        "id": 395956737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696970043
    },
    {
        "content": "<p>Or maybe even just custom notation, where <code>↥H</code> is notation for <code>{ x // x ∈ H }</code> for any <code>Membership</code> operation</p>",
        "id": 395956881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696970113
    },
    {
        "content": "<p>I tried but, unsurprisingly, I wasn't able to figure out the incantation. Help from an expert delaborator/unexpander writer would be very welcome.</p>",
        "id": 395964154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696973896
    },
    {
        "content": "<p>This issue makes it really hard to write any exercise about subgroups or submodules. It would be really nice to get help from people who can write delaborators. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 396377329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697151141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I just made a delaborator for SetLike's CoeSort. I've only tested it on your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SetLike</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Subtype</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSubtypeSetLike</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_α</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Membership.mem</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_S</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">body.getAppFnArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inst.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">SetLike.instMembership</span> <span class=\"mi\">3</span>\n  <span class=\"n\">SubExpr.withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withBindingBody</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withNaryArg</span> <span class=\"mi\">4</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↥</span> <span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SetLike</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- goal is now ↥H instead of { x // x ∈ H }</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subgroup.one_mem</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 398410882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698210238
    },
    {
        "content": "<p>Awesome! Are you PRing it already or should I do it?</p>",
        "id": 398482124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698239610
    },
    {
        "content": "<p>The above misfires on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 398489352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698241802
    },
    {
        "content": "<p>I think this might be correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Subtype</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSubtypeSetLike</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_α</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Membership.mem</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_S</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">body.getAppFnArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inst.isAppOfArity</span> <span class=\"bp\">``</span><span class=\"n\">SetLike.instMembership</span> <span class=\"mi\">3</span>\n  <span class=\"n\">SubExpr.withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withBindingBody</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withNaryArg</span> <span class=\"mi\">4</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">↥</span> <span class=\"bp\">$</span><span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398490254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698242036
    },
    {
        "content": "<p>I've made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7927\">#7927</a>. I'll add a test that it actually pretty prints as advertised before marking it awaiting-review</p>",
        "id": 398517138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698249415
    }
]