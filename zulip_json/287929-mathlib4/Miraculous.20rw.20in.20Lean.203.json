[
    {
        "content": "<p>Does anyone understand how rewriting using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_equiv.norm_map\">docs#linear_isometry_equiv.norm_map</a> can succeed in <a href=\"https://github.com/leanprover-community/mathlib/blob/7fdeecc0d03cd40f7a165e6cf00a4d2286db599f/src/analysis/calculus/cont_diff.lean#L2419\">https://github.com/leanprover-community/mathlib/blob/7fdeecc0d03cd40f7a165e6cf00a4d2286db599f/src/analysis/calculus/cont_diff.lean#L2419</a> and similar places? To me (and to Lean 4) it looks like it should fail just as the following will fail if you remove the first line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363296593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685795901
    },
    {
        "content": "<p>Note this question already came in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Analysis/Calculus/ContDiffDef.lean#L792\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Analysis/Calculus/ContDiffDef.lean#L792</a></p>",
        "id": 363297283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685796093
    },
    {
        "content": "<p><code>∘</code> is reducible in Lean 3, but not in Lean 4</p>",
        "id": 363298756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685796517
    },
    {
        "content": "<p>The code snippet above is Lean 3 code and fails if you remove the change.</p>",
        "id": 363298890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685796557
    },
    {
        "content": "<p>I guess there's something about the original scenario that somehow is allowed to unfold the reducible <code>∘</code> (but only in Lean 3), and isn't captured by your mwe</p>",
        "id": 363313569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685800796
    },
    {
        "content": "<p>The proof you link to fails if you start with <code>local attribute [semireducible] function.comp</code></p>",
        "id": 363313786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685800853
    },
    {
        "content": "<blockquote>\n<p>The code snippet above is Lean 3 code</p>\n</blockquote>\n<p>This thread is arguably in the wrong stream then :-) </p>\n<p>I had real trouble getting that file to compile, even though I have all oleans. If I open the file on master and compile, I often get <code>excessive memory consumption detected at 'replace' (potential solution: increase memory consumption threshold)</code> :-( Setting default memory limit to 16384 on a 32 gig machine (it was on 4096) seems to have solved it. I wonder how Lean 4 will cope with 3000 line files deep in the heirarchy. We'll find out soon enough I guess.</p>\n<p>Here's the conundrum in a self-contained lean 3 file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u_1</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Du</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Eu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">Du</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Du</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Du</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Du</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">Eu</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">Eu</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Du</span> <span class=\"bp\">→</span> <span class=\"n\">Eu</span><span class=\"o\">}</span>\n <span class=\"o\">:</span>\n  <span class=\"bp\">‖</span><span class=\"n\">iterated_fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">continuous_multilinear_curry_right_equiv'</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"n\">Du</span> <span class=\"n\">Eu</span><span class=\"o\">)</span> <span class=\"bp\">∘</span>\n    <span class=\"n\">iterated_fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Du</span><span class=\"o\">),</span> <span class=\"n\">fderiv_within</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_isometry_equiv.norm_map</span><span class=\"o\">,</span> <span class=\"c1\">-- why does this work??</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363343377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685809658
    },
    {
        "content": "<p>Mathlib-free: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`‖`</span> <span class=\"n\">e</span> <span class=\"bp\">`‖`</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span>   <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≃</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">equiv.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">‖</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- works?!</span>\n  <span class=\"n\">done</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363345370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685810309
    },
    {
        "content": "<p>And it's not just because <code>function.comp</code> is <code>@[inline, reducible]</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363347718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685811238
    }
]