[
    {
        "content": "<p>I am trying to fix the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">emptyStep'</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"n\">init</span> <span class=\"bp\">=</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It should expand the definition of <code>loop</code>, but it doesn't. Can someone help with this? Thanks!</p>",
        "id": 338171360,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677427240
    },
    {
        "content": "<p>Does using <code>rw</code> instead work?</p>",
        "id": 338192240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677437588
    },
    {
        "content": "<p>No :( But I figured out why! It's very tricky</p>",
        "id": 338209382,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677448971
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">emptyStep''</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"n\">f</span> <span class=\"n\">k.succ</span> <span class=\"n\">k.succ</span> <span class=\"n\">k.succ</span> <span class=\"mi\">1</span> <span class=\"n\">init</span> <span class=\"bp\">=</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>First I messed around and found that this works</p>",
        "id": 338209427,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677449026
    },
    {
        "content": "<p>Then as it turns out, the implementation of loop is kind of annoying and depends on the fuel (the argument right after <code>k</code>)</p>",
        "id": 338209491,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677449058
    },
    {
        "content": "<p>But tldr you just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">emptyStep'</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Std.Range.forIn.loop</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"mi\">1</span> <span class=\"n\">init</span> <span class=\"bp\">=</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn.loop</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 338209506,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677449084
    }
]