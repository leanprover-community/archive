[
    {
        "content": "<p>tl;dr I'd like to combine <code>tfae_have</code> and <code>tfae_finish</code> (at least behind the scenes) into a single block tactic instead of two disconnected tactics.</p>\n<p>Currently (in mathlib3) the tfae tactics work by having <code>tfae_finish</code> look through <em>all</em> the hypotheses in the context, not just those generated by <code>tfae_have</code>. Is this really necessary (or a good idea)?</p>\n<p>In all the examples I’ve looked at so far we use <code>tfae_have</code> to introduce every assumption (so we don’t actually need to use any other assumptions in the context that <code>tfae_finish</code> gathers). (Plus naively it seems like it might mean a lot of defeq checks between types in assumptions and parts of the goal, since we can’t keep track of which assumption connects which two tfae goals.)</p>\n<p>We could simplify things if tfae_have and tfae_finish were combined into a single “block tactic” like e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tfae</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>Also tbh (and perhaps most practically important) a block-like tactic would be easier for me to implement, at least by my current assessment. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>(Actually we could even keep the lean4-ified version of the old syntax and just make it magically a block tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n<span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n<span class=\"n\">tfae_have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">…</span>\n<span class=\"n\">tfae_finish</span>\n</code></pre></div>\n<p>where behind the scenes this is all one big syntax node.)</p>\n<p>My question here isn’t about the syntax; it’s just about whether it would be okay to change the nature of these tactics to be more of a “single tactic” than separately-called ones. </p>\n<p>That is, as long as I can verify that mathlib doesn’t rely on <code>tfae_finish</code> being able to access the full context, and that we never “interrupt” a sequence of <code>tfae_have</code>s with some other tactic for some reason (which would also make it non-block-able).</p>",
        "id": 325879702,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675543205
    },
    {
        "content": "<p>I think it would be best to design the <code>tfae_have</code> and <code>tfae_finish</code> tactics with roughly the behavior they have in lean 3, and then add a <code>tfae</code> block tactic and use mathport to translate to the block tactic form when possible, or use a linter which detects the syntactic pattern and suggests the block tactic</p>",
        "id": 325883663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675546724
    },
    {
        "content": "<p>Perhaps it should be spelled <code>tfae</code> for the current <code>tfae_finish</code>, and <code>tfae with</code> for the block tactic, for consistency with the lean 4 <code>cases</code> tactic</p>",
        "id": 325883698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675546770
    },
    {
        "content": "<p>BTW, is it hard to fix <code>mathport</code> so that it doesn't generate very long error messages for proofs that use <code>tfae</code>?</p>",
        "id": 325883948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675547016
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2052/files#diff-2120274c41c22080464ed7c284ab18bb00a8b6c2e202089ba2c2a605c77f455cR1581\">https://github.com/leanprover-community/mathlib4/pull/2052/files#diff-2120274c41c22080464ed7c284ab18bb00a8b6c2e202089ba2c2a605c77f455cR1581</a></p>",
        "id": 325884023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675547067
    },
    {
        "content": "<p>geez, why aren't people reporting these things</p>",
        "id": 325884056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675547104
    },
    {
        "content": "<p>that kind of message is always a bug in mathport</p>",
        "id": 325884087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675547142
    },
    {
        "content": "<p>We started porting files with <code>tfae</code> not so long ago. Deleting 100 lines is easy.</p>",
        "id": 325884099,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675547152
    },
    {
        "content": "<p>yes I know that's what I mean by \"why aren't people reporting these things\"</p>",
        "id": 325884170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675547191
    },
    {
        "content": "<p>when you see a bug, report it, don't just work around</p>",
        "id": 325884185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675547202
    },
    {
        "content": "<p>the output syntax after the 100 lines is also garbage</p>",
        "id": 325884208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675547221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/make.20.60tfae.60.20tactics.20a.20block.20tactic.3F/near/325883663\">said</a>:</p>\n<blockquote>\n<p>I think it would be best to design the <code>tfae_have</code> and <code>tfae_finish</code> tactics with roughly the behavior they have in lean 3, and then add a <code>tfae</code> block tactic and use mathport to translate to the block tactic form when possible, or use a linter which detects the syntactic pattern and suggests the block tactic</p>\n</blockquote>\n<p>sounds reasonable! which should I do first? </p>\n<p>the block version is probably easier for me to implement—I can just build the proof directly instead of doing a search through the context. Aside from a test I think it covers everything in mathlib (that is, all uses of <code>tfae_finish</code> are immediately preceded by all necessary <code>tfae_have</code>s) and so would be sufficient for porting, if mathport could handle the change (I can double check this if necessary). but idk if it’s important to have mathlib behavior first</p>",
        "id": 325884625,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675547590
    },
    {
        "content": "<p>mathlib behavior first is definitely important</p>",
        "id": 325886060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675548661
    },
    {
        "content": "<p>not to mention that with my proposal you would need the non-block structured version anyway</p>",
        "id": 325886096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675548693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> tfae construction is fixed on mathport master</p>",
        "id": 325886184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675548738
    },
    {
        "content": "<p>IMHO, \"rewrite in a block structure\" is a simple fix. There are only 33 calls to <code>tfae_finish</code> in mathlib.</p>",
        "id": 325886318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675548848
    },
    {
        "content": "<p>I'm thinking more along the lines of what we want to have eventually, plus preserving compatibility</p>",
        "id": 325886483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675548974
    },
    {
        "content": "<p>For sure we can encourage block structure, but there are use cases that prefer to avoid block structure, and code outside of mathlib as well which will be translated by mathport after the port</p>",
        "id": 325886527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549037
    },
    {
        "content": "<p>it's the same as the situation with <code>cases</code> vs <code>cases'</code></p>",
        "id": 325886546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549069
    },
    {
        "content": "<p>At least, a block structured version of tfae should allow the blocks to be <code>?_</code> and filled after the tactic, like <code>cases</code> / <code>induction</code></p>",
        "id": 325886648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549164
    },
    {
        "content": "<p>gotcha, I just thought that if we wanted to speed up the porting that’s happening immediately we’d want a rudimentary (block) version that handled all porting cases, and then we could expand to handle backwards compatibility, <code>?_</code> cases, and non-mathlib files like, over the next couple weeks 🙃</p>",
        "id": 325887061,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675549472
    },
    {
        "content": "<p>I think it will be simpler not to refactor this now</p>",
        "id": 325887546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549819
    },
    {
        "content": "<p>? what’s the refactor?</p>",
        "id": 325887612,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675549877
    },
    {
        "content": "<p>making tfae a block tactic</p>",
        "id": 325887621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549887
    },
    {
        "content": "<p>the mathlib implementation has two tactics with specified semantics</p>",
        "id": 325887637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549905
    },
    {
        "content": "<p>this is already implemented in mathport</p>",
        "id": 325887651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549916
    },
    {
        "content": "<p>oh you mean so that mathport doesn’t have to change?</p>",
        "id": 325887706,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675549939
    },
    {
        "content": "<p>because all instances of use are basically already in block form, just not internally</p>",
        "id": 325887729,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675549960
    },
    {
        "content": "<p>changing mathport can be done, but I don't think removing tfae_have and tfae_finish entirely is an option</p>",
        "id": 325887737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549966
    },
    {
        "content": "<p>we can <em>add</em> another tactic but that's not simplifying things</p>",
        "id": 325887748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675549976
    },
    {
        "content": "<p>both of these tactics have simple implementations, please don't complicate this</p>",
        "id": 325887808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550030
    },
    {
        "content": "<p>refactoring stuff to use a block tactic is easy to do later</p>",
        "id": 325887890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550075
    },
    {
        "content": "<p>well, one uses <code>scc</code> which I was hoping to avoid re-implementing for v1</p>",
        "id": 325887893,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675550079
    },
    {
        "content": "<p>If we port all files that have <code>tfae</code> before the tactic is implemented, then compatibility won't be a problem.</p>",
        "id": 325887910,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675550091
    },
    {
        "content": "<p>sure, as I said you don't need that you can use solve_by_elim</p>",
        "id": 325887913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/make.20.60tfae.60.20tactics.20a.20block.20tactic.3F/near/325887910\">said</a>:</p>\n<blockquote>\n<p>If we port all files that have <code>tfae</code> before the tactic is implemented, then compatibility won't be a problem.</p>\n</blockquote>\n<p>unless <code>tfae</code> is used outside mathlib</p>",
        "id": 325887938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550119
    },
    {
        "content": "<p>and even then, what will we use for cases where there are tactics in the middle etc</p>",
        "id": 325887963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550154
    },
    {
        "content": "<p>just writing <code>solve_by_elim</code> instead of <code>tfae_finish</code> will work? I’m not really familiar with <code>solve_by_elim</code>, I guess I’ll look it up</p>",
        "id": 325888002,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675550164
    },
    {
        "content": "<p><code>tfae_finish</code> should be implementable as <code>solve_by_elim</code> with some settings</p>",
        "id": 325888024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675550189
    },
    {
        "content": "<p>Ok, that sure is easier then lol</p>",
        "id": 325888051,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675550226
    },
    {
        "content": "<p>Ok, basic (mathlib-parity) versions of <code>tfae_have</code> and <code>tfae_finish</code> now exist: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2062\">!4#2062</a> (All that's missing from this very basic version is the copyright header and the docstrings—and, of course, more tests, to make sure that they do actually function as intended)</p>",
        "id": 325952248,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675600480
    },
    {
        "content": "<p>(docs are done too now! It's just that copyright header, and I'm not sure how that works exactly <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> Most code is original, but I did take inspiration from a couple existing definitions, such as mathlib's <code>have</code>, and of course the whole thing is a re-implementation of something that existed already...I welcome anyone who knows how to sort that out correctly either telling me \"what counts\" in principle or, if it's easier simply telling me exactly what the header should be. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (In this case also feel free to commit it if it speeds things up, as I'll be out of commission for several hours now.))</p>\n<p>EDIT: maybe the lint-necessary docs aren’t done, actually, I’m not sure—but the main user-facing docs that people will see on hover are done.</p>",
        "id": 325958595,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675603133
    },
    {
        "content": "<p>Copy the mathlib3 tfae header and add yourself as author</p>",
        "id": 326013408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675632415
    },
    {
        "content": "<p>If I adapted a function from another file (<code>Have</code>, mathlib version) do I add all of those authors as authors to this file?</p>",
        "id": 326014156,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675633044
    },
    {
        "content": "<p>no</p>",
        "id": 326015932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675634564
    },
    {
        "content": "<p>alright, we have <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> for v1!</p>\n<p>all that we might want to do is rename <code>tfae_finish</code> to <code>tfae</code>, as you mentioned, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>. Should I go ahead and do that? We just need an <code>#align tfae_finish tfae</code>, right?</p>\n<p>EDIT: I re-read what you wrote and I think you might mean something else, right? use <code>tfae</code>(block tactic) to mean <em>just</em> <code>tfae_finish</code>, and <code>tfae with ...</code> for when cases are necessary?</p>",
        "id": 326016683,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675635186
    },
    {
        "content": "<p>no <code>#align</code> is not relevant for tactics. This change would have to be done directly in mathport</p>",
        "id": 326019055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675637101
    },
    {
        "content": "<p>I see. so do you think we should we change <code>tfae_finish</code> to <code>tfae</code> in this PR or not?</p>",
        "id": 326019358,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675637345
    },
    {
        "content": "<p>Don't rename now in any case. That can always be done later if it's desired.</p>",
        "id": 326019524,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675637509
    }
]