[
    {
        "content": "<p>Since <code>wlog</code> is now a much simpler tactic, I have also significantly shortened the test file.</p>",
        "id": 298543728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663060919
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16495\">#16495</a></p>",
        "id": 298544094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663061057
    },
    {
        "content": "<p>I merged master and fixed conflicts.</p>",
        "id": 299894474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663743417
    },
    {
        "content": "<p>However, I must say that there is something going on with the <code>generalizing</code> clause that I don't understand completely.</p>\n<ul>\n<li>Sometimes the tactic fails in mysterious ways if the <code>generalizing</code> clause is not present (the error suggests that the final <code>exact</code> in the source of the tactic is failing), and adding a <code>generalizes x y</code> solves the problem.</li>\n<li>In other cases, I've seen a <code>generalizing x y</code> clause, and the tactic state would look all happy, but the kernel would reject the proof. Removing the <code>generalizing</code> clause solved the problem.</li>\n</ul>\n<p>I've not been able to minimize.</p>",
        "id": 299894909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663743588
    },
    {
        "content": "<p>I am in need of the <code>wlog</code> tactic for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2131\">!4#2131</a>. Is anyone working on porting it or is there a simple shortcut?</p>",
        "id": 326299113,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675756137
    },
    {
        "content": "<p>Also mathport goes a bit crazy on <code>wlog</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trace</span>\n<span class=\"c1\">--\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in wlog #[[ident hle], [\\\":\\\", expr «expr ≤ »(u, v)], [\\\"generalizing\\\", ident u, ident v], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: too many args\"</span>\n</code></pre></div>",
        "id": 326299325,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675756219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/wlog.20.2316495/near/326299325\">said</a>:</p>\n<blockquote>\n<p>Also mathport goes a bit crazy on <code>wlog</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trace</span>\n<span class=\"c1\">--\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in wlog #[[ident hle], [\\\":\\\", expr «expr ≤ »(u, v)], [\\\"generalizing\\\", ident u, ident v], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: too many args\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is that a mathport bug?</p>",
        "id": 326301622,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675757170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> Very recently the <code>wlog</code> tactic in mathlib 3 was simplified. By now it should be \"easy\" to port.</p>",
        "id": 326301813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675757239
    },
    {
        "content": "<p>I've also gotten fairly far by replacing <code>wlog</code> with <code>swap_var</code>, though it's a bit annoying since wlog was smart enough to find out all the dependent terms that needed to be swapped, and with swap_var you need to pick everything out manually. So first use e.g. <code>cases</code>to deconstruct the situation into different cases, <code>on_goal x =&gt; swap_var</code> for all the variable replacements, and then <code>all_goals</code> for the rest of the proof. But it's finicky. Here is my example: <a href=\"https://github.com/leanprover-community/mathlib4/blob/9749733b8f63c15ef3c310cbe6133f1f20cfa73d/Mathlib/Data/Set/Intervals/OrdConnectedComponent.lean#L213\">https://github.com/leanprover-community/mathlib4/blob/9749733b8f63c15ef3c310cbe6133f1f20cfa73d/Mathlib/Data/Set/Intervals/OrdConnectedComponent.lean#L213</a></p>",
        "id": 326302146,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675757361
    },
    {
        "content": "<p>But if wlog is easy to port, that is certainly the more useful way to go :)</p>",
        "id": 326302206,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675757384
    },
    {
        "content": "<p>I can start porting it tomorrow if no one is working on it already :)</p>",
        "id": 326305008,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675758504
    },
    {
        "content": "<p>I just changed the syntax to match lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> B -/</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">wlog</span><span class=\"o\">)</span> <span class=\"s2\">\"wlog \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"s2\">\" generalizing\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>make sure you use this if you are working on it</p>",
        "id": 326306050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675758949
    },
    {
        "content": "<p>on this note, what should the syntax of lean 4 wlog be? It seems to have been quite significantly changed in the last update, I'm not really sure how the new bells and whistles map onto the old ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> B -/</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">wlog</span><span class=\"o\">)</span> <span class=\"s2\">\"wlog\"</span> <span class=\"o\">(</span><span class=\"s2\">\" (\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"discharger\"</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n  <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">))</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" := \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" using \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">),</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 326306573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759140
    },
    {
        "content": "<p>I guess the <code>generalizing</code> argument corresponds to the old <code>using</code> arg, although there is no longer a list of lists?</p>",
        "id": 326306720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759194
    },
    {
        "content": "<p>and the <code>with H</code> argument is new, or is it the <code>:=</code> arg?</p>",
        "id": 326306813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759212
    },
    {
        "content": "<p><code>generalizing</code> just means a <code>revert</code> before the actual <code>wlog</code> call.</p>",
        "id": 326306846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759223
    },
    {
        "content": "<p>I noticed that <code>generalizing *</code> is supported and means the same as nothing?</p>",
        "id": 326306938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `wlog h : P` will add an assumption `h : P` to the main goal,</span>\n<span class=\"sd\">and add a side goal that requires showing that the case `h : ¬ P` can be reduced to the case</span>\n<span class=\"sd\">where `P` holds (typically by symmetry).</span>\n\n<span class=\"sd\">The side goal will be at the top of the stack. In this side goal, there will be two assumptions:</span>\n<span class=\"sd\">- `h : ¬ P`: the assumption that `P` does not hold</span>\n<span class=\"sd\">- `this`: which is the statement that in the old context `P` suffices to prove the goal.</span>\n<span class=\"sd\">  By default, the name `this` is used, but the idiom `with H` can be added to specify the name:</span>\n<span class=\"sd\">  `wlog h : P with H`.</span>\n\n<span class=\"sd\">Typically, it is useful to use the variant `wlog h : P generalizing x y`,</span>\n<span class=\"sd\">to revert certain parts of the context before creating the new goal.</span>\n<span class=\"sd\">In this way, the wlog-claim `this` can be applied to `x` and `y` in different orders</span>\n<span class=\"sd\">(exploiting symmetry, which is the typical use case).</span>\n\n<span class=\"sd\">By default, the entire context is reverted. -/</span>\n</code></pre></div>",
        "id": 326307061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759306
    },
    {
        "content": "<p>I think this should answer your questions</p>",
        "id": 326307098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759320
    },
    {
        "content": "<p>I see this but it doesn't cover migration questions</p>",
        "id": 326307173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759336
    },
    {
        "content": "<p>I don't have a good <em>name</em> for the <code>h</code> and <code>H</code> in <code>wlog h L P with H</code>.</p>",
        "id": 326307203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759349
    },
    {
        "content": "<p>you are presuming that I know what the old version did :)</p>",
        "id": 326307210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759353
    },
    {
        "content": "<p>does the with arg map onto anything in the old version?</p>",
        "id": 326307417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675759437
    },
    {
        "content": "<p>Not sure. Why is that relevant?</p>",
        "id": 326308212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759709
    },
    {
        "content": "<p>My understanding is that <code>with H</code> is a new feature. In the old version, <code>H</code> was always called <code>this</code>. But maybe I'm missing something.</p>",
        "id": 326308576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675759837
    },
    {
        "content": "<p>I made a PR with blank files; I'll start actually looking at it tomorrow. In the meantime, if anyone wants to write a test or two beforehand in <code>test/wlog.lean</code>, that would be very much appreciated—I'm new to the tactic and seeing a couple lean 4 examples (and having the tests at the ready) will probably help speed things along! :) <a href=\"https://github.com/leanprover-community/mathlib4/pull/2144\">!4#2144</a></p>",
        "id": 326321813,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675764077
    },
    {
        "content": "<p>Ok, <code>wlog</code> should be usable now! <a href=\"https://github.com/leanprover-community/mathlib4/pull/2144\">!4#2144</a></p>",
        "id": 326761538,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675933636
    },
    {
        "content": "<p>I'm not putting it out for review just yet because the code itself could use an organizational once-over, and I want to sleep. But the functionality should be there, so <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> if you're eager to start porting with it, feel free merge the <code>wlog</code> branch—and of course let me know if you run into any bugs 🙃</p>",
        "id": 326761954,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675933776
    },
    {
        "content": "<p>Thank you Thomas!</p>",
        "id": 326767320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675935385
    },
    {
        "content": "<p>that is great news, thanks Thomas. I will put that into my branch tomorrow and report any errors.</p>",
        "id": 326814168,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1675949144
    },
    {
        "content": "<p>I'm using this with <a href=\"https://github.com/leanprover-community/mathlib4/pull/2080\">!4#2080</a> and blocked on <code>using</code></p>",
        "id": 326870065,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675962877
    },
    {
        "content": "<p>Unless <code>using</code> in mathli3 is the same as <code>generalizing</code>?</p>",
        "id": 326872207,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675963486
    },
    {
        "content": "<p>The syntax has just now changed to use <code>generalizing</code> and <code>with</code> both in mathlib4 and mathlib3, and the mathlib3 and 4 versions match up in functionality! I’m not sure which corresponds to which (since I’m not familiar with the old version) but it should be one of the two. 🙃</p>",
        "id": 326889388,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675967894
    },
    {
        "content": "<p>Error message time:<br>\nCode is at <a href=\"https://github.com/leanprover-community/mathlib4/blob/362a3511b6cfe1940ff86171f2c772b7533ed481/Mathlib/Topology/Algebra/Order/LeftRightLim.lean#L266\">https://github.com/leanprover-community/mathlib4/blob/362a3511b6cfe1940ff86171f2c772b7533ed481/Mathlib/Topology/Algebra/Order/LeftRightLim.lean#L266</a><br>\nand the error is that <code>wlog</code> does not find variables that have been introduced in the <code>rintro</code> in the line before (<code>unknown identifier 'u'</code>), so I suspect that it is a <code>WithMainContext</code> issue.</p>",
        "id": 326968856,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676007290
    },
    {
        "content": "<p>in fact it is, I commit the fix to your PR</p>",
        "id": 326969023,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676007457
    },
    {
        "content": "<p>with that my PR is error free</p>",
        "id": 326969590,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676007883
    },
    {
        "content": "<p>ah nice, good catch! I was so worried about inner <code>withMainContext</code>s <a href=\"#narrow/stream/270676-lean4/topic/.60withMainContext.60.20gotcha\">causing problems</a> I forgot about the main one... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 326970248,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676008283
    },
    {
        "content": "<p>I've added a test as well. It is a bit stupid, but that keeps the bugs out</p>",
        "id": 326970553,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676008468
    },
    {
        "content": "<p>Nice! All tests are welcome, the stupider (= more minimal!) the better :) I still haven't given the code that once-over since I didn't have much time today, but I hope to do so tomorrow—I wouldn't be surprised if there's another surprise in there. (...Well, you know what I mean.) I plan to add a couple more tests as well.</p>",
        "id": 326971269,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676008940
    },
    {
        "content": "<p>Is this the same issue that cases <code>swap</code> to lose <code>this</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2043\">!4#2043</a>?</p>",
        "id": 327123341,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676054938
    },
    {
        "content": "<p>the fix is live now if you want to merge <code>wlog</code> and see if it works; but if not lmk and I’ll take a look (is this an issue with <code>wlog</code> or <code>swap</code>?)</p>",
        "id": 327132246,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676058014
    },
    {
        "content": "<p>I've re-merged to make sure I picked up the latest.</p>\n<p>I don't understand well what <code>wlog</code> does, but after <code>wlog</code> at line 400, I get the tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Composition</span> <span class=\"n\">n</span>\n<span class=\"n\">i₁i₂</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₂</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">c</span><span class=\"o\">)},</span>\n  <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">i₁</span> <span class=\"bp\">≤</span> <span class=\"n\">i₂</span> <span class=\"bp\">→</span> <span class=\"n\">_root_.Disjoint</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">i₁</span> <span class=\"bp\">≤</span> <span class=\"n\">i₂</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_root_.Disjoint</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Composition</span> <span class=\"n\">n</span>\n<span class=\"n\">i₁i₂</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≠</span> <span class=\"n\">i₂</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">i₁</span> <span class=\"bp\">≤</span> <span class=\"n\">i₂</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">_root_.Disjoint</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where the second goal is missing <code>this</code> (and I've tried to name via <code>with</code> to no avail).</p>",
        "id": 327135157,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676058975
    },
    {
        "content": "<p>Weird, I'll take a look rn</p>",
        "id": 327157365,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676067870
    },
    {
        "content": "<p>Oops, I didn't read the message closely. the second goal should not have <code>this</code>; only the first goal gets a <code>this</code>, because <code>this</code> is only used in the first goal to prove that we can reduce to the second goal.</p>",
        "id": 327160217,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676069044
    },
    {
        "content": "<p>It seems this has to with this file coming from an outdated mathlib3 source (from before the recent mathlib3 change to <code>wlog</code>). The mathlib3 proof looks a little different now; I'll fix it.</p>",
        "id": 327160774,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676069332
    },
    {
        "content": "<p>Oops, realizing I never implemented the other half of <code>binderIdent</code> (<code>_</code>).</p>\n<p>What should this look like? mathlib3 doesn't allow <code>_</code> in this position, so I'm guessing it's a new feature? Is it just that we should generate some name (presumably <code>h</code> here) and introduce it with <code>.implicit</code> binder info?</p>",
        "id": 327219654,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676110554
    },
    {
        "content": "<p><code>_</code> should be allowed wherever an identifier is allowed (when declaring new bindings), and it does nothing except name the variable automatically with an inaccessible name</p>",
        "id": 327220246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676110770
    },
    {
        "content": "<p>and inaccessible = has <code>BinderInfo.implicit</code>?</p>",
        "id": 327221526,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676111318
    },
    {
        "content": "<p>wait a minute...maybe that's a red herring. <code>case</code> detects if names are inaccessible by whether they have macro scopes</p>",
        "id": 327225678,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676113101
    },
    {
        "content": "<p>why are you detecting if the name is inaccessible?</p>",
        "id": 327229827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676113968
    },
    {
        "content": "<p><code>intro1</code> will introduce an anonymous variable</p>",
        "id": 327229855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676113979
    },
    {
        "content": "<p>I'm not actually trying to detect inaccessible names, I'm just trying to figure out what it means for a name to be inaccessible</p>",
        "id": 327230097,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114075
    },
    {
        "content": "<p>the short version is \"it is printed with a tombstone\"</p>",
        "id": 327230183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114120
    },
    {
        "content": "<p>but behind the scenes, literally all that's different is that the name contains a tombstone? surely there's more?</p>",
        "id": 327230332,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114189
    },
    {
        "content": "<p>it could mean that the name is shadowed, it has macro scopes, or it uses internal name components</p>",
        "id": 327230342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114195
    },
    {
        "content": "<p>hmmmm okay</p>",
        "id": 327230356,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114208
    },
    {
        "content": "<p>the name doesn't literally have a tombstone in it</p>",
        "id": 327230368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114214
    },
    {
        "content": "<p>I did see one function which appeared to check for just that, so it sounded plausible</p>",
        "id": 327230432,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114236
    },
    {
        "content": "<p>but the idea is that writing the literal name you see for the variable won't resolve to that variable</p>",
        "id": 327230443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114240
    },
    {
        "content": "<p>right, that part (how they should work/affect things) makes sense</p>",
        "id": 327230588,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114291
    },
    {
        "content": "<p>hmm <code>intro1</code> works for one part</p>",
        "id": 327230641,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114325
    },
    {
        "content": "<p>but the other is an introduction of a hypothesis from <code>byCases</code></p>",
        "id": 327230654,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114339
    },
    {
        "content": "<p>the point being that it's sort of an emergent property, it's not a flag on the name</p>",
        "id": 327230661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114344
    },
    {
        "content": "<p>oh interesting. so when it's greyed out in the tactic state, how does lean \"tell\" that it should do that? and is being greyed out actually connected to being inaccessible, or is that a coincidence? (is it perhaps just a reflection of the binderinfo?)</p>",
        "id": 327230797,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114406
    },
    {
        "content": "<p>I believe it just does a name lookup with the name of the ldecl and if you don't get the same ldecl back then it's inaccessible</p>",
        "id": 327230914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114454
    },
    {
        "content": "<p>the binderinfo is mostly unrelated</p>",
        "id": 327230951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114470
    },
    {
        "content": "<p>how could the result of the name lookup differ if we're using the name to look it up, so to speak?</p>",
        "id": 327231029,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114514
    },
    {
        "content": "<p>there is a binderinfo for variables that are even more hidden than inaccessible names, <code>isImplementationDetail</code>. These will not be shown at all in the tactic state and are not accessible to tactics like <code>assumption</code></p>",
        "id": 327231097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114526
    },
    {
        "content": "<p>is there any relation between implementation details and aux decls?</p>",
        "id": 327231259,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114604
    },
    {
        "content": "<p>if you have two variables named <code>x</code> in the state, let's say with FVarIds 1 and 2 respectively, then <code>getFVarByUserName? `x</code> will give you FVarId 2 and so FVarId 1 is inaccessible</p>",
        "id": 327231308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114630
    },
    {
        "content": "<p><em>ah</em> okay</p>",
        "id": 327231379,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114650
    },
    {
        "content": "<p>IIRC implementation detail replaced aux decl</p>",
        "id": 327231384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114655
    },
    {
        "content": "<p>that's not true, they are both there and serve similar functions</p>",
        "id": 327231462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114691
    },
    {
        "content": "<p>I think they can probably be merged</p>",
        "id": 327231480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114697
    },
    {
        "content": "<p>aux decls act more like global declarations than local variables for name resolution purposes</p>",
        "id": 327231665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114765
    },
    {
        "content": "<p>I see, I just looked up the code and saw that there are default decls, aux decls, and implementation detail decls, though apparently <code>isImplementationDetail</code> means \"not a <code>.default</code> decl\"</p>",
        "id": 327231932,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114873
    },
    {
        "content": "<p>so anyway hmm. I need to make this fvar introduced by <code>byCases</code> into an inaccessible name</p>",
        "id": 327232133,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114943
    },
    {
        "content": "<p>or wait. <em>do</em> I</p>",
        "id": 327232149,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114956
    },
    {
        "content": "<p>you don't need to do anything special for that</p>",
        "id": 327232167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114962
    },
    {
        "content": "<p>it already is unless you gave it a name explicitly</p>",
        "id": 327232194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676114970
    },
    {
        "content": "<p>because <code>byCases</code> doesn't, so maybe I shouldn't either</p>",
        "id": 327232195,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676114970
    },
    {
        "content": "<p><code>byCases</code> actually seems to use an explicit name <code>h</code> when a name is not given</p>",
        "id": 327232454,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115076
    },
    {
        "content": "<p>instead of an inaccessible one</p>",
        "id": 327232477,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115086
    },
    {
        "content": "<p>pass <code> `_</code> for the name and an inaccessible name will be generated</p>",
        "id": 327232683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676115144
    },
    {
        "content": "<p>from a design point of view is that the right thing to do? if this is essentially the result of a <code>by_cases</code> tactic, should it be named accordingly?</p>",
        "id": 327233274,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115342
    },
    {
        "content": "<p>if you pass <code>_</code> then it should not be named <code>h</code> (it can be named hygienic <code>h</code> if you like)</p>",
        "id": 327233479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676115399
    },
    {
        "content": "<p>if you pass nothing then it can maybe be named <code>h</code> (although that kind of design is being deprecated in lean 4)</p>",
        "id": 327233538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676115427
    },
    {
        "content": "<p>ah i see. irrelevant here anyway since the binderIdent is not optional for wlog</p>",
        "id": 327233631,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115463
    },
    {
        "content": "<p>so that decides that</p>",
        "id": 327233658,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115472
    },
    {
        "content": "<p>ok, fixed! :)</p>",
        "id": 327234579,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676115780
    },
    {
        "content": "<p>(ok, <em>now</em>: fixed. long line snuck in.)</p>",
        "id": 327235233,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676116038
    },
    {
        "content": "<p>I'm guessing that, in general, implementation details have no business being reverted, right?</p>",
        "id": 327236438,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676116504
    },
    {
        "content": "<p>Or is that just an aux decls thing?</p>",
        "id": 327236461,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676116517
    },
    {
        "content": "<p>wait, when you said \"not visible in the tactic state\"—do <code>implDecls</code> even appear when I retrieve a goal's local context?</p>",
        "id": 327236692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676116587
    },
    {
        "content": "<p>they do</p>",
        "id": 327237138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676116767
    },
    {
        "content": "<p>you should use <code>isImplementationDetail</code> when looping over the local context to skip those variables</p>",
        "id": 327237244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676116804
    },
    {
        "content": "<p>you should pretend that implementation detail variables don't exist at all for the purpose of tactic logic</p>",
        "id": 327237520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676116907
    },
    {
        "content": "<p>Makes sense, I was already filtering out aux decls</p>",
        "id": 327237746,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676116968
    },
    {
        "content": "<p>that's why <code>isImplementationDetail</code> returns true for both implDetail and auxDecl</p>",
        "id": 327237817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676116996
    },
    {
        "content": "<p>Actually there is one thing here: <code>revert</code> has an option to <em>clear</em> aux decls instead of reverting them, but currently I just avoid feeding them to revert in the first place. Do you think that's alright? That's basically my last (known) issue with wlog.</p>",
        "id": 327237889,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117010
    },
    {
        "content": "<p>Oh wait. Clearing won't affect anything at the point I do it</p>",
        "id": 327238192,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117110
    },
    {
        "content": "<p>you should not use that optional parameter in revert</p>",
        "id": 327238225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117124
    },
    {
        "content": "<p>I do it within <code>withoutModifyingState</code>, so whether I do or don't it won't matter—but cool, I will not :)</p>",
        "id": 327238266,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117148
    },
    {
        "content": "<p>if you let it do the default thing, it will fail if you pass it an aux decl</p>",
        "id": 327238329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117167
    },
    {
        "content": "<p>right, that's what I found</p>",
        "id": 327238361,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117177
    },
    {
        "content": "<p>which is why I filter them out (well, now I filter all implementation details out)</p>",
        "id": 327238404,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117190
    },
    {
        "content": "<p>but you shouldn't do that anyway</p>",
        "id": 327238413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117192
    },
    {
        "content": "<p>why are you going over the lctx in the first place?</p>",
        "id": 327238561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117235
    },
    {
        "content": "<p><code>withoutModifyingState</code> doesn't prevent failures from leaking out BTW</p>",
        "id": 327238752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117289
    },
    {
        "content": "<p>yes, but presumably running <code>.clear</code> on an mvarid inside <code>withModifyingState</code> won't affect the outside world?</p>",
        "id": 327238938,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117348
    },
    {
        "content": "<p>only if it succeeds</p>",
        "id": 327238997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117370
    },
    {
        "content": "<p>why would you use clear and then revert the state?</p>",
        "id": 327239182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/wlog.20.2316495/near/327238561\">said</a>:</p>\n<blockquote>\n<p>why are you going over the lctx in the first place?</p>\n</blockquote>\n<p>same reason it's done in mathlib3: get the fvarids to revert, and revert them to construct the type of <code>this</code> (one of the reduction hypotheses)</p>",
        "id": 327239193,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117430
    },
    {
        "content": "<p><code>revert</code> does that already</p>",
        "id": 327239229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/wlog.20.2316495/near/327239182\">said</a>:</p>\n<blockquote>\n<p>why would you use clear and then revert the state?</p>\n</blockquote>\n<p>I wouldn't, but that's what <code>revert</code> does</p>",
        "id": 327239238,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117453
    },
    {
        "content": "<p>like here's what happened here: <code>clearAuxDeclsInsteadOfReverting</code> not only skips aux decls, it clears them. I currently just skip them (and filter them out before they get to revert.</p>\n<p>I wondered \"hmm, do I need to worry about some weird edge case where I would <em>want</em> them cleared? why is <code>revert</code> trying to clear them anyway? something I don't know about?\"</p>\n<p>then realized \"wait, obviously: a successful clear operation doesn't matter, I'm doing it in <code>withoutModifyingState</code>\" (a <em>failed</em> clear operation does matter, as you pointed out)</p>",
        "id": 327239846,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117715
    },
    {
        "content": "<p>it sounds like you don't need most of what <code>revert</code> does, actually, since you aren't making use of the mvar</p>",
        "id": 327239867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117722
    },
    {
        "content": "<p>the main important logic is <code>collectForwardDeps fvars preserveOrder</code></p>",
        "id": 327239926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117759
    },
    {
        "content": "<p>that's true, is there an expression version that still lets me use the <code>FVarId</code>s?</p>",
        "id": 327239935,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117762
    },
    {
        "content": "<p>ah ok</p>",
        "id": 327239980,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676117766
    },
    {
        "content": "<p>you also want to filter out the <code>isImplementationDetail</code> hyps from that</p>",
        "id": 327240221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/wlog.20.2316495/near/327239846\">said</a>:</p>\n<blockquote>\n<p>like here's what happened here: <code>clearAuxDeclsInsteadOfReverting</code> not only skips aux decls, it clears them. I currently just skip them (and filter them out before they get to revert.</p>\n</blockquote>\n<p>It doesn't clear all aux decls, only the ones that would otherwise have been reverted</p>",
        "id": 327240512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117950
    },
    {
        "content": "<p>the reason is that we want to pretend they don't exist, so they can't cause a failure of the tactic, nor can they show up in the implication of the new goal</p>",
        "id": 327240635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676117995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/wlog.20.2316495/near/327240221\">said</a>:</p>\n<blockquote>\n<p>you also want to filter out the <code>isImplementationDetail</code> hyps from that</p>\n</blockquote>\n<p>you mean from the result...?</p>",
        "id": 327240932,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676118114
    },
    {
        "content": "<p>yes</p>",
        "id": 327240942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118120
    },
    {
        "content": "<p>forward deps means all hyps whose types depend on the variables that are about to be reverted</p>",
        "id": 327241023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118142
    },
    {
        "content": "<p>those hyps all have to go, one way or another</p>",
        "id": 327241078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118157
    },
    {
        "content": "<p>either they go into the implication or they are cleared</p>",
        "id": 327241110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118172
    },
    {
        "content": "<p>(at least, in <code>revert</code>)</p>",
        "id": 327241160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118199
    },
    {
        "content": "<p>in your case you are just constructing the implication without clearing stuff so you can just skip them</p>",
        "id": 327241231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676118217
    },
    {
        "content": "<p>ah, I see what you mean</p>",
        "id": 327242262,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676118657
    },
    {
        "content": "<p>seems like the thing that actually makes the type after that is <code>mkAuxMVarType</code>, which handles a bunch of different cases, so I suppose I'll use that as well</p>",
        "id": 327243288,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676119088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do you want to take a look at how this wound up (lines 77 - 82 WLOG.lean <a href=\"https://github.com/leanprover-community/mathlib4/pull/2144\">!4#2144</a>), or shall I just go ahead and merge it? (It works fine in the tests and the mathlib4 file it's currently used in)</p>",
        "id": 327300564,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676145889
    },
    {
        "content": "<p>(I was delegated merge privileges (exciting!), but it's changed since I was delegated those, so I thought I'd be prudent)</p>",
        "id": 327300609,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676145929
    },
    {
        "content": "<p>(Or if anyone else wants to take a look at the refactor and give me the go ahead again, just in the interest of having everything be reviewed by someone who didn’t write it.)</p>",
        "id": 327300971,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676146213
    },
    {
        "content": "<p>Actually there is something I don't understand about the code I used.</p>\n<p>So, <code>revert</code> calls <code>collectForwardDeps</code> to get <code>toRevertNew</code>, then feeds the result to <code>MetavarContext.revert</code>. This uses a fresh cache (what does that do?) and calls <code>elimMVar</code>.</p>\n<p><em>That</em> actually calls <code>collectForwardDeps</code> <em>again</em> (the <code>MkBinding</code> version, which is what's lifted to the version used explicitly in <code>revert</code>), and has this note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note that `toRevert` only contains free variables at this point since it is the result of `getInScope`;</span>\n<span class=\"c1\">-- after `collectForwardDeps`, this may no longer be the case because it may include metavariables</span>\n<span class=\"c1\">-- whose local contexts depend on `toRevert` (i.e. \"may dependencies\")</span>\n<span class=\"k\">let</span> <span class=\"n\">toRevert</span> <span class=\"bp\">←</span> <span class=\"n\">collectForwardDeps</span> <span class=\"n\">mvarLCtx</span> <span class=\"n\">toRevert</span>\n</code></pre></div>\n<p><code>mkAuxMVarType</code> is then called on the resulting <code>toRevert</code>. But here's the thing I don't understand:</p>\n<p>This <code>toRevert</code> (the one that \"may include metavariables\") is returned all the way up through to <code>revert</code>, where we then return <code>toRevert.map Expr.fvarId!</code>.</p>",
        "id": 327305380,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676149664
    },
    {
        "content": "<p>So, I mean, the fact that <code>revert</code> uses <code>Expr.fvarId!</code> is a pretty good indication that we don't actually have to worry about those possible metavariables in this circumstance. But why don't we?</p>",
        "id": 327305485,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676149731
    },
    {
        "content": "<p>Hmm, in the interest of not holding up the port, I’m just going to merge it—if there is a problem introduced by this refactor, it must only occur in some edge cases, and I’ll fix it at that point :)</p>",
        "id": 327629429,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676316740
    },
    {
        "content": "<p>I'm in paper crunch time, so I don't have much time for reviewing. It looks plausible, we can pick up the pieces later</p>",
        "id": 327630178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676316897
    },
    {
        "content": "<p>Sounds good, good luck with the paper(s)! :)</p>",
        "id": 327631813,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676317274
    },
    {
        "content": "<p>I came across a bit of an unfortunate behaviour of <code>wlog</code> (sorry for the bit daft mwe):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.WLOG</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"c1\">-- some random global variables</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">wlog</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"k\">with</span> <span class=\"n\">h_wlog</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">h_wlog</span> <span class=\"n\">h</span>    <span class=\"c1\">-- fails</span>\n      <span class=\"c1\">-- don't know how to synthesize implicit argument</span>\n      <span class=\"c1\">-- @h_wlog A ?m.68 ?m.69</span>\n      <span class=\"c1\">-- It wants some values for `B` and `C`, even though they are not used at all in</span>\n      <span class=\"c1\">-- the theorem.</span>\n      <span class=\"c1\">-- have w := @h_wlog _ A A h    -- This works (or any other values for arg 2 and 3)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">w</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>If there are too many variables in context that are not needed, then the first step of <code>wlog</code> still creates implicit holes for all of them (in <code>h_wlog</code>) and you have to explicitely plug in values for them.  (see also <a href=\"https://github.com/leanprover-community/mathlib4/pull/3153\">!4#3153</a> )</p>\n<p>Is there an easy fix for this? Or would I just have to delete all unnecessary variables?</p>",
        "id": 345120562,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1680007478
    },
    {
        "content": "<p>aargh.</p>\n<p>For some reason I still don't quite understand, Lean 4 finds it much harder to throw away variables which aren't being used in a proof. This is not the first time it's caused problems.</p>",
        "id": 345122136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680007795
    },
    {
        "content": "<p>A workaround is to use the <code>clear</code> tactic on all variables that you don't want, e.g. <code>clear B C</code>.</p>",
        "id": 345129448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1680009373
    },
    {
        "content": "<p>Thanks for letting me know, I’ll take a look! :)</p>",
        "id": 345208543,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680027642
    },
    {
        "content": "<p>Hmmm...this might be intended behavior for <code>wlog</code>, which is meant to revert the entire context by default. You can choose to only revert the parts of the context that depend on <code>x y &lt;etc&gt;</code> by using <code>generalizing x y &lt;etc&gt;</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">wlog</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">generalizing</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_wlog</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">h_wlog</span> <span class=\"n\">h</span> <span class=\"c1\">-- ok</span>\n      <span class=\"n\">apply</span> <span class=\"n\">w</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>But maybe it shouldn't revert the <em>entire</em> context by default...open to any ideas!</p>",
        "id": 345213312,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680029197
    },
    {
        "content": "<p>Though, maybe this is more a \"how should <code>variables</code> work\" problem than a <code>wlog</code> problem. If <code>B</code> and <code>C</code> weren't introduced into the context in the first place, we wouldn't need <code>generalizing</code> (note that <code>generalizing A</code> also works here).</p>",
        "id": 345213876,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680029370
    },
    {
        "content": "<p>But, if we assume that's not going to change: is there any way a tactic can identify global variables not used in the theorem statement like <code>B</code> and <code>C</code>? If so I could simply remove those \"probably irrelevant\" ones from the default reverted context, if that would be a good idea. (Not sure.)</p>",
        "id": 345216693,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680030192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> what was the <code>wlog</code> issue in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3150\">!4#3150</a> ?</p>",
        "id": 345218029,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1680030620
    },
    {
        "content": "<p>Thanks for having a look <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>. I wouldn't know either what's the best default behaviour. And after all we're probably talking about <code>wlog</code> working in a bad context in the first place. I assume after the port some people will go and delete a lot of these <code>variable (α β γ δ … : Type _)</code> lines anyways.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3150\">#3150</a> does not have any issues with <code>wlog</code>, I mistook the <code>apply @Nat.gcd.induction _ m n</code> (which I had to write out) as an example of the case above, but that has nothing to do with <code>wlog</code>, my bad.</p>",
        "id": 345229067,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1680033108
    },
    {
        "content": "<p>This has also arisen in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3152\">!4#3152</a>.</p>",
        "id": 347980335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681029195
    }
]