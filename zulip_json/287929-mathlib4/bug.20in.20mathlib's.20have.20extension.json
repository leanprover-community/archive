[
    {
        "content": "<p>Mathlib extends the <code>have</code> tactic syntax that allows you to write <code>have h : P</code> which produces a new goal. However, it doesn't check whether <code>P</code> is actually a type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Have</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"c1\">-- should fail, but doesn't</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 402472594,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700142160
    },
    {
        "content": "<p>Do we want to keep it?</p>",
        "id": 402473102,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700142323
    },
    {
        "content": "<p>This doesn't error in the tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Eq</span> <span class=\"c1\">-- should fail, but doesn't</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402474946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700142886
    },
    {
        "content": "<p>Somehow a single goal is made up of two goals!</p>\n<p><a href=\"/user_uploads/3121/kQSdcej2QO_dENDwLYTVsemT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kQSdcej2QO_dENDwLYTVsemT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kQSdcej2QO_dENDwLYTVsemT/image.png\"></a></div>",
        "id": 402475007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700142905
    },
    {
        "content": "<p>I still like this syntax for <code>have</code>, and judging from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6964\">#6964</a> I'm not the only one. That said, I don't feel strongly about it.</p>",
        "id": 402482737,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700145006
    },
    {
        "content": "<p><code>have := by</code> feels a little awkward to me, since you go from tactic mode to term mode and back to tactic mode.</p>",
        "id": 402483013,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700145079
    },
    {
        "content": "<p>It's seen as a lean3-ism by some core maintainers, I think :/</p>",
        "id": 402484675,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700145535
    },
    {
        "content": "<p>I am against <code>have := by</code>, and strongly against it being the only spelling.</p>",
        "id": 402503142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700150442
    },
    {
        "content": "<p>I agree, and also think it's more elegant the other way. But it minimises auxiliary goal creation, which I think is a desirable feature</p>",
        "id": 402505018,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700150884
    },
    {
        "content": "<p>I don't care all that much about the syntax, but I strongly prefer having only one</p>",
        "id": 402505648,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700151090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20mathlib's.20have.20extension/near/402483013\">said</a>:</p>\n<blockquote>\n<p><code>have := by</code> feels a little awkward to me, since you go from tactic mode to term mode and back to tactic mode.</p>\n</blockquote>\n<p>Well, this whole \"mode\" terminology is a bit outmoded... they are not and have never really been modes, but lean 4 even less so because it doesn't isolate elaboration results between <code>by</code> blocks like it used to. They are really just different syntax for the same thing.</p>\n<p>The counterpoint here is that the <code>:= by</code> syntax must always exist as long as <code>:=</code> and <code>by</code> exist separately, so any other spelling will always be \"a second way to write it\"</p>",
        "id": 402511355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700152747
    },
    {
        "content": "<p>And having fewer more orthogonal features which combine together sounds like a better design IMO</p>",
        "id": 402511499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700152797
    },
    {
        "content": "<p>Also IIRC there are still some parsing issues with this syntax, I think the test file has a <code>have</code> in parentheses because of it</p>",
        "id": 402511855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700152896
    },
    {
        "content": "<p>This is all of course completely irrelevant to the actual bug report, of course we should fix that</p>",
        "id": 402512017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700152935
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8445\">#8445</a></p>",
        "id": 402513354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700153398
    }
]