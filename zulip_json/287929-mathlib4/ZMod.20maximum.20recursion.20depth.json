[
    {
        "content": "<p>Has anybody come across this issue yet?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">128</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">x.cast</span>  <span class=\"c1\">-- gives maximum recursion depth error</span>\n</code></pre></div>\n<p>There's a workaround by evaulating <code>2^256</code> first, but this is pretty annoying</p>",
        "id": 372268132,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1688469034
    },
    {
        "content": "<p>It's not the cast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- max recursion</span>\n</code></pre></div>",
        "id": 372273642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688470135
    },
    {
        "content": "<p>Yes, it's the modulus</p>",
        "id": 372275234,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1688470496
    },
    {
        "content": "<p>But since the issue doesn't occur when replacing <code>ZMod</code> by <code>Fin</code>, I assume that to evaluate the cast (from <code>Nat</code> or from wherever) it needs to evaluate the modulus to determine whether it is <code>0</code>, which in turn causes the issue</p>",
        "id": 372275625,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1688470584
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span>  <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">unit</span>  <span class=\"c1\">-- max recursion</span>\n</code></pre></div>",
        "id": 372342813,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688483266
    }
]