[
    {
        "content": "<p>Is there a tactic / simp configuration to reduce propositions of the form <code>v = e -&gt; P</code>to <code>v = e -&gt; ([e/v] P)</code>? e.g. substitute expression <code>e</code> for variable <code>v</code> in <code>P</code>, but where the hypothesis is in context in some subexpression.</p>",
        "id": 325082057,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675235927
    },
    {
        "content": "<p><code>simp (config := {contextual := true})</code></p>",
        "id": 325082143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675235969
    },
    {
        "content": "<p>that does var subs?</p>",
        "id": 325082182,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675235985
    },
    {
        "content": "<p>I thought simp was more conservative about that</p>",
        "id": 325082199,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675235994
    },
    {
        "content": "<p>it does rewrites</p>",
        "id": 325082209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675235999
    },
    {
        "content": "<p>if the equation to rewrite is <code>v = e</code> then it's a var sub</p>",
        "id": 325082273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675236013
    },
    {
        "content": "<p>oh like if you include [*] in the simp lemma list</p>",
        "id": 325082290,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236030
    },
    {
        "content": "<p>(time to go simplify some proofs)</p>",
        "id": 325082309,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236041
    },
    {
        "content": "<p>but simp won't do the rewrite if the equation var sub is backwards e.g. <code>e = v -&gt; P</code> is a bad case</p>",
        "id": 325082509,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236145
    },
    {
        "content": "<p>true</p>",
        "id": 325082632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675236202
    },
    {
        "content": "<p>if you want <code>subst</code> the golfiest option is <code>rintro rfl</code></p>",
        "id": 325082704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675236242
    },
    {
        "content": "<p>or sometimes <code>fun ..., rfl =&gt; </code></p>",
        "id": 325082776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675236264
    },
    {
        "content": "<p>rintro is almost certainly what I am looking for</p>",
        "id": 325082876,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236317
    },
    {
        "content": "<p>hm, those aren't gonna work here -- this is related to the <code>mem_map</code> change, cuz it turns out there were other lemmas relying on the <code>b = f a</code> directionality. It seems like simp should have some configuration for doing (contextual) variable substs whenever possible, maybe preferring the usual direction but willing to go in the \"wrong\" direction</p>",
        "id": 325084138,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236898
    },
    {
        "content": "<p>err, it'd have to pick one or the other. hm</p>",
        "id": 325084256,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675236948
    },
    {
        "content": "<p>in particular, <code>forall_mem_map_iff</code> needs to have explicit lambdas and casts because simp doesn't do the right thing. and this has fallout at stuff like <code>pairwise_map</code> which I can work around but it's awkward that simp does not just work here</p>",
        "id": 325084778,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675237153
    },
    {
        "content": "<p>Maybe mathlib was wrong about having it in that direction -- we could leave both directions with neither marked <code>simp</code>...</p>",
        "id": 325085700,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675237523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> has marked this topic as resolved.</p>",
        "id": 325200277,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675267946
    }
]