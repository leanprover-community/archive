[
    {
        "content": "<p>I'm writing a proof where I have <code>h : NullMeasurableSet s μ</code> and the first step is <code>wlog h' : MeasurableSet s</code>. The first goal generated by <code>wlog</code> has assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NullMesaurableSet</span> <span class=\"n\">s</span> <span class=\"n\">μ</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">},</span>  <span class=\"n\">NullMesaurableSet</span> <span class=\"n\">s</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">other</span> <span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">main</span> <span class=\"n\">goal</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and the second goal has both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NullMeasurableSet</span> <span class=\"n\">s</span> <span class=\"n\">μ</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>It would be nice to have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">wlog</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span> <span class=\"n\">replacing</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>generate goals with assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NullMesaurableSet</span> <span class=\"n\">s</span> <span class=\"n\">μ</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">},</span>  <span class=\"o\">(</span><span class=\"n\">other</span> <span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">main</span> <span class=\"n\">goal</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 366327684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686787049
    },
    {
        "content": "<p>In this case, it is easy to show that the other set I'm going to apply <code>this</code> to is both null measurable and measurable but sometimes it's less trivial.</p>",
        "id": 366327777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686787087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What do you think about <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span>?</p>",
        "id": 368355679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687379483
    },
    {
        "content": "<p>All my meta skills are cargo-culted. I'm not the right person to answer this question.</p>",
        "id": 368356099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687379626
    },
    {
        "content": "<p>Next stage: reverse cargo-cult about meta skills: think that everyone else's meta skills are in fact cargo-culted too.</p>",
        "id": 368357382,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687380038
    },
    {
        "content": "<p>For my part, this sounds reasonable—we have <code>generalizing h</code> but not <code>generalizing -h</code>, and this would fill that gap. I think <code>replacing</code> is better than <code>generalizing -h</code> since</p>\n<ol>\n<li><code>generalizing -h</code> is pretty opaque readability-wise</li>\n<li>you can't mix <code>-</code> with non-<code>-</code> specifications: <code>generalizing -h1 -h2 ...</code> makes sense, but <code>generalizing -h1 h2 ...</code> doesn't, so it makes sense to  specify this by changing the syntax at <code>generalizing</code> instead of at the hypotheses.</li>\n</ol>\n<p>However, I wonder why we wouldn't keep <code>h : NullMeasurableSet s μ</code> in the hypotheses of the second goal, even though it would be cleared from the type of <code>this</code>. Is it desirable to eliminate it from the context of the second goal for some reason?</p>",
        "id": 368404689,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687403634
    },
    {
        "content": "<p>Because in my example it's in fact <code>wlog h' : MeasurableSet s generalizing s</code> and I apply <code>this</code> to <code>toMeasurable μ s</code>.</p>",
        "id": 368405954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687404405
    },
    {
        "content": "<p>While I can prove that the new set is both measurable and null-measurable, it's more natural to skip this proof and drop the weaker assumption I'm not going to use.</p>",
        "id": 368406023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687404465
    },
    {
        "content": "<p>And if I don't prove that the new set is null-measurable, then I can no longer use this assumption in the second goal.</p>",
        "id": 368406104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687404497
    },
    {
        "content": "<p>I see! I explored this on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5364\">!4#5364</a>, which implements this functionality. (The branch name is <code>wlog-replacing</code>.) Currently that's a draft pull request, since I'm not sure this is something we ought to do (but I wanted to see if we could anyway). It probably needs a stress test; feel free to test it out and let me know if it suits your use case.</p>\n<p>If people like the functionality, we can make it a real PR.</p>",
        "id": 368419025,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687410638
    }
]