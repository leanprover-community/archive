[
    {
        "content": "<p>Getting stuck on proving termination once more. Is there any documentation to help with that?</p>",
        "id": 369641145,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687774929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, I fixed a bunch of the errors, including both of the termination proofs.</p>",
        "id": 369670455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687780034
    },
    {
        "content": "<p>I'm not sure where to point you for a clear explanation of <code>termination_by</code>. I've been grepping for examples and reading the source...</p>",
        "id": 369670956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687780119
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 369676145,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687781127
    },
    {
        "content": "<p>Today I learned: <code>termination_by</code> needs to repeat the name of the declaration and its arguments</p>",
        "id": 369681344,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687782055
    },
    {
        "content": "<p>There is some documentation at <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction</a></p>",
        "id": 369688849,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1687783515
    },
    {
        "content": "<p>Incidentally, in case this is not familiar to you, one way of proving termination is to <code>have</code> a lemma showing parameters decreasing before the recursive call. This is actually the only way I use.</p>",
        "id": 369689344,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1687783619
    },
    {
        "content": "<p>The <code>have</code> already existed :/</p>",
        "id": 369707182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687786819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.235480.20SetTheory.2EGame.2EOrdinal/near/369681344\">said</a>:</p>\n<blockquote>\n<p>Today I learned: <code>termination_by</code> needs to repeat the name of the declaration and its arguments</p>\n</blockquote>\n<p>I also learned it fills in the arguments right to left, so you may need to add trailing underscores for any arguments you don't want to use to prove termination</p>",
        "id": 369821512,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687809923
    },
    {
        "content": "<p>You don't need to name arguments left of the colon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">....</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 369821841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687809995
    },
    {
        "content": "<p>In <code>termination_by</code>, the first underscore you typically see is actually the <em>name of the function</em>. I think this is obfuscatory rather than helpful, and wish that people wouldn't do this. For readers looking at the code without having written <code>termination_by</code> clauses themselves, there is no way of working out what that <code>_</code> could mean.</p>",
        "id": 369842622,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687816451
    },
    {
        "content": "<p>(One might wonder why it needs to be specified at all, and I think the answer is: <code>mutual</code> blocks.)</p>",
        "id": 369842703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687816494
    },
    {
        "content": "<p>In fact I'm tempted to make a PR filling in all these underscores, and perhaps proposing this as a style rule in mathlib, possibly with a linter.</p>",
        "id": 369842904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687816566
    }
]