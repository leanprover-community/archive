[
    {
        "content": "<p>What do you think about</p>\n<ul>\n<li>introducing <code>Complex.sqrt</code>?</li>\n<li>adding a notation typeclass <code>SqRt</code> (notation: √) with instances for <code>Real</code>, <code>NNReal</code>, <code>ENNReal</code>, and <code>Complex</code>?</li>\n</ul>",
        "id": 397967599,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698003646
    },
    {
        "content": "<p>Sounds great, but what about just <code>Sqrt</code>? I know it's two words, but nobody really considers them as such nowadays.</p>",
        "id": 397968614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698004687
    },
    {
        "content": "<p>I don't care about lowercase/uppercase.</p>",
        "id": 397968847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698004868
    },
    {
        "content": "<p>I wish more of mathlib did not care about upper/lower case...</p>",
        "id": 397968872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698004910
    },
    {
        "content": "<p>(my motivation: I need formulas for the components of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>z</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span> for a project)</p>",
        "id": 397969352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698005473
    },
    {
        "content": "<p>Should we skip Sqrt and jump to NthRoot?</p>",
        "id": 397970311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006501
    },
    {
        "content": "<p>Should it take a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs#Nat</a> or a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat#doc\">docs#PNat</a> ?</p>",
        "id": 397970325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006549
    },
    {
        "content": "<p>That would solve the <code>cbrt (-8) = 2</code> problem as well (IIRC, we currently have <code>(-8)^(1/3) = -1</code>)</p>",
        "id": 397970386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006605
    },
    {
        "content": "<p>How can it be <code>-1</code>?</p>",
        "id": 397970406,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006642
    },
    {
        "content": "<p>The real part of <code>1 ± √3i</code></p>",
        "id": 397970412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006660
    },
    {
        "content": "<p>Ah, you're right.</p>",
        "id": 397970420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006669
    },
    {
        "content": "<p>It would be better if I weren't</p>",
        "id": 397970428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006689
    },
    {
        "content": "<p>But this means refactoring the existing code.</p>",
        "id": 397970431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006695
    },
    {
        "content": "<p>I'm not suggesting we change the meaning of <code>(-8)^(1/3)</code>; but that if we are going to introduced a new notation, we may as well solve multiple problems at once</p>",
        "id": 397970480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006730
    },
    {
        "content": "<p>Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mroot><mi>x</mi><mi>n</mi></mroot><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">(\\sqrt[n]{x})^n=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5516em;\"><span style=\"top:-2.8363em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> needs different assumptions depending on parity of <code>n</code>.</p>",
        "id": 397970481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006730
    },
    {
        "content": "<p>I meant existing code that uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt#doc\">docs#Real.sqrt</a>.</p>",
        "id": 397970486,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006750
    },
    {
        "content": "<p>I think it's ok to add the notation for all <code>n</code> but only state the existing lemmas for <code>n=2</code> (in the short term)</p>",
        "id": 397970490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006757
    },
    {
        "content": "<p>What notation should we use for general <code>n</code>?</p>",
        "id": 397970525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006813
    },
    {
        "content": "<p>We could use Mario's superscript parser hack along with √...</p>",
        "id": 397970580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006846
    },
    {
        "content": "<p>Can you write the <code>notation</code>/<code>macro</code> part?</p>",
        "id": 397970596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698006871
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Superscript</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nthRoot</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"√\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kn\">local</span> <span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"n\">superscript</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"s2\">\"√\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">√</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nthRoot</span> <span class=\"mi\">2</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">superscript</span> <span class=\"bp\">√</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nthRoot</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- `id` is to check the precedence looks ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"bp\">√</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">#check</span> <span class=\"n\">id</span> <span class=\"bp\">³√</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 397970731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007072
    },
    {
        "content": "<p>Those precedences are almost certainly wrong</p>",
        "id": 397970740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007081
    },
    {
        "content": "<p><del>I also don't know how to overload this with <code>√4</code> notation at the same time</del></p>",
        "id": 397970797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007103
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can advise, also on whether this is a good idea</p>",
        "id": 397970806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698007120
    },
    {
        "content": "<p>If it makes it look more like the textbooks then it's a good idea (until we are allowed to write maths properly in LaTeX and have lean read that)</p>",
        "id": 397972837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698009598
    },
    {
        "content": "<p>It seems fine to me, this is exactly the sort of thing I wanted the superscript parser to be useful for</p>",
        "id": 397974449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698011689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2Esqrt/near/397967599\">said</a>:</p>\n<blockquote>\n<p>What do you think about</p>\n<ul>\n<li>introducing <code>Complex.sqrt</code>?</li>\n<li>adding a notation typeclass <code>SqRt</code> (notation: √) with instances for <code>Real</code>, <code>NNReal</code>, <code>ENNReal</code>, and <code>Complex</code>?</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>Do you wish to choose a determination? the same that is used for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.log%3F#doc\">docs#Complex.log?</a> <br>\nso that would be <code>fun z =&gt; Complex.exp (Complex.log z / 2)</code></p>\n</li>\n<li>\n<p><code>SqRt</code> is strange, why not <code>SquareRoot</code>or the usual <code>Sqrt</code>?</p>\n</li>\n</ul>",
        "id": 397977776,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698015718
    },
    {
        "content": "<p>It will be <code>NthRoot</code></p>",
        "id": 397981040,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698019327
    },
    {
        "content": "<p>Yes, for complex numbers it'll be <code>exp (log z / n)</code>.</p>",
        "id": 397981065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698019351
    },
    {
        "content": "<p>a.k.a. <code>z ^ (1 / n)</code></p>",
        "id": 397981726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698020013
    },
    {
        "content": "<p>One more question: should it be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NthRoot</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">nthRoot</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NthRoot</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">nthRoot</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 397999972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698030544
    },
    {
        "content": "<p>I.e., should we accomodate for types with, e.g., square root but no cubic root?</p>",
        "id": 398000022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698030575
    },
    {
        "content": "<p>I think so, especially if it's just supposed to be a \"notation typeclass\"</p>",
        "id": 398001856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698031621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2Esqrt/near/397999972\">said</a>:</p>\n<blockquote>\n<p>One more question: should it be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NthRoot</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">nthRoot</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>or</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NthRoot</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">nthRoot</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Or the opposite: types with a cubic root but no square root (such as <code>Real</code>).</p>",
        "id": 398256719,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1698142868
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.sqrt#doc\">docs#Real.sqrt</a> anyway</p>",
        "id": 398341564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698172463
    },
    {
        "content": "<p>Notation works but doesn't delaborate.</p>",
        "id": 398365094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698183943
    },
    {
        "content": "<p>Also, how should <code>√x⁻¹</code> be parsed: <code>√(x⁻¹)</code> or <code>(√x)⁻¹</code>?</p>",
        "id": 398366673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698184833
    },
    {
        "content": "<p>One more question: should we make it unfold to <code>Real.sqrt</code>/<code>Nat.sqrt</code>/whatever while parsing like <code>coe</code> does?</p>",
        "id": 398383538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698195750
    },
    {
        "content": "<p>We are not going to have generic lemmas about <code>n</code>-th roots anyway, because every instance has its assumptions.</p>",
        "id": 398383628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698195798
    },
    {
        "content": "<p>Current version: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7907\">#7907</a></p>",
        "id": 398385723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698196627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2Esqrt/near/398366673\">said</a>:</p>\n<blockquote>\n<p>Also, how should <code>√x⁻¹</code> be parsed: <code>√(x⁻¹)</code> or <code>(√x)⁻¹</code>?</p>\n</blockquote>\n<p>I would expect the latter</p>",
        "id": 398413710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698212229
    },
    {
        "content": "<p>I would expect it to depend on the length of the bar on the square root symbol which latex can offer us but unicode can't :-(</p>",
        "id": 398413978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698212410
    }
]