[
    {
        "content": "<p>As discussion in today's porting meeting, we now have around 7500 porting notes scattered through mathlib4. This represents some significant technical debt that we are going to have to gradually pay down.</p>\n<p>Some aspirational proposals, which perhaps we should have talked about earlier. :-)</p>\n<ol>\n<li>Please put porting notes immediately <em>before</em> the code you're discussing, not on the line after.</li>\n<li>When making a porting note about a broken proof, please try to provide complete context in the porting note. In particular, please leave the original mathport output in a comment with the porting note, so that it is not necessary for someone diagnosing the porting note to open either the mathlib3port repository or the mathlib repository to even understand what has changed.</li>\n<li>We'd like to be able to classify porting notes, e.g. to be able to find all porting notes which are discussing a simp regression. The proposal from today's meeting is that we belatedly start using more issues, on the mathlib4 repository, and aspirationally porting notes can either be resolved immediately, or have a link to some issue included. These issues can be open-ended, like \"<code>simp</code> isn't doing what I expected\", or more focused, but something is better than nothing.</li>\n</ol>",
        "id": 365712943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686618728
    },
    {
        "content": "<p>As an example of this last point, I just created <a href=\"https://github.com/leanprover-community/mathlib4/issues/4998\">https://github.com/leanprover-community/mathlib4/issues/4998</a>, which describes a slight change in behaviour of anonymous constructor syntax between lean3 and lean4 (you can't use auto_params). It's not intended to be a bug report: the change here is really just that auto_params are no longer a separate thing from default values, and anonymous constructor notation never relied on default values in lean3 or lean4.</p>\n<p>Nevertheless, it's something we can link to if we're writing a porting note about having to fill in an extra argument like this. As an example, I just linked to this issue here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4984/files#diff-b86b96716b4a0fb8c2e711030691f4b727c0f615eceaf05a1ac75083873e444dR46\">https://github.com/leanprover-community/mathlib4/pull/4984/files#diff-b86b96716b4a0fb8c2e711030691f4b727c0f615eceaf05a1ac75083873e444dR46</a>.</p>",
        "id": 365713234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686618876
    },
    {
        "content": "<p>I appreciate that this is pretty \"aspirational\", but we do have to face that this backlog of porting notes is going to be weighing on us for a while to come, and we need to get a bit more organised about how we're going to deal with them.</p>",
        "id": 365713307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686618912
    },
    {
        "content": "<p>So please don't feel like this is an additional burden which is going to get in the way of finishing the port. It's just intended as an idea about how we can best approach all the work that comes after the port is \"100% done\". :-)</p>",
        "id": 365713381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686618952
    },
    {
        "content": "<p>Can we establish a standard format for referring to a mathlib4 issue from a porting note? Perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note (mathlib4#4998): the message</span>\n</code></pre></div>\n<p>which has the advantage that we can more easily measure how many notes are issue-less</p>",
        "id": 365713929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686619221
    },
    {
        "content": "<p>Yes, I wanted to do that, but was stumped by the lack of linkifiers in VSCode, without which this is worse than a URL.</p>",
        "id": 365714282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686619418
    },
    {
        "content": "<p>Oh, didn't we do this with library notes in mathlib3?</p>",
        "id": 365714374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686619459
    },
    {
        "content": "<p>I guess that is actually in the VSCode extension??</p>",
        "id": 365714475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686619528
    },
    {
        "content": "<p>I would guess there is a GitHub vscode extension that can handle this without it needing to be part of the lean extension</p>",
        "id": 365720037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686622519
    },
    {
        "content": "<p>github doesn't recognize <a href=\"https://github.com/leanprover-community/mathlib4/pull/4998\">mathlib4#4998</a> for linkification, you would need to spell it <a href=\"https://github.com/leanprover-community/mathlib4/pull/4998\">leanprover-community/mathlib4#4998</a></p>",
        "id": 365722282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686623799
    },
    {
        "content": "<p>I think full URLs will be best for now. :-)</p>",
        "id": 365723380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686624417
    },
    {
        "content": "<p>Should we have a list of changes that don't need porting notes? Removing include/omit, for example</p>",
        "id": 365742954,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1686633753
    },
    {
        "content": "<p>Sounds good. An non-exhaustive list of things that don't need porting notes:</p>\n<ul>\n<li>removing <code>omit</code>/<code>include</code></li>\n<li>removing <code>-- mathport name: </code></li>\n<li>removing <code>restate_axiom</code> (as long as you remove the <code>'</code> on the field name</li>\n<li>replacing <code>@[protect_proj]</code> with <code>protected</code> fields (perhaps this is automatic now?)</li>\n</ul>\n<p>along with more obvious ones:</p>\n<ul>\n<li>following linter instructions (renaming unused arguments to <code>_</code>, replacing unnecessary <code>&lt;;&gt;</code> with <code>;</code>, removing unused <code>have</code>s)</li>\n</ul>",
        "id": 365745043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686634620
    },
    {
        "content": "<p>Does replacing <code>apply foo.induction_on x</code> with <code>induction x using foo.induction_on with</code> need a note?</p>",
        "id": 365760282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686639520
    },
    {
        "content": "<p>Often the former fails to elaborate, but the latter is a nicer spelling anyway (but didn't work in mathlib3)</p>",
        "id": 365760398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686639562
    },
    {
        "content": "<p>I'd say no!</p>",
        "id": 365761169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686639762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/triage.20of.20.22Porting.20notes.22/near/365745043\">said</a>:</p>\n<blockquote>\n<ul>\n<li>removing <code>omit</code>/<code>include</code></li>\n<li>removing <code>-- mathport name: </code></li>\n</ul>\n</blockquote>\n<p>you know, you can always just request for mathport to stop adding things if you are just consistently deleting them without comment</p>",
        "id": 365910407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686670411
    },
    {
        "content": "<p>I think here we are more concerned that we are deleting them <em>with</em> comment. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 365917254,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686671799
    },
    {
        "content": "<p>right, but my point is that this is unnecessary work and people aren't reporting mathport issues enough</p>",
        "id": 365918140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686671982
    },
    {
        "content": "<p>While we're there, I think we should nuke the <code>#print correctly_ported /-- old code -/</code> behavior</p>",
        "id": 365924522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686673223
    },
    {
        "content": "<p>It's pretty useless since the vast majority of declarations are not \"correctly ported\", and it gets in the way of forward-porting</p>",
        "id": 365924611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686673248
    },
    {
        "content": "<p>How impossible is it to try to align instances from the bottom up? It would be nice to know how may \"actually\" dubious translations we have, as opposed to ones which only differ because of unaligned instances.</p>",
        "id": 365926526,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686673680
    },
    {
        "content": "<p>I think that would be really value if just for cross-linking between the docs</p>",
        "id": 365934203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686675335
    },
    {
        "content": "<p>We also need a fix for the instance name generator. Is there an issue for this already?</p>",
        "id": 365934592,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686675421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/triage.20of.20.22Porting.20notes.22/near/365924522\">said</a>:</p>\n<blockquote>\n<p>While we're there, I think we should nuke the <code>#print correctly_ported /-- old code -/</code> behavior</p>\n</blockquote>\n<p>What do you want it to show instead? <code>old code</code>?</p>",
        "id": 365944432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686677679
    },
    {
        "content": "<p>Yes, because it already does that for like 2/3 of fully-ported files anyway</p>",
        "id": 365963596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686682363
    },
    {
        "content": "<p>2/3?</p>",
        "id": 365963805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686682413
    },
    {
        "content": "<p>I would have expected a proportion closer to 10-20%</p>",
        "id": 365963896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686682437
    },
    {
        "content": "<p>I guess I don't really understand what you mean by \"the vast majority of declarations are not 'correctly ported'\"</p>",
        "id": 365964291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686682517
    },
    {
        "content": "<p>I mean that they had alignment warnings until we turned those off</p>",
        "id": 365965086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686682701
    },
    {
        "content": "<p>alignment warnings don't affect the <code>#print correctly_ported /-- ...</code> thing</p>",
        "id": 365966604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686683027
    },
    {
        "content": "<p>the point is not really to assert that the result is correct, but rather just that the declaration has already been aligned to an existing theorem</p>",
        "id": 365966893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686683084
    },
    {
        "content": "<p>My understanding was that the <code>#print</code> was only emitted if there is no alignment warning</p>",
        "id": 365973442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686684917
    },
    {
        "content": "<p>no, the <code>#print</code> is emitted if the declaration is aligned (manually or automatically) to an existing definition</p>",
        "id": 365975021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686685408
    },
    {
        "content": "<p>no, you are correct, a dubious translation prevents the <code>#print</code></p>",
        "id": 365975501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686685546
    },
    {
        "content": "<p>In your defense, it probably would have been more useful for me to say nothing until I had the source code for mathport open; but I'm glad to hear I wasn't imagining things.</p>",
        "id": 365976218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686685746
    },
    {
        "content": "<p>well now mathport aligns with my first assertion</p>",
        "id": 365977034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686685977
    },
    {
        "content": "<p>I also removed <code>-- mathport name:</code> and <code>include/omit</code></p>",
        "id": 365977095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686685994
    },
    {
        "content": "<p>it's still showing <code>#print</code> lines though, there is a config flag for it</p>",
        "id": 365977135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686686010
    }
]