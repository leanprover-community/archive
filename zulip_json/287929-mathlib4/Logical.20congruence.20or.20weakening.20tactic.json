[
    {
        "content": "<p>Something that comes up from time is I don' t think we have a tactic that will allow to prove a goal with a complicated logical structure using an expression with the same structure but not quite matching. For instance consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to run a single tactic bringing me to a tactic state with data <code>x y ε N n</code>, assumptions <code>ε &gt; 0</code> and <code>n ≥ N</code> and goal <code>x + n = y + ε ↔ x - ε = y  - n</code> or, even better, goal <code>x + n = y + ε → x - ε = y  - n</code>. Various ways of not really achieving this goal are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">6</span>\n\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.mp</span>\n  <span class=\"n\">congrm</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">forall_imp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>An example where the deep goal is not an equivalence would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Metric.tendsto_atTop.mp</span> <span class=\"n\">tendsto_one_div_add_atTop_nhds_0_nat</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_div_pos_of_nat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Proving the second lemma from the first one is extremely frustrating for students (this happened to <span class=\"user-mention\" data-user-id=\"650529\">@Claus Clausen</span> this morning for instance).  Of course it's doable, but it's frustrating. A principled way to do it is again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">forall_imp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">inv_succ_lt_all</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Exists.imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">apply</span> <span class=\"n\">forall_imp</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">intro</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">LT.lt.le</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div>\n<p>But I think this deserves a tactic. One tricky part is to generate names without being too unhygienic.</p>",
        "id": 394903028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696447207
    },
    {
        "content": "<p>This reminds me of the question I ask <a href=\"#narrow/stream/113488-general/topic/beefing.20up.20.60convert.60/near/268971226\">every</a> <a href=\"#narrow/stream/113488-general/topic/.60convert.60.20and.20binders/near/319963580\">January</a>.</p>",
        "id": 394903698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696447503
    },
    {
        "content": "<p>Indeed this is not the first time we have this conversation. I don't know if you remember but back in the old days of the perfectoid spaces project I cooked up a broken version of this tactic.</p>",
        "id": 394905242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> what do you think of this challenge? :-)</p>",
        "id": 394905412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696448291
    },
    {
        "content": "<p>If found it! <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/95a6520ce578b30a80b4c36e36ab2d559a842690/src/for_mathlib/uniform_space/group_basis.lean#L13-L25\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/95a6520ce578b30a80b4c36e36ab2d559a842690/src/for_mathlib/uniform_space/group_basis.lean#L13-L25</a></p>",
        "id": 394905421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448297
    },
    {
        "content": "<p>Great, now run it through mathport :-) &lt;/joke&gt;</p>",
        "id": 394905459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696448318
    },
    {
        "content": "<p>I want a non-broken one, just for a change.</p>",
        "id": 394905554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696448364
    },
    {
        "content": "<p>I'll give it a shot.</p>",
        "id": 394908906,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696449882
    },
    {
        "content": "<p>Is this something that could be in the realm of gcongr?</p>",
        "id": 394925637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696458531
    },
    {
        "content": "<p>It is similar in spirit but formally doesn't fit.</p>",
        "id": 394925996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696458769
    },
    {
        "content": "<p>Even under the viewpoint that implication is \"just\" ≤ on propositions?</p>",
        "id": 394931683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696462861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> This is my first real foray into metaprogramming on my own, so I'm sure this has bugs or missing features, and is poorly written, but it seems to work on the examples you provided (find them at the end of the snippet). I can already see a few places for improvement, but I wanted to get your feedback first.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">and_imp_left_of_imp_imp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">peelQuantifier</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.getType</span><span class=\"o\">)</span>\n    <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"n\">goal</span>\n    <span class=\"k\">match</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">t₁</span> <span class=\"n\">b₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n₂</span> <span class=\"n\">t₂</span> <span class=\"n\">b₂</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"n\">goal</span>\n        <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingState</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withLocalDecl</span> <span class=\"n\">n₂</span> <span class=\"n\">c</span> <span class=\"n\">t₂</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">type₁</span> <span class=\"o\">:=</span> <span class=\"n\">b₁.instantiate1</span> <span class=\"n\">x</span>\n          <span class=\"k\">let</span> <span class=\"n\">type₂</span> <span class=\"o\">:=</span> <span class=\"n\">b₂.instantiate1</span> <span class=\"n\">x</span>\n          <span class=\"n\">mkForallFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">type₁</span> <span class=\"n\">type₂</span><span class=\"o\">)</span>\n        <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">forall_imp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">all_imp</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">])</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n.getD</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n        <span class=\"n\">return</span> <span class=\"n\">new_goal</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"n\">goal</span>\n        <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n        <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Exists.imp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">all_imp</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">])</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">return</span> <span class=\"n\">new_goal</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">return</span> <span class=\"n\">goal</span>\n        <span class=\"k\">let</span> <span class=\"n\">and_imp</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span>\n        <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">and_imp_left_of_imp_imp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">])</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">and_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">return</span> <span class=\"n\">new_goal</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"n\">goal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">peelTacAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">return</span> <span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">peelQuantifier</span> <span class=\"n\">g</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n.getId</span><span class=\"o\">))])</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span> <span class=\"n\">return</span> <span class=\"o\">[(</span><span class=\"bp\">←</span> <span class=\"n\">peelQuantifier</span> <span class=\"n\">g</span> <span class=\"n\">e</span><span class=\"o\">)])</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">peel</span><span class=\"o\">)</span> <span class=\"s2\">\"peel\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">peel</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">peelTac</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">peelTacAux</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">peelTacAux</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">zoom</span><span class=\"o\">)</span> <span class=\"s2\">\"zoom\"</span> <span class=\"n\">ident</span> <span class=\"o\">((</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zoom</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zoom</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zoom</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zoom</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">zoom</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">n</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hpq</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"n\">hε</span> <span class=\"n\">hδ</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Metric.tendsto_atTop.mp</span> <span class=\"n\">tendsto_one_div_add_atTop_nhds_0_nat</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_div_pos_of_nat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"c1\">-- right now `zoom` only accepts `ident`s, not a supplied `term`.</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.le</span>\n</code></pre></div>",
        "id": 396320202,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697126636
    },
    {
        "content": "<p>This is fantastic! Thanks a lot for working on this.</p>",
        "id": 396321835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697127075
    },
    {
        "content": "<p>I think the syntax is not consistent with other tactics. I would expect the <code>with</code> token to introduce the name lists. This will probably make it easier to take in an arbitrary expression instead of the name of a local declaration.</p>",
        "id": 396322133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697127185
    },
    {
        "content": "<p>Hold on, I think I can do that <del>in a few seconds.</del> Meh, my janky <code>replace</code> business was getting in the way, may take me a bit longer.</p>",
        "id": 396322524,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697127305
    },
    {
        "content": "<p>Okay, I plan to clean it up and add the following features:</p>\n<ol>\n<li>use <code>with</code>, and then allow terms instead of just idents</li>\n<li>proper handling of <code>userName</code> by making fresh ones</li>\n<li>take an optional numeric argument which allows for setting the depth without specifying variable names</li>\n</ol>",
        "id": 396347518,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697137150
    },
    {
        "content": "<p>Let me know if there's anything else you want it to do.</p>",
        "id": 396347542,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697137161
    },
    {
        "content": "<p>I don't feel confident enough in meta-programming to review meta-code written by others. But I want to point out a potential trap since you are not yet an expert. I think it's fine in your case, but I always get nervous when I see nested nested actions as in your code. Do you understand why the two functions <code>myFun</code> and <code>myFun'</code> do <em>not</em> return the same result in the code below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">Nat</span> <span class=\"n\">Id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n  <span class=\"n\">set</span> <span class=\"mi\">5</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">myFun.run'</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- says 5</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFun'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">myFun'.run'</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- says 10</span>\n</code></pre></div>",
        "id": 396353685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697139836
    },
    {
        "content": "<p>Let me tag <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> since I don't remember if <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a> warns about that specific version of this footgun.</p>",
        "id": 396353796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697139879
    },
    {
        "content": "<p>This <code>zoom</code> tactic seems very useful! It would probably feel more natural to have roughly the same syntax as <code>filter_upwards</code> though  (<code>zoom [h] with n</code> or something of that kind). And possibly make <code>zoom</code> accept <code>eventually</code> as a quantifier ?</p>",
        "id": 396354364,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140084
    },
    {
        "content": "<p>I don't understand the last sentence.</p>",
        "id": 396354520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697140170
    },
    {
        "content": "<p>That's because I don't understand filters :-)</p>",
        "id": 396354570,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140193
    },
    {
        "content": "<p>Could you give an example of what you would like to see as tactic state before and after applying the tactic?</p>",
        "id": 396354682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697140234
    },
    {
        "content": "<p>The way <code>zoom</code> treats <code>\\forall</code> feels a lot like the way <code>filter_upwards</code> treats <code>eventually</code></p>",
        "id": 396354700,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140241
    },
    {
        "content": "<p>Oh I see, you want a version that handle eventually and frequently where the current one handles forall and exists?</p>",
        "id": 396354804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697140311
    },
    {
        "content": "<p>Yes, exactly. They seem to fill the same purpose, might as well be the same tactic</p>",
        "id": 396354953,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140345
    },
    {
        "content": "<p>(I don't \"want\" it, I am just wondering if it would make sense.)</p>",
        "id": 396355179,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">f: ℝ → ℝ</span>\n<span class=\"cm\">x y: ℝ</span>\n<span class=\"cm\">h: |f y - f x| ≤ |y - x|</span>\n<span class=\"cm\">⊢ |(f y - f x) ^ 2| ≤ |y - x| ^ 2</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 396355948,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697140814
    },
    {
        "content": "<p>Yes, I think this would be a nice extension.</p>",
        "id": 396357025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697141244
    },
    {
        "content": "<p>However it would not really replace <code>filter_upwards</code> which can take several arguments.</p>",
        "id": 396357063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697141266
    },
    {
        "content": "<p><code>zoom [h1, h2] with x</code> ? As in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zoom</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"n\">using</span> <span class=\"n\">h₁</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 396357657,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697141561
    },
    {
        "content": "<p>Judging from the examples, this tactic looks like a variant of <code>intro</code> that also <code>specialize</code>s a bunch of hypothesea using the intro'ed terms. Is that correct? I wonder if there is a name other than <code>zoom</code> that conveys this intuition better (or conveys the right intuition if this one is wrong).<br>\nMaybe something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">specializing</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>Hmm, I guess it does more than just intro, and supports other quantifiers as well. Nevermind that particular suggestion then .</p>",
        "id": 396358483,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697141968
    },
    {
        "content": "<p>To be even more similar to <code>filter_upwards</code>, the <code>zoom [h, h₁] with x h h₁ using h₁ h</code> case would feel like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Filter.eventually_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"n\">using</span> <span class=\"n\">h₁</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 396358769,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697142116
    },
    {
        "content": "<p>I also think the name isn't great, but I didn't to derail the conversation into bike shedding before we agree on the technical core.</p>",
        "id": 396360487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697142877
    },
    {
        "content": "<p>Yeah, the <code>zoom</code> name was just a placeholder.</p>",
        "id": 396363477,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697144296
    },
    {
        "content": "<p>Patrick, thanks for that example and warning. I understand why the results are what they are, but I don't yet feel it deep enough in my bones that I would have spotted it without prompting. Do you have a suggestion for how I should be de-nestifying my <code>do</code>s? Just one example of how the code should be transformed would be enough.</p>",
        "id": 396365072,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697145086
    },
    {
        "content": "<p>Adding support for <code>∀ᶠ</code> and <code>∃ᶠ</code> should be relatively straightforward.</p>",
        "id": 396365123,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697145119
    },
    {
        "content": "<p>I don't know if we should de-nestify. You should simply know that if you find an incomprehensible bug where Lean seems to ignore a <code>withWhatever</code> or <code>withoutModifyingWhatever</code> then this issue is probably the cause.</p>",
        "id": 396366062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697145576
    },
    {
        "content": "<p>If you want to explicitly say \"I know where this nested action will bubble up\" then you can simply bubble it yourself, as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>which is what <code>myFun</code> was doing in my example.</p>",
        "id": 396366302,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697145678
    },
    {
        "content": "<p>The problem is that what you usually want it the opposite behavior. For this I don't know any alternative to insert the missing <code>do</code>.</p>",
        "id": 396366411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697145724
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> wants to comment on this since we hit that issue several times while coding together.</p>",
        "id": 396366475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697145751
    },
    {
        "content": "<p>I'm mostly happy with this now, so let the bikeshedding begin.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>peel tactic</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">and_imp_left_of_imp_imp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">peelQuantifier</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.getType</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">freshName</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshUserName</span> <span class=\"bp\">`</span><span class=\"n\">h_peel</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n  <span class=\"k\">match</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">t₁</span> <span class=\"n\">b₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n₂</span> <span class=\"n\">t₂</span> <span class=\"n\">b₂</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingState</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withLocalDecl</span> <span class=\"n\">n₂</span> <span class=\"n\">c</span> <span class=\"n\">t₂</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">mkForallFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">b₁.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₂.instantiate1</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n      <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">forall_imp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">all_imp</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">])</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">introN</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">n.getD</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">n'.getD</span> <span class=\"n\">freshName</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">new_goal</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₁</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"n\">goal.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Exists.imp</span> <span class=\"bp\">$</span><span class=\"n\">all_imp</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">introN</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n'.getD</span> <span class=\"n\">freshName</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">new_goal</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">and_imp</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">r'</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"n\">goal.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">and_imp_left_of_imp_imp</span> <span class=\"bp\">$</span><span class=\"n\">and_imp</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">and_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">introN</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n'.getD</span> <span class=\"n\">freshName</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">new_goal</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₁</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₂</span><span class=\"o\">))</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">f₂</span><span class=\"o\">))</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"n\">goal.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Filter.Eventually.mp</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Filter.eventually_of_forall</span> <span class=\"bp\">$</span><span class=\"n\">all_imp</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">introN</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n'.getD</span> <span class=\"n\">freshName</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">new_goal</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₁</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">α₂</span><span class=\"o\">))</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">f₂</span><span class=\"o\">))</span> <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∃ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">α₂</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"n\">goal.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Filter.Frequently.mp</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Filter.eventually_of_forall</span> <span class=\"bp\">$</span><span class=\"n\">all_imp</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">new_goal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">introN</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">n.getD</span> <span class=\"bp\">`</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n'.getD</span> <span class=\"n\">freshName</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">new_goal</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">peelTacAux</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelQuantifier</span> <span class=\"bp\">·</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₂.getId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁.getId</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelQuantifier</span> <span class=\"bp\">·</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₂.getId</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelQuantifier</span> <span class=\"bp\">·</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁.getId</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelQuantifier</span> <span class=\"bp\">·</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">peel</span><span class=\"o\">)</span> <span class=\"s2\">\"peel\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">num</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.withArgs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[</span><span class=\"n\">tactic</span> <span class=\"n\">peel</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">peelTac</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">peelTacAux</span> <span class=\"n\">e</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">peelTacAux</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n₂</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">peelTacAux</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">n₃</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span> <span class=\"bp\">$</span><span class=\"n\">n₂</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span><span class=\"bp\">;</span> <span class=\"n\">peel</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">n₁</span> <span class=\"bp\">$</span><span class=\"n\">n₃</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*;</span> <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">n.getNat</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"o\">))</span>\n        <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n          <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">j</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h₁</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h'</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">peel</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">gcongr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h_peel</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">h_peel</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"mi\">5</span> <span class=\"n\">h</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Metric.tendsto_atTop.mp</span> <span class=\"n\">tendsto_one_div_add_atTop_nhds_0_nat</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Real.dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_div_pos_of_nat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"mi\">5</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_peel.le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">peel</span> <span class=\"mi\">3</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">h_peel</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_peel.le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">peel</span> <span class=\"n\">inv_succ_lt_all</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.le</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"n\">δ</span> <span class=\"n\">hδ</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hpq</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"n\">hε</span> <span class=\"n\">hδ</span> <span class=\"n\">h</span>\n</code></pre></div>\n</div></div>\n<p>Note that:</p>\n<ol>\n<li>the temporary name is now <code>peel</code></li>\n<li>it supports <code>∀ᶠ</code> and <code>∃ᶠ</code> now.</li>\n<li>It uses <code>with</code> and accepts terms</li>\n<li>It allows for a numeric argument and hypotheses will be named automatically, for situations in which the names don't matter.</li>\n</ol>\n<p>This means that we can simplify one of the original examples to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"mi\">5</span> <span class=\"n\">h</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 396613219,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697258857
    },
    {
        "content": "<p>Oh, and for some reason using <code>Qq</code> really makes compiling the <code>peelQuantifier</code> declaration slow. I'm not sure why though. Perhaps I'm doing something wrong.</p>",
        "id": 396613467,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697259037
    },
    {
        "content": "<p>Very nice! So how hard would it be to add</p>\n<ul>\n<li>possibility to add <code>using h x y</code> at the end to close the goal in one line?</li>\n<li>support for several inputs <code>peel [h1, h2]</code>?</li>\n</ul>\n<p>[Maybe I'm seeing too much similarity with <code>filter_upwards</code> but in fact it seems that merging the two would make sense. From an end-user's point of view.]</p>",
        "id": 396628527,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697271572
    },
    {
        "content": "<p>I'm not sure what several inputs would mean? <code>using</code> is probably easy.</p>",
        "id": 396643833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697283680
    },
    {
        "content": "<p>There could be multiple hypotheses around that you want to peel stuff off together?</p>",
        "id": 396646510,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697285943
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 396655216,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697293721
    },
    {
        "content": "<p>If it's given multiple hypotheses to peel stuff off of and they both have have existentials, how would it choose which hypothesis to use the witness from?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">ε</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">peel</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"c1\">-- ??</span>\n  <span class=\"c1\">-- this doesn't make sense because there are two conflicting witnesses for δ</span>\n</code></pre></div>",
        "id": 396659873,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697297733
    },
    {
        "content": "<p>The situation is much clearer for the filter version since one of the axioms defining filters precisely adresses this question.</p>",
        "id": 396659963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697297806
    },
    {
        "content": "<p>What the filter technology would do here is to choose the minimum of the two witnesses. But of course in the general case there is no clear choice to make.</p>",
        "id": 396660000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697297848
    },
    {
        "content": "<p>More explicitly, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Eventually.and#doc\">docs#Filter.Eventually.and</a> is a wrapper around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.inter_mem#doc\">docs#Filter.inter_mem</a> and when you prove that neighborhood of zero form a filter, taking this min is exactly what ensures this axiom.</p>",
        "id": 396660124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697297955
    },
    {
        "content": "<p>So I guess my answer is: for serious uses you need filters anyway and for teaching purposes the current <code>peel</code> is good enough.</p>",
        "id": 396660144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697297997
    },
    {
        "content": "<p>And of course the current <code>peel</code> with one argument is also great as a general purpose tool, even in serious contexts.</p>",
        "id": 396660213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697298034
    },
    {
        "content": "<p>And note that I know \"serious\" is not the right word. Teaching is also serious.</p>",
        "id": 396660230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697298068
    },
    {
        "content": "<p>What about the name? I'm open to suggestions. <code>peel</code>, <code>peel_quantifier</code>, <code>match_quantifier</code>, <code>qcongr</code>, <code>telescope</code>?</p>",
        "id": 396673222,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697312017
    },
    {
        "content": "<p><code>qconvert</code>?</p>",
        "id": 396675499,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697314889
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7685\">#7685</a></p>",
        "id": 396704340,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697338990
    },
    {
        "content": "<p><code>peel</code> seems to be a very vivid and encouraging name, matching its semantic, I love it.</p>",
        "id": 396715567,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697345737
    },
    {
        "content": "<p>I agree. Although I see the merit of the more sober <code>qconvert</code>, it works a bit like <code>convert</code> with implication rather than equality, doesn't it?</p>",
        "id": 396731960,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697359118
    }
]