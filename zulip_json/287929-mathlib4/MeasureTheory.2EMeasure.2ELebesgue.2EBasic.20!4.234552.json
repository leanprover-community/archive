[
    {
        "content": "<p>In Lean 4, the following tc search fails, even if we make <code>volume</code> reducible in <code>MeasureSpaceDef</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SigmaFinite</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SigmaFinite</span> <span class=\"o\">(</span><span class=\"n\">Measure.pi</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"c1\">-- defeq and succeeds</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddLeftInvariant</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">AddLeftInvariant</span> <span class=\"o\">(</span><span class=\"n\">Measure.pi</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">stdOrthonormalBasis</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toBasis.addHaar</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"c1\">-- defeq and succeeds</span>\n</code></pre></div>\n<p>These instances are required in this file.<br>\nThis file can be built by specifying latter measures now, but this should be fixed clearly.<br>\nDoes anyone know how to fix this?</p>",
        "id": 362925467,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1685678727
    },
    {
        "content": "<p>Which instance does Lean 3 find?</p>",
        "id": 362933085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685683626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> The both. (<code>SigmaFinite</code> &amp; <code>AddLeftInvariant</code>)</p>",
        "id": 362970100,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1685695319
    },
    {
        "content": "<p>I think Yury is asking <em>what</em> is found, not whether the above succeed</p>",
        "id": 362976306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685696768
    },
    {
        "content": "<p>Sorry.<br>\n<code>SigmaFinite</code>...<code>MeasureTheory.Measure.pi.sigmaFinite</code> in <code>MeasureTheory.Constructions.Pi</code><br>\n<code>AddLeftInvariant</code>...<code>MeasureTheory.Pi.isAddLeftInvariant_volume</code> in <code>MeasureTheory.Constructions.Pi</code></p>",
        "id": 363030097,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1685708608
    },
    {
        "content": "<p>These are aligned names.</p>",
        "id": 363030390,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1685708661
    },
    {
        "content": "<p>I meant something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">sigma_finite</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">aux</span>\n</code></pre></div>",
        "id": 363077500,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685717840
    },
    {
        "content": "<p>(in Lean 3)</p>",
        "id": 363077527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685717845
    },
    {
        "content": "<p>There is more than 1 way to prove this instance.</p>",
        "id": 363077598,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685717863
    },
    {
        "content": "<p>I wonder which one works in Lean 3 and fails in Lean 4.</p>",
        "id": 363077654,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685717876
    },
    {
        "content": "<p>If Lean 3 can see through <code>volume</code> and Lean 4 can't, then we should duplicate each instance about <code>Measure.prod</code> and <code>Measure.pi</code> for <code>MeasureSpace</code>s.</p>",
        "id": 363099153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685722197
    }
]