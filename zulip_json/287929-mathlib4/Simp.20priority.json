[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.cardPowDegree_zero#doc\">docs#Polynomial.cardPowDegree_zero</a> has a <em>simp</em> attribute. <br>\nAfter the compilation of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a>, the <code>simp_NF</code> linter complained that it could be solved by <code>simp [@map_zero]</code>. </p>\n<ul>\n<li>\n<p>The comment hinted at <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form\">a page</a> which seems to be relevant for mathlib3.<br>\nThe syntax seems to have changed, the attribute <code>priority</code> does not seem to work here, while the syntax <code>@[simp &lt;number&gt;] theorem …</code> works.</p>\n</li>\n<li>\n<p>I am not sure I understood the explanations there. IIUC, the linter notes that Lean doesn't need that new lemma, because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_zero#doc\">docs#map_zero</a> applies, and is detected before <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.cardPowDegree_zero#doc\">docs#Polynomial.cardPowDegree_zero</a>.<br>\nThis lemma is more specific than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_zero#doc\">docs#map_zero</a>, hence the documentation suggests to put it <em>before</em>, or with a <em>smaller</em> priority. But what happened in my case is that priority <em>1001</em> made Lean find it, while <em>1000</em> or lower didn't…</p>\n</li>\n</ul>",
        "id": 377680796,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690059808
    },
    {
        "content": "<p>Does <code>simp</code> prove this lemma?</p>",
        "id": 377681045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059970
    },
    {
        "content": "<p>Why <a href=\"https://github.com/leanprover-community/mathlib4/pull/5942\">#5942</a> changes anything about this lemma?</p>",
        "id": 377681060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059986
    },
    {
        "content": "<p>Why do you want <code>@[simp]</code> on this lemma?</p>",
        "id": 377681156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690060041
    },
    {
        "content": "<p>[edited]<br>\nIt's not that <em>I</em> want. This lemma was there in mathlib3, with <code>simp</code>, and during the port to mathlib4,  a note indicated that <code>simp</code> proves it, while the proof given was <code>if_pos rfl</code>.  I had to fix something in this file , I don't remember what, and I probably mistakenly added the <code>simp</code> lemma, changed the proof to use <code>simp</code>,  and now I have to fix things back.</p>\n<p>In this case, the natural thing to do is to remove the <code>@[simp]</code>attribute.</p>\n<p>But the initial question remains.</p>",
        "id": 377681333,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690060126
    },
    {
        "content": "<p>In mathlib3, <code>simp</code> gave higher priority to lemmas that appear later in the source. So, <code>simp_nf</code> linter didn't catch the fact that this lemma is in fact <code>map_zero</code>.</p>",
        "id": 377681860,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690060451
    },
    {
        "content": "<p>In fact, Lean doesn't need this lemma and we can drop it completely.</p>",
        "id": 377681911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690060499
    },
    {
        "content": "<p>This is the kind of <code>rfl</code> lemma that people like me need until they realize that <code>map_zero</code> rules.</p>",
        "id": 377682078,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690060594
    },
    {
        "content": "<p>We leave <code>rfl</code> lemmas because <code>dsimp</code> can use them. This is not a <code>rfl</code> lemma...</p>",
        "id": 377682136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690060641
    },
    {
        "content": "<p>but the proof is <code>rfl</code>…</p>",
        "id": 377682163,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690060664
    },
    {
        "content": "<p>Is it? AFAICS, it was <code>if_pos rfl</code></p>",
        "id": 377691600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690065972
    },
    {
        "content": "<p>If it's <code>rfl</code>, then you can use <code>@[simp, nolint simpNF]</code></p>",
        "id": 377691674,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690066005
    },
    {
        "content": "<p>This surprises me, because it <em>was</em> <code>if_pow rfl</code>, and when I restored that, Lean didn't compile, and <code>rfl</code> did the job.</p>",
        "id": 377752729,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690096207
    },
    {
        "content": "<p>Oh I see, <code>cardPowDegree</code> is defined as <code>fun p =&gt; if p = 0 then 0 else (Fintype.card Fq : ℤ) ^ p.natDegree</code>, which used classical equality, but after your change, it's now using your <code>DecidableEq</code> instance</p>",
        "id": 377762625,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690099745
    },
    {
        "content": "<p>(Your PR doesn't seem to describe the motivation for the change.)</p>",
        "id": 377762789,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690099793
    },
    {
        "content": "<p>I updated the header of the PR. Is it enough?</p>",
        "id": 377765320,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690100579
    }
]