[
    {
        "content": "<p>I'm wondering how people would feel about reordering the arguments of <code>Set.EqOn</code>, so the set comes before the function.</p>\n<p>(Presumably, but not necessarily, we would want to make the same change to all the \"functions on sets\" predicates in <a href=\"https://tqft.net/mathlib4files/Data/Set/Function\">file#Data/Set/Function</a>.)</p>",
        "id": 390196612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694387522
    },
    {
        "content": "<p>We're currently refactoring the <code>trans</code> tactic, and a cleanup proposed by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> doesn't like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">EqOn.trans</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">EqOn</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">EqOn</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqOn</span> <span class=\"n\">f₁</span> <span class=\"n\">f₃</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because the <code>s</code> comes after the variables that <code>trans</code> is paying attention to.</p>\n<p>Similarly there's a porting note just above, that <code>@[refl]</code> already doesn't like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eqOn_refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqOn</span> <span class=\"n\">f</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This in itself isn't a reason to change the order --- I'm sure we can make the <code>trans</code> tactic more flexible to cope with things like this (although it would be nice if we didn't need to).</p>",
        "id": 390196891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694387721
    },
    {
        "content": "<p>But it seems to me like all these functions would be more natural with the function coming last: they are all intended as predicates on functions, not predicates on sets.</p>",
        "id": 390196906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694387731
    },
    {
        "content": "<p>One thing about the refactor is that it's putting more consistency checking into the <code>@[trans]</code> attribute -- I don't believe the current <code>trans</code> tactic is able to apply <code>EqOn.trans</code> due to the argument order anyway.</p>",
        "id": 390197630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694388147
    },
    {
        "content": "<p>Oh, btw: I also have an old branch that refactors <code>rfl</code>, <code>symm</code>, and <code>trans</code>! Specifically it handles reducible heads, but I also rewrote a bunch of <code>trans</code> in the process. (I wasn’t totally happy with where it was, and haven’t had the time to clean it up lately, so, not all choices endorsed.) If any of it is useful, it’s over at <code>rfl-symm-trans-enhance</code>—it also wouldn’t like <code>EqOn.trans</code>, though. :)</p>",
        "id": 390199893,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694389710
    },
    {
        "content": "<p>I agree those arguments order inconsistencies are annoying. I am in favour of having it be set then function.</p>",
        "id": 390239651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694410858
    },
    {
        "content": "<p>Option two - should it be <code>Function.EqOn s</code>?</p>",
        "id": 390262338,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694421878
    },
    {
        "content": "<p>Or does that not help the trans etc situation</p>",
        "id": 390262382,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694421894
    },
    {
        "content": "<p>Does the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs#Trans</a> class work with the existing definition?</p>",
        "id": 390264767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694422777
    },
    {
        "content": "<p>No, I tried that already.</p>",
        "id": 390265845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694423165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reordering.20arguments.20of.20.60Set.2EEqOn.60/near/390262338\">said</a>:</p>\n<blockquote>\n<p>Option two - should it be <code>Function.EqOn s</code>?</p>\n</blockquote>\n<p>I think this will be more annoying for stating equality of morphisms on a set, as there dot notation won't work</p>",
        "id": 390266213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694423311
    },
    {
        "content": "<p>that should be fixed instead of just working around it relentlessly</p>",
        "id": 390266317,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423361
    },
    {
        "content": "<p>but it is a real shame about dot notation</p>",
        "id": 390266336,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423371
    },
    {
        "content": "<p>it just lines up with how i'd write it on paper maths</p>",
        "id": 390266356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423379
    },
    {
        "content": "<p>I think reordering the arguments is the immediately available improvement. Is there anyone interested in doing that? I probably won't in the near future, and will just proceed with the refactoring of <code>trans</code> without worrying about getting it working with <code>EqOn</code>.</p>",
        "id": 390266581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694423448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reordering.20arguments.20of.20.60Set.2EEqOn.60/near/390264767\">said</a>:</p>\n<blockquote>\n<p>Does the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs#Trans</a> class work with the existing definition?</p>\n</blockquote>\n<p>I'm guessing you suggested this because <code>trans</code> has some support for the <code>Trans</code> class. Something that <code>trans</code> needs to be able to do is take the target expression <code>p : Prop</code>, identify the LHS and RHS from it, and then synthesize a <code>p'</code> and a <code>p''</code> from <code>p</code> where the RHS of <code>p'</code> and the LHS of <code>p''</code> have been replaced by a new intermediate value. The <code>trans</code> tactic assumes the last two explicit arguments in <code>p</code> are the LHS and RHS, but presumably this could be configured.</p>\n<p>If there are examples that justify the need to have arguments that come after a LHS and RHS, it might be worth building this configuration infrastructure, but otherwise I think it's cleaner and easier to reorder arguments.</p>",
        "id": 390270726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694424824
    },
    {
        "content": "<p>The obvious candidate is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv#doc\">docs#MulEquiv</a>, where morally the interesting LHS and RHS are not the last ones</p>",
        "id": 390281003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428556
    },
    {
        "content": "<p>(Though as it happens, Trans can still be made to work for that type)</p>",
        "id": 390281103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I wasn't clear, I meant <em>explicit</em> arguments coming after the LHS and RHS. The implicit arguments to <code>MulEquiv</code> are the kind that (the refactoring of) <code>trans</code> can handle.</p>",
        "id": 390281503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694428712
    },
    {
        "content": "<p>Does the code in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6509\">#6509</a> still work after this refactor?</p>",
        "id": 390281930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694428873
    },
    {
        "content": "<p>I don't think it affects <a href=\"https://github.com/leanprover-community/mathlib4/pull/6509\">#6509</a> at all since the refactor is just for the <code>trans</code> tactic and the <code>@[trans]</code> attribute, which doesn't touch the <code>Trans</code> class or the <code>calc</code> expression</p>",
        "id": 390282180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694428953
    },
    {
        "content": "<p>By the way, the heuristic I added is that a relation is something of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">...</span> <span class=\"n\">any</span> <span class=\"n\">arguments</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">implicit</span> <span class=\"n\">arguments</span> <span class=\"n\">that</span> <span class=\"n\">LHS</span> <span class=\"n\">xor</span> <span class=\"n\">RHS</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">LHS</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">implicit</span> <span class=\"n\">arguments</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">RHS</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">implicit</span> <span class=\"n\">arguments</span>\n</code></pre></div>\n<p>Calling the three parenthesized expressions are R, LHS, and RHS, it checks that <code>R LHS RHS</code> can be elaborated (using <code>mkAppM'</code>), and when it applies <code>@[trans]</code> lemmas it swaps out values for LHS and RHS.</p>\n<p>If you're wondering about the implicit arguments before LHS, this is to support relations like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HEq#doc\">docs#HEq</a>, even if it had both of its implicit type arguments come before the explicit arguments.</p>",
        "id": 390283683,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694429518
    },
    {
        "content": "<p>I think that’s one major difference between our refactors: I eschew <code>mkAppM'</code> entirely, use <code>forallMetaTelescope</code> on the applied lemma, and rely on the <code>isDefEq</code> check between the resulting target type and the goal type to assign the mvars, without decomposing and recomposing the relation. </p>\n<p>(Then I just extract the last two explicit arguments of the (type of the) <code>R y z</code> hypothesis to get <code>?y</code> and either assign it or add it to the tactic state. I also extract the last two explicit arguments of the return type and the <code>R x y</code> hypothesis for consistency checking in the attribute, but not in the tactic itself.)</p>\n<p>While in this case it seems like the best option is just to change <code>EqOn</code>, the non-<code>mkAppM'</code> approach might be more flexible in handling both implicit and explicit arguments in general. Also, we then don’t need to re-synthesize any instance arguments to the relation—we just get them by unification with the goal. But maybe there are caches helping with this anyway, I’m not sure.</p>\n<p>Also, this approach only actually needs to use the relation-like nature of the target to extract <code>y</code>; this means one could easily, if required, instead just figure out the index at which <code>y</code> occurs as an argument to the lemma and store it in the extension data (e.g. via <code>@[trans x y z]</code>, where <code>x</code> and <code>z</code> are only used during the consistency check and don’t need to be stored in any way); then we can get <code>?y</code> by index from the array returned by <code>forallMetaTelescope</code> directly.</p>\n<p>Anyway, just mentioning this approach in case it’s useful. :)</p>",
        "id": 390373743,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694459927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reordering.20arguments.20of.20.60Set.2EEqOn.60/near/390266581\">said</a>:</p>\n<blockquote>\n<p>I think reordering the arguments is the immediately available improvement. Is there anyone interested in doing that?</p>\n</blockquote>\n<p>I'm happy to do it.</p>",
        "id": 390467581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694506534
    },
    {
        "content": "<p>In the meantime I've made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7285\">#7285</a> which just removes the (currently useless) <code>@[trans]</code> tag on <code>EqOn.trans</code>. It can be restored after the refactor discussed above (at which point it will actually have effect).</p>",
        "id": 392248789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695272468
    }
]