[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2740\">mathlib4#2740</a>, in <code>mkHasForget₂</code> two things are not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A version of `HasForget₂.mk'` for categories defined using `@BundledHom`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkHasForget₂</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hom_d</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">Iα</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Iβ</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">BundledHom</span> <span class=\"n\">hom_d</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">c</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Bundled</span> <span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">Bundled.map</span> <span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">Bundled.map</span> <span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">h_map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Bundled</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasForget₂</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">HasForget₂.mk'</span> <span class=\"o\">(</span><span class=\"n\">Bundled.map</span> <span class=\"bp\">@</span><span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">map</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">hEq_of_eq</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">h_map</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.bundled_hom.mk_has_forget₂</span> <span class=\"n\">CategoryTheory.BundledHom.mkHasForget₂</span>\n</code></pre></div>\n<p>Here the error for <code>obj Y</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  obj\nhas type\n  ⦃α : Type u⦄ → c α → d α : Type (u + 1)\nbut is expected to have type\n  c α✝ → ?m.7687 α✝ : Type u\n</code></pre></div>\n<p>But for <code>obj X</code> there is no type mismatch, although <code>X</code> and <code>Y</code> are of the same type. I suspect fixing this will also fix the other problem in <code>h_map</code>.<br>\nWhat is going on?</p>",
        "id": 340561462,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1678356667
    },
    {
        "content": "<p>It was only a problem with the difference between <code>⦃α⦄</code> and <code>{α}</code>. For <code>h_map</code>, looking at the original code in mathlib would help finding that we actually wanted to state <code>⇑map f = ⇑f</code>, i.e. an equality between the associated coerced functions. I have fixed that.</p>",
        "id": 342034116,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678881616
    }
]