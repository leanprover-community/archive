[
    {
        "content": "<p>The file is almost done in the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2198\">!4#2198</a>. It builds, and all the names have been fixed as far as I can tell</p>\n<p>The only issue is the linter is complaining about a bunch of declarations. In particular:</p>\n<ul>\n<li>\n<p>There are a few def/lemma linter problems. It's saying <code>homEquiv_naturality_right</code>, <code>homEquiv_counit</code>, etc... are <code>def</code>s when they should be <code>lemma/theorem</code>s. They're <code>Prop</code> valued, so I agree. But if you look at the file, they are <code>theorem</code>s! So I'm a little confused about the linter issue</p>\n</li>\n<li>\n<p>A bunch of simpNF linter issues... simpNF issues are a bit over my head if I'll be totally honest, so it may be good for someone else to take a look at those and see what's going on.</p>\n</li>\n</ul>",
        "id": 327680553,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676340265
    },
    {
        "content": "<p>I should also say that in the course of filling in the last sorry I was running into some really weird editor bugs, that I'd be curious to see if other people can reproduce:</p>\n<p>In particular, I was filling in the <code>homEquiv_naturality_left_symm'</code> field in <code>adjunctionOfEquivLeft</code>, and I had to manually refresh the server (<code>ctrl + X</code> in VSCode) every time I made a change in order for the infoview to update. Beyond that, it was hard to get the infoview to even display anything unless I had an extra <code>done</code> tactic at the bottom.</p>",
        "id": 327681627,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676341298
    },
    {
        "content": "<p>Also an issue I've seen that has been a little annoying in the <code>CategoryTheory</code> files in general has been some pretty-printing issues around <code>Prefunctor</code>. Specifically you see a lot of  <code>Prefunctor.obj F.toPrefunctor X</code> or <code>Prefunctor.map F.toPrefunctor f</code> when Lean 3 was totally happy with just displaying <code>F.obj X</code> and <code>F.map f</code> which are a lot easier to parse and understand when seen in the infoview. </p>\n<p>This is probably related to the way Lean 3 and Lean 4 differ in terms of structure inheritance, but I was curious if there was any way of getting around this issue for UX purposes (or if it shows up in other mathlib4 files as well).</p>",
        "id": 327681983,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676341626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> If the linter is making false claims, please just put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: this linter is making several false claims</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.someName</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>at the top of the file.</p>",
        "id": 327700155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676356175
    },
    {
        "content": "<p>I will take a look at the simpNF issues.<br>\nI can't really say anything useful about pretty-printing and editor integration. Maybe someone else can chime in on those.</p>",
        "id": 327700311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676356251
    },
    {
        "content": "<p>Hmm, 6/8 of the simpNF lints are complaining about simp lemmas generated by <code>simps</code>.</p>",
        "id": 327701799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676357021
    },
    {
        "content": "<p>Do we have a policy about what to do in such cases?</p>",
        "id": 327701868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676357047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EAdjunction.2EBasic/near/327700155\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> If the linter is making false claims, please just put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: this linter is making several false claims</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.someName</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>at the top of the file.</p>\n</blockquote>\n<p>It doesn't seem like the <code>defLemma</code> linter is one of the linters I can turn off. I think I saw in another file it's possible to write <code>attribute [nolint defLemma] ...</code> . Should I do that for each of the declarations it's complaining about?</p>\n<p>Also the <code>docBlame</code> linter is  unhappy about a lot of Prop-valued class fields that don't have docstrings.</p>\n<p>It seems like Lean is generally having a hard time distinguishing between <code>Prop</code> and <code>Type</code> in this file for some reason...</p>",
        "id": 328090464,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676489041
    },
    {
        "content": "<p>You can get rid of the <code>defLemma</code> complaints by removing the <code>restate_axiom</code>'s and removing the primes from the fields</p>",
        "id": 328092056,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676489496
    },
    {
        "content": "<p>I have just been appeasing <code>docBlame</code></p>",
        "id": 328092185,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676489532
    },
    {
        "content": "<p>There are also some <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">instructions</a> for <code>simpNF</code> on the porting wiki.</p>",
        "id": 328094286,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676490207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EAdjunction.2EBasic/near/328092056\">said</a>:</p>\n<blockquote>\n<p>You can get rid of the <code>defLemma</code> complaints by removing the <code>restate_axiom</code>'s and removing the primes from the fields</p>\n</blockquote>\n<p>Will things break down the line removing the <code>restate_axiom</code>s?</p>",
        "id": 328097829,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676491326
    },
    {
        "content": "<p>The description makes it a little unclear as to how it helps</p>",
        "id": 328097860,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676491345
    },
    {
        "content": "<p>It will break but once you remove all the primes from the field names involved Lean will be happy again.</p>",
        "id": 328098318,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676491474
    },
    {
        "content": "<p><code>restate_axiom</code> was a Lean 3 workaround that is not needed with Lean 4</p>",
        "id": 328098434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676491508
    },
    {
        "content": "<p>It looks like all the <code>simpNF</code> complaints are <code>simp can prove this</code>. I tried testing a few to see if it was actually true that <code>simp</code> can prove the statement. It wasn't (for those in my sample). In this case, I would <code>nolint simpNF</code> and add a porting note.</p>",
        "id": 328099510,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676491861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CategoryTheory.2EAdjunction.2EBasic/near/327681627\">said</a>:</p>\n<blockquote>\n<p>I should also say that in the course of filling in the last sorry I was running into some really weird editor bugs, that I'd be curious to see if other people can reproduce:</p>\n<p>In particular, I was filling in the <code>homEquiv_naturality_left_symm'</code> field in <code>adjunctionOfEquivLeft</code>, and I had to manually refresh the server (<code>ctrl + X</code> in VSCode) every time I made a change in order for the infoview to update. Beyond that, it was hard to get the infoview to even display anything unless I had an extra <code>done</code> tactic at the bottom.</p>\n</blockquote>\n<p>Yes. It was challenging. I am using neovim for reference.</p>",
        "id": 328099932,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676492029
    },
    {
        "content": "<p>Awesome! Thanks, I'll make those changes</p>",
        "id": 328108406,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676495136
    },
    {
        "content": "<p>Hmm, one more wrinkle: A couple of the <code>simpNF</code> linter issues are coming from simp lemmas generated by <code>simps!</code> on a constructor, and adding the <code>nolint simpNF</code> attribute doesn't seem to fix those.</p>",
        "id": 328113986,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676497550
    },
    {
        "content": "<p>Yeah, it looks like the <code>nolint</code> attribute is failing on generated declarations and there is no global option to disable this linter. I am not sure what the preferred solution is here <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 328150428,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676519730
    },
    {
        "content": "<p>I raised this issue here <a href=\"#narrow/stream/287929-mathlib4/topic/simps.20and.20simpNF.20linter\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simps.20and.20simpNF.20linter</a><br>\nBut there is no solution yet. I think this needs input from people who understand meta code.</p>",
        "id": 328150567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676519855
    },
    {
        "content": "<p>Perhaps one could short circuit the linter <a href=\"https://github.com/leanprover/std4/blob/de7e2a79905a3f87cad1ad5bf57045206f9738c7/Std/Tactic/Lint/Simp.lean#L112\">here</a> using the standard pattern with <code>set_option</code>.</p>",
        "id": 328151687,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676520696
    },
    {
        "content": "<p>It wouldn't fix the tracking of generated decls but it would give a global kill switch</p>",
        "id": 328151788,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676520763
    },
    {
        "content": "<p>Ok. You can attach <code>nolint simpNF</code> to the generated declarations using <code>attribute</code> <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/nolinting.20generated.20decls\">#std4 &gt; nolinting generated decls</a></p>",
        "id": 328319560,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676575767
    },
    {
        "content": "<p>I did this plus aligned some fields whose names changed. It should be ready now.</p>",
        "id": 328319667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676575807
    },
    {
        "content": "<p>Oh great! The <code>attribute</code> method is good to know going forward</p>",
        "id": 328338182,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676582435
    }
]