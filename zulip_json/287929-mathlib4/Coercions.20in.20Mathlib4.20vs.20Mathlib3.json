[
    {
        "content": "<p>Looking at the porting PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2262\">https://github.com/leanprover-community/mathlib4/pull/2262</a> opened by <span class=\"user-mention\" data-user-id=\"563290\">@Lukas Miaskiwskyi</span>  I see some surprising (to me) warnings from the <code>dangerousInstance</code> linter.</p>\n<p>It looks like in Mathlib4 an instance of <code>Coe A B</code> is \"dangerous\" if <code>B</code> drops some carrier types that were present in <code>A</code>. I'll illustrate this slightly vague statement with the following pair of MWEs.</p>",
        "id": 329228951,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995434
    },
    {
        "content": "<p>First the Lean 3 version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.default</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_x</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"n\">foo.x</span> <span class=\"bp\">=</span> <span class=\"n\">foo.x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun'_x</span> <span class=\"o\">:</span> <span class=\"n\">to_fun'</span> <span class=\"n\">foo.x</span> <span class=\"bp\">=</span> <span class=\"n\">foo.x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">baz.to_bar</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 329229046,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995451
    },
    {
        "content": "<p>Now the Lean 4 version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_x</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"n\">Foo.x</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Baz</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Bar</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun'_x</span> <span class=\"o\">:</span> <span class=\"n\">to_fun'</span> <span class=\"n\">Foo.x</span> <span class=\"bp\">=</span> <span class=\"n\">Foo.x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Should I drop this or use `CoeOut` instead?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Baz</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Baz.toBar</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 329229109,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995466
    },
    {
        "content": "<p>They both typecheck but the Lean 4 version gets a warning from the linter than the Lean 3 version does not. Specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/- The `dangerousInstance` linter reports:\nSOME INSTANCES ARE DANGEROUS\nDuring type-class search, they produce subgoals like `Group ?M`.\nTry marking the dangerous arguments as implicit instead. -/\n#check instCoeBazBar /- generates subgoals with metavariables: argument 4 inst✝ : Foo ?Y -/\n</code></pre></div>",
        "id": 329229242,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995497
    },
    {
        "content": "<p>I looked at the places where I would have expected this to come up already in Mathlib4 but all the examples I found (e.g., coercion of linear maps to additive monoid homs) achieve their coercion using <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> 's morphisms-as-typeclasses-design (e.g., using <code>semilinear_map_class</code> and <code>add_monoid_hom_class</code>) so the issue does not arise.</p>",
        "id": 329229902,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995644
    },
    {
        "content": "<p>So what is the right thing to do in a situation like the one I have outlined above. What should be the Lean 4 equivalent of this Lean 3 statement: <a href=\"https://github.com/leanprover-community/mathlib/blob/bd9851ca476957ea4549eb19b40e7b5ade9428cc/src/algebra/lie/basic.lean#L482\">https://github.com/leanprover-community/mathlib/blob/bd9851ca476957ea4549eb19b40e7b5ade9428cc/src/algebra/lie/basic.lean#L482</a></p>",
        "id": 329230245,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995722
    },
    {
        "content": "<p>Maybe just <code>CoeOut</code> instead of <code>Coe</code>?</p>",
        "id": 329230331,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676995743
    },
    {
        "content": "<p>in the case of your MWE I think you'd expect <code>Foo X</code>/<code>Foo Y</code> to always be solved by unification rather than tc inference, so you'd mark them implicit in the instance instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">FX</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">FY</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Baz</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 329232499,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676996257
    },
    {
        "content": "<p>in the mathlib case, you probably can do the same, but there are so many variables floating around in context that it might be a pain to reintroduce them all &gt;_&lt;</p>",
        "id": 329232821,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676996335
    },
    {
        "content": "<p>The linter still emits a <code>dangerousInstance</code> warning to me if I make the typeclass variables implicit as you suggest (and <del>it</del> another linter  also <em>incorrectly</em> complains that <code>FX</code> and <code>FY</code> are unused).</p>",
        "id": 329233335,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676996476
    },
    {
        "content": "<p>As well as knowing how I should fix this, I'd like to understand what has been changed about coercions and why (provided it's not a rabbit hole).</p>",
        "id": 329233724,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676996572
    },
    {
        "content": "<p>Aha, in very recently merged code <a href=\"https://github.com/leanprover-community/mathlib4/blob/05d37ddf819bec66e94f89a12a2ad6a9fac54ed5/Mathlib/Algebra/Algebra/Hom.lean#L132\">here</a> I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coeOutRingHom</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">AlgHom.toRingHom</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">alg_hom.coe_ring_hom</span> <span class=\"n\">AlgHom.coeOutRingHom</span>\n</code></pre></div>\n<p>Which suggests that at least one other person thought the right thing to do was just to use <code>CoeOut</code> instead of <code>Coe</code>. Maybe <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Kô Miyahara</span> can comment?</p>",
        "id": 329235211,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1676996963
    },
    {
        "content": "<p>Yeah, CoeOut is the way to go here.</p>",
        "id": 329253172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677001781
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 329253375,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1677001822
    },
    {
        "content": "<p>I used <code>CoeOut</code> in these instances to avoid <code>dangerousInstance</code> linter.</p>",
        "id": 329307657,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1677019750
    },
    {
        "content": "<p>I was confused about the use of <code>CoeOut</code> in mathlib4 for a long time. Docstr says that use <code>CoeOut α β</code> if the variables in the type <code>α</code> are a superset of the variables in <code>β</code>, but there are fewer <code>AlgHom</code>s than <code>RingHom</code>s. Also we used <code>Coe</code> in <code>MonoidHom.coeToMulHom</code> <code>MonoidHom.coeToOneHom</code>  etc. I would like to know if there is a reason to use <code>CoeOut</code> here.</p>",
        "id": 338893379,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1677688539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/CoeHTCT.20synthesis.20timing.20out.20with.20default.20args.20and.20coercions/near/311242335\">said</a>:</p>\n<blockquote>\n<p>you would need something like <code>CoeHead? CoeOut* CoeIn* CoeTail?</code> where <code>CoeOut : A -&gt; outParam B</code> and <code>CoeIn : outParam A -&gt; B</code></p>\n</blockquote>\n<p>Ah I see. So for homomorphisms (or other FunLike things), it's the opposite of the corresponding type, is it?</p>",
        "id": 338908081,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1677691853
    },
    {
        "content": "<blockquote>\n<p>but there are fewer AlgHoms than RingHoms.</p>\n</blockquote>\n<p>It's not about the cardinality of the set of homomorphisms, it's about number of variables in the Lean type!  <code>A →ₐ[R] B</code> has a variable <code>R</code> that does not appear in <code>A →* B</code>, that's what the docstring refers to.</p>",
        "id": 338917953,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677694331
    }
]