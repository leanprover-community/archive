[
    {
        "content": "<p>Thanks! That worked.  Interestingly, gcongr totally chokes on proving equalities, such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">gcongr</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">a</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and congr won't work either (<code>n-j+j</code> and <code>n</code> differ for <code>j&gt;n</code>).  <code>prod_congr rfl</code> will work here, but again it would be nice to have the \"one-stop-shop\".</p>",
        "id": 397884767,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697931582
    },
    {
        "content": "<p>Did you try using <code>congr</code>? <code>prod_congr</code> is marked with that attribute, so it should just apply that lemma. If not, it's likely a priority issue. I'll have time to try it tomorrow morning, but probably not before then.</p>",
        "id": 397898704,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697942770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20does.20gcongr.20hide.20variables.3F/near/397898704\">said</a>:</p>\n<blockquote>\n<p>Did you try using <code>congr</code>? <code>prod_congr</code> is marked with that attribute, so it should just apply that lemma. If not, it's likely a priority issue. I'll have time to try it tomorrow morning, but probably not before then.</p>\n</blockquote>\n<p><code>congr</code> reduces <code>∏ j in range n, (n-j+j) = ∏ j in range n, n</code> to <code>(fun j =&gt; n - j + j) = fun j =&gt; n</code>, which is not true for <code>j : ℕ</code> (the side condition <code>j ∈ range n</code> is not provided by <code>congr</code>).  So indeed as you indicate the \"default\" <code>congr</code> simplification is applied before the <code>prod_congr</code> one is.  If one could elevate the priority of <code>prod_congr</code> and <code>sum_congr</code> within the <code>congr</code> tactic, that would indeed be convenient.</p>",
        "id": 397900506,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697944505
    },
    {
        "content": "<p>You might try the <code>congr!</code> tactic, which is a mathlib-defined tactic that is able to handle more than the core <code>congr</code>. It can pick up on so-called \"congruence lemmas\" that are user-defined, and I believe <code>prod_congr</code>/<code>sum_congr</code> are marked as such.</p>",
        "id": 397900547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697944557
    },
    {
        "content": "<p>Oh, that's the point, <code>congr!</code> is what uses that attribute. My bad</p>",
        "id": 397900652,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697944660
    },
    {
        "content": "<p>Indeed, that solved that particular toy problem, though the inequality problem <code> ∏ j in range n, (j+1) ≤ ∏ j in range n, n</code> is not usefully simplified by <code>congr!</code> out of the box.  (But perhaps one just then has to add other user-defined congruence lemmas such as <code>Finset.prod_le_prod</code>?  Or maybe this should go into a <code>gcongr!</code> tactic?)</p>",
        "id": 397900752,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697944765
    },
    {
        "content": "<p><code>congr!</code> is solving the restricted problem \"given an eq/heq/iff, reduce the problem to showing an eq/heq/iff of corresponding parts of the LHS and RHS\". It knows about <code>≤</code> insofar as it knows that it suffices to show an equality to prove <code>≤</code> (in general, it is aware of <code>@[rfl]</code>-tagged lemmas, which are lemmas that prove <code>R x x</code> for a given relation <code>R</code>, and it uses these lemmas to say it suffices to prove <code>x = y</code> to prove <code>R x y</code>).</p>",
        "id": 397901255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697945257
    },
    {
        "content": "<p>You're not supposed to make <code>@[congr]</code> lemmas for relations other than eq/heq, as far as I understand.</p>",
        "id": 397901334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697945322
    },
    {
        "content": "<p>Potentially <code>gcongr</code> (which is a mathlib tactic) could know about <code>Finset.prod</code>, but I don't personally know much about its design.</p>",
        "id": 397901373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697945377
    },
    {
        "content": "<p>(Maybe <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> might have something to say about whether <code>gcongr</code> could one day be used for <code>Finset.prod</code> inequalities? In particular where you get that the index is in the given finset as an additional hypothesis? This is something that <code>congr!</code> can do for equalities. <em>Edit</em>: never mind, I didn't read the thread carefully, and I'm not familiar enough with how <code>gcongr</code> works)</p>",
        "id": 397901428,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697945408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Why.20does.20gcongr.20hide.20variables.3F/near/397901428\">said</a>:</p>\n<blockquote>\n<p>(Maybe <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> might have something to say about whether <code>gcongr</code> could one day be used for <code>Finset.prod</code> inequalities? In particular where you get that the index is in the given finset as an additional hypothesis?)</p>\n</blockquote>\n<p>It does this already (see above discussion), though one has to specify names for the index variable and the additional hypothesis using <code>with</code> if one actually wants to use that data.</p>",
        "id": 397901570,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697945561
    },
    {
        "content": "<p>Oh, sorry, it seems I'm not paying a basic level of attention to the thread. In that case, I'll just say that while perhaps <code>congr!</code> could apply to relations that aren't equality-like, it's only designed for equality-like relations -- I see <code>congr!</code> as being a technical sort of tactic that is good at equating things that are meant to be equal (even in the face of complicated dependent types), but <code>gcongr</code> is meant to be more useful for mathematical users, and it uses heuristics based on what's likely to be useful. (Note that <code>congr!</code> also takes a <code>with</code> clause to name these additional variables and hypotheses that appear.)</p>",
        "id": 397902138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697946160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and I have talked about having <code>gcongr</code> support equality eventually, to offer the \"one-stop shop\" as Terry calls it.  But the correct <code>gcongr</code> analogy for equality is somewhere between <code>congr!</code> and <code>congrm</code>, so it requires a new implementation.</p>\n<p>Specifically, <code>gcongr</code> supports both custom congruence lemmas (like <code>congr!</code> does with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_congr#doc\">docs#Finset.prod_congr</a>) and pattern-matching (like <code>congrm</code> does).</p>",
        "id": 397905493,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697949686
    },
    {
        "content": "<p>Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">gcongr</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Finset.prod</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congrm</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Finset.prod</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In the <code>gcongr</code> and <code>congr!</code> examples, we get a hypothesis <code>h : i ∈ range n</code>, which may well turn out to be necessary in such a problem.  In the <code>congrm</code> example it applies the more naive congruence lemma which doesn't give you any such hypothesis.</p>",
        "id": 397905710,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697949903
    },
    {
        "content": "<p>But that missing feature also allows an even nicer pattern-matching syntax for <code>congrm</code> than for <code>gcongr</code>: this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congrm</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(There'd be no way, with that syntax, to specify the name of a hypothesis <code>h</code>.)</p>",
        "id": 397905800,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697949990
    },
    {
        "content": "<p>16 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Why.20does.20gcongr.20hide.20variables.3F\">#mathlib4 &gt; Why does gcongr hide variables?</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 397906247,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697950441
    },
    {
        "content": "<p>What about it leaves as goal <code>j ∈ range n → (n-j+j) ^ 2 = n ^ 2</code> instead of <code>(n-j+j) ^ 2 = n ^ 2</code>? and if the <code>?_</code> is replaced by a more complicated pattern, append all the goals with <code>j ∈ range n →</code>? It would be nice if the assumption was automatically introduced, but not introducing it sounds like a good compromise if naming it is hard.</p>",
        "id": 397920262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697960227
    }
]