[
    {
        "content": "<p>I started porting Data/Complex/Basic and have reached an error message which I do not understand. The code I have (at line 376) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Neg.neg</span>\n  <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">Sub.sub</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.re</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span><span class=\"o\">⟩</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.re</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span><span class=\"o\">⟩</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">z₃</span>\n    <span class=\"k\">show</span> <span class=\"o\">(⟨</span><span class=\"n\">z₁.re</span> <span class=\"bp\">+</span> <span class=\"n\">z₂.re</span> <span class=\"bp\">+</span> <span class=\"n\">z₃.re</span><span class=\"o\">,</span> <span class=\"n\">z₁.im</span> <span class=\"bp\">+</span> <span class=\"n\">z₂.im</span> <span class=\"bp\">+</span> <span class=\"n\">z₃.im</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z₁.re</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z₂.re</span> <span class=\"bp\">+</span> <span class=\"n\">z₃.re</span><span class=\"o\">),</span> <span class=\"n\">z₁.im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z₂.im</span> <span class=\"bp\">+</span> <span class=\"n\">z₃.im</span><span class=\"o\">)⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"k\">show</span>  <span class=\"o\">⟨</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"k\">show</span>  <span class=\"o\">⟨</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span>\n    <span class=\"k\">show</span> <span class=\"o\">(⟨</span><span class=\"n\">z₁.re</span> <span class=\"bp\">+</span> <span class=\"n\">z₂.re</span><span class=\"o\">,</span> <span class=\"n\">z₁.im</span> <span class=\"bp\">+</span> <span class=\"n\">z₂.im</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">z₂.re</span> <span class=\"bp\">+</span> <span class=\"n\">z₁.re</span><span class=\"o\">,</span> <span class=\"n\">z₂.im</span> <span class=\"bp\">+</span> <span class=\"n\">z₁.im</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span>\n    <span class=\"k\">show</span> <span class=\"o\">(⟨</span><span class=\"bp\">-</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_left_neg</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>and the error message I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.31699</span> <span class=\"bp\">?</span><span class=\"n\">m.31699</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">})</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">376</span><span class=\"o\">:</span><span class=\"mi\">29</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.31722</span> <span class=\"bp\">?</span><span class=\"n\">m.31722</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span>\n    <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">})</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">376</span><span class=\"o\">:</span><span class=\"mi\">29</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.32009</span> <span class=\"bp\">?</span><span class=\"n\">m.32009</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Any help will be appreciated</p>",
        "id": 340331804,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678274344
    },
    {
        "content": "<p>Which line is creating the error?</p>",
        "id": 340332192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678274494
    },
    {
        "content": "<p>Does <code>dsimp</code> or <code>simp</code> help?</p>",
        "id": 340332217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678274502
    },
    {
        "content": "<p>The error is at the top of the definition.</p>",
        "id": 340332556,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678274618
    },
    {
        "content": "<p>maybe some fields are running a tactic as default argument, and this is now failing?</p>",
        "id": 340332808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678274699
    },
    {
        "content": "<p>It is looking as if the error is in proving <code>nsmul 0 = 0</code> and <code>hsmul 0 = 0</code> which it seems is attempted by <code>rfl</code> and fails.</p>",
        "id": 340333418,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678274874
    },
    {
        "content": "<p>When I added proofs of <code>zsmul_zero'</code> and <code>nsmul</code> as sorries half the errors disappeared. Looks like these and two other relations need explicit proofs.</p>",
        "id": 340334045,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678275048
    },
    {
        "content": "<p>Thanks. At least the error is clear - five fields proved by tactics no longer worked.</p>",
        "id": 340334489,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678275207
    },
    {
        "content": "<p>For completeness, these were fairly easy to prove.</p>",
        "id": 340358641,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678281677
    },
    {
        "content": "<p>What proof did mathlib3 use for them?</p>",
        "id": 340358905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678281726
    },
    {
        "content": "<p>Were those fields true by <code>rfl</code> in  mathlib3, but no longer in mathlib4?</p>",
        "id": 340358958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678281742
    },
    {
        "content": "<p>That might be indicative of an upstream mis-port</p>",
        "id": 340358985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678281749
    },
    {
        "content": "<p>Those fields are not <code>rfl</code> in mathlib3, an explicit proof is given. Here is the relevant definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine_struct</span>\n  <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n    <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">has_sub.sub</span><span class=\"o\">,</span>\n    <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.re</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.re</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span><span class=\"o\">⟩</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ext_iff.2</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">ring1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ring_nf</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 340360718,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678282153
    },
    {
        "content": "<p>I guess <code>refine_struct</code> was never properly ported?</p>",
        "id": 340364397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678283113
    },
    {
        "content": "<p>Ah, and <code>refine_struct</code> either doesn't run, or ignores failures in, auto_params</p>",
        "id": 340366267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678283592
    },
    {
        "content": "<p>I have fixed errors in over half the file, but am completely confused by the absolute value treatment and have some other questions. It is getting late here so will resume in the morning. But will be grateful for clarifications:</p>\n<ul>\n<li>I see the typeclass <code>Abs</code> needs an absolute value of the same type, and is meant for structures with orders. This is in scope in the file Data.Complex.Basic and apparently many lemmas are used.</li>\n<li>On the other hand, there is a definition of the usual complex absolute value, and this is imported with a defining property.</li>\n<li>From there on, it is very confusing which absolute value is referred to in statements and in proofs - it seems sometimes theorems for the general absolute value are being used.</li>\n</ul>\n<p>Another part not clear to me was with <code>norm_cast</code> and coercions. Many lemmas are not accepting the <code>norm_cast</code> attribute. I added a coercion attribute to some lemmas and this fixed a few cases. But in many cases it seems to me that an inclusion has to be annotated as a coercion, and statements may have to use it explicitly if they are to have the <code>norm_cast</code> attribute.</p>",
        "id": 340397635,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678290301
    },
    {
        "content": "<p>It's possible that mathport has muddled up the two <code>abs</code>s; comparing to the <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a> for mathlib3 will help resolve the problems in the statements</p>",
        "id": 340406047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678292191
    },
    {
        "content": "<p>Comparing with the source of mathlib3 did indeed resolve the issue and the file now compiles.</p>",
        "id": 340526387,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678345281
    },
    {
        "content": "<p>Did you fix all the <code>norm_cast</code> issues? Sometimes elaboration order between Lean 3 and Lean 4 has changed enough that now coercions need to be inserted  in different places for the declaration to elaborate the same way.</p>",
        "id": 340526804,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678345453
    },
    {
        "content": "<p>No, I don't understand <code>norm_cast</code> well enough for this. In fact some proofs became <code>rfl</code>. I have made porting notes and removed the <code>norm_cast</code> where it failed.</p>",
        "id": 340542945,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678351533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2EBasic/near/340364397\">said</a>:</p>\n<blockquote>\n<p>I guess <code>refine_struct</code> was never properly ported?</p>\n</blockquote>\n<p>Finished but stalled as a core RFC issue, never to be heard from again… 🥲 (Tangent, but I wonder if I should make a different mathlib4-acceptable version now that it’s not just “Leo’s on vacation” but “core is not moving”.)</p>",
        "id": 340546836,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678352642
    },
    {
        "content": "<p>Yes, I guess we better put stuff in mathlib4 for now, where possible.</p>",
        "id": 340557212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678355515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2EBasic/near/340526804\">said</a>:</p>\n<blockquote>\n<p>Did you fix all the <code>norm_cast</code> issues? Sometimes elaboration order between Lean 3 and Lean 4 has changed enough that now coercions need to be inserted  in different places for the declaration to elaborate the same way.</p>\n</blockquote>\n<p>I did manage to fix a majority by making the inclusion from reals to complex numbers an explicit function annotated <code>coe</code>. Some cases there is an error though.</p>",
        "id": 340560428,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678356365
    },
    {
        "content": "<p>I'll have a look.</p>",
        "id": 340597805,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678366515
    },
    {
        "content": "<p>Thanks a lot. I have incorporated most of the changes. In one case the original proof was correct but the original statement was not, so I had changed to <code>rfl</code>.</p>",
        "id": 340633180,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678374701
    },
    {
        "content": "<p>Which statement?</p>",
        "id": 340638144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678375753
    },
    {
        "content": "<p>Generally you shouldn't change statements when porting</p>",
        "id": 340638223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678375772
    },
    {
        "content": "<p>My guess is that the Lean3 statement was correct, but mathport translated it incorrectly. There are always a lot of those around coercions.</p>",
        "id": 340639510,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678376058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2EBasic/near/340638223\">said</a>:</p>\n<blockquote>\n<p>Generally you shouldn't change statements when porting</p>\n</blockquote>\n<p>The change was in explicitly casting and as suggested by <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> (I don't understand casting enough to make this) to be a better translation. The statement was <code>ofReal_rat_cast</code> but I also had to change the next two very similar ones so proofs using this worked.</p>",
        "id": 340641178,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678376419
    },
    {
        "content": "<p>Are the proofs now the same as they were in mathlib3?</p>",
        "id": 340642350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678376658
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/complex/basic\">port-status#data/complex/basic</a>, since I don't see the PR number mentioned above</p>",
        "id": 340644670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678377179
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2718\">!4#2718</a></p>",
        "id": 340645162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> , can you please change the statement of <code>ofReal_rat_cast</code> to what I suggested and replace the proof with the original that worked?</p>",
        "id": 340645815,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377432
    },
    {
        "content": "<p>I believe I did that a while back. Did I make a mistake? Here is the code of that and the next two statements that needed correspoding changes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ofReal_rat_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_ratCast</span> <span class=\"n\">ofReal</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.of_real_rat_cast</span> <span class=\"n\">Complex.ofReal_rat_cast</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_re</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_re</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_re</span> <span class=\"n\">Complex.rat_cast_re</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_im</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_im</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_im</span> <span class=\"n\">Complex.rat_cast_im</span>\n</code></pre></div>",
        "id": 340646616,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678377606
    },
    {
        "content": "<p>maybe you didn't push? this is what I see on GitHub (after refreshing my cache too)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, nolint synTaut]</span>\n<span class=\"c1\">-- Was warned that this is a syntactic tautology.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ofReal_rat_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 340647240,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377749
    },
    {
        "content": "<p>Also, these \"removed <code>norm_cast</code>\" porting notes are concerning</p>",
        "id": 340647774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678377868
    },
    {
        "content": "<p>I think we should fix norm_cast to auto-symmetrize lemmas with the coe on the wrong side. I believe it did this already in mathlib3</p>",
        "id": 340647871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678377892
    },
    {
        "content": "<p>I've left a handful of comments; I'm a little concerned that a lot of the non-trivial changes / new lemmas / defs didn't get a porting note</p>",
        "id": 340647965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678377912
    },
    {
        "content": "<p>Did it? I'm not sure about that.</p>",
        "id": 340648023,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377927
    },
    {
        "content": "<p>Also, norm_cast complaints are a good way to spot errors in statements for the moment.</p>",
        "id": 340648162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377962
    },
    {
        "content": "<p>I'm working on making sure there are no more <code>norm_cast</code> removals.</p>",
        "id": 340648292,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678377987
    },
    {
        "content": "<p>I have been pushing. Are we looking at the same branch? At <a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Complex.Basic/Mathlib/Data/Complex/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/port/Data.Complex.Basic/Mathlib/Data/Complex/Basic.lean</a> I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ofReal_rat_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_ratCast</span> <span class=\"n\">ofReal</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.of_real_rat_cast</span> <span class=\"n\">Complex.ofReal_rat_cast</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_re</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_re</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_re</span> <span class=\"n\">Complex.rat_cast_re</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_im</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_im</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_im</span> <span class=\"n\">Complex.rat_cast_im</span>\n</code></pre></div>",
        "id": 340648899,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1678378120
    },
    {
        "content": "<p>Not related to the above, but related to the PR; what should <code>complex.I</code> be called in mathlib4?</p>",
        "id": 340649304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678378215
    },
    {
        "content": "<p>Mathport guessed <code>Complex.i</code> but that doesn't make it the right choice necessarily</p>",
        "id": 340649522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678378269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> I see it now, not sure what the problem was before, sorry for the noise.</p>",
        "id": 340651538,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678378741
    },
    {
        "content": "<p>I think we should stick to <code>Complex.I</code> using upper case, primarily to avoid confusion and clashes with local variables, but this is a question for the naming convention stream.</p>",
        "id": 340651760,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678378800
    },
    {
        "content": "<p>Is there a reason the rhs's of these lemmas aren't simply e.g. <code>((n : ℚ) :  ℂ)</code> or <code>((0 : ℚ) : ℂ)</code>? (I was searching mathlib4 for any stray <code>RatCast.ratCast</code>s and found these.)</p>",
        "id": 342484040,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679036771
    },
    {
        "content": "<p>They certainly should be that; are they not?</p>",
        "id": 342505544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679044700
    },
    {
        "content": "<p>Currently they're</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ofReal_rat_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_ratCast</span> <span class=\"n\">ofReal</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.of_real_rat_cast</span> <span class=\"n\">Complex.ofReal_rat_cast</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_re</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_re</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_re</span> <span class=\"n\">Complex.rat_cast_re</span>\n\n<span class=\"c1\">-- Porting note: removed `norm_cast` attribute because the RHS can't start with `↑`</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_cast_im</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RatCast.ratCast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofReal_rat_cast</span><span class=\"o\">,</span> <span class=\"n\">ofReal_im</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">complex.rat_cast_im</span> <span class=\"n\">Complex.rat_cast_im</span>\n</code></pre></div>",
        "id": 342507825,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679045387
    },
    {
        "content": "<p>The porting notes are wrong. The lemmas were mistranslated. Btw <code>rat_cast</code> should be <code>ratCast</code></p>",
        "id": 342508182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679045500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what's the easiest way to get a fresh mathport output for that file to diff against? One that isn't impacted by the version that's actually in mathlib4</p>",
        "id": 342508908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679045672
    },
    {
        "content": "<p>If you copy a mathlib4 file into oneshot you should be able to port it as though it was a new file</p>",
        "id": 342509268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679045761
    },
    {
        "content": "<p>Here's a PR on which we can fix things—I did the rename and naively changed things as they appeared to the corresponding coercions. I'll take a look at mathlib3 now <a href=\"https://github.com/leanprover-community/mathlib4/pull/2947\">!4#2947</a></p>",
        "id": 342510394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679046047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  feel free to commit to that PR/branch if you're making moves (<code>stray-ratCasts</code>)</p>",
        "id": 342510568,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679046106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complex.2EBasic/near/342509268\">said</a>:</p>\n<blockquote>\n<p>If you copy a mathlib4 file into oneshot you should be able to port it as though it was a new file</p>\n</blockquote>\n<p>Could you take a quick look at my question about one-shot <a href=\"#narrow/stream/287929-mathlib4/topic/Mathport.20oneshot/near/341786120\">here</a>?</p>",
        "id": 342510700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679046135
    },
    {
        "content": "<p>Lol, yup (re: the message that said renaming discussion ought to be in the naming thread, which is now gone). I suppose I'll undo the renames on that PR for now, and we'll wait until it's sorted one way or the other... EDIT: actually, I'll see where we land first, just in case I'd be duplicating work.</p>",
        "id": 342524096,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679049901
    }
]