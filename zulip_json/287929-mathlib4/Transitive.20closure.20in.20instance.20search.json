[
    {
        "content": "<p>I started experimenting with <code>BundledSet</code> (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a>). The plan is to add structures like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">IsSubsemigroup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsSubmonoid</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"kd\">extends</span> <span class=\"n\">IsSubsemigroup</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>then use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BundledSet</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<p>In order to automatically cast, e.g., <code>Submonoid G</code> to <code>Subsemigroup G</code>, I tried to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Implies</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>I'm trying to add transitivity instance for <code>Implies</code> but it fails with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">instImplies</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">],</span> <span class=\"n\">Implies</span> <span class=\"n\">p</span> <span class=\"n\">r</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">Implies</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">q</span>\n  <span class=\"bp\">@</span><span class=\"n\">Implies</span> <span class=\"n\">α</span> <span class=\"bp\">?</span><span class=\"n\">q</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>I tried adding <code>ImpliesTC</code> but this doesn't help because nothing can be a <code>semiOutParam</code> in the transitive instance anyway.</p>",
        "id": 377989188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690174481
    },
    {
        "content": "<p>Is there a workaround? Can instance search do this?</p>",
        "id": 377989235,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690174511
    },
    {
        "content": "<p>Or we'll need to add instances like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Implies</span> <span class=\"n\">p</span> <span class=\"n\">IsSubmonoid</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span> <span class=\"n\">p</span> <span class=\"n\">IsSubsemigroup</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Implies</span> <span class=\"n\">IsSubmonoid</span> <span class=\"n\">IsSubsemigroup</span>\n</code></pre></div>",
        "id": 377989433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690174578
    }
]