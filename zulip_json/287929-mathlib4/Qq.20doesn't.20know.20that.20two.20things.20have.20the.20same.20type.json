[
    {
        "content": "<p>I'm trying to write a positivity extension (cc <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span>) and using Qq for the first time.  Here is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Hom.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Meta</span> <span class=\"n\">Positivity</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: nonnegative maps take nonnegative values. -/</span>\n<span class=\"kd\">@[positivity _]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalMap</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u₃</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">zβ</span> <span class=\"n\">pβ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_coe</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">a'</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not NonnegHomClass\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">a'</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">f'</span>\n  <span class=\"k\">let</span> <span class=\"n\">_a</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">NonnegHomClass</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"n\">u₃</span><span class=\"o\">))</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">map_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"c1\">-- error here</span>\n</code></pre></div>",
        "id": 357098417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683666335
    },
    {
        "content": "<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  map_nonneg «$f» «$a»\nhas type\n  0 ≤ ↑«$f» «$a» : Prop\nbut is expected to have type\n  0 ≤ «$e» : Prop\n</code></pre></div>",
        "id": 357098449,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683666352
    },
    {
        "content": "<p>On other positivity extensions, these error messages are solved by lines like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">_e_eq</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>I can't do this here because the <code>_coe</code>, which should be of type <code>Q($F → $α → $β)</code>, is not known to be of this type by Lean.  How can I tell it?</p>",
        "id": 357098756,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683666482
    },
    {
        "content": "<p>Does <code>have coe : Q($F → $α → $β) := coe</code> (as a means of telling it the type) before the <code>=Q</code> line work? (Apologies if you’ve tried this, just checking)</p>",
        "id": 357100981,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683667426
    },
    {
        "content": "<p>cop-out answer (no <code>Qq</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">map_nonneg</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 357101099,
        "sender_full_name": "David Renshaw",
        "timestamp": 1683667464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Qq.20doesn't.20know.20that.20two.20things.20have.20the.20same.20type/near/357101099\">said</a>:</p>\n<blockquote>\n<p>cop-out answer (no <code>Qq</code>):</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">map_nonneg</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">]))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I know, I know ... I'm trying to learn how to use Qq though :)</p>",
        "id": 357101181,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683667510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Thanks for the suggestion.  Maybe it helped?  With your suggestion I was able to add a few more lines of copy-pasta without getting errors, but I still do reach an error near the end.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Hom.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Meta</span> <span class=\"n\">Positivity</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: nonnegative maps take nonnegative values. -/</span>\n<span class=\"kd\">@[positivity _]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalMap</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u₃</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"n\">zβ</span> <span class=\"n\">pβ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">c'</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">a'</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not NonnegHomClass\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">a'</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">f'</span>\n  <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c'</span>\n  <span class=\"k\">let</span> <span class=\"n\">_e_eq</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">_a</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">NonnegHomClass</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"n\">u₃</span><span class=\"o\">))</span>\n  <span class=\"n\">assertInstancesCommute</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_f_eq</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">withDefault</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">assertDefEqQ</span> <span class=\"n\">c</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">FunLike.coe</span><span class=\"o\">)</span> <span class=\"c1\">-- error here</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">map_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 357102417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683668039
    },
    {
        "content": "<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid match-expression, type of pattern variable '_f_eq' contains metavariables\n  «$c» =Q FunLike.coe\n</code></pre></div>",
        "id": 357102509,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683668056
    },
    {
        "content": "<p>Hmm, I played around with it for a while—I was able to resolve the metavariable error (I suspected outparams) by synthesizingQ an instance of <code>FunLike $F $α (fun a =&gt; $β)</code>, <code>have</code>ing them into the context as above, and giving arguments explicitly to <code>FunLike.coe</code>, but at the cost of recovering the original error! 🙃</p>",
        "id": 357107056,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683669644
    },
    {
        "content": "<p>Following Thomas' idea that the outparams might be causing extra complications, I tried to write a positivity extension for a situation where there is a similar \"guess-the-type\" Qq problem but there are no outparams.  This still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dist_nonneg''</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">dist_nonneg</span>\n<span class=\"c1\">-- convenience version with arguments explicit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Function</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Meta</span> <span class=\"n\">Positivity</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: distances are nonnegative. -/</span>\n<span class=\"kd\">@[positivity Dist.dist _ _]</span>\n<span class=\"kd\">def</span> <span class=\"n\">evalDist</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">_zα</span> <span class=\"n\">_pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not dist · ·\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"n\">a'</span>\n  <span class=\"k\">let</span> <span class=\"n\">_a</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">_b</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Dist</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">_e_eq</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">assumeInstancesCommute</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_f_eq</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">withDefault</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">assertDefEqQ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Dist.dist</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">_b</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">dist_nonneg''</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 357114613,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683672686
    }
]