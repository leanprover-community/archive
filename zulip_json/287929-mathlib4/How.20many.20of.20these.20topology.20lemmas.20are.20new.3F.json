[
    {
        "content": "<p><a href=\"https://github.com/girving/ray/blob/main/Ray/Misc/Topology.lean\">https://github.com/girving/ray/blob/main/Ray/Misc/Topology.lean</a> contains assorted basic topology lemmas, depending only on mathlib (ignore the dependence on my <code>bound</code> tactic, which is easily removable).  I've stripped several that already occurred in mathlib that I'd missed while learning Lean (<a href=\"https://github.com/girving/ray/commit/cfa5fd491e98e174d1ba8ca52b68b726e83f0935\">https://github.com/girving/ray/commit/cfa5fd491e98e174d1ba8ca52b68b726e83f0935</a>), but probably there are a few others already there that I missed.</p>\n<p>Would someone be up for doing a quick scan and pointing out other lemmas in this file that already exist?  I'm planning to PR these next if they look reasonable, scattered across various topology files, though a bit of cleanup is required (removing dependence on <code>bound</code>, generalizing lemmas as necessary, etc.).</p>\n<p>Also feel free to tell me if I skip this \"request for scan\" step and do the PR directly, though I do expect that means the PR will contain several things that already exist in mathlib.</p>",
        "id": 398359314,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698180947
    },
    {
        "content": "<p><code>ContinuousOn.bounded</code> is like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.exists_isMaxOn#doc\">docs#IsCompact.exists_isMaxOn</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCompact.exists_forall_ge#doc\">docs#IsCompact.exists_forall_ge</a></p>",
        "id": 398360016,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1698181273
    },
    {
        "content": "<p>I would be happy to do a scan but that probably won't happen before sunday.</p>",
        "id": 398360061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698181293
    },
    {
        "content": "<p>I’m available to do a scan, but it would indeed be easier if you open a draft PR (no need to put everything in the right file for now) so that I can easily comment</p>",
        "id": 398363160,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1698182875
    },
    {
        "content": "<p>Do you want me to replace some of these lemmas by mathlib versions? If yes, would you give me write permission or should I make pull requests?</p>",
        "id": 398365311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698184072
    },
    {
        "content": "<p>One candidate for removal (not from this file): the <code>atInf</code> filter. It's the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bornology.cobounded#doc\">docs#Bornology.cobounded</a> (if you assume <code>Normed(Add)Group</code>). In the case of a proper set, it's also <code>cocompact</code>. If <code>Mathlib</code> is missing some API about <code>cobounded</code>, then we should add missing lemmas instead of a new definition.</p>",
        "id": 398365584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698184216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> That would certainly be amazing if you're offering, and I'd love to take you up on it if so.  Though I think in practice most of the work is going through the remainder of the repo and fixing all the instances.  I gave you access, but it may be less work for you either to just point out redundant bits (<code>atInf</code> I did know about, but haven't gotten to removing it) or sending a PR that changes the local file but doesn't fix all the downstream uses.  In any of these cases, thank you!</p>\n<p>I think there may also be refactoring tricks in Lean + VSCode that I don't know how to use, so if (1) you use these in typical refactoring workflows and (2) there's some documentation of them I'd love to see it.  For example, I had <code>Filter.Eventually.self</code> because I hadn't noticed <code>Filter.Eventually.self_of_nhds</code>, but renamed it via <code>perl</code> rather than VSCode.</p>",
        "id": 398368004,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698185614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Let me know if you want to take a pass first, and if not I'll make the super-draft PR for <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> tomorrow.</p>",
        "id": 398368101,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698185676
    },
    {
        "content": "<p>I'll try to make a first pass later tonight. If I fail (I'm at home with 2 kids, and my wife is away for a week, so can't be sure), then I won't have time till tomorrow evening.</p>",
        "id": 398368188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698185750
    },
    {
        "content": "<p>Do you intentionally avoid using defeq in lemmas like <code>subset_setOf</code> (it's just <code>Iff.rfl</code>)?</p>",
        "id": 398377883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698192446
    },
    {
        "content": "<p>I golfed some proofs, often to 1-liners.</p>",
        "id": 398392836,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698200227
    },
    {
        "content": "<p>So that you may decide for yourself whether you want to delete your versions or not.</p>",
        "id": 398392870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698200251
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7913\">#7913</a></p>",
        "id": 398414315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698212708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/How.20many.20of.20these.20topology.20lemmas.20are.20new.3F/near/398368188\">said</a>:</p>\n<blockquote>\n<p>I'll try to make a first pass later tonight. If I fail (I'm at home with 2 kids, and my wife is away for a week, so can't be sure), then I won't have time till tomorrow evening.</p>\n</blockquote>\n<p>With appropriate training, that's four more eyes to review Geoffrey's code <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 398414324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698212719
    },
    {
        "content": "<p>The kids are 5yo and 11yo.</p>",
        "id": 398414356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698212753
    },
    {
        "content": "<p>I tried my little nephew on the natural number game but then realised they couldn't type <code>rfl</code> because they didn't know where any of the letters were on the keyboard :-/</p>",
        "id": 398417696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698214656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> That non-use isn’t intentional: some of those lemmas were written quite a while ago before I understood Lean well.  Incidentally, that particular lemma is for use in simp, since sometimes applying other simp lemmas results in explicit setOf occurrences; not sure if that’s a separate mistake on my part.</p>",
        "id": 398420185,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698215834
    },
    {
        "content": "<p>Do you have any plans for Hartogs with more than 2 variables?</p>",
        "id": 398420678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698216052
    },
    {
        "content": "<p>Yes, will prove that near when I upstream it. I think it follows by currying if we write down the Banach space of holomorphic functions on a set, as my 2 variable version is for any separable Banach space output already.  But I haven’t fully checked this.</p>",
        "id": 398423389,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698217280
    },
    {
        "content": "<p>I thought about using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=torusIntegral#doc\">docs#torusIntegral</a> and write the series explicitly but I constantly get distracted.</p>",
        "id": 398423755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698217441
    },
    {
        "content": "<p>Yeah, I think you’re currently proving Osgood in a lot more generality than me, in which case most of my Osgood.lean would disappear (but Hartogs.lean is still useful).</p>",
        "id": 398424512,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698217731
    },
    {
        "content": "<p>I opened more Mathlib PRs.</p>",
        "id": 398604939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698293399
    },
    {
        "content": "<p>About Hartogs, I want to prove a version that implies that a compact singularity in dimension ≥2 is removable.</p>",
        "id": 398605078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698293440
    },
    {
        "content": "<p>Wow, thank you so much for all the PRs! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>I unfortunately don't know how related that theorem of Hartogs is to the separate holomorphicity one: they're both by Hartogs, but I haven't read the proof of the noncompact singularity theorem.</p>\n<p>My guess is that that the best thing for me to do on the upstreaming route is reduce <code>bound</code> to <code>gcongr</code> (<a href=\"https://github.com/girving/ray/blob/main/Ray/Tactic/Bound.lean\">https://github.com/girving/ray/blob/main/Ray/Tactic/Bound.lean</a>), since most of my non-topology analysis stuff depends on <code>bound</code>.  Does that seem right?  The other thing I could try to upstream next is <code>AnalyticManifold</code>, since none of that depends on <code>bound</code>.</p>",
        "id": 398646322,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698311278
    },
    {
        "content": "<p>I'm going to be busy with another project for a week, then I'll have to quickly grade a midterm. About compact singularity theorem (for simplicity, in dimension 2).  Consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><msup><mi mathvariant=\"double-struck\">C</mi><mn>2</mn></msup><mo>→</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">f\\colon\\mathbb C^2\\to E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> that is holomorphic in the bidisc of radius 2 outside of the bidisc of radius 1. Let us show that <code>f (a, b)</code> is equal to the iterated Cauchy integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>1</mn></msup><mo>×</mo><msup><mi>S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^1\\times S^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> whenever <code>1 &lt; max |a| |b| &lt; 2</code>. WLOG, <code>1 &lt; |a| &lt; 2</code>, <code>|b| &lt; 2</code>. We apply Cauchy integral formula for <code>f(a, ⋅)</code> first, then we apply Cauchy integral formula to <code>f(⋅, y)</code> to find each <code>f(a, y)</code>, <code>|y|=2</code> that appears in the first integral. Note that we never used differentiability of <code>f</code> in the bidisc of radius <code>1</code>. Finally, we know that <code>f</code> is equal to the Cauchy integral on the difference of two bidiscs but this Cauchy integral is analytic everywhere in the larger bidisc.</p>",
        "id": 399012211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698469746
    }
]