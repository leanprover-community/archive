[
    {
        "content": "<p>There are a couple of timeouts that I've haven't really profiled well because I've spent all day trying to wiggle out of DTT hell <a href=\"https://github.com/leanprover-community/mathlib4/blob/f3c451930119553ade383d9a0bc5a3c764a5e962/Mathlib/AlgebraicGeometry/Morphisms/RingHomProperties.lean#L395\">here</a></p>",
        "id": 374745681,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689196066
    },
    {
        "content": "<p>Previously <code>convert</code> pulled things apart enough to figure out that the two algebra instances were defeq. It doesn't do that here.</p>",
        "id": 374745833,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689196125
    },
    {
        "content": "<p>I haven't looked at this at all, but last time I was in DTT when porting was due to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_congr#doc\">docs#forall_prop_congr</a> not being used in congruence lemmas any more</p>",
        "id": 374745953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689196172
    },
    {
        "content": "<p>Here is behavior I have never encountered before: I am in a situation multiple goals. I sorry one and I am able to rewrite in another goal ending at a reasonable goal that my sorried code is equal to what is required. I replaced the sorried code by what should work (satisfy the equality) and then my motive is not correct.</p>",
        "id": 374746275,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689196312
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Just so you know, <code>convert</code> generates its own congruence lemmas (via <code>congr!</code>) rather than using simp's. If <code>forall_prop_congr</code> could help <code>convert</code>/<code>congr!</code> deal with more congruences, we could add it.)</p>",
        "id": 374746937,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689196563
    },
    {
        "content": "<p>Where do I see the \"reasonable goal\", <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>?</p>",
        "id": 374746981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689196572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, the particular pain I was struggling with was <code>simp_rw</code> not knowing the congruence lemma, which I assume is separate from the <code>convert</code>/<code>congr</code> mechanism?</p>",
        "id": 374747915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689196929
    },
    {
        "content": "<p>Yeah, it's separate, though <code>convert</code>/<code>congr!</code> (with a <code>!</code>) do try using <code>@[congr]</code> lemmas if they're defined, and it's able to use simp congr lemmas as a backup</p>",
        "id": 374747990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689196974
    },
    {
        "content": "<p>In this particualr case <code>forall_prop_congr</code> is not considered legal by <code>@[congr]</code> any more</p>",
        "id": 374748078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689197024
    },
    {
        "content": "<p>But it sounds like <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> is seeing something unrelated anyway</p>",
        "id": 374748159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689197044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Oof, these are quite the goals.</p>\n<p>This is what I'm seeing after that linked <code>convert</code>. It looks like it's gone as far as <code>convert</code> is meant to go, since there's nothing obviously in common between both sides. If you think it should go farther, then something you could do is unfold some definitions yourself and then run <code>congr!</code> again.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X.presheaf.map</span>\n    <span class=\"o\">(</span><span class=\"n\">homOfLE</span>\n        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n          <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpenMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"o\">(</span><span class=\"n\">Scheme.basicOpen</span> <span class=\"n\">X</span> <span class=\"n\">r</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≤</span>\n            <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpenMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"bp\">↑</span><span class=\"n\">U</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span>\n  <span class=\"n\">algebraMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">X.presheaf.obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">((</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpenMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"bp\">↑</span><span class=\"n\">U</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">⊤</span><span class=\"o\">)))</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">Scheme.restrict</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">OpenEmbedding</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"o\">(</span><span class=\"n\">Scheme.basicOpen</span> <span class=\"n\">X</span> <span class=\"n\">r</span><span class=\"o\">))))))</span>\n</code></pre></div>",
        "id": 374748818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689197311
    },
    {
        "content": "<p><code>set_option pp.proofs.withType false</code> makes the goals a lot more readable, but maybe it hides useful info</p>",
        "id": 374749528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689197584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.235663/near/374746981\">said</a>:</p>\n<blockquote>\n<p>Where do I see the \"reasonable goal\", <span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span>?</p>\n</blockquote>\n<p>The second goal is solved if you replace the sorry with the commented out code below. But actually providing a term for the <code>Algebra</code> goal, breaks the <code>rw [eq]</code> in the third goal.</p>",
        "id": 374750770,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198091
    },
    {
        "content": "<p>Does using <code>swap</code> to reorder the goals help?</p>",
        "id": 374751070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689198225
    },
    {
        "content": "<p>My current guess is that there odd <code>Algebra</code> instances floating around from the fact that <code>RingHom</code>’s are being built in <code>CommRingCat</code> and transported over.</p>",
        "id": 374751175,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198256
    },
    {
        "content": "<p>Just to check I understand correctly, you mean replacing this sorry with the rest of the selection?<br>\n<a href=\"/user_uploads/3121/RboCQOIfvZbfvPoZ6S8-hRQk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RboCQOIfvZbfvPoZ6S8-hRQk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RboCQOIfvZbfvPoZ6S8-hRQk/image.png\"></a></div>",
        "id": 374751408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689198349
    },
    {
        "content": "<p>In the ml3 version, the second to last <code>convert</code> could figure out the <code>Álgebra</code> instance</p>",
        "id": 374751540,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198394
    },
    {
        "content": "<p>Is the <code>Algebra</code> goal you're talking about the first sorry?</p>",
        "id": 374751597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689198420
    },
    {
        "content": "<p>The second</p>",
        "id": 374751624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198431
    },
    {
        "content": "<p>The first has the ml3 proof commented out for the goal Kyle displayed</p>",
        "id": 374751748,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198483
    },
    {
        "content": "<p><code>X.presheaf.map _ = algebraHom _ _</code></p>",
        "id": 374751996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198599
    },
    {
        "content": "<p>What's the <code>· dsimp [Scheme.Γ]</code>? The number of commented out goals is greater than the number of non-commented out ones</p>",
        "id": 374752474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689198765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.235663/near/374745833\">said</a>:</p>\n<blockquote>\n<p>Previously <code>convert</code> pulled things apart enough to figure out that the two algebra instances were defeq. It doesn't do that here.</p>\n</blockquote>\n<p>If this were a <code>convert</code> issue I'd expect to see an equality between two algebra instances, but I'm just seeing a goal that's an <code>Algebra</code> instance. This suggests that the expression passed to convert isn't synthesizing an <code>Algebra</code> goal.</p>",
        "id": 374752482,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689198768
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 374752500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689198776
    },
    {
        "content": "<p>Both the third and first branch can be reduced to equalities of <code>Álgebra</code> instances with <code>convert</code>’s</p>",
        "id": 374752753,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198881
    },
    {
        "content": "<p>The second goal is from the <code>?alg</code> placeholder, which is where the algebra instance is supposed to be synthesized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">HoldsForLocalizationAway</span> <span class=\"n\">_</span> <span class=\"n\">hP</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.restrict</span> <span class=\"o\">(</span><span class=\"n\">X.basicOpen</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">openEmbedding</span><span class=\"o\">)))</span>\n      <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">alg</span> <span class=\"n\">sec</span> <span class=\"bp\">?</span><span class=\"n\">loc</span>\n</code></pre></div>",
        "id": 374752761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689198883
    },
    {
        "content": "<p>It was in ml3</p>",
        "id": 374752818,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689198910
    },
    {
        "content": "<p>I don't doubt you there -- I'm just not sure that it's got to do with <code>convert</code> itself. If you expect it to be synthesizable, then you should have a <code>_</code> there</p>",
        "id": 374753065,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689198994
    },
    {
        "content": "<p>(hmm, though maybe we could try synthesizing pending instances <em>after</em> running <code>congr!</code>... not sure if this would help here, but it seems like it could help with <code>convert</code> in general, maybe in <code>refine</code> too)</p>",
        "id": 374753237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689199069
    },
    {
        "content": "<p><del>There is one floating around. <code>(_)</code> clears that goal.</del> Can't read</p>",
        "id": 374754688,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689199623
    },
    {
        "content": "<p>I am guessing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra_section_section_basicOpen</span> <span class=\"n\">sec</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">toAlgebra</span>\n    <span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span>\n      <span class=\"o\">(</span><span class=\"n\">homOfLE</span>\n          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n            <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpenMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"o\">(</span><span class=\"n\">Scheme.basicOpen</span> <span class=\"n\">X</span> <span class=\"n\">r</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≤</span>\n              <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IsOpenMap</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"bp\">↑</span><span class=\"n\">U</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">⊤</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>was automatic before</p>",
        "id": 374755599,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689200039
    },
    {
        "content": "<p>Indeed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.algebra_section_section_basicOpen#doc\">docs#AlgebraicGeometry.algebra_section_section_basicOpen</a> is very close</p>",
        "id": 374756479,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689200434
    },
    {
        "content": "<p>I think I've got the ml3 and ml4 states lines up as best as possible. This convert line succeeds in ml3 and makes no progress in ml4</p>\n<ul>\n<li>ml4 : <a href=\"https://github.com/leanprover-community/mathlib4/blob/7c544a8cfa266f3405007083ac4a8f35846b015a/Mathlib/AlgebraicGeometry/Morphisms/RingHomProperties.lean#L390\">https://github.com/leanprover-community/mathlib4/blob/7c544a8cfa266f3405007083ac4a8f35846b015a/Mathlib/AlgebraicGeometry/Morphisms/RingHomProperties.lean#L390</a></li>\n<li>ml3 : <a href=\"https://github.com/leanprover-community/mathlib/blob/baa88307f3e699fa7054ef04ec79fa4f056169cb/src/algebraic_geometry/morphisms/ring_hom_properties.lean#L346\">https://github.com/leanprover-community/mathlib/blob/baa88307f3e699fa7054ef04ec79fa4f056169cb/src/algebraic_geometry/morphisms/ring_hom_properties.lean#L346</a></li>\n</ul>",
        "id": 374763827,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689204211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Thanks, that was really helpful to be able to debug what was going on. The issue is that <code>IsLocalization.Away</code>'s second explicit argument is a type, and you want <code>convert</code> to generate type equalities. There's a heuristic built into <code>convert</code>/<code>congr!</code> that it shouldn't generate equalities between types unless they're plausibly provable (the <code>congr!</code> module documentation explains this somewhere), but you actually want the type equalities here. To turn the heuristic off, you can give <code>convert</code> the <code>typeEqs := true</code> configuration option.</p>\n<p>However, this leads to some nasty heterogeneous equalities that feel impossible to deal with, but if you also give it the <code>transparency := .default</code> configuration option then it ends up being able to solve for these automatically (thankfully).</p>\n<p>I pushed this fix.</p>",
        "id": 374930231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689254548
    },
    {
        "content": "<p>This heuristic likely needs an adjustment, though I'm not sure in what way. One thing that would work for <code>IsLocalization.Away</code> is to allow type equalities for explicit arguments, but that's not great for <code>Fintype.card</code>. Though maybe <code>convert</code>/<code>congr!</code> is more predictable overall if it will always generate equalities between corresponding visible things.</p>",
        "id": 374932372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689254909
    },
    {
        "content": "<p>This is much more pleasant. Thanks again</p>",
        "id": 374955699,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689258821
    },
    {
        "content": "<p>I think generating equalities for explicit parameters is a good default fwiw, wysiwyg</p>",
        "id": 374957493,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689259186
    },
    {
        "content": "<p>What do you think is the cause of the final error (failed to synth instance at L307)?</p>",
        "id": 375035094,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689274984
    },
    {
        "content": "<p>This makes progress </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">IsLocalization.map_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">X.restrict</span> <span class=\"n\">U.1.openEmbedding</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">Submonoid.powers</span> <span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span> <span class=\"o\">(</span><span class=\"n\">eqToHom</span> <span class=\"n\">U.1.openEmbedding_obj_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">Scheme.</span><span class=\"bp\">Γ.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">((</span><span class=\"n\">X.restrict</span> <span class=\"n\">U.1.openEmbedding</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span>\n    <span class=\"o\">((</span><span class=\"n\">X.restrict</span> <span class=\"n\">U.1.openEmbedding</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">basicOpen</span> <span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span>\n      <span class=\"o\">(</span><span class=\"n\">eqToHom</span> <span class=\"n\">U.1.openEmbedding_obj_top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">openEmbedding</span><span class=\"o\">))))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 375036674,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689275370
    },
    {
        "content": "<p>But everything is very, very slow</p>",
        "id": 375036788,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689275400
    },
    {
        "content": "<p>My guess at the fundamental issue is that at some point we are coercing an object of <code>CommRingCat</code> to <code>CommRing</code> and back to <code>CommRingCat</code> (and back once more I think)</p>",
        "id": 375037102,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689275471
    },
    {
        "content": "<p>It was cheaper in Lean 3 to pass through the membrane between a bundled category and the type it is bundling.</p>",
        "id": 375037371,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689275542
    },
    {
        "content": "<p>I don't really care how slow it is at this point – finishing the port is absolutely the <a href=\"https://github.com/leanprover-community/mathlib4/pull/1\">#1</a> priority at this point. And then we can refactor to make it faster</p>",
        "id": 375037603,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689275596
    },
    {
        "content": "<p>Of course you should not have to wait a full hour for a declaration to compile, but look at <code>RingTheory.Kaehler</code></p>",
        "id": 375038167,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689275724
    },
    {
        "content": "<p>One sorry left. A  <code>Localization</code> instance that was previously synthesized in ml3. Terribly heart beat limits otherwise</p>",
        "id": 375113837,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689304718
    },
    {
        "content": "<p>Wow! This file is super crazy slow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">6000000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RespectsIso.ofRestrict_morphismRestrict_iff</span>\n</code></pre></div>\n<p>Mad respect for <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> that he's able to close some <code>sorry</code>s on this branch!</p>",
        "id": 375132411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689314465
    },
    {
        "content": "<p>I thought I had a pretty good desktop machine. But it is completely impossible for me to work on this file...</p>",
        "id": 375135719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689315843
    },
    {
        "content": "<p>Yeah it's not a file you work on, it's a file you profile</p>",
        "id": 375138676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689316852
    },
    {
        "content": "<p>To be fair, that particular declaration predates me touching the file. <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>  handled that. </p>\n<p>Apple’s new chips very much help with the pain.</p>",
        "id": 375208539,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689331609
    },
    {
        "content": "<p>I tried inspecting the the full term for the last sorried goal with <code>pp.all</code> but I never got <code>lake build &gt; log</code> to return</p>",
        "id": 375208898,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689331691
    },
    {
        "content": "<p>Well it did return but I didn't pipe it correctly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> With <code>pp.explicit</code> I generate a 407M text file</p>",
        "id": 375269514,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689342335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.235663/near/374957493\">said</a>:</p>\n<blockquote>\n<p>I think generating equalities for explicit parameters is a good default fwiw, wysiwyg</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5900\">#5900</a> tries this out for a spin, and it seems to work out fine. There was only one place I had to adjust how deep <code>convert</code> went, and that's because it refused to try doing congruence on <code>(X ≃ Y) = (X' ≃ Y')</code> since it didn't think <code>X = X'</code> or <code>Y = Y'</code> were plausibly provable. But, these are explicit arguments to <code>Equiv</code>, so now it goes on ahead.</p>",
        "id": 375337278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689355334
    },
    {
        "content": "<p>This builds (on my machine though I would hope in CI by the end of the day). We did set a new <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> record: <code>13000000</code></p>",
        "id": 375383334,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689366888
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5913\">#5913</a> finishes AG</p>",
        "id": 375383468,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689366937
    },
    {
        "content": "<p>Awesome work!</p>",
        "id": 375462272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689404877
    },
    {
        "content": "<p>Is this now the slowest file in mathlib?</p>",
        "id": 375468669,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689407503
    },
    {
        "content": "<p>By far the slowest, I think. Although <code>Kaehler</code> is also pretty bad.</p>",
        "id": 375470042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689407947
    },
    {
        "content": "<p>I have a (forward-port) PR open against kaehler (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5879\">#5879</a>) that I thought would help, but I couldn't work out how to read <code>!bench</code> output</p>",
        "id": 375477235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689410139
    }
]