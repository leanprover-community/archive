[
    {
        "content": "<p>Could I ask an instance search whisperer to take a look at the timeouts  in <code>isUniformOne</code>?  I don't understand well enough why Lean 4 goes off the rails for things that used to work in Lean 3...</p>",
        "id": 338746504,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677649284
    },
    {
        "content": "<p>If we look at the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ñ∂</span> <span class=\"mi\">253</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">253</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.99455</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.99457</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the problem here seems to be the the parameter <code>[inst‚úù : DecidablePred p]</code> to <code>Finset.card_filter_le</code>: Lean tries to find an instance for <code>DecidablePred</code> without having figured out what <code>p</code> is supposed to be. You can see this from the metavariable <code>?m.99457 a</code> instead of the actual predicate <code>(fun uv =&gt; ¬¨SimpleGraph.IsUniform G 1 uv.fst uv.snd)</code>. The easiest solution I know is to fill in the predicate in the hole:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isUniformOne</span> <span class=\"o\">:</span> <span class=\"n\">P.IsUniform</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsUniform</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_le</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">card_filter_le</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">uv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬¨</span><span class=\"n\">SimpleGraph.IsUniform</span> <span class=\"n\">G</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"n\">uv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prod.snd</span> <span class=\"n\">uv</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">offDiag_card</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_left_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finpartition.is_uniform_one</span> <span class=\"n\">Finpartition.isUniformOne</span>\n</code></pre></div>",
        "id": 338810472,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1677670352
    },
    {
        "content": "<p>In Lean 3, the type of the goal helps <code>refine</code> to find a value of <code>p</code> before starting the search, apparently this doesn't happen in Lean 4. I'm not aware of another tactic that will mimic <code>refine</code> perfectly here.</p>",
        "id": 338810924,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1677670477
    },
    {
        "content": "<p>Thanks! I‚Äôd have understood a type inference error here, but this error confused me.</p>",
        "id": 338882726,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677686239
    },
    {
        "content": "<p>Is there a trick in Lean 3 to see how it's filling in the type holes?</p>",
        "id": 338920910,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677695055
    },
    {
        "content": "<p>either <code>#print is_uniform_one</code> or <code>show_term { &lt;tactic&gt; }</code> print (parts of) produced terms. You might need to set <code>set_option pp.implicit true</code> to see the information you want.</p>",
        "id": 338941766,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677700509
    }
]