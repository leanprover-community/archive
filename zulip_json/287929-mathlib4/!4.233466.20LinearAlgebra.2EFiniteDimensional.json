[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3466\">!4#3466</a> (<code>LinearAlgebra.FiniteDimensional</code>) has been opened. It's quite a tough cookie, so feel free to commit anything that solves at least one of the remaining 90 errors</p>",
        "id": 350314391,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681651079
    },
    {
        "content": "<p>I pushed some partial fixes</p>",
        "id": 350317314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681652319
    },
    {
        "content": "<p>It seems that a lot of <code>PUnit</code>s now need to be <code>PUnit.{u+1}</code></p>",
        "id": 350317334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681652333
    },
    {
        "content": "<p>I pushed some more fixes to LinearAlgebra.FiniteDimensional. There's still a bit more to do!</p>",
        "id": 352214943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682328663
    },
    {
        "content": "<p>I'm now stuck at a goal that is <code>Module.rank F { x // x ∈ ⊥ } = Module.rank F { x // x ∈ ⊥ }</code>. If I use <code>sorry</code> then the tactic state is happy but the kernel times out. If it dare try <code>refl</code> then that times out too</p>",
        "id": 352224738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682330852
    },
    {
        "content": "<p>One possible idea is that switching to flat structures for subalgebra/submodule (like we did in Lean 3) would help here</p>",
        "id": 352224976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682330906
    },
    {
        "content": "<p>I bumped up the timeout and now the proof is ok</p>",
        "id": 352229651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682332048
    },
    {
        "content": "<p>The lemma takes 1.39s in Lean 3, <del>I don't know how to get a total time in Lean 4</del> 21s in Lean 4</p>",
        "id": 352230846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682332346
    },
    {
        "content": "<p>You can use <code>trace.profiler</code> and look at the root node</p>",
        "id": 352232310,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682332770
    },
    {
        "content": "<p>Finished!</p>",
        "id": 352232312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682332770
    },
    {
        "content": "<p>Could we just drop all the <code>-- Porting note: gets around lean4#2074</code>? They are just noise at this point, making it harder to review the real porting notes.</p>",
        "id": 352232847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682332911
    },
    {
        "content": "<p>I pushed a possibly controversial commit that removed a hack in favor of bumping a timeout</p>",
        "id": 352239287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682334565
    },
    {
        "content": "<p>The downside is one lemma is now 100x slower (instead of 15x) than it was in Lean 3</p>",
        "id": 352239534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682334633
    },
    {
        "content": "<p>On the other hand, I'm worried that continuing to add ad-hoc instances to speedup TC search in one specific place at at a time is just going to slow down TC search globally and make TC search harder to predict.</p>",
        "id": 352239804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682334719
    },
    {
        "content": "<p>Maybe we could leave in place a comment explaining the instances that would speed it up, just as a breadcrumb.</p>",
        "id": 352246076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682336421
    },
    {
        "content": "<p>That sounds like a good compromise</p>",
        "id": 352246439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682336514
    }
]