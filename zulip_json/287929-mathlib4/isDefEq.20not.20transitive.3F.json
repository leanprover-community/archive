[
    {
        "content": "<p>Here's something strange: defeq is apparently not transitive at reducible transparency. Is this a known caveat, or is something odd about the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n<span class=\"sd\">/-- Check that the types of two fvars in the context are defeq at reducible transparency. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">checkDefEq</span><span class=\"o\">)</span> <span class=\"s2\">\"check_defEq \"</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">check_defEq</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">getFVarId</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">getFVarId</span> <span class=\"n\">y</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withReducible</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">y.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"{(← x.getDecl).type} and {(← y.getDecl).type} are not defeq\"</span>\n\n<span class=\"c1\">-- Transitivity doesn't hold:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"c1\">-- 0 = x and 1 - 1 = x are not defeq</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>You'll notice that this imports <code>Mathlib.Data.List.Basic</code>. If I weaken it to <code>Mathlib.Data.Init.Core</code>, the problem goes away. I'm still trying to locate the offending import. Whatever it is, it's something to do with instances—there's no issue at <code>.instances</code> transparency.</p>",
        "id": 327881064,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676411675
    },
    {
        "content": "<p>My guess is <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a></p>",
        "id": 327881330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676411776
    },
    {
        "content": "<p>But in general defeq-as-judged-by-the-kernel isn't transitive</p>",
        "id": 327881373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676411793
    },
    {
        "content": "<p>That's odd. Shouldn't it be?</p>",
        "id": 327881508,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676411867
    },
    {
        "content": "<p>My memory is that this is the thing that Coq people complain about; Lean makes a set of choices that makes perfect defeq checking intractible (or something). It turns out we hardly ever care.</p>",
        "id": 327881624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676411907
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/subject.20reduction\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/subject.20reduction</a> for an in-depth discussion</p>",
        "id": 327882058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676412078
    },
    {
        "content": "<p>ah, that thread will be very informative, thanks!</p>",
        "id": 327882302,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676412164
    },
    {
        "content": "<p>I don't think this example has anything to do with that though, this is a really basic transitivity failure</p>",
        "id": 327888678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676414896
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> posted another basic example a while ago.<br>\nOver here: <a href=\"#narrow/stream/270676-lean4/topic/Nontransitivity.20of.20DefEq\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Nontransitivity.20of.20DefEq</a></p>",
        "id": 327920596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676434725
    },
    {
        "content": "<p>mathlib-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- Check that the types of two fvars in the context are defeq at reducible transparency. -/</span>\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">checkDefEq</span><span class=\"o\">)</span> <span class=\"s2\">\"check_defEq \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">getFVarId</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">getFVarId</span> <span class=\"n\">y</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withReducible</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">x.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">y.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"{(← x.getDecl).type} and {(← y.getDecl).type} are not defeq\"</span>\n\n<span class=\"c1\">-- Transitivity doesn't hold:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">check_defEq</span> <span class=\"n\">h₁</span> <span class=\"n\">h₃</span> <span class=\"c1\">-- 0 = x and 1 - 1 = x are not defeq</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 327925646,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676438904
    },
    {
        "content": "<p>I'm 99% sure this is a bug.  <a href=\"https://github.com/leanprover/lean4/pull/2109\">lean4#2109</a></p>",
        "id": 327926952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676439706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Is this issue blocking anything?</p>",
        "id": 327927050,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676439753
    },
    {
        "content": "<p>Luckily it’s not blocking anything at all! It just happened to come up while making a test for <code>fail_if_no_progress</code>.</p>",
        "id": 327932802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676443033
    },
    {
        "content": "<p>As a very very very hacky workaround, we could redefine <code>Zero.toOfNat0</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"n\">casesOn</span> <span class=\"o\">(⟨</span><span class=\"bp\">·</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 327933573,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676443456
    }
]