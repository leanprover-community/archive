[
    {
        "content": "<p>Here is an example of some theorem, where I was expecting that  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.finCases#doc\">docs#Lean.Elab.Tactic.finCases</a> would just do it, but it times out. In this example we have 4 numbers in ZMod 12 and I try to solve the theorem by trying out all 12^4=20736 combinations. However this didn't work and even when I increased the number of hearbeats and maxRecDepth is didn't work.</p>\n<p>Is 20736 cases really too much? Can I do something to make it faster/use less memory.<br>\n(In this particular case, the proof can be adapted to look at it mod 3 and mod4 separately of course, and  there is also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.superFactorial_dvd_vandermonde_det#doc\">docs#Nat.superFactorial_dvd_vandermonde_det</a>, which solves this completely, but the point of this example is to have many fin_cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorial.SuperFactorial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FinCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">import Mathlib.NumberTheory.Wilson</span>\n<span class=\"cm\">import Mathlib.Data.Nat.Factorial.DoubleFactorial</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">section</span> <span class=\"n\">Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_mod2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">c</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ZMod.int_cast_zmod_eq_zero_iff_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"n\">exact</span> <span class=\"n\">all_diff_mul_mod2</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">↑</span><span class=\"n\">c</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">-- too slow for the 20736 cases ?!</span>\n<span class=\"cm\">set_option maxHeartbeats 2000000</span>\n<span class=\"cm\">set_option maxRecDepth 100000</span>\n<span class=\"cm\">theorem all_diff_mul_mod12 (a b c d : ZMod 12) :</span>\n<span class=\"cm\">  (a - b) * (a - c) * (a - d) * (b - c) * (b - d) * (c - d) = 0 := by</span>\n<span class=\"cm\">  change Fin 12 at a</span>\n<span class=\"cm\">  change Fin 12 at b</span>\n<span class=\"cm\">  change Fin 12 at c</span>\n<span class=\"cm\">  change Fin 12 at d</span>\n<span class=\"cm\">  push_cast</span>\n<span class=\"cm\">  fin_cases a &lt;;&gt; fin_cases b &lt;;&gt; fin_cases c &lt;;&gt; fin_cases d &lt;;&gt; rfl</span>\n\n\n<span class=\"cm\">theorem all_diff_mul_12 (a b c d : ℤ) :</span>\n<span class=\"cm\">  ((12 : ℕ) : ℤ)  ∣ (a - b) * (a - c) * (a - d) * (b - c) * (b - d) * (c - d) := by</span>\n<span class=\"cm\">  rw [← ZMod.int_cast_zmod_eq_zero_iff_dvd]</span>\n<span class=\"cm\">  push_cast</span>\n<span class=\"cm\">  exact all_diff_mul_mod12 _ _ _ _</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- The same theorems using `Nat.superFactorial_dvd_vandermonde_det`...</span>\n\n<span class=\"c1\">-- just for fun, of course the fact that 1 divides the difference of two integers can be proved</span>\n<span class=\"c1\">-- with less effort...</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_1'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Nat.superFactorial_dvd_vandermonde_det</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.det_vandermonde</span><span class=\"o\">,</span> <span class=\"n\">Fin.prod_univ_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_2'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.superFactorial_dvd_vandermonde_det</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.det_vandermonde</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_succ</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Ioi</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.empty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Finset.empty</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_empty</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_12'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.superFactorial_dvd_vandermonde_det</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.det_vandermonde</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_succ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 401153686,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699535816
    },
    {
        "content": "<p>In Lean 3 my rule of thumb was that 20 cases was often too much :-)</p>",
        "id": 401153987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699535934
    },
    {
        "content": "<p>lean 4 <code>fin_cases</code> is a lot better than lean 3, but 20000 is still a lot</p>",
        "id": 401154262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536033
    },
    {
        "content": "<p>My guess is that the surrounding tactic infrastructure will start to get in the way at that point</p>",
        "id": 401154314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536053
    },
    {
        "content": "<p>oh wait, this is the slow implementation, the fast one was only done for <code>mod_cases</code> I guess</p>",
        "id": 401154528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 401154547,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699536134
    },
    {
        "content": "<p>I was just about to write that!</p>",
        "id": 401154593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699536150
    },
    {
        "content": "<p>(I used <code>count_heartbeats in</code>; without the heartbeats bump, it times out.)</p>",
        "id": 401154654,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699536179
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">all_diff_mul_mod4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">c</span>\n  <span class=\"n\">change</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">d</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Another datapoint: this gives<br>\n<code>Used 30237 heartbeats, which is less than the current maximum of 200000.</code><br>\nfor the 4^4=256 cases...</p>",
        "id": 401154785,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699536224
    },
    {
        "content": "<p>Generally, it seems that <code>decide</code> works reasonably well on statements quantified over elements of not-too-large residue class rings of the integers.</p>",
        "id": 401154826,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699536239
    },
    {
        "content": "<p>ok, lesson learned <code>decide</code> is faster then <code>fin_cases</code>...</p>",
        "id": 401154892,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699536251
    },
    {
        "content": "<p>I learned that lesson in the same way quite some time ago! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 401154948,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699536277
    },
    {
        "content": "<p>I'm not sure this is a general rule, it depends on the computation you want to do being efficiently kernel-computable</p>",
        "id": 401154978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536289
    },
    {
        "content": "<p>for multiplying Fin values this is probably fine</p>",
        "id": 401155023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536307
    },
    {
        "content": "<p>(Back then with <code>∀ (a b c : ZMod 8) : a^2 + b^2 + c^2 ≠ 7</code>.)</p>",
        "id": 401155112,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699536336
    },
    {
        "content": "<p>but <code>fin_cases</code> has a really bad implementation right now, I intended to fix it a while ago but apparently that didn't happen</p>",
        "id": 401155161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536358
    },
    {
        "content": "<p>what's bad about it?<br>\n (perhaps I can help in fixing it?!)</p>",
        "id": 401155282,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699536395
    },
    {
        "content": "<p>it needs to be specialized for <code>Fin</code> instead of just kernel-computing a proof of <code>Fintype (Fin n)</code> to a literal</p>",
        "id": 401155403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536443
    },
    {
        "content": "<p>Compare it with <code>mod_cases</code></p>",
        "id": 401155460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699536465
    },
    {
        "content": "<p>In the concrete example, it may be better to do it mod 3 and mod 4 (fast with <code>decide</code>) and then use the Chinese Remainder Theorem.</p>",
        "id": 401162187,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699538673
    },
    {
        "content": "<p>yeah, as I said, I did this also and for that approach even <code>fin_cases</code> is fast enough. I guess the best approach is to use the theorem that states it for every <code>n</code>...</p>",
        "id": 401162638,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699538819
    },
    {
        "content": "<p>yes please, don't brute force a theorem that you can prove for general <code>n</code>!</p>",
        "id": 401163408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699539026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/fin_cases.20slow.3F!/near/401155460\">said</a>:</p>\n<blockquote>\n<p>Compare it with <code>mod_cases</code></p>\n</blockquote>\n<p>I tried to write a <code>fin_cases'</code> tactic that specializes for <code>Fin</code> that copies pretty much what <code>mod_cases</code> does.<br>\nHere is the WIP:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/commit/0bc9d97a363beb3d3485f094793a37f41f27ddda\">https://github.com/leanprover-community/mathlib4/commit/0bc9d97a363beb3d3485f094793a37f41f27ddda</a></p>\n<p>An example that uses this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FinCases2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fin_cases'</span> <span class=\"n\">x</span> <span class=\"n\">inFin</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">h0</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Fin.ext</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Fin.ext</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">h2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Fin.ext</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>There are (at least) two problems currently with this:</p>\n<ol>\n<li>Right now one needs to provide <code>n</code>, so write <code>fin_cases' x inFin 3', but 'x : Fin 3', so the tactic should be able to infer the </code>3<code> and we wouldn't need the silly </code>inFin`.</li>\n<li>Currenly <code>fin_cases x inFin 3' produces hypothesis of the form  </code>↑x = 0<code>, </code>↑x = 1<code>, and </code>↑x = 2<code>, casting to </code>ℕ<code>, but of course it would be nicer just to have equalities in </code>Fin 3<code>: </code>x = 0<code>, </code>x = 1<code>, and </code>x = 2`.</li>\n</ol>\n<p>Any tips on how to best fix either of these problems? </p>\n<p>Once this works as intented, I want so compare how it performs compared to the normal <code>fin_cases</code> tactic.</p>",
        "id": 401994946,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699971139
    }
]