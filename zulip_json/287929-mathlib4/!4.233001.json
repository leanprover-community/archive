[
    {
        "content": "<p>This PR is almost ready but few problems are left that I do not know how to solve. </p>\n<p>A first not-blocking issue is on line <a href=\"https://github.com/leanprover-community/mathlib4/blob/a31ab3b8f6e673c903078a7739ddf90edda21f74/Mathlib/Algebra/DirectSum/Decomposition.lean#L96\">96</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">AddSubmonoid.sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℳ'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here, it is necessary to use the <code>@</code> version of the function even though no implicit argument is provided otherwise it fails. I guess that is not really a problem and I just left a porting note. </p>\n<p>The real problems  are later on in the file. </p>\n<ul>\n<li>Line <a href=\"https://github.com/leanprover-community/mathlib4/blob/a31ab3b8f6e673c903078a7739ddf90edda21f74/Mathlib/Algebra/DirectSum/Decomposition.lean#L133\">133</a>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps (config := { fullyApplied := false })]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decomposeAddEquiv</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℳ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddEquiv.symm</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">decompose</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"k\">with</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">DirectSum.coeAddMonoidHom</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">direct_sum.decompose_add_equiv</span> <span class=\"n\">DirectSum.decomposeAddEquiv</span>\n</code></pre></div>\n<p>The <code>simps</code> is causing a <code>maximum recursion depth has been reached</code> error. Changing <code>simps</code> to <code>simps!</code> as suggested by lint does not fix the problem. Commenting out the <code>simps</code> does fix the error but it is probably not the right solution. </p>\n<ul>\n<li>Lines <a href=\"https://github.com/leanprover-community/mathlib4/blob/a31ab3b8f6e673c903078a7739ddf90edda21f74/Mathlib/Algebra/DirectSum/Decomposition.lean#L233\">233 -242</a>: </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps (config := { fullyApplied := false })]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decomposeLinearEquiv</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ℳ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearEquiv.symm</span>\n    <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">decomposeAddEquiv</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"k\">with</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">DirectSum.coeLinearMap</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">direct_sum.decompose_linear_equiv</span> <span class=\"n\">DirectSum.decomposeLinearEquiv</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">decompose_smul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decompose</span> <span class=\"n\">ℳ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">decompose</span> <span class=\"n\">ℳ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_smul</span> <span class=\"o\">(</span><span class=\"n\">decomposeLinearEquiv</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">direct_sum.decompose_smul</span> <span class=\"n\">DirectSum.decompose_smul</span>\n</code></pre></div>\n<p>There the errors are multiple <code>timeout at 'whnf'</code> and <code>timeout at 'isDefEq'</code>. Changing the heartbeats to any reasonable value does not fix the problem. The first error  for the second lemma <code>decompose_smul</code> actually happens during the statement and is quite confusing: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">decompose</span> <span class=\"n\">ℳ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℳ</span> <span class=\"n\">i</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.202504</span> <span class=\"bp\">?</span><span class=\"n\">u.202498</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℳ</span> <span class=\"n\">i</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.202504</span> <span class=\"bp\">?</span><span class=\"n\">u.202498</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344301190,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679672147
    },
    {
        "content": "<p>if you turn on pp.all is there any difference?</p>",
        "id": 344305768,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679673129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233001/near/344305768\">said</a>:</p>\n<blockquote>\n<p>if you turn on pp.all is there any difference?</p>\n</blockquote>\n<p>I am guessing you are interested in the last error I mentioned. It becomes now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">FunLike.coe.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">Equiv.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">Subtype.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span>\n              <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"n\">M</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n            <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"bp\">@</span><span class=\"n\">Subtype.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span>\n                  <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n            <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Equiv.instFunLikeEquiv.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">Subtype.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span>\n              <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DirectSum.decompose.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁴</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">ℳ</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.toSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulWithZero.toSMulZeroClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulActionWithZero.toSMulWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Module.toMulActionWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n      <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">Subtype.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span>\n              <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.toSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulWithZero.toSMulZeroClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulActionWithZero.toSMulWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Module.toMulActionWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n      <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">@</span><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">ι</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">@</span><span class=\"n\">Subtype.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SetLike.instMembership.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span>\n              <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.setLike.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Submodule.addSubmonoidClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.toSMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SMulWithZero.toSMulZeroClass.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulActionWithZero.toSMulWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toMonoidWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Module.toMulActionWithZero.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.202439</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n      <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.202442</span> <span class=\"bp\">?</span><span class=\"n\">u.202436</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344307152,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679673437
    },
    {
        "content": "<p>I fail to see a difference  between the type and the expected type (but I guess it is easy to miss if it is a small one).</p>",
        "id": 344307445,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679673501
    },
    {
        "content": "<p>Those types are identical according to my diff tool</p>",
        "id": 344307770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679673589
    },
    {
        "content": "<p>Is this one timing out also?</p>",
        "id": 344309255,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679673912
    },
    {
        "content": "<p>Yes, there is another error for this line: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">HSMul</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">ℳ</span> <span class=\"n\">i</span> <span class=\"o\">})</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.204299</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344309813,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679674019
    }
]