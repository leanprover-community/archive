[
    {
        "content": "<p>Does <a href=\"https://leanprover.github.io/reference/other_commands.html?highlight=parameter#sections\">parameter</a> exist in Lean4? So far I have replaced those with <code>variable</code> but I get the feeling it is not a perfect replacement.</p>",
        "id": 361119207,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685034377
    },
    {
        "content": "<p>I think use of <code>parameter</code> was already deprecated in mathlib3, wasn't it?</p>",
        "id": 361139282,
        "sender_full_name": "David Loeffler",
        "timestamp": 1685039871
    },
    {
        "content": "<p>In any case, it was still used in this file. So I replaced <code>parameter</code> with <code>variable</code> and it works well except for this definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">‖</span><span class=\"n\">F.eval</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">F.derivative.eval</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>Every time, <code>T</code> is used, I have to provide the implicit arguments otherwise it fails. I fixed this by using a  local notation </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">T0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">‖</span><span class=\"n\">F.eval</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">F.derivative.eval</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span><span class=\"bp\">‖</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"T\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">T0</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but there is maybe a better way to proceed.</p>",
        "id": 361265572,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685093086
    },
    {
        "content": "<p>Why don't you just make the uninferrable implicit arguments explicit?</p>",
        "id": 361274846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685095371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234344.20NumberTheory.2EPadics.2EHensel/near/361274846\">said</a>:</p>\n<blockquote>\n<p>Why don't you just make the uninferrable implicit arguments explicit?</p>\n</blockquote>\n<p>But  then  I would have to write <code>T p F a</code> everywhere instead of <code>T</code> and  <code>T</code> is used at a <strong>lot</strong> of places. Or am I missing something...</p>",
        "id": 361276667,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1685095794
    },
    {
        "content": "<p>Do you really need to add all those implicit arguments? I would expect you need add only one.</p>",
        "id": 361284163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685097627
    },
    {
        "content": "<p>At any rate, using local notation is perfectly acceptable.</p>",
        "id": 361284265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685097654
    },
    {
        "content": "<p>The cool thing about Lean 4 is that you can also write <code>T (p := p) F a</code> whenever needed. If it's not too often, that might also be a nice strategy.</p>",
        "id": 361310953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685103903
    }
]