[
    {
        "content": "<p>I've been experimenting recently with running \"library scale\" tests of tactics. Code usable by others will come, but for now a teaser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"bp\">./</span><span class=\"n\">summary.sh</span>\n<span class=\"n\">Solved</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span><span class=\"o\">:</span>  <span class=\"mi\">18222</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">rfl</span><span class=\"o\">:</span>  <span class=\"mi\">6069</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">simp_all</span><span class=\"o\">:</span>  <span class=\"mi\">13195</span>\n<span class=\"n\">Solved</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">:</span>  <span class=\"mi\">14491</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">aesop</span><span class=\"o\">:</span>  <span class=\"mi\">2338</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">simp_all</span><span class=\"o\">:</span>  <span class=\"mi\">12965</span>\n<span class=\"n\">Solved</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">:</span>  <span class=\"mi\">6191</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">aesop</span><span class=\"o\">:</span>  <span class=\"mi\">1164</span>\n  <span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"n\">rfl</span><span class=\"o\">:</span>  <span class=\"mi\">4665</span>\n</code></pre></div>",
        "id": 385585562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241779
    },
    {
        "content": "<p>To produce these numbers, the tool:</p>\n<ul>\n<li>wakes up after every declaration in Mathlib (with a filter, currently <code>Â¬ Name.isBlackListed</code>), and tries to synthesize a term of the given type using a specified tactic.</li>\n<li>returns either a <code>failure</code> if the tactic failed, <code>subgoals</code> if the tactic reported success but had subgoals, <code>notdefeq</code> if it closed the goal but the result was not the same as the library definition, or <code>success</code> if it reproduced the library definition. (Of course, no difference between the last two for theorems.)</li>\n<li>So for example the numbers above say that <code>by aesop</code> would solve 18222 of the declarations in the library.</li>\n<li>but only 6069 of those are not already solved by <code>by intros; rfl</code></li>\n</ul>",
        "id": 385585569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241785
    },
    {
        "content": "<p>I am curious to investigate some of the 2338 cases where <code>by intros; rfl</code> succeeds but <code>aesop</code> doesn't, or the 1164 where <code>by intros; simp_all</code> succeeds by <code>aesop</code> doesn't, but haven't looked yet. (This may be my testing setup's fault, not aesop!)</p>",
        "id": 385585575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241789
    },
    {
        "content": "<p>The goal here is to be able to evaluate and/or benchmark new tactics \"at scale\" (e.g. hammers, <code>rw_search</code>). Also to be able to automate things like running tactics against (possibly large) collections of <code>sorry</code>d statements, and report successes.</p>",
        "id": 385585586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241793
    },
    {
        "content": "<p>I'll make sure these tools are generally usable, but not quite yet. :-) The setup is pretty nice: you have the whole environment available at each declaration, and can run arbitrary code in a <code>TacticM</code> state at each declaration. I'm also most of the way to being able to do this at every intermediate tactic state, not just at the beginning of each declaration.</p>",
        "id": 385585596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241799
    },
    {
        "content": "<p>Even before there's packaged code available, does anyone have suggestions for tactics they would be curious to see run across all of Mathlib? So far I have the results for <code>aesop</code>, <code>intros; rfl</code>, <code>intros; simp_all</code>, and am running <code>exact?</code> now.</p>",
        "id": 385585605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692241802
    },
    {
        "content": "<p>what is the total number of declarations tested?</p>",
        "id": 385586650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692242373
    },
    {
        "content": "<p>also timing information would be useful, although I'm not sure how best to aggregate it</p>",
        "id": 385586829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692242467
    },
    {
        "content": "<p>This is about 150000 declarations. Good point re: timing, I will think how to save that.</p>",
        "id": 385589064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692243815
    },
    {
        "content": "<p>Would this allow also to test how much quicker/how much would break, replacing all proofs of theorems by <code>sorry</code>?</p>",
        "id": 385608255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692254881
    },
    {
        "content": "<p>No, it wouldn't help for that. My method does not actually change anything: it just gives you access to the <code>Environment</code> before and after every declaration, and lets you do something there. It doesn't persist anything you do there for later declarations.</p>",
        "id": 385609282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692255224
    },
    {
        "content": "<p>(A nice thing about this approach is that it is embarrassingly parallel.)</p>",
        "id": 385609413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692255259
    },
    {
        "content": "<p>Here is something I'd be interested in seeing: How many lemmas in the library are provable exclusively with repeated application of <code>rw</code> (and potentially <code>exact</code>) and where each rewrite lemma is found by <code>rw?</code>.</p>",
        "id": 385838561,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692341754
    },
    {
        "content": "<p>So I guess, not <code>rw_search</code> per se, but the lemmas that <code>rw_search</code> would find if it could search forever.</p>",
        "id": 385838747,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692341842
    },
    {
        "content": "<p>Great question.</p>",
        "id": 385840836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692342671
    }
]