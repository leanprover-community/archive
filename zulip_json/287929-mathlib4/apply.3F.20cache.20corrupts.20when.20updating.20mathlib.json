[
    {
        "content": "<p>As mentioned in <a href=\"#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F\">this thread</a> I'm quite sure that updating mathlib corrupts the <code>apply?</code>cache. I managed to reproduce this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">fpvandoorn</span><span class=\"bp\">/</span><span class=\"n\">LogicColloquiumTutorial.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">LogicColloquiumTutorial</span><span class=\"bp\">/</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"mi\">4</span><span class=\"n\">aa411059088049743ecd573653296d3c84ea3dc</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cp</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">code</span> <span class=\"bp\">.</span>\n</code></pre></div>\n<p>Now open <code>LCTutorial.lean</code> (or a new Lean file) and change the contents to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This should cause a panic. </p>\n<p>However, if you just make a new project with <code>lake new test math &amp;&amp; lake update &amp;&amp; lake exe cache get</code> then the same file will not panic.</p>",
        "id": 370507636,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687971753
    },
    {
        "content": "<p>Interestingly, there are two copies of <code>LibrarySearch.extra</code>, one in <code>build/lib/MathlibExtras</code> (old) and one in <code>lake-packages/mathlib/build/lib/MathlibExtras</code> (new).</p>",
        "id": 370512446,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687972676
    },
    {
        "content": "<p>Ah, this is probably due to <a href=\"https://github.com/leanprover-community/mathlib4/pull/4838\">#4838</a>, which fixed the path for the library search cache</p>",
        "id": 370515079,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687973182
    },
    {
        "content": "<p>Still annoying that an existing cache at the older location seems to take precedence for some mysterious reason</p>",
        "id": 370515670,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1687973292
    },
    {
        "content": "<p>I'm not sure that is something I can control from the <code>library_search</code> end of things... It does seem that this is a transient issue that will pass once no one is using mathlib4 pre <a href=\"https://github.com/leanprover-community/mathlib4/pull/4838\">#4838</a>.</p>",
        "id": 370594413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687993591
    },
    {
        "content": "<p>Can <code>lake exe cache unpack</code> delete the old cache?</p>",
        "id": 370598006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687995417
    },
    {
        "content": "<p>I think the main issue here is the hacky way we are resolving what project files live in</p>",
        "id": 370599516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687996290
    },
    {
        "content": "<p>If this will not be an issue for upgrading mathlib in the future (i.e. past <a href=\"https://github.com/leanprover-community/mathlib4/pull/4838\">#4838</a>), then it seems low priority to fix something like this.</p>",
        "id": 370722576,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688034852
    }
]