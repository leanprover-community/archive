[
    {
        "content": "<p>Dear All,</p>\n<p>I was confused by the behaviour below.  Lean seems to first accept something and then rejects it as <code>failed</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">--  What seems to be the culprit instance</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MonadLift</span> <span class=\"n\">Option</span> <span class=\"n\">MetaM</span>\n\n<span class=\"c1\">--attribute [-instance] Mathlib.Meta.NormNum.instMonadLiftOptionMetaM</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n  <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">default</span>  <span class=\"c1\">-- note the `return` on `some`</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">none</span>  <span class=\"c1\">--note just the `none` with no `return`</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"c1\">-- some (Lean.Expr.bvar 0)</span>\n  <span class=\"n\">ex</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"c1\">-- failed</span>\n  <span class=\"n\">ex</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I believe that the failure should have happened earlier, at the <code>none</code> with no <code>return</code>.  Unsetting the instance, Lean does indeed fail at the <code>else none</code>, complaining about a <code>type mismatch</code>.</p>\n<p>Anyway, as I do not really understand what the <code>instance</code> is doing, I am happy to leave this as is.  However, if someone is willing to explain what is going on, I would be very grateful!</p>\n<p>Thanks!</p>",
        "id": 381833737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691153659
    },
    {
        "content": "<p>The <code>none</code> here is being cast to <code>failure</code></p>",
        "id": 381835442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691153917
    },
    {
        "content": "<p>I think <code>#print ex</code> should make that more obvious</p>",
        "id": 381835503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691153935
    },
    {
        "content": "<p>Ah, ok, looking at <code>#print</code> explains what you said.  I tried replacing <code>none</code> with <code>default</code>, but then the effect is that the error <em>message</em> disappears, while the error stays.</p>\n<p>Anyway, thank you for the explanation.  I hope that I will realise more quickly, next time that I forget to write a <code>return</code> and later I get failure messages!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 381837009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691154143
    },
    {
        "content": "<p>For completeness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">ex</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def ex : Bool → MetaM (Option Expr) :=</span>\n<span class=\"cm\">fun b ↦ if b = true then pure (some default) else liftM none</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 381837272,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691154189
    }
]