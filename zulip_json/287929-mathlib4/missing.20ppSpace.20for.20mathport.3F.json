[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this is very minor, but I've noticed that <code>convert (foo)</code> gets translated as <code>convert(foo)</code> by mathport, and similarly <code>filter_upwards [foo] with bar</code> is translated as <code>filter_upwards [foo]with bar</code>. I assume this is a missing <code>ppSpace</code> somewhere? If so, where is the appropriate place to add it?</p>",
        "id": 362894102,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685658554
    },
    {
        "content": "<p>Two more whitespace bugs:</p>\n<ul>\n<li><code>rw h at h1⊢</code> (no space before <code>⊢</code>)</li>\n<li>an line with several spaces after each <code>calc</code> block.</li>\n</ul>",
        "id": 362901230,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685661830
    },
    {
        "content": "<p>I take it you haven't seen <a href=\"https://github.com/leanprover-community/mathlib4/pull/4519\">!4#4519</a> then :)</p>",
        "id": 362925144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685678481
    },
    {
        "content": "<p>I was planning to merge that immediately after the nightly bump PR, and incorporate them both in the next mathport bump</p>",
        "id": 362925409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685678669
    },
    {
        "content": "<p>Actually I'm not sure what you mean about <code>calc</code> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , I think I saw some suboptimal spacing in calc but wasn't able to get it to look the way I want without a custom formatter. Currently I believe it shows as one of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pf</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">pf</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span>\n  <span class=\"n\">a</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pf</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">pf</span>\n</code></pre></div>\n<p>depending on which form of <code>calc</code> is being used</p>",
        "id": 362926469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685679496
    },
    {
        "content": "<p>I wanted to put the <code>a</code> on the same line as the <code>calc</code> token, but it's actually parsed as a term with an optional trailing <code>:= pf</code> part (where if the proof is present then the term in question is <code>a = b</code> and if not it is <code>a</code>), so the common <code>term</code> prefix isn't actually common as far as pretty printing is concerned</p>",
        "id": 362926694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685679632
    },
    {
        "content": "<p>There is a line with indentation and no other symbols right after each <code>calc</code> block.</p>",
        "id": 362932663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685683434
    },
    {
        "content": "<p>E.g., line 88 in this file: <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Analysis/Calculus/ContDiff.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Analysis/Calculus/ContDiff.lean</a></p>",
        "id": 362932830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685683502
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2251\">lean4#2251</a></p>",
        "id": 362933759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685684002
    },
    {
        "content": "<p>I also noticed <code>split  at h</code>.</p>",
        "id": 362933997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685684124
    },
    {
        "content": "<p>you can use this to test out the lean formatter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"kd\">def</span> <span class=\"n\">fmt</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">PrettyPrinter.ppTerm</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">stx</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fmt</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362934262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685684233
    },
    {
        "content": "<p>there were a lot of spacing bugs, I fixed about 200 issues across the board (core, aesop, std, mathlib). Please check if it hasn't already been fixed, or wait for it to make it into mathport</p>",
        "id": 362934417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685684317
    }
]