[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2868\">!4#2868</a> perhaps someone could fix the remaining errors in this?</p>",
        "id": 342081326,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678892120
    },
    {
        "content": "<p>Lines 113/114 in particular look like a place where the way <code>simp</code> works in mathlib 3 is too cryptic</p>",
        "id": 342081657,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678892190
    },
    {
        "content": "<p>That was a weird one. It builds, but you'll need to fix some C's and X's in the names</p>",
        "id": 342085387,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678892924
    },
    {
        "content": "<p>hmm... yeah</p>",
        "id": 342087350,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678893355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the problem is that <code>op_apply_apply</code> appears only in one place in the mathlib3 code – the very file I'm trying to port – and has no declared lean4 equivalent. Can you search for its equivalent?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">opRingEquiv</span><span class=\"o\">,</span> <span class=\"n\">RingEquiv.trans_apply</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\">RingEquiv.op_apply_apply,-/</span>\n    <span class=\"n\">RingEquiv.toAddEquiv_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">AddEquiv.mulOp_apply</span><span class=\"o\">,</span> <span class=\"n\">AddEquiv.coe_trans</span><span class=\"o\">,</span>\n    <span class=\"n\">opAddEquiv_apply</span><span class=\"o\">,</span> <span class=\"n\">RingEquiv.coe_toAddEquiv</span><span class=\"o\">,</span> <span class=\"n\">opAddEquiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"n\">toFinsuppIso_apply</span><span class=\"o\">,</span> <span class=\"n\">toFinsupp_monomial</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidAlgebra.opRingEquiv_single</span><span class=\"o\">,</span>\n    <span class=\"n\">toFinsuppIso_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">ofFinsupp_single</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 342203043,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678933396
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.op_apply_apply\">docs#ring_equiv.op_apply_apply</a> is generated by the <code>@[simps]</code> attribute on <a href=\"https://github.com/leanprover-community/mathlib/blob/ce7e9d53d4bbc38065db3b595cd5bd73c323bc1d/src/algebra/ring/equiv.lean#L249\">this definition</a></p>",
        "id": 342203239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678933559
    },
    {
        "content": "<p>how do you search for that?</p>",
        "id": 342203377,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678933657
    },
    {
        "content": "<p>I used the <a href=\"https://leanprover-community.github.io/mathlib_docs/\">mathlib3 documentation's</a> search in the upper right corner</p>",
        "id": 342203477,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678933711
    },
    {
        "content": "<p>There's some way to get <code>@[simps]</code> to explain what it defines. Maybe <code>@[simps?]</code>? You might try doing that to the corresponding mathlib4 definition to see what it might be naming this lemma.</p>",
        "id": 342203635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678933810
    },
    {
        "content": "<p><code>@[simps]</code> is a fairly complicated metaprogram that Floris develops to generate useful boilerplate simp lemmas, and it has some differences between the mathlib3 and mathlib4 versions (though I don't know how they work well enough to say what they are)</p>",
        "id": 342203850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678933936
    },
    {
        "content": "<p><code>@[simps?]</code> shows 4 lemmas but none match exactly mathlib3 <code>ring_equiv.op_apply.apply</code></p>",
        "id": 342203948,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678934028
    },
    {
        "content": "<p>The closest one is <code>RingEquiv.op_apply_apply_unop</code> but its definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃+*</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">RingEquiv.op</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"n\">a.unop</span>\n</code></pre></div>\n<p>whereas the mathlib3 version is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">ring_equiv.op_apply_apply</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">),</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">ring_equiv.op</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">add_equiv.mul_op</span> <span class=\"n\">f.to_add_equiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">ᾰ</span>\n</code></pre></div>",
        "id": 342204283,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678934226
    },
    {
        "content": "<p>Maybe I'll ping <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> about it. Either there's some configuration we're supposed to do to get <code>@[simps]</code> to generate the right thing, or it's an interesting new test case for the implementation. (For Floris: it's for a <code>(α ≃+* β) ≃ (αᵐᵒᵖ ≃+* βᵐᵒᵖ)</code>, and the fields are structures themselves, so maybe <code>simps</code> isn't looking at expanding them?)</p>",
        "id": 342204645,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678934488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> Could you give a link to the mathlib4 version? If it's in a PR, a link to a line in a commit maybe?</p>",
        "id": 342204782,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678934565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1077/files#diff-ab2156ad6a10cf926032e42426b6188a8829d396d0397d28574ef93e4c32b58fR355\">https://github.com/leanprover-community/mathlib4/pull/1077/files#diff-ab2156ad6a10cf926032e42426b6188a8829d396d0397d28574ef93e4c32b58fR355</a></p>",
        "id": 342205008,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678934721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> see my comment on the PR</p>",
        "id": 342205368,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678934954
    },
    {
        "content": "<p>nevermind, I got the squeezed proof from <code>simp?</code> in Lean 4</p>",
        "id": 342206857,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678935932
    },
    {
        "content": "<p>The difference in the lemmas is because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a> is a definition but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite#doc\">docs4#MulOpposite</a> is a structure.</p>",
        "id": 342277719,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678964820
    },
    {
        "content": "<p>If you want the old lemma, you can do something like <code>@[simps (config := { notRecursive := [`MulOpposite] })]</code>.</p>",
        "id": 342278210,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678964971
    },
    {
        "content": "<p>You can also experiment with adding <code> `MulOpposite</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Simps/Basic.lean#L825\">here</a> to do this by default. That might be useful for other definitions in Lean 3 that got turned into structures in Lean 4.</p>",
        "id": 342303259,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678971534
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite#doc\">docs4#Opposite</a> a structure as well? (No)</p>",
        "id": 342318223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678974863
    },
    {
        "content": "<p>Why did we make this change in lean4?</p>",
        "id": 342318405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678974911
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/287929-mathlib4/topic/make.20.60MulOpposite.60.20a.20structure\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/make.20.60MulOpposite.60.20a.20structure</a></p>",
        "id": 342318791,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678974995
    },
    {
        "content": "<p>Just to clarify, I think making it a structure is good for various reasons. I'm just curious why we didn't do it for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite#doc\">docs4#Opposite</a> as well.</p>",
        "id": 342319230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678975100
    }
]