[
    {
        "content": "<p>Here is my attempt to address the issue <a href=\"https://github.com/leanprover/lean4/issues/1915\">https://github.com/leanprover/lean4/issues/1915</a> raised by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (also commented on by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>). I am posting for feedback, specifically on</p>\n<ul>\n<li>Whether the expressions generated will be compatible with those usually found in mathlib4 (so this can be imported for improved syntax).</li>\n<li>Whether this is likely to work in general.</li>\n<li>How it can be improved.</li>\n</ul>\n<p>The basic approach is to write (scoped) elaborators with higher priority that, if the desired type is known, infer arguments using this. Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Homogeneous</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Nat.instDivNat</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(((</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">homdiv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"s2\">\" / \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">hommul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">71</span> <span class=\"s2\">\" * \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">homadd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"s2\">\" + \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">homsub</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"s2\">\" - \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">hompow</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">85</span> <span class=\"s2\">\"^\"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">86</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[term_elab homdiv]</span> <span class=\"kd\">def</span> <span class=\"n\">elabDiv</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- logInfo m!\"elabDiv {stx} {expectedType?}\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n        <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HDiv.hDiv</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HDiv.hDiv</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">@[term_elab hommul]</span> <span class=\"kd\">def</span> <span class=\"n\">elabMul</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- logInfo m!\"elabMul {stx} {expectedType?}\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n        <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span>\n\n<span class=\"kd\">@[term_elab homadd]</span> <span class=\"kd\">def</span> <span class=\"n\">elabAdd</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- logInfo m!\"elabAdd {stx} {expectedType?}\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n        <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HAdd.hAdd</span>\n          <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n\n<span class=\"kd\">@[term_elab homsub]</span> <span class=\"kd\">def</span> <span class=\"n\">elabSub</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- logInfo m!\"elabSub {stx} {expectedType?}\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n        <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HSub.hSub</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HSub.hSub</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">@[term_elab hompow]</span> <span class=\"kd\">def</span> <span class=\"n\">elabPow</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- logInfo m!\"elabPow {stx} as {expectedType?}\"</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- logInfo m!\"elabPow {x} to the power {y}\"</span>\n    <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n        <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">)</span>\n        <span class=\"n\">try</span>\n          <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n          <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n        <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">y</span> <span class=\"n\">none</span>\n          <span class=\"n\">mkAppOptM</span> <span class=\"bp\">``</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Homogeneous</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Homogeneous</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eg1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">eg1</span>\n</code></pre></div>",
        "id": 347805773,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1680938341
    }
]