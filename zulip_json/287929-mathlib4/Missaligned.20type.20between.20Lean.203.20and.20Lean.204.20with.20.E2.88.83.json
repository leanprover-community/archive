[
    {
        "content": "<p>I remember reading a Zulip thread about this, but can't find it...</p>\n<p>In Lean 4, the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">signBijAux_surj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">finPairsLT</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">finPairsLT</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">signBijAux</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>is being typed as <code>{n : ℕ} {f : Perm (Fin n)} (a : (_ : Fin n) × Fin n) (a✝ : a ∈ finPairsLT n) : ∃ b, b ∈ finPairsLT n ∧ a = signBijAux f b</code> with an <code>∧</code> but previously was typed as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">fin_pairs_lt</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">fin_pairs_lt</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f.sign_bij_aux</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 337905269,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677280665
    },
    {
        "content": "<p>I assume there's a simple fix here to make the desired types align....</p>",
        "id": 337905351,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677280696
    },
    {
        "content": "<p>Writing <code> ∃</code> twice might achieve the lean 3 behavior</p>",
        "id": 337905638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677280827
    },
    {
        "content": "<p>Though I think maybe the port is intended to make us switch to the new spelling?</p>",
        "id": 337905687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677280849
    },
    {
        "content": "<p>Maybe, but there's an upstream dependency on the signature. I fixed this by typing the exact equivalent of the Lean 3 type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">signBijAux_surj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">finPairsLT</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_H</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">finPairsLT</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">signBijAux</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 337908843,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677282424
    },
    {
        "content": "<p>I usually change <code>∃ i, ∃ h : p i, _</code> to <code>∃ i, p i ∧ _</code> while porting.</p>",
        "id": 337934494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677301189
    },
    {
        "content": "<p>This sounds quite breaking, Yury. Some proofs shuffle the <code>∃</code> around.</p>",
        "id": 337943711,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677308589
    },
    {
        "content": "<p>Quite often we do this change without noticing because <code>∃ x ∈ s, p x</code> changed its meaning.</p>",
        "id": 338030906,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677342801
    },
    {
        "content": "<p>I know, and I think we should work against it, although this will of course look much uglier <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 338037875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677345761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> It doesn't really seem to be a problem in practice.</p>",
        "id": 338038197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677345953
    },
    {
        "content": "<p>If we work against it now, then we'll have to revert it back to <code>∃ x ∈ s, p x</code> later. I think that it's less work if we do it now.</p>",
        "id": 338053599,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677354464
    }
]