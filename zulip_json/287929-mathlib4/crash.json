[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2743\">!4#2743</a> I'm seeing a very mysterious crash. I have no idea what's happening. See L550.</p>\n<blockquote>\n<p>Mathlib/Algebra/Algebra/Subalgebra/Basic.lean crashed, likely due to a stack overflow or a bug.</p>\n</blockquote>",
        "id": 340593551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678365288
    },
    {
        "content": "<blockquote>\n<p>libc++abi: terminating due to uncaught exception of type lean::stack_space_exception: deep recursion was detected at 'expression equality test' (potential solution: increase stack space in your system)</p>\n</blockquote>",
        "id": 340593975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678365418
    },
    {
        "content": "<p>That file, without all the cruft:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"sd\">/-- A subalgebra is a sub(semi)ring that includes the range of `algebra_map`. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Subalgebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Subsemiring</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"n\">where</span>\n  <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"bp\">▸</span> <span class=\"n\">algebraMap_mem'</span> <span class=\"mi\">0</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"bp\">▸</span> <span class=\"n\">algebraMap_mem'</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A submodule containing `1` and closed under multiplication is a subalgebra. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toSubalgebra</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Submodule</span>\n</code></pre></div>",
        "id": 340594898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678365671
    },
    {
        "content": "<p>Can someone confirm that this is a reproducible crash?</p>",
        "id": 340594954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678365685
    },
    {
        "content": "<p>It crashes my Lean 4 on Ubuntu 20.04 with the same error.</p>",
        "id": 340599190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678366887
    },
    {
        "content": "<p>Ok, thanks for checking. Then I know it's not just my setup</p>",
        "id": 340599275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678366915
    },
    {
        "content": "<p>Aha, it's because the default arguments don't work</p>",
        "id": 340604203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678368205
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A submodule containing `1` and closed under multiplication is a subalgebra. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">toSubalgebra</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">algebraMap_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>doesn't crash</p>",
        "id": 340604252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678368224
    },
    {
        "content": "<p>It would nice if autoParam failures threw more understandable errors.</p>",
        "id": 340628403,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678373626
    },
    {
        "content": "<p>and didn't require a restart of the entire file</p>",
        "id": 340630050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678373996
    },
    {
        "content": "<p>It was autoparams which were causing panics in some category theory file which I ported recently and continually having to restart lean was indeed very frustrating.</p>",
        "id": 340637924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678375698
    },
    {
        "content": "<p>That is one of three other situations where this has arisen.</p>",
        "id": 340638650,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678375862
    },
    {
        "content": "<p>Another one from  Zulip</p>",
        "id": 340638679,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678375866
    },
    {
        "content": "<p>Also <a href=\"#narrow/stream/287929-mathlib4/topic/PANIC.20.2E.2E.2Econtains.20rhs\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/PANIC.20.2E.2E.2Econtains.20rhs</a></p>",
        "id": 340639459,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678376047
    },
    {
        "content": "<p>I had a similar situation happen just now in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2752\">!4#2752</a>. No crash but it didn't tell me the autoParam for <code>sub_eq_add_neg</code> failed.</p>",
        "id": 340640038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678376175
    },
    {
        "content": "<p>Previous ones were pinned on <code>aesop</code> but I don't think mine and Johan's are, right?</p>",
        "id": 340640185,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678376214
    },
    {
        "content": "<p>The Aesop-related errors went away when I made sure that Aesop only succeeds if it in fact solved the goal. So my hypothesis is that Lean doesn't deal well with auto-param tactics which report success but don't solve the goal.</p>",
        "id": 340648572,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678378051
    },
    {
        "content": "<p>My guess also</p>",
        "id": 340649954,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678378368
    },
    {
        "content": "<p>In my case it wasn't even a tactic. Just a default term.</p>",
        "id": 340651512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678378735
    },
    {
        "content": "<p>Same as mine but without the crash. Just a strange error.</p>",
        "id": 340651779,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678378803
    },
    {
        "content": "<p>Just encountered this error in my project without any autoparams, but it's very deep in my project and not easy to MWE :/</p>",
        "id": 342380107,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678987605
    }
]