[
    {
        "content": "<p>I wanted to check the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ClosureOperator#doc\">docs#ClosureOperator</a> , but on firefox I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ClosureOperator</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">OrderHom</span> <span class=\"o\">:</span>\n<span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"o\">[</span><span class=\"kd\">axioms</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which suppresses precisely the information I wanted to see: going to source you see that it extends <code>α →o α</code>. Is this a bug in doc-gen or is there something wrong with my set-up?</p>",
        "id": 386707884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692744605
    },
    {
        "content": "<p>Is the funny arrow an order hom? The part of doc-gen that figures out what you extend from is not based on syntax. It instead figures out the names of the stuff that the elaborator has decided the structure is extending from so there is no delaboration going on right now</p>",
        "id": 386708143,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692744744
    },
    {
        "content": "<p>I don't quite know if I can recover the two alpha parameters from the information that the elaborator hands me out trivially but that might be worth a check</p>",
        "id": 386708186,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692744778
    },
    {
        "content": "<p>Yes, funny arrow \"arrow with an o\" mean \"o-preserving map\" and o is short for order. From doc-gen I couldn't tell if it was an order-hom from alpha to alpha, or from alpha to nat or from Prop to alpha or whatever. Then you actually read the axioms and you can figure it out but somehow I was hoping it would be given to me on a plate.</p>",
        "id": 386708516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692744980
    },
    {
        "content": "<p>Right. I'll have a look whether the elaborator easily gives me information about this tomorrow. If not it'll probably take a while until I figure out how to do it</p>",
        "id": 386708585,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692745032
    },
    {
        "content": "<p>I guess after you find out <code>Bar</code> extends <code>Foo</code> you could look at the type of <code>Bar.toFoo</code>?</p>",
        "id": 386761941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692766963
    },
    {
        "content": "<p>Does lean4 still have the feature that lets you rename base class projections?</p>",
        "id": 386761958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692766980
    }
]