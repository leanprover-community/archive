[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3716\">!4#3716</a>, current line 150, this doesn't compile:<br>\n<code>letI := divisionRingOfFiniteDimensional F K</code><br>\nI checked in mathlib3 (using Gitpod on Safari – <em>finally</em>) and there is a hidden <code>↥</code> in the type of the let declaration, which is<br>\n<code>division_ring ↥K := division_ring_of_finite_dimensional F ↥K</code><br>\nThe <code>↥</code> is apparently a <code>coe_sort</code> of some kind, relating to <code>SetLike</code>, but how do I translate this to mathlib4?</p>",
        "id": 354225885,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682752542
    },
    {
        "content": "<p><code>letI := divisionRingOfFiniteDimensional F (↥K)</code> fails with the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 354226324,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682752595
    },
    {
        "content": "<p>Actually it's the same with or without the <code>↥</code></p>",
        "id": 354226475,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682752625
    },
    {
        "content": "<p>This is a recurring problem with <code>FiniteDimensional</code>; <code>have := some_finiteDimensional</code> fails, you have to use <code>have : FiniteDimensional _ _ := some_finiteDImensional</code></p>",
        "id": 354280653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682760868
    },
    {
        "content": "<p>I've pushed a fix</p>",
        "id": 354280679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682760872
    },
    {
        "content": "<p>should it be <code>haveI</code> and <code>letI</code>? why are we using those instead of <code>have/let</code>?</p>",
        "id": 354295910,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682762936
    },
    {
        "content": "<p><code>I</code> doesn't mean <code>instance</code> any more</p>",
        "id": 354300254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682763520
    },
    {
        "content": "<p>It means <code>inline</code></p>",
        "id": 354300277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682763524
    },
    {
        "content": "<p>In tactic mode, the translation is <code>{have,haveI} -&gt; haveI</code>, <code>{let, letI} -&gt; let</code>. Lean 3's term-mode <code>have</code> is lean 4's tactic <code>have</code></p>",
        "id": 354300675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682763581
    },
    {
        "content": "<p>Mathport doesn't actually do that translation, but it could</p>",
        "id": 354301106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682763631
    },
    {
        "content": "<p>I know this, but they seem to be being used like the lean3 ones here and I was wondering if that was maybe some of the issue</p>",
        "id": 354327131,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682767027
    },
    {
        "content": "<p>I think the issue is just that the instance cache gets confused by <code>FiniteDimensional</code> which is an abbreviation</p>",
        "id": 354327775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682767111
    }
]