[
    {
        "content": "<p>I am trying to port the following Rust code to Lean4.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">pub</span> <span class=\"n\">fn</span> <span class=\"n\">apply_slice_in_place</span><span class=\"bp\">&lt;</span><span class=\"n\">T</span><span class=\"bp\">&gt;</span><span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"bp\">&amp;</span><span class=\"n\">mut</span> <span class=\"o\">[</span><span class=\"n\">T</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">layer</span> <span class=\"bp\">=</span> <span class=\"n\">self.layer</span><span class=\"bp\">;</span>\n        <span class=\"n\">self.bits.chunks_exact</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">layer</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">enumerate</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">for_each</span><span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ch</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">{</span>\n            <span class=\"n\">ch.iter</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">enumerate</span><span class=\"o\">()</span><span class=\"bp\">.</span><span class=\"n\">for_each</span><span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">&amp;</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">{</span>\n                <span class=\"k\">let</span> <span class=\"n\">gap</span> <span class=\"bp\">=</span> <span class=\"n\">layer</span> <span class=\"bp\">-</span> <span class=\"n\">layer.abs_diff</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n                <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">{</span>\n                    <span class=\"k\">let</span> <span class=\"n\">pos</span><span class=\"o\">:</span> <span class=\"n\">usize</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">gap</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">gap</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n                    <span class=\"n\">a.swap</span><span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">pos</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"n\">gap</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">})</span><span class=\"bp\">;</span>\n        <span class=\"o\">})</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>Here, self is a structure with two fields, bits and layer. Bits is a bitslice of length (2^layer)<em>(2</em>layer + 1). (It's convenient to have layer pre-computed.)</p>\n<p>I've implemented this in Lean as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ControlBits</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n</code></pre></div>\n<p>Essentially the above Rust program is calculating the action of the permutation these bits define. It goes layer by layer (over Fin(2*m + 1)), and for each layer, each set of 2^m bits determines whether or not a swap happens between two specific elements.</p>\n<p>Now, I really want to build this as a member of Equiv.Perm on the appropriate type (Fin (2^(m + 1))). But I can't use a naive approach of doing this as a bigprod, because the multiplication isn't commutative. But ultimately this is built out of Equiv.Swaps (conditioned on the appropriate bits).</p>\n<p>Any suggestions? I would ideally like this to be actually computable too, though I will also want to reason about it. (This sets up a map from <code>ControlBits m</code> to <code>Equiv.Perm Fin (2^(m + 1))</code>, and there is a map from <code>Equiv.Perm Fin (2^(m + 1))</code> to <code>ControlBits m</code>: it is not a bijection but one is a section of the other (as in, starting with a permutation, going to the bits, and back to the permutation gives you the same permutation: and I would like to prove this).</p>",
        "id": 374978060,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689263021
    },
    {
        "content": "<p>Can you add some more <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 375004184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689268234
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.prod#doc\">docs#List.prod</a></p>",
        "id": 375005331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689268529
    },
    {
        "content": "<p>Ah, that'll probably work I guess! I suppose I'll need to construct the list but that should be doable.</p>",
        "id": 375018374,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689271403
    },
    {
        "content": "<p>Related to this: there are <code>n + 1</code> unique embeddings<code>Fin n ↪o Fin (n + 1)</code>, right? Do we have a way of enumerating them? In a sense I suppose what I want is a map <code>Fin (n + 1) -&gt; (Fin n ↪o Fin (n + 1))</code>.</p>",
        "id": 375209279,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689331770
    },
    {
        "content": "<p>(This is because as Eric pointed out to me, <code>Fin(2^(m+1))</code> is isomorphic to <code>Fin(m + 1) -&gt; Bool</code>, and it turns out this might be a better way of thinking about the thing I need here.)</p>",
        "id": 375209716,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689331841
    },
    {
        "content": "<p>There might be useful stuff in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimplexCategory#doc\">docs#SimplexCategory</a></p>",
        "id": 375212172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689332330
    },
    {
        "content": "<p>Essentially I think:<br>\nLet <code>s: Fin (n +1) -&gt; (Fin n ↪o Fin (n + 1))</code> be the set of embeddings from <code>Fin n</code> to  <code>Fin (n + 1)</code> indexed by, essentially, where you do the insertion.<br>\nLet <code>t : Fin(2*n + 1) -&gt; Fin (n + 1)</code> be the \"fold in half\" map which sends 0 to 0, 1 to 1, ..., n to n, n + 1 to n - 1, n + 2 to n - 2, ..., <code>2*n</code> to 0.</p>\n<p>if I define <code>ControlBits m := Fin (2*m + 1) -&gt; (Fin m -&gt; Bool) -&gt; Bool</code>, then, for a <code>c : ControlBits m</code>, for each <code>i in Fin (2*m + 1)</code>, I have a permutation<br>\n<code>p_i</code>on <code>Fin (m + 1) -&gt; Bool</code>.</p>\n<p>This is defined as follows. Take <code>k : Fin (m + 1) -&gt; Bool</code>. Define <code>(p_i)(k)(j)</code> as <code>c i (s (t i) ∘  k) ^ k (t(i))</code>. I claim this <code>p_i</code> is indeed a permutation!</p>\n<p>We then define p as the product (...((1 * p 0) * p1) * ... p_n) * p_(n+1) ) * ... *p_(2n -1)) * p_(2n). This p is the permutation that corresponds with c.</p>",
        "id": 375215190,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689332992
    },
    {
        "content": "<p>Which is quite neat. And feels like it might even have a nice representation! It's quite different from the imperative approach I take in Rust.</p>",
        "id": 375215387,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689333030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/BigProd.20permutations.20-.20implementation.20h.2E/near/375209279\">said</a>:</p>\n<blockquote>\n<p>Related to this: there are <code>n + 1</code> unique embeddings<code>Fin n ↪o Fin (n + 1)</code>, right? Do we have a way of enumerating them? In a sense I suppose what I want is a map <code>Fin (n + 1) -&gt; (Fin n ↪o Fin (n + 1))</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.succAbove#doc\">docs#Fin.succAbove</a></p>",
        "id": 375216456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689333285
    }
]