[
    {
        "content": "<p>I have no idea what's going on in this file.</p>\n<p>We have declarations <code>(f : M →ₗ[R] N)</code> but every use of <code>f</code> applied to a module gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>Nothing has changed here from Lean 3 -- is there some new thing that's required for linear maps to work?</p>\n<p>(BTW -- <code>Smodeq</code>?  <code>SMODEq</code>? )</p>",
        "id": 341210440,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678588372
    },
    {
        "content": "<p>(<code>SModEq</code> maybe?)</p>",
        "id": 341211211,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678589041
    },
    {
        "content": "<p>Something is clearly wrong here... even the definition of <code>Smodeq</code> is taking a really long time to elaborate.</p>",
        "id": 341212669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678590129
    },
    {
        "content": "<p>well, maybe it's just an issue with linear maps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>^^^ that gives the same error at <code>f m</code></p>",
        "id": 341213213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678590523
    },
    {
        "content": "<p>Can someone remind me of the name of the option for typeclass instance tracing?</p>",
        "id": 341213671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678590869
    },
    {
        "content": "<p>Well, I suppose <code>trace.Meta.synthInstance</code> is what I was looking for.</p>",
        "id": 341213811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678590980
    },
    {
        "content": "<p>Well, looks like I won't have time to actually get anywhere in looking into this problem. But I think this is something that needs to be resolved ASAP.</p>",
        "id": 341217647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678593590
    },
    {
        "content": "<p>The solution could just be as easy as adding an analogous <code>FunLike</code> instance for linear maps right next to this one<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/2941a8902b991e03a0bb57e4e5308ffc211a1439/Mathlib/Algebra/Module/LinearMap.lean#L225\">https://github.com/leanprover-community/mathlib4/blob/2941a8902b991e03a0bb57e4e5308ffc211a1439/Mathlib/Algebra/Module/LinearMap.lean#L225</a></p>",
        "id": 341217967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678593787
    },
    {
        "content": "<p>It seems like <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> was who ported the linear maps file... Anne do you have any idea what to do?</p>",
        "id": 341218202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678593967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232788.20.28LinearAlgebra.2ESmodeq.29/near/341217967\">said</a>:</p>\n<blockquote>\n<p>The solution could just be as easy as adding an analogous <code>FunLike</code> instance for linear maps right next to this one</p>\n</blockquote>\n<p>That sounds like a good idea to me</p>",
        "id": 341235802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678607556
    },
    {
        "content": "<p>The second simplest thing that could work doesn't seem to. I tried adding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">FunLike.coe_injective'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">map_add</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.map_add'</span>\n  <span class=\"n\">map_smulₛₗ</span> <span class=\"o\">:=</span> <span class=\"n\">LinearMap.map_smul'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">AddHomClass.toFunLike</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to <code>Algebra.Module.LinearMap</code></p>\n<p>and still get the errors, as well as, confusingly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.106705</span> <span class=\"n\">M</span> <span class=\"bp\">?</span><span class=\"n\">m.106698</span>\n</code></pre></div>\n<p>It's possible we also want a declaration for <code>LinearMapClass</code> for linear maps, but there's a lot of machinery there that needs someone familiar with it to assess.</p>",
        "id": 341308877,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678639944
    },
    {
        "content": "<p>What line do you get that error on?</p>",
        "id": 341309290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678640195
    },
    {
        "content": "<p><code>set_option synthInstance.etaExperiment true in</code> fixes most of the errors</p>",
        "id": 341309550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678640357
    },
    {
        "content": "<p><code>change type at hyp</code> seems to not work in that PR? The documentation for the <code>change</code> tactic says its legal though...</p>",
        "id": 341309667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678640419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232788.20.28LinearAlgebra.2ESmodeq.29/near/341309290\">said</a>:</p>\n<blockquote>\n<p>What line do you get that error on?</p>\n</blockquote>\n<p>Was every use of linear maps….</p>",
        "id": 341317623,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678644240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issues.20in.20!4.232788.20.28LinearAlgebra.2ESmodeq.29/near/341309667\">said</a>:</p>\n<blockquote>\n<p><code>change type at hyp</code> seems to not work in that PR? The documentation for the <code>change</code> tactic says its legal though...</p>\n</blockquote>\n<p>Every time I've seen that, it's been marked as unexpected syntax</p>",
        "id": 341329344,
        "sender_full_name": "Arien Malec",
        "timestamp": 1678650584
    },
    {
        "content": "<p>it's not implemented yet</p>",
        "id": 341371668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678684390
    }
]