[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seminorm.instMulAction#doc\">docs#Seminorm.instMulAction</a> has the following very unfortunate behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">27000</span> <span class=\"k\">in</span> <span class=\"c1\">-- times out otherwise</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"c1\">-- Seminorm.instMulAction</span>\n</code></pre></div>\n<p>That is, it is timing out on what I believe is the most common use case. This doesn't show up in mathlib currently because, while it's relatively close to the heartbeat limit where it occurs, not enough of mathlib is imported to push it over the limit. However, various changes can push it over (e.g., <a href=\"https://github.com/leanprover-community/mathlib4/pull/6310\">#6310</a>). So, what should we do about this? Should we add a shortcut instance for the usual case <code>R := ‚Ñù‚â•0</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Seminorm.instMulAction#doc\">docs#Seminorm.instMulAction</a> ?</p>\n<p>On a separate note, while writing down the mwe above, I came across something I don't know how to explain: adding explicit universe parameters allows us to the lower the heartbeat limit (both examples are taken to the nearest thousand). Is there a reason this should be the case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">22000</span> <span class=\"k\">in</span> <span class=\"c1\">-- times out otherwise</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"c1\">-- Seminorm.instMulAction</span>\n</code></pre></div>",
        "id": 381228791,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690995045
    },
    {
        "content": "<p>Explicit universes have been seen to speed things up during the port. As to the exact reason...</p>",
        "id": 381229819,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690995201
    },
    {
        "content": "<p>The term for <code>Function.Injective.mulAction</code> shrinks by about 25% (measured in terms of lines with <code>pp.explicit</code>) if you delete the <code>smul</code> field.</p>",
        "id": 381232310,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690995590
    },
    {
        "content": "<p>I think we should aim to replace <code>X : Type _</code> with <code>X : Type uX</code> everywhere in mathlib (or write an elaborator to do it for us)</p>",
        "id": 381237491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690996328
    },
    {
        "content": "<p>Didn't <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> do this?</p>",
        "id": 381237592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690996348
    },
    {
        "content": "<p>I agree that <code>Type _</code> should disappear (as currently functioning).</p>",
        "id": 381237810,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690996394
    },
    {
        "content": "<p>Asking Lean to waste time solving universe constraints is kinda silly when maybe 95% of the time there is nothing to solve, of which maybe 1% it introduces actual bugs</p>",
        "id": 381237938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690996417
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/function.2Ecombine/near/362309752\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/function.2Ecombine/near/362309752</a> is an elaborator for <code>Type*</code> and <code>Sort*</code> (and just a day or two ago I was trying to remember the name of <code>levelMVarToParam</code> and where I'd last used it).</p>",
        "id": 381239430,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690996702
    },
    {
        "content": "<p>I'm happy to make a PR if we think using these in mathlib is a good idea, versus using explicit universe variables or some other solution.</p>",
        "id": 381239830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690996780
    },
    {
        "content": "<p>I would be interested in seeing the benchmark results from a large-scale swap.</p>",
        "id": 381240725,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690996946
    },
    {
        "content": "<p>It'd be neat if we could have <code>Type*</code> mean <code>Type ?u</code> for some unspecified universe parameter (not an expression, but an actual parameter). That is, have a new kind of level metavariable that can only unify with level parameters or other such metavariables.  I feel like this is what I'd expect out of <code>Type*</code>, where writing <code>(X Y : Type*)</code> doesn't mean that <code>X</code> and <code>Y</code> are definitely in different universes.</p>",
        "id": 381241932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690997196
    },
    {
        "content": "<p>I don't think that's a problem we really have. The big problem is that no one wants to write out the word <code>Type u$n</code> 10 times, so falls back on <code>Type _</code></p>",
        "id": 381242321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997274
    },
    {
        "content": "<p>In the rare case where we actually do want to constrain the variables I think spelling things out the long way is fine.</p>",
        "id": 381242505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997311
    },
    {
        "content": "<p>I'm thinking about <code>variable</code> lines where some lemmas along the way are specialized to some of the types being in the same universe</p>",
        "id": 381242814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690997368
    },
    {
        "content": "<p>I think that's relatively uncommon (at least in my part of mathlib)</p>",
        "id": 381242928,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690997395
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Proving.20extentionality.20for.20a.20category.20structure\">#maths &gt; Proving extentionality for a category structure</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 381243678,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690997554
    },
    {
        "content": "<p>I'd rather see a very explicit marker on the lemma that something fishy is happening with universes</p>",
        "id": 381244498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/shortcut.20for.20.60Seminorm.2EinstMulAction.60.3F/near/381242505\">said</a>:</p>\n<blockquote>\n<p>I think spelling things out the long way is fine.</p>\n</blockquote>\n<p>When you say \"is fine\" do you mean \"is better\" or \"is acceptable\"?</p>\n<p>Haven't you ever had bunch of type arguments and you decide you want to give them explicit universe levels, and it's a little annoying to split up the binder and maybe permute some of the arguments?</p>",
        "id": 381244515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690997736
    },
    {
        "content": "<p>It's extraordinarily rare that I don't want to put all my types in different and unrelated universes</p>",
        "id": 381244654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690997764
    },
    {
        "content": "<p>The current situation is bad enough that I now instinctively want to break out <code>X ... Z : Type _</code> whenever I see it. I think a change will have noticeable effect.</p>",
        "id": 381246888,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690998277
    },
    {
        "content": "<p>So, does anyone have an answer to the first part of my question?</p>",
        "id": 381278647,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691005737
    },
    {
        "content": "<p>I took Kyle's <code>Type*</code> and tried to ruthlessly uproot <code>Type _</code> from mathlib in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a>. </p>\n<p>It had <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e6b96815-0e6d-44ba-a2c9-fa8cab7b77a9/to/81fc24a3-26f0-48a3-85d2-9df983c24ca8\">noticeable effect</a>.</p>",
        "id": 382011079,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691199985
    },
    {
        "content": "<p>Probably quite a few heart beat bumps can now be excised.</p>",
        "id": 382018913,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691203569
    },
    {
        "content": "<p>An example: I deleted both bumps in <code>RingTheory.ClassGroup</code>.</p>",
        "id": 382019015,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691203644
    },
    {
        "content": "<p>There's a lot of green there (really a lot!), but maxrss goes up by 192.3% which is a little bit surprising to me.</p>",
        "id": 382054321,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691220345
    },
    {
        "content": "<p>-1.37% wall clock!</p>",
        "id": 382055947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691220890
    },
    {
        "content": "<p>Another surprising things: Lean is working surprisingly hard on universe unification. </p>\n<p>Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> can help us interpret the results.</p>",
        "id": 382095858,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691230696
    },
    {
        "content": "<p>There are also some big outliers amongst the files.  <code>Analysis.InnerProductSpace.Basic</code> is +128.2%. These are probably our fault but I can‚Äôt explain it at the moment</p>",
        "id": 382097257,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691231014
    },
    {
        "content": "<p>It would be interesting to analyze these outliers, say with something like <code>\\time -v lake env lean --profile $FILE</code> before and after the change. I can only assume that the maxrss increase is driven by a compilation regression in one of these files. Which in itself is surprising as compilation should not really care about universes.</p>",
        "id": 382109394,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691233841
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Before </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>interpretation of <a href=\"mailto:Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.251._spec_1\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.251._spec_1</a> took 155ms<br>\nimport took 376ms<br>\ntypeclass inference of CoeFun took 105ms<br>\ntypeclass inference of CoeFun took 112ms<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 103ms<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 100ms<br>\nsimp took 163ms<br>\nsimp took 164ms<br>\nsimp took 1.55s<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 122ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 153ms<br>\ncompilation of Orthonormal.equiv took 131ms<br>\nsimp took 104ms<br>\ncompilation of innerSL took 374ms<br>\ntypeclass inference of CoeFun took 758ms<br>\ntype checking took 165ms<br>\ncompilation of innerSLFlip took 2.29s<br>\ntypeclass inference of TopologicalSpace took 118ms<br>\ntypeclass inference of AddCommMonoid took 305ms<br>\ntypeclass inference of Module took 322ms<br>\ntypeclass inference of Module took 778ms<br>\ntypeclass inference of Module took 777ms<br>\ntypeclass inference of CoeT took 398ms<br>\ntypeclass inference of CoeT took 397ms<br>\ntypeclass inference of CoeT took 398ms<br>\ntypeclass inference of CoeFun took 1.03s<br>\ntypeclass inference of TopologicalSpace took 198ms<br>\ntypeclass inference of AddCommMonoid took 368ms<br>\ntypeclass inference of Module took 447ms<br>\ntypeclass inference of CoeT took 4.75s<br>\ntype checking took 678ms<br>\nelaboration took 1.28s<br>\ntypeclass inference of CoeFun took 616ms<br>\ntype checking took 137ms<br>\ntypeclass inference of CoeFun took 615ms<br>\ntypeclass inference of CoeFun took 145ms<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 100ms<br>\ntypeclass inference of CoeFun took 101ms<br>\ntypeclass inference of CoeFun took 101ms<br>\nelaboration took 287ms<br>\ncumulative profiling times:<br>\n    attribute application 17.1ms<br>\n    compilation 3.12s<br>\n    compilation new 243ms<br>\n    dsimp 0.313ms<br>\n    elaboration 3.69s<br>\n    import 376ms<br>\n    initialization 14.5ms<br>\n    interpretation 3.26s<br>\n    linting 372ms<br>\n    norm_num 83ms<br>\n    parsing 70.1ms<br>\n    ring 159ms<br>\n    simp 4.38s<br>\n    tactic execution 1.62s<br>\n    type checking 2.26s<br>\n    typeclass inference 36.2s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Analysis/InnerProductSpace/Basic.lean\"<br>\n    User time (seconds): 55.37<br>\n    System time (seconds): 1.37<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:56.80<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1600640<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 90<br>\n    Minor (reclaiming a frame) page faults: 487274<br>\n    Voluntary context switches: 44<br>\n    Involuntary context switches: 411<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>After</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>interpretation of <a href=\"mailto:Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1</a> took 172ms<br>\nimport took 1.41s<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 105ms<br>\ntypeclass inference of CoeFun took 104ms<br>\ntypeclass inference of CoeFun took 101ms<br>\nsimp took 170ms<br>\nsimp took 170ms<br>\nsimp took 1.62s<br>\ncompilation of Orthonormal.equiv took 137ms<br>\nsimp took 107ms<br>\ncompilation of innerSL took 811ms<br>\ntypeclass inference of CoeFun took 270ms<br>\ntype checking took 171ms<br>\ncompilation of innerSLFlip took 3.38s<br>\ntypeclass inference of AddCommMonoid took 151ms<br>\ntypeclass inference of Module took 170ms<br>\ntypeclass inference of Module took 331ms<br>\ntypeclass inference of Module took 329ms<br>\ntypeclass inference of CoeT took 139ms<br>\ntypeclass inference of AddCommMonoid took 152ms<br>\ntypeclass inference of Module took 159ms<br>\ntypeclass inference of CoeT took 134ms<br>\ntypeclass inference of CoeT took 134ms<br>\ntypeclass inference of CoeFun took 328ms<br>\ntypeclass inference of AddCommMonoid took 176ms<br>\ntypeclass inference of Module took 220ms<br>\ntypeclass inference of CoeT took 1.87s<br>\ntype checking took 635ms<br>\ncompilation of ContinuousLinearMap.toSesqForm took 75.7s<br>\nelaboration took 596ms<br>\ntypeclass inference of CoeFun took 628ms<br>\ntype checking took 144ms<br>\ntypeclass inference of CoeFun took 617ms<br>\ntypeclass inference of CoeFun took 145ms<br>\ntypeclass inference of CoeFun took 101ms<br>\ntypeclass inference of CoeFun took 102ms<br>\ntypeclass inference of CoeFun took 101ms<br>\ntypeclass inference of CoeFun took 104ms<br>\ntypeclass inference of CoeFun took 103ms<br>\nelaboration took 285ms<br>\ncumulative profiling times:<br>\n    attribute application 20.2ms<br>\n    compilation 80.4s<br>\n    compilation new 295ms<br>\n    dsimp 0.322ms<br>\n    elaboration 2.77s<br>\n    import 1.41s<br>\n    initialization 14.4ms<br>\n    interpretation 3.51s<br>\n    linting 379ms<br>\n    norm_num 85.9ms<br>\n    parsing 70.3ms<br>\n    ring 170ms<br>\n    simp 4.48s<br>\n    tactic execution 1.45s<br>\n    type checking 2.28s<br>\n    typeclass inference 27.9s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Analysis/InnerProductSpace/Basic.lean\"<br>\n    User time (seconds): 122.32<br>\n    System time (seconds): 2.96<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 2:06.54<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 13291168<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 25800<br>\n    Minor (reclaiming a frame) page faults: 1211348<br>\n    Voluntary context switches: 1707<br>\n    Involuntary context switches: 13411<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>",
        "id": 382121230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691236500
    },
    {
        "content": "<p>Key line:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>compilation<span class=\"w\"> </span>of<span class=\"w\"> </span>ContinuousLinearMap.toSesqForm<span class=\"w\"> </span>took<span class=\"w\"> </span><span class=\"m\">75</span>.7s\n</code></pre></div>",
        "id": 382121837,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691236648
    },
    {
        "content": "<p>But you can also see how the changes cut into the time for tc inference</p>",
        "id": 382123617,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691237034
    },
    {
        "content": "<p>Also a 10x maxrss increase, which matches the overall maxrss of the run. So indeed it must be the runaway compilation step.</p>",
        "id": 382125989,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691237577
    },
    {
        "content": "<p>I took a quick look, there is no <code>trace.compiler.input</code> output at all on master. Could it be that the change suddenly made the definition computable?</p>",
        "id": 382144064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691242008
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.toSesqForm#doc\">docs#ContinuousLinearMap.toSesqForm</a> claim it's currently computable? (Edit: yes)</p>",
        "id": 382146067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691242513
    },
    {
        "content": "<p>The one above it is being compiled in both versions.</p>",
        "id": 382146471,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691242611
    },
    {
        "content": "<p>Would code not get generated without a warning?</p>",
        "id": 382146704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691242661
    },
    {
        "content": "<p>The universe signatures of the two versions of the declaration are fairly different I think. Perhaps something computable is synthesized where before it wasn‚Äôt</p>",
        "id": 382147073,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691242749
    },
    {
        "content": "<p>The other <code>def</code>‚Äôs also are compiled more slowly. Just not as huge a difference</p>",
        "id": 382147418,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691242831
    },
    {
        "content": "<p>What's the new set of universes? The current one looks correct in the docs.</p>",
        "id": 382148900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691243190
    },
    {
        "content": "<p>Hmm. Let me retract that. I don‚Äôt see how this could get generalized. I am remembering other declarations I looked at</p>",
        "id": 382149148,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691243261
    },
    {
        "content": "<p>But perhaps it still possible that something computable is synthesized where it wasn‚Äôt before.</p>",
        "id": 382149899,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691243439
    },
    {
        "content": "<p>There are also other outliers. The worst of the remaining:</p>\n<ul>\n<li><code>RingTheory.Noetherian</code></li>\n<li><code>Analysis.NormedSpace.Dual</code></li>\n<li><code>Algebra.Category.ModuleCat.Monoidal.Basic</code></li>\n</ul>",
        "id": 382150757,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691243669
    },
    {
        "content": "<p>When I get a chance, I can profile them also. But that might not be for a bit</p>",
        "id": 382151069,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691243757
    },
    {
        "content": "<p>Generating code for anything with an <code>IsROrC</code> instance seems strange to me.</p>",
        "id": 382156470,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691245154
    },
    {
        "content": "<p><code>RingTheory.Noetherian</code> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Before</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import took 298ms<br>\ndsimp took 231ms<br>\ndsimp took 230ms<br>\ninterpretation of Std.Tactic.Ext._aux_Std_Tactic_Ext___elabRules_Std_Tactic_Ext_tacticExt___:__1 took 122ms<br>\ninterpretation of Std.Tactic._aux_Std_Tactic_RCases___elabRules_Std_Tactic_rcases_1 took 393ms<br>\ntype checking took 108ms<br>\nelaboration took 11.3s<br>\ncumulative profiling times:<br>\n    attribute application 2.04ms<br>\n    compilation 1.32ms<br>\n    compilation new 3.46ms<br>\n    dsimp 518ms<br>\n    elaboration 11.6s<br>\n    import 298ms<br>\n    initialization 14.2ms<br>\n    interpretation 1.65s<br>\n    linting 150ms<br>\n    norm_num 4.29ms<br>\n    parsing 13.3ms<br>\n    ring 13.6ms<br>\n    simp 155ms<br>\n    tactic execution 361ms<br>\n    type checking 202ms<br>\n    typeclass inference 2.22s<br>\n    Command being timed: \"lake env lean --profile Mathlib/RingTheory/Noetherian.lean\"<br>\n    User time (seconds): 17.58<br>\n    System time (seconds): 0.51<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:18.14<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1109040<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 224<br>\n    Minor (reclaiming a frame) page faults: 194988<br>\n    Voluntary context switches: 321<br>\n    Involuntary context switches: 361<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>After</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import took 308ms<br>\ndsimp took 134ms<br>\ndsimp took 137ms<br>\ninterpretation of Std.Tactic.Ext._aux_Std_Tactic_Ext___elabRules_Std_Tactic_Ext_tacticExt___:__1 took 131ms<br>\ninterpretation of Std.Tactic.Ext._aux_Std_Tactic_Ext___elabRules_Std_Tactic_Ext_tacticExt___:__1 took 119ms<br>\ninterpretation of Std.Tactic._aux_Std_Tactic_RCases___elabRules_Std_Tactic_rcases_1 took 610ms<br>\ntype checking took 104ms<br>\nlinting took 3.86s<br>\nelaboration took 13.5s<br>\ncumulative profiling times:<br>\n    attribute application 2.05ms<br>\n    compilation 1.31ms<br>\n    compilation new 3.45ms<br>\n    dsimp 328ms<br>\n    elaboration 13.8s<br>\n    import 308ms<br>\n    initialization 14.1ms<br>\n    interpretation 1.94s<br>\n    linting 3.93s<br>\n    norm_num 4.2ms<br>\n    parsing 13.4ms<br>\n    ring 13.6ms<br>\n    simp 132ms<br>\n    tactic execution 440ms<br>\n    type checking 197ms<br>\n    typeclass inference 1.91s<br>\n    Command being timed: \"lake env lean --profile Mathlib/RingTheory/Noetherian.lean\"<br>\n    User time (seconds): 23.32<br>\n    System time (seconds): 0.65<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.07<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1727696<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 332<br>\n    Minor (reclaiming a frame) page faults: 236052<br>\n    Voluntary context switches: 216<br>\n    Involuntary context switches: 775<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>",
        "id": 382158743,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691245755
    },
    {
        "content": "<p><code>Algebra.Category.ModuleCat.Monoidal.Basic</code></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Before</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import took 722ms<br>\ncompilation of ModuleCat.MonoidalCategory.tensorHom took 170ms<br>\ntypeclass inference of CoeT took 215ms<br>\ntypeclass inference of CoeT took 184ms<br>\ntype checking took 162ms<br>\ncompilation of ModuleCat.MonoidalCategory.associator took 1.86s<br>\ntactic execution of Lean.Parser.Tactic.refl took 249ms<br>\ninterpretation of Mathlib.Tactic._aux_Mathlib_Tactic_Convert___elabRules_Mathlib_Tactic_convert_1 took 591ms<br>\nelaboration took 174ms<br>\ninterpretation of Mathlib.Tactic._aux_Mathlib_Tactic_Convert___elabRules_Mathlib_Tactic_convert_1 took 29.7s<br>\ntype checking took 177ms<br>\nelaboration took 739ms<br>\ncompilation of ModuleCat.MonoidalCategory.leftUnitor took 142ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 273ms<br>\nelaboration took 105ms<br>\ncompilation of ModuleCat.MonoidalCategory.rightUnitor took 339ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 172ms<br>\nelaboration took 106ms<br>\ntactic execution of Lean.Parser.Tactic.apply took 2.24s<br>\nelaboration took 1.2s<br>\ntypeclass inference of CoeT took 106ms<br>\nelaboration took 288ms<br>\ntypeclass inference of CoeT took 138ms<br>\ntypeclass inference of CoeT took 143ms<br>\nelaboration took 114ms<br>\ntypeclass inference of CoeT took 101ms<br>\ntypeclass inference of CoeT took 101ms<br>\nelaboration took 115ms<br>\ncumulative profiling times:<br>\n    attribute application 4.14ms<br>\n    compilation 2.52s<br>\n    compilation new 20.8ms<br>\n    dsimp 2.01ms<br>\n    elaboration 3.26s<br>\n    import 722ms<br>\n    initialization 14.6ms<br>\n    interpretation 31s<br>\n    linting 56.1ms<br>\n    parsing 7.85ms<br>\n    simp 109ms<br>\n    tactic execution 3.72s<br>\n    type checking 760ms<br>\n    typeclass inference 7.98s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Algebra/Category/ModuleCat/Monoidal/Basic.lean\"<br>\n    User time (seconds): 49.67<br>\n    System time (seconds): 1.08<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:51.18<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1353632<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 5732<br>\n    Minor (reclaiming a frame) page faults: 178011<br>\n    Voluntary context switches: 661<br>\n    Involuntary context switches: 6428<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>After</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import took 603ms<br>\ncompilation of ModuleCat.MonoidalCategory.tensorHom took 173ms<br>\ntypeclass inference of CoeT took 199ms<br>\ntypeclass inference of CoeT took 175ms<br>\ntype checking took 153ms<br>\ncompilation of ModuleCat.MonoidalCategory.associator took 1.77s<br>\ntactic execution of Lean.Parser.Tactic.refl took 234ms<br>\ninterpretation of Mathlib.Tactic._aux_Mathlib_Tactic_Convert___elabRules_Mathlib_Tactic_convert_1 took 715ms<br>\nelaboration took 173ms<br>\ninterpretation of Mathlib.Tactic._aux_Mathlib_Tactic_Convert___elabRules_Mathlib_Tactic_convert_1 took 36s<br>\ntype checking took 3.8s<br>\nelaboration took 787ms<br>\ncompilation of ModuleCat.MonoidalCategory.leftUnitor took 141ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 271ms<br>\nelaboration took 107ms<br>\ncompilation of ModuleCat.MonoidalCategory.rightUnitor took 339ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 171ms<br>\nelaboration took 106ms<br>\ntactic execution of Lean.Parser.Tactic.apply took 2.31s<br>\nelaboration took 1.22s<br>\ntypeclass inference of CoeT took 111ms<br>\nelaboration took 297ms<br>\ntypeclass inference of CoeT took 147ms<br>\ntypeclass inference of CoeT took 151ms<br>\nelaboration took 118ms<br>\ntypeclass inference of CoeT took 101ms<br>\ntypeclass inference of CoeT took 103ms<br>\ntypeclass inference of CoeT took 102ms<br>\ntypeclass inference of CoeT took 105ms<br>\nelaboration took 120ms<br>\ntypeclass inference of CoeT took 103ms<br>\ntypeclass inference of CoeT took 104ms<br>\ntypeclass inference of CoeT took 100ms<br>\ntypeclass inference of CoeT took 101ms<br>\ntypeclass inference of CoeT took 103ms<br>\ntypeclass inference of CoeT took 103ms<br>\ntypeclass inference of CoeT took 104ms<br>\ntypeclass inference of CoeT took 106ms<br>\ntypeclass inference of CoeT took 100ms<br>\ntypeclass inference of CoeT took 102ms<br>\ntypeclass inference of CoeT took 101ms<br>\ntypeclass inference of CoeT took 105ms<br>\ntypeclass inference of CoeT took 101ms<br>\ncumulative profiling times:<br>\n    attribute application 4.61ms<br>\n    compilation 2.44s<br>\n    compilation new 22.3ms<br>\n    dsimp 2.12ms<br>\n    elaboration 3.35s<br>\n    import 603ms<br>\n    initialization 13.9ms<br>\n    interpretation 37.4s<br>\n    linting 58.2ms<br>\n    parsing 7.95ms<br>\n    simp 115ms<br>\n    tactic execution 3.79s<br>\n    type checking 4.41s<br>\n    typeclass inference 8.25s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Algebra/Category/ModuleCat/Monoidal/Basic.lean\"<br>\n    User time (seconds): 59.60<br>\n    System time (seconds): 1.45<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 1:01.39<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1558576<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 5512<br>\n    Minor (reclaiming a frame) page faults: 191001<br>\n    Voluntary context switches: 383<br>\n    Involuntary context switches: 7297<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>",
        "id": 382159477,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691245965
    },
    {
        "content": "<p><code>Analysis.NormedSpace.Dual</code></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Before</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>interpretation of <a href=\"mailto:Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.251._spec_1\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.251._spec_1</a> took 186ms<br>\nimport took 590ms<br>\ncompilation of NormedSpace.inclusionInDoubleDual took 1.39s<br>\nelaboration took 388ms<br>\nelaboration took 142ms<br>\ncompilation of NormedSpace.inclusionInDoubleDualLi took 3.18s<br>\nelaboration took 153ms<br>\ntypeclass inference of CoeT took 185ms<br>\ncumulative profiling times:<br>\n    attribute application 2.9ms<br>\n    compilation 4.62s<br>\n    compilation new 24.1ms<br>\n    dsimp 0.483ms<br>\n    elaboration 949ms<br>\n    import 590ms<br>\n    initialization 14ms<br>\n    interpretation 957ms<br>\n    linting 25.6ms<br>\n    parsing 7.16ms<br>\n    simp 169ms<br>\n    tactic execution 239ms<br>\n    type checking 249ms<br>\n    typeclass inference 2.12s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Analysis/NormedSpace/Dual.lean\"<br>\n    User time (seconds): 10.11<br>\n    System time (seconds): 0.56<br>\n    Percent of CPU this job got: 97%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.91<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 1763488<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 3868<br>\n    Minor (reclaiming a frame) page faults: 219615<br>\n    Voluntary context switches: 556<br>\n    Involuntary context switches: 2067<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>After</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>interpretation of <a href=\"mailto:Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1</a> took 168ms<br>\nimport took 902ms<br>\ncompilation of NormedSpace.inclusionInDoubleDual took 1.7s<br>\nelaboration took 167ms<br>\nelaboration took 132ms<br>\ncompilation of NormedSpace.inclusionInDoubleDualLi took 6.85s<br>\nelaboration took 156ms<br>\ntypeclass inference of CoeT took 176ms<br>\ncumulative profiling times:<br>\n    attribute application 2.89ms<br>\n    compilation 8.6s<br>\n    compilation new 24.3ms<br>\n    dsimp 0.462ms<br>\n    elaboration 668ms<br>\n    import 902ms<br>\n    initialization 14.3ms<br>\n    interpretation 960ms<br>\n    linting 25.2ms<br>\n    parsing 7.07ms<br>\n    simp 163ms<br>\n    tactic execution 230ms<br>\n    type checking 247ms<br>\n    typeclass inference 1.84s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Analysis/NormedSpace/Dual.lean\"<br>\n    User time (seconds): 13.42<br>\n    System time (seconds): 0.69<br>\n    Percent of CPU this job got: 96%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:14.64<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 2327680<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 3953<br>\n    Minor (reclaiming a frame) page faults: 256349<br>\n    Voluntary context switches: 425<br>\n    Involuntary context switches: 3514<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>",
        "id": 382159982,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691246088
    },
    {
        "content": "<p><code>Dual</code> seems closest to <code>InnerProductSpace.Basic</code>. The other two each seem different from all others</p>",
        "id": 382160775,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691246311
    },
    {
        "content": "<p>Adding <code>noncomputable</code> to <code>toSesqForm</code> on master seems to have no effect on performance in terms of heart beats. Whereas, with the universe changes, it is <del>lightning</del> quick. You can remove the maxHeartbeats bump overall (though no the synth one)</p>",
        "id": 382162692,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691246814
    },
    {
        "content": "<p>Also, replacing all <code>Type*</code> with <code>Type _</code> just in the file cuts the compilation time and maxrss</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>interpretation of <a href=\"mailto:Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1\">Lean.mkStateFromImportedEntries._at.Mathlib.Prelude.Rename.initFn._@.Mathlib.Mathport.Rename._hyg.364._spec_1</a> took 160ms<br>\nimport took 365ms<br>\ntypeclass inference of CoeFun took 101ms<br>\nsimp took 166ms<br>\nsimp took 166ms<br>\nsimp took 1.57s<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 120ms<br>\ntactic execution of Lean.Parser.Tactic.rewriteSeq took 154ms<br>\ncompilation of Orthonormal.equiv took 131ms<br>\nsimp took 103ms<br>\ncompilation of innerSL took 778ms<br>\ntypeclass inference of CoeFun took 758ms<br>\ntype checking took 166ms<br>\ncompilation of innerSLFlip took 3.23s<br>\ntypeclass inference of TopologicalSpace took 117ms<br>\ntypeclass inference of AddCommMonoid took 310ms<br>\ntypeclass inference of Module took 324ms<br>\ntypeclass inference of Module took 792ms<br>\ntypeclass inference of Module took 795ms<br>\ntypeclass inference of CoeT took 405ms<br>\ntypeclass inference of TopologicalSpace took 121ms<br>\ntypeclass inference of AddCommMonoid took 311ms<br>\ntypeclass inference of Module took 317ms<br>\ntypeclass inference of CoeT took 401ms<br>\ntypeclass inference of CoeT took 400ms<br>\ntypeclass inference of CoeFun took 1.06s<br>\ntypeclass inference of TopologicalSpace took 195ms<br>\ntypeclass inference of AddCommMonoid took 367ms<br>\ntypeclass inference of Module took 448ms<br>\ntypeclass inference of CoeT took 4.66s<br>\ntype checking took 642ms<br>\ncompilation of ContinuousLinearMap.toSesqForm took 50.2s<br>\nelaboration took 1.28s<br>\ntypeclass inference of CoeFun took 625ms<br>\ntype checking took 143ms<br>\ntypeclass inference of CoeFun took 631ms<br>\ntypeclass inference of CoeFun took 144ms<br>\nelaboration took 292ms<br>\ncumulative profiling times:<br>\n    attribute application 16.6ms<br>\n    compilation 54.7s<br>\n    compilation new 277ms<br>\n    dsimp 0.31ms<br>\n    elaboration 3.67s<br>\n    import 365ms<br>\n    initialization 14ms<br>\n    interpretation 3.27s<br>\n    linting 369ms<br>\n    norm_num 82.6ms<br>\n    parsing 66.6ms<br>\n    ring 160ms<br>\n    simp 4.39s<br>\n    tactic execution 1.6s<br>\n    type checking 2.25s<br>\n    typeclass inference 36.8s<br>\n    Command being timed: \"lake env lean --profile Mathlib/Analysis/InnerProductSpace/Basic.lean\"<br>\n    User time (seconds): 106.97<br>\n    System time (seconds): 2.06<br>\n    Percent of CPU this job got: 99%<br>\n    Elapsed (wall clock) time (h:mm:ss or m:ss): 1:49.07<br>\n    Average shared text size (kbytes): 0<br>\n    Average unshared data size (kbytes): 0<br>\n    Average stack size (kbytes): 0<br>\n    Average total size (kbytes): 0<br>\n    Maximum resident set size (kbytes): 8888080<br>\n    Average resident set size (kbytes): 0<br>\n    Major (requiring I/O) page faults: 90<br>\n    Minor (reclaiming a frame) page faults: 942795<br>\n    Voluntary context switches: 42<br>\n    Involuntary context switches: 659<br>\n    Swaps: 0<br>\n    File system inputs: 0<br>\n    File system outputs: 0<br>\n    Socket messages sent: 0<br>\n    Socket messages received: 0<br>\n    Signals delivered: 0<br>\n    Page size (bytes): 16384<br>\n    Exit status: 0</p>\n</div></div>",
        "id": 382168329,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691248244
    },
    {
        "content": "<p>It has something to do with the heartbeat timeout. Perhaps on master the timeout makes the compiler abort early, which makes the <code>noncomputable section</code> mark the definition as noncomputable. But in your PR, the compiler passes that stage without running into the timeout, and then does the actual, long compilation that does not check the timeout.</p>",
        "id": 382180117,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691251258
    },
    {
        "content": "<p>It was non computable in mathlib3.</p>",
        "id": 382183810,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691252367
    },
    {
        "content": "<p>Lean 3 was much worse at deciding computability; it could be poisoned by typeclass assumptions used only for proofs</p>",
        "id": 382187168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691253298
    },
    {
        "content": "<p>So is this a bug or a feature?</p>",
        "id": 382188158,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691253586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/shortcut.20for.20.60Seminorm.2EinstMulAction.60.3F/near/382188158\">said</a>:</p>\n<blockquote>\n<p>So is this a bug or a feature?</p>\n</blockquote>\n<p>By ‚Äúthis‚Äù, I mean that we‚Äôve made Lean so fast it thinks it should start doing other things :)</p>",
        "id": 382201355,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691258032
    },
    {
        "content": "<p>The whole file in mathlib3 was <code>noncomputable theory</code>.</p>",
        "id": 382201521,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691258079
    },
    {
        "content": "<p>Yes, removing <code>noncomputable section</code> from the start of the file on master gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ñ∂</span> <span class=\"mi\">1824</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"bp\">-</span><span class=\"mi\">1824</span><span class=\"o\">:</span><span class=\"mi\">15</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">compiler</span> <span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">TopologicalAddGroup.toUniformSpace._at.ContinuousLinearMap.toSesqForm._spec_9._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">ContinuousLinearMap.toSeminormedAddCommGroup'</span>\n</code></pre></div>",
        "id": 382205351,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691259594
    },
    {
        "content": "<p>I get the same error on the PR branch so I don't think it is generating any code despite its serious efforts</p>",
        "id": 382206711,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691260131
    },
    {
        "content": "<p>Also, <code>trace.compiler.input</code> reports nothing on the PR branch. Furthermore, it seems to short-circuit compilation of <code>toSesqForm</code> completely.</p>",
        "id": 382241036,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691280277
    },
    {
        "content": "<p>I went through and poked at all the heart beat bumps with the fix to universes. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370/files/75c10e698527ff49d7030e79455be007ba7ee379..e02809fc03252dbc2a03ee51569db0a3923bc5f6\">Here</a> is the diff between before and after</p>",
        "id": 382482647,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691378034
    },
    {
        "content": "<p>Coarse count: 65/153 bumps (counting both types) were eliminated. The majority of the those not eliminated were decreased.</p>",
        "id": 382483734,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691378570
    },
    {
        "content": "<p>About 30 out of 80 files became bump-free</p>",
        "id": 382483923,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691378660
    },
    {
        "content": "<p>If anyone wants to help interpret the diff above, I would appreciate it. Some thoughts:</p>\n<ul>\n<li>You can get some incredible speed ups. One declaration lost <code>8000000</code> heart beats.  Some in the millions were completely gone. Even million-level <code>synthInstance.maxHeartbeats</code>(almost) were wiped out. (Checkout our old friend <code>OperatorNorm</code> for fun.)</li>\n<li>Some other ones were completely inert to the change. (Though I think all increases are user-error.) </li>\n<li>It seems that <code>synthInstance.maxHeartBeats</code> were wiped at a higher rate than overall bumps. This comports with the 7.5% improvement in tc inference vs the overall 4% improvement in instructions. </li>\n</ul>\n<p>As to an explanations, I have some thoughts but nothing I can really support with hard data.</p>",
        "id": 382660362,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691420009
    },
    {
        "content": "<p>Did we track down the increased memory usage? (or did it go away)</p>",
        "id": 382668863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691421301
    },
    {
        "content": "<p>Lean was trying to compile <code>toSesqForm</code> and spending lots of resources on it. It looks like it doesn't actually build anything -- just heats up your lap. </p>\n<p>I don't know the exact reason for why it is happening. </p>\n<p>But marking it <code>noncomputable</code> explicitly short circuits it and seems fine for the current purposes</p>",
        "id": 382669481,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691421385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/shortcut.20for.20.60Seminorm.2EinstMulAction.60.3F/near/382241036\">said</a>:</p>\n<blockquote>\n<p>Also, <code>trace.compiler.input</code> reports nothing on the PR branch. Furthermore, it seems to short-circuit compilation of <code>toSesqForm</code> completely.</p>\n</blockquote>\n<p>This was weird</p>",
        "id": 382670266,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691421498
    },
    {
        "content": "<p>This thread got derailed (in a good way!), but does anyone have a suggestion for the original post in this thread?</p>",
        "id": 387364516,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693011616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2451\">lean4#2451</a> ? It times out around 15000 on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6759\">#6759</a> with <code>Type*</code></p>",
        "id": 387411986,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693045808
    }
]