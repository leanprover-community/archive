[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs4#RePred</a> that characterizes recursively enumerable sets using partial recursive functions.<br>\nDo we have a characterization of recursively enumerable sets using Turing machines as well?</p>",
        "id": 374303831,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689088809
    },
    {
        "content": "<p>We have Turing machines that compute stuff in the sense that the machine changes symbols on the tape (or stacks).<br>\nDo we also have the notion of a Turing machine that can accept or reject the input?</p>",
        "id": 374509725,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689145817
    },
    {
        "content": "<p>I don’t think so. Encoding data to TM tape is a bit more complicated than encoding to Nat, and I’m not even sure we have a notion of this encoding.</p>",
        "id": 374686523,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689180876
    },
    {
        "content": "<p>I was working for a while on a register machine formalization that could be used as an intermediary to transport results with PRFs to results with TMs. So I would be interested in helping build a notion of TM tape encodings and computability</p>",
        "id": 374687201,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689181041
    },
    {
        "content": "<p>Oh, we do have tm encodings: <a href=\"https://leanprover-community.github.io/mathlib_docs/computability/encoding.html\">https://leanprover-community.github.io/mathlib_docs/computability/encoding.html</a></p>",
        "id": 374688033,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689181232
    },
    {
        "content": "<p>Is there a reason you want to characterize RE sets in terms of TMs? I think PRFs are almost always nicer to work with, no?</p>",
        "id": 374688545,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689181344
    },
    {
        "content": "<p>I think it will be easier to connect Grammars to Turing machines than to connect Grammars to PRFs.<br>\n<a href=\"https://github.com/madvorak/chomsky\">https://github.com/madvorak/chomsky</a></p>",
        "id": 374689263,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689181511
    },
    {
        "content": "<p>Ultimately, I believe we will want to have all three versions of computability theory (TMs, PRFs, grammars) and possibly more.</p>",
        "id": 374689620,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689181607
    },
    {
        "content": "<p>Totally. When I get home I’ll push my RM stuff to a repository in case anyone wants to pick it up again.</p>",
        "id": 374689748,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689181642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/374509725\">said</a>:</p>\n<blockquote>\n<p>Do we also have the notion of a Turing machine that can accept or reject the input?</p>\n</blockquote>\n<p>We don't have this, do we?</p>",
        "id": 374690116,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689181718
    },
    {
        "content": "<p>Please, prove me wrong; it seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Language#doc\">docs#Language</a> is connected to neither PRFs nor TMs.</p>",
        "id": 374692843,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689182409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/374690116\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/374509725\">said</a>:</p>\n<blockquote>\n<p>Do we also have the notion of a Turing machine that can accept or reject the input?</p>\n</blockquote>\n<p>We don't have this, do we?</p>\n</blockquote>\n<p>well you can just leave a 0 or 1 on the tape, or depending on the situation you can also use halting/non-halting to signal acceptance</p>",
        "id": 374804242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689225251
    },
    {
        "content": "<p>Maybe it's worth adding definitions for deciders &amp; semideciders</p>",
        "id": 374810809,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689227824
    },
    {
        "content": "<p>where a decider always halts and we interpret 0/1 as reject/accept</p>",
        "id": 374810953,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689227882
    },
    {
        "content": "<p>We should definitely add semideciders. I hope the API will be in terms of a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Language#doc\">docs#Language</a> recognized by a Turing machine.</p>",
        "id": 374823434,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689231821
    },
    {
        "content": "<p>I'm not thrilled by the idea of fixing it to TMs when they are so much harder to work with formally... but having TM-specific definitions of \"turing machine decider\" and \"TM semidecider\" seems reasonable</p>",
        "id": 374972084,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689261921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/374972084\">said</a>:</p>\n<blockquote>\n<p>I'm not thrilled by the idea of fixing it to TMs</p>\n</blockquote>\n<p>Fixing what?</p>\n<p>I would like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Language#doc\">docs#Language</a> to be the central notion about which we speak in computability theory (and later also in complexity theory). Turing machines would be just one of the ways to characterize languages.</p>",
        "id": 375061460,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689282249
    },
    {
        "content": "<p>Sorry, I meant fixing (the definition of deciding/semideciding a language) to TMs</p>",
        "id": 375303293,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689347958
    },
    {
        "content": "<p>Or I guess I mean it should be in the turing machine namespace if it is specialized to TMs</p>",
        "id": 375303461,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689347997
    },
    {
        "content": "<p>It seems reasonable though to specialize the notion of deciding/semideciding a language to each computational model, since they each have differences in terms of input encoding/output decoding</p>",
        "id": 375304106,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689348114
    },
    {
        "content": "<p>and then eventually we will have constructions for turning a TM decider on L to a PRF decider on L</p>",
        "id": 375304437,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689348165
    },
    {
        "content": "<p>It sounds like we have conflated two decisions (both of which are important):<br>\n(1) What is the object we want to characterize?<br>\n(2) What is the computational model we want to use for the characterization?</p>\n<p>Possibilities for (1) include:<br>\n(a) <code>α → Prop</code> where <code>α</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Primcodable#doc\">docs#Primcodable</a><br>\n(b) <code>List α → Prop</code> where <code>α</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype#doc\">docs#Fintype</a> <br>\n  ‣  perhaps expressed as <code>Language α</code><br>\n(c) <code>ℕ → Prop</code> <br>\n  ‣  perhaps expressed as <code>Set ℕ</code></p>\n<p>Possibilities for (2) include:<br>\n(a) Partial recursive functions<br>\n(b) Turing machine variants<br>\n(c) RAM-like programs</p>\n<p>We will eventually have several versions of (1) and (2).<br>\nHowever, we should decide what is the version we want to see in top-level theorems.<br>\nThe existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs#RePred</a> suggests (1a) and (2a).<br>\nThere are not many theorems about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs#RePred</a> currently, so we can still change direction if we want to.</p>\n<p>In question (1), I have a strong preference towards (1b).<br>\nIn question (2), I don't have any significant preference.</p>\n<p>Please, let's talk about both (1) and (2) without conflating the issues.</p>",
        "id": 375326930,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689352927
    },
    {
        "content": "<p>Thank you for splitting out the issues. I'm not convinced <code>Language A</code> is the right choice for anything other than <code>TM</code> as the computational model, right?</p>\n<p>Do we have to select a version for \"top-level theorems?\" Do we want to generalize across computational models yet?</p>",
        "id": 375339505,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689355877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/375339505\">said</a>:</p>\n<blockquote>\n<p>I'm not convinced <code>Language A</code> is the right choice for anything other than <code>TM</code> as the computational model, right?</p>\n</blockquote>\n<p>I think that <code>Language α</code> is perfect for TMs, RAMs, and grammars alike!</p>",
        "id": 375394934,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689370906
    },
    {
        "content": "<p>But for PRFs you have to encode Nat as List Bool or something</p>",
        "id": 375400832,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689373554
    },
    {
        "content": "<p>Yes. Each version comes with a price.</p>\n<p>However, there is an important advantage of <code>Language</code> over other (1). In addition to the above, you can use <code>Language</code> to characterize models of computation that are not Turing complete, including those that are too weak to perform necessary encoding. If we define \"recursively enumerable\" in terms of <code>Language</code> over finite alphabet, we can make meaningful theorems like \"every regular language is recursively enumerable\" (in fact, there would be several intermediate inclusions).</p>",
        "id": 375921173,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689580654
    },
    {
        "content": "<p>It definitely makes that one definition nicer. But I'm wondering if there's a generalization of computational models that would let us use any of these definitions to characterize RE sets.</p>\n<p>Like, say you have an arbitrary computational model over some state type <code>σ</code>, and you have a set <code>s : S -&gt; Prop</code> where <code>S</code> is computably encodable in <code>σ</code> (computable encoding can be generalized). Then <code>s</code> is RE in terms of this model iff there exists a program that decides <code>s</code>.</p>\n<p>And then maybe we pick one model as the \"base\" computational model and expect these computational models to be proven equivalent to that base.</p>\n<p>That way we can characterize <code>Language</code>s as RE, or subsets of <code>Nat</code>, or whatever else we want to characterize, without having to go through a single specific definition.</p>\n<p>I don't think we have fleshed out the computational models enough at this point to make such a generalization, but I think it would be reasonable to make a RE definition in terms of <code>Language</code> and <code>TM</code>, without presenting it as \"the\" definition of recursive enumerability in mathlib.</p>",
        "id": 376076749,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689608820
    },
    {
        "content": "<p>I don't think we need to make it an exercise on abstract programming. Note that the relationship between various (1) is independent of which (2) you use.</p>\n<p>Let me illustrate my idea on a small example with some pseudocode. For simplicity, consider now only (1b) and (1c) with (2a) and (2b).</p>\n<p>We make two model-independent conversion functions for (1):<br>\n<code>SetN_of_Lang : Language Bool → Set ℕ</code><br>\n<code>Lang_of_SetN : Set ℕ → Language Bool</code><br>\nWe establish they are inverse of each other.</p>\n<p>We define these two notions manually:<br>\n<code>TmReLang : Language Bool → Prop</code> using Turing machines<br>\n<code>PrfReSetN : Set ℕ → Prop</code> using Partial recursive functions</p>\n<p>We get these two notions for free:<br>\n<code>TmReSetN : Set ℕ → Prop := TmReLang ∘ Lang_of_SetN</code><br>\n<code>PrfReLang : Language Bool → Prop := PrfReSetN ∘ SetN_of_Lang</code></p>\n<p>Now a hard work comes:<br>\n<code>∀ L, TmReLang L ↔ PrfReLang L</code></p>\n<p>Then we trivially prove:<br>\n<code>∀ S, PrfReSetN S ↔ TmReSetN S</code></p>",
        "id": 376113744,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689615038
    },
    {
        "content": "<p>The advantage becomes important when broadening our library. In order to have N versions of (1) and M versions of (2), we have to manually:</p>\n<ul>\n<li>write N conversion functions</li>\n<li>write M definitions of RE</li>\n<li>prove M implications about a computational model simulating a different computational model</li>\n</ul>\n<p>Having done that, we can easily have:</p>\n<ul>\n<li>all M*N definitions of RE</li>\n<li>all (M choose 2) theorems about equivalence of computational models (à la Church-Turing thesis)</li>\n</ul>",
        "id": 376119376,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689616372
    },
    {
        "content": "<p>PS: We don't have to flood Mathlib with all M*N definitions of RE. We can settle for those M definitions, like:<br>\n<code>TmReLang : Language Bool → Prop</code> using Turing machines<br>\n<code>PrfReSetN : Set ℕ → Prop</code> using Partial recursive functions</p>\n<p>Then the theorems will be like:<br>\n<code>∀ L, PrfReSetN (SetN_of_Lang L) ↔ TmReLang L</code></p>",
        "id": 376120675,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689616708
    },
    {
        "content": "<p>I agree completely. It seems like an apt place to have a typeclass to manage the conversions to whatever base computational model we choose. For now I'd support adding <code>TmReLang</code> without necessarily worrying about all the conversions.</p>",
        "id": 376122639,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617173
    },
    {
        "content": "<p>Unfortunately, I don't understand typeclasses enough. Nevertheless, adding <code>TmReLang</code> is the logical step to do now.</p>",
        "id": 376123147,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689617300
    },
    {
        "content": "<p>I think that as elsewhere in mathlib we should be using one definition and N equivalences, not N definitions and N^2 equivalences</p>",
        "id": 376123464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689617395
    },
    {
        "content": "<p>Would you agree with the one definition to be in terms of <code>Language Bool</code> using PRFs?</p>",
        "id": 376124455,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689617656
    },
    {
        "content": "<p>I really think it's easiest for it to be <code>Set Nat</code> with PRFs...</p>",
        "id": 376124544,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617692
    },
    {
        "content": "<p>but I haven't tried it, so am conjecturing</p>",
        "id": 376124580,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617702
    },
    {
        "content": "<p>just that the <code>Set Nat</code> definition would be a single line in today-mathlib</p>",
        "id": 376124676,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/375326930\">said</a>:</p>\n<blockquote>\n<p>It sounds like we have conflated two decisions (both of which are important):<br>\n(1) What is the object we want to characterize?<br>\n(2) What is the computational model we want to use for the characterization?</p>\n<p>Possibilities for (1) include:<br>\n(a) <code>α → Prop</code> where <code>α</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Primcodable#doc\">docs#Primcodable</a><br>\n(b) <code>List α → Prop</code> where <code>α</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype#doc\">docs#Fintype</a> <br>\n  ‣  perhaps expressed as <code>Language α</code><br>\n(c) <code>ℕ → Prop</code> <br>\n  ‣  perhaps expressed as <code>Set ℕ</code></p>\n<p>Possibilities for (2) include:<br>\n(a) Partial recursive functions<br>\n(b) Turing machine variants<br>\n(c) RAM-like programs</p>\n<p>We will eventually have several versions of (1) and (2).<br>\nHowever, we should decide what is the version we want to see in top-level theorems.<br>\nThe existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs#RePred</a> suggests (1a) and (2a).<br>\nThere are not many theorems about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs#RePred</a> currently, so we can still change direction if we want to.</p>\n<p>In question (1), I have a strong preference towards (1b).<br>\nIn question (2), I don't have any significant preference.</p>\n<p>Please, let's talk about both (1) and (2) without conflating the issues.</p>\n</blockquote>\n<p>We should return here. We want one definition. Which of them will be the one?</p>",
        "id": 376124869,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689617782
    },
    {
        "content": "<p>The reason I don't want to get into this yet is cuz we haven't proven the equivalence of TMs and PRFs yet, so if you're gonna be working in TMs there's no reason for you to introduce a definition in terms of PRFs.</p>",
        "id": 376124871,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617783
    },
    {
        "content": "<p>I'll just repeat that I have strong interest in being able to state theorems like \"every regular language is recursively enumerable\" smoothly (i.e., the theorem statement is as simple as possible (having conversion in a statement is usually not nice), even if it makes the proofs longer).</p>",
        "id": 376125344,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689617917
    },
    {
        "content": "<p>RE is a property of sets. <code>Language A = Set (List A)</code>. So long as the elements are encodable to Nat (which <code>List A</code> is for any encodable <code>A</code>, which includes any <code>FinType A</code>). So with a very slight generalization of the <code>Set Nat</code> definition it would be a very smooth theorem statement.</p>",
        "id": 376126126,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618132
    },
    {
        "content": "<p>(the generalization being to make it over <code>Set A</code> for any primcodable <code>A</code>)</p>",
        "id": 376126279,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618173
    },
    {
        "content": "<p>so I guess 1(a)/2(a)</p>",
        "id": 376126319,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618182
    },
    {
        "content": "<p>It seems that you two (James and Mario) prefer to keep <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RePred#doc\">docs#RePred</a> as the definition of RE. Then the theorem would be something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">TM</span><span class=\"o\">,</span> <span class=\"n\">M.semidecides</span> <span class=\"o\">(</span><span class=\"n\">Lang_of_Pred</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">RePred</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>Is it what you want? For the sake of not introducing new definitions?</p>",
        "id": 376127656,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689618530
    },
    {
        "content": "<p>or just <code>∀ L, (∃ M : TM, M.semidecides L) ↔ RePred L</code> since languages are already sets of primcodable objects.</p>",
        "id": 376128474,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618730
    },
    {
        "content": "<p>(possibly left-hand side Skolemized)</p>",
        "id": 376128482,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689618733
    },
    {
        "content": "<p>Now, I have no clue how we're going to prove that theorem any time soon <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> so we'll have to live with a sorry for now</p>",
        "id": 376128847,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618825
    },
    {
        "content": "<p>the forward direction is at least probably provable with sufficient effort right now</p>",
        "id": 376128997,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689618852
    },
    {
        "content": "<p>If we don't see ourselves proving equivalence between two concepts anytime soon, shouldn't we rather write two definitions?</p>",
        "id": 376132335,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689619717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/376122639\">said</a>:</p>\n<blockquote>\n<p>For now I'd support adding <code>TmReLang</code> without necessarily worrying about all the conversions.</p>\n</blockquote>\n<p>If <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> doesn't want to see two equivalent definitions in Mathlib, we should perhaps forget about <code>TmReLang</code> now and define <code>TM.semidecides</code> only.</p>",
        "id": 376138882,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689621442
    },
    {
        "content": "<p>Yeah, I think <code>\\exists M, M.semidecides L</code> is already quite clean</p>",
        "id": 376141123,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689622131
    },
    {
        "content": "<p>You mean for <code>∃ M, M.semidecides L</code> to appear in a theorem, or in a definition?</p>",
        "id": 376163159,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689627888
    },
    {
        "content": "<p>The former. But that's up to you.</p>",
        "id": 376168026,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689629719
    },
    {
        "content": "<p>If it is really up to me, I'd rather have a definition <code>TmReLang</code> wrapping it. However, I don't think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would approve.</p>",
        "id": 376171749,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689631293
    },
    {
        "content": "<p>I think in most cases you can have more precise theorems that trivially imply the desired equivalences</p>",
        "id": 376171946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689631379
    },
    {
        "content": "<p>You mean, imply in our head (an interpretation of what it means)?</p>",
        "id": 376172346,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689631525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/376138882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RePred/near/376122639\">said</a>:</p>\n<blockquote>\n<p>For now I'd support adding <code>TmReLang</code> without necessarily worrying about all the conversions.</p>\n</blockquote>\n<p>define <code>TM.semidecides</code></p>\n</blockquote>\n<p>In textbooks, there is often a definition of a TM that can accept, reject, or go on forever. The language of the TM is the set of words for which it accepts.</p>\n<p>I suppose we don't want it because it [having three behaviours] is harder for formalization. The desired definition <code>TM.semidecides</code> for Mathlib is that it either halts or goes on forever. The language of the TM is the set of words for which it halts. Do we all agree on this approach?</p>",
        "id": 376306407,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689678270
    },
    {
        "content": "<p>On the other hand, the three-way definition of semideciders has a big advantage:</p>\n<p>In this framework, a decider <em>is</em> (a special case of) a semidecider. You don't have to <em>convert</em> a decider to a semidecider by making it loop instead of rejecting a word.</p>",
        "id": 376591762,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689758932
    },
    {
        "content": "<p>Yep. I think you want a definition with three outcomes.</p>",
        "id": 376717595,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689782396
    },
    {
        "content": "<p>I think it's also probably nice to have both the \"yes-or-halt\" and \"no-or-halt\" options accessible, just because people use both pretty interchangeably</p>",
        "id": 376717903,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689782447
    },
    {
        "content": "<p>What do you mean by \"yes-or-halt\" and \"no-or-halt\" please?</p>",
        "id": 376731275,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689785201
    },
    {
        "content": "<p>err, yes-or-doesn't-halt <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> words are hard</p>",
        "id": 376731480,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689785255
    },
    {
        "content": "<p>Should I implement <code>TM.semidecides</code> as follows?</p>\n<p>When the machine halts (i.e., when <code>step</code> returns <code>none</code>), if the tape symbol under the head is <code>default Γ</code> then the word [what was written on the tape before the computation started] gets accepted (regardless of <code>Cfg.q</code> a.k.a. the state of the head). We will have a machine that can accept, reject, or go on forever.</p>",
        "id": 377257683,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689937426
    }
]