[
    {
        "content": "<p>I decided to try the steps to contribute to mathlib, and decided to play around with a toy project: implement <code>range'</code>(that is, the  natural numbers between <code>a</code>and <code>a+b</code> as <code>Multiset</code>and <code>Finset</code> (so we can have things like <code>∑ i in range' a b, f i</code> ). Now i am doubting if this kind of things are supposed to be added to Mathlib or not.</p>\n<p>Is there something like an \"official criterion\" about that?</p>",
        "id": 397967171,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698003155
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Ico#doc\">docs#Finset.Ico</a> and other intervals</p>",
        "id": 397967262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698003269
    },
    {
        "content": "<p>I guess, the most \"official\" criterion is: not a duplicate and some maintainers think it's useful.</p>",
        "id": 397967291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1698003324
    },
    {
        "content": "<p>Thanks. Although I think that  the generic<code>Finset.Ico</code> is missing some lemmas that hold specificially over the naturals (or maybe something slightly more general cases), and can be useful. Things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finset.Ico</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Would it make sense to add this kind of thing?</p>",
        "id": 397969420,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698005537
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Ico_succ_right_eq_insert_Ico#doc\">docs#Nat.Ico_succ_right_eq_insert_Ico</a> ?</p>",
        "id": 397969802,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698005981
    },
    {
        "content": "<p>In general the bar for adding new theorems to mathlib is much lower than the bar for adding new definitions; but in both cases, it can take a while to work out whether the declaration you want already exists!</p>",
        "id": 397970115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698006299
    },
    {
        "content": "<p>Note that your <code>range'</code> is <code>Ico a (a + b)</code>, not <code>Ico a b</code></p>",
        "id": 397970197,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698006377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/What.20kind.20of.20contributions.20should.20go.20to.20mathlib.3F/near/397969802\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Ico_succ_right_eq_insert_Ico#doc\">docs#Nat.Ico_succ_right_eq_insert_Ico</a> ?</p>\n</blockquote>\n<p>Didn't see that. Thanks!</p>",
        "id": 397970838,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698007190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/What.20kind.20of.20contributions.20should.20go.20to.20mathlib.3F/near/397970115\">said</a>:</p>\n<blockquote>\n<p>In general the bar for adding new theorems to mathlib is much lower than the bar for adding new definitions; but in both cases, it can take a while to work out whether the declaration you want already exists!</p>\n</blockquote>\n<p>In case of theorems, i usually try to write the statement and then try to solve it with  a tactic that searches the library (<code>apply?</code>, and/or <code>aesop</code> mostly). But apparently it is not as useful as I thought.</p>",
        "id": 397971009,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1698007373
    },
    {
        "content": "<p>Make sure when testing with <code>apply?</code> that you have imported all of Mathlib in your test file. It only reports things visible with the current imports.</p>",
        "id": 397974311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698011475
    },
    {
        "content": "<p>And asking in \"Is there code for X?\" is fine too, where Yaël, of whom <code>apply?</code> is just a lame imitiation, can usually tell you exactly where to find it.</p>",
        "id": 397974368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698011550
    }
]