[
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>The suggestions here are:<br>\n<a href=\"/user_uploads/3121/HtaWe-3lTuGnZWB5BGyzQ7la/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HtaWe-3lTuGnZWB5BGyzQ7la/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HtaWe-3lTuGnZWB5BGyzQ7la/image.png\"></a></div><p>There are three notable things about this list of suggestions: </p>\n<ul>\n<li>It has duplicates of the same lemma, eg <code>add_assoc</code> appears twice</li>\n<li>It has \"rough\" duplicates of the same lemma, eg <code>AddSemigroup.add_assoc</code>, <code>Nat.add_assoc</code>, <code>add_assoc</code></li>\n<li>It doesn't contain the rewrite <code>add_comm n m</code> which would close the goal</li>\n</ul>\n<p>Is it possible for any of these to be improved? Namely, the first problem might be resolvable by refusing to report a lemma twice; the second by checking syntactic equality of the lemmas or (more likely) deduplicating the result of the rewrite by syntactic equality.</p>\n<p>(I'm aware exact? or any other method can be used to clear this particular goal, but my actual example showed up where I did genuinely need a rewrite and rw? instead cluttered the list with a bunch of useless repeats)</p>",
        "id": 381963606,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1691178877
    },
    {
        "content": "<p>Yes, these should definitely be addressed. I completely forgot to do anything about deduplication, but the way we look up lemmas is extremely prone to it! (<code>rw?</code> actually traverses the entire expression, and looks up each subexpression in a discrimation tree for candidate lemmas.)</p>\n<p>A much better implementation of <code>rw?</code> would actually keep track of where it is in the expression, and only apply the lemmas at that subexpression! (As if in <code>conv</code>.) This would be a substantial reimplementation (and would mean that potentially it suggests <code>conv ... rw ...</code> results instead).</p>\n<p>But deduplication is easy in the meantime.</p>",
        "id": 382025493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691206705
    },
    {
        "content": "<p>Point 1. is resolved in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6746\">#6746</a></p>",
        "id": 386790772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692779504
    },
    {
        "content": "<p>Point 2. is resolved in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6749\">#6749</a></p>",
        "id": 386801340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692783119
    },
    {
        "content": "<p>Point 3, that <code>add_comm n m</code> is missing, despite closing the goal, is harder to achieve. The problem is that even <code>nth_rewrite</code> (as implemented in Mathlib 4 --- the implementation in mathlib3 solved this problem but was never ported!) will not find rewrites by different instantiations of the same lemma --- just different locations at which the first possible instantiation works.</p>",
        "id": 386801607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692783207
    },
    {
        "content": "<p>This could be fixed by providing a proper <code>nth_rewrite</code>. Now that <code>rw</code> itself is written in Lean it's easier to do well.</p>",
        "id": 386801752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692783244
    },
    {
        "content": "<p>But better would be to only rewrite subexpressions as we visit them to find rewrite lemmas.</p>",
        "id": 386801835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692783282
    },
    {
        "content": "<p>Thanks so much for this, Scott! My hope was that resolving (at least one of) 1, 2 would fix 3, but it seems from what you describe that a more principled implementation of <code>rw?</code> would be necessary?</p>",
        "id": 387335371,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692992899
    },
    {
        "content": "<p>There are multiple ways to fix 3.</p>\n<p>The good-but-not-perfect approach requires a Lean core patch to how the \"occurrences\" argument is handled that I would like to get merged. I have it working, but need to write up the motivation/docs/tests. Perhaps next week!</p>\n<p>The perfect approach requires some more work.</p>",
        "id": 387347694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000002
    },
    {
        "content": "<p>what's the patch?</p>",
        "id": 387347841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693000104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/semorrison/lean4/pull/5/files#diff-519bcbd0d6c069957197a9c0f0d7768a4bcd1ea02720905668aa08ae205cbfebR47\">https://github.com/semorrison/lean4/pull/5/files#diff-519bcbd0d6c069957197a9c0f0d7768a4bcd1ea02720905668aa08ae205cbfebR47</a></p>",
        "id": 387347978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000206
    },
    {
        "content": "<p>That diff does two things: exposes the <code>occs</code> parameter via <code>rw (config := {occs := ...})</code>, but also changes the behaviour of <code>kabstract</code>, so that \"rejected\" rewrites don't fix the values of mvars.</p>",
        "id": 387348027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000248
    },
    {
        "content": "<p>I would want to separate out these two changes before making PRs.</p>",
        "id": 387348040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000259
    },
    {
        "content": "<p>We had an implementation of this in Lean 3, but it jumped through many hoops rather than touching <code>kabstract</code>.</p>",
        "id": 387348097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000304
    },
    {
        "content": "<p>Here's something that I'd love to see, and perhaps is easy to put together out of pieces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">traverseSubexpressionsWithConvGoals</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>which:</p>\n<ul>\n<li>traverses the expression <code>e</code>, visiting every subexpression</li>\n<li>each subexpression is passed to <code>f</code>, which returns an <code>Option</code></li>\n<li><code>f</code> returns <code>none</code> if it doesn't want to touch that subexpression</li>\n<li>otherwise, it returns <code>some t</code>, where <code>t : MVarId → MetaM Unit</code> is a tactic that expects a goal of the form <code>x = ?_</code> (i.e. as in conv mode), where <code>x</code> is the current subexpression.</li>\n<li>if <code>t</code> closes that goal with <code>?_</code> unified with some <code>x'</code>, then we replace <code>x</code> with <code>x'</code> using that proof, and continue</li>\n<li>at the end, return the modified expression <code>e'</code> along with the proof <code>e' = e</code>.</li>\n</ul>",
        "id": 387348453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000562
    },
    {
        "content": "<p>(Obviously there are some restrictions about which subexpressions we can actually descend into here, based on available congruence lemmas.)</p>",
        "id": 387348521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000593
    },
    {
        "content": "<p>I think a tool like this would be generally useful, and would make my preferred implementation of <code>rw?</code> easy to do.</p>",
        "id": 387348538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000615
    },
    {
        "content": "<p>Currently <code>rw?</code> traverses all subexpressions, using them to look up from the discrimination tree relevant lemmas for rewriting. After doing that, it tries to rewrite the entire expression by <em>any</em> of these lemmas.</p>\n<p>Perhaps it should only be rewriting the subexpression that the lemmas are relevant for!</p>",
        "id": 387348608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693000669
    },
    {
        "content": "<p>Scott, I would also like the <code>traverse...</code> definition!  I was doing something similar with <code>move_add</code> and felt that besides <code>kabstract</code> and <code>replace</code> there was little support for this.</p>",
        "id": 387366578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693012578
    },
    {
        "content": "<p>Something very close to this was exposed by the simplifier in Lean 3 (which you could use separately from actually firing the simplifier at each visited location).</p>",
        "id": 387389301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693029073
    },
    {
        "content": "<p><code>Lean.Meta.Simp.simp</code> is rather close to this, actually.</p>\n<p>It has signature</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Meta.Simp.M</span> <span class=\"n\">Lean.Meta.Simp.Result</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and the monad <code>Lean.Meta.Simp.M</code> is something with read-only <code>Lean.Meta.Simp.Methods</code> and <code>Lean.Meta.Simp.Context</code>, update-able <code>Lean.Meta.State</code>, and otherwise just <code>MetaM</code>.</p>\n<p><code>Methods</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Methods</span> <span class=\"n\">where</span>\n  <span class=\"n\">pre</span>        <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">SimpM</span> <span class=\"n\">Step</span>          <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Step.visit</span> <span class=\"o\">{</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n  <span class=\"n\">post</span>       <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">SimpM</span> <span class=\"n\">Step</span>          <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Step.done</span> <span class=\"o\">{</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n  <span class=\"n\">discharge</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">SimpM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>where the <code>pre</code> and <code>post</code> functions are essentially of the form for <code>f</code> above. (Here <code>pre</code> and <code>post</code> are distinguish whether we will try to transform the subexpression before or after visiting its subexpressions.) (Here <code>Step</code> contains a flag about whether we should revisit after modifying, and otherwise is just a new <code>expr : Expr</code> along with a <code>proof? : Option Expr</code> (<code>none</code> for <code>defeq</code> modifications).</p>",
        "id": 387390289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693029900
    },
    {
        "content": "<p>So it should be possible to write what I asked for in terms of this.</p>",
        "id": 387390326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693029933
    },
    {
        "content": "<p>This is essentially the same design as <code>ext_simplify_core</code> (I think?) from Lean 3, just a bit more monadic.</p>",
        "id": 387390398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693029982
    },
    {
        "content": "<p>Zero testing, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convSubexpressions</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fail</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">SimpM</span> <span class=\"n\">Step</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">e</span> <span class=\"n\">rhs</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">fn</span> <span class=\"n\">e</span> <span class=\"n\">eq.mvarId</span><span class=\"bp\">!</span> <span class=\"k\">then</span> <span class=\"n\">Step.visit</span> <span class=\"k\">else</span> <span class=\"n\">Step.done</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">rhs</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Result</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">{</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">pre</span><span class=\"o\">,</span> <span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">post</span> <span class=\"o\">}</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">{}</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>could conceivably be it?</p>",
        "id": 387391540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693031036
    },
    {
        "content": "<p>(Now with both <code>pre</code> and <code>post</code>, and both able to return a bool indicating whether the modified subexpression should be revisited.)</p>",
        "id": 387391593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693031069
    },
    {
        "content": "<p>Having written that, it occurs to me this isn't really what I wanted for <code>rw?</code> in the first place. :-)</p>",
        "id": 387391702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693031179
    },
    {
        "content": "<p>This is getting a bit specific, but I want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zooms</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>that returns the lazy list generated by looking at each subexpression (accessible via congr lemmas) <code>x</code> of <code>e</code>, applying <code>f</code> to <code>x</code> and a goal <code>x = ?_</code>, and each time it succeeds replacing that subexpression <code>x</code>, giving me the pair <code>e'</code> and <code>pf : e = e'</code>.</p>",
        "id": 387391884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693031377
    },
    {
        "content": "<p><code>ext_simplify</code> had been suggested by Eric for <code>move_add</code> in Lean 3.  All of this looks very similar to what I wanted/did in move_add: I'll see whether I can reuse and recycle!</p>",
        "id": 387393992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693033282
    }
]