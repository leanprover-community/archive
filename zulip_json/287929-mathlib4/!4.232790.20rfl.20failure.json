[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2790\">!4#2790</a> I had to replace a proof term <code>rfl</code> with <code>by dsimp</code>. I commented about this on GitHub <a href=\"https://github.com/leanprover-community/mathlib4/pull/2790#discussion_r1132659203\">here</a>. I'd like to understand this.</p>",
        "id": 341125796,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678541844
    },
    {
        "content": "<p>The apparent failure of <code>rfl</code> in this situation is new to me: Lean just pegs a CPU at 100% and nothing happens even after leaving my laptop in this state for several minutes. The replacement <code>by dsimp</code> is essentially instant.</p>",
        "id": 341126026,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678541930
    },
    {
        "content": "<p>Has this failure mode been seen before? Any guidance on how to debug this would be very welcome.</p>",
        "id": 341126094,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678541961
    },
    {
        "content": "<p>Did you try tracing the simp lemmas? Just to see what's being applied.</p>",
        "id": 341136639,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678545541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> The <code>dsimp</code> is able to prove it because it applies two rfl lemmas, which is probably better than a definition-unfolding <code>rfl</code> proof anyway.</p>",
        "id": 341138437,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678546214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Yes I did and so did Kyle (the two lemmas are <code>coe_restrictScalars</code> and <code>Algebra.coe_top</code>). I also added one more comment on GitHub which I will copy here.</p>",
        "id": 341139976,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678546752
    },
    {
        "content": "<p>I just let it run even longer and it did eventually timeout after almost 8 minutes with the expected message:</p>\n<blockquote>\n<p>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</p>\n</blockquote>\n<p>Even though I agree that <code>by dsimp</code> is a better proof, I'm still very disappointed that <code>rfl</code> fails on something as simple as this, especially given that it works instantly in Lean 3.</p>",
        "id": 341140053,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678546786
    },
    {
        "content": "<p>I wonder if this is an in-practice example of the subject reduction issue?</p>",
        "id": 341140137,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678546805
    },
    {
        "content": "<p>I doubt it, though I'm only basing this opinion on the fact that (as far as I know) we never encountered the SR issue in &gt; 1m lines in Mathlib3.</p>",
        "id": 341140363,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678546873
    },
    {
        "content": "<p>It's possible that structure eta makes it more likely to happen</p>",
        "id": 341145415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678548626
    },
    {
        "content": "<p>(combined with the switch to new-style classes such that structure eta is regularly needed in unification)</p>",
        "id": 341145538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678548681
    }
]