[
    {
        "content": "<p>In lean 3, we almost always used <code>letI</code> for local instances, and mathport translated this literally.</p>\n<p>Of course, the <code>I</code> in<code>letI</code> now means something totally different to what it did in Lean 3 (now \"inline\" instead of \"instance\"), so this translation, while harmless, might not be a practice we want to continue to proliferate.</p>\n<p>The main advantages of <code>letI</code> over <code>let</code> here are:</p>\n<ul>\n<li>It's already in our muscle memory</li>\n<li>It generates a name for the instance for us</li>\n</ul>\n<p>while the disadvantage is:</p>\n<ul>\n<li>It perpetuates the incorrect mnemonic for the <code>I</code></li>\n<li>The fact it inlines is seemingly irrelevant most of the time</li>\n</ul>",
        "id": 396246664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697101663
    },
    {
        "content": "<p>I'd also be interested to know why <code>let</code> and <code>letI</code> must both exist (and likewise <code>have</code> and <code>haveI</code>). Mathematically there's no difference.</p>",
        "id": 396247190,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697101836
    },
    {
        "content": "<p><code>letI</code> is handy in term mode for when you want to build a statement piece-by-piece, but want the result to look like it was built all at once</p>",
        "id": 396247886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102090
    },
    {
        "content": "<p>We actually did use this in a handful of places in mathlib3; <code>by have := x; exact y</code> was analogous to lean 4's <code>haveI := x; y</code></p>",
        "id": 396248053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/let.20vs.20letI.20for.20local.20instances/near/396247886\">said</a>:</p>\n<blockquote>\n<p><code>letI</code> is handy in term mode for when you want to build a statement piece-by-piece, but want the result to look like it was built all at once</p>\n</blockquote>\n<p>I believe I understand why <code>letI</code> is superior to <code>let</code> in this case. Is there an example where <code>let</code> is superior to <code>letI</code>?</p>",
        "id": 396248443,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697102282
    },
    {
        "content": "<p>Yes, you can tell simp not to unfold <code>let</code>s (though annoyingly Lean4 changed the default to be that they are unfolded)</p>",
        "id": 396249166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102512
    },
    {
        "content": "<p>I also remember a case recently where <code>letI</code>s caused a timeout but <code>let</code> did not.</p>",
        "id": 396251113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697103184
    },
    {
        "content": "<p>Thanks, I guess I'd need to see some examples to decide if this means to control <code>simp</code> unfolding is a useful feature.</p>",
        "id": 396251696,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697103368
    },
    {
        "content": "<p>I'm mentally filing this as \"let vs letI is seldom important and probably something that should not exist but has to for now\".</p>",
        "id": 396251720,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1697103379
    },
    {
        "content": "<p>I think there's also an organizational reason here; <code>letI</code> is not in core but std, IIRC</p>",
        "id": 396252151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697103556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/let.20vs.20letI.20for.20local.20instances/near/396251696\">said</a>:</p>\n<blockquote>\n<p>Thanks, I guess I'd need to see some examples to decide if this means to control <code>simp</code> unfolding is a useful feature.</p>\n</blockquote>\n<p>try read the mathported Wedderburn's little theorem proof right now... because of <code>simp</code> unfolding let bindings it's not easy to read the goal</p>",
        "id": 396258946,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106026
    },
    {
        "content": "<p>on the other hand <code>letI</code> makes cleaner terms; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.recOnPrimePow#doc\">docs#Nat.recOnPrimePow</a> I changed to only use <code>letI</code> + <code>haveI</code> so that the term is only like <code>Nat.strongRecOn ... (fun ... ih =&gt; Eq.mpr _ ih)</code> as opposed to a bunch of let bindings hidden in there</p>",
        "id": 396259198,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106125
    }
]