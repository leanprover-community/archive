[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Option</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> simplified from `Fintype.induction_empty_option`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_empty_optionₓ</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"c1\">-- fails (error on `example`)</span>\n    <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">induction_empty_optionₓ</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">α</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>Using <code>refine</code>/<code>refine'</code> here creates the following two errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">H</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>In the first error it unfolds to <code>(@P x✝¹ h : Prop)</code> where <code>h</code> is of Type <code>Fintype α</code> even though it should insert an instance <code>Fintype x✝¹</code>, and similarly in the second error the second of the two <code>P α</code> unfolds as <code>@ P α h</code>, but with <code>h : Fintype α✝</code>.</p>\n<p>Does anybody know why lean4 would insert instances here that are clearly the for the wrong types? Is that maybe a bug that's already known or fixed in an upcoming bump?</p>\n<p>Or is the Lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finite.induction_empty_option#doc\">docs4#Finite.induction_empty_option</a> badly shaped with all these <code>∀ α [Fintype α],  _</code>? <br>\n(This problem appears as the first error in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2084\">!4#2084</a> l. 438)</p>",
        "id": 326116846,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675688471
    },
    {
        "content": "<p>It works fine if I add some <code>@</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"c1\">-- ok</span>\n    <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">induction_empty_optionₓ</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"c1\">--ok</span>\n</code></pre></div>",
        "id": 326118628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675688959
    },
    {
        "content": "<p>Changing <code>induction_empty_optionₓ</code> to take the <code>Fintype</code> argument in <code>()</code> instead of <code>[]</code> also works</p>",
        "id": 326119059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675689082
    },
    {
        "content": "<p>I think this might be a bug in <code>elab_as_eliminator</code></p>",
        "id": 326119099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675689090
    },
    {
        "content": "<p>With <code>()</code> brackets the <code>induction</code> tactic also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> simplified from `Fintype.induction_empty_option`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_empty_optionₓ</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span>\n    <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">induction</span> <span class=\"o\">‹</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"n\">using</span> <span class=\"n\">induction_empty_optionₓ</span>\n      <span class=\"n\">apply</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 326119332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675689144
    },
    {
        "content": "<p>The second suggestion also works in the full PR, thx!</p>\n<p>I still wonder if there is an explanation why the instance inference would create seemingly absurd terms like <code>@P α (H : Fintype β)</code></p>",
        "id": 326119916,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675689322
    }
]