[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4087\">https://github.com/leanprover-community/mathlib4/pull/4087</a> I'm stuck on <a href=\"https://github.com/leanprover-community/mathlib4/pull/4087/files#diff-fcb7205fefc414348065b789a90df8adf09c89acd1d7c5988fcb132faf8c178dR174\">this line</a>. I've compared the types, and I think the rewrite should work. The only thing I can spot is the x y/f g difference, but I'm pretty sure that they're alpha-equivalent. Anyone got a pointer?</p>",
        "id": 359744143,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684522198
    },
    {
        "content": "<p>The rewrite fails because the instance further up the file fails</p>",
        "id": 359745483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684522669
    },
    {
        "content": "<p>If you can't get a definition to work, all the failures about it below are nonsense</p>",
        "id": 359745610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684522695
    },
    {
        "content": "<p>Ah, thank!</p>",
        "id": 359746027,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684522833
    },
    {
        "content": "<p>I reverted your fix commit, it changed the meaning of your results and made some of them false</p>",
        "id": 359746582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684523007
    },
    {
        "content": "<p>That would've been hard to prove then:') I'll study to see if I grasp it better now:)</p>",
        "id": 359748989,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684523769
    },
    {
        "content": "<p>The underlying problem here is that a huge pile of lemmas about Finsupp addition no longer work on AddMonoidAlgebra</p>",
        "id": 359751184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684524496
    },
    {
        "content": "<p>Do you have any advice for a particular angle how to fix that? (Adding Coe instances sort of intuitively makes sense, but I have no clue if that's actually a valid path)</p>",
        "id": 359753575,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684525277
    },
    {
        "content": "<p>Adding coe instances sounds like the wrong approach to me</p>",
        "id": 359753759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684525333
    },
    {
        "content": "<p>I on't have a good answer though; so far it seems we've just duplicate every bit of API for finsupp that we need; see near <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidAlgebra.single#doc\">docs4#AddMonoidAlgebra.single</a>. There are 10 or so lemmas which are just copied</p>",
        "id": 359753902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684525376
    },
    {
        "content": "<p>I guess that would work, so I'll give that a shot. Thanks a lot:)</p>",
        "id": 359754336,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684525484
    },
    {
        "content": "<p>Replacing <code>simp</code> and <code>rw</code> with <code>erw</code> sometimes works too</p>",
        "id": 359754803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684525646
    },
    {
        "content": "<p>I did end up adding a type class instance to fix most of it, I'm not sure if what I has any unintended side-effects, but the whole thing does compile, so I'm guessing it's at least a good starting point?</p>",
        "id": 359914876,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684596058
    },
    {
        "content": "<p>I would say the converse --  changing mathlib whilst porting is a high-risk strategy and it's better to understand what's going on than just making random changes in order to get one file compiling locally.</p>",
        "id": 359915079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684596125
    },
    {
        "content": "<p>Well, the fact that I'm winging it a little bit is the reason I'm picking files without dependents to learn:)</p>\n<p>Is there a particular reason adding an instance is more risky than duplicating API?</p>",
        "id": 359916479,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684596628
    },
    {
        "content": "<p>As long as we understand that why the instance is necessary in Lean 4 and not in Lean 3 it's fine.</p>",
        "id": 359917255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684596917
    },
    {
        "content": "<p>Well, I don't understand yet, but I added a comment, so a reviewer won't overlook it:)</p>",
        "id": 359918512,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684597389
    },
    {
        "content": "<p>What was the instance?</p>",
        "id": 359919441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684597714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidAlgebra.nonUnitalNonAssocSemiring</span>\n</code></pre></div>",
        "id": 359919586,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684597771
    },
    {
        "content": "<p>That instance is bad, it conflicts with the pointwise instance</p>",
        "id": 359919814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684597844
    },
    {
        "content": "<p>And what about if I made it a local instance?</p>",
        "id": 359920243,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684597989
    },
    {
        "content": "<p>It's still very much a hack, and it would be better to find the right solution</p>",
        "id": 359921599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684598519
    },
    {
        "content": "<p>This is what <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> ended up doing: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4087/commits/ba111775b57a5c957749b7b99c53269c2a0f8d80\">https://github.com/leanprover-community/mathlib4/pull/4087/commits/ba111775b57a5c957749b7b99c53269c2a0f8d80</a> </p>\n<p>Thanks all for the pointers:)</p>",
        "id": 359921731,
        "sender_full_name": "Pim Otte",
        "timestamp": 1684598561
    },
    {
        "content": "<p>That's probably the least hacky way to use the instance. It would still be good to understand the failure, because we don't want to have to use this hack every time</p>",
        "id": 359924490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684599735
    },
    {
        "content": "<p>It sounds like the problem is that we're using <code>Finsupp</code> lemmas on <code>AddMonoudAlgebra</code>, so sometimes <code>AddMonoidAlgebra</code> gets unfolded which is bad because we can't synthesise instances for it. We should properly transfer the lemmas we need about <code>Finsupp</code>.</p>",
        "id": 359928356,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684601241
    },
    {
        "content": "<p>It's not just the lemmas, but the defs too</p>",
        "id": 359929924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684601916
    }
]