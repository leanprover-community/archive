[
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/132\">std4#132</a> continues the series of code action related PRs, adding a framework for running code actions on tactics and tactic sequences. There aren't any flashy code actions implemented yet, but one simple one is the <code>Remove tactics after 'no goals'</code> code action:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">trivial</span>\n  <span class=\"n\">trivial</span> <span class=\"c1\">-- &lt;- remove this, proof is already done</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>is transformed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Note that this is elaborator-aware, and the code action will not show up unless the tactic is applied to no goals. Hopefully this will be useful when cleaning up broken proofs after a tactic gets smarter and closes more goals.</p>",
        "id": 356912778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683622529
    },
    {
        "content": "<p>The fun part of this implementation is the indentation sensitivity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">skip</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skip</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span>\n</code></pre></div>\n<p>after a hypothetical \"insert library_search\" code action:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">skip</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skip</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>as compared to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">skip</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skip</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span>\n</code></pre></div>\n<p>which goes to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">skip</span>\n  <span class=\"bp\">·</span> <span class=\"n\">skip</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>where the <code>|</code> represents the cursor position.</p>",
        "id": 356914535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683622943
    },
    {
        "content": "<p>Added another code action. Invoking tactic code action \"Generate an explicit pattern match for 'induction'\" in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">done</span>\n</code></pre></div>\n<p>It also works with <code>cases</code>.</p>",
        "id": 357173316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699739
    },
    {
        "content": "<p>I guess we should bump the std dependency of mathlib to get access to all these goodies? Or do you have even more lined up?</p>",
        "id": 357173553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683699824
    },
    {
        "content": "<p>/poll How should the branches of the induction tactic be terminated?<br>\ndone<br>\nsorry<br>\n_<br>\n?_<br>\nnewline + 'done'</p>",
        "id": 357173859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> They aren't merged yet, I would like to get some review on them and most of the people who could do so are indisposed</p>",
        "id": 357174090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683699967
    },
    {
        "content": "<p>Note that <code>_</code>/<code>?_</code> at the end of <code>induction</code> arms means something special: it postpones the proof of that branch until after the tactic, equivalently to using <code>induction e</code> on its own. In practice that means that you will not get an error on the <code>_</code> but rather on the <code>by</code> because the proof is not finished, with two subgoals remaining</p>",
        "id": 357174477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683700084
    },
    {
        "content": "<p>Since it's just for editing it doesn't matter too much one way or another but perhaps we want to encourage some style</p>",
        "id": 357174626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683700126
    },
    {
        "content": "<p>The <code>zero</code> branch is often solved <code>by simp</code>: maybe the action could be optimistic and try that...</p>",
        "id": 357175679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683700456
    },
    {
        "content": "<p>But the code action isn't just for induction on <code>Nat</code>, or is it?</p>",
        "id": 357176597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683700765
    },
    {
        "content": "<p>It seems not, but it could be even more optimistic!  For lists also simp could solve the empty case...</p>",
        "id": 357176866,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683700841
    },
    {
        "content": "<p>Anyway, it is just a suggestion: since there is the need for human input <em>always</em> otherwise, this takes care of some completely trivial situation where you may not need to do anything else.</p>",
        "id": 357177061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683700909
    },
    {
        "content": "<p>Re: how to terminate the branches, it would be neat if we chose something that would be standard for other code actions to chain on! E.g. if we choose sorry, maybe sorry could be a generic starting point for other code actions, and options to replace the sorry with simp, a result from library_search, propose, etc. would pop up. (Possibly in a “smart” way, informed by the position of sorry in the tactic and even the outcomes of the potential suggestions.)</p>",
        "id": 357413873,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683757235
    },
    {
        "content": "<p>Can we get a hook that checks for spare CPU capacity? :-)</p>",
        "id": 357418083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683759522
    },
    {
        "content": "<p>Hole and tactic code actions are now live on <code>Std</code>, although the API might not be quite stable yet and it might evolve as more code actions are added. I pushed two new simple code actions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"c1\">-- &lt;- \"start a tactic proof\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"c1\">-- &lt;- \"add subgoals\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">done</span>\n  <span class=\"bp\">·</span> <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 358624431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684214507
    },
    {
        "content": "<p>and bors is working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/4012\">!4#4012</a> which brings these all to mathlib4!</p>",
        "id": 358624711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684214649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20code.20actions/near/357413873\">said</a>:</p>\n<blockquote>\n<p>Re: how to terminate the branches, it would be neat if we chose something that would be standard for other code actions to chain on! E.g. if we choose sorry, maybe sorry could be a generic starting point for other code actions, and options to replace the sorry with simp, a result from library_search, propose, etc. would pop up. (Possibly in a “smart” way, informed by the position of sorry in the tactic and even the outcomes of the potential suggestions.)</p>\n</blockquote>\n<p>Code actions are currently doing a bit of both here. They are somewhat loose regarding what constitutes a tactic sequence terminator (the one I just pushed supports <code>done</code>, <code>sorry</code>, <code>admit</code> and nothing at the end of a tactic sequence), and will also preserve the user's preference where possible (an example of this is in the induction auto-fill code action which uses <code>_</code> if you used <code>_</code>, <code>?_</code> if you used <code>?_</code> and <code>sorry</code> if you used <code>sorry</code>). So while yes, we certainly want code actions to be chainable, they should also be somewhat non-prescriptive regarding different lean styles</p>",
        "id": 358625116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684214851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Actually you might want to bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/4012\">!4#4012</a> again if you want the other code actions, currently it only has \"try this\" I think</p>",
        "id": 358625264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684214913
    },
    {
        "content": "<p>I bumped (again, twice).</p>",
        "id": 358632565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684218076
    },
    {
        "content": "<p>Code actions have landed in mathlib4!</p>",
        "id": 358983386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684329966
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 358985951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684330647
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KLUmjBYi_thU37MB3KVT4U-r/foo.gif\">Library search code action</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KLUmjBYi_thU37MB3KVT4U-r/foo.gif\" title=\"Library search code action\"><img src=\"/user_uploads/3121/KLUmjBYi_thU37MB3KVT4U-r/foo.gif\"></a></div>",
        "id": 359413668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684420385
    },
    {
        "content": "<p>I mean, can we actually deploy this as is? I'm guessing we are going to conclude that it is unkind to people's CPUs and battery life if every time you put you cursor on a <code>_</code> or <code>sorry</code>, <code>library_search</code> runs in the background...</p>\n<p>I would sure like to, however. :-)</p>",
        "id": 359415209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684420773
    },
    {
        "content": "<p>(it is worth noting that <code>library_search</code> is vastly more performant than you are used to, if you haven't been using it in the last few weeks)</p>",
        "id": 359415396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684420823
    },
    {
        "content": "<p>I need a new computer anyway ;)</p>",
        "id": 359415615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684420888
    },
    {
        "content": "<p>More seriously, can we put the automatic library search behind some optional configuration?</p>",
        "id": 359415870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684420952
    },
    {
        "content": "<p>Yes, we could certainly put this behind a <code>set_option</code>.</p>",
        "id": 359416635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684421147
    },
    {
        "content": "<p>There's not really a convenient mechanism for individuals to run mathlib with different options than the default, however.</p>",
        "id": 359416828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684421183
    },
    {
        "content": "<p>You could test for an environment variable??? Try to ask the OS if there are spare CPUs? :-)</p>",
        "id": 359417118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684421268
    },
    {
        "content": "<p>Can it be done with an option in the vscode extensions perhaps?</p>",
        "id": 359417977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684421478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20code.20actions/near/359417118\">said</a>:</p>\n<blockquote>\n<p>You could test for an environment variable??? Try to ask the OS if there are spare CPUs? :-)</p>\n</blockquote>\n<p>Checking for spare CPUs still doesn't help with battery life, unfortunately.</p>",
        "id": 359418594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684421603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20code.20actions/near/359416828\">said</a>:</p>\n<blockquote>\n<p>There's not really a convenient mechanism for individuals to run mathlib with different options than the default, however.</p>\n</blockquote>\n<p>I'd prefer to have this fixed by addressing this issue...</p>",
        "id": 359419107,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684421706
    },
    {
        "content": "<p>Different options interacts somewhat scarily with caching. Do you refuse to use the olean cache? Or just hope for the best?</p>",
        "id": 359419290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684421750
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 359419439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684421783
    },
    {
        "content": "<p>Well, where I have really wanted this is in my own tiny mathlib-dependent projects, where caching isn't an issue. But maybe indeed it wouldn't be useful for the problem at hand here</p>",
        "id": 359419738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684421859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20code.20actions/near/359415209\">said</a>:</p>\n<blockquote>\n<p>I mean, can we actually deploy this as is? I'm guessing we are going to conclude that it is unkind to people's CPUs and battery life if every time you put you cursor on a <code>_</code> or <code>sorry</code>, <code>library_search</code> runs in the background...</p>\n<p>I would sure like to, however. :-)</p>\n</blockquote>\n<p>For the version shown here, I see no reason why it would need to run in the background</p>",
        "id": 359426820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684423568
    },
    {
        "content": "<p>I agree with Mario. Shouldn't the computation happen <em>after</em> you click the \"use library_search\" button?</p>",
        "id": 359448494,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684428960
    },
    {
        "content": "<p>But I'd prefer not to even see a pop-up if library_search isn't going to solve it. I want the information of \"there is an easy proof from here\", not \"save 14 keystrokes\".</p>",
        "id": 359462276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684432555
    },
    {
        "content": "<p>I think that should be an option, <code>set_option keep_me_warm_in_the_winter true</code></p>",
        "id": 359465417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684433446
    },
    {
        "content": "<p>you may as well run <code>tidy</code> or <code>aesop</code> or other general purpose automation for that</p>",
        "id": 359465605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684433502
    },
    {
        "content": "<p>But if any other code action applies (like your example already shows!), you only see whether <code>library_search</code> works after you click the lightbulb. So for your wish we would need additional tooling. <br>\nYour behavior sounds useful, but should probably not be the default.</p>",
        "id": 359465831,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684433557
    },
    {
        "content": "<p>Does it make sense to have vscode extension preferences for things like “run library search before clicking the lightbulb”? (Is there a way to make such preferences extensible, so you don’t need to PR the extension each time you want to add a preference?) This seems like an extension behavior/UI configuration, after all, not a mathlib configuration per se.</p>",
        "id": 359466050,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1684433638
    },
    {
        "content": "<p>I think it would make sense to be able to set lean options in the VSCode extension settings, yes</p>",
        "id": 359466784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684433848
    },
    {
        "content": "<p>Of course you have to be careful not to set any options that change the behavior of lean code, but I think the caching concerns aren't a major issue provided that all the built oleans use the official option set and the server only uses your custom options when processing files in the editor</p>",
        "id": 359467419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684434025
    },
    {
        "content": "<p>Perhaps options could be registered (when declared) as being exclusively “UI” options (i.e. not changing the behavior of Lean code), and only these would be customizable via the extension</p>",
        "id": 359467908,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1684434175
    },
    {
        "content": "<p>Right now I think the bigger issue is that you can't set custom options at all via <code>-D</code></p>",
        "id": 359468239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684434275
    },
    {
        "content": "<p>I think this will be a rather advanced technique and so I'm not too fussed about putting guard rails on it. Theoretically any option could affect lean code (you could just have a tactic which emits a declaration if <code>pp.all</code> is on), but in practice most don't, or at least not in any interesting or easily observable way even if it changes the hash in some way</p>",
        "id": 359468628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684434414
    },
    {
        "content": "<p>This is really a design criterion for options. Looking at the list, I see only two kinds of options:</p>\n<ol>\n<li>Options that change what lean prints but not what it does</li>\n<li>Options that make lean succeed or fail where it would not otherwise</li>\n<li>Mostly unrepresented: Options that cause lean to change from one valid behavior to a different one</li>\n</ol>\n<p>I don't see any in the third group, except possibly <code>etaExperiment</code>, and <code>genInjectivity</code>, <code>genSizeOf</code> which are for internal (bootstrap) use only</p>",
        "id": 359469475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684434661
    },
    {
        "content": "<p>An option which I'd like to set in a mathlib-dependent project is <code>push_neg.use_distrib</code>.  This changes the behaviour of a tactic, so it would definitely break some proofs.  Does this fall outside your classification?</p>",
        "id": 359470209,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684434868
    },
    {
        "content": "<p>It would fall in the third group. You would definitely not want to set those kind of options in the extension</p>",
        "id": 359470609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684434980
    },
    {
        "content": "<p>Even changes to options in group 2 can be problematic, since it is confusing if you visit a file which apparently compiled successfully and it doesn't compile in the editor</p>",
        "id": 359471307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684435178
    },
    {
        "content": "<p>something like <code>push_neg.use_distrib</code> would mostly manifest as causing failures like group 2; it would be pretty rare for it to work anyway but produce a relevant difference (group 3)</p>",
        "id": 359471633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684435247
    }
]