[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>I'm pretty sure this worked on mathlib head a week ago, but it fails today. Has something changed?</p>",
        "id": 403076534,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700444941
    },
    {
        "content": "<p>To be specific, this succeeds for me on mathlib4 commit <code>aa0957f</code> (from 13th Nov) and fails for me on <code>778f663</code> (from 19th Nov)</p>",
        "id": 403077161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700445381
    },
    {
        "content": "<p>Yes, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/8366\">mathlib4#8366</a>.</p>",
        "id": 403077936,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700445825
    },
    {
        "content": "<p>My understanding is that the main difference is that <code>simp</code> no longer uses <code>decide := true</code> by default</p>",
        "id": 403078009,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700445860
    },
    {
        "content": "<p>Right I'm aware of this change, but that's not enough to justify this example breaking. For instance, <code>simp</code> in mathlib3 doesn't use decide either (and so it fails on this example) but <code>norm_num</code> in mathlib3 can do it</p>",
        "id": 403078065,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700445914
    },
    {
        "content": "<p>Perhaps <code>decide</code> was masking other deficiencies in mathlib4 <code>norm_num</code>.</p>",
        "id": 403078163,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700445974
    },
    {
        "content": "<p>fwiw, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 403078179,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700445989
    },
    {
        "content": "<p>Sure <code>decide</code> works but my actual case is a more complex expression where I'd like this to be normalised away! So perhaps to be more specific, the issue is that <code>norm_num1</code> fails on this.</p>",
        "id": 403078365,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700446110
    },
    {
        "content": "<p>Ah, and all the tests for <code>norm_num1</code> with divisibility are commented out...</p>",
        "id": 403078524,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700446215
    },
    {
        "content": "<p>curiously, this fails, even though <code>Mathlib.Tactic.NormNum.Prime</code> exists and purports to be able to handle it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 403078568,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700446258
    },
    {
        "content": "<p>Ah, wait, no, it does work with <code>Nat.Prime</code></p>",
        "id": 403078608,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700446292
    },
    {
        "content": "<p>It seems like the divisibility extension to norm_num was just never ported, and it wasn't noticed because <code>decide</code> was picking up the slack.</p>",
        "id": 403079171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700446687
    },
    {
        "content": "<p>Note issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/2136\">#2136</a>! (I’m not entirely sure it’s up to date)</p>",
        "id": 403079280,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700446791
    },
    {
        "content": "<p>Ah great to know, thank you!</p>",
        "id": 403079356,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700446818
    },
    {
        "content": "<p>We should probably add the facts that an extension exists for <code>Nat.Prime</code> and that one doesn’t for the generic <code>Prime</code>; I’m on mobile at the moment, however.</p>",
        "id": 403079657,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700447042
    },
    {
        "content": "<p>Note also that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7112\">#7112</a> would allow you to re-enable <code>decide</code> in <code>norm_num</code>.</p>",
        "id": 403081052,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700447979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there any reason this wasn't labelled as awaiting review? I delegated it anyway since it looks fine to me.</p>",
        "id": 403081847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700448544
    },
    {
        "content": "<p>For Prime it should be really easy to write an extension I guess? I can give it a crack to learn metaprogramming I guess</p>",
        "id": 403120894,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700469753
    },
    {
        "content": "<p>Where is the guide again?</p>",
        "id": 403120907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700469761
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8534\">#8534</a> implements a norm_num extension for Nat.dvd, Int.dvd, Int.div</p>",
        "id": 403202223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700496790
    },
    {
        "content": "<p>Hi, is the following example also related to the <code>simp</code>-<code>decide</code> change?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">works</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>Here's the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">75</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">division</span> <span class=\"n\">ring</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalOfNat</span><span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">isNat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Meta.NormNum.isNat_ofNat</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">norm_nums</span> <span class=\"n\">apply</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">norm_nums</span> <span class=\"n\">apply</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">norm_nums</span> <span class=\"n\">apply</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.norm_num</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">norm_nums</span> <span class=\"n\">apply</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>The final line is weird.</p>",
        "id": 403331901,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700557127
    },
    {
        "content": "<p>I don't think <code>norm_num</code> is supposed to work on either of these goals anyway, since it's supposed to work on concrete numerals, not variables. Does <code>simp</code> work on either goal? (What are you importing?)</p>",
        "id": 403334594,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700558052
    },
    {
        "content": "<p>Wouldn't you expect <code>norm_num</code> to combine the +1 +1?</p>",
        "id": 403334725,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700558103
    },
    {
        "content": "<p>^</p>",
        "id": 403334978,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700558171
    },
    {
        "content": "<p>Though I can see the argument about that being out of scope too</p>",
        "id": 403335037,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700558196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Did.20norm_num.20just.20get.20weaker.3F/near/403334594\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>norm_num</code> is supposed to work on either of these goals anyway, since it's supposed to work on concrete numerals, not variables. Does <code>simp</code> work on either goal? (What are you importing?)</p>\n</blockquote>\n<p>I'm importing <code>Mathlib.Tactic</code>, I can switch to Mathlib and try. <code>ring_nf</code> normalises it to <code>(2 + k * 2) / 2</code>, <code>simp</code> does nothing.</p>",
        "id": 403335056,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700558204
    },
    {
        "content": "<p>To confirm this is not related to the <code>decide</code> change, you can try <code>norm_num (config := {decide := true})</code> on the <code>norm_num_cfg</code> branch (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7112\">#7112</a>). I just did and it fails there too.</p>",
        "id": 403335063,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700558207
    },
    {
        "content": "<p>uh<br>\n<a href=\"/user_uploads/3121/Ei524tcBt0YUnCr6mWVEWcYC/Screenshot-2023-11-21-at-09.17.01.png\">Screenshot-2023-11-21-at-09.17.01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Ei524tcBt0YUnCr6mWVEWcYC/Screenshot-2023-11-21-at-09.17.01.png\" title=\"Screenshot-2023-11-21-at-09.17.01.png\"><img src=\"/user_uploads/3121/Ei524tcBt0YUnCr6mWVEWcYC/Screenshot-2023-11-21-at-09.17.01.png\"></a></div>",
        "id": 403335132,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700558231
    },
    {
        "content": "<p>Oh, I need to switch to the branch you mentioned, I see</p>",
        "id": 403335176,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700558250
    },
    {
        "content": "<p>The following example worked in v4.2.0, but doesn't work in v4.3.0-rc2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>Was this a deliberate change to <code>norm_num</code>, or a side effect of some other change?</p>",
        "id": 405172407,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701367680
    },
    {
        "content": "<p>We had a change to make simp not run decide by default, that might be it</p>",
        "id": 405173445,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701368049
    },
    {
        "content": "<p>This is not about decide, this is about unfolding the definition of <code>f</code>.</p>",
        "id": 405174450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701368468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm pretty sure this is about <code>decide</code>. The \"decision procedure\" for Nat equality is to do <code>rfl</code>. This succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 405185089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701372186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> You can pass <code>norm_num</code> additional simp lemmas, including functions to unfold.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>If you tag the function with <code>@[simp]</code> to make it auto-unfold, then <code>norm_num</code> succeeds.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 405185200,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701372235
    },
    {
        "content": "<p>I claims that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 405185304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701372264
    },
    {
        "content": "<p>So this is about norm_num no longer unfolding f, right?</p>",
        "id": 405185335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701372279
    },
    {
        "content": "<p>And by norm_num I really mean the simp called by norm_num</p>",
        "id": 405185413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701372312
    },
    {
        "content": "<p>Yeah, that does work, but I think the specific change is that simp doesn't use <code>decide</code> by default anymore, and <code>decide</code> was incidentally unfolding <code>f</code> because it applies <code>rfl</code>.</p>",
        "id": 405185415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701372313
    },
    {
        "content": "<p>If I make it <code>f 0 &lt; 2</code> rather than <code>f 0 = 1</code>, then <code>rfl</code> is no longer relevant, right?  But <code>decide</code> still seems to work.  So I think <code>f</code> is still getting unfolded, but not because of a call to <code>rfl</code>.</p>",
        "id": 405195641,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701375937
    },
    {
        "content": "<p>Sure, <code>rfl</code> wouldn't be relevant if you change the proposition to something that's not an equality. In the case of <code>f 0 &lt; 2</code>, you can check the term that <code>decide</code> produces, and it uses <code>Nat.decLt (f 0) 2</code>. Inside of this is <code>Nat.ble (f 0 + 1) 2</code>, and the elaborator will unfold <code>f 0</code> here while it computes whether this is <code>true</code> or <code>false</code>.</p>",
        "id": 405196383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701376240
    },
    {
        "content": "<p>The short version is that <code>decide</code> can incidentally unfold functions because unification/whnf is eager to (efficiently) compute basic <code>Nat</code> functions including <code>Nat.ble</code>.</p>\n<p>This is what <code>decide</code> is doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.le_of_ble_eq_true</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405196653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701376350
    },
    {
        "content": "<p>(Here's that list by the way: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/WHNF.lean#L858-L866\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/WHNF.lean#L858-L866</a>)</p>",
        "id": 405197126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701376561
    },
    {
        "content": "<p>I think turning <code>decide</code> back on inside <code>norm_num</code> may be reasonable! Someone should try it, and run <code>!bench</code>.</p>",
        "id": 405458360,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701475824
    },
    {
        "content": "<p>yes, it's supposed to be enabled by default</p>",
        "id": 405459757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701476721
    },
    {
        "content": "<p>Stumbled into this issue with simp. Is there a shortcut to all simp using tactics that use the old configuration ? It breaks quite a few proofs for me (all fixed now, after some effort)</p>",
        "id": 405528051,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701517012
    },
    {
        "content": "<p>No, there is not. In future when making significant changes to tactic behaviour like this, we <em>may</em> add a <code>set_option</code> that gives a backwards compatibility mode. But we'll probably set it up to generate many warnings; it won't be an alternative to adapting to the new behaviour, just a helper.</p>",
        "id": 405591685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701569980
    },
    {
        "content": "<p>I do hope someone looks at <code>norm_num</code>. It is probably just a one-liner fix.</p>",
        "id": 405591709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701570000
    },
    {
        "content": "<p>One of the issues with <code>norm_num</code> back when <code>simp</code> was still doing <code>decide</code> was that this could cause <code>norm_num</code> to be slow because it was accidentally using a <code>decide</code> procedure rather than actually normalizing numbers. (And for something like equailty, that means it would be just applying <code>rfl</code>, which might be a heavy one.)</p>\n<p>Maybe the fix is that <code>norm_num</code> should have a low-priority norm num extension for propositions that tries doing <code>decide</code>?</p>",
        "id": 405592037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570239
    },
    {
        "content": "<p>By the way, there's a <code>declare_simp_like_tactic</code> command to make your own <code>simp</code> with your own configuration. I've never used it, but I noticed it the other day.</p>",
        "id": 405592546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570538
    },
    {
        "content": "<p>That's how tactics like <code>simp_arith</code> are defined.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_simp_like_tactic</span> <span class=\"n\">simpArith</span> <span class=\"s2\">\"simp_arith \"</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Meta.Simp.Config</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405592590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570585
    },
    {
        "content": "<p>AFAIK <code>norm_num</code> should use its own algorithms by preference to <code>decide</code> when both are applicable. The only reason that situation should happen is if there is no <code>norm_num</code> extension for the function in question</p>",
        "id": 405606630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701582045
    }
]