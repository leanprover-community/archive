[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Substring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">next'</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">absP</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">p</span>\n    <span class=\"k\">if</span> <span class=\"n\">absP</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">s.get</span> <span class=\"n\">absP</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next_eq_next'</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">=</span> <span class=\"n\">next'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.next</span><span class=\"o\">,</span> <span class=\"n\">String.Pos.ext_iff</span><span class=\"o\">]</span>\n    <span class=\"k\">show</span> <span class=\"n\">b.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">p.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">String.csize</span> <span class=\"o\">(</span><span class=\"n\">String.get</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">b.byteIdx</span> <span class=\"bp\">=</span>\n         <span class=\"n\">p.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">String.csize</span> <span class=\"o\">(</span><span class=\"n\">String.get</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_self_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_right</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Substring</span>\n</code></pre></div>\n<p>Is there a better way to prove the above theorem?</p>",
        "id": 352483620,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682415630
    },
    {
        "content": "<p>To unobfuscate: I think you're really asking how to prove <code>foo</code>, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">String.byteIdx_add</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span><span class=\"o\">}</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">=</span> <span class=\"n\">b.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">p.byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next_eq_next'</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">=</span> <span class=\"n\">next'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.next</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 352496350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682418874
    },
    {
        "content": "<p><code>foo</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_sub_cancel_left#doc\">docs4#Nat.add_sub_cancel_left</a> / <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_tsub_cancel_left#doc\">docs4#add_tsub_cancel_left</a> or maybe one <code>add_assoc</code> away from it.</p>",
        "id": 352501470,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1682420141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/analyzing.20the.20definition.20of.20.60Substring.2Enext.60/near/352496350\">said</a>:</p>\n<blockquote>\n<p>To unobfuscate: I think you're really asking how to prove <code>foo</code>, right?</p>\n</blockquote>\n<p>Right, but I also wonder whether we need to include several lemmas like <code>String.byteIdx_add</code> in Lean's core library.</p>",
        "id": 352509064,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682422304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/analyzing.20the.20definition.20of.20.60Substring.2Enext.60/near/352501470\">said</a>:</p>\n<blockquote>\n<p><code>foo</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add_sub_cancel_left#doc\">docs4#Nat.add_sub_cancel_left</a> / <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=add_tsub_cancel_left#doc\">docs4#add_tsub_cancel_left</a> or maybe one <code>add_assoc</code> away from it.</p>\n</blockquote>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel_left</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Edited proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.String.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Substring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">next'</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">absP</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">p</span>\n    <span class=\"k\">if</span> <span class=\"n\">absP</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">s.get</span> <span class=\"n\">absP</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next_eq_next'</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">=</span> <span class=\"n\">next'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.next</span><span class=\"o\">,</span> <span class=\"n\">String.Pos.ext_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel_left</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Substring</span>\n</code></pre></div>\n</div></div>",
        "id": 352515041,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682423852
    },
    {
        "content": "<p>Now <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>'s proof should be modified as follows:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Edited proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next_eq_next'</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">=</span> <span class=\"n\">next'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"n\">p</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">next'</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.next</span><span class=\"o\">,</span> <span class=\"n\">String.Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 355003567,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682989230
    }
]