[
    {
        "content": "<p>Something people have noticed during porting is that <code>convert</code>/<code>convert_to</code> is less good at elaboration, in the sense that it doesn't really make use of any information from the goal when synthesizing instances.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6041\">#6041</a> is an experiment to change how the term is elaborated so that it has the following properties:<br>\n1) It will try to synthesize instances when it can.<br>\n2) If it fails for any reason, it turns the instance problems into additional goals.<br>\n3) The goals can be solved for by unification during the <code>congr!</code> algorithm.</p>",
        "id": 377428225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689973665
    },
    {
        "content": "<p>While the changes do seem to work, there are some downsides:<br>\n1) Typeclass inference failures are not errors. (This is both a positive and a negative.)<br>\n2) Ambiguous notation can't use typeclass inference to disambiguate. One example that popped up is <code>Î¼[X]</code> in probability, which is either an integral or the <code>GetElem</code> notation...</p>",
        "id": 377428237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689973669
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I think I remember you running into <code>convert</code> limitations a lot. Maybe you know of some good places to test this change out?)</p>",
        "id": 377428538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689973773
    }
]