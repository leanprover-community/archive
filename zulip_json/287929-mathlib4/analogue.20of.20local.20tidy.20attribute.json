[
    {
        "content": "<p>What's the <code>aesop_cat</code> analogue of <code>local attribute [tidy] foobar</code>?</p>",
        "id": 328069681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676482875
    },
    {
        "content": "<p>I don't think it exists yet</p>",
        "id": 328069787,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676482911
    },
    {
        "content": "<p>I'm specifically working on the file <code>category_theory.discrete_category</code> where we have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A simple tactic to run `cases` on any `discrete α` hypotheses. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.tactic.discrete_cases</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">cases_matching</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"n\">discrete</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">plift</span> <span class=\"n\">_</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">tactic.discrete_cases</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">tactic.discrete_cases</span>\n</code></pre></div>",
        "id": 328069996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676482959
    },
    {
        "content": "<p>porting the tactic is easy enough, e.g. as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_cases</span><span class=\"o\">)</span> <span class=\"s2\">\"discrete_cases\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">casesm</span><span class=\"bp\">*</span> <span class=\"n\">Discrete</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Discrete</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Discrete</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">PLift</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328070150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676482989
    },
    {
        "content": "<p>but I don't know how to only activate it locally within <code>aesop_cat</code></p>",
        "id": 328070183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676482998
    },
    {
        "content": "<p>Let me conjure up the error it fed me</p>",
        "id": 328070379,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676483052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory</span><span class=\"o\">])]</span> <span class=\"n\">Std.Tactic.Ext.extCore'</span>\n</code></pre></div>\n<p>gives <code>local and scoped Aesop rules are not supported</code></p>",
        "id": 328070761,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676483175
    },
    {
        "content": "<p>yeah that's the same error I got.</p>",
        "id": 328072323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676483622
    },
    {
        "content": "<p>but I wonder if there is some way to simulate this in some other way without modifying <code>aesop</code> itself. <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> any hints?</p>",
        "id": 328072561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676483672
    },
    {
        "content": "<p>Perhaps you can feed it in the config?</p>",
        "id": 328072766,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676483727
    },
    {
        "content": "<p>Apparently there is this <code>erase_aesop_rules [safe apply foo, bar (rule_sets [A])]</code></p>",
        "id": 328075501,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676484437
    },
    {
        "content": "<p>You can feed it into <code>aesop</code> call but <code>aesop_cat</code> needs a refactor to accommodate this.</p>",
        "id": 328080901,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676486039
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2299\">!4#2299</a> has convinced me I need to improve my aesop care and feeding</p>",
        "id": 328097905,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676491363
    },
    {
        "content": "<p>Currently, the only way to get local rules is to declare an Aesop rule set and use it only locally. Local and scoped Aesop rules require specific support from Aesop. This is something I've wanted to do for a while, but I've been putting it off because it's a decently big rewrite of that part of Aesop. But if there's now a need for it, I can do it.</p>\n<p>Once Aesop supports local and scoped rules, is there still a need for rule sets? If not, I would like to remove this functionality. CC'ing some people who I know use Aesop: <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span></p>",
        "id": 328112234,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1676496799
    },
    {
        "content": "<p>Is there a way to union rule sets?</p>",
        "id": 328113526,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1676497370
    },
    {
        "content": "<p>Oh, I think rule sets are very helpful when setting up aesop wrapper tactics, e.g. <code>aesop_cat</code>.</p>",
        "id": 328116473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1676498552
    },
    {
        "content": "<p>I agree rulesets are very useful to write \"specialized\" versions of aesop, we definitely don't want to give that up!</p>",
        "id": 328118666,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1676499468
    },
    {
        "content": "<p>I was about to ask how something like <code>continuity</code> and <code>measurability</code> should work without rulesets. It might be possible to replace them just by calling aesop, but that sounds like a possible performance problem to me.</p>",
        "id": 328124495,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1676501912
    },
    {
        "content": "<p>Right, especially if we want to try to make these capable of proving statements like <code>ContinuousAt f x</code>, which might require doing things like putting linarith as a last resort <code>unsafe 1%</code> rule to show <code>x</code> is in the right subset.</p>",
        "id": 328130094,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1676504891
    },
    {
        "content": "<blockquote>\n<p>Once Aesop supports local and scoped rules, is there still a need for rule sets?</p>\n</blockquote>\n<p>I think it's a good design choice to be consistent with simp.  And simp supports all three.</p>",
        "id": 328137699,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676509507
    },
    {
        "content": "<p>Okay, thanks everyone for the feedback! I'll follow the <code>simp</code> model then.</p>",
        "id": 328205575,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1676545030
    },
    {
        "content": "<p>I got the file to build in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2326\">!4#2326</a> but I still haven't done any linting. And I also feel like the automation isn't as nice as it should be (given the fact that we can't add to aesop locally just yet as discussed above). Any help to get this file in shape would be much appreciated!</p>",
        "id": 328364137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676594140
    },
    {
        "content": "<p>In the meantime, I tried adding and then erasing tactics <a href=\"https://github.com/leanprover-community/mathlib4/pull/2453\">!4#2453</a> for the rule set. It went pretty well.</p>",
        "id": 329627353,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677126855
    },
    {
        "content": "<p>Local and scoped rules are now supported. Mathlib bump PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2484\">!4#2484</a></p>",
        "id": 336540810,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677259348
    }
]