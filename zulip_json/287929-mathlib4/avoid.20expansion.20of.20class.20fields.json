[
    {
        "content": "<p>What is the lean4 equivalent of the <code>..</code> when defining a term of a certain class? Consider the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.DiscreteValuationRing.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>If I put a <code>_</code> and hover on the bulb and ask to <code>generate skeleton for the structure under construction</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">isUnit_or_isUnit_of_add_one</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">not_a_field'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Now, <code>DiscreteValuationRing</code> is defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"kd\">extends</span> <span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">LocalRing</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">not_a_field'</span> <span class=\"o\">:</span> <span class=\"n\">maximalIdeal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span>\n</code></pre></div>\n<p>and <code>principal</code> is the name of the constructor for <code>IsPrincipalIdealRing</code>, hence the first field. Now, <code>LocalRing</code> in itself extends <code>Nontrivial</code> (whose constructor is <code>exists_pair_ne</code>) and has <code>isUnit_or_isUnit_of_add_one</code> as the other constructor: of course I can find them by destructuring my term <code>LocalRing A</code>, but I would like to be able to remove the two constructors </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n    <span class=\"n\">isUnit_or_isUnit_of_add_one</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and simply pass a term of type <code>LocalRing A</code> (found by <code>infer_instance</code>). What is the syntax?</p>",
        "id": 399893135,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698918370
    },
    {
        "content": "<p>Are you asking what the equivalent of  Lean 3's <code>{foo := _, ..bar}</code> is? It's <code>{ bar with foo := _ }</code>, or if using <code>where</code>, <code>__ := bar</code></p>",
        "id": 399893839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698918625
    },
    {
        "content": "<p>So this should be like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">not_a_field'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 399894301,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698918777
    },
    {
        "content": "<p>I expect you want to remove the space between the two <code>_</code></p>",
        "id": 399894413,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698918819
    },
    {
        "content": "<p>Ah! Let me try.</p>",
        "id": 399894457,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698918837
    },
    {
        "content": "<p>Ok, thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ! It <em>basically</em> works, in the sense (but this was probably the same in Lean3) that it cannot really guess what <code>__</code> is (and understandably so), so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n    <span class=\"n\">not_a_field'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">__</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>gives a problem in the last line (it has no clue of what to look for), but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n    <span class=\"n\">not_a_field'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">__</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>is OK. The other option is to explicitly name the term <code>LocalRing A</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsDomain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPrincipalIdealRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocalRing.maximalIdeal</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteValuationRing</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n    <span class=\"n\">principal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n    <span class=\"n\">not_a_field'</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span>\n</code></pre></div>\n<p>Is there a <code>mathlib</code> preference between the previous two solutions?</p>",
        "id": 399895745,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698919263
    },
    {
        "content": "<p>Huh, I didn't even know that <code>__ : LocalRing A := by infer_instance</code> was legal!</p>",
        "id": 399896133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698919355
    },
    {
        "content": "<p>I'm used to seeing <code>__ := inferInstanceAs &lt;| LocalRing A</code>, but I think <code>__ : LocalRing A := inferInstance</code> is probably best</p>",
        "id": 399896248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698919389
    },
    {
        "content": "<p><code>__ : LocalRing A := ‹_›</code> would also work here, but that doesn't work in general</p>",
        "id": 399896465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698919449
    },
    {
        "content": "<p>Right! But at any rate you discourage naming the term <code>LocalRing A</code> to call it explicitely, right?</p>",
        "id": 399896555,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1698919483
    }
]