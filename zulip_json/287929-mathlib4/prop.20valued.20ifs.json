[
    {
        "content": "<p>Shouldn't these be <code>simp</code>able?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">True</span> <span class=\"k\">else</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">False</span> <span class=\"k\">else</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 392119487,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1695217071
    },
    {
        "content": "<p>The lhs is something where <code>simp</code> often gets stuck</p>",
        "id": 392119624,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1695217102
    },
    {
        "content": "<p><em>bump</em></p>",
        "id": 392499402,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1695382627
    },
    {
        "content": "<p>Guess I'll just add it as a simp lemma and see if anything breaks.</p>",
        "id": 392500330,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1695382935
    },
    {
        "content": "<p>Yeah I think those are reasonable simp lemmas</p>",
        "id": 392500728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695383107
    },
    {
        "content": "<p>How about the more general</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">q</span> <span class=\"k\">else</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 392501086,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695383246
    },
    {
        "content": "<p>That or <code>(if P then Q else R) ↔ (P ∧ Q ∨ ¬ P ∧ R)</code>?</p>",
        "id": 393695548,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1695902275
    },
    {
        "content": "<p>In practice I find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_eq_iff%27#doc\">docs#ite_eq_iff'</a> much easier to use than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_eq_iff#doc\">docs#ite_eq_iff</a> ...</p>",
        "id": 393725190,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695909131
    },
    {
        "content": "<p>Having implications like in Alex's formulation means you have access to <code>p</code> and <code>Not p</code> in <code>q</code> and <code>r</code> for example you do <code>simp (config := {contextual := true})</code></p>",
        "id": 393726061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695909303
    },
    {
        "content": "<p>Isn't the actual version we want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dite_prop</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">dite</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">forall_prop_of_false</span><span class=\"o\">,</span> <span class=\"n\">forall_prop_of_true</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 393726470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695909390
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite#doc\">docs#ite</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dite#doc\">docs#dite</a> are both semireducible, so you'd want that in addition, not instead of</p>",
        "id": 393729094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695909867
    }
]