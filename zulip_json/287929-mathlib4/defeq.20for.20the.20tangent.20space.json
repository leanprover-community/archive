[
    {
        "content": "<p>Some lemmas in <code>mathlib</code> (ab)use the definitional equality between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tangent_space\">docs3#tangent_space</a> and the model nored space using forced type cast.</p>",
        "id": 369239548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687628952
    },
    {
        "content": "<p>Lean 4 likes it less than Lean 3.</p>",
        "id": 369239594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687628982
    },
    {
        "content": "<p>I suggest that we add <code>TangentSpace.out</code> for this type of lemmas.</p>",
        "id": 369239729,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629033
    },
    {
        "content": "<p>Example lemmas: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mfderiv_add\">docs3#mfderiv_add</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mfderiv_congr_point\">docs3#mfderiv_congr_point</a></p>",
        "id": 369239844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629082
    },
    {
        "content": "<p>This non-reducible defeq is responsible for some of the remaining errors in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5454\">#5454</a></p>",
        "id": 369240843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629517
    },
    {
        "content": "<p>This was always an abuse (at least in the case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mfderiv_add#doc\">docs#mfderiv_add</a> which is the one I've thought about most) -- happy to see it wrapped in some way.</p>",
        "id": 369242144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687630110
    },
    {
        "content": "<p>BTW, is there any reason to use <code>1</code> instead of <code>.id</code> in lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tangent_bundle.continuous_linear_map_at_model_space\">docs3#tangent_bundle.continuous_linear_map_at_model_space</a>?</p>",
        "id": 369243358,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687630659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I think you wrote that lemma?  For sphere eversion maybe?</p>",
        "id": 369244699,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687631199
    },
    {
        "content": "<p>BTW, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5439\">#5439</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5451\">#5451</a> are ready for review</p>",
        "id": 369245824,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687631664
    },
    {
        "content": "<p>I think, it's easier to leave it as is for now (forcing types here and there) and decide later while forward-porting the sphere eversion project or writing some new code.</p>",
        "id": 369249007,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687633208
    },
    {
        "content": "<p>I'm away for an hour or two, so I marked <a href=\"https://github.com/leanprover-community/mathlib4/pull/5454\">#5454</a> as <code>help-wanted</code></p>",
        "id": 369250378,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687633884
    },
    {
        "content": "<p>Yes, I definitely did abuse some defeq of <code>tangent_space</code>. Maybe an explicit (continuous linear) equivalence is the way to go, but I conjecture it will be not very nice: the tangent space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>x</mi></msub><mo stretchy=\"false\">(</mo><mi>M</mi><mo>×</mo><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T_x(M \\times M&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> will then be only equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><msub><mi>π</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msub><mi>M</mi><mo>×</mo><msub><mi>T</mi><mrow><msub><mi>π</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msub><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">T_{\\pi_1(x)}M\\times T_{\\pi_2(x)}M&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0385em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1071em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, and I preferred to silently identify them.</p>",
        "id": 369503207,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687726364
    },
    {
        "content": "<p>OK, I'll leave it as is for now.</p>",
        "id": 369507370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687728591
    }
]