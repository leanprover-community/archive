[
    {
        "content": "<p>Should we have an unexpander for bounded existential quantifiers? In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Lean understands what I mean but displays <code>∃ n, n ∈ A ∧ P n : Prop</code> instead of <code>∃ n ∈ A, P n : Prop</code></p>",
        "id": 326455184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675803004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ε</span> <span class=\"c1\">-- ∀ (ε : ℝ), ε &gt; 0 → f ε : Prop</span>\n</code></pre></div>",
        "id": 326458954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675804366
    },
    {
        "content": "<p>Oh, it doesn't work even for bounded foralls!</p>",
        "id": 326459678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675804595
    },
    {
        "content": "<p>Apparently not! I only just noticed this because even though I've ported a bunch of Lean 4 code, I have still never really sat down to write new Lean 4 code from scratch, other than a few levels of NNG.</p>",
        "id": 326459912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675804681
    },
    {
        "content": "<p>Maybe it's time to port the tutorial and try testing it on a few people</p>",
        "id": 326460020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675804708
    },
    {
        "content": "<p>We could definitely port of the tutorial at this stage.</p>",
        "id": 326460127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675804758
    },
    {
        "content": "<p>It might be a good testcase for demonstrating mathport on a non-mathlib project</p>",
        "id": 326461943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675805417
    },
    {
        "content": "<p>That's a nice remark. Ideally someone having time should do it and write mathport doc along the way.</p>",
        "id": 326463009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675805799
    }
]