[
    {
        "content": "<p>Hello,</p>\n<p>While porting <code>RingTheory.Ideal.MinimalPrime</code> I'm getting an error I don't quite understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">OrderDual.toDual</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"bp\">↑</span><span class=\"n\">OrderDual.toDual</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>\n<p>I don't know what <code>↦</code> means in a <code>Type</code>.</p>",
        "id": 359933571,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684603588
    },
    {
        "content": "<p>Also, Lean is unable to infer <code>Ideal R</code> structure on <code>R</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">minimalPrimes</span> <span class=\"n\">R</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.32238</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.32238</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Ideal</span> <span class=\"bp\">?</span><span class=\"n\">m.54340</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.54339</span>\n</code></pre></div>\n<p>Here <code>R</code> is a commutative ring.</p>",
        "id": 359933647,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684603631
    },
    {
        "content": "<p>It sounds like the argument explicitness changed somewhere</p>",
        "id": 359934567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604050
    },
    {
        "content": "<p>R is a type not a term, so <code>R : ideal R</code> makes no sense. Yeah it looks like either some argument order or explicit/implicit has changed.</p>",
        "id": 359934803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684604172
    },
    {
        "content": "<p>What's the goal at the point where you run <code>refine' ⟨OrderDual.toDual (Inf c), ...</code>?</p>",
        "id": 359934804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604172
    },
    {
        "content": "<p>And what was the goal at that point in mathlib3?</p>",
        "id": 359934813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604184
    },
    {
        "content": "<p><code>fun x ↦ y</code> is just the new <code>\\lam x, y</code></p>",
        "id": 359934828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684604200
    },
    {
        "content": "<p>So here <code>(fun x ↦ Type u_1ᵒᵈ) (Inf ↑c)</code> is just <code>(Type u_1)ᵒᵈ</code>, which is nonsense</p>",
        "id": 359934870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604236
    },
    {
        "content": "<p>I see, I'll look back at the Lean3 code and try to find where some implicit/explicit argument changed. Thanks,</p>",
        "id": 359935053,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234146.20port.20RingTheory.2EIdeal.2EMinimalPrime/near/359934804\">said</a>:</p>\n<blockquote>\n<p>What's the goal at the point where you run <code>refine' ⟨OrderDual.toDual (Inf c), ...</code>?</p>\n</blockquote>\n<p>Can you answer this first?</p>",
        "id": 359935076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234146.20port.20RingTheory.2EIdeal.2EMinimalPrime/near/359934803\">said</a>:</p>\n<blockquote>\n<p>R is a type not a term, so <code>R : ideal R</code> makes no sense. Yeah it looks like either some argument order or explicit/implicit has changed.</p>\n</blockquote>\n<p>I probably phrased the question incorrectly. This the expression in Mathlib3 <code>p ∈ minimalPrimes R</code> that is not working here.</p>",
        "id": 359935174,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234146.20port.20RingTheory.2EIdeal.2EMinimalPrime/near/359935076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234146.20port.20RingTheory.2EIdeal.2EMinimalPrime/near/359934804\">said</a>:</p>\n<blockquote>\n<p>What's the goal at the point where you run <code>refine' ⟨OrderDual.toDual (Inf c), ...</code>?</p>\n</blockquote>\n<p>Can you answer this first?</p>\n</blockquote>\n<p><code>⊢ ∃ ub, ub ∈ { p | IsPrime p ∧ I ≤ ↑OrderDual.ofDual p } ∧ ∀ (z : (Ideal R)ᵒᵈ), z ∈ c → z ≤ ub</code></p>",
        "id": 359935265,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604429
    },
    {
        "content": "<p>Here's the entire goal window: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">case</span> <span class=\"n\">ih</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.1440</span>\n  <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span>\n  <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">S</span>\n  <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span>\n  <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">IsPrime</span> <span class=\"n\">J</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">IsPrime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">OrderDual.ofDual</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n  <span class=\"n\">hc'</span> <span class=\"o\">:</span> <span class=\"n\">IsChain</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n  <span class=\"n\">J'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span>\n  <span class=\"n\">hJ'</span> <span class=\"o\">:</span> <span class=\"n\">J'</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span>\n  <span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">ub</span><span class=\"o\">,</span> <span class=\"n\">ub</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">IsPrime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">OrderDual.ofDual</span> <span class=\"n\">p</span> <span class=\"o\">}</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">ub</span>\n  <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 359935324,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604461
    },
    {
        "content": "<p>That's very weird</p>",
        "id": 359935420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604522
    },
    {
        "content": "<p><code>OrderDual.toDual (Inf c)</code> sure looks like it has the intended type of <code>ub : (Ideal R)ᵒᵈ</code></p>",
        "id": 359935491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604552
    },
    {
        "content": "<p>So I have no idea why Lean tried to convert it into a type and then complained</p>",
        "id": 359935529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684604586
    },
    {
        "content": "<p>Is there way to coerce it artificially?</p>",
        "id": 359935766,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684604718
    },
    {
        "content": "<p>Does writing <code>(OrderDual.toDual (Inf c) :)</code> help?</p>",
        "id": 359936732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605224
    },
    {
        "content": "<p>Sadly no :( Same error persists</p>",
        "id": 359937083,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605394
    },
    {
        "content": "<p>You've sniped me, I'll load up gitpod and see what's going on</p>",
        "id": 359937192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605477
    },
    {
        "content": "<p>Oh, this one is easy</p>",
        "id": 359937650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605661
    },
    {
        "content": "<p>It's not called <code>Inf</code> any more, it's called <code>sInf</code></p>",
        "id": 359937675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684605668
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 359937852,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1684605763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 359938125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684605868
    }
]