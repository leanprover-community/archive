[
    {
        "content": "<p>I am reading the code in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FreeAlgebra.Rel#doc\">docs#FreeAlgebra.Rel</a> and I have 2 questions:</p>\n<ol>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/blob/0ca6e0291c787f67bf360c2201f292f793fb5357//Mathlib/Algebra/FreeAlgebra.lean#L124-L148\">the comments</a> are ported incorrectly, it has something incorrect like <code>central_scalar {r : R} {a : Pre R X} : Rel (r * a) (a * r)-- commutative additive semigroup</code> which mistakenly omitted a line break and added one after it compared to <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/free_algebra.html#free_algebra.rel\">mathlib 3</a>, thus turns a opening comment into a line comment that looks like a summarizing comment.</li>\n</ol>\n<p>It was confusing for me at first until I realized that it was a porting issue and became concerned about whether there are other cases like this in Mathlib 4. I wonder: Can they be detected and semi-auto-fixed? Is there such tooling available?</p>\n<ol start=\"2\">\n<li><code>FreeAlgebra.Rel</code> re-stated lots of <code>Prop</code>s of other type classes, then proved that it is an instance for these type classes. It works fine but I can't help to wonder: Why is this necessary? Is it still the best practice for similar constructs?  Is the rationale documented somewhere for similar scenarios?</li>\n</ol>",
        "id": 397825533,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697873206
    },
    {
        "content": "<p>For 2 it might be that the typeclass inference system needed some help to find the right path. Sometimes it can't get from A to D quickly without hints saying \"by the way you can go via B and C\". Without the hints the system might be slower and need a heartbeat bump.</p>",
        "id": 397825778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697873445
    },
    {
        "content": "<p>In general yes, but I wonder about the specifics, or how to play with it to gain more insights on this.</p>",
        "id": 397825918,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697873628
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> introduced a few type class path tricks but there are many more drastically different variants, and library notes, porting notes, and implementation details do not cover them all.</p>",
        "id": 397826063,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697873800
    },
    {
        "content": "<p>For 1, I don't think we're going to see anything automated, but feel free to open a PR to clarify</p>",
        "id": 397826287,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697874015
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7824\">#7824</a> (merged)</p>",
        "id": 397845070,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697889867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The canonical function `X → FreeAlgebra R X`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">irreducible_def</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">_</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>renders to <code>FreeAlgebra.ι = FreeAlgebra.wrapped✝.1</code> in Equations in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FreeAlgebra#doc\">docs#FreeAlgebra</a>.ι where <code>FreeAlgebra.wrapped✝</code>is less readable than Lean code and it links to <code>FreeAlgebra.wrapped._@.Mathlib.Algebra.FreeAlgebra._hyg.2002</code>but it doesn't exist.</p>\n<p>Is this a case that might be improved? <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 398014772,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698040438
    },
    {
        "content": "<p>In principle sure, but this is not something that doc-gen can improve as far as I can tell. I only read what the environment has to offer for me. If that is these declarations then I link to them in that way. If the env has other stuff to offer I show that.</p>",
        "id": 398015848,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698041050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/FreeAlgebra.2ERel/near/398015848\">said</a>:</p>\n<blockquote>\n<p>In principle sure, but this is not something that doc-gen can improve as far as I can tell. I only read what the environment has to offer for me. If that is these declarations then I link to them in that way. If the env has other stuff to offer I show that.</p>\n</blockquote>\n<p>Thanks, I thought it's something retrievable from environment. I'll keep it in mind and revisit when I learn more about what the environment has to offer in similar cases.</p>\n<p>Doc-gen4 (and the old docgen) usually spell mathematics better than code, particularly when it flattens things so what's hidden in complicated hierarchy/induction in code is revealed in doc. But in some cases, the code expressed the semantics clearly in the un-elaborated form but lost in the elaborated result, like this one.</p>",
        "id": 398037295,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698050199
    }
]