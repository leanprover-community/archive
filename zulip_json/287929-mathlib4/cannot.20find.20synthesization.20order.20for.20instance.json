[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5662\">#5662</a>, Lean doesn't accept the definition of <code>class ModularFormClass</code> with the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">ModularFormClass.toSlashInvariantFormClass</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ModularFormClass</span> <span class=\"n\">F</span> <span class=\"bp\">Γ</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">SlashInvariantFormClass</span> <span class=\"n\">F</span> <span class=\"bp\">Γ</span> <span class=\"n\">k</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">ModularFormClass</span> <span class=\"n\">F</span> <span class=\"bp\">?Γ</span> <span class=\"bp\">?</span><span class=\"n\">k</span>\n</code></pre></div>\n<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.ModularForms.SlashInvariantForms</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Complex.UpperHalfPlane.Manifold</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">UpperHalfPlane</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span> <span class=\"n\">Manifold</span> <span class=\"n\">UpperHalfPlane</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"SL(\"</span> <span class=\"n\">n</span> <span class=\"s2\">\", \"</span> <span class=\"n\">R</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Matrix.SpecialLinearGroup</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ModularFormClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">SlashInvariantFormClass</span> <span class=\"n\">F</span> <span class=\"bp\">Γ</span> <span class=\"n\">k</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 371619268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688269477
    },
    {
        "content": "<p>Ah, adding <code>outParam</code>s helps.</p>",
        "id": 371619428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688269551
    },
    {
        "content": "<p>For those coming from search: you can find a minimal example with solution here: <a href=\"https://github.com/DenisGorbachev/lean-error-resolutions/blob/main/errors/cannot-find-synthesization-order.md\">https://github.com/DenisGorbachev/lean-error-resolutions/blob/main/errors/cannot-find-synthesization-order.md</a></p>",
        "id": 383491763,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1691642144
    }
]