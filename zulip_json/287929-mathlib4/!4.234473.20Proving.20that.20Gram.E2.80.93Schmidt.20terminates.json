[
    {
        "content": "<p>The following recursive definition of the Gram–Schmidt process doesn't work in Lean 4; how can I get it to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.Block</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">Submodule</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrderBot</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsWellOrder</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">IsWellOrder.toHasWellFounded</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"⟪\"</span> <span class=\"n\">x</span> <span class=\"s2\">\", \"</span> <span class=\"n\">y</span> <span class=\"s2\">\"⟫\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_Iio.1</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 361989660,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685377024
    },
    {
        "content": "<p>try <code>have : i &lt; n := ...</code> inside the sigma</p>",
        "id": 361989833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377087
    },
    {
        "content": "<p>As it is I get a huge number of identical copies of the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.mp</span> <span class=\"n\">mem_Iio</span> <span class=\"n\">i.property</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_Iio.1</span> <span class=\"n\">i.2</span>\n    <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I'm instead getting this error on <code>gramSchmidt f i</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">LocallyFiniteOrderBot</span> <span class=\"n\">ι</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">ι</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>\n<p>And I believe that my <code>termination_by</code> is correct since <code>n</code> is of the well-founded type <code>ι</code></p>",
        "id": 361990348,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685377270
    },
    {
        "content": "<p>oh, I just noticed that you are doing well founded recursion on a weird type</p>",
        "id": 361990607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377352
    },
    {
        "content": "<p>It needs to be something with a <code>WellFoundedRelation</code> instance, not sure if <code>IsWellOrder</code> implies that</p>",
        "id": 361990703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377386
    },
    {
        "content": "<p>Ultimately all of this is from <a href=\"https://github.com/leanprover-community/mathlib4/pull/4473\">!4#4473</a>. I can see that the induction is on <code>n : ι</code>; given that I have <code>[LinearOrder ι] [LocallyFiniteOrderBot ι] [IsWellOrder ι (· &lt; ·)]</code> how can I get a proper <code>WellFoundedRelation</code> from this, and state <code>termination_by</code> correctly?</p>",
        "id": 361991476,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685377658
    },
    {
        "content": "<p>Note that in the <code>  (invImage (fun a ↦ a) instWellFoundedRelation).1 (↑i) a✝ : Prop</code> error message, if you dig down into <code>instWellFoundedRelation</code> you will notice that it uses <code>instSizeOf</code>, i.e. the default well order on any type which comes from the default sizeof which makes everything 0, which is the empty relation</p>",
        "id": 361995601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685379088
    },
    {
        "content": "<p>oh, and using <code>termination_by' IsWellOrder.toHasWellFounded</code> fails because of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsWellOrder</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>...which is true, the well order instance is not in the context</p>",
        "id": 361996003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685379235
    },
    {
        "content": "<p>this is really interesting. The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrderBot</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">IsWellOrder</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">IsWellOrder.toHasWellFounded</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span>\n  <span class=\"n\">n</span>\n</code></pre></div>\n<p>gives <code>unknown identifier 'inst'</code> at the <code>have := inst</code> line. Apparently, the full set of variables is available in the body of the definition, but once it is processed anything which was not referenced is not included in the context for the <code>termination_by</code> and other clauses</p>",
        "id": 361996938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685379533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234473.20Proving.20that.20Gram.E2.80.93Schmidt.20terminates/near/361996938\">said</a>:</p>\n<blockquote>\n<p>The following works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrderBot</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">IsWellOrder</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">IsWellOrder.toHasWellFounded</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">;</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>no it still gives <code>unknown identifier 'inst'</code> at the <code>have := inst</code> line</p>",
        "id": 361998641,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685380138
    },
    {
        "content": "<p>note the modification to the <code>variable</code> line</p>",
        "id": 361998777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685380203
    },
    {
        "content": "<p>oh</p>",
        "id": 361998892,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685380235
    },
    {
        "content": "<p>(this is the sort of situation where one wishes for the <code>include</code> command)</p>",
        "id": 361999122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685380326
    },
    {
        "content": "<p>another alternative is to put the <code>[IsWellOrder ι (· &lt; ·)]</code> argument on the definition itself instead of in a variable</p>",
        "id": 361999188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685380356
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidt</span> <span class=\"o\">[</span><span class=\"n\">IsWellOrder</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Iio</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">orthogonalProjection</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"bp\">∙</span> <span class=\"n\">gramSchmidt</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">exact</span> <span class=\"n\">mem_Iio.1</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 361999388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685380443
    },
    {
        "content": "<p>OK, that works; I've just pushed it</p>",
        "id": 362001050,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685381022
    },
    {
        "content": "<p>The next error I can't seem to fix is at <code>gramSchmidtOrthonormalBasis</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gramSchmidtOrthonormalBasis</span> <span class=\"o\">:</span> <span class=\"n\">OrthonormalBasis</span> <span class=\"n\">ι</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">gramSchmidt_orthonormal'</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_orthonormalBasis_extension_of_card_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n</code></pre></div>\n<p>the error being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Orthonormal.exists_orthonormalBasis_extension_of_card_eq</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">gramSchmidt_orthonormal'</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">gramSchmidt_orthonormal'</span> <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">gramSchmidtNormed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Orthonormal</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">restrict</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">gramSchmidtNormed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.424507</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>In mathlib3 the <code>restrict</code> was applied automatically</p>",
        "id": 362016103,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685386385
    },
    {
        "content": "<p>how to fix this?</p>",
        "id": 362016144,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685386402
    },
    {
        "content": "<p>Anyone?</p>",
        "id": 362025641,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1685390434
    }
]