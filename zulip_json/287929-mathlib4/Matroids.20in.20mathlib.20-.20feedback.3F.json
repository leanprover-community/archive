[
    {
        "content": "<p>I'm making this post to solicit feedback on my lean4 matroid repo : <a href=\"https://github.com/apnelson1/Matroid\">https://github.com/apnelson1/Matroid</a></p>\n<p>This work has undergone many iterations in the last couple of years,  including huge refactors to make it more sane, and most recently a porting to lean4; now I think it's basically in a decent state for mathlib . The reason I haven't PRed it yet is that I'm waiting on a couple of PRs currently in the queue (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5911\">#5911</a>) to give me some API for <code>enat</code> set cardinality and some minimality/maximality stuff that I need. (This is all in the <code>ForMathlib</code> subfolder). </p>\n<p>I'm imagining that the sequence of PRs for the project itself will take quite some reviewing, since this adds up to a lot of new stuff, so I'm hoping to get a jump on at least the first one by inviting anyone interested to take a look now. </p>\n<p>The first PR will be the contents of the file <a href=\"https://github.com/apnelson1/Matroid/blob/main/Matroid/Basic.lean\">https://github.com/apnelson1/Matroid/blob/main/Matroid/Basic.lean</a>, which defines matroids, and contains definitions of bases, independence, and bases of sets, and gives a few different constructors for matroids via sets of axioms.  The docstring contains a detailed discussion of what I would consider the important design decisions. These decisions are mostly my own, and I'd be very happy to learn from experts how I could improve things.  </p>\n<p>The rest of the project is less well-document but I think it's nearly all in good shape - it contains around 5k loc,  with API for the majority of basic matroid notions including duality, minors, circuits, closure, flats, hyperplanes, uniform matroids, the rank function, and relaxation. Apart from one or two leaf files, it's all <code>sorry</code>-free. </p>\n<p>Notable omissions are linear representations of matroids and graph representations of matroids, which are important topics but are still work in progress.</p>",
        "id": 377143033,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689900350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> I'll review <a href=\"https://github.com/leanprover-community/mathlib4/pull/5908\">#5908</a> tomorrow.</p>",
        "id": 377159478,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689907725
    },
    {
        "content": "<p>Just to comment: For having helped Alena a bit with her sorries, I think the entire repo needs a general cleanup and design review. Once that's done, in mathlib it goes.</p>",
        "id": 377191213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689922231
    },
    {
        "content": "<p>Yes, a design review is what I'm asking for. Do you have any specific comments?</p>",
        "id": 377307546,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689947333
    },
    {
        "content": "<p>Having only looked very briefly: is there a reason you need the ground set in matroids vs using the type directly?</p>",
        "id": 377319685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689949473
    },
    {
        "content": "<p>For instance, why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Matroid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exists_base'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Base</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">base_exchange'</span> <span class=\"o\">:</span> <span class=\"n\">Matroid.ExchangeProperty</span> <span class=\"n\">Base</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maximality'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Matroid.ExistsMaximalSubsetProperty</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Base</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">Matroid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">ground</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Base</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">exists_base'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Base</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">base_exchange'</span> <span class=\"o\">:</span> <span class=\"n\">Matroid.ExchangeProperty</span> <span class=\"n\">Base</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">maximality'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">⊆</span> <span class=\"n\">ground</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Matroid.ExistsMaximalSubsetProperty</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Base</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">·</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">subset_ground'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Base</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">ground</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 377319949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689949518
    },
    {
        "content": "<p>Yes, this is discussed in the docstring at the top. It's basically because of how often one needs to consider a number of related matroids on related but distinct ground sets.</p>",
        "id": 377320038,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689949535
    },
    {
        "content": "<p><a href=\"https://github.com/apnelson1/Matroid/blob/main/Matroid/Basic.lean#L70\">https://github.com/apnelson1/Matroid/blob/main/Matroid/Basic.lean#L70</a></p>",
        "id": 377320089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689949547
    },
    {
        "content": "<p>Many of the concerns there feel like they could also be applied to vector spaces, which we solved by having a separate <code>Module _ V</code> typeclass and a <code>Submodule R V</code> structure (and <code>ModuleCat.{R} _</code> which bundles the ground type). Would a similar approach work for matroids, or are they not similar enough for the analogy to hold?</p>",
        "id": 377322293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689949966
    },
    {
        "content": "<p>I was thinking about this earlier today, comparing it to the choices made for graphs. For graphs, this would affect graph homomorphisms, since a graph homomorphism is a map on vertices that carries adjacent vertices to adjacent vertices. If they used ground sets, then you'd need to either work with functions on the ambient type that restrict to the ground sets or with functions on the subtypes. With the first, you lose extensionality, and with the second, you have the annoyance of subtypes.</p>\n<p>Are matroid homomorphisms used much in the literature? I once saw a definition for strong maps (inverse images of flats are flats), but I have no idea how important these are.</p>",
        "id": 377322624,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689950033
    },
    {
        "content": "<p>(For simple graphs, there <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph#doc\">docs#SimpleGraph</a> with a fixed vertex type and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph#doc\">docs#SimpleGraph.Subgraph</a> for bundling in a ground set; here you can use the coincidence that the Subgraphs of the complete graph give you the alternative definition of a simple graph. Only SimpleGraph has homomomorphisms. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think this is closer of an analogy than Module/Submodule.)</p>",
        "id": 377323645,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689950222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matroids.20in.20mathlib.20-.20feedback.3F/near/377322293\">said</a>:</p>\n<blockquote>\n<p>Many of the concerns there feel like they could also be applied to vector spaces, which we solved by having a separate <code>Module _ V</code> typeclass and a <code>Submodule R V</code> structure (and <code>ModuleCat.{R} _</code> which bundles the ground type). Would a similar approach work for matroids, or are they not similar enough for the analogy to hold?</p>\n</blockquote>\n<p>To be fair, converting between these different POVs can be quite painful. (i) The DG-algebra challenge is still an open problem. (ii) Working with graded rings/modules is not as smooth in Lean as in the informal counterpart.</p>",
        "id": 377324166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689950319
    },
    {
        "content": "<p>Strong/weak maps do show up, but aren't particularly central, at least to the research on my personal radar. (I have weak maps defined in my lean3 repo, where I hadn't yet adopted this 'ground set is a <code>Set</code>' approach). </p>\n<p>A similar issue shows up when I define matroid isomorphisms in the <code>Equiv</code>file. They are defined using <code>LocalEquiv</code>, which is a little awkward. Dealing with minors, which are everywhere in the literature, is so absolutely hellish if the ground set is a type, that I've learned to live with such things.</p>",
        "id": 377324460,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689950381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I agree that the Module/Submodule/ModuleCat design may not be perfect; but there's a lot of value to using the same approach throughout mathlib for consistency</p>",
        "id": 377324766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689950437
    },
    {
        "content": "<p>I've thought about the module/submodule analogy; in fact, it kinda got me to where I am now with this. For matroid theory, one ends up being drawn towards absolutely everything in the API existing for the analogous object to a <code>Submodule</code>, and getting to a point where the <code>Module</code> object is secondary.</p>",
        "id": 377325216,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689950532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matroids.20in.20mathlib.20-.20feedback.3F/near/377324766\">said</a>:</p>\n<blockquote>\n<p>there's a lot of value to using the same approach throughout mathlib for consistency</p>\n</blockquote>\n<p>Just so long as it's not a <a href=\"https://en.wikipedia.org/wiki/Wikipedia:Emerson_and_Wilde_on_consistency\">foolish consistency</a>.</p>\n<p>Already it's different because Module/Submodule/ModuleCat is designed around using typeclasses for implementing the usual synecdoche (that <code>M</code> <em>is</em> a module). Matroids don't use synecdoche.</p>",
        "id": 377325456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689950582
    },
    {
        "content": "<p>Typeclasses also implement transparent coercions between different structures in the algebraic hierarchy, but I'm not sure matroids need that either.</p>",
        "id": 377326108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689950710
    },
    {
        "content": "<p>I think the concrete problem with the ground set being a type is that you can't talk about minors reasonably. See the lemmas here, for example : <a href=\"https://github.com/apnelson1/Matroid/blob/main/Matroid/Minor.lean#L560\">https://github.com/apnelson1/Matroid/blob/main/Matroid/Minor.lean#L560</a> </p>\n<p>They are mathematically trivial, but would have formal statements involving canonical maps between images/preimages of coercions of four sets between multiple subtypes, subtypes of subtypes, etc.  I tried this for a long long time, becoming intimately familiar with <code>preimage_image_coe</code>-type lemmas, but it just isn't sustainable.</p>",
        "id": 377326919,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689950863
    },
    {
        "content": "<p>Another potential design for minors (which definitely involves a tradeoff) is to introduce another type that records what should be deleted and what should be contracted. This at least works for graphs (you record a set of edges to keep and a subset of those edges to contract), but the issue is that you can't apply any theorems about graphs to minors without using a toGraph function.</p>\n<p>It seems that the reasons for wanting this in graphs (such as avoiding quotient types until you really need them) don't apply to matroids though.</p>",
        "id": 377329074,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689951253
    },
    {
        "content": "<p>It's nice that for matroids with an embedded ground set you can get contraction-deletion as an <code>Eq</code></p>",
        "id": 377329475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689951346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matroids.20in.20mathlib.20-.20feedback.3F/near/377329475\">said</a>:</p>\n<blockquote>\n<p>It's nice that for matroids with an embedded ground set you can get contraction-deletion as an <code>Eq</code></p>\n</blockquote>\n<p>Yes. The first time I used <code>rw</code> with such an equality (after months of DTT hell) filled me with joy!</p>",
        "id": 377329764,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689951397
    },
    {
        "content": "<p>I actually think a similar approach <em>might</em> be reasonable for minors in graph theory in some cases. If you have an embedded edge and vertex set, then you can contract an edge uv by choosing one of the ends uv to contract it to, so you get a graph whose vertex and edge sets live in the same type, avoiding quotients. Tradeoffs abound, of course.</p>",
        "id": 377330788,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689951593
    },
    {
        "content": "<p>Yeah, though it's too bad that choosing representatives isn't very stable (ex: contracting an edge between two contracted components yields a representative that might have no relation to either components' representative), and the edge set won't generally be a subset of the original edge set.</p>",
        "id": 377332102,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689951828
    },
    {
        "content": "<p>the edge set will still be a subset if you have an edge type (if you're doing anything with minors, this seems almost a necessity to me)</p>",
        "id": 377332390,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689951875
    },
    {
        "content": "<p>(to be clear, I mean a type in which the edges are an embedded set)</p>",
        "id": 377333052,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689951996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Matroids.20in.20mathlib.20-.20feedback.3F/near/377322624\">said</a>:</p>\n<blockquote>\n<p>Are matroid homomorphisms used much in the literature? I once saw a definition for strong maps (inverse images of flats are flats), but I have no idea how important these are.</p>\n</blockquote>\n<p>On this topic, much of the interest of strong/weak maps can be captured in the special case where they are between two matroids on the same ground set; so my approach doesn't rule that out. Homomorphisms aren't really well-defined for general matroids, but they are pretty much just linear maps in the representable case, and that is quite compatible with the 'embedded ground sets' approach as well; elements outside the ground set are just 'zero'.</p>",
        "id": 377342457,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689953723
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6352\">#6352</a><br>\nI started this before my kid was born; he's now 2.5 years old and I'm finally making a matroid PR!</p>",
        "id": 381583918,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1691088757
    }
]