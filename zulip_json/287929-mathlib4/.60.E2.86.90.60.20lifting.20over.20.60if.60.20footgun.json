[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, is <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Lift.lean#L167\">this</a> another example of the <code>←</code> lifting over <code>if</code> footgun? (Admittedly a relatively harmless one.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">hUsing.isNone</span> <span class=\"k\">then</span> <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">prf.mvarId</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 379342271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509825
    },
    {
        "content": "<p>i.e. <code>getGoals</code> will be invoked regardless of the value of <code>hUsing.isNone</code>.</p>",
        "id": 379342318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509844
    },
    {
        "content": "<p>and the preferred way to write this is just to add a <code>do</code>, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">hUsing.isNone</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"n\">withMainContext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">setGoals</span> <span class=\"o\">(</span><span class=\"n\">prf.mvarId</span><span class=\"bp\">!</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 379342388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690509876
    },
    {
        "content": "<p>yes</p>",
        "id": 379342654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690509994
    },
    {
        "content": "<p>I would put the <code>do</code> after the <code>withMainContext</code>, although I guess it probably doesn't matter what context you run <code>getGoals</code> in</p>",
        "id": 379342737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510046
    },
    {
        "content": "<p>Yikes, what about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Parse an integer -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">parseInt</span> <span class=\"o\">:</span> <span class=\"n\">Parsec</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">peek</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"sc\">'-'</span> <span class=\"k\">then</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">parseNat</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">parseNat</span>\n</code></pre></div>\n<p>from <code>Mathlib/Tactic/Sat/FromLRAT.lean</code>.</p>",
        "id": 379342849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510105
    },
    {
        "content": "<p>Doesn't that run the <code>parseNat</code> twice in the negative branch?</p>",
        "id": 379342881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510137
    },
    {
        "content": "<p>Oh, actually I take it back, both this and the previous example are not the footgun case</p>",
        "id": 379342926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510169
    },
    {
        "content": "<p>because this is the <code>if</code> doElem, not the <code>if</code> expr</p>",
        "id": 379342941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510181
    },
    {
        "content": "<p>Aha!</p>",
        "id": 379342951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510190
    },
    {
        "content": "<p>the <code>if</code> doElem doesn't have the same issue because the lifting stops when you get to the surrounding doSeq</p>",
        "id": 379342965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510202
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">arg.occurs</span> <span class=\"n\">i</span> <span class=\"bp\">||</span> <span class=\"n\">l</span> <span class=\"bp\">!=</span> <span class=\"n\">Level.zero</span>\n      <span class=\"k\">then</span> <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Exists</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">mkLambdaFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">arg</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">And</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>from <code>Mathlib.Tactic.MkIffInductiveProp.lean</code> is an example?</p>",
        "id": 379343157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510302
    },
    {
        "content": "<p>yes</p>",
        "id": 379343169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690510312
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6199\">#6199</a>. That was the only one I could readily find by grepping for <code>←</code> near a <code>then</code> or <code>else</code>.</p>",
        "id": 379343908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690510724
    }
]