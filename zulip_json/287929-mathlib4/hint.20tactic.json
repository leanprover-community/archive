[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">37</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">35</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">72</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8363\">#8363</a></p>",
        "id": 401590224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699776358
    },
    {
        "content": "<p>This uses <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>'s lovely \"Try these:\" widget from <a href=\"https://github.com/leanprover/std4/pull/215\">std4#215</a>.</p>",
        "id": 401591194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699777326
    },
    {
        "content": "<p>New meta-game: when new users' tactic questions are not answered by <code>hint</code>, wonder if <code>hint</code> should be powered up.</p>",
        "id": 401591234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699777389
    },
    {
        "content": "<p>Cool. Next step: as the user writes <code>:=</code>, in the background fire off <code>hint</code>, and present the first closing tactic as auto completion, so that theorem proving becomes a game of “write lemma, :=, TAB, write lemma, :=, TAB…”</p>",
        "id": 401591388,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699777562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n</code></pre></div>\n<p>Should hint be powered up?</p>",
        "id": 401591544,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699777705
    },
    {
        "content": "<p>I have an ancient PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4109\">#4109</a> which fires off <code>exact?</code> every time your cursor is at a sorry. People complained about their CPUs melting, so it was sadly never merged.</p>",
        "id": 401591755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699777937
    },
    {
        "content": "<p>While auto-running tactics might be too expensive, a code action to replace sorries (or complete <code>:=</code>'s?) with <code>by hint</code> or <code>exact?%</code> might still save a keystroke or two!</p>",
        "id": 401592353,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699778546
    },
    {
        "content": "<p>(If we get fancier, maybe we could use an option (e.g. <code>set_option autoRunTactics true</code>) to control whether you see <code>Try this: by hint</code> or whether you eagerly auto-run <code>hint</code> given the cursor position?)</p>",
        "id": 401592360,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699778554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/hint.20tactic/near/401591544\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">hint</span>\n</code></pre></div>\n<p>Should hint be powered up?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">email</span> <span class=\"n\">Kevin</span> <span class=\"n\">Buzzard</span> <span class=\"n\">and</span> <span class=\"n\">ask</span> <span class=\"n\">how</span> <span class=\"n\">it's</span> <span class=\"n\">going</span>\n</code></pre></div>",
        "id": 401592471,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699778659
    },
    {
        "content": "<p>Auto-running tactics certainly needs careful tuned settings to not melt the CPU and stay interactive, maybe a <code>fast_hint</code> variant. But it's worth it!</p>\n<p>The competition (Isabelle) does it already. Furthermore, it even auto-runs tactics on the negation of the lemma, and an amazing tool called nitpick (like Haskell's quick check), which even gives counterexamples!<br>\nThis saves a lot of time when otherwise you'd start embarking on a proof only to notice later that you make some typo or forgot an hypothesis.</p>\n<p>So much to do… :-)</p>",
        "id": 401594778,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699780126
    },
    {
        "content": "<p>We have a basic implementation of <code>slim_check</code> in Mathlib.</p>",
        "id": 401595160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699780297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402693472,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1700226030
    }
]