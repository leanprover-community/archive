[
    {
        "content": "<p>I've been playing around with <a href=\"/user_uploads/3121/YNpF4zzCNEydcxtFJao9yPxW/image.png\">getting MathJax to run in the infoview</a>, purely as a personal exercise to learn ProofWidgets:</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YNpF4zzCNEydcxtFJao9yPxW/image.png\" title=\"getting MathJax to run in the infoview\"><img src=\"/user_uploads/3121/YNpF4zzCNEydcxtFJao9yPxW/image.png\"></a></div><p>This isn't an Expr pretty-printer—that's just the raw pretty-printed text fed naively to MathJax! The point here was just to learn ProofWidgets and see if I could even get MathJax running. :) (Has this been explored elsewhere already?)</p>\n<p>But, beyond this extremely simple proof-of-viability, I was wondering if anyone had any thoughts about whether we actually want to pursue pretty-printing of math in the Lean interface in any way. Searching zulip reveals <a href=\"#narrow/stream/113488-general/topic/Underscores.20and.20over.20scores/near/319032784\">some interest</a>, as well as a possible extant <a href=\"#narrow/stream/270676-lean4/topic/Best.20lim.20in.20unicode.3F/near/328329994\">LaTeX pretty-printer for <code>Expr</code></a> (in the works as of Feb)? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n<p>Some thoughts in this area:</p>\n<ul>\n<li>Presumably the first priority is <strong>not obscuring the underlying expression</strong> (as mentioned in the first linked thread). We'd definitely want to (at least) show the underlying Expr on hover (perhaps on click as well?), and have toggles in the infoview and/or a <code>set_option</code> for turning off this sort of pretty-printing quickly. An option to show both at once might even be useful.</li>\n<li>It would be powerful to have the option to \"delaborate to interactive HTML\" in the tactic state—<code>expr_presenter</code>s but without the isolation in a separate panel. If all hypotheses could be displayed in LaTeX at once, that would be beautiful. (The ability to extensibly customize the rendering of the tactic state in general also might allow people to build some really interesting things.) Again, transparency and ease of turning this off would be essential.</li>\n<li>It's no more than an idea at this point, but I wonder if with some work we could eventually enable LaTeX-like <strong>input</strong>—and in-place rendering—in VS code by creating a VS code <a href=\"https://code.visualstudio.com/api/extension-guides/custom-editors\">custom editor</a> via the extension. Everything would look the same except for syntax/exprs which were deemed eligible for LaTeX pretty-printing, which would be replaced with nicely-rendered LaTeX. We'd probably want to maintain a strict correspondence between LaTeX and syntax/Expr's—that way, parsed and/or elaborated lean code could be automatically pretty-printed without special annotations everywhere, and latex input wouldn't have to be saved anywhere in the file (it could be recovered from ordinary lean syntax simply by re-parsing/elaborating and then pretty-printing). This would mean Lean and Lean code could remain fundamentally unchanged while the extension does the majority of the work. There would be challenges, of course, like saving size info to prevent major reflows upon re-elaboration and, of course, making the underlying lean code easily accessible through interactivity—but these are not insurmountable with some work, and it seems at least...plausible. :)</li>\n</ul>\n<p>Thoughts?</p>",
        "id": 377383891,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689962097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Great! We'd been wanting to connect up our LaTeX pretty printer to the info view using MathJax and ProofWidgets, but we hadn't gotten around to it yet. The main interface is basically a function <code>Expr -&gt; MetaM String</code>, so it should be easy to hook it into what you have.</p>",
        "id": 377388868,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689963000
    },
    {
        "content": "<p>We've also been meaning to publish a repository for the LaTeX pretty printer portion of our project</p>",
        "id": 377389290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689963075
    },
    {
        "content": "<p>Regarding hypotheses, we also have another sort of pretty printer that can be used for turning the whole local context into a mix of English and LaTeX, and we wanted to try hooking this into the info view as well.</p>",
        "id": 377390101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689963292
    },
    {
        "content": "<p>Would you mind sharing the code at some point?</p>",
        "id": 377390397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689963368
    },
    {
        "content": "<p>Whoa, nice!</p>\n<blockquote>\n<p>We'd definitely want to (at least) show the underlying Expr on hover (perhaps on click as well?).</p>\n</blockquote>\n<p>From the UI perspective I think this could work. MathJax wants to show its own dropdown on right-click, but it doesn't seem to handle click or hover. It would probably be a change to the <code>ExprPresentation</code> component in ProofWidgets.</p>\n<blockquote>\n<p>and have toggles in the infoview and/or a <code>set_option</code> for turning off this sort of pretty-printing quickly</p>\n</blockquote>\n<p>I was thinking of having a single dropdown which determines the default way to display <code>Expr</code>s. If you don't want LaTeX, you change the default to <code>standard</code> (or whichever word). There is a design issue <a href=\"https://github.com/EdAyers/ProofWidgets4/issues/4\">here</a>.</p>\n<blockquote>\n<p>It would be powerful to have the option to \"delaborate to interactive HTML\" in the tactic state—expr_presenters but without the isolation in a separate panel.</p>\n</blockquote>\n<p>I had written down some initial notes on the design of inline Expr presentations in ProofWidgets <a href=\"https://github.com/EdAyers/ProofWidgets4/issues/8\">here</a>. <code>expr_presenter</code>s are definitely not tied to being in a separate panel :) That's just one way to display them.</p>",
        "id": 377390881,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689963515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LaTeX.20in.20Lean.3F/near/377390397\">said</a>:</p>\n<blockquote>\n<p>Would you mind sharing the code at some point?</p>\n</blockquote>\n<p>Of course! (I.e., I wouldn't mind!) :) I'll try to get it into a not-so-hacky state later today or tomorrow.</p>\n<p>It's quite simple, but there are some implementation considerations to think about. Namely, this uses MathJax's conversion of tex to svg. I'm not sure if that's what we want—it might be better to use common html and fonts (I'm not sure what the tradeoffs are). However, I ran into some <code>access-denied</code> issues when trying to use the local copies of those fonts, possibly related to <a href=\"https://github.com/microsoft/vscode/issues/102959\">this issue</a>. I tried solving it by modifying the MathJax source appropriately, but ran into some npm issues that I'm not sure how to debug—but this isn't to say that they're undebuggable! :)</p>",
        "id": 377392156,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689963842
    },
    {
        "content": "<p>Nice! How easy would it be to swap out MathJax for Katex (or something else)?</p>",
        "id": 377392578,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689963952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> We're using the CDN in our own project because we ran into issues like that too, but it would be nice not to need Internet access when using this!</p>",
        "id": 377392827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689964013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LaTeX.20in.20Lean.3F/near/377392578\">said</a>:</p>\n<blockquote>\n<p>Nice! How easy would it be to swap out MathJax for Katex (or something else)?</p>\n</blockquote>\n<p>It all depends on the internals! MathJax works by creating a global JS object, for example, and puts all its functionality in there; I'm not sure how KaTeX works.</p>",
        "id": 377393974,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689964269
    },
    {
        "content": "<p>That reminds me of more implementation considerations: there might be a better way to set up this object; also, (a)synchronous concerns might be relevant. MathJax provides several ways to typeset math—<code>typeset</code> (which acts on the whole page or on selected elements), <code>typesetPromise</code>, and modular converters like <code>tex2svg</code>. If we have lots of LaTeX in view, when and how we render it (and how it gets stored—MathJax keeps track of what it renders!) will become relevant. It could be useful to do all the rendering \"in one go\" at the end if that would somehow be possible—or maybe that's not actually more efficient. I'm not sure yet! :)</p>",
        "id": 377395217,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689964550
    },
    {
        "content": "<p>I think when making conference presentations in html, I found that KaTeX was generally more performant than mathjax</p>",
        "id": 377399129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689965434
    },
    {
        "content": "<p>I imagine a goal view being frequently changed might benefit from that performance</p>",
        "id": 377399231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689965458
    },
    {
        "content": "<p>I also found that their native node package was easier to work with.</p>",
        "id": 377401323,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689965971
    },
    {
        "content": "<p>It would definitely be useful to experiment with both! I'll see if I can get them both working...</p>",
        "id": 377402733,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689966311
    },
    {
        "content": "<p>In our demo, we use a virtual dom (via mithril.js) and have a MathJaxComponent that manages the MathJax lifecycle (so calls <code>MathJax.typesetPromise</code> when contents change and <code>MathJax.typesetClear</code> when the dom element is being removed). It was fiddly to get it to work, and there are still some timing bugs in the mouseovers where the popups are in slightly different positions depending on whether it's showing equations that MathJax has rendered before.</p>",
        "id": 377406257,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689967110
    },
    {
        "content": "<p>This is an excellent idea to do some (MathJaX/KaTeX) pretty-printing in infoview, and also possibly on the input editor side. It has the potential to make Lean notation considerably more readable for mathematicians and math students, and at the same time preserving the original Lean syntax.</p>",
        "id": 377428420,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1689973733
    },
    {
        "content": "<p>I don't think it's really possible on the input editor</p>",
        "id": 377432141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689975013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110698\">@Peter Jipsen</span> It would be nice to have an <code>ASCIIMathLean</code> similar to your <a href=\"https://www1.chapman.edu/~jipsen/asciimath.html\">ASCIIMathML</a>. Do you have thoughts about this?</p>",
        "id": 377475925,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689995847
    },
    {
        "content": "<p>I think the \"mathematical expression\" syntax of Lean (i.e. some vaguely defined small subset of Lean syntax) is the appropriate analogue of ASCIIMathML, and the Lean-&gt;LaTeX translator that Kyle and Patrick have written already does the job. Whether this can be used for the VS code input editor is a technical question. It would be useful even if it is only a reading mode, as long as hovering on expressions still provides the same information (in infoview it can of course be used interactively, and in editing mode it could perhaps be used for all lines that do not currently contain the cursor).</p>",
        "id": 377649701,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1690045955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I have a somewhat busy weekend, but a basic/hacky version of the code—but with comments on what I've learned and tried so far (at least with respect to what I've committed; more to come)—is available  in <code>Mathlib.Tactic.Widget.LaTeX</code> on the <code>thorimur/latexperiments</code> branch of mathlib4. (I'll leave it up to the reader to decide how to actually pronounce that portmanteau. :) )</p>\n<p>I'm going to keep adding to this branch over the coming days to include the rest of what I've tried (incl. what I've noticed hasn't worked), different approaches, and KaTeX, which looks pretty painless. I'll update here as I do more experimenting. :)</p>",
        "id": 377740827,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690091519
    },
    {
        "content": "<p>I've been hitting a bit of a wall with producing vscode URI's so that I can access fonts. (This is necessary for both MathJax and KaTeX.) This involves using definitions from the <a href=\"https://code.visualstudio.com/api/references/vscode-api\">vscode API</a> like <code>Uri.file</code>.</p>\n<p>However, the vscode API is not accessible from the point at which the widget's javascript will be run. I tried creating a new package solely for bundling the vscode function(s) I needed, but rollup.js hits me with <code>(!) Unresolved dependencies</code>—it can't find <code>vscode</code> even though it's installed in the package. Maybe I'm doing something wrong? (This is with <code>@types/vscode</code>, <code>vscode-test</code>, and even the deprecated <code>vscode</code> (out of desperation) as a dependency, not a devDependency.)</p>\n<p>I hardcoded my own local URI and got it to work, so if we can find a way to produce URIs, things <em>will</em> be possible! But is trying to bundle this functionality even the right way to go? Does this even make sense (maybe this kind of functionality is not even bundleable because it needs to run in an environment that can't exist here)? Should something else be done, somehow? E.g. should the extension expose this functionality to the javascript it runs somehow?</p>",
        "id": 378967167,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690414651
    },
    {
        "content": "<p>(Also, maybe  it's possible that the setting up of the relevant style tag should not even be done by a widget's javascript, but by some other means which would be more amenable to this kind of thing.)</p>",
        "id": 378968834,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690415662
    },
    {
        "content": "<p>Hm, what happens if you try to load the font from the web?</p>",
        "id": 378969459,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690416051
    },
    {
        "content": "<p>I bet that would work, but I'm interested in making this available locally if possible! :) (I'll include the web version in the experimentation as well though.)</p>",
        "id": 378969761,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690416237
    },
    {
        "content": "<p>Ah gotcha! JS bundlers such as Rollup provide ways of bundling data in the <code>.js</code> output file. It should be possible to do that with a font as well. You should hopefully not have to worry about anything to do with <code>vscode</code>.</p>",
        "id": 378982315,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690423871
    },
    {
        "content": "<p>Hmm, ok! Will it work (indirectly) with CSS? Is there a place “in the page” that I can put the fonts so that the CSS can refer to it? (I’ll look into this myself, just wasn’t sure if you had a strategy outlined off the top of your head! :) )</p>",
        "id": 378982776,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690424233
    },
    {
        "content": "<p>What I had in mind is that you can use a <code>data:</code> URI with base64, and rollup can build that for you. See <a href=\"https://stackoverflow.com/a/54416164\">here</a> for example. You can then use that URI inside your CSS.</p>",
        "id": 378984363,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690425309
    },
    {
        "content": "<p>Ah, gotcha, thx for the link and the pointer to <code>data:</code>! (That should hopefully be enough for me to go on—I’m just learning the landscape of HTML/CSS/JS here, so simply knowing what exists is often the missing link/crucial piece at this stage.)</p>",
        "id": 378985580,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690426001
    },
    {
        "content": "<p>Alright, that worked! :) I've got a basic version of KaTeX working on my experimentation branch—I forked KaTeX to allow bundling of fonts during webpacking.</p>",
        "id": 379346863,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690512516
    },
    {
        "content": "<p>Next I'll try to get a more polished version working, and maybe see if I can bundle the fonts in MathJax, too, though that's a little more opaque (and maybe not worth it). Currently I just use <code>dangerouslySetInnerHTML</code>, which sounds, well, dangerous, and I bet it can be done more safely (apparently, maybe, with a ref).</p>\n<p>I'd also like to try to get e.g. <code>katex.render</code> working if possible, and maybe look more deeply into how the server works. E.g., if we can run the JS that loads katex and the CSS as soon as we start looking at the file, without using a widget/<code>expr_presenter</code>, that might be useful.</p>",
        "id": 379349305,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690513968
    },
    {
        "content": "<blockquote>\n<p>if we can run the JS that loads katex and the CSS as soon as we start looking at the file, without using a widget/expr_presenter, that might be useful.</p>\n</blockquote>\n<p>I  am not following here. If you want to run some JS in the infoview that's not builtin, the only way to do that is with a widget.</p>",
        "id": 379358134,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690519325
    },
    {
        "content": "<p>As far as execution of widget JS modules goes, a module will stick around in memory after the first time it is ran. So if you write an <code>expr_presenter</code> using a module that initializes some global katex state and stores that in a top-level <code>var</code>, that constant will persist.</p>",
        "id": 379358706,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690519776
    },
    {
        "content": "<p>Ah, okay. I thought there might be some other way hidden deep in lean which widgets were built on top of. :)</p>",
        "id": 379360061,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690520457
    },
    {
        "content": "<p>I suppose each <code>expr_presenter</code> can just check if <code>katex</code> exists each time it runs, as I currently have <code>&lt;AddKaTeX /&gt;</code> do. But I thought it might be possible to get the infoview to run JS based solely on the imports/something in the environment, and load everything up even before Expr’s are encountered/presented—do you think that kind of thing is possible? It might not matter if it’s just a small delay the first time we see any mathy Expr, though.</p>",
        "id": 379360906,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690520855
    },
    {
        "content": "<p>We have an <a href=\"https://github.com/EdAyers/ProofWidgets4/issues/5\">issue</a> open for having widgets that always show up in a given file. You could potentially use such a global widget with no associated UI, and which just runs some code under the hood, for this. However my intuition would be that this is premature optimization; I think an initial delay the first time katex shows up is perfectly fine. Let's only worry about it if it becomes too long and somebody complains!</p>",
        "id": 379569129,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690562065
    },
    {
        "content": "<blockquote>\n<p>I suppose each expr_presenter can just check if katex exists each time it runs</p>\n</blockquote>\n<p>This is what I would do.</p>",
        "id": 379569231,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690562089
    },
    {
        "content": "<p>I finally watched Patrick &amp; Kyle's IPAM presentation and played with the demo, and <em>wow!</em> That's beautiful! I'd love to see that become fully realized and see what parts can be adapted for interactive use on the proofwriting side.</p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, if you're interested in sharing the code from the demo, maybe we could get LaTeX pretty-printing (at least for mathematical expressions in the infoview, as a first step) running in mathlib4 in the not-too-distant future! By the way—interactivity and UI/X is really what I'm interested in when it comes to proof assistants, so in general, feel free to reach out if/when you continue working on this kind of thing and if you would like some extra hands and/or ideas. (And likewise for anyone else pursuing similar projects!) Obviously I'm still learning about these technologies and best practices, but, you know, eager to learn, etc. :)</p>",
        "id": 379679429,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1690598660
    }
]