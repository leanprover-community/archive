[
    {
        "content": "<p>A fun issue for y'all: a linear map over a semiring can't be coerced to a function if <code>Mathlib.LinearAlgebra.Dual</code> is imported; upgrading <code>R</code> to a ring does work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">foo</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.2379</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m.2379</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.2379</span>\n</code></pre></div>\n<p>Removing the <code>Mathlib.LinearAlgebra.Dual</code> import makes everything work, maybe because <code>Module.Dual := M →ₗ[R] R</code> is reducible?</p>",
        "id": 385672595,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692278659
    },
    {
        "content": "<p>Making <code>Module.Dual</code> not reducible had even more trouble</p>",
        "id": 385681801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692281361
    },
    {
        "content": "<p>Yeah, that didn't look like fun</p>",
        "id": 385682777,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692281588
    },
    {
        "content": "<p>This fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">LinearMap.instCoeFun</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_9</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_12</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M₃</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M₃</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- or `⟨FunLike.coe⟩`</span>\n</code></pre></div>",
        "id": 385682947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692281640
    },
    {
        "content": "<p>We had these shortcut instances in Lean 3, but they had the wrong implementation so we removed them</p>",
        "id": 385682997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692281645
    },
    {
        "content": "<p>I guess the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.instFunLike#doc\">docs#LinearMap.instFunLike</a> shortcut (that we replaced it with during porting) isn't enough</p>",
        "id": 385683139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692281692
    },
    {
        "content": "<p>How about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 385685814,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282358
    },
    {
        "content": "<p>That seems to work as well, though not so much fun in practice :)</p>",
        "id": 385686117,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692282439
    },
    {
        "content": "<p>The trace is odd here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000107</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Semiring</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000051</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Semiring</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000033</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">to</span> <span class=\"n\">Semiring</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000023</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Semiring</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">≟</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000020</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Semiring</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">m.2810</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 385687039,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282717
    },
    {
        "content": "<p>Where <code>?m.2810 : Type ?u.2808</code></p>",
        "id": 385687244,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282778
    },
    {
        "content": "<p>Universe issues?</p>",
        "id": 385687285,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282789
    },
    {
        "content": "<p>I also don't know what <code>nonassignable</code> means...</p>",
        "id": 385687701,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282906
    },
    {
        "content": "<p>But it seems reasonable to expect success here right?</p>",
        "id": 385687800,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692282933
    },
    {
        "content": "<p>For reference this still doesn't work after removing <code>LinearAlgebra.Dual</code> from the imports. It just finds a <code>CoeFun</code> where it couldn't before. </p>\n<p>And that is because with <code>LinearAlgebra.Dual</code> it ends up back at <code>Semiring ?_</code> which it cannot solve</p>",
        "id": 385691385,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692283874
    },
    {
        "content": "<p>Kevin and I both witnessed this before. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> can you find the threads? I'm on mobile currently</p>",
        "id": 385692885,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692284313
    },
    {
        "content": "<p>The message looks like it originates from <code>Lean.Meta.isDefEqQuickOther</code> (private so no docs links but <a href=\"https://github.com/leanprover/lean4/blob/b5a736708f408abc2e42aaf0e025a4ae8172d491/src/Lean/Meta/ExprDefEq.lean#L1582\">here</a> is the link to the line)</p>",
        "id": 385693961,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692284593
    },
    {
        "content": "<p>Here is the thread (which itself links to the other one that has a lot of noise): <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20breaking.20FunLike\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/instance.20breaking.20FunLike</a></p>",
        "id": 385694883,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692284794
    },
    {
        "content": "<p>I think the problem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual.instFunLikeDual#doc\">docs#Module.Dual.instFunLikeDual</a>, but we haven't determined why.</p>",
        "id": 385695015,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692284830
    },
    {
        "content": "<p>I am confused as to why <code>R</code> is getting this <code>nonassignable</code> tag. From reading the code, it seems like it should be a metavariable at that point in the logic</p>",
        "id": 385695545,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692284983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Module.2EDual.20and.20linear.20maps/near/385695015\">said</a>:</p>\n<blockquote>\n<p>I think the problem is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual.instFunLikeDual#doc\">docs#Module.Dual.instFunLikeDual</a>, but we haven't determined why.</p>\n</blockquote>\n<p>Someone should check me on this but it looks like trying that instance throws off side goals one of which is <code>Semiring ?_</code> which fail regardless of importing <code>LinearAlgebra.Dual</code></p>",
        "id": 385698507,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692285846
    },
    {
        "content": "<p>Explicitly giving <code>R</code> with <code>(R := R)</code> makes things work in all cases.</p>",
        "id": 385698681,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692285886
    },
    {
        "content": "<p>Sorry, explicitly trying which instance? The one Eric suggested?</p>",
        "id": 385698795,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692285911
    },
    {
        "content": "<p>Sorry Jireh/Matt -- I'm in a field all week</p>",
        "id": 385698812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692285914
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb {C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>?</p>",
        "id": 385698888,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692285931
    },
    {
        "content": "<p>Nevermind Kevin, I found it, thanks!</p>",
        "id": 385698964,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692285950
    },
    {
        "content": "<p>Import <code>LinearAlgebra.Dual</code> and unification passes through <code>Module.Dual.instFunLikeDual</code> and asks for which semiring we are using. It creates <code>Semiring ?_</code> as a goal which it cannot solve</p>",
        "id": 385699284,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286034
    },
    {
        "content": "<p>Don't import it and it still tries to figure out <code>Semiring ?_</code> but doesn't need it to find the coercion</p>",
        "id": 385699522,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286088
    },
    {
        "content": "<p>It gets to <code>?_ =?= R</code> and it fails...</p>",
        "id": 385699723,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286139
    },
    {
        "content": "<p>I think because both sides are marked <code>nonassignable</code></p>",
        "id": 385699873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286176
    },
    {
        "content": "<p>Hmmm, is that because it's an <code>outParam</code>? I don't know what <code>nonassignable</code> is.</p>",
        "id": 385700149,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692286228
    },
    {
        "content": "<p>From (rip)grepping, there is only one place where <code>?m.2810 [nonassignable] =?= R [nonassignable]</code>can be thrown</p>",
        "id": 385700283,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286264
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/b5a736708f408abc2e42aaf0e025a4ae8172d491/src/Lean/Meta/ExprDefEq.lean#L1582\">Here</a></p>",
        "id": 385700378,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286289
    },
    {
        "content": "<p>I don't know precisely what it is either but it seems like you want to assign <code>?_ := R</code></p>",
        "id": 385700711,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286386
    },
    {
        "content": "<p>Does it later repeat the TC synth with the metavariable instantiated?</p>",
        "id": 385700777,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692286399
    },
    {
        "content": "<p>Not that I saw no</p>",
        "id": 385700816,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286411
    },
    {
        "content": "<p>Let me dump the full trace...</p>",
        "id": 385700965,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286446
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type/near/361934735\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type/near/361934735</a></p>",
        "id": 385701036,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692286468
    },
    {
        "content": "<p>Oh, I think assignable is about the mvar depth: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.isAssignable#doc\">docs#Lean.MVarId.isAssignable</a>, but I'm sure Sebastian knows! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 385701211,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692286525
    },
    {
        "content": "<p><a href=\"https://gist.github.com/mattrobball/15f8c763eaa169195367d2745e5a8e22\">https://gist.github.com/mattrobball/15f8c763eaa169195367d2745e5a8e22</a><br>\nwith code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Dual</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- example {R : Type*} [Ring R] (p : R) : foo p = p := sorry -- fails</span>\n<span class=\"c1\">-- example {R : Type*} [Ring R]</span>\n</code></pre></div>",
        "id": 385701253,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286541
    },
    {
        "content": "<p>Keyboard not cooperating with reformatting for readability... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 385702624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692286853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Module.2EDual.20and.20linear.20maps/near/385701036\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type/near/361934735\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Instance.20search.20without.20type/near/361934735</a></p>\n</blockquote>\n<p>Yeah this ones (eventually) ends up at <code>α [nonassignable] =?= ?m.33 [assignable]</code></p>",
        "id": 385705120,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692287629
    },
    {
        "content": "<p>Well this really is a vexing elaboration issue you're handing to Lean:</p>\n<ul>\n<li>When looking at <code>foo</code>, we don't know <code>R</code> yet, but Lean tries to find an instance of <code>Semiring</code> for it anyway; that's the trace you were looking at but ultimately not the source of the problem</li>\n<li>We do know that we want to apply <code>foo : ?m.2142 →ₗ[?m.2142] ?m.2142</code> to an argument, so let's try to find <code>CoeFun (?m.2142 →ₗ[?m.2142] ?m.2142) ?m.2177</code> (the latter mvar is from the outParam: we want TC synth to find the value of that parameter even if we expect it to be <code>R</code> eventually)</li>\n<li>For that let's try <code>FunLike (?m.2142 →ₗ[?m.2142] ?m.2142) ?m.2184 ?m.2185</code>; so far, so good</li>\n<li>How about <code>Module.Dual.instFunLikeDual</code>? It fits, but only if we have <code>Semiring ?m.2142</code></li>\n<li>Now Lean is in a pickle: it can't apply this instance yet, but it also can't rule it out yet because <code>?m.2142</code> <em>might</em> eventually be a semiring, so it would be wrong to continue the search with the remaining, i.e. lower-priority, instances. So the only thing Lean can do is to wait and see whether it gets more information about that metavariable from another source in some later step, which here is not the case</li>\n</ul>",
        "id": 385707640,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692288323
    },
    {
        "content": "<p>Basically by inserting a higher-priority (in this case, declared-later, I assume) instance than the desired one, you leave Lean unable to continue with the given amount of information</p>",
        "id": 385707988,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692288429
    },
    {
        "content": "<p>What is problematic about using <code>Semiring R</code> to start with? I ask in general more so than here.</p>",
        "id": 385708416,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692288560
    },
    {
        "content": "<p>But one mathlib actionable thing I hear is to reduce the priority of <code>Module.Dual.instFunLikeDual</code></p>",
        "id": 385710776,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692289333
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6637\">#6637</a> it goes through with low priority for <code>instFunLikeDual</code></p>",
        "id": 385713489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692290302
    },
    {
        "content": "<p>Note that I don't necessarily recommend tweaking priorities for this reason, it might end up in a cat-and-mouse game. Ultimately <code>CoeFun</code> simply needs more information than this to work robustly.</p>",
        "id": 385716178,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692291328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Module.2EDual.20and.20linear.20maps/near/385682947\">said</a>:</p>\n<blockquote>\n<p>This fixes it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">LinearMap.instCoeFun</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_9</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_12</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M₃</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M₃</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- or `⟨FunLike.coe⟩`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Do you think this sort of fix helps, or does this only work because it shuffles priorities again?</p>",
        "id": 385717124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692291668
    },
    {
        "content": "<p>Isn't that also tweaking priorities with declaration order?</p>",
        "id": 385717193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692291697
    },
    {
        "content": "<p>For reference, here is the trace without importing <code>LinearAlgebra.Dual</code><br>\n<a href=\"https://gist.github.com/mattrobball/cd2c40f191a69b23241b7f913cc67555\">https://gist.github.com/mattrobball/cd2c40f191a69b23241b7f913cc67555</a></p>",
        "id": 385718044,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692291986
    },
    {
        "content": "<p>It seems to create an <strong>assignable</strong> metavariable for <code>Semiring</code> itself and then succeeds in unifying it with the provided instance.</p>",
        "id": 385718399,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692292137
    },
    {
        "content": "<p>As opposed to <code>Semiring ?_</code></p>",
        "id": 385718442,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692292155
    },
    {
        "content": "<p>I guess we could just delete <code>instFunLikeDual</code> also lol</p>",
        "id": 385735645,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692299350
    },
    {
        "content": "<p>But it would be nice if we understood fully why we didn't have this problem in Lean 3, and because, as Mario indicated in the other thread, it seems like a bug. Moreover, I know that this isn't the only cause of this problem. I ran into another one with <code>StarAlgHom</code> that de-instancing <code>instFunLikeDual</code> didn't fix.</p>",
        "id": 385737173,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692300092
    },
    {
        "content": "<p>It seems like assignability of the metavariables created is important. I think everything succeeds if one is assignable instead of unassignable. </p>\n<p>I am sure there is a general reason for why they are marked as unassignable and I would love to understand it more.</p>",
        "id": 385737406,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692300201
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6637\">#6637</a> is updated to delete <code>instFunLikeDual</code>.</p>",
        "id": 385737621,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692300288
    },
    {
        "content": "<p>I'm pretty sure the problem is that, for reasons I don't understand in relation to this specific issue, the metavariables don't occur at the same mvar depth. Mvars are only assignable when the current MVar depth matches the depth at which the MVar was created.</p>",
        "id": 385739342,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692301117
    },
    {
        "content": "<p>There's a discussion of this in the metaprogramming book, but I don't understand how it applies to this particular instance search.</p>",
        "id": 385739605,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692301265
    },
    {
        "content": "<p>That is another thing I will need to learn. </p>\n<p>One difference between <code>LinearMap.instFunLike</code> and <code>Module.Dual.instFunLikeDual</code> was that the first created metavariables to unify with <code>Semiring</code> whereas the second only created a metavariable for the argument <code>Semiring ?_</code>. </p>\n<p>I don't understand why.</p>",
        "id": 385739871,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692301409
    },
    {
        "content": "<p>Here is a basic example with similar behavior</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SR</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SR</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It looks like it tries to unify <code>?1 → ?1 =?= ?2 → ?2</code> at context depth 0 and succeeds with <code>?1 := ?2</code>. Then it bumps the depth and tries to do <code>Semiring ?1</code> which it cannot solve because the depth of <code>?1</code> is 0.</p>",
        "id": 385991724,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692394259
    },
    {
        "content": "<p>I am still confused since reading the comments in the file makes me think that the context depth only gets bumped with the creation of new metavariables.</p>",
        "id": 385992102,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692394481
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Module.2EDual.20and.20linear.20maps\">#general &gt; Module.Dual and linear maps</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 386593145,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692706157
    }
]