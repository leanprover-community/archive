[
    {
        "content": "<p>We couldn't resolve these <code>simpNF</code> lints caused by timeout at <code>whnf</code>. Please help us.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1828\">PR Link</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Data.Multiset.Fintype</span>\n<span class=\"k\">#check</span> <span class=\"n\">Multiset.map_univ_coe.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">tactic 'simp' failed, nested error:</span>\n<span class=\"cm\">(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Multiset.map_univ.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">tactic 'simp' failed, nested error:</span>\n<span class=\"cm\">(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n</code></pre></div>",
        "id": 325768512,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675486874
    },
    {
        "content": "<p>This is the first issue on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Lex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Auxiliary definition for the `hasCoeToSort` instance. This prevents the `hasCoe m α`</span>\n<span class=\"sd\">instance from inadverently applying to other sigma types. One should not use this definition</span>\n<span class=\"sd\">directly. -/</span>\n<span class=\"c1\">-- Porting note: @[nolint has_nonempty_instance]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.ToType</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Σ</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m.count</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Create a type that has the same number of elements as the multiset.</span>\n<span class=\"sd\">Terms of this type are triples `⟨x, ⟨i, h⟩⟩` where `x : α`, `i : ℕ`, and `h : i &lt; m.count x`.</span>\n<span class=\"sd\">This way repeated elements of a multiset appear multiple times with different values of `i`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Multiset.ToType</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[reducible, match_pattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.mkToType</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m.count</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- As a convenience, there is a coercion from `m : Type*` to `α` by projecting onto the first</span>\n<span class=\"sd\">component. -/</span>\n<span class=\"c1\">-- Porting note: was `Coe m α`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instCoeSortMultisetType.instCoeOutToType</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.count</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofFinset</span>\n    <span class=\"o\">(</span><span class=\"n\">m.toFinset.bunion</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">m.count</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨</span><span class=\"n\">Prod.mk</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Prod.mk.inj_left</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Construct a finset whose elements enumerate the elements of the multiset `m`.</span>\n<span class=\"sd\">The `ℕ` component is used to differentiate between equal elements: if `x` appears `n` times</span>\n<span class=\"sd\">then `(x, 0)`, ..., and `(x, n-1)` appear in the `Finset`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.toEnumFinset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">p.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.count</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n\n<span class=\"sd\">/-- The embedding from a multiset into `α × ℕ` where the second coordinate enumerates repeats.</span>\n<span class=\"sd\">If you are looking for the function `m → α`, that would be plain `coe`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.coeEmbedding</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">)</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Another way to coerce a `Multiset` to a type is to go through `m.toEnumFinset` and coerce</span>\n<span class=\"sd\">that `Finset` to a type. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.coeEquiv</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">m.toEnumFinset</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">m.coeEmbedding</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"n\">x.1.1</span><span class=\"o\">,</span> <span class=\"n\">x.1.2</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Multiset.fintypeCoe</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">m.toEnumFinset</span> <span class=\"n\">m.coeEquiv.symm</span>\n\n<span class=\"c1\">-- linter doesn't like this</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Multiset.map_univ_coe</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"c1\">--set_option pp.all true</span>\n\n<span class=\"c1\">-- and you can see why -- this times out</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>Type class inference is taking forever to fail.</p>",
        "id": 325802090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675507399
    },
    {
        "content": "<p>Example of trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">987361</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.univ</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000017</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.21498</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.20878</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">987235</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Fintype.ofSubsingleton</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"n\">Multiset.fintypeCoe</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">987117</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">},</span>\n          <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">Fintype.ofEquiv</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.toEnumFinset</span> <span class=\"n\">m</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000092</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">147292</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Fintype.elems</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">839613</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">},</span>\n            <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                  <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                    <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">Fintype.ofBijective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000135</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">863682</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Fintype.elems</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">975621</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">},</span>\n              <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                    <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                      <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span>\n              <span class=\"n\">elems</span> <span class=\"o\">:=</span>\n                <span class=\"n\">Finset.map</span>\n                  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                    <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n                  <span class=\"n\">Finset.univ</span><span class=\"o\">,</span>\n              <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n                <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                    <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n                      <span class=\"n\">Finset.map</span>\n                        <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                          <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n                        <span class=\"n\">Finset.univ</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">975276</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset.map</span>\n                <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n                <span class=\"n\">Finset.univ</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">975204</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span>\n                  <span class=\"n\">val</span> <span class=\"o\">:=</span>\n                    <span class=\"n\">Multiset.map</span>\n                      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                          <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                      <span class=\"n\">Finset.univ.val</span><span class=\"o\">,</span>\n                  <span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n                    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                      <span class=\"n\">Multiset.Nodup</span>\n                        <span class=\"o\">(</span><span class=\"n\">Multiset.map</span>\n                          <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                              <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                          <span class=\"n\">Finset.univ.val</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000083</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">090265</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=?=</span> <span class=\"n\">Multiset.map</span>\n                    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                        <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                    <span class=\"n\">Finset.univ.val</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">090221</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=?=</span> <span class=\"n\">Quot.liftOn</span> <span class=\"n\">Finset.univ.val</span>\n                      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n                        <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.map</span>\n                            <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                            <span class=\"n\">l</span><span class=\"o\">))</span>\n                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_l₁</span> <span class=\"n\">_l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.toEnumFinset</span> <span class=\"n\">m</span> <span class=\"o\">}),</span>\n                          <span class=\"n\">Setoid.r</span> <span class=\"n\">_l₁</span> <span class=\"n\">_l₂</span> <span class=\"bp\">→</span>\n                            <span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span>\n                                <span class=\"o\">(</span><span class=\"n\">List.map</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                      <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                                  <span class=\"n\">_l₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                              <span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span>\n                                <span class=\"o\">(</span><span class=\"n\">List.map</span>\n                                  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                      <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                                  <span class=\"n\">_l₂</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">090152</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=?=</span> <span class=\"n\">Quot.lift</span>\n                        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span>\n                          <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.map</span>\n                              <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                              <span class=\"n\">l</span><span class=\"o\">))</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_l₁</span> <span class=\"n\">_l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Multiset.toEnumFinset</span> <span class=\"n\">m</span> <span class=\"o\">}),</span>\n                            <span class=\"n\">Setoid.r</span> <span class=\"n\">_l₁</span> <span class=\"n\">_l₂</span> <span class=\"bp\">→</span>\n                              <span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span>\n                                  <span class=\"o\">(</span><span class=\"n\">List.map</span>\n                                    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                        <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                                    <span class=\"n\">_l₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                                <span class=\"n\">Quot.mk</span> <span class=\"n\">Setoid.r</span>\n                                  <span class=\"o\">(</span><span class=\"n\">List.map</span>\n                                    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                        <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                                    <span class=\"n\">_l₂</span><span class=\"o\">))</span>\n                        <span class=\"n\">Finset.univ.val</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">884777</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Finset.instSingletonFinset.1</span>\n                    <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span>\n                    <span class=\"n\">val</span> <span class=\"o\">:=</span>\n                      <span class=\"n\">Multiset.map</span>\n                        <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                            <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                        <span class=\"n\">Finset.univ.val</span><span class=\"o\">,</span>\n                    <span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                        <span class=\"n\">Multiset.Nodup</span>\n                          <span class=\"o\">(</span><span class=\"n\">Multiset.map</span>\n                            <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                                <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">})</span>\n                            <span class=\"n\">Finset.univ.val</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">},</span>\n                <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                      <span class=\"n\">x</span> <span class=\"bp\">∈</span>\n                        <span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span>\n                <span class=\"n\">elems</span> <span class=\"o\">:=</span>\n                  <span class=\"n\">Finset.map</span>\n                    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                      <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n                    <span class=\"n\">Finset.univ</span><span class=\"o\">,</span>\n                <span class=\"n\">complete</span> <span class=\"o\">:=</span>\n                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                      <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n                        <span class=\"n\">Finset.map</span>\n                          <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n                            <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">Multiset.coeEquiv</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n                          <span class=\"n\">Finset.univ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Lean 4 is just floundering around trying to prove that things are finite.</p>",
        "id": 325803160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675507795
    },
    {
        "content": "<p>The first line of the above trace with <code>pp.all true</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Finset.univ</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Fintype.ofSubsingleton</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Finset.univ</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">Multiset.fintypeCoe</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Multiset.ToType</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so it's confused about which fintype instance to use.</p>",
        "id": 325803618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675507957
    },
    {
        "content": "<p>In Lean3, the match of <code>fintype.univ_of_subsingleton</code> takes little time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ./src/data/multiset/fintype.lean L192</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"n\">coe</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">4. [simplify.rewrite_failure] fail to match 'fintype.univ_of_subsingleton':</span>\n<span class=\"sd\">@finset.univ ↥m (@multiset.fintype_coe α (λ (a b : α), _inst_1 a b) m)</span>\n<span class=\"sd\">=?=</span>\n<span class=\"sd\">@finset.univ ?x_0 (@fintype.of_subsingleton ?x_0 ?x_1 ?x_2)</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">--/</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>But in Lean4, the corresponding match takes 10 secs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ./Mathlib/Data/Multiset/Fintype.lean L240</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">[Meta.isDefEq] [10.500976s] ❌ @Finset.univ ?α</span>\n<span class=\"sd\">      (@Fintype.ofSubsingleton ?α ?a</span>\n<span class=\"sd\">        ?inst✝) =?= @Finset.univ (@Multiset.ToType α (fun a b =&gt; inst✝ a b) m)</span>\n<span class=\"sd\">      (@Multiset.fintypeCoe α (fun a b =&gt; inst✝ a b) m)</span>\n\n<span class=\"sd\">[Meta.Tactic.simp.unify] @Fintype.univ_ofSubsingleton:1000, failed to unify</span>\n<span class=\"sd\">      @Finset.univ ?α (@Fintype.ofSubsingleton ?α ?a ?inst✝)</span>\n<span class=\"sd\">    with</span>\n<span class=\"sd\">      @Finset.univ (@Multiset.ToType α (fun a b =&gt; inst✝ a b) m) (@Multiset.fintypeCoe α (fun a b =&gt; inst✝ a b) m)</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">--/</span>\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>So, this problem may be caused by the difference of a way to <del>synthesize an instance</del>match terms.</p>",
        "id": 325908298,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675569744
    },
    {
        "content": "<p>I solved this problem by <code>@[irreducible] Multiset.fintypeCoe</code>.<br>\nThank you, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>!</p>",
        "id": 325922965,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675583780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> has marked this topic as resolved.</p>",
        "id": 325923448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675584137
    },
    {
        "content": "<p>Will that cause problems elsewhere?</p>",
        "id": 325926328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675586553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> has marked this topic as unresolved.</p>",
        "id": 325926946,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675587046
    },
    {
        "content": "<p>No, this file has no dependents.</p>",
        "id": 325927055,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675587128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> has marked this topic as resolved.</p>",
        "id": 325927061,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675587136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> has marked this topic as unresolved.</p>",
        "id": 325927391,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675587429
    },
    {
        "content": "<p>I reminded that computability is important in <code>Fintype</code>. So I decided to remove <code>@[irreducible]</code>, sorry.</p>",
        "id": 325927650,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675587626
    },
    {
        "content": "<p>If the file has no dependencies then you can probably do what you like as long as you get it to compile, I think compilation is the main goal here.</p>",
        "id": 325930049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675589366
    },
    {
        "content": "<p>But leave a porting note if you do change anything.</p>",
        "id": 325931343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675590049
    },
    {
        "content": "<p>I've misunderstood a <code>irreducible</code> attr. It doesn't make terms noncomputable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ./Mathlib/Data/Multiset/Fintype.lean L194</span>\n\n<span class=\"kd\">@[irreducible]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Multiset.fintypeCoe</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">m.toEnumFinset</span> <span class=\"n\">m.coeEquiv.symm</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">multiset.fintype_coe</span> <span class=\"n\">Multiset.fintypeCoe</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2.1</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Quot.mk List.Perm [(0, 0), (1, 0), (1, 1), (2, 0)], Computable!</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>So I re-add <code>@[irreducible] Multiset.fintypeCoe</code>.</p>",
        "id": 326041679,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1675658228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569722\">Pol'tta / Kô Miyahara</span> has marked this topic as resolved.</p>",
        "id": 326046878,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675662596
    }
]