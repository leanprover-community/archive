[
    {
        "content": "<p>Currently we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.toSemifield</span> <span class=\"o\">:</span> <span class=\"n\">Semifield</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">›,</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which is defeq to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">Field.toSemifield</span> <span class=\"o\">:</span> <span class=\"n\">Semifield</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>What is the intention with throwing in the <code>Semiring</code> instance?</p>",
        "id": 386154665,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692488763
    },
    {
        "content": "<p>This was needed until we refactored <code>Ring</code></p>",
        "id": 386154964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692489083
    },
    {
        "content": "<p>(previously it was missing some axioms that were \"obvious\")</p>",
        "id": 386154970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692489101
    },
    {
        "content": "<p>And never got switched?</p>",
        "id": 386155055,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692489162
    },
    {
        "content": "<p>I don't think the refactor of ring was deliberate, it was an accident due to an ad-hoc port</p>",
        "id": 386155095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692489213
    },
    {
        "content": "<p>But downstream file wouldn't ever complain if you provided an extra <code>with</code> term like that, so everything was left in</p>",
        "id": 386155113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692489237
    },
    {
        "content": "<p>They suffer in silence</p>",
        "id": 386155160,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692489271
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6686\">#6686</a></p>",
        "id": 386204964,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692524513
    },
    {
        "content": "<p>You are still using <code>with</code> there. Is it worth building something neater manually, or do you expect that the changes you are trying in core will eventually get something nice automatically?</p>",
        "id": 386205604,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692524917
    },
    {
        "content": "<p>I expect this to be no-op in current mathlib. </p>\n<p>For future changes to core, that is not up to me. But the current elaboration of structures using <code>with</code> is a bit of a performance footgun with no benefit I can see at the moment. I don’t think mathlib can tweak its way around it. </p>\n<p>One possible heuristic: if a user provides a structure instance that occurs as a parent (or parent of parent…), then they mean for that to used, at least if they have not explicitly specified a field. </p>\n<p>I’m trying that out with some other minor tweaks to structure elaboration in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6539\">#6539</a>. But the problem I ran into was that this current pattern explicitly inserted the extra <code>Semiring</code> for both of these reducing performance in  contexts with <code>DivisionRing</code> or<code>Field</code>  were present.</p>",
        "id": 386207391,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692526230
    },
    {
        "content": "<p>For comparison, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6539\">#6539</a> vs <a href=\"https://github.com/leanprover-community/mathlib4/pull/6319\">#6319</a>. The latter has hand-rolled constructions for one file. </p>\n<p>I need to find time to sit down and carefully look at the difference but at a quick glance you get most of the benefits in the global change with the benefit of not touching the existing code.</p>",
        "id": 386208903,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692527468
    }
]