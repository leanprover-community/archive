[
    {
        "content": "<p>There seems to be a Lean bug in <a href=\"https://github.com/leanprover-community/mathlib4/blob/e393967617dcc2a1c9903e94531c0679a37970a3/Mathlib/Data/Complex/Exponential.lean#L1618\"><code>Data.Complex.Exponential</code></a> There is a red line underneath the <code>by</code> saying <code>unsolved goals</code>, with a tactic state that looks like it should have been closed by the final <code>simp</code>. If I write another <code>simp</code> and then a new line on line 1630, then the tactic state it displays is just the type of the whole theorem, but there is still a red line under the <code>by</code>. This whole theorem seems fairly buggy, replacing the whole proof with sorry sometimes fails as well, but not always, and I seem to have to keep restarting Lean. Maybe the file is too long or something like that. It is hard to diagnose.</p>",
        "id": 341125458,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678541739
    },
    {
        "content": "<p>I had to keep restarting lean when I was fixing up some sorrys in the file Adam was porting yesterday, because all the errors were out of sync, lean would complain that tactics weren't being used etc, just completely crazy things. Then I discovered to my delight that at least I could work around it by changing the <code>def</code> I was working on to <code>deqf</code> and then back to <code>def</code> again.</p>",
        "id": 341151040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678550801
    },
    {
        "content": "<p>It triggered a \"hard recompile\" but just of the def I was working on</p>",
        "id": 341151099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678550838
    },
    {
        "content": "<p>The new version of Lean seems to have fixed the problem</p>",
        "id": 341492981,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678720772
    },
    {
        "content": "<p>This PR is ready for review, and it would be great if somebody who understood the <code>positivity</code> tactic could finish off the extension for <code>exp</code>. Maybe <br>\n<span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span></p>",
        "id": 341493440,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678720856
    },
    {
        "content": "<p>I can do it if you're willing to wait until Wednesday morning.</p>",
        "id": 341503313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678722854
    },
    {
        "content": "<p>This seems to work. Want me to push it to that PR?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>diff --git a/Mathlib/Data/Complex/Exponential.lean b/Mathlib/Data/Complex/Exponential.lean\nindex f24f4a1e..051397b5 100644\n--- a/Mathlib/Data/Complex/Exponential.lean\n+++ b/Mathlib/Data/Complex/Exponential.lean\n@@ -2070,19 +2070,16 @@ theorem one_sub_div_pow_le_exp_neg {n : ℕ} {t : ℝ} (ht' : t ≤ n) : (1 - t\n\n end Real\n\n---Porting note: TODO: write this extension\n--- namespace Tactic\n+namespace Tactic\n+open Lean.Meta Qq\n\n--- open Positivity Real\n+/-- Extension for the `positivity` tactic: `real.exp` is always positive. -/\n+@[positivity Real.exp _]\n+def evalExp : Mathlib.Meta.Positivity.PositivityExt where eval {_ _} _ _ e := do\n+  let (.app _ (a : Q(ℝ))) ← withReducible (whnf e) | throwError \"not Real.exp\"\n+  pure (.positive (q(Real.exp_pos $a) : Lean.Expr))\n\n--- /-- Extension for the `positivity` tactic: `real.exp` is always positive. -/\n--- @[positivity]\n--- unsafe def positivity_exp : expr → tactic strictness\n---   | q(Real.exp $(a)) =&gt; positive &lt;$&gt; mk_app `real.exp_pos [a]\n---   | e =&gt; pp e &gt;&gt;= fail ∘ format.bracket \"The expression `\" \"` isn't of the form `real.exp r`\"\n--- #align tactic.positivity_exp tactic.positivity_exp\n-\n--- end Tactic\n+end Tactic\n\n namespace Complex\n</code></pre></div>",
        "id": 341545226,
        "sender_full_name": "David Renshaw",
        "timestamp": 1678732747
    },
    {
        "content": "<p>I'm a bit confused why an extension for <code>Real.exp</code> lives in the file <code>Complex.Exponential</code>.</p>",
        "id": 341545510,
        "sender_full_name": "David Renshaw",
        "timestamp": 1678732833
    },
    {
        "content": "<p>Because <code>Real.exp</code> is defined as the real part of <code>Complex.exp</code>. It doesn't have to be like that, but there's no reason why not eirher.</p>",
        "id": 341565646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678738810
    },
    {
        "content": "<p>Please push it. Thanks for writing the extension</p>",
        "id": 341565734,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678738837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EComplex.2EExponential.20!4.232785/near/341545226\">said</a>:</p>\n<blockquote>\n<p>This seems to work. Want me to push it to that PR?</p>\n<p><div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>diff --git a/Mathlib/Data/Complex/Exponential.lean b/Mathlib/Data/Complex/Exponential.lean\nindex f24f4a1e..051397b5 100644\n--- a/Mathlib/Data/Complex/Exponential.lean\n+++ b/Mathlib/Data/Complex/Exponential.lean\n@@ -2070,19 +2070,16 @@ theorem one_sub_div_pow_le_exp_neg {n : ℕ} {t : ℝ} (ht' : t ≤ n) : (1 - t\n\n end Real\n\n---Porting note: TODO: write this extension\n--- namespace Tactic\n+namespace Tactic\n+open Lean.Meta Qq\n\n--- open Positivity Real\n+/-- Extension for the `positivity` tactic: `real.exp` is always positive. -/\n+@[positivity Real.exp _]\n+def evalExp : Mathlib.Meta.Positivity.PositivityExt where eval {_ _} _ _ e := do\n+  let (.app _ (a : Q(ℝ))) ← withReducible (whnf e) | throwError \"not Real.exp\"\n+  pure (.positive (q(Real.exp_pos $a) : Lean.Expr))\n\n--- /-- Extension for the `positivity` tactic: `real.exp` is always positive. -/\n--- @[positivity]\n--- unsafe def positivity_exp : expr → tactic strictness\n---   | q(Real.exp $(a)) =&gt; positive &lt;$&gt; mk_app `real.exp_pos [a]\n---   | e =&gt; pp e &gt;&gt;= fail ∘ format.bracket \"The expression `\" \"` isn't of the form `real.exp r`\"\n--- #align tactic.positivity_exp tactic.positivity_exp\n-\n--- end Tactic\n+end Tactic\n\n namespace Complex\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, go ahead</p>",
        "id": 341565801,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678738856
    }
]