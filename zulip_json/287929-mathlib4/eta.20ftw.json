[
    {
        "content": "<p>The new etaExperiment option is crucial for certain linear algebra files.</p>",
        "id": 336471909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677242634
    },
    {
        "content": "<p>You can do some awesome juggling with it.</p>",
        "id": 336471990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677242648
    },
    {
        "content": "<p>Before (pretty broken):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `R^n/I^n` is isomorphic to `(R/I)^n` as an `R/I`-module. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">piQuotEquiv</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I.pi</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quotient.liftOn'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Submodule.Quotient.eq'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.leftRel_apply.mp</span> <span class=\"n\">hab</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I.pi</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.out'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Ideal.Quotient.eq.2</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ideal.Quotient.eq.1</span> <span class=\"o\">(</span><span class=\"n\">Quotient.out_eq'</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Quot.exists_rep</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">Quotient.out_eq'</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">ideal.pi_quot_equiv</span> <span class=\"n\">Ideal.piQuotEquiv</span>\n</code></pre></div>",
        "id": 336472035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677242665
    },
    {
        "content": "<p>After:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"c1\">-- needed, otherwise the type times out</span>\n<span class=\"sd\">/-- `R^n/I^n` is isomorphic to `(R/I)^n` as an `R/I`-module. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">piQuotEquiv</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I.pi</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨⟨</span><span class=\"bp\">?</span><span class=\"n\">toFun</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">invFun</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">toFun</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"c1\">-- needed otherwise we don't have `Module R R`</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n      <span class=\"n\">Quotient.liftOn'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Submodule.Quotient.eq'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">QuotientAddGroup.leftRel_apply.mp</span> <span class=\"n\">hab</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">invFun</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">I.pi</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Quotient.out'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Ideal.Quotient.eq.2</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ideal.Quotient.eq.1</span> <span class=\"o\">(</span><span class=\"n\">Quotient.out_eq'</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Quot.exists_rep</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"n\">convert</span> <span class=\"n\">Quotient.out_eq'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">ideal.pi_quot_equiv</span> <span class=\"n\">Ideal.piQuotEquiv</span>\n</code></pre></div>",
        "id": 336472219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677242706
    },
    {
        "content": "<p>So what happens when someone makes a PR with <code>etaExperiment</code> in?</p>",
        "id": 336502655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677250324
    },
    {
        "content": "<p>I think Gabriel has said <code>etaExperiment</code> is for testing purposes <em>only</em>, so I would say we should not have any PRs merge with it present.</p>",
        "id": 336503370,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677250500
    },
    {
        "content": "<p>Yes, it's not completely clear to me when/if we can enable eta by default.  I'd like to avoid a situation where we have <code>etaExperiment</code> enabled in every file (because it's obviously the right choice), and then run into the performance issues that prevent us from enabling it by default in the first place.</p>",
        "id": 336556291,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677263847
    },
    {
        "content": "<p>So the <code>RingTheory.Ideal.Quotient</code> PR is pretty stuck. Because this decl needs the option turned off for the type, but turned on for the term...</p>",
        "id": 336557125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677264113
    },
    {
        "content": "<p>Dare I ask why we didn't have this problem in lean 3?</p>",
        "id": 336564048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677266329
    },
    {
        "content": "<p>I think it is because we now use new structures everywhere.</p>",
        "id": 336564222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677266396
    },
    {
        "content": "<p>But take that with a grain of salt. I don't know what I'm talking about.</p>",
        "id": 336564338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677266420
    },
    {
        "content": "<p>Is reverting to manual old style structures in mathlib 4 a reasonable thing to do?</p>",
        "id": 337906110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281061
    },
    {
        "content": "<p>Or will that have all the same performance problems as enabling the eta mode and sticking with new-style structures?</p>",
        "id": 337906152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677281081
    },
    {
        "content": "<p>Isn't the problem with old structures that it makes proof terms huge?</p>",
        "id": 337928394,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677295184
    },
    {
        "content": "<blockquote>\n<p>Is reverting to manual old style structures in mathlib 4 a reasonable thing to do?</p>\n</blockquote>\n<p>It might be a good workaround for the algebraic hierarchy.  But I'm not sure if we can get a <code>set_option oldStructure true</code> into core. :-/  (And monkeypatching that in mathlib4 is--while possible--pretty awful as it requires copy-pasting a couple hundred lines from Elab/Structure.lean)  I'd really like to avoid <code>extends Add α, Mul α, ..</code> because that's hard to revert once we get a proper solution.</p>",
        "id": 337929686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677296351
    },
    {
        "content": "<blockquote>\n<p>Or will that have all the same performance problems as enabling the eta mode and sticking with new-style structures?</p>\n</blockquote>\n<p>The general issue is that the unifier is a performance shitshow with new-style structures since it tries to reduce <code>A.toPartialOrder =?= B.toPartialOrder</code> to <code>A =?= B</code>, so we end up comparing group structures when all we need to know is that 0 is the same.  This isn't such a huge issue with old-style structures because at least there we've only got a single layer of nested structures.</p>",
        "id": 337929920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677296596
    },
    {
        "content": "<p>Eta can feed into this issue.  It reduces <code>A =?= @LinearOrder.mk _ po ..</code> to <code>A.toPartialOrder =?= po</code> and then it can happen that <code>po</code> is also a <code>...toPartialOrder</code>.  (And on top of it the eta implementation is pretty new and produces different projections than WHNF returns, so we even circumvent the defeq cache..)</p>",
        "id": 337930281,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677296973
    },
    {
        "content": "<blockquote>\n<p>Isn't the problem with old structures that it makes proof terms huge?</p>\n</blockquote>\n<p>I don't think new structures have a significant effect on term size in the algebraic hierarchy.  The term size reduction only works for the first parent.  That is, in <code>class Lattice P extends SemilatticeSup P, SemilatticeInf P</code> only the <code>SemilatticeSup P</code> is \"faster\" (benchmarks needed).  The <code>SemilatticeInf P</code> side looks just like old-style structures.</p>",
        "id": 337930462,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677297131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/eta.20ftw/near/337906110\">said</a>:</p>\n<blockquote>\n<p>Is reverting to manual old style structures in mathlib 4 a reasonable thing to do?</p>\n</blockquote>\n<p>If we make huge refactors to the hierarchy, I would rather do it only once. The other day we a discussion about moving in a mixin direction. If that is the future, I would prefer working towards that refactor.</p>",
        "id": 337940320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677306121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/eta.20ftw/near/337929686\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is reverting to manual old style structures in mathlib 4 a reasonable thing to do?</p>\n</blockquote>\n<p>It might be a good workaround for the algebraic hierarchy.  But I'm not sure if we can get a <code>set_option oldStructure true</code> into core. :-/ </p>\n</blockquote>\n<p>I think that it would actually reasonable to have not a <code>set_option</code> for this - that's obviously a hack - but rather a <code>@[flat]</code> annotation that goes on parents of a structure a la <code>struct Foo A extends Bar A, @[flat] Baz A</code>. The reason is that the structure command is using a heuristic to decide what should be flattened and what should not be, and it is not unreasonable to have a way to have more direct control over this.</p>",
        "id": 337950035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677312497
    },
    {
        "content": "<p>The problem is not the surface syntax, but getting it into core.  FWIW, I like the term attribute suggestion.  Not just for this but also for <code>@[outParam]</code>, <code>@[unused]</code>, and <code>@[borrowed]</code>.</p>",
        "id": 337951639,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677313403
    },
    {
        "content": "<p>To contribute to the bikeshed, a long time ago I thought we should call this <code>class Foo A extends Bar A with Baz A</code> (like Scala, where the <code>with</code> indicates indirect inheritance).</p>",
        "id": 337951851,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677313523
    },
    {
        "content": "<p>I think the version I suggested is potentially viable for core. <code>set_option oldStructure</code> is absolutely the wrong message by comparison</p>",
        "id": 337954568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677314893
    },
    {
        "content": "<p>This is already something the structure elaborator can do, it just doesn't surface a syntax for it</p>",
        "id": 337954616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677314923
    },
    {
        "content": "<p>I think we might want to have the <code>eta</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">→+*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">--fails</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- no problem</span>\n</code></pre></div>",
        "id": 339007689,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677735524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> At the top of the thread, I show an example where you need to switch between having the option <code>true</code> and <code>false</code> within one declaration.</p>",
        "id": 339018480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677740919
    },
    {
        "content": "<p>I saw that. My point is that we need a midterm-solution to that issue, because otherwise all linear algebra is blocked.</p>",
        "id": 339019610,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677741423
    },
    {
        "content": "<p>Sure, a lot of the port is blocked</p>",
        "id": 339020531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677741807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> Is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: added the following line, fails to be inferred otherwise. Probably lean4#2074</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Semiring.toModule</span>\n</code></pre></div>\n<p>a workaround in your file?</p>",
        "id": 339020734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677741882
    },
    {
        "content": "<p>If you search for <code>2074</code> in mathlib4, you'll find a handful of workarounds that people use to keep the port moving.</p>",
        "id": 339020815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677741920
    },
    {
        "content": "<p>Ah thanks, I was only aware of the 'remove attribute' workaround.</p>",
        "id": 339021558,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677742235
    },
    {
        "content": "<p>As a temporary workaround to guarantee that all our base algebraic classes are flat, would it work to start all of them with <code>hasZero</code>, so that the other classes that also have a zero would be flattened by the current heuristics? Something like <code>class Ring R extends hasZero R, Semiring R, hasNeg R</code>...</p>",
        "id": 339667889,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678010323
    },
    {
        "content": "<p>That won't ensure flatness for MonoidWithZero I don't think</p>",
        "id": 339668748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678010802
    },
    {
        "content": "<p>Lots of possible workarounds (including a similar one) were already discussed in a previous thread I think</p>",
        "id": 339668840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678010851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/eta.20ftw/near/339668748\">said</a>:</p>\n<blockquote>\n<p>That won't ensure flatness for MonoidWithZero I don't think</p>\n</blockquote>\n<p>Sure, for this one we would need <code>extends hasZero R, hasOneR, ...</code>. Do you have pointers for where this was discussed?</p>",
        "id": 339674017,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678013458
    },
    {
        "content": "<p>The original thread is linked from the GitHub issue I think. When I'm not on mobile I could look for it</p>",
        "id": 339674441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013694
    },
    {
        "content": "<p>But yes, in general listing all the notation base classes explicitly would do the trick</p>",
        "id": 339674503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013734
    },
    {
        "content": "<p>As would adding an empty <code>structure EnsureClash</code> base class to the start of every algebraic and notation class</p>",
        "id": 339674751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678013844
    }
]