[
    {
        "content": "<p>I am trying to prove something should be obvious in Std lib. But I do not know how to do induction on two variables.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tolist_append</span> <span class=\"o\">:</span> <span class=\"n\">RBNode.toList</span> <span class=\"o\">(</span><span class=\"n\">RBNode.append</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">RBNode.append</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here dose the <code>RBNode.append</code> look like. I can not finish my proof because I can not do induction on both left node and right node and say their children are smaller than them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Concatenate two trees with the same black-height. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"n\">RBNode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RBNode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RBNode</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">append</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">b'</span> <span class=\"n\">z</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">c'</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bc</span>               <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">bc</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">y</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">append</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">b'</span> <span class=\"n\">z</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"n\">c'</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">bc</span>               <span class=\"bp\">=&gt;</span> <span class=\"n\">balLeft</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"n\">bc</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"bp\">..</span><span class=\"o\">),</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"n\">black</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">+</span> <span class=\"n\">y.size</span>\n</code></pre></div>",
        "id": 399439112,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698735352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250110\">ZHAO Jiecheng</span> has marked this topic as resolved.</p>",
        "id": 399470426,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698748202
    },
    {
        "content": "<p>Done by add <code>termination_by</code> at the end of theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tolist_append</span> <span class=\"o\">:</span> <span class=\"n\">RBNode.toList</span> <span class=\"o\">(</span><span class=\"n\">RBNode.append</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">RBNode.append</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">x1</span> <span class=\"n\">t5</span> <span class=\"n\">t6</span> <span class=\"n\">x2</span> <span class=\"n\">t7</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">t8</span> <span class=\"n\">t9</span> <span class=\"n\">x10</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">RBNode.toList</span> <span class=\"o\">(</span><span class=\"n\">RBNode.node</span> <span class=\"n\">RBColor.red</span> <span class=\"n\">t8</span> <span class=\"n\">t9</span> <span class=\"n\">x10</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n     <span class=\"n\">RBNode.toList</span> <span class=\"n\">t5</span> <span class=\"bp\">++</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">t6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">tolist_append</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.append_assoc</span> <span class=\"o\">(</span><span class=\"n\">RBNode.toList</span> <span class=\"n\">t5</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">t8</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">RBNode.toList</span> <span class=\"o\">(</span><span class=\"n\">RBNode.append</span> <span class=\"n\">t5</span> <span class=\"n\">t6</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">t5</span> <span class=\"bp\">++</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">t6</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">tolist_append</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"n\">x4</span> <span class=\"n\">t5</span> <span class=\"n\">t6</span> <span class=\"n\">x7</span> <span class=\"n\">t8</span> <span class=\"n\">t9</span> <span class=\"n\">t10</span> <span class=\"n\">x11</span> <span class=\"n\">t12</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span><span class=\"n\">RBNode.toList</span> <span class=\"o\">(</span><span class=\"n\">RBNode.node</span> <span class=\"n\">RBColor.red</span> <span class=\"n\">t10</span> <span class=\"n\">x11</span> <span class=\"n\">t12</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">RBNode.toList</span> <span class=\"n\">t5</span> <span class=\"bp\">++</span> <span class=\"n\">RBNode.toList</span> <span class=\"n\">t6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">tolist_append</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.append_assoc</span> <span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tolist_append</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tolist_append</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tolist_append</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.size</span> <span class=\"bp\">+</span> <span class=\"n\">r.size</span>\n</code></pre></div>",
        "id": 399470572,
        "sender_full_name": "ZHAO Jiecheng",
        "timestamp": 1698748233
    }
]