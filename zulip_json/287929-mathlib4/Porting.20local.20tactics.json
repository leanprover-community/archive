[
    {
        "content": "<p>I have multiple <code>simp only</code> tactics in a local file that simply chains together multiple lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">map_simp</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">map_bit0</span><span class=\"o\">,</span> <span class=\"n\">map_bit1</span><span class=\"o\">,</span> <span class=\"n\">map_neg</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_pow</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>What do I do with these for the corresponding file in mathlib4?</p>",
        "id": 367985957,
        "sender_full_name": "David Ang",
        "timestamp": 1687278048
    },
    {
        "content": "<p>You can have a macro doing that.</p>",
        "id": 367986339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687278135
    },
    {
        "content": "<p>A more annoying thing is the name <code>map_bit0</code> and <code>map_bit1</code> suggest relying on the way computation with Nat is implemented in Lean 3.</p>",
        "id": 367986500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687278175
    },
    {
        "content": "<p>untested, but it should be something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"map_simp \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 367987121,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1687278305
    },
    {
        "content": "<p>Regarding the handling of numerals, I had to do some similar fidgeting  when I ported the <code>noncomm_ring</code> tactic. I <em>think</em> I did it right (at least, it seemed to work on tests for <code>noncomm_ring</code>). If you want to have a look it's <code>Tactic.NoncommRing</code>.</p>",
        "id": 367993665,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687279705
    },
    {
        "content": "<p>How would I make the macro private/local/scoped? I don't want it to be visible outside my file.</p>\n<p>EDIT: seems like adding <code>local</code> might work? #lint doesn't complain that it doesn't have a docstring anymore.</p>",
        "id": 369173797,
        "sender_full_name": "David Ang",
        "timestamp": 1687610510
    },
    {
        "content": "<p>Instead of <code>bit0</code>/<code>bit1</code> lemmas, you should use lemmas for <code>0</code>, <code>1</code>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat.ofNat#doc\">docs#OfNat.ofNat</a></p>",
        "id": 369240055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629186
    },
    {
        "content": "<p>The latter is defeq to <code>Nat.cast n</code> given <code>[n.AtLeastTwo]</code></p>",
        "id": 369240123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629221
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_ofNat#doc\">docs#map_ofNat</a></p>",
        "id": 369240213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687629247
    }
]