[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- leaves unsolved goals:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rfl</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- succeeds:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_self</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What's odd here is that it doesn't even seem possible to prove the remaining unsolved goal in the first case (hence the title of the thread).</p>\n<p>Adding <code>h, ite_true, ite_self, ite_false</code> to the internals of <code>split_ifs</code> seems to help sometimes but not all of the time. Nonetheless, I feel like there's probably a better way to solve this issue. I'll think about it tomorrow if no one figures it out first, but thought I'd put it out there in case someone sees the issue immediately :)</p>\n<p>Note: this came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5520\">!4#5520</a>, where the mathlib3 version succeeded while the mathlib4 version didn't.</p>",
        "id": 370061054,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687872093
    },
    {
        "content": "<p>(You're missing an import for this to be a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.)</p>",
        "id": 370222974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687905916
    },
    {
        "content": "<p>Curiously <code>show_term</code> on this split_ifs prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which doesn't work at all.</p>",
        "id": 370223030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687905932
    },
    {
        "content": "<p>Changing <code>example</code> to <code>def</code> gives a different error message, which is perhaps helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SplitIfs</span>\n\n<span class=\"c1\">-- leaves unsolved goals:</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rfl</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 370224992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687906712
    },
    {
        "content": "<p><code>unknown free variable '_uniq.187'</code></p>",
        "id": 370225013,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687906724
    },
    {
        "content": "<p>I'm not seeing the problem yet, but <code>hNames : IO.Ref (List (TSyntax `Lean.binderIdent))</code> looks pretty smelly to me. Why are we using an <code>IO.ref</code> here!?</p>",
        "id": 370225782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687906996
    },
    {
        "content": "<p>.... because all the combinators in <code>TacticM</code> assume that you would only ever want to use <code>TacticM Unit</code>, and so it is a hassle to pass state around. <code>TacticM</code> needs some love. :-)</p>",
        "id": 370226995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687907571
    },
    {
        "content": "<p>Hmm, the <code>IO.ref</code> is not the cause of the problem. Getting rid of it is satisfying, but the error remains.</p>",
        "id": 370227941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687907985
    },
    {
        "content": "<p>Small update: I've been tracking down that free variable! Interestingly, it didn't appear in any of the intermediate local contexts of <code>split_ifs</code> itself. Rather, It's a free variable from a local context created <em>during</em> the simp call, and gets picked up by the discharger! The local context seen by the discharger somehow never \"makes it out\" to the new goal that's created.</p>\n<p>This actually isn't a mathlib issue—even if you use the original <code>SplitIf.discharge?</code> instead of the adapted mathlib one in that file, the problem persists.</p>\n<p>Here's a mathlib-free <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (this time with the imports needed for it to <code>w</code> :) ), which is just a simp call using the congr theorems and <code>if_pos</code> (both of which are necessary to get into the relevant state):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"split_if\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"bp\">``</span><span class=\"n\">if_pos</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">],</span> <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span><span class=\"o\">)}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">result</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">simpGoal</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">ctx</span> <span class=\"n\">SplitIf.discharge</span><span class=\"bp\">?</span>\n  <span class=\"k\">match</span> <span class=\"n\">result</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- error: unknown free variable '_uniq.3761'</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split_if</span>\n</code></pre></div>",
        "id": 370363480,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687947226
    },
    {
        "content": "<p>This failure to propagate the local context <em>could</em> be the cause of the impossible local context that started this thread, so maybe it's not a \"small update\". However, I haven't yet located where in <code>simp</code> the local context actually fails to be updated/associated with the new goal, so there's still more digging to do.</p>",
        "id": 370364202,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687947348
    }
]