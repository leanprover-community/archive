[
    {
        "content": "<p>In particular, simp doesn't simplify defeqs. My MWE is a real world example, a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi><mo>→</mo><mtext>Aut</mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z/2\\mathbb Z\\to \\text{Aut}(\\mathbb Z/n\\mathbb Z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Aut</span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">AddAut</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">simp</span>\n    <span class=\"c1\">-- Goal : ↑(AddEquiv.neg (ZMod n) ^ ZMod.val (1 * 1)) x = ↑(AddEquiv.neg (ZMod n) ^ ZMod.val 1) (↑(AddEquiv.neg (ZMod n) ^ ZMod.val 1) x)</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This proof works but I shouldn't need to do manual defeq conversions with conv:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">AddAut</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">ZMod.val</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"mi\">0</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">ZMod.val</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"mi\">1</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">ZMod.val</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">change</span> <span class=\"mi\">1</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">AddAut.one_apply</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">AddAut.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">AddEquiv.neg_apply</span><span class=\"o\">,</span> <span class=\"n\">map_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 402351445,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700094328
    },
    {
        "content": "<p>You're having this problem because you cheated and didn't use <code>ofAdd</code> and <code>toAdd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">AddAut</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.toAdd.val</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 402359282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700097750
    },
    {
        "content": "<p>You were pretending that <code>Multiplicative (ZMod 2)</code> and <code>ZMod 2</code> were the same type, but <code>simp</code> is not ok with you doing that</p>",
        "id": 402359324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700097778
    },
    {
        "content": "<p>Ohh actually <code>| ofAdd (0 : ZMod 2)</code> was one of the things I tried, and Lean didn't accept that... because I was missing the dot!</p>",
        "id": 402360473,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700098360
    },
    {
        "content": "<p>Without the dot it thinks you're declaring a new variable called <code>ofAdd</code></p>",
        "id": 402360686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700098494
    },
    {
        "content": "<p>Note I also changed <code>.toFun</code></p>",
        "id": 402360697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700098502
    },
    {
        "content": "<p>As an aside, I think there's probably some overlap here with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instModuleZModOfNatNatInstOfNatNatAdditiveUnitsIntInstMonoidIntToSemiringToDivisionSemiringToSemifieldInstFieldZModFact_prime_twoAddCommMonoidToCommMonoidInstCommGroupUnitsInstCommMonoidInt#doc\">docs#instModuleZModOfNatNatInstOfNatNatAdditiveUnitsIntInstMonoidIntToSemiringToDivisionSemiringToSemifieldInstFieldZModFact_prime_twoAddCommMonoidToCommMonoidInstCommGroupUnitsInstCommMonoidInt</a></p>",
        "id": 402360771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700098552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Multiplicative.20doesn't.20play.20well.20with.20simp/near/402359282\">said</a>:</p>\n<blockquote>\n<p>You're having this problem because you cheated and didn't use <code>ofAdd</code> and <code>toAdd</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">AddAut</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.toAdd.val</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>OK, I tried this code snippet. Before I got to my computer, I thought this was a valid proof, but actually there is still some stuff to do after the simp. How to finish?</p>\n<p>The goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ZMod.val</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">ZMod.val</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Obviously, for example, <code>ZMod.val 1</code> is defeq to <code>1</code>, but simp refuses to touch that for some reason.</p>",
        "id": 402366566,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700101671
    },
    {
        "content": "<p>You should write a lemma that says the thing that is obvious to you</p>",
        "id": 402366914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700101816
    },
    {
        "content": "<p>And then hand it to simp</p>",
        "id": 402366949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700101829
    },
    {
        "content": "<p>Is the proof easier without <code>ext</code>?</p>",
        "id": 402367036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700101886
    },
    {
        "content": "<p>ok this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">α'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">AddAut</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">AddEquiv.neg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x.toAdd.val</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ofAdd</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 402367180,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700101958
    }
]