[
    {
        "content": "<p>I have few examples that I expect <code>countinuity</code> tactic to solve but it won't. However, I have no experience with Lean 3 <code>continuity</code> tactic and I might expect too much from it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Constructions</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Z</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">continuity</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_pi_iff.1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try</span> <span class=\"n\">continuity</span>\n   <span class=\"n\">apply</span> <span class=\"n\">continuous_pi_iff.1</span>\n   <span class=\"n\">apply</span> <span class=\"n\">continuous_pi_iff.1</span>\n   <span class=\"n\">try</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- still no?</span>\n   <span class=\"n\">apply</span> <span class=\"n\">Continuous.comp'</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">continuity</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_pi_iff.2</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_pi_iff.1</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Continuous.comp'</span> <span class=\"n\">hf</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>How do I state that a function is jointly continuous in two arguments? Likely I have found aesop bug  by following mahtlib style</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- How to formulate joint continuity of arguments?</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Continuous</span> <span class=\"n\">g₁</span> <span class=\"bp\">→</span> <span class=\"n\">Continuous</span> <span class=\"n\">g₂</span> <span class=\"bp\">→</span> <span class=\"n\">Continuous</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"n\">w</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"c1\">-- continuity  -- causes this error</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    application type mismatch</span>\n<span class=\"cm\">      hf</span>\n<span class=\"cm\">    argument has type</span>\n<span class=\"cm\">      Type</span>\n<span class=\"cm\">    but function has type</span>\n<span class=\"cm\">      ∀ {W : Type u_1} (g₁ g₂ : W → X) [inst : TopologicalSpace W],</span>\n<span class=\"cm\">        Continuous g₁ → Continuous g₂ → Continuous fun w =&gt; f (g₁ w) (g₂ w)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span> <span class=\"n\">id</span> <span class=\"n\">id</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>There is no issue when the function <code>f</code> is not an argument to the example but separately stated function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[continuity]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">continuous_foo</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>\n<hr>\n<p>Are these known limitations? Is there a plan to fix it? I'm happy to help with it if someone points me in the right direction.</p>",
        "id": 344894992,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679930084
    },
    {
        "content": "<p>Being jointly continuous in two arguments is delicate! Mathematically if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">X,Y,Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> are topological spaces then we consider continuous functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">X\\times Y\\to Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>. However the usual process of currying turning this into <code>X -&gt; Y -&gt; Z</code> has a problem with continuity, because it's not possible in general to put a topological space structure on <code>Y -&gt; Z</code> such that the continuous maps <code>X \\times Y -&gt; Z</code> are precisely the continuous maps <code>X -&gt; Y -&gt; Z</code>. I think that people usually work with the products in this case (indeed, they have to).</p>",
        "id": 344898410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679930863
    },
    {
        "content": "<p>A related issue is that mathlib <em>does</em> put a topology on <code>Y -&gt; Z</code> and this topology doesn't work at all (it can't see the topology on <code>Y</code>, it just regards <code>Y</code> as an index set and views the function space as a large product of copies of <code>Z</code>, so all information about the topology on <code>Y</code> is lost).</p>",
        "id": 344898803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679930948
    },
    {
        "content": "<p>As Kevin is pointing out, this is why things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_mul\">docs#continuous_mul</a> are stated for the product <code>α × α → α</code>.</p>",
        "id": 344899394,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679931074
    },
    {
        "content": "<p>Yes, to reduce it to continuity in a single argument It would have to be states something like <code>(hfy : ∀ x, Continuous (λ y =&gt; f x y))</code> <code>(hfx : Continuous (λ x =&gt; λ y ==&gt; f x y))</code> where <code>(λ y ==&gt; f x y) : ContinuousMap Y Z</code></p>",
        "id": 344899831,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679931176
    },
    {
        "content": "<p>If I'm understanding you correctly, then what I'm trying to say is that what you're suggesting is not possible (in the sense that it cannot be made equivalent to the statement about the map from the product being continuous).</p>",
        "id": 344900391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679931302
    },
    {
        "content": "<p>So If I have an n-ary function I have to state a theorem similar to <code>Continuous.mul</code>/<code>continuous_foo</code>. It has to be fixed to the particular n-ary function.</p>",
        "id": 344901431,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679931562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/failing.20cases.20for.20continuity/near/344900391\">said</a>:</p>\n<blockquote>\n<p>If I'm understanding you correctly, then what I'm trying to say is that what you're suggesting is not possible (in the sense that it cannot be made equivalent to the statement about the map from the product being continuous).</p>\n</blockquote>\n<p>Ahh you are right. I'm not too familiar with general topological spaces and in my head I was thinking about a different setting which forms cartesian closed category where you can (un)curry functions and you get such equivalence.</p>",
        "id": 344901884,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679931663
    },
    {
        "content": "<p>yeah, topological spaces are not a CCC and this is exactly the problem.</p>",
        "id": 344902372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679931779
    },
    {
        "content": "<p>Solution: use condensed sets <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 344902448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679931798
    },
    {
        "content": "<p>I'm working with convenient vector spaces, probably will work with diffeological spaces in the future. If condensed sets can do similar stuff, I'm happy to work with them :)</p>",
        "id": 344902912,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679931912
    },
    {
        "content": "<p>But that still leaves me with the question, should I try to use/extend the continuity tactic/aesop or write my own tactic.</p>",
        "id": 344903148,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1679931965
    },
    {
        "content": "<p>Is it easy to make compactly generated topological spaces with existing tech?</p>",
        "id": 344905320,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679932453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/failing.20cases.20for.20continuity/near/344905320\">said</a>:</p>\n<blockquote>\n<p>Is it easy to make compactly generated topological spaces with existing tech?</p>\n</blockquote>\n<p>You could define them as spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> where a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> is open if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{-1}(U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is open for any continuous map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>C</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">f : C \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a comphaus. (to avoid unnecessary universe nonsense, we would make <code>X</code> and <code>C</code> live in the same universe)</p>",
        "id": 344906798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679932807
    },
    {
        "content": "<p>that would make the relationship with condensed sets quite easy to prove, I think.</p>",
        "id": 344906852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679932822
    },
    {
        "content": "<p>Dumb question: are they the same as compactly generated in the <del>preorder</del> order sense?</p>",
        "id": 344907513,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679932976
    },
    {
        "content": "<p>I don't know what that term means for preorders... (or orders ;))</p>",
        "id": 344907695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679933019
    },
    {
        "content": "<p>I just did a cursory mathlib3 search for \"compactly generated\" and found orders and modules</p>",
        "id": 344908011,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679933080
    },
    {
        "content": "<p>And I knew that modules wouldn't work <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 344908091,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679933099
    },
    {
        "content": "<p>I think it roughly means that the preorder is locally finitely presentable as a category, and it is not very related</p>",
        "id": 344908093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679933100
    }
]