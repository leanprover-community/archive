[
    {
        "content": "<p>Is this expected/known behaviour?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Where are my `x` and `y`?</span>\n<span class=\"cm\">  -------------------------</span>\n<span class=\"cm\">  Goal state:</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  case y</span>\n<span class=\"cm\">  ⊢ ?m.153 ?x</span>\n<span class=\"cm\">  case x</span>\n<span class=\"cm\">  ⊢ ?m.145</span>\n<span class=\"cm\">  ⊢ Sort ?u.144</span>\n<span class=\"cm\">  ⊢ ?m.145 → Sort ?u.147</span>\n<span class=\"cm\">  ⊢ (x : ?m.145) → ?m.153 x → Nat → Nat → Nat → Nat</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 325560255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408372
    },
    {
        "content": "<p>This is one hiccup in the output of mathport.</p>",
        "id": 325560346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408417
    },
    {
        "content": "<p>this is known behavior</p>",
        "id": 325560511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408498
    },
    {
        "content": "<p>it seems that lean 4 generalizes metavariables / forgets what was introduced and what wasn't, esp. when using <code>_</code></p>",
        "id": 325560594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408550
    },
    {
        "content": "<p>(And using <code>?_</code> doesn't help either.)</p>",
        "id": 325560671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408575
    },
    {
        "content": "<p>Is it considered a bug or a feature?</p>",
        "id": 325560705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408598
    },
    {
        "content": "<p>it works for me with <code>?_</code></p>",
        "id": 325560716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408608
    },
    {
        "content": "<p>I think it is a bug</p>",
        "id": 325560788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408642
    },
    {
        "content": "<p>Ooh, right! I do get an <code>x</code> and <code>y</code>. But Lean has no clue at all about the types.</p>",
        "id": 325560800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408651
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.19</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n<span class=\"n\">case</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.11</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.10</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">?</span><span class=\"n\">m.11</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.13</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.11</span>\n<span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.19</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 325560816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408660
    },
    {
        "content": "<p>but it could be the consequence of some hard to change design things</p>",
        "id": 325560818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408661
    },
    {
        "content": "<p>yeah that is expected, it did <code>refine (fun x y ↦ ?_) _ _</code> because why not</p>",
        "id": 325560953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408713
    },
    {
        "content": "<p><code>apply</code> should become an agda-style macro that replaces itself with <code>refine</code> and a suitable extra number of underscores.</p>",
        "id": 325561078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408774
    },
    {
        "content": "<p>it did exactly that</p>",
        "id": 325561093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408783
    },
    {
        "content": "<p>2 is suitable too</p>",
        "id": 325561113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408795
    },
    {
        "content": "<p>No, I mean an editor-level macro.</p>",
        "id": 325561127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408799
    },
    {
        "content": "<p>aha</p>",
        "id": 325561204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408817
    },
    {
        "content": "<p>We should ban <code>apply</code> from checked-in source code.</p>",
        "id": 325561209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408818
    },
    {
        "content": "<p><code>show_term</code> could be a code action for any tactic</p>",
        "id": 325561251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408842
    },
    {
        "content": "<p>also that</p>",
        "id": 325561308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675408867
    },
    {
        "content": "<p>there are more occurrences of <code>apply</code> than <code>refine</code> in mathlib4</p>",
        "id": 325561416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675408918
    },
    {
        "content": "<p>If you found this in mathlib btw this is a weird way to spell <code>intros x y</code></p>",
        "id": 325562035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409170
    },
    {
        "content": "<p>As an unskilled tactic user, let me say <code>apply</code> is far easier for me to understand. Also it is one step away from a declarative proof, essentially <code>:= my_theorem _</code> with unification.</p>",
        "id": 325562065,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675409193
    },
    {
        "content": "<p>It was highly minimized</p>",
        "id": 325562073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> <code>refine</code> is what you say. <code>apply</code> does more magic.</p>",
        "id": 325562126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The actual use case was more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">my_lemma</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 325562170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409258
    },
    {
        "content": "<p>ok so using <code>?_</code> should do what you want there</p>",
        "id": 325562318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409278
    },
    {
        "content": "<p>mathport isn't good at inserting <code>?_</code> which is why it uses <code>refine'</code></p>",
        "id": 325562453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409297
    },
    {
        "content": "<p>Maybe unless you need an unknown extra number of <code>?_</code> at the end of the <code>apply</code> call as well?</p>",
        "id": 325562486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409311
    },
    {
        "content": "<p>Because otherwise it might still mess up the goal state, like in the MWE</p>",
        "id": 325562566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409349
    },
    {
        "content": "<p>is that a response to me or siddhartha?</p>",
        "id": 325562608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409377
    },
    {
        "content": "<p>To you</p>",
        "id": 325562615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply.20doesn't.20like.20.60fun.20x.20.3D.3E.20_.60/near/325560953\">said</a>:</p>\n<blockquote>\n<p>yeah that is expected, it did <code>refine (fun x y ↦ ?_) _ _</code> because why not</p>\n</blockquote>\n<p>You might be bitten by a variant of this, unexpectedly, I guess</p>",
        "id": 325562712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409411
    },
    {
        "content": "<p>Where \"You\" means \"me\" and not <em>you</em></p>",
        "id": 325562741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409426
    },
    {
        "content": "<p>I won't be bit by it because I never use <code>apply</code> except as a golfed version of <code>refine</code></p>",
        "id": 325562789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409459
    },
    {
        "content": "<p>\"Lean does not unexpectedly bite Mario. Mario unexpectedly bites Lean.\"</p>",
        "id": 325562808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409475
    },
    {
        "content": "<p>Does lean 3 really not introduce <code>_</code> in the <code>apply fun x y ↦ _</code> example?</p>",
        "id": 325562840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409505
    },
    {
        "content": "<p>maybe this is an unintended consequence of the apply bug</p>",
        "id": 325562925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409529
    },
    {
        "content": "<p>it seems like weird enough code that I think it shouldn't occur in the wild</p>",
        "id": 325563055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409579
    },
    {
        "content": "<p>Maybe this makes more sense in context but <code>apply (fun x y =&gt; _)</code> seems like really weird style unless you intended what Lean 4 does</p>",
        "id": 325563089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675409586
    },
    {
        "content": "<p>Did whoever wrote that mean <code>refine</code> instead of <code>apply</code> and just forget?</p>",
        "id": 325563488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675409724
    },
    {
        "content": "<p><em>probably</em></p>",
        "id": 325563745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409821
    },
    {
        "content": "<p>I think there are plenty of examples in mathlib where <code>apply</code> is used, even if <code>refine</code> makes more sense in both a technical <em>and</em> semantical sense.</p>",
        "id": 325563856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675409861
    },
    {
        "content": "<p>that wouldn't be hard to lint</p>",
        "id": 325564052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409925
    },
    {
        "content": "<p>\"used <code>apply</code> where <code>exact</code>/<code>refine</code> would work\"</p>",
        "id": 325564138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409950
    },
    {
        "content": "<p>for the case where zero <code>_</code> are inserted</p>",
        "id": 325564173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675409967
    },
    {
        "content": "<p>I guess in 99% of the cases, that would also be a semantic improvement?</p>",
        "id": 325564370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675410050
    },
    {
        "content": "<p>it could cause an elaboration change, usually for the better</p>",
        "id": 325564439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410090
    },
    {
        "content": "<p>I wish we had something like rust clippy though for these kind of borderline pedantic lints</p>",
        "id": 325564594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410155
    },
    {
        "content": "<p>I vaguely recall that there were cases in mathlib 3 where apply was a significant speedup over exact or term mode proofs</p>",
        "id": 325564876,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675410281
    },
    {
        "content": "<p>we also have <code>exact (e :)</code> for when we want to actively forget about the expected type when elaborating <code>e</code>, which roughly corresponds to what <code>apply e</code> does in the 0-<code>_</code> case</p>",
        "id": 325565155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply.20doesn't.20like.20.60fun.20x.20.3D.3E.20_.60/near/325564439\">said</a>:</p>\n<blockquote>\n<p>it could cause an elaboration change, usually for the better</p>\n</blockquote>\n<p>I recently had a case where I needed the <code>apply</code> elaboration order (due to Lean trying to pick up a typeclass assumption throguh TC inference rather than unification), hence I introduced a \"no <code>_</code> inserted\"-<code>apply</code> call.</p>",
        "id": 325565834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675410683
    },
    {
        "content": "<p>yep that's what <code>(e :)</code> is for</p>",
        "id": 325565908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410712
    },
    {
        "content": "<p>I think it is more explicit that you are doing funny business</p>",
        "id": 325565979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410726
    },
    {
        "content": "<p>I didn't even know that was correct syntax. I thought you had to do <code>exact (e : _)</code></p>",
        "id": 325566015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675410743
    },
    {
        "content": "<p>that's the lean 3 syntax</p>",
        "id": 325566042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply.20doesn't.20like.20.60fun.20x.20.3D.3E.20_.60/near/325565979\">said</a>:</p>\n<blockquote>\n<p>I think it is more explicit that you are doing funny business</p>\n</blockquote>\n<p>In that case I left a note in the proof anyway</p>",
        "id": 325566047,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675410764
    },
    {
        "content": "<p>it doesn't have the desired effect in lean 4 so <code>(e :)</code> is the replacement</p>",
        "id": 325566136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410801
    },
    {
        "content": "<p>Oh okay!</p>",
        "id": 325566153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675410815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply.20doesn't.20like.20.60fun.20x.20.3D.3E.20_.60/near/325565834\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply.20doesn't.20like.20.60fun.20x.20.3D.3E.20_.60/near/325564439\">said</a>:</p>\n<blockquote>\n<p>it could cause an elaboration change, usually for the better</p>\n</blockquote>\n<p>I recently had a case where I needed the <code>apply</code> elaboration order (due to Lean trying to pick up a typeclass assumption throguh TC inference rather than unification), hence I introduced a \"no <code>_</code> inserted\"-<code>apply</code> call.</p>\n</blockquote>\n<p>(although I think that trick won't work in lean 4 anyway, since it doesn't like to get typeclasses by unification)</p>",
        "id": 325566247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675410846
    }
]