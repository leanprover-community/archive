[
    {
        "content": "<p>See the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Option.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.GeneralizeProofs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ExtractGoal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SuccessIfFailWithMsg</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.isSome</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- More complex expression in reality</span>\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">good</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Option.get</span> <span class=\"n\">x</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x.isSome</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Option.get</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">x.isSome</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span>\n  <span class=\"n\">success_if_fail_with_msg</span> <span class=\"s2\">\"unknown identifier 'h'\"</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I want to be able to get the proof without having to copy the lemma that proves it (sometimes because the expression in it is also long). <code>generalize_proofs</code> in Lean 3 worked with no problem, but the Lean 4 version almost always seems to fail. What seems more weird is that the tactic has no effect and raises no errors.</p>",
        "id": 407162574,
        "sender_full_name": "Naruyoko",
        "timestamp": 1702272523
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.02klzzwxh.3A0000.03.20sometimes.20silently.20has.20no.20effect\">#lean4 &gt; <code>generalize_proofs</code> sometimes silently has no effect</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 407162910,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702272724
    }
]