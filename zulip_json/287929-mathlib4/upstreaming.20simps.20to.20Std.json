[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, I would really like to make <code>simps</code> available to everyone, outside Mathlib. I've verified that it is easy to extract: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8140\">#8140</a> does a slight import cleanup result from checking this.</p>\n<p>Would you have any objection if I did this? (Anyone else?)</p>",
        "id": 400052440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698979261
    },
    {
        "content": "<p>That sounds good to me!</p>",
        "id": 400080585,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698997500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I don't know what I'm talking about, but I noticed that you are removing a use of <code>q</code>. I thought we generally tried to use Qq whenever possible?</p>\n<p>But I guess Std can't depend on Qq, because Qq already depends on Std?</p>",
        "id": 400080830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698997643
    },
    {
        "content": "<p>Qq doesn't depend on Std</p>",
        "id": 400081655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698998148
    },
    {
        "content": "<p>Also, I think there's an open PR that fixes a bug in simps; it would be nice to get that merged before upstreaming</p>",
        "id": 400081765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698998190
    },
    {
        "content": "<p>Do you mean</p>\n<blockquote>\n<p>WIP: try to fix simps not failing when reaching a term is not a constructor <a href=\"https://github.com/leanprover-community/mathlib4/pull/2936\">#2936</a></p>\n</blockquote>",
        "id": 400081856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698998245
    },
    {
        "content": "<p>Last time the Qq thing came up I think we were stalled by Gabriel having no time; I think now that the repo ownership has transferred, that's slightly less of a concern</p>",
        "id": 400081858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698998246
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7707\">#7707</a> is the one I had in mind</p>",
        "id": 400082016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698998317
    },
    {
        "content": "<p>Speaking of which, I've been thinking about upstreaming Qq to Std</p>",
        "id": 400082493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698998520
    },
    {
        "content": "<p>In that case, this change to simps should maybe not be made?</p>",
        "id": 400082693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698998593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/upstreaming.20simps.20to.20Std/near/400082493\">said</a>:</p>\n<blockquote>\n<p>Speaking of which, I've been thinking about upstreaming Qq to Std</p>\n</blockquote>\n<p>This sounds like a much better option than de-Qqing mathlib tactics; though I think we should:</p>\n<ul>\n<li>merge the open Qq PRs first</li>\n<li>make sure to merge the histories <code>git merge --allow-unrelated</code> to ensure Gabriel keeps all the credit / commit logs</li>\n</ul>",
        "id": 400084152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698999334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How concrete are you Qq-upstreaming plans?<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> How urgent is upstreaming <code>simps</code> to <code>Std</code> for you/FRO?</p>",
        "id": 400084823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698999672
    },
    {
        "content": "<p>I was thinking about bringing it up for discussion, not much more concrete than that</p>",
        "id": 400084867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698999698
    },
    {
        "content": "<p>it's definitely appropriate for Std, and it's going to be a bigger problem the more mathlib tactics we upstream because many of them use Qq</p>",
        "id": 400085103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698999732
    },
    {
        "content": "<p>For now, could Std just start depending on Qq? Or is that too weird?</p>",
        "id": 400085218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698999796
    },
    {
        "content": "<p>It would most likely take the form of making <code>Qq</code> live in some new module like <code>Std.Tactic.Qq</code>, copying the contents in</p>",
        "id": 400085241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698999813
    },
    {
        "content": "<p>Std doesn't have any dependencies and the plan is to keep it that way, although we can consider alternatives</p>",
        "id": 400085356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698999866
    },
    {
        "content": "<p>What's the issue with adding dependencies to Std? If the plan is to eventually merge the packages anyway, that doesn't sound too bad in the meantime.</p>",
        "id": 400088072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699001126
    },
    {
        "content": "<p>I was talking long term</p>",
        "id": 400088211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699001191
    },
    {
        "content": "<p>Sure, we could do it as a temporary measure but I don't really see the point since inlining is also fairly easy</p>",
        "id": 400088272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699001221
    },
    {
        "content": "<p>I don't see any forthcoming technical solutions to being able to automatically inline Qq in Std</p>",
        "id": 400088382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699001269
    },
    {
        "content": "<p>We should probably check <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is happy with that outcome</p>",
        "id": 400088469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699001298
    },
    {
        "content": "<p>The main reason I want to avoid dependencies is because it means fewer moving parts for all downstream packages</p>",
        "id": 400088492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699001308
    },
    {
        "content": "<p>I think this whole discussion is a bit off-track. :-)</p>\n<p>The use of <code>Qq</code> in <code>simps</code> was completely trivial: I replaced it with literally a single call to <code>mkConst</code>.</p>",
        "id": 400250723,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699072480
    },
    {
        "content": "<p>If <a href=\"https://github.com/leanprover-community/mathlib4/pull/7707\">#7707</a> is going to happen soon it is fine to wait for it. But if it's more than a couple of days I'd prefer that we just continue with the upstreaming, and move <a href=\"https://github.com/leanprover-community/mathlib4/pull/7707\">#7707</a> over afterwards.</p>",
        "id": 400250880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699072557
    },
    {
        "content": "<p>Entirely separately from upstreaming simps, we can talk about <code>Qq</code> in Std. :-)</p>\n<p>Leo has previously expressed opposition to moving Qq into Std, or indeed having too many tactics relying on it. So I think this question is a complicated one that may not be resolvable quickly.</p>",
        "id": 400251176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699072677
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover/std4/pull/347\">std#347</a> is the upstreaming of <code>@[simps]</code>. It can happen before or after <a href=\"https://github.com/leanprover-community/mathlib4/pull/7707\">#7707</a>, either way will just patch up the second PR.</p>",
        "id": 400263324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699080978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/upstreaming.20simps.20to.20Std/near/400251176\">said</a>:</p>\n<blockquote>\n<p>Entirely separately from upstreaming simps, we can talk about <code>Qq</code> in Std. :-)</p>\n<p>Leo has previously expressed opposition to moving Qq into Std, or indeed having too many tactics relying on it. So I think this question is a complicated one that may not be resolvable quickly.</p>\n</blockquote>\n<p>Okay, I will hold off and also bring this up with him. Qq is definitely not the most bullet-proof implementation, but I think the ideas are sound and I really would not want to do any serious expr building over known types without it or an equivalent.</p>",
        "id": 400264032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699081595
    },
    {
        "content": "<p>My only real complaint is that there are sometimes weird hard-to-diagnose errors binding universe levels.</p>\n<p>I think (don't quote me?) Leo was concerned in part that it might be too easy for users to write non-performant Expr matching code, when a few <code>getAppFnArgs</code> would suffice?</p>\n<p>For Expr building, <code>quote4</code> is indispensable, I agree!</p>",
        "id": 400264212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699081765
    },
    {
        "content": "<p>yeah the expr match stuff is pretty expensive</p>",
        "id": 400264310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699081837
    },
    {
        "content": "<p>obviously the goal is to have expr match <em>syntax</em> which elaborates to calls to <code>getAppFnArgs</code> and friends</p>",
        "id": 400264349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699081876
    },
    {
        "content": "<p>I think we could have a <code>Std.Experimental</code> folder and put <code>Qq.Match</code> in it. This folder would not be included in <code>import Std</code> but it would be useful for allowing more things to be upstreamed faster before we are ready to commit to the API</p>",
        "id": 400264750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699082306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/upstreaming.20simps.20to.20Std/near/400264212\">said</a>:</p>\n<blockquote>\n<p>I think (don't quote me?) Leo was concerned in part that it might be too easy for users to write non-performant Expr matching code, when a few <code>getAppFnArgs</code> would suffice?</p>\n</blockquote>\n<p>The flip side of this is that code that <em>doesn't</em> use Qq can end up behaving incorrectly around reducible definitions, as it can end up performing exact rather than reducible matches.</p>",
        "id": 400269810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699087062
    },
    {
        "content": "<p>Does QQ do matching up to reducible computation by default? Can you get it to do syntactic matching as well?</p>",
        "id": 400276821,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699090252
    },
    {
        "content": "<p>My understanding was that it only did reducible matching (and that that's in some sense a feature; you don't ever want to match things like instances syntactically)</p>",
        "id": 400282563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699092744
    },
    {
        "content": "<p>Makes sense; reducible matching should certainly be the default.</p>",
        "id": 400282886,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1699092878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/upstreaming.20simps.20to.20Std/near/400264212\">said</a>:</p>\n<blockquote>\n<p>I think (don't quote me?) Leo was concerned in part that it might be too easy for users to write non-performant Expr matching code, when a few <code>getAppFnArgs</code> would suffice?</p>\n</blockquote>\n<p>Indeed, the matching part of quote4 is not great.  It does its job as a tech demo amazingly, but I completely agree that there's massive performance issues.  My plan was to automatically generate matching code using whnfR+getAppArgs+isDefEq (without unification), roughly approximating what the discrimination tree module does.  But I never found the time to implement it.</p>",
        "id": 401269417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1699581029
    },
    {
        "content": "<p>There's two other big issues with the match syntax.  First, there's no way to distinguish pattern variables from antiquotations.  For example, in <code>let x : Q(Nat) := 42; match y with | ~q($x + $y) =&gt; ...</code>.  Should <code>$x</code> bind a fresh variable, or should it check that the lhs is defeq to 42?</p>",
        "id": 401269667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1699581180
    },
    {
        "content": "<p>Second, the macros in that file are wild. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 401269939,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1699581331
    }
]