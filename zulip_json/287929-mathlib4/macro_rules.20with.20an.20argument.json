[
    {
        "content": "<p>I'm trying to write a tactic <code>rel</code> which calls several other tactics in turn, like the <a href=\"https://github.com/leanprover/lean4/blob/60f30addc7b3a9c03e3bb12a2f590f07eb6d102c/src/Init/Tactics.lean#L670\">code in Lean core</a> which makes <code>trivial</code> call <code>assumption</code>, <code>rfl</code> etc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">contradiction</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">And.intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In my case all the tactics I want to combine take a single list of arguments <code>[h1, h2, h3]</code>.  How do I adapt <code>macro_rules</code> to pass these to my super-tactic <code>rel</code>?  I tried copying blindly and hoping the arguments would be passed automatically, but the tactic fails on the arguments with </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unexpected syntax\n  rel [ha]\n</code></pre></div>",
        "id": 324330390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674928395
    },
    {
        "content": "<p>what does your <code>syntax</code> declaration look like?</p>",
        "id": 324330701,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674928562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">RelSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"rel\"</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 324330860,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674928642
    },
    {
        "content": "<p>Sorry, that's hiding something in a namespace.  One sec, I'll make a mwe.</p>",
        "id": 324332039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674929195
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">RelSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"rel\"</span> <span class=\"o\">(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">unexpected syntax</span>\n<span class=\"cm\">  rel [hx]</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 324332103,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674929241
    },
    {
        "content": "<p>I think the problem here might be that you’ve given a rule for <code>rel</code> appearing by itself, but not for <code>rel</code> appearing with arguments—and when there are arguments, the whole thing is parsed as a tactic syntax node (and <code>rel</code> appearing by itself isn’t a tactic node in that case)</p>",
        "id": 324333614,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674930035
    },
    {
        "content": "<p>(Haven’t tested, though!)</p>",
        "id": 324333635,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674930043
    },
    {
        "content": "<p>That seems plausible!  How do I give a rule for <code>rel</code> appearing with arguments?</p>",
        "id": 324333709,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674930083
    },
    {
        "content": "<p>Hmm, the way you’ve got it set up, does something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">rel</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>work? (untested, on mobile)</p>",
        "id": 324334362,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674930423
    },
    {
        "content": "<p>(If I’ve messed up the syntax, the section of the metaprogramming book on antiquotations might be helpful!)</p>",
        "id": 324334514,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674930494
    },
    {
        "content": "<p>Thanks, this should get me started anyway.  I'll have a look at the book!  Your current version fails with</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  x.elemsAndSeps\nargument\n  x\nhas type\n  Lean.Syntax.TSepArray `term \",\" : Type\nbut is expected to have type\n  Lean.Syntax.TSepArray `Lean.Parser.Tactic.simpStar \",\" : Type\n</code></pre></div>",
        "id": 324334653,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674930574
    },
    {
        "content": "<p>ah, ok—I think this is a sign that simp doesn’t like the fact that it’s being passed terms! Try using <code>simpStar</code> instead of <code>term</code> in the definition of <code>rel</code> syntax, maybe?</p>",
        "id": 324335653,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674931175
    },
    {
        "content": "<p>Or, maybe we can just leave off the syntax category annotation: <code>$x,*</code> instead of <code>$x:term,*</code> in the macro rules</p>",
        "id": 324336996,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674932014
    },
    {
        "content": "<p>In my case the <code>simp</code> is a bit of a red herring, because as you note it seems to use its own special syntax for arguments, whereas I am using custom tactics which use the same syntax <code>$[ [$x:term,*] ]?</code>.  So that problem isnt actually occurring for me.</p>",
        "id": 324337358,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674932186
    },
    {
        "content": "<p>I seem to have the arguments working, but am encountering another issue, where when I try to make multiple <code>macro_rules</code> for <code>rel</code>, it tries only one of them, not all of them.  I'll see if I can make a MWE for that.</p>",
        "id": 324337464,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674932256
    },
    {
        "content": "<p>Hmm, how do the syntax matches distinguish themselves from each other in each rule? (If you want to post a not-quite-minimized example in this case that’s fine too!)</p>",
        "id": 324340972,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674934119
    },
    {
        "content": "<p>OK, here's a reasonably complete but not minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"kn\">import</span> <span class=\"n\">OtherFile</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RelConfig</span> <span class=\"o\">:</span> <span class=\"n\">SolveByElim.Config</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"n\">failAtMaxDepth</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">maxDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">50</span> <span class=\"o\">}</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ineqRelSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"ineq_rel\"</span> <span class=\"s2\">\" [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">modRelSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"mod_rel\"</span> <span class=\"s2\">\" [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">RelSyntax</span><span class=\"o\">)</span> <span class=\"s2\">\"rel\"</span> <span class=\"s2\">\" [\"</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">ineq_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SolveByElim.solveByElim.processSyntax</span>\n      <span class=\"n\">RelConfig</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">t.getElems.toList</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">ineq_rules</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">mod_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SolveByElim.solveByElim.processSyntax</span>\n      <span class=\"n\">RelConfig</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">t.getElems.toList</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">mod_rules</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">ineq_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">mod_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ineq_rules</span><span class=\"o\">]</span> <span class=\"n\">le_refl</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mod_rules</span><span class=\"o\">]</span> <span class=\"n\">Int.ModEq.refl</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[]</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- works if the `mod_rel` branch of the `rel` `macro_rules` is removed</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 324342655,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674935254
    },
    {
        "content": "<p>The <code>OtherFile</code> needs to declare the two attributes,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.TagAttr</span>\n\n<span class=\"n\">register_tag_attr</span> <span class=\"n\">ineq_rules</span>\n<span class=\"n\">register_tag_attr</span> <span class=\"n\">mod_rules</span>\n</code></pre></div>",
        "id": 324342741,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674935290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/macro_rules.20with.20an.20argument/near/324340972\">said</a>:</p>\n<blockquote>\n<p>Hmm, how do the syntax matches distinguish themselves from each other in each rule?</p>\n</blockquote>\n<p>From what Thomas says, maybe there's a subtlety I missed here: you need to tell <code>macro_rules</code> which option to choose?  I didn't know you had to do that (and am not sure how to).</p>",
        "id": 324342815,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674935352
    },
    {
        "content": "<p>So, <code>macro_rules</code> is turning syntax into syntax, and macros in general only backtrack if you use <code>Macro.throwUnsupported</code> (I think), which tells the macro to try a different match. Tactic failure won’t cause backtracking in syntax processing, so after modifying the <code>rel</code> syntax you’ll just be stuck with e.g. an <code>ineq_rel</code> tactic as syntax, which then fails. (depending on whether Lean prioritizes rules that are defined first or last, I’m not sure.)</p>\n<p>Is it true that your goal is to backtrack on tactic failure? If so, then I don’t think having different macro rules is the way to go (and thus we wouldn’t need <code>Macro.throwUnsupported</code>). Depending on how complete this example is, a simple solution might be to instead do something like using the <code>first</code> tactic in the resulting syntax: something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span> <span class=\"bp\">|</span> <span class=\"n\">ineq_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">|</span> <span class=\"n\">mod_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 324346113,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674937897
    },
    {
        "content": "<p>(I think this is true, anyway. I haven’t tested so I could be wrong!)</p>",
        "id": 324346340,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674938054
    },
    {
        "content": "<p>I think my point of confusion is, why does this work for <code>trivial</code>?  In the code I quoted at the top of the thread<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/macro_rules.20with.20an.20argument/near/324330390\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/macro_rules.20with.20an.20argument/near/324330390</a><br>\nit really seems like <code>trivial</code> is being set up with a series of <code>macro_rules</code> to try one tactic after another.</p>",
        "id": 324346370,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674938083
    },
    {
        "content": "<p>Oh, I think I’m entirely wrong then, sorry!</p>",
        "id": 324346418,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674938130
    },
    {
        "content": "<p>Hmm. I wasn’t aware you could do that (and apparently missed the first message in this thread, whoops). Interesting…</p>",
        "id": 324346631,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674938310
    },
    {
        "content": "<p>My guess right now is that since <code>mod_rel</code> doesn't actually fail—it just leaves unsolved goals—the tactic never backtracks.</p>",
        "id": 324350521,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674941650
    },
    {
        "content": "<p>If you want <code>ineq_rel</code> and <code>mod_rel</code> to not return subgoals (and only try to close the goal) you can change the definitions to the following (we check that the result of <code>processSyntax</code> matches an empty list, else we throw an error; then we return that empty list)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">ineq_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">[]</span> <span class=\"bp\">←</span> <span class=\"n\">SolveByElim.solveByElim.processSyntax</span>\n      <span class=\"n\">RelConfig</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">t.getElems.toList</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">ineq_rules</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to close the goal\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">mod_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">[]</span> <span class=\"bp\">←</span> <span class=\"n\">SolveByElim.solveByElim.processSyntax</span>\n      <span class=\"n\">RelConfig</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">t.getElems.toList</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">mod_rules</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to close the goal\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 324351077,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674942095
    },
    {
        "content": "<p>And this works! If we add a trace to our macro rules, we can see that we try both tactics in the second example (and it closes the goal):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hi ineq\"</span><span class=\"bp\">;</span> <span class=\"n\">ineq_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"hi mod\"</span><span class=\"bp\">;</span> <span class=\"n\">mod_rel</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ineq_rules</span><span class=\"o\">]</span> <span class=\"n\">le_refl</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mod_rules</span><span class=\"o\">]</span> <span class=\"n\">Int.ModEq.refl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[]</span> <span class=\"c1\">-- hi mod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[]</span> <span class=\"c1\">-- hi mod hi ineq</span>\n</code></pre></div>",
        "id": 324351306,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674942281
    },
    {
        "content": "<p>(So, even the <code>first | ...</code> suggestion earlier wouldn't have worked here, because <code>mod_rel</code>/<code>ineq_rel</code> was \"succeeding\" even when leaving subgoals, and thus <code>first</code> wouldn't have backtracked either)</p>",
        "id": 324351460,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674942431
    },
    {
        "content": "<p>Awesome!  That makes sense, I'll try it out.  Thank you!</p>",
        "id": 324353589,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674944275
    }
]