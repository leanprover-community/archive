[
    {
        "content": "<p>I will not work on <a href=\"https://github.com/leanprover-community/mathlib4/pull/4856\">!4#4856</a> until tomorrow if someone wants to continue.</p>",
        "id": 364598221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686237450
    },
    {
        "content": "<p>I have about 45 minutes to 1 hour to spend on this right now!</p>",
        "id": 364602843,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1686238197
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.lift_normal\">docs#alg_hom.lift_normal</a> uses some weird tricks to use with custom typeclass instances instead of ones that are available in the context. I think I got it ported correctly, but is this really the right way to define this map?</p>",
        "id": 364617523,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1686241377
    },
    {
        "content": "<p>There is a similar problem in <code>FieldTheory.Adjoin</code>... I had to use <code>show_term</code> in mathlib3 to figure out the right morphism</p>",
        "id": 364618502,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686241599
    },
    {
        "content": "<p>I agree that this not the best way</p>",
        "id": 364619059,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686241711
    },
    {
        "content": "<p>Hmm... I need to go now, could you please remind me to make an issue to fix this after the port?</p>",
        "id": 364619259,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1686241757
    },
    {
        "content": "<p>Can you recall me what <code>(_)</code> does? It's almost as good as in Lean3!</p>",
        "id": 364658464,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686252247
    },
    {
        "content": "<p>Iirc, it leaves a blank without leaving TC to infer them</p>",
        "id": 364659017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686252397
    },
    {
        "content": "<p>There is a proof that is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">AlgHom.commutes</span> <span class=\"n\">K₁</span> <span class=\"n\">E</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>so someone (probably Lean?) has to fill the <code>(_)</code>... but still the proof works, and if we write <code>_</code> it doesn't.</p>",
        "id": 364661696,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686253200
    },
    {
        "content": "<p>I guess this is exactly what Anne means; that instance is only fillable in by unification instead of TC</p>",
        "id": 364664281,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686253992
    },
    {
        "content": "<p>Aaahhh, I see.</p>",
        "id": 364664607,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686254062
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 364664633,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686254069
    },
    {
        "content": "<p>I fixed a few more steps in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4856\">!4#4856</a>, but with one sorry to go, feel like I'm stuck.</p>",
        "id": 364704258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271226
    },
    {
        "content": "<p>There is a proof that used to be filled in by unification, and I can not work out how to restore this behaviour.</p>",
        "id": 364704280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271243
    },
    {
        "content": "<p>I wanted to work around this for now by just giving the proof again, but apparently I don't know my Galois theory and wasn't sure how to finish.</p>",
        "id": 364704330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271270
    },
    {
        "content": "<p>If anyone would like to look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4856/files#diff-d131e3bbd4cfdca7517989f6f30e131ae00a40b34315ac02e6c342c183b6e449R531\">this sorry</a> that would be great.</p>",
        "id": 364704400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271323
    },
    {
        "content": "<p>The goal state there is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"n\">L</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Normal</span> <span class=\"n\">F</span> <span class=\"n\">L</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">L</span>\n<span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">roots</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>And if that sounds wrong, I guess I went wrong a step or two earlier. :-)</p>",
        "id": 364704528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271386
    },
    {
        "content": "<p>This is currently the \"highest\" file in <a href=\"https://tqft.net/mathlib4/2023-06-09/all.pdf\">all.pdf</a>!</p>",
        "id": 364704563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686271412
    },
    {
        "content": "<p>I've fixed the last sorry, but it was more annoying than I expected</p>",
        "id": 364713725,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1686276781
    },
    {
        "content": "<p>I've fixed the names, it's ready to be reviewed.</p>",
        "id": 364735666,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686289261
    }
]