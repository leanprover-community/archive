[
    {
        "content": "<p>I have a bunch of questions on the design of classes in mathlib4, and I hope someone could help me clarify my thoughts.</p>\n<p>The implementation of classes is new style, but this is hidden from the user who may think that everything is flattened (i.e., old style). Assume that you have a class with data <code>A_data</code> and then classes that add new Prop properties, say <code>B_prop</code> that extends <code>A_data</code> and then <code>C_prop</code> that extends <code>B_prop</code> and <code>D_prop</code> that extends <code>C_prop</code>. From an API point of view, saying that <code>D_prop</code> is defined as (1) <code>extends A_data, C_prop</code> or (2) <code>extends C_prop</code> or (3) <code>extends C_prop, A_data</code> is the same, but it's not from an inner implementation point of view. If I understand correctly, in (1) there would be a field <code>to_A_data</code> containing the data, and then flattened copies of the additional axioms in <code>B</code> and <code>C</code>,  and a field with the addtional <code>D</code> axiom, and the creation of a <code>to_C</code> map (which would not be a field of the structure). While (2) and (3) would be internally the same, with a field <code>to_C</code> and a field with the additional axiom of <code>D</code> (and in (3) the creation of an additional map <code>to_A</code>). Am I correct here? Is there a way to see the internals of the things Lean4 generates when one declares a class like that?</p>",
        "id": 327205421,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676104498
    },
    {
        "content": "<p>Then there are diamond-like situations, where there is another class <code>C'_prop</code> extending <code>B_prop</code>, and then <code>D_prop</code> extends both <code>C_prop</code> and <code>C'_prop</code>. Say that one defines it as (1) <code>extends A_data, C_prop, C'_prop</code> or (2) <code>extends C_prop, C'_prop</code>. In the first case, one gets a field <code>to_A</code> and flattened copies of the additional axioms, while in (2) one gets a <code>to_C</code> and flattened copies of  the additional axioms of <code>C'</code>, again if I get it right.</p>",
        "id": 327205874,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676104742
    },
    {
        "content": "<p>No my question is what happens when one creates instances of the classes, and if the order there is relevant. For instance if you create an instance of <code>D</code> having already instances of <code>C</code> and <code>C'</code>, will things be nice if you declare it like <code>with already_defined C, already_defined C'</code> and bad if you change the order to <code>with already_declared_C', already_declared_C</code>? (With, in the second case, the map to <code>C</code> borrowing the data field from <code>already_declared_C'</code> and the axiom from <code>already_declared_C</code>)?</p>",
        "id": 327206127,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676104893
    },
    {
        "content": "<p>Again, is there a way to check the internals of how Lean 4 has implemented a structure declaration?</p>",
        "id": 327206343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676104996
    },
    {
        "content": "<p><code>#print</code> on the class will tell you the exact fields</p>",
        "id": 327209337,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676106519
    },
    {
        "content": "<p>Would the following design be reasonable? There would be classes carrying only data -- for instance, for semirings, <code>semiring_data</code> would have zero, one, addition, multiplication. And then the real classes need a bunch of properties depending on the data, which could be put into a single Prop-valued substructure. The interest is that when checking that two ring structures coincide, first you need to check that the data coincide, of course, but then by proof irrelevance you would only need to check that the type of the single Prop-valued field is the same, which amounts to checking once again that the data coincide -- just one check, instead of many many checks currently, one for each axiom.</p>\n<p>Of course, with this design <code>ring</code> would internally not be defined as <code>extends semiring</code>, but instead <code>ring_data</code> would extend <code>semiring_data</code>,  and the map from <code>ring</code> to <code>semiring</code> would not be a field of the structure. (And this would need serious engineering to hide that from the users, and to give the impression that fields of the Prop-substructure are normal fields). The data for <code>comm_ring</code> and <code>ring</code> would be the same, though, so following strings of reductions would be pretty quick.</p>\n<p>I wonder if this wouldn't be much more efficient than what we do currently. Not in the near future, of course, because there are much more urgent things, but still I'd be interested in your thoughts.</p>",
        "id": 327219946,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1676110665
    },
    {
        "content": "<p>I think this is what Agda does</p>",
        "id": 327224006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676112365
    },
    {
        "content": "<p>One advantage of that approach is that if you need an intersection typeclass that doesn't exist, you can use <code>[ring_data R] [is_normed_ring R] [is_linear_ordered_ring R]</code></p>",
        "id": 327224317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676112512
    }
]