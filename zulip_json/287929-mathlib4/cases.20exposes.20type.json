[
    {
        "content": "<p>Is this behavior expected? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mozzy</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mozzy</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">match_pattern</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">none</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Option.none</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Mozzy</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">some</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Mozzy</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>  <span class=\"c1\">-- simp made no progress, we see Option.none</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"c1\">-- simp made no progress, we see Option.some</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span>  <span class=\"c1\">-- done</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"c1\">-- done</span>\n</code></pre></div>",
        "id": 396599015,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697249698
    },
    {
        "content": "<p>I don't know if it's expected, but if you change the two defs to <code>abbrev</code>, then it works as expected. Looking at two examples from mathlib where <code>match_pattern</code> is used, they were both reducible. <del>Is reducability a requirement for <code>matchpattern</code>?</del></p>",
        "id": 396607105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697255588
    },
    {
        "content": "<p>Or perhaps it's an issue with <code>cases</code>?</p>",
        "id": 396607150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697255642
    },
    {
        "content": "<p>I think it might be an issue with the cases tactic.</p>",
        "id": 396607509,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697255903
    },
    {
        "content": "<p>What if you write a custom recursors?</p>",
        "id": 396630515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697273151
    },
    {
        "content": "<p>(like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithTop.recTopCoe#doc\">docs#WithTop.recTopCoe</a>/</p>",
        "id": 396630577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697273176
    },
    {
        "content": "<p>I got this from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithBot.unbot%27_le_iff#doc\">docs#WithBot.unbot'_le_iff</a>. <code>rintro</code> behaves similarly</p>",
        "id": 396638493,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697279566
    },
    {
        "content": "<p>Is there an argument this behavior is desirable?</p>",
        "id": 396638667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697279714
    },
    {
        "content": "<p>I think one should add custom eliminators like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">casesOn</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Mozzy</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">Mozzy.none</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Mozzy.some</span> <span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">Option.casesOn</span> <span class=\"n\">t</span> <span class=\"n\">none</span> <span class=\"n\">some</span>\n</code></pre></div>\n<p>in cases like this, otherwise lean tries to whnf the type and match that with an inductive, and then uses that eliminator instead.</p>\n<p>I'm not sure what to do about the cases / rec (cases / induction) distinction though in cases where it matters</p>",
        "id": 396911745,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697465369
    },
    {
        "content": "<p>I assume we don't have an attribute that generates this and the match patterns automatically?</p>",
        "id": 396974040,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697488723
    }
]