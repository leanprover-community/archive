[
    {
        "content": "<p>It appears that if a permutation on a set with a small number of elements (4 in this case)  is defined using Cycle.fromPerm, evaluating its powers using #eval is fine but deciding whether its power is equal to 1 is very slow. See below.</p>\n<p>Minimal working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Cycle.formPerm</span> <span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩</span>\n<span class=\"c1\">-- These are both fast enough.</span>\n<span class=\"k\">#eval</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"mi\">4</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- (deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"c1\">-- [0.185449s]</span>\n</code></pre></div>",
        "id": 392009549,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1695165537
    },
    {
        "content": "<p>Here's an example from mathlib: <a href=\"https://github.com/leanprover-community/mathlib4/blob/6af751e84a5e8d15f0d0d2d1b279ad4f7da7f28e/Mathlib/GroupTheory/Solvable.lean#L211-L220\">https://github.com/leanprover-community/mathlib4/blob/6af751e84a5e8d15f0d0d2d1b279ad4f7da7f28e/Mathlib/GroupTheory/Solvable.lean#L211-L220</a></p>",
        "id": 392009870,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1695165775
    },
    {
        "content": "<p>Could this be <a href=\"https://github.com/leanprover/lean4/pull/2564\">lean4#2564</a> again?</p>",
        "id": 392009979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695165849
    }
]