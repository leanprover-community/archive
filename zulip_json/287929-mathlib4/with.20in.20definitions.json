[
    {
        "content": "<p>What is the status of using <code>with</code> (or <code>__ :=</code>) in definitions that are not instances? It is of course less harmful since it doesn't mess up with typeclass inference, but it still generates the same \"ugly\" terms, so it has to generate slower defeqs, right? Is that negligible enough that we don't care? Should we be pushing actively about using <code>with</code>, be neutral about it, or discourage its use?</p>",
        "id": 384463629,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691925251
    },
    {
        "content": "<p>I think the difference is that defeq of those terms almost never matters. <code>someHom.toWeakerHom = someWeakerHom</code> is a pretty rare thing to unify, and <code>FunLike.coeFun SomeHom = someFun</code> won't care about the <code>with</code></p>",
        "id": 384464120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691925368
    },
    {
        "content": "<p>In contrast, <code>someInstance.toWeakerInstance = someWeakInstance</code> comes up all the time</p>",
        "id": 384464220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691925393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/with.20in.20definitions/near/384464120\">said</a>:</p>\n<blockquote>\n<p><code>FunLike.coeFun SomeHom = someFun</code> won't care about the <code>with</code></p>\n</blockquote>\n<p>Oh I see, this is the part that I didn't know about.</p>",
        "id": 384464747,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691925527
    },
    {
        "content": "<p>To be clear, this is somewhat speculative on my part...</p>",
        "id": 384466899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691926086
    },
    {
        "content": "<p>Probably related question : when you have to prove something about some complicated structure, it often appears in a verbose form in the goal, and some ‘simp‘ is necessary to clean it up. Is it normal? Why?</p>",
        "id": 384517117,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691938692
    },
    {
        "content": "<p><code>dsimp only</code> is probably the best \"tidy up\" tactic</p>",
        "id": 384520498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691939454
    },
    {
        "content": "<p>But why does of show up like this, as much unfolded?</p>",
        "id": 384553141,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691949109
    },
    {
        "content": "<p>I should say that I don't think that this question is related to the \"<code>with</code> considered harmful\" topic which I think this is about, but I think the answer is simply that lean doesn't simplify things like <code>{x := a, y := b}.x</code> to <code>a</code> unless you ask it to.</p>",
        "id": 384559040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691951095
    },
    {
        "content": "<p>Note that <code>dsimp only</code> won't help you with <code>↑{ toFun := f, ... } x</code></p>",
        "id": 384575100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691956591
    },
    {
        "content": "<p>The right solution is definitely a clever use of <code>@[simps]</code></p>",
        "id": 384575392,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691956724
    }
]