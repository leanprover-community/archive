[
    {
        "content": "<p>I noticed that in Mathlib <code>PythagoreanTriple</code> isn't an instance of <code>Decidable</code>, even though it trivially is decidable.</p>\n<p>I was able proof this like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">PythagoreanTriple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">PythagoreanTriple</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">PythagoreanTriple</span>  <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>I have two questions:</p>\n<ul>\n<li>Is this a good way to make such a <code>Prop</code> an instance of <code>Decidable</code>?</li>\n<li>Should I create a PR for code like this, or should I just keep it in my own code base?</li>\n</ul>",
        "id": 396040704,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697014529
    },
    {
        "content": "<p>That instance looks totally reasonable to me</p>",
        "id": 396043826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697015573
    },
    {
        "content": "<p>Yes and yes. That's a reasonable addition to mathlib</p>",
        "id": 396043849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697015581
    },
    {
        "content": "<p>You could golf it slightly by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instDecidableEqInt#doc\">docs#Int.instDecidableEqInt</a> directly</p>",
        "id": 396043978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697015630
    },
    {
        "content": "<p><code>inferInstanceAs</code> is useful for these sorts of instances. Doing it this way is quite readable as the the reader can see quickly <em>why</em> it is decidable. The instance name is needlessly obscure.</p>",
        "id": 396046368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697016318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>   Is this what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">PythagoreanTriple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 396057686,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1697020436
    },
    {
        "content": "<p>Something like that. Is is actually defined using <code>x * x</code> rather than <code>x^2</code>? Who knew? <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>",
        "id": 396057851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697020492
    },
    {
        "content": "<p>I'd recommend</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">PythagoreanTriple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as that tells the reader all they need to know: it's decidable because it's an equality</p>",
        "id": 396058714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697020830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Decidable.20PythagoreanTriple/near/396057851\">said</a>:</p>\n<blockquote>\n<p>Something like that. Is is actually defined using <code>x * x</code> rather than <code>x^2</code>? Who knew? <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>\n</blockquote>\n<p>A lot of things do that to minimise typeclass arguments, e.g. Even is x+x. Oddly enough (hah) <code>Odd</code> is (iirc) 2 * x + 1</p>",
        "id": 396062766,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697022243
    },
    {
        "content": "<p>It's a bit of an odd practice</p>",
        "id": 396062817,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697022251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Decidable.20PythagoreanTriple/near/396062766\">said</a>:</p>\n<blockquote>\n<p>A lot of things do that to minimise typeclass arguments, e.g. Even is x+x. Oddly enough (hah) <code>Odd</code> is (iirc) 2 * x + 1</p>\n</blockquote>\n<p>Is there any actual use of this definition of <code>Even</code>? It is rather annoying when teaching.</p>",
        "id": 396079737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697027792
    },
    {
        "content": "<p>I guess it lets you talk about \"even\" elements of a free additive monoid</p>",
        "id": 396086379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697030004
    },
    {
        "content": "<p>It probably also makes the <code>to_additive</code> stuff with <code>IsSquare</code> slightly easier than using smul / pow</p>",
        "id": 396086542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697030049
    },
    {
        "content": "<p>things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Even.tsub#doc\">docs#Even.tsub</a></p>",
        "id": 396089187,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697030887
    },
    {
        "content": "<p>because we don't have that many mixins for the CanonicallyOrderedNonsense</p>",
        "id": 396089214,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697030900
    },
    {
        "content": "<p>as it points out, we can't have <code>Odd.tsub</code> because of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `Odd.tsub` requires `CanonicallyLinearOrderedSemiring`, which we don't have</span>\n</code></pre></div>",
        "id": 396089293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697030931
    },
    {
        "content": "<p>(although I'm not sure how that would actually hold as of course <code>1 - 3 = 1 - 4 = 0</code>, so not sure what the statement would be!)</p>",
        "id": 396089986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697031127
    },
    {
        "content": "<p>Would it say <code>Odd a → Odd b → Even (a - b)</code>?</p>",
        "id": 396090122,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697031171
    },
    {
        "content": "<p>That seems vacuously true in the bad cases</p>",
        "id": 396090195,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697031192
    },
    {
        "content": "<p>I was considering adding it, but I would have needed a typeclass that only <code>Nat</code> would satisfy and we already have the lemma on <code>Nat</code></p>",
        "id": 396094363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697032422
    },
    {
        "content": "<p>So I was thinking we could just rename <code>Nat.Odd.sub</code> to <code>Odd.tsub</code> and then everybody is happy.</p>",
        "id": 396094515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697032460
    },
    {
        "content": "<p>I mean, I'm personally happy to have Odd just required <code>Add</code> and <code>One</code>, but I fear that those that teach will have headaches</p>",
        "id": 396101817,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697034444
    },
    {
        "content": "<p>I was probably the one responsible for defining <code>Even</code> as a doubled sum and it was essentially what Eric said: I wanted to unify <code>Even</code> and <code>Square</code> using <code>to_additive</code>.  I had not thought of the teaching implications of this design choice.  Let me find the relevant thread!</p>",
        "id": 396122725,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697040465
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib/pull/13037\">mathlib3 PR</a> and the relevant <a href=\"#narrow/stream/113488-general/topic/even.2Fodd\">Zulip thread</a>.</p>",
        "id": 396123521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697040685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Decidable.20PythagoreanTriple/near/396089214\">said</a>:</p>\n<blockquote>\n<p>because we don't have that many mixins for the CanonicallyOrderedNonsense</p>\n</blockquote>\n<p>What are mixins?</p>",
        "id": 397848732,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697893365
    },
    {
        "content": "<p>Things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NoTopOrder#doc\">docs#NoTopOrder</a> (typeclasses that take others as parameters), they don't live \"in\" the heirachy or all blah blahs, so that you can add them as side assumptions, and mix them together</p>",
        "id": 397849461,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697894007
    }
]