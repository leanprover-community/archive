[
    {
        "content": "<p>Here's a fascinating bug in <code>convert</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">122</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- (kernel) declaration has metavariables '_example'</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.dvd_of_mul_dvd_mul_left</span> <span class=\"n\">zero_lt_one</span>\n  <span class=\"n\">convert</span> <span class=\"n\">dvd_mul_left</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>This is a minimised example in the sense that it works (i.e. errors with <code>unsolved goals</code>) for any smaller value of <code>122</code>! Note that <code>h₁</code> is just an innocent bystander in the context here.</p>\n<p>Any ideas?</p>",
        "id": 398581229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698280248
    },
    {
        "content": "<p><code>set_option maxRecDepth 516 in</code> makes <code>122</code> too small</p>",
        "id": 398581633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698280661
    },
    {
        "content": "<p>So I guess something is silencing an error when it shouldn't</p>",
        "id": 398581686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698280695
    },
    {
        "content": "<p>I think it's because <code>congr!</code> (and so <code>convert</code>) tries doing <code>assumption</code> with semireducible transparency at the end. If you do <code>convert (config := {closePost := false}) dvd_mul_left 0 1</code> you can see that there are some goals where doing <code>assumption</code> isn't crazy (but it probably shouldn't do this).</p>",
        "id": 398582978,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698281893
    },
    {
        "content": "<p>In the <a href=\"https://github.com/leanprover-community/mathlib4/compare/kmill_congr_post_reducible?expand=1\">kmill_congr_post_reducible</a> branch I was experimenting with having it doing the closePost routines at reducible transparency.</p>",
        "id": 398582995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698281925
    },
    {
        "content": "<p>I think it needs a better heuristic, since often you want instance arguments to be equated by <code>rfl</code> at higher-than-<code>reducible</code>-transparency. Stuff like <code>Preorder.toLT = instLTNat</code>. To get this to work nicely, I think <code>congr!</code> would need to keep track of reducibility settings per argument. Right now it just maintains a list of metavariables.</p>",
        "id": 398583044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698281990
    },
    {
        "content": "<p>I don't particularly mind how hard it tries with <code>assumption</code>, the key thing is not dropping the goal if something goes wrong.</p>",
        "id": 398586066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698284963
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7945\">#7945</a> fixes the error handling, at least, so it just spits out the subgoals it can't handle.</p>",
        "id": 398609351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698295374
    },
    {
        "content": "<p>It's not perfect, as the internal error is not visible unless you <code>set_option trace.congr! true</code>.</p>",
        "id": 398609380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698295396
    },
    {
        "content": "<p>My attempts to just rethrow the error result in it vanishing somewhere, and I couldn't work out where!</p>",
        "id": 398609403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698295409
    },
    {
        "content": "<p>I don't like tactics that will create a subgoal iff you set its allowed number of heartbeats too low. Or in other words: given a proof that works, raising the number of heartbeats should not break the proof (which will happen if a tactic suddenly solves one of the subgoals itself). This is also currently a problem with <code>gcongr</code>. Tactics like this should only use cheap dischargers (e.g. <code>assumption</code> with reducible transparency) and if the discharger times out, the tactic should fail.</p>",
        "id": 398700746,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698330237
    },
    {
        "content": "<p>My reading is that Scott agrees with you, but can't work out where the error is being silenced</p>",
        "id": 398705954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698331701
    },
    {
        "content": "<p>I pushed a fix that removes the offending <code>try</code>/<code>catch</code></p>",
        "id": 398709523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698332674
    },
    {
        "content": "<p>I expect that will cause failures in the library if we don't make the default discharger cheaper</p>",
        "id": 398711421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698333238
    },
    {
        "content": "<p>It would be helpful if exceptions carried some kind of stack trace so that it was easier to debug this kind of thing</p>",
        "id": 398712382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698333516
    },
    {
        "content": "<p>The issue here is indeed <code>assumption</code> with default transparency; <code>have : 1 = 0 := by assumption</code> fails with a recursion issue in the testcase</p>",
        "id": 398713188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698333745
    },
    {
        "content": "<p>I should have mentioned that I tested that (to validate my suspicion about why setting <code>closePost := false</code> circumvents the error). Somehow <code>assumption</code> <em>does</em> show the error. I was going to look into this too to see why <code>congr!</code> seems to consume the error.</p>",
        "id": 398714337,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698334046
    },
    {
        "content": "<p>The answer is that <code>congr!</code> didn't consume the error, but <code>convert</code> did</p>",
        "id": 398714549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698334097
    },
    {
        "content": "<p>Oh, I looked through the <code>convert</code> code and I didn't see that <code>try ... catch ...</code> at the end... That explains it!</p>",
        "id": 398714733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698334151
    },
    {
        "content": "<p>That <code>try/catch</code> isn't justified, but just for the record, a way to make it safe (modulo the concerns that Floris brings up) is to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">observing</span><span class=\"bp\">?</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">m.congrN</span><span class=\"bp\">!</span> <span class=\"n\">depth</span> <span class=\"n\">config</span> <span class=\"n\">patterns</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getM</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398715357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698334317
    },
    {
        "content": "<p>It'll still gobble up the error, and it'll be heartbeat-dependent, but at least it won't lead to forgotten goals.</p>",
        "id": 398715568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698334363
    },
    {
        "content": "<p>Heather has mentioned the <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20tactic.20bug/near/370603482\">\"three patron saints of metaprogramming\"</a> (<code>whnfR</code>, <code>withMainContext</code>, and <code>instantiateMVars</code>), but maybe this needs to be upgraded to the four horsemen, with the fourth being <code>observing?</code>, or more generally, correctly reverting MetaM state during error handling.</p>",
        "id": 398716715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698334719
    },
    {
        "content": "<p>Do MetaM functions make any promises about what state they leave things in after an error?</p>",
        "id": 398717422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698334931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398716715\">said</a>:</p>\n<blockquote>\n<p>Heather has mentioned the <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20tactic.20bug/near/370603482\">\"three patron saints of metaprogramming\"</a> (<code>whnfR</code>, <code>withMainContext</code>, and <code>instantiateMVars</code>), but maybe this needs to be upgraded to the four horsemen, with the fourth being <code>observing?</code>, or more generally, correctly reverting MetaM state during error handling.</p>\n</blockquote>\n<p>There are also <code>consumeMData/cleanupAnnotations</code> that trip up tactics.</p>",
        "id": 398717902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698335070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398711421\">said</a>:</p>\n<blockquote>\n<p>I expect that will cause failures in the library if we don't make the default discharger cheaper</p>\n</blockquote>\n<p>It didn't; after all, anywhere that it previously would have failed would have given the kernel error that started this thread</p>",
        "id": 398730179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698339459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398700746\">said</a>:</p>\n<blockquote>\n<p>given a proof that works, raising the number of heartbeats should not break the proof (which will happen if a tactic suddenly solves one of the subgoals itself). This is also currently a problem with <code>gcongr</code>. </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I was not aware of this being a possibility with gcongr, can you give an example?</p>",
        "id": 398771102,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698356175
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/commit/d8dfe99308e4fb3cea436ecf5cbe63e22f6c2f5b#diff-412d7f97277ad0e2f530dc30b2b99852f5062ed2d2e9e2deb8bd995587edc987R306\">this line</a> on our branch of the Sobolev inequality I had to raise the heartbeat limit because otherwise <code>gcongr</code> succeeded but gave an extra subgoal.</p>",
        "id": 398772668,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1698357130
    },
    {
        "content": "<p>I think generally we have a big design problem where we can't distinguish \"this goal is within the scope of this tactic but there's a bug / timeout\" and \"this tactic failed because the goal was not appropriate\"</p>",
        "id": 398773529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698357634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398700746\">said</a>:</p>\n<blockquote>\n<p>I don't like tactics that will create a subgoal iff you set its allowed number of heartbeats too low. Or in other words: given a proof that works, raising the number of heartbeats should not break the proof (which will happen if a tactic suddenly solves one of the subgoals itself). This is also currently a problem with <code>gcongr</code>. Tactics like this should only use cheap dischargers (e.g. <code>assumption</code> with reducible transparency) and if the discharger times out, the tactic should fail.</p>\n</blockquote>\n<p>If there are tactics that absolutely need the ability to allow more heartbeats in some circumstances, perhaps they could carry a config option that sets the heartbeats for that invocation of the tactic. (The tactic would be otherwise unaffected by the ambient <code>maxHeartbeats</code>, and always use its own default.)</p>",
        "id": 398775017,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698358319
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7972\">#7972</a> is another fix for accidental error silencing, with mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">funFamily</span> <span class=\"o\">(</span><span class=\"n\">_i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"mi\">2000</span> <span class=\"k\">in</span> <span class=\"c1\">-- changes the behavior of the tactic!</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">_h₁</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">funFamily</span> <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"mi\">128</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">funFamily</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 398775389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398772668\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib4/commit/d8dfe99308e4fb3cea436ecf5cbe63e22f6c2f5b#diff-412d7f97277ad0e2f530dc30b2b99852f5062ed2d2e9e2deb8bd995587edc987R306\">this line</a> on our branch of the Sobolev inequality I had to raise the heartbeat limit because otherwise <code>gcongr</code> succeeded but gave an extra subgoal.</p>\n</blockquote>\n<p>I'm really surprised by that, I can't think how the implementation would lead to that. I'll investigate.</p>",
        "id": 398775536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698358608
    },
    {
        "content": "<p>Any use of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MVarId.assumption#doc\">docs#MVarId.assumption</a> (instead of <code>assumptionCore</code>) can lead to this behavior</p>",
        "id": 398775579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358642
    },
    {
        "content": "<p>But that's probably just the tip of the iceberg</p>",
        "id": 398775754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358730
    },
    {
        "content": "<p>That would explain it. But then the fix should be there, right? We should ban the use in mathlib of any tactic which uses that.</p>",
        "id": 398775786,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698358750
    },
    {
        "content": "<p>I think this requires major re-plumbings of many complex tactics</p>",
        "id": 398775848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358798
    },
    {
        "content": "<p>Pretty much every use of <code>observe?</code> or <code>try</code>/<code>catch</code> is also suspect</p>",
        "id": 398775908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358811
    },
    {
        "content": "<p>Sorry, I got confused above; <code>assumption</code> is harmless, but catching errors from it is bad</p>",
        "id": 398776032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698358917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20convert/near/398775848\">said</a>:</p>\n<blockquote>\n<p>I think this requires major re-plumbings of many complex tactics</p>\n</blockquote>\n<p>A rough outline would be to replace things like <code>side_goal_discharger : MVarId → MetaM Unit</code> with <code>side_goal_discharger : MVarId → MetaM Bool</code>, where a return value of false means \"I can't process this goal\"</p>",
        "id": 398776185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698359001
    },
    {
        "content": "<p>Could someone do a census of where this behaviour occurs in mathlib meta code currently?</p>",
        "id": 398776309,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698359060
    },
    {
        "content": "<p>Is it something that a linter could be written for?</p>",
        "id": 398776396,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698359134
    },
    {
        "content": "<p>Searching for <code>catch \\w+ =&gt;</code> has 108 results, <code>observing\\?</code> has 32</p>",
        "id": 398776409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698359149
    },
    {
        "content": "<p>I think if the diagnosis is that try/catch inside tactics is suspect then we should seriously consider finding another solution here. This affects everything that has to do with doing an alternative when there is an exception (like with the <code>&lt;|&gt;</code> operator).</p>\n<p>For example, should running out of heartbeats or hitting the max recursion depth be a mere exception, or should it be a higher-priority signal of some sort? One that's not catchable with <code>try</code>/<code>catch</code> and which throws even if it's the first argument to <code>&lt;|&gt;</code>?</p>",
        "id": 398778091,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698360243
    },
    {
        "content": "<p>If we had more structured exceptions, then we could have a linter analogous to the python one that rejects <code>except:</code> (aka <code>except BaseException</code>)  and forces you to write <code>except Exception:</code> (which could translate to a pattern match in Lean). But all our errors are unstructured strings, so it's currently annoying to tell them apart (and so we don't)</p>",
        "id": 398778302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698360387
    },
    {
        "content": "<p>The typical <code>Exception</code> type (which is used by e.g. <code>TacticM</code>) does at least support \"internal\" exceptions as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exception</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Error messages that are displayed to users. `ref` is used to provide position information. -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- Internal exceptions that are not meant to be seen by users.</span>\n<span class=\"sd\">  Examples: \"pospone elaboration\", \"stuck at universe constraint\", etc -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">internal</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">InternalExceptionId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extra</span> <span class=\"o\">:</span> <span class=\"n\">KVMap</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n</code></pre></div>\n<p>Maybe there's an argument for overriding or modifying the <code>tryCatch</code>es to never catch errors with a certain <code>InternalExceptionId</code>?</p>",
        "id": 398780481,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698361606
    },
    {
        "content": "<p>(We could then supply <code>try ... catch! ...</code> as a means of saying \"actually, expose every error to being caught, including 'higher-level' ones like maxHeartbeats errors\" if ever really needed)</p>",
        "id": 398780609,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698361696
    },
    {
        "content": "<p>(Also currently the <code>maxHeartbeats</code> error seems to be(?) just an <code>.error</code>, so this strategy would also require modifying that)</p>",
        "id": 398780878,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698361866
    },
    {
        "content": "<p>There might be implicit support for promoting the maxHeartbeats error to an internal exception, at least, given the following docstring for <code>Exception.isMaxHeartbeat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  Return true if `ex` was generated by `throwMaxHeartbeat`.</span>\n<span class=\"sd\">  This function is a bit hackish. The heartbeat exception should probably be an internal exception.</span>\n<span class=\"sd\">  We used a similar hack at `Exception.isMaxRecDepth` -/</span>\n</code></pre></div>",
        "id": 398781359,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698362170
    },
    {
        "content": "<p>Or maybe adding a constructor to <code>Exception</code>—or an extra field to <code>error</code>— would be a better, if more radical, solution. I'm not really sure about the \"not meant to be seen by users\" part, especially since we <em>do</em> see \"stuck at universe constraint\" errors...my main point is merely that we can already structure errors to some degree, and we could indeed change the behavior of <code>tryCatch</code> and <code>orElse</code> in the relevant monads fairly easily to see it and implement \"high priority\" signals.</p>",
        "id": 398783602,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698363663
    }
]