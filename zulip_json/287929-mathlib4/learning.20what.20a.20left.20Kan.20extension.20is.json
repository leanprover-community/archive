[
    {
        "content": "<p>I find myself (for porting reasons) wanting to learn (for the n'th time) what a left Kan extension is, so I figured that rather than facing nLab I'd try and learn from mathlib4 + pen-and-paper.</p>\n<p>First thing I've learnt: they're called <code>lan</code>, their URL is  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.lan#doc\">docs4#CategoryTheory.lan</a> and the theorems about them are in namespace <code>CategoryTheory.Lan</code>. Is this capital a mistake or is this what the naming convention gods decreed?</p>\n<p>Next thing I discovered: the docstring currently isn't helpful (this can easily be fixed, and probably will be by the end of this), and if I click \"Equations\" then it says <code>One or more equations did not get rendered due to their size.</code> and that's it. Is this expected? Finally, when I click the <code>ink</code> option I jump to the beginning of the file in a web browser rather than the definition of <code>lan</code>, even though the URL ends in #CategoryTheory.lan. I have more <code>ink</code> questions but I'll ask them elsewhere.</p>\n<p>I guess I'm interested in the general question as to whether it is possible to imagine using <code>mathlib4</code> as a resource for learning precise definitions in mathematics at undergraduate and MSc level, and what work needs to be done to make this happen.</p>",
        "id": 354389901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682775844
    },
    {
        "content": "<p>I don't think that is correct to the naming convention, but the name is very mysterious to me</p>",
        "id": 354392861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776233
    },
    {
        "content": "<p>If I go to the source I see even more fun capitalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n  <span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.Lan</span> <span class=\"n\">CategoryTheory.lan</span>\n</code></pre></div>",
        "id": 354393378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776308
    },
    {
        "content": "<p>(also this indentation pattern is not standard, <code>set_option ... in</code> should not have an indent after it)</p>",
        "id": 354393697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776346
    },
    {
        "content": "<p>Overall, I think you just ran into a lot of bugs. I don't think you can derive much about the effectiveness of mathlib4 as a teaching tool until the bugs are fixed</p>",
        "id": 354394584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776452
    },
    {
        "content": "<p>Re the name. There’s a left Kan extension (lan) and a right one (ran) which have dual (in some sense) universal properties. In the best situations, they give adjoints to the “whiskering” functor, which is a functor on the category of functor as given on objects by composition with a functor. (Sorry for the functor overload…). I think the adjunction is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Ran.adjunction#doc\">docs4#CategoryTheory.Ran.adjunction</a> ?</p>",
        "id": 354395426,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682776574
    },
    {
        "content": "<p>(And the analogous thing for lan)</p>",
        "id": 354395680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682776609
    },
    {
        "content": "<p>It is unfortunate that the naming convention has the functor called lan and the namespace Lan :-/</p>",
        "id": 354396538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682776734
    },
    {
        "content": "<p>Mario, what would the naming convention have us do in this case? I still don’t understand the convention</p>",
        "id": 354397713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682776918
    },
    {
        "content": "<p>The namespace of a function is spelled the same as the function itself</p>",
        "id": 354398104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776973
    },
    {
        "content": "<p>otherwise dot notation breaks</p>",
        "id": 354398155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776980
    },
    {
        "content": "<p>yes, that means it is lowercase sometimes</p>",
        "id": 354398274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682776997
    },
    {
        "content": "<p>Well dot notation isn’t useful in this case anyway</p>",
        "id": 354398288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777000
    },
    {
        "content": "<p>you could also not put them in a namespace and have <code>lan_foo</code> lemmas instead</p>",
        "id": 354398638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777048
    },
    {
        "content": "<p>So should the adjunction be called <code>lanAdjunction</code></p>",
        "id": 354398656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777050
    },
    {
        "content": "<p>Yeah an adjunction has data</p>",
        "id": 354398777,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777068
    },
    {
        "content": "<p>lanAdjunction sounds fine to me</p>",
        "id": 354398946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777096
    },
    {
        "content": "<p>although I really want to put a K in there somewhere</p>",
        "id": 354399058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777112
    },
    {
        "content": "<p>Yeah I understand but lan and ran are common in the nonformal literature</p>",
        "id": 354399870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777223
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Kan+extension\">nlab#Kan+extension</a></p>",
        "id": 354400008,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777242
    },
    {
        "content": "<p>really? I had it pegged as a mathlibism</p>",
        "id": 354400040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777248
    },
    {
        "content": "<p>See def 2.1 in the above link</p>",
        "id": 354400467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777306
    },
    {
        "content": "<p>BTW, I would not be opposed to tweaking the rules around what is a \"type\" vs \"function\" in the context of category theory for the purposes of the naming convention</p>",
        "id": 354400826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777358
    },
    {
        "content": "<p>I think there is a reasonable argument that functors can be seen as type operators and objects in a category as types</p>",
        "id": 354401070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682777397
    },
    {
        "content": "<p>BTW concerning the question of whether Mathlib is useful for learning… I certainly learned a lot about Kan extensions by formalizing them!</p>",
        "id": 354403610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682777777
    },
    {
        "content": "<p>I think Lan/Ran are a lot more common than lan/ran</p>",
        "id": 354429061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682781153
    },
    {
        "content": "<p>though even more common is sticking some punctuation somewhere</p>",
        "id": 354429282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682781183
    },
    {
        "content": "<p>(which punctuation depends on whether you are an algebraic geometer)</p>",
        "id": 354429390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682781199
    },
    {
        "content": "<p>Indeed the mathlib 3 name was <code>Lan</code></p>",
        "id": 354429829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682781260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/learning.20what.20a.20left.20Kan.20extension.20is/near/354393697\">said</a>:</p>\n<blockquote>\n<p>(also this indentation pattern is not standard, <code>set_option ... in</code> should not have an indent after it)</p>\n</blockquote>\n<p>fixing those in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3735\">!4#3735</a></p>",
        "id": 354532066,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1682799148
    },
    {
        "content": "<p>Btw, re: the topic of the thread, definition 2.4 on the nLab page is my favorite—Kan extensions are “universal ways to complete a 2-cell” given two 1-arrows that share a source. (Typically the 1-arrows are functors and the 2-arrows are natural transformations, but the definition works in general.)</p>\n<p>To complete such a 2-cell, you need to supply both:</p>\n<ul>\n<li>a 1-arrow from the target of one of the given 1-arrow (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>) to the target of the other given one (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>) to get a triangle—this new arrow is called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>(L/R)an</mtext><mi>p</mi></msub><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\text{(L/R)an}_p F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">(L/R)an</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>—and</li>\n<li>a 2-arrow to fill in the triangle, going between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mtext>(L/R)an</mtext><mi>p</mi></msub><mi>F</mi><mo stretchy=\"false\">)</mo><mo>∘</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">(\\text{(L/R)an}_p F) \\circ p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">(L/R)an</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. Which way this 2-arrow (called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>η</mi><mi>F</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\eta_F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on the nLab page) is directed determines the left- or rightness of the Kan extension.</li>\n</ul>\n<p>This 2-arrow is (at least in this view) the important data, and we have a Kan extension when this 2-arrow is universal in the same way a universal arrow is: any other 2-cell with the same shape factors uniquely through this one. (See the diagram in def 2.4 on nLab.)</p>\n<p>This is a “local” Kan extension because both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> are fixed. If it so happens that you can generalize the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> argument of e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>Lan</mtext><mi>p</mi></msub><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\text{Lan}_p F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Lan</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> by finding local extensions for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, then the operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>Lan</mtext><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\text{Lan}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Lan</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> becomes one of the adjoint functors described by Adam above. This is analogous to how a family of universal arrows assembles to form an adjunction.</p>\n<p>So a pretty good arrows-only characterization of a local Kan extension is a particular kind of “universal 2-arrow”, and global ones are what you get when you organize a family of those into the appropriate adjunction. As you can see, though, it’s the 1-arrow which forms half the (co)domain of this 2-arrow which gets the special name, since it’s the process of making these 1-arrows that actually yields the map on (objects of) the relevant functor category when you have a global Kan extension.</p>\n<p>A nice thing about this perspective is that (co)limits are easily visible as the special case where the “middle” vertex of the triangle (codomain of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, domain of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>(L/R)an</mtext><mi>p</mi></msub><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">\\text{(L/R)an}_p F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">(L/R)an</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>) is the terminal category. Seeing this fall out is straightforward but pretty gratifying! It lets you see Kan extensions as a sort of generalization of (co)limits.</p>\n<p>At least…that’s one perspective. 😁 There’s a bunch captured by other perspectives which isn’t captured by this one. I’m not sure how this fits into mathlib’s characterization, though, or how useful this perspective actually is in the practice of formalizing things.</p>",
        "id": 354542804,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682801271
    },
    {
        "content": "<p>One crucial thing that’s still missing from mathlib is a characteristic predicate for (local/global) Kan extensions, and I’m quite sure the “universal 2-cell” would be the right approach for that!</p>",
        "id": 354561460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682805272
    },
    {
        "content": "<p>I would propose we rename the functions themselves to <code>Lan</code> and <code>Ran</code> again.</p>",
        "id": 354571542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682807408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/learning.20what.20a.20left.20Kan.20extension.20is/near/354561460\">said</a>:</p>\n<blockquote>\n<p>One crucial thing that’s still missing from mathlib is a characteristic predicate for (local/global) Kan extensions, and I’m quite sure the “universal 2-cell” would be the right approach for that!</p>\n</blockquote>\n<p>I have draft code for total derived functors, and I have defined it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">RF</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">L</span> <span class=\"bp\">⋙</span> <span class=\"n\">RF</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">morphism_property</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">L.is_localization</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_right_derived_functor</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_initial</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">limits.is_initial</span> <span class=\"o\">(</span><span class=\"n\">structured_arrow.mk</span> <span class=\"n\">α</span> <span class=\"o\">:</span>\n  <span class=\"n\">structured_arrow</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">whiskering_left</span> <span class=\"n\">C</span> <span class=\"n\">H</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">L</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>This can certainly be adapted for general Kan extensions.</p>",
        "id": 354652231,
        "sender_full_name": "Joël Riou",
        "timestamp": 1682850371
    }
]