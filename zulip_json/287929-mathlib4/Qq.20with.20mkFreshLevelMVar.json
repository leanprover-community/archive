[
    {
        "content": "<p>Is there a way to make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FinEta.prove</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It complains with \"incompatible metavariable _uniq.1356\"</p>",
        "id": 374908298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689250256
    },
    {
        "content": "<p>I don't fully understand why, but <code>Level</code>s seem to transcend (anti)quotation in Qq. That means that this no longer complains once we also include the required Qq type annotation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FinEta.prove</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, since I don't understand why it works, I can't guarantee some other error won't pop up later. But at least it's a start :)</p>",
        "id": 374921266,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689252896
    },
    {
        "content": "<p>Indeed, duplicating my types everywhere seemed to solve the problem</p>",
        "id": 374924800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689253573
    },
    {
        "content": "<p>(The code in question is <code>FinEta.prove</code> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/5863\">#5863</a>)</p>",
        "id": 374924891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689253595
    },
    {
        "content": "<p>Note that universe levels are not dollar-quoted (<a href=\"https://github.com/gebner/quote4/issues/16\">issue</a>). One can also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FinEta.prove</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u.succ</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 375006687,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689268806
    }
]