[
    {
        "content": "<p>Hi, I try to implement some tactics to automatically prove some tautologies using Qq but I have some difficulties to do it, now I have a type of formula</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">FVar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FAnd</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FOr</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FNot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FTop</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FBot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n</code></pre></div>\n<p>a function of evaluation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalP</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FVar</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">i</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟪</span> <span class=\"n\">f1</span> <span class=\"bp\">∧</span> <span class=\"n\">f2</span><span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalP</span> <span class=\"n\">f1</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">evalP</span> <span class=\"n\">f2</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟪</span> <span class=\"n\">f1</span> <span class=\"bp\">∨</span> <span class=\"n\">f2</span><span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalP</span> <span class=\"n\">f1</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">evalP</span> <span class=\"n\">f2</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟪</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"n\">p</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span> <span class=\"n\">evalP</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟪</span> <span class=\"bp\">⊥</span> <span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟪</span> <span class=\"bp\">⊤</span> <span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"n\">_</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>a function to pattern match a SAT formula using Qq</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">FormulaM</span> <span class=\"o\">:=</span> <span class=\"n\">ReaderT</span> <span class=\"n\">Context</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">StateRefT</span> <span class=\"n\">State</span> <span class=\"n\">MetaM</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_atom</span> <span class=\"o\">(</span><span class=\"n\">atom</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FormulaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">table</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">useTransparency</span> <span class=\"k\">then</span>\n    <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">table.atoms.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">table.atoms.size</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span>\n      <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">atom</span> <span class=\"n\">table.atoms</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">i</span>\n  <span class=\"n\">modifyGet</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">c.atoms.size</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">atoms</span> <span class=\"o\">:=</span> <span class=\"n\">c.atoms.push</span> <span class=\"n\">atom</span> <span class=\"o\">})</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">match_property</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">FormulaM</span> <span class=\"n\">Formula</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t1</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">f1</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">t1</span>\n    <span class=\"k\">let</span> <span class=\"n\">f2</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">t2</span>\n    <span class=\"n\">return</span> <span class=\"bp\">⟪</span> <span class=\"n\">f1</span> <span class=\"bp\">∧</span> <span class=\"n\">f2</span> <span class=\"bp\">⟫</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t1</span> <span class=\"bp\">∨</span> <span class=\"bp\">$</span><span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">f1</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">t1</span>\n    <span class=\"k\">let</span> <span class=\"n\">f2</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">t2</span>\n    <span class=\"n\">return</span> <span class=\"bp\">⟪</span> <span class=\"n\">f1</span> <span class=\"bp\">∨</span> <span class=\"n\">f2</span> <span class=\"bp\">⟫</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">t</span>\n    <span class=\"n\">return</span> <span class=\"bp\">⟪</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"bp\">⟫</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">⟪</span> <span class=\"bp\">⊤</span> <span class=\"bp\">⟫</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">⟪</span> <span class=\"bp\">⊥</span> <span class=\"bp\">⟫</span>\n  <span class=\"bp\">|</span> <span class=\"n\">something</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">Formula.FVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">add_atom</span> <span class=\"n\">something</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and a function that try to proove that the formula is true for all evaluation context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">try_prove_formula</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">OptionP</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">evalP</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">someP</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evalP</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">noneP</span>\n</code></pre></div>\n<p>in fact I use a much more complicated function which evaluates my formula with a polynomial with several variables but I put this to have a simple example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"tautology\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n      <span class=\"n\">Formula.FormulaM.run</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">formula</span> <span class=\"bp\">←</span> <span class=\"n\">Formula.match_property</span> <span class=\"n\">type</span>\n        <span class=\"k\">match</span> <span class=\"n\">Formula.try_prove_tautology</span> <span class=\"n\">formula</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">noneP</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">someP</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">tab</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n          <span class=\"n\">mvarId.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- TODO</span>\n          <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n      <span class=\"o\">)</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>the problem is that i can't re-inject my proof into q(...), does anyone know how to do it?</p>",
        "id": 324600071,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1675083590
    },
    {
        "content": "<p>the problem is that when i try to do something like q(proof), Qq gives me an error like \"level mvars not supported\" so i can't feed my proof back into my metavariable</p>",
        "id": 324616866,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1675088151
    },
    {
        "content": "<p>Can you please post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 324751933,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675104264
    },
    {
        "content": "<p>Here is one :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Expr</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">OptionP</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">noneP</span> <span class=\"o\">:</span> <span class=\"n\">OptionP</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">someP</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">OptionP</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span> <span class=\"c1\">-- more complicated than that in practice</span>\n<span class=\"bp\">|</span> <span class=\"n\">FTop</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FBot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalP</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FBot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"c1\">-- very complicated function, need to have this signature</span>\n<span class=\"kd\">def</span> <span class=\"n\">try_prove_property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">OptionP</span> <span class=\"o\">(</span><span class=\"n\">evalP</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">someP</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evalP</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">noneP</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">match_property</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Formula</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">FBot</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"fail to match the property\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"tautology\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n      <span class=\"k\">let</span> <span class=\"n\">formula</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">type</span>\n      <span class=\"k\">match</span> <span class=\"n\">try_prove_property</span> <span class=\"n\">formula</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">noneP</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">someP</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">mvarId.assign</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- I fail to use proof here</span>\n        <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 324765293,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1675108686
    },
    {
        "content": "<p>You're trying to mix meta-level and object-level reasoning here.  The <code>try_prove_property</code> function gives you a proof on the meta-level, but you want a proof on the object-level.</p>",
        "id": 324766565,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675109095
    },
    {
        "content": "<p>This is closer to what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Expr</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span> <span class=\"c1\">-- more complicated than that in practice</span>\n<span class=\"bp\">|</span> <span class=\"n\">FTop</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">FBot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToExpr</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">toTypeExpr</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Formula</span><span class=\"o\">)</span>\n  <span class=\"n\">toExpr</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Formula.FTop</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FBot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Formula.FBot</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalP</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FBot</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">try_prove_property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">,</span> <span class=\"n\">Option</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">evalP</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">evalP</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">match_property</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Formula</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">FBot</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">FTop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"fail to match the property\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"tautology\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span>\n      <span class=\"k\">let</span> <span class=\"n\">formula</span> <span class=\"bp\">←</span> <span class=\"n\">match_property</span> <span class=\"n\">type</span>\n      <span class=\"k\">match</span> <span class=\"n\">try_prove_property</span> <span class=\"n\">formula</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">mvarId.assign</span> <span class=\"n\">proof</span>\n        <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 324766615,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675109109
    },
    {
        "content": "<p>thank you, i will try that</p>",
        "id": 324774221,
        "sender_full_name": "Remy Citerin",
        "timestamp": 1675111845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"578475\">Remy Citerin</span> has marked this topic as resolved.</p>",
        "id": 324872363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675160430
    }
]