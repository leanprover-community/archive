[
    {
        "content": "<p>An almost minimal <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.ConjAct</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Star.Unitary</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.Star</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Pin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">MulAction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lipschitz</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subgroup.closure</span> <span class=\"o\">(</span><span class=\"n\">Units.val</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">Set.range</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pinGroup</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"o\">(</span><span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">lipschitz</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubmonoid.map</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">unitary</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pinGroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">star_mem</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">pinGroup</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">pinGroup</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Star</span> <span class=\"o\">(</span><span class=\"n\">pinGroup</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">star_mem</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_star</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pinGroup</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- on live.lean-lang.org need to uncomment the following to trigger</span>\n<span class=\"c1\">-- set_option synthInstance.maxHeartbeats 20000 in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InvolutiveStar</span> <span class=\"o\">(</span><span class=\"n\">pinGroup</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    failed to synthesize</span>\n\n<span class=\"cm\">    (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_star</span><span class=\"o\">,</span> <span class=\"n\">star_star</span><span class=\"o\">]</span>\n  <span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pinGroup</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Pin</span>\n</code></pre></div>\n<p>(background: I'm trying to port <a href=\"https://github.com/leanprover-community/mathlib/pull/16040\">mathlib#16040</a> to Lean 4)</p>",
        "id": 405831229,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701698710
    },
    {
        "content": "<p>I wonder if I should simply increase the <code>maxHeartbeats</code> or something is wrong here.</p>\n<p>An interesting observation is that if I remove <code>import Mathlib.Tactic</code>, it also no longer times out.</p>",
        "id": 405831573,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701698812
    },
    {
        "content": "<p>I don't know how to read these outputs of <code>set_option trace.Meta.synthInstance true</code></p>\n<p>With <code>import Mathlib.Tactic</code>:<br>\n<a href=\"/user_uploads/3121/DAVoJlb4KX7CSfq07HBilBhm/image.png\">image.png</a><br>\nWithout <code>import Mathlib.Tactic</code>:<br>\n<a href=\"/user_uploads/3121/3WGNOflL8BRf4NRIIQgh4Es9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DAVoJlb4KX7CSfq07HBilBhm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DAVoJlb4KX7CSfq07HBilBhm/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3WGNOflL8BRf4NRIIQgh4Es9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/3WGNOflL8BRf4NRIIQgh4Es9/image.png\"></a></div>",
        "id": 405858764,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701705965
    },
    {
        "content": "<p>Replacing the <code>simp only</code> with <code>simp_rw [coe_star, star_star]</code> makes it fine</p>",
        "id": 405859890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701706229
    },
    {
        "content": "<p>The problem is that lean first tries to find <code>InvolutiveStar ↥(pinGroup Q)</code> which obviously doesn't exist (yet) because you're in the middle of defining it, but it's taking too long to conclude that it doesn't exist</p>",
        "id": 405860047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701706268
    },
    {
        "content": "<p>It's intriguing why Lean tries to find <code>InvolutiveStar ↥(pinGroup Q)</code> only if <code>import Mathlib.Tactic</code> (not <code>import Mathlib.Tactic.Common</code>).</p>",
        "id": 405861577,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701706640
    },
    {
        "content": "<p>I would assumes it tries it anyway, but the extra imports make the search take too long</p>",
        "id": 405861680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701706672
    },
    {
        "content": "<p>This is a recent regression -- I tried the code with a one week old version of mathlib and it works fine, but it fails on current master. Currently bisecting: let me know if I've misunderstood the issue here.</p>",
        "id": 405867027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701708022
    },
    {
        "content": "<p>The commit which pushes it over the edge is <code>ee87d34d605d52b7ea8073b70a858769c5f3db3d</code>, the commit which introduces <code>CommMagma</code>. Perhaps this isn't surprising, this did cause some typeclass slowdowns. That commit also had to increase <code>synthInstance.maxHeartbeats</code> at some other point: changing the default from 20000 to 22000 in the code above gets it compiling again so the commit just pushed it over the edge.</p>",
        "id": 405870247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701708884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> can you count the heartbeats prior to the <code>CommMagma</code> change? I'm curious how big the jump was.</p>",
        "id": 405871692,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701709227
    },
    {
        "content": "<p>post CommMagma: 21839, pre it's 21751.</p>",
        "id": 405874329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701709865
    },
    {
        "content": "<p>So it's really epsilon, which is good news. I guess that a few of those heartbeats are doing some admin, and the <code>synthInstance.maxHeartbeats</code> is not counting all of them (so something is going from just under 20000 to just over 20000 and then there's a bit of noise on top)</p>",
        "id": 405874648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701709945
    },
    {
        "content": "<p>great, thanks for the recon!</p>",
        "id": 405874803,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701709986
    },
    {
        "content": "<p>I owed Utensil one ;-)</p>",
        "id": 405933613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701733489
    },
    {
        "content": "<p>I'm confused by the fact that I wake up this morning to find out that it no longer time out, but I haven't updated Mathlib at all (still at 9df2cbf62c359b33807151422ca975894413d876 when I reported this), or changed any code at all. The heartbeat is now 16500.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Dec</span>  <span class=\"mi\">2</span> <span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"n\">lakefile.olean</span>\n<span class=\"n\">Dec</span>  <span class=\"mi\">2</span> <span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"bp\">.</span><span class=\"n\">lake</span>\n<span class=\"n\">Dec</span>  <span class=\"mi\">2</span> <span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">Dec</span>  <span class=\"mi\">2</span> <span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>\n</code></pre></div>",
        "id": 406206372,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701831309
    },
    {
        "content": "<p>I've updated Mathlib to c6ea155e725345888c36b7c1629e8c922d88e7e8 and it also no longer time out by default and the heartbeat is now 20038. Anyway this issue is solved and the puzzle is volatile in nature so no need for further investigation. Thanks!</p>",
        "id": 406207835,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701831705
    },
    {
        "content": "<p>This timeout seems to be triggered a lot by <a href=\"https://github.com/leanprover-community/mathlib4/pull/8386\">#8386</a>. Ideally we'd avoid looking for a <code>Star</code> instance entirely but it does indicate this part of the hierarchy should be optimized.</p>",
        "id": 406325540,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1701875303
    },
    {
        "content": "<p>This is fixed with <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a>. Profiler goes from ~550ms to ~200ms for typeclass inference of <code>InvolutiveStar</code>. Synthesizing the instance needs about 9500 heartbeats.</p>",
        "id": 407573295,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702417136
    }
]