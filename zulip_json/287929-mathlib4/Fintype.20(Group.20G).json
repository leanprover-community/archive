[
    {
        "content": "<p>I couldn't find an instance that we have a finite number of groups over a finite type. I tried using the recently ported/rewritten <code>%derive_fintype</code> to magically generate the instances for Fintypes, but ran into issues over <code>npow</code> and <code>zpow</code>. Is there a way to get the deriver to work for such structures with autoParam functions? I've provided a proof that <code>npowRec</code> is the unique inhabitant of the relevant subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.DeriveFintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Pi</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">np_inj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">np</span> <span class=\"n\">np'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nph0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nph0'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np'</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nph1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nph1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np'</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">np</span> <span class=\"bp\">=</span> <span class=\"n\">np'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">np_unique</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Unique</span> <span class=\"o\">{</span><span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">npowRec</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subtype.ext</span>\n      <span class=\"o\">(</span><span class=\"n\">np_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.prop.left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">f.prop.right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)))⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">np_fintype</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Fintype</span> <span class=\"o\">{</span><span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">np_unique.fintype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span> <span class=\"c1\">-- fails,</span>\n<span class=\"c1\">-- probably because can't show that there are finite `npow`</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Div</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span> <span class=\"c1\">-- fails,</span>\n<span class=\"c1\">-- probably because can't show that there are finite `zpow`</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 363566191,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685910336
    },
    {
        "content": "<p>Do we have an <code>ext</code> lemma from <code>Group</code> to <code>Mul</code>?</p>",
        "id": 363583425,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685922663
    },
    {
        "content": "<p>I know nothing about <code>derive_fintype%</code>. As for <code>Finite (Group G)</code>, you can easily get it from an injective map to <code>G -&gt; G -&gt; G</code>.</p>",
        "id": 363583457,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685922716
    },
    {
        "content": "<p>Some time ago, I started (then abandoned) a branch where I merged <code>npow</code> and rules into 1 structure.</p>",
        "id": 363583523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685922765
    },
    {
        "content": "<p>This structure is a <code>Subsingleton</code>.</p>",
        "id": 363583527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685922776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fintype.20.28Group.20G.29/near/363583425\">said</a>:</p>\n<blockquote>\n<p>Do we have an <code>ext</code> lemma from <code>Group</code> to <code>Mul</code>?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group.ext#doc\">docs4#Group.ext</a></p>",
        "id": 363584238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685923421
    },
    {
        "content": "<p><code>derive_fintype% t</code> is short for <code>Fintype.ofEquiv _ (proxy_equiv% t)</code>, and you can see what equivalence it is generating with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proxy_equiv</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">fun G ↦</span>\n<span class=\"cm\">  Monoid.proxyTypeEquiv</span>\n<span class=\"cm\">    G : (G : Type u_1) →</span>\n<span class=\"cm\">  (toSemigroup : Semigroup G) ×</span>\n<span class=\"cm\">      (toOne : One G) ×</span>\n<span class=\"cm\">        (_ : PLift (∀ (a : G), 1 * a = a)) ×</span>\n<span class=\"cm\">          (_ : PLift (∀ (a : G), a * 1 = a)) ×</span>\n<span class=\"cm\">            (npow : ℕ → G → G) ×</span>\n<span class=\"cm\">              (_ : PLift (autoParam (∀ (x : G), npow 0 x = 1) _auto✝)) ×</span>\n<span class=\"cm\">                PLift (autoParam (∀ (n : ℕ) (x : G), npow (n + 1) x = x * npow n x) _auto✝¹) ≃</span>\n<span class=\"cm\">    Monoid G</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It's just relying on whatever instances Mathlib has to create a <code>Fintype</code> instance, and there aren't any instances that can see that the <code>ℕ → G → G</code> is determined by the following two fields.</p>\n<p>Potentially the <code>proxy_equiv%</code> elaborator could be made aware of which fields are functions of the others due to Prop fields and omit them. I don't think being aware of <code>autoParam</code> is sufficient though since you also need the <code>Subsingleton</code> proof that Yury mentioned.</p>",
        "id": 363587561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685926128
    },
    {
        "content": "<p>Here is the full proof up to <code>Fintype (Group)</code>, where I do provide the <code>Unique</code>, and thus <code>Fintype</code>, instances.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.DeriveFintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Pi</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">np_inj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">np</span> <span class=\"n\">np'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nph0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nph0'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np'</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nph1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nph1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np'</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">np</span> <span class=\"bp\">=</span> <span class=\"n\">np'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">np_unique</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Unique</span> <span class=\"o\">{</span><span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">npowRec</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subtype.ext</span>\n      <span class=\"o\">(</span><span class=\"n\">np_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.prop.left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">f.prop.right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)))⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">np_fintype</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Fintype</span> <span class=\"o\">{</span><span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">np_unique.fintype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">npow</span> <span class=\"bp\">↦</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">npow</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">×</span>\n    <span class=\"n\">PLift</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">npow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"o\">{</span><span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">np</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PLift.up</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span> <span class=\"n\">PLift.up</span> <span class=\"n\">hf.right</span><span class=\"o\">⟩</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf.fst.down</span><span class=\"o\">,</span> <span class=\"n\">hf.snd.down</span><span class=\"o\">⟩</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Div</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zp_inj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">zp</span> <span class=\"n\">zp'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zph0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zp</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zph0'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zp'</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zph1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zph1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp'</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zp'</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zphn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zphn'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp'</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zp'</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">zp</span> <span class=\"bp\">=</span> <span class=\"n\">zp'</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zphn</span><span class=\"o\">,</span> <span class=\"n\">zphn'</span><span class=\"o\">,</span> <span class=\"n\">zph1</span><span class=\"o\">,</span> <span class=\"n\">zph1'</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">zp_unique</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Unique</span> <span class=\"o\">{</span><span class=\"n\">zp</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zp</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">zpowRec</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subtype.ext</span> <span class=\"o\">(</span><span class=\"n\">zp_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f.prop.left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">f.prop.right.left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">f.prop.right.right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)))⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">zp_fintype</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">]:</span>\n    <span class=\"n\">Fintype</span> <span class=\"o\">{</span><span class=\"n\">zp</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zp</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">zp_unique.fintype</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">zpow</span> <span class=\"bp\">↦</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zpow</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">×</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zpow</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zpow</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">×</span>\n      <span class=\"n\">PLift</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zpow</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zpow</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"o\">{</span><span class=\"n\">zp</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">zp</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">zp</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)}</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">PLift.up</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span> <span class=\"n\">PLift.up</span> <span class=\"n\">hf.right.left</span><span class=\"o\">,</span> <span class=\"n\">PLift.up</span> <span class=\"n\">hf.right.right</span><span class=\"o\">⟩</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf.fst.down</span><span class=\"o\">,</span> <span class=\"n\">hf.snd.fst.down</span><span class=\"o\">,</span> <span class=\"n\">hf.snd.snd.down</span><span class=\"o\">⟩</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">,</span> <span class=\"n\">hf''</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">DivInvMonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">derive_fintype</span><span class=\"bp\">%</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 363588588,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685926871
    },
    {
        "content": "<p>And, nicely, one can now \"brute force\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Group</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 363588761,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685927005
    },
    {
        "content": "<p>But unfortunately, it slows to a half for me, for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Group</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>failing with a deterministic timeout</p>",
        "id": 363588888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685927082
    },
    {
        "content": "<p>I would hope there's a way of doing this that doesn't require repeating the proofs about npow  in Monoid.ext</p>",
        "id": 363589104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685927228
    },
    {
        "content": "<p>Something like considering the subtype</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">omi</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">Group.mk</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">Group</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 363589428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685927441
    },
    {
        "content": "<p>You only need the multiplication!</p>",
        "id": 363648638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685954670
    },
    {
        "content": "<p>Not if you want to be constructive!</p>",
        "id": 363649366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685954852
    },
    {
        "content": "<p>(sure, you can find inv and one constructively by iteration; but it's easier to just declare all three and let the fintype machinery iterate)</p>",
        "id": 363649897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685954957
    },
    {
        "content": "<p>If I'm actually counting the number of group structures on a type of size n then surely it's easier to just loop over the multiplications the moment n&gt;=2?</p>",
        "id": 363650249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685955045
    },
    {
        "content": "<p>If you only want to count them, yes; but <code>Fintype (Group G)</code> asks you to construct each one too</p>",
        "id": 363650954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685955214
    },
    {
        "content": "<p>Also, it's not clear to me how you check the multiplication forms a group without identifying the inverse and identity along the way</p>",
        "id": 363651951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685955412
    },
    {
        "content": "<p>Wasn't there some weird 1-axiom characterisation of groups?</p>",
        "id": 363652586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685955541
    },
    {
        "content": "<p><a href=\"https://ftp.mcs.anl.gov/pub/tech_reports/reports/P270.pdf\">Yes</a>, but none are in terms of solely multiplication</p>",
        "id": 363655133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685956068
    }
]