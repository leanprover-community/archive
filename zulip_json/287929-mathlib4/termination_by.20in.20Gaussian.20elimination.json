[
    {
        "content": "<p>I implemented a naive Gaussian elimination and it works in the sense that I can now invert invertible matrices, but I have trouble showing termination of my recursion. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">swap_rows</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">scale_row</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_scaled_row</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_elimination_step</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n    <span class=\"k\">let</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">scale_row</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">k</span>\n    <span class=\"n\">List.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">A''</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n                             <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span>\n                             <span class=\"k\">then</span> <span class=\"n\">add_scaled_row</span> <span class=\"n\">A''</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">A''</span> <span class=\"n\">r</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n                             <span class=\"k\">else</span> <span class=\"n\">A''</span><span class=\"o\">)</span> <span class=\"n\">A'</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A'</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">rows_to_search</span> <span class=\"o\">:=</span> <span class=\"n\">List.drop</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">pivot</span> <span class=\"o\">:=</span> <span class=\"n\">List.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A'</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.right</span><span class=\"o\">)⟩</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">rows_to_search</span>\n      <span class=\"k\">match</span> <span class=\"n\">pivot</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">step</span> <span class=\"n\">A'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">A''</span> <span class=\"o\">:=</span> <span class=\"n\">swap_rows</span> <span class=\"n\">A'</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.left</span><span class=\"o\">⟩</span> <span class=\"n\">r</span>\n        <span class=\"k\">let</span> <span class=\"n\">A'''</span> <span class=\"o\">:=</span> <span class=\"n\">gaussian_elimination_step</span> <span class=\"n\">A''</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.left</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h.right</span><span class=\"o\">⟩</span>\n        <span class=\"n\">step</span> <span class=\"n\">A'''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">A'</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_elimination</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">step</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">augment_with_identity</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"k\">if</span> <span class=\"n\">j.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract_inverse</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_lt_add_iff_left</span><span class=\"o\">,</span> <span class=\"n\">Fin.is_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">n</span>  <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_inverse</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">augmented</span> <span class=\"o\">:=</span> <span class=\"n\">augment_with_identity</span> <span class=\"n\">A</span>\n  <span class=\"n\">extract_inverse</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gaussian_elimination</span> <span class=\"n\">augmented</span>\n\n\n<span class=\"c1\">-- invertible example</span>\n<span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">matrix_inverse</span> <span class=\"n\">M</span>\n<span class=\"k\">#eval</span> <span class=\"n\">M</span><span class=\"bp\">*</span><span class=\"n\">N</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">M</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- non-invertible example</span>\n<span class=\"kd\">def</span> <span class=\"n\">M'</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">N'</span> <span class=\"o\">:=</span> <span class=\"n\">matrix_inverse</span> <span class=\"n\">M'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">N'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">M'</span><span class=\"bp\">*</span><span class=\"n\">N'</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>How do I show termination? I'm not even sure that the part <code>termination_by _ i j =&gt; (m - i) * (n - j)</code> is a right start. In words, I'd argue that the recursion ends because i or j increases in each step and as soon as they are are at least m or n respectively we are finished.</p>",
        "id": 356048389,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683291338
    },
    {
        "content": "<p>A brief answer: if you want to do <code>termination_by</code> some complicated expression, you will need to <code>have</code> the fact that that quantity has decreased into the context of each recursive call. That is, the fact that it is decreasing should be done inline with the code. This is contrary to the usual practice of proving things after defining them, unfortunately, and so for sufficiently complicated situations requires rethinking just using <code>termination_by</code>.</p>",
        "id": 356177266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683326993
    },
    {
        "content": "<p>Thanks! That helped a lot, I'm able to show termination now (not at all golfed yet...):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A'</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Nat.sub_lt_sub_left</span>  <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"n\">linarith</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">Nat.sub_lt_sub_left</span>  <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"n\">linarith</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">rows_to_search</span> <span class=\"o\">:=</span> <span class=\"n\">List.drop</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">List.finRange</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">pivot</span> <span class=\"o\">:=</span> <span class=\"n\">List.find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A'</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h.right</span><span class=\"o\">)⟩</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">rows_to_search</span>\n      <span class=\"k\">match</span> <span class=\"n\">pivot</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">step</span> <span class=\"n\">A'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">A''</span> <span class=\"o\">:=</span> <span class=\"n\">swap_rows</span> <span class=\"n\">A'</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.left</span><span class=\"o\">⟩</span> <span class=\"n\">r</span>\n        <span class=\"k\">let</span> <span class=\"n\">A'''</span> <span class=\"o\">:=</span> <span class=\"n\">gaussian_elimination_step</span> <span class=\"n\">A''</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.left</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h.right</span><span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n        <span class=\"n\">step</span> <span class=\"n\">A'''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">A'</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">step</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 356284268,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683373711
    },
    {
        "content": "<p>If you're planning on running this algorithm in practice, watch out since it will have worse asymptotic performance than you might expect. This is because the matrices are functions, so, for example <code>swap_rows</code> is creating a new closure that calculates entries from scratch every time. Using arrays of arrays (or writing a function that caches all the values of a matrix as an array of arrays then creates a new <code>Matrix</code> that reads from these arrays) would be a way to fix this.</p>",
        "id": 356289790,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683375137
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> that is certainly something to keep in mind. I was not really going for performance with this, but basically just playing around, because I didn't find Gaussian elimination in mathlib already.</p>",
        "id": 356544887,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1683490509
    },
    {
        "content": "<p>iirc Sebastien added something related to elementary matrices a while back</p>",
        "id": 356545825,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1683491137
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.transvection\">docs#matrix.transvection</a> is in the same file as what <span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> is referring to</p>",
        "id": 356552136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683495921
    }
]