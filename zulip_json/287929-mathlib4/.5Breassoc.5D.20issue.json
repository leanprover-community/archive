[
    {
        "content": "<p>The <code>reassoc</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/6bc3bc8e45930910a03923f3068cd2b8b09d67f2/Mathlib/CategoryTheory/Bicategory/Functor.lean#L211\">here</a> is interesting. I can't get it to work in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- attribute [reassoc] map₂_associator</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">The source declaration has attribute simp.</span>\n<span class=\"cm\">This attribute is not translated to the declarations generated by reassoc. Use something like</span>\n<span class=\"cm\">`@[reassoc (attr := simp)]` instead.</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- attribute [reassoc (attr := simp)] map₂_associator</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">errors with</span>\n\n<span class=\"cm\">CategoryTheory.OplaxFunctor.map₂_associator and CategoryTheory.OplaxFunctor.map₂_associator_assoc</span>\n<span class=\"cm\">do not generate the same number of simp lemmas.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 328047333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676476912
    },
    {
        "content": "<p>Still can't get it to work. Here's an example on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Bicategory.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">map₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">OplaxFunctor.Map₂AssociatorAux</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">map₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">map_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">map_comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">map_comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n    <span class=\"n\">map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.oplax_functor.map₂_associator_aux</span> <span class=\"n\">CategoryTheory.OplaxFunctor.Map₂AssociatorAux</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">OplaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">mapId</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">mapComp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">g</span>\n  <span class=\"n\">mapComp_naturality_left</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">mapComp</span> <span class=\"n\">f'</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">mapComp_naturality_right</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">g'</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_comp</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">≫</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"bp\">≫</span> <span class=\"n\">map₂</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_associator</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n      <span class=\"n\">OplaxFunctor.Map₂AssociatorAux</span> <span class=\"n\">obj</span> <span class=\"n\">map</span> <span class=\"n\">map₂</span> <span class=\"n\">map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_leftUnitor</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">mapId</span> <span class=\"n\">a</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_rightUnitor</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">ρ_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">mapId</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">ρ_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">OplaxFunctor</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">map₂_associator</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  @eq_whisker' ?C ?inst✝ ?X ?Y ?f ?g</span>\n<span class=\"cm\">    (@id</span>\n<span class=\"cm\">      (∀ {B : Type u₁} [inst : Bicategory B] {C : Type u₂} [inst_1 : Bicategory C] (self : OplaxFunctor B C)</span>\n<span class=\"cm\">        {map_comp :</span>\n<span class=\"cm\">          {a b c : B} →</span>\n<span class=\"cm\">            (f : a ⟶ b) →</span>\n<span class=\"cm\">              (g : b ⟶ c) →</span>\n<span class=\"cm\">                (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) (f ≫ g) ⟶</span>\n<span class=\"cm\">                  (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) f ≫</span>\n<span class=\"cm\">                    (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) g},</span>\n<span class=\"cm\">        autoParam</span>\n<span class=\"cm\">          (∀ {a b c d : B} (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d),</span>\n<span class=\"cm\">            Map₂AssociatorAux self.toPrelaxFunctor.toPrefunctor.obj</span>\n<span class=\"cm\">              (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor)</span>\n<span class=\"cm\">              (fun {a b} {f g} =&gt; PrelaxFunctor.map₂ self.toPrelaxFunctor) map_comp f g h)</span>\n<span class=\"cm\">          _auto✝)</span>\n<span class=\"cm\">      (fun B [Bicategory B] C [Bicategory C] self =&gt; self.8) B inst✝¹ C inst✝ self map_comp)</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  @id</span>\n<span class=\"cm\">    (∀ {B : Type u₁} [inst : Bicategory B] {C : Type u₂} [inst_1 : Bicategory C] (self : OplaxFunctor B C)</span>\n<span class=\"cm\">      {map_comp :</span>\n<span class=\"cm\">        {a b c : B} →</span>\n<span class=\"cm\">          (f : a ⟶ b) →</span>\n<span class=\"cm\">            (g : b ⟶ c) →</span>\n<span class=\"cm\">              (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) (f ≫ g) ⟶</span>\n<span class=\"cm\">                (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) f ≫</span>\n<span class=\"cm\">                  (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor) g},</span>\n<span class=\"cm\">      autoParam</span>\n<span class=\"cm\">        (∀ {a b c d : B} (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d),</span>\n<span class=\"cm\">          Map₂AssociatorAux self.toPrelaxFunctor.toPrefunctor.obj</span>\n<span class=\"cm\">            (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor)</span>\n<span class=\"cm\">            (fun {a b} {f g} =&gt; PrelaxFunctor.map₂ self.toPrelaxFunctor) map_comp f g h)</span>\n<span class=\"cm\">        _auto✝)</span>\n<span class=\"cm\">    (fun B [Bicategory B] C [Bicategory C] self =&gt; self.8) B inst✝¹ C inst✝ self map_comp</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  autoParam</span>\n<span class=\"cm\">    (∀ {a b c d : B} (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d),</span>\n<span class=\"cm\">      Map₂AssociatorAux self.toPrelaxFunctor.toPrefunctor.obj</span>\n<span class=\"cm\">        (fun {X Y} =&gt; Prefunctor.map self.toPrelaxFunctor.toPrefunctor)</span>\n<span class=\"cm\">        (fun {a b} {f g} =&gt; PrelaxFunctor.map₂ self.toPrelaxFunctor) map_comp f g h)</span>\n<span class=\"cm\">    _auto✝ : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?f = ?g : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 328857805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676838126
    },
    {
        "content": "<p>Does it help if you make map2AssociatorAux reudicble?</p>",
        "id": 328866978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676845289
    },
    {
        "content": "<p>I think/hope this aux def is no longer needed</p>",
        "id": 328866993,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676845306
    },
    {
        "content": "<p>Oh it was just a typo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Bicategory.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">map₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">OplaxFunctor.Map₂AssociatorAux</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">map₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">map_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">map_comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">map_comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n    <span class=\"n\">map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.oplax_functor.map₂_associator_aux</span> <span class=\"n\">CategoryTheory.OplaxFunctor.Map₂AssociatorAux</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">OplaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Bicategory.</span><span class=\"o\">{</span><span class=\"n\">w₂</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">mapId</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">mapComp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">g</span>\n  <span class=\"n\">mapComp_naturality_left</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">mapComp</span> <span class=\"n\">f'</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">mapComp_naturality_right</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">g'</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g'</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_comp</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"bp\">≫</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map₂</span> <span class=\"n\">η</span> <span class=\"bp\">≫</span> <span class=\"n\">map₂</span> <span class=\"n\">θ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_associator</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n      <span class=\"n\">OplaxFunctor.Map₂AssociatorAux</span> <span class=\"n\">obj</span> <span class=\"n\">map</span> <span class=\"n\">map₂</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_leftUnitor</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">mapId</span> <span class=\"n\">a</span> <span class=\"bp\">▷</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">map₂_rightUnitor</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">ρ_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">mapComp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">mapId</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">ρ_</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">aesop</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">OplaxFunctor</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">map₂_associator</span>\n</code></pre></div>",
        "id": 328869157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676846909
    },
    {
        "content": "<p>Sorry -- what was a typo?</p>",
        "id": 328870631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676848126
    },
    {
        "content": "<p>map_comp should have been mapComp</p>",
        "id": 328870988,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676848472
    },
    {
        "content": "<p>In the map2_associator field</p>",
        "id": 328870997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676848486
    }
]