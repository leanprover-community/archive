[
    {
        "content": "<p>The documentation linter complained about a <code>let rec</code> not having documentation in one of my PRs -- is this something that can be disabled in general? For one, the <code>let rec</code> syntax doesn't support docstrings, and for another a <code>let rec</code> is meant to be a local definition like any other <code>let</code>, so it's not clear it needs a docstring just because it's recursive.</p>\n<p>Similarly, definitions in <code>where</code> clauses are flagged by the linter. Often documentation helps with these (and these do support docstrings) but I'm not sure local definitions should be required to have them.</p>",
        "id": 390376885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694461417
    },
    {
        "content": "<p>I dont know that these are tagged in any way in the environment, so the only way I can think to detect them is checking if the declaration range of a def of the form <code>a.b</code> is contained in that of <code>a</code>, which is quite a hack</p>",
        "id": 390381093,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694463241
    },
    {
        "content": "<blockquote>\n<p>For one, the let rec syntax doesn't support docstrings,</p>\n</blockquote>\n<p>Actually it does, the syntax for it is just really awkward</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"sd\">/-- why is the docstring here? -/</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 390385417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694465099
    },
    {
        "content": "<p>it does actually make a tiny bit of sense, because a <code>let rec</code> can introduce multiple mutual definitions separated by commas, and they all need a docstring (and <code>let rec</code> introduces the whole block)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span>\n    <span class=\"sd\">/-- I have no idea how to indent this -/</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"sd\">/-- also a definition -/</span>\n    <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 390385665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694465224
    },
    {
        "content": "<p>TBH the usage of commas here is not very lean-ish, usually you would expect the commas to be optional with whitespace-sensitivity being the alternate syntax but here there is no alternate</p>",
        "id": 390385830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694465306
    },
    {
        "content": "<p>But Alex is right, the main reason these aren't special cased is because they are not obviously different from regular definitions (assuming you are talking about the std/mathlib doc linter)</p>",
        "id": 390386337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694465553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/doc.20lint.20on.20.60let.20rec.60.3F/near/390385665\">said</a>:</p>\n<blockquote>\n<p>it does actually make a tiny bit of sense, because a <code>let rec</code> can introduce multiple mutual definitions separated by commas, and they all need a docstring (and <code>let rec</code> introduces the whole block)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span>\n    <span class=\"sd\">/-- I have no idea how to indent this -/</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"sd\">/-- also a definition -/</span>\n    <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Don't forget the comma!</p>",
        "id": 390388438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694466604
    }
]