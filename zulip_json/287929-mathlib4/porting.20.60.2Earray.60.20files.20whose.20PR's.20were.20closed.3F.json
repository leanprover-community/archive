[
    {
        "content": "<p>I thought I'd try to port logic.equiv.array since it's at the top of the <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> and we're now choosing to align <code>array</code> with <code>Array</code> as per <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/369848817\">this message</a>, only to find that the branch and PR already exist, but were closed: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1733\">!4#1733</a>.</p>",
        "id": 369851474,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687820944
    },
    {
        "content": "<p>Is reopening the PR and changing the <code>Array'</code> that appears there to <code>Array</code> the right move? Just wanted to confirm.</p>",
        "id": 369851482,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687820949
    },
    {
        "content": "<p>(The situation is similar for <code>data.array.lemmas</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2194\">!4#2194</a>))</p>",
        "id": 369851554,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687821001
    },
    {
        "content": "<p>Sounds good! Sorry for the confusion. :-)</p>",
        "id": 369852034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687821307
    },
    {
        "content": "<p>No problem! (Sorry if this was addressed in the meeting; I thought it would be quicker to ask on zulip since I couldn't make it today! :) ...Though, I did <em>just</em> realize the meeting recording has a searchable transcript, which would have made finding a mention of it way easier than I thought. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 369852651,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687821682
    },
    {
        "content": "<p>Okay, a couple clarifying questions:</p>\n<ol>\n<li>\n<p>we have both <code>DArray</code> and <code>Array'</code> floating around in these files, <code>DArray</code> being a heterogeneous array. Is <code>DArray</code> also meant to be aligned to <code>Array</code>? (That seems like it might be a bigger semantic gap!)</p>\n</li>\n<li>\n<p>What should the type signature of something like <code>def arrayEquivFin (n : ℕ) (α : Type _) : Array' n α ≃ (Fin n → α)</code> become? <code>Array α ≃ (n : ℕ) × (Fin n → α)</code>, or <code>{ a : Array α // a.size = n } ≃ (Fin n → α)</code>, or both, or neither?</p>\n</li>\n</ol>",
        "id": 369854305,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687822673
    },
    {
        "content": "<p>As far as I'm aware, <code>DArray</code> doesn't exist yet anywhere. I would be inclined to just #noalign these, with a comment that <code>DArray</code> doesn't exist yet.</p>",
        "id": 369856382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687823876
    },
    {
        "content": "<p>I would be inclined to #noalign lemmas about <code>Array'</code> too, perhaps with a note that users should use <code>Vector</code> instead. (Perhaps even hinting that we've <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form.20for.20.60Vector.60.20indexing.3A.20.60get.60.20vs.20.60.2E.5B.2E.5D.60/near/367622209\">thought</a> about changing the implementation of <code>Vector</code> to be in terms of <code>Array</code> rather than <code>List</code>.)</p>",
        "id": 369856531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687823959
    },
    {
        "content": "<p>do we want any of the mathlib3 array stuff to be persisted..? I was under the impression that it's not worth persisting</p>",
        "id": 369856538,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687823964
    },
    {
        "content": "<p>What do you mean by persisted?</p>",
        "id": 369860635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687825923
    },
    {
        "content": "<p>Our conclusion in the porting meeting today that anything about the old <code>array</code> which still makes sense in terms of the new <code>Array</code> should be ported.</p>",
        "id": 369860718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687825952
    },
    {
        "content": "<p>For the sake of the port these results should just go in a file corresponding to the original mathlib3 location. After the port we can rationalize.</p>",
        "id": 369860765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687825980
    },
    {
        "content": "<p>Hmm, okay. I guess the question is then, \"where's the line past which translating <code>Array'</code> to <code>Array</code> doesn't make sense\". I guess...#noalign if we need to mention the size of the array in the type?</p>",
        "id": 369861135,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687826133
    },
    {
        "content": "<p><code>Array'</code> is essentially <code>Vector</code>. It is not <code>Array</code>, but something more complicated. I would suggest everything about <code>Array'</code> gets #noalign'd, and if you like add a porting note explaining the users should use <code>Vector</code> rather than <code>Array'</code>. Without some evidence that there actually exist users interested in <code>Array'</code>, I wouldn't do more than that.</p>",
        "id": 369862022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687826532
    },
    {
        "content": "<p>I am adding a dependent/heterogeneous array, and a fixed-length array (iso to Vector) to Std at some point, but I need a pretty minimal API for my use case so I suspect it's not worth putting much effort into porting the non-<code>array</code> stuff.</p>",
        "id": 369862942,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687826972
    },
    {
        "content": "<p>plus all the proofs will be broken since the implementation will not be the same :)</p>",
        "id": 369863067,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687827011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20.60.2Earray.60.20files.20whose.20PR's.20were.20closed.3F/near/369862022\">said</a>:</p>\n<blockquote>\n<p><code>Array'</code> is essentially <code>Vector</code>. It is not <code>Array</code>, but something more complicated. I would suggest everything about <code>Array'</code> gets #noalign'd, and if you like add a porting note explaining the users should use <code>Vector</code> rather than <code>Array'</code>. Without some evidence that there actually exist users interested in <code>Array'</code>, I wouldn't do more than that.</p>\n</blockquote>\n<p>Right, no, I understand the difference, but I thought the point of what was said at the porting meeting was to <em>rewrite</em> theorems about <code>array</code>( = <code>Array'</code>) that make sense for <code>Array</code> and #noalign things which don’t, not to simply #noalign everything about <code>Array'</code>.</p>\n<p>The issue is that you can find a natural way to make some theorems about <code>array</code>/<code>Array'</code> make sense for <code>Array</code> by forgetting the size information appropriately, e.g. <code>Array' n α \\equiv Fin n → α</code> can become <code>Array α \\equiv ((n : ℕ) × (Fin n → α))</code>, or by <em>retaining</em> the size information, by replacing <code>Array' n α</code> with <code>{ a : Array α // a.size = n }</code>. So the question is essentially “how much rewriting do we do”.</p>\n<p>I suppose the most obvious thing is to just rewrite the things for which we can sensibly drop in <code>Array α</code> for <code>Array n α</code> nearly verbatim, like the <code>Traversable</code> instance, especially given James’ incoming Std types?</p>",
        "id": 369868639,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687829814
    },
    {
        "content": "<p>Where were these lemmas used in mathlib, out of curiosity?</p>",
        "id": 369869927,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687830525
    },
    {
        "content": "<p>One of the issues with the current collection lemmas is we have copied large swaths of lemmas from one collection to another in very repetitive style -- I was hoping to standardize most of these lemmas around models (<code>List</code>/<code>Multiset</code>/<code>Finset</code>/<code>[FinEnum A] \\x (A -&gt; B)</code>) to cut down the repetition and get a big set of lemmas for each collection for free.</p>\n<p>These alternative arrays from mathlib3 have the same property that many collections do, where they can be viewed through the lens of multiple different models that each give different lemmas. I imagine that is what you are referring to when you say some of the lemmas can be generalized in multiple ways.</p>\n<p>TL;DR I wouldn't really worry about porting lemmas that already exist on e.g. <code>List</code> -- but if there are lemmas that don't mirror those in a different collection, I would be interested!!</p>",
        "id": 369870906,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687831139
    },
    {
        "content": "<p>And if you don't feel like trying to sort out which ones are already present on <code>List</code>, I personally think it's fine to just not port them if they're not being used elsewhere. We can always look back at the lean3 source if we want to later.</p>",
        "id": 369871127,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687831260
    },
    {
        "content": "<p>But I also don't know what the rationale was at the porting meeting, so maybe there is a good reason to port them after all <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 369871183,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687831295
    },
    {
        "content": "<p>Oh, I'm an idiot, I have just been completely forgetting that Lean3's <code>array</code> had the length as a parameter. Ignore everything I've been saying. :-)</p>",
        "id": 369884177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687835718
    },
    {
        "content": "<p>I have revised my position to: junk it all. :-)</p>",
        "id": 369884361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687835753
    },
    {
        "content": "<p>Oh, okay! Sounds good! :D</p>",
        "id": 369917630,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687845589
    },
    {
        "content": "<p>Though, maybe we ought to include the standard equivalence <code>Array α ≃ List α</code> in that file. Surprisingly, I couldn't find this equivalence elsewhere already. (Did I miss it?) This lets us include <code>Array.encodable</code> and <code>Array.countable</code> easily, and is kind of the \"moral port\" of this file, in a way—it's also what you'd expect if you didn't know about mathlib3 and stumbled on a file called \"Logic.Equiv.Array\" :)</p>",
        "id": 369918171,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687845724
    },
    {
        "content": "<p>I think the necessary lemmas for it are proven somewhere in Std. No clue if the equivalence is in Std.</p>",
        "id": 369921609,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687846528
    },
    {
        "content": "<p>I searched for <code>≃ List</code> and <code>≃ Array</code> in Std, and checked the autocomplete list for <code>arrayEquiv</code> and <code>listEquiv</code> while importing <code>Std</code>, so I'm <em>pretty</em> sure it isn't! I pushed a commit adding it, and if we don't like it (or don't like doing stuff like that during the port), we can easily revert the relevant commit or put it somewhere else :)</p>",
        "id": 369923308,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687846917
    },
    {
        "content": "<p>std doesn't have <code>Equiv</code>, so it is not too surprising the first search fails</p>",
        "id": 369923693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687847009
    },
    {
        "content": "<p>And there is nothing to prove regarding equivalence of List and array, one is literally a wrapper for the other so the lemmas you would need to apply are all autogenerated</p>",
        "id": 369923904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687847052
    },
    {
        "content": "<p>I think the proof is just <code>\\&lt;Array.mk, Array.data, fun | rfl =&gt; rfl, fun | rfl =&gt; rfl\\&gt;</code></p>",
        "id": 369924182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687847120
    },
    {
        "content": "<p>Oh, yeah, that's nicer than what I wrote, which was in terms of <code>toArray</code> and <code>toList</code>.</p>",
        "id": 369925331,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687847414
    },
    {
        "content": "<p>And, ah, I thought lean core had equiv since it comes up in searches, but those are all in test files :)</p>",
        "id": 369926323,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687847679
    },
    {
        "content": "<p>I also commented out the instances for <code>Traversable (Array α)</code> and <code>IsLawfulTraversable (Array α)</code> and added the following porting note explaining the rationale:</p>\n<blockquote>\n<p>Porting note: removed instances for what would be ported as <code>Traversable (Array α)</code> and <code>IsLawfulTraversable (Array α)</code>. Since <code>Array</code> is now a core datatype, these would<br>\n1. be implemented directly in terms of <code>Array</code> functionality for efficiency, rather than being the traversal of some other type transported along an equivalence to <code>Array α</code> (as the traversable instance for <code>array</code> was)<br>\n2. belong in <code>Mathlib.Control.Traversable.Instances</code> instead of this file.</p>\n</blockquote>\n<p>Again, we can revert that commit or change it if it's inaccurate, but I thought I'd provide an actionable option to try to move things along :)</p>",
        "id": 369927082,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687847884
    },
    {
        "content": "<blockquote>\n<p>Since <code>Array</code> is now a core datatype</p>\n</blockquote>\n<p>Actually <code>Array</code> was always a core datatype, we just cared less about this kind of thing in lean 3</p>",
        "id": 369930832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687848748
    },
    {
        "content": "<p>\"Since we now care more about <code>Array</code> as a datatype\", maybe? EDIT: kept it simple and just deleted the line, leaving \"These would\".</p>",
        "id": 369935215,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687849689
    },
    {
        "content": "<p>Ok, I've put <a href=\"https://github.com/leanprover-community/mathlib4/pull/1733\">!4#1733</a> out for review; if we want to change anything we can do so in the review stage :)</p>",
        "id": 370094315,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687877392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20.60.2Earray.60.20files.20whose.20PR's.20were.20closed.3F/near/369860718\">said</a>:</p>\n<blockquote>\n<p>Our conclusion in the porting meeting today that anything about the old <code>array</code> which still makes sense in terms of the new <code>Array</code> should be ported.</p>\n</blockquote>\n<p>I'm quite surprised by this. <code>array n α</code> shares nothing but a name with <code>Array α</code>, so this isn't so much porting as it is adding new API for a new data structure. As far as I can tell, <code>Array α</code> is just an optimized <code>List α</code>, while  <code>array n α</code> corresponds more closely to <code>Vector α n</code> in having the length in encoded in the type</p>",
        "id": 370342811,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687943683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20.60.2Earray.60.20files.20whose.20PR's.20were.20closed.3F/near/369884361\">said</a>:</p>\n<blockquote>\n<p>I have revised my position to: junk it all. :-)</p>\n</blockquote>\n<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 370342976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687943714
    },
    {
        "content": "<p>So what happened to <a href=\"https://github.com/leanprover-community/mathlib4/pull/1733\">#1733</a> and why is <a href=\"https://github.com/leanprover-community/mathlib4/pull/2194\">#2194</a> still open?</p>",
        "id": 370345085,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687944084
    },
    {
        "content": "<p>Those are good questions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 370345285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687944122
    },
    {
        "content": "<p>One argument is: if we do have a file <em>called</em> <code>Array</code> in the mathlib4, it ought to refer to <code>Array</code>. In some cases we can translate the statements about <code>array</code> to <code>Array</code>, so let's \"port\" those definitions in the files named \"array\" by replacing them with the corresponding ones for <code>Array</code>. In the cases where we can't easily adapt the definitions, junk them and leave a porting note.</p>\n<p>We don't just align <code>array</code> to <code>Vector</code> because <code>vector</code> already existed in mathlib (I believe) and is already aligned to it, and was implemented differently, so that only leaves us #noaligning or aligning with <code>Array</code>. Since they are at least somewhat-related types, and we don't want to just lose theorems if we don't have to, we can just try to ride out the semantic difference and align the <code>array</code> theorems to the adapted <code>Array</code> theorems where possible. So, that means <a href=\"https://github.com/leanprover-community/mathlib4/pull/2194\">#2194</a> ought to be (mostly) dealt with by aligning to corresponding Std theorems about <code>Array</code>, and adapting or junking the rest.</p>\n<p>...That's what I understand the reasoning to be, in any case. There's definitely an argument for saying \"actually, let's just start fresh\" too :)</p>",
        "id": 370373257,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687948593
    },
    {
        "content": "<p>Just to throw another opinion in here: I think we should either:</p>\n<ol>\n<li>Junk it all (edit: via <code>#noalign</code>)</li>\n<li>Blindly port it as <code>Array'</code> (which I think is what <a href=\"https://github.com/leanprover-community/mathlib4/pull/2194\">#2194</a> does) so that we can really claim \"everything in mathlib3 is available in mathlib4\", then junk it later down the line (perhaps merging the results with the stuff in <code>Mathlib.Data.Fin.Tuple</code>?)</li>\n</ol>",
        "id": 373912672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688986029
    },
    {
        "content": "<p>I'd noalign everything</p>",
        "id": 373914329,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688986363
    },
    {
        "content": "<p>I think <code>Array'</code> will be coming back at some point once the <code>DArray</code> work in std is finished</p>",
        "id": 373939220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688991139
    },
    {
        "content": "<p>So is your vote that we do my point 2 above?</p>",
        "id": 373940246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688991359
    },
    {
        "content": "<p>I vote for option 1.</p>",
        "id": 373953238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688993992
    },
    {
        "content": "<p>I think my point is in favor of \"do nothing for now, revisit this later\"</p>",
        "id": 373974326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688997990
    },
    {
        "content": "<p>where \"do nothing\" can also be interpreted as \"#noalign / port empty files / otherwise count the files as ported\"</p>",
        "id": 373974608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688998039
    },
    {
        "content": "<p>I think 1 sounds good until we know the final version of <code>DArray</code></p>",
        "id": 373983504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688999491
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5821\">#5821</a> if that is what we want to do</p>",
        "id": 374357930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689100665
    }
]