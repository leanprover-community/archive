[
    {
        "content": "<p>What is the current guidance around enabling structure eta? It’s turned on in some files that have been merged. Are we just rolling with it?</p>",
        "id": 343109541,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679316524
    },
    {
        "content": "<p>I’ve encountered people who think the current situation is hard no and some who think it’s hard yes. My personal understanding was: use it as a last resort to keep the port moving. Any clarification would be helpful. Thanks</p>",
        "id": 343112005,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679317137
    },
    {
        "content": "<p>I think if we want a rule against it it probably needs to be CI-enforced</p>",
        "id": 343113516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679317529
    },
    {
        "content": "<p>(the rule might be just \"must appear with a comment on the line above with a basic explanation of what alternatives didn't work)</p>",
        "id": 343113801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679317566
    },
    {
        "content": "<p>Perhaps some diagnostic information should be required to help with the final fix?</p>",
        "id": 343114080,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679317624
    },
    {
        "content": "<p>I thought Gabriel was pretty explicit about this being only for testing. The issue being, I think, that he may remove it from core whenever, at which point downstream uses would no longer be able to bump core.</p>",
        "id": 343114651,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679317764
    },
    {
        "content": "<p>Is there value to keeping two copies - one with eta and one without (if possible)? Some statements get pretty brutal without it</p>",
        "id": 343115468,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679317930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> did say that, but I think there might have been an ad-hoc decision to ignore it to allow porting more files.</p>",
        "id": 343115521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679317943
    },
    {
        "content": "<blockquote>\n<p>at which point downstream uses would no longer be able to bump core.</p>\n</blockquote>\n<p>RIght, at that point we can spend the effort to remove the uses of <code>etaExperiment</code>. But if we're very lucky the option will stop being needed anyway.</p>",
        "id": 343115680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679317999
    },
    {
        "content": "<p>Are we expecting some form of structure eta to be the final solution? If so, how confident are we in this?</p>",
        "id": 343116205,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679318109
    },
    {
        "content": "<p>I am of the opinion that new-style classes in the presense of diamonds are in the long run simply unusable without structure eta</p>",
        "id": 343116299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679318137
    },
    {
        "content": "<p>In my opinion are options are:</p>\n<ol>\n<li>Come up with ad-hoc and messy hacks during porting to avoid using <code>etaExperiment</code>. This isn't just a porting problem, end users of  mathlib4 will run into the same pain as we do</li>\n<li>Rework the algebra hierarchy to emulate the old-style classes we had in lean3. This is mechanical but tedious work, and there's no guarantee that it won't cause timeouts elsewhere</li>\n<li>Tack on <code>etaExperiment false</code> and wait for Lean core to either help us by either adding shorthand for 2 or TC eta the default, or to force our hand.</li>\n</ol>",
        "id": 343116592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679318210
    },
    {
        "content": "<p>Personally, an upstream fix seems most reasonable as a long term solution. I don’t have any examples but it doesn’t seem unreasonable that the complexity of the algebra hierarchy could emerge naturally outside Mathlib, especially if Lean 4 becomes widely adopted as hoped.</p>",
        "id": 343117515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679318467
    },
    {
        "content": "<p>I should preface my opinions with: what do I know</p>",
        "id": 343117610,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679318494
    },
    {
        "content": "<p>Also prefacing with \"what do I know\" :)</p>\n<p>I suspect the most important benchmark for any solution will be \"does this work for all of mathlib\" - which we can only check once all of mathlib is ported. So right now I'd move forward with whatever gets us there fastest, and I think that's with applying the option where it helps</p>",
        "id": 343120257,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679319192
    },
    {
        "content": "<p>The conclusion I got from the meeting today was \"go ahead but don't go crazy\". Anyone please feel free to correct me.</p>",
        "id": 343214892,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679342323
    },
    {
        "content": "<p>There was the question of \"what actually happens when <code>etaExperiment</code> makes things (much) slower?\". Here is a (small part of a) diff from a random file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Preorder.mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder</span>\n<span class=\"bp\">+</span>        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Preorder</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Preorder.toLE</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n<span class=\"bp\">+</span>          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LE.le</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n<span class=\"bp\">+</span>            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LE.le</span> <span class=\"n\">a</span>\n<span class=\"bp\">+</span>              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE.le</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"bp\">+</span>                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.instLESignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">SignType.Le</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LE.le</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">SignType.Le</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LE.le</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">SignType.Le</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.instLESignType.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">Preorder.toLE.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n<span class=\"bp\">+</span>            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LE.le</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n<span class=\"bp\">+</span>              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LE.le</span> <span class=\"n\">a</span>\n<span class=\"bp\">+</span>                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE.le</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.instLESignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">SignType.Le</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span> <span class=\"bp\">=?=</span> <span class=\"n\">LE</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">LE.le</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SignType.Le</span>\n<span class=\"bp\">+</span>                                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">SignType.Le</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.instLESignType.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span>\n<span class=\"bp\">+</span>                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SignType.Le</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">PartialOrder.toPreorder.1.1</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n<span class=\"bp\">+</span>                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n<span class=\"bp\">+</span>            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">PartialOrder.toPreorder.1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n<span class=\"bp\">+</span>              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.stuckMVar</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">stuck</span> <span class=\"n\">MVar</span> <span class=\"bp\">?</span><span class=\"n\">m.16205</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">SignType</span>\n         <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Preorder.mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">LinearOrder.toPartialOrder.1</span>\n</code></pre></div>\n<p>Basically, it looks like class eta allows us to make much more progress on a unification problem like <code>Foo.mk ... =?= Bar.toFoo ?instBar</code> that is ultimately not solvable because there is no such <code>?instBar</code> instance</p>",
        "id": 343220294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679344157
    }
]