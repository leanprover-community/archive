[
    {
        "content": "<p>This dot notation for <code>Multiplicative</code> no longer works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.TypeTags</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.toAdd</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- invalid field notation, function 'Multiplicative.toAdd' does not have argument with type (Multiplicative ...) that can be used, it must be explicit or implicit with a unique name</span>\n</code></pre></div>\n<p>and I find myself writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative.toAdd</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this expected?</p>",
        "id": 400129738,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699016560
    },
    {
        "content": "<p>This is the general issue with bundled morphisms not taking dot notation anymore. This is really annoying.</p>",
        "id": 400138163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699019732
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 400138289,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699019764
    },
    {
        "content": "<p>Have we made an RFC for this? Maybe the solution is to upstream something like FunLike, or an annotation on a type that says that 'this type should be coerced to a function to allow dot notation'</p>",
        "id": 400145274,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699021911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dot.20notation.20with.20Multiplicative/near/400145274\">said</a>:</p>\n<blockquote>\n<p>Have we made an RFC for this? Maybe the solution is to upstream something like FunLike, or an annotation on a type that says that 'this type should be coerced to a function to allow dot notation'</p>\n</blockquote>\n<p>RFC?</p>",
        "id": 400145357,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699021930
    },
    {
        "content": "<p><del>Reasonable Feature Cemetery</del> Request For Comment</p>",
        "id": 400145648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699022023
    },
    {
        "content": "<p>The <code>let</code> one is doing pretty well :)</p>",
        "id": 400147262,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699022540
    }
]