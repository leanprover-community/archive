[
    {
        "content": "<p>First, let me say that Aesop looks (very) cool!</p>\n<p>My broad question here is: when should a to-be-ported tactic be rewritten using Aesop?</p>\n<p>I noticed we ported <code>continuity</code> using Aesop, and from what I hear that seems to have worked very well. I was wondering which other tactics should be ported with Aesop under the hood, and how we can decide. Why use Aesop over a label attribute plus e.g. <code>solve_by_elim</code>, a <code>simp</code> wrapper, or a bespoke strategy in some given circumstance? What are the intended use cases that distinguish Aesop from other, similar strategies?</p>\n<p>While I’m curious about the general case, I did also have a particular question that motivated this: I was wondering whether <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.mono\">docs#tactic.interactive.mono</a> should be ported via Aesop. It’s got a few configuration options, and I was wondering if Aesop could support these (even if indirectly, under some wrapping). in particular, we have <code>mono left</code>, <code>mono right</code> and <code>mono</code>/<code>mono both</code> as attributes, not just <code>mono</code>, plus analogous tactic syntax to restrict to <code>left</code> or <code>right</code> rules. It also has <code>with …</code> syntax which helps <code>mono</code> choose which rules to use.</p>",
        "id": 338074420,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677369744
    },
    {
        "content": "<p>I had that idea as well and this was Jannis response:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985</a></p>",
        "id": 338076010,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677370918
    },
    {
        "content": "<p>Oh, I missed that message, thanks!</p>\n<p>Hmm. I wonder if it would be possible (and/or worth it) to pull the plumbing out of Aesop to just do a single <code>mono</code> call?</p>\n<p>I also wonder if it can replace non-terminal <code>mono*</code> calls (if that’s a thing).</p>\n<p>It would be nice to have a sort of dictionary of standard frameworks in lean/mathlib4 for rewriting expressions with rulesets; as-is I’m not sure what the tradeoffs of each method are.</p>",
        "id": 338076639,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677371349
    },
    {
        "content": "<p>I guess it is trivially possible to remove non-terminal <code>mono*</code> calls by using <code>have</code> more, which might be a good idea in itself</p>",
        "id": 338078590,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677372434
    },
    {
        "content": "<p>To answer the general question: any tactic that amounts to \"apply a collection of tactics exhaustively until the goal is solved\" is possibly a good fit for Aesop. The problem with <code>mono</code> is that it also does other things; in particular it doesn't necessarily aim to solve the goal.</p>",
        "id": 338298452,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677496394
    }
]