[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3684\">!4#3684</a> There are two kinds of <code>coeFn</code>s in this file. The first type is replaceable with <code>FunLike.coe</code>, but I don't know what to replace the second type by</p>",
        "id": 353385632,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682613343
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">strongUniformity.uniformAddGroup</span> <span class=\"o\">[</span><span class=\"n\">UniformSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">UniformAddGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">𝔖</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">UniformAddGroup</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">strongUniformity</span> <span class=\"n\">σ</span> <span class=\"n\">F</span> <span class=\"bp\">𝔖</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">UniformSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">strongUniformity</span> <span class=\"n\">σ</span> <span class=\"n\">F</span> <span class=\"bp\">𝔖</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">strongUniformity</span><span class=\"o\">,</span> <span class=\"n\">UniformSpace.replaceTopology_eq</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"n\">E</span> <span class=\"bp\">→ᵤ</span><span class=\"o\">[</span><span class=\"bp\">𝔖</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">coeFn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→ᵤ</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">uniformAddGroup_comap</span> <span class=\"n\">φ</span>\n</code></pre></div>",
        "id": 353386087,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682613403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> or maybe <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>  can you comment on this?</p>",
        "id": 353389003,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682613793
    },
    {
        "content": "<p>It should be defeq to <code>FunLike.coe</code>. <code>E →ᵤ F</code> is a type synonym for <code>E → F</code> with the topology of uniform convergence.</p>",
        "id": 353391880,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1682614192
    },
    {
        "content": "<p>I think the fix is the same as I offered this morning</p>",
        "id": 353407223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682616236
    },
    {
        "content": "<p>The fix was simply to use <code>FunLike.coe</code> (and add pointy brackets because of nested structures)</p>",
        "id": 353487804,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1682628748
    }
]