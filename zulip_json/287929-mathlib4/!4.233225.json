[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3225\">!4#3225</a> I need help with the calc part of the first theorem, it's too golfed</p>",
        "id": 346351541,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438450
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finSuccEquiv_apply</span><span class=\"o\">]</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Fin.cases</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">i</span>\n    <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 346351680,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438507
    },
    {
        "content": "<p>I already figured out what goes in <code>eval _ p</code>, but then Lean can't figure out the third underscore (the proof of that step)</p>",
        "id": 346351751,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438549
    },
    {
        "content": "<p>Isn't it because it's the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Fin.cases</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 346351829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680438588
    },
    {
        "content": "<p>I also observe that in mathlib3 extra goals are generated in the calc proof, but here I'm not sure how the rest of the proof links up with the second and last step in the <code>calc</code></p>",
        "id": 346351854,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438601
    },
    {
        "content": "<p>No, this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.cases</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Fin.cases</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">i</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">_</span>\n    <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">p</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>This is the mathlib3 proof for comparison:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">fin.cases</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">eval₂_hom_C</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">φ</span> <span class=\"n\">i</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_mul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_hom_X'</span><span class=\"o\">],</span>\n      <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">polynomial.eval_X</span><span class=\"o\">,</span> <span class=\"n\">fin.cases_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fin.succ_pred</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span> <span class=\"n\">fin.cases_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 346352409,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438857
    },
    {
        "content": "<p><code>eval (fun i =&gt; Fin.cases (eval x q) x i) p</code> is correct by the way (found by prodding in mathlib3)</p>",
        "id": 346352502,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438906
    },
    {
        "content": "<p><del>... because you didn't translate the <code>intro i</code>?</del> because you're filling in the wrong hole</p>",
        "id": 346352506,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680438907
    },
    {
        "content": "<p><code>_ = eval (fun i =&gt; Fin.cases (eval x q) x i) p := by intro i; exact Fin.cases (eval x q) x i</code> fails:<br>\n<code>tactic 'introN' failed, insufficient number of binders</code></p>",
        "id": 346352632,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680438966
    },
    {
        "content": "<p>Is the problem not just that mathlib4's <code>calc</code> doesn't generate goals for placeholders but instead asks you to fill them in straight away?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">eval₂_hom_C</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">φ</span> <span class=\"n\">i</span> <span class=\"n\">hφ</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_mul</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">eval₂_hom_X'</span><span class=\"o\">],</span>\n      <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">polynomial.eval_X</span><span class=\"o\">,</span> <span class=\"n\">fin.cases_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fin.succ_pred</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">polynomial.eval_C</span><span class=\"o\">,</span> <span class=\"n\">fin.cases_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>is the proof you're looking for.</p>",
        "id": 346353248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680439262
    },
    {
        "content": "<p>Doesn't using <code>?_</code> instead of <code>_</code> solve <code>calc</code> not generating goals?</p>",
        "id": 346354225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680439702
    },
    {
        "content": "<p>Right, using <code>?_</code> actually works</p>",
        "id": 346355197,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680440125
    },
    {
        "content": "<p>So I've just pushed a commit that makes the file compile, but I had to set <code>set_option maxHeartbeats 1000000</code> in there</p>",
        "id": 346357129,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680440862
    },
    {
        "content": "<p>Why do I need to set the heartbeat count so high?</p>",
        "id": 346357370,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680440978
    },
    {
        "content": "<p>or should I just leave it that way?</p>",
        "id": 346357841,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680441180
    },
    {
        "content": "<p>Please don't leave it that way if you can avoid it.</p>",
        "id": 346389722,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680454911
    },
    {
        "content": "<p>I don't think I can avoid it</p>",
        "id": 346401921,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680461683
    },
    {
        "content": "<p>In that case, just leave a PR comment on the PR pointing it out to a reviewer and asking them to try and remove it</p>",
        "id": 346402905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680462250
    },
    {
        "content": "<p>...it turns out I already did that</p>",
        "id": 346408074,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680465570
    }
]