[
    {
        "content": "<p>Here's my example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">unsafe</span> <span class=\"mi\">1</span><span class=\"bp\">%</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I expected this to succeed, since <code>linarith</code> closes the goal, and I was hoping that this could be a nice pattern to use in general (use aesop to make some logical steps, then linarith to close what's left). Why does this fail? And more generally, how could I have figured out myself why this fails?</p>",
        "id": 396380872,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697153027
    },
    {
        "content": "<p>seems you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">myLin</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">tactic</span> <span class=\"n\">unsafe</span> <span class=\"n\">myLin</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess <a href=\"https://github.com/JLimperg/aesop/issues/45\">https://github.com/JLimperg/aesop/issues/45</a> is what you are hoping for</p>",
        "id": 396382191,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697153795
    },
    {
        "content": "<p>That makes sense, thanks!</p>",
        "id": 396383429,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697154603
    },
    {
        "content": "<p>I can answer my two questions from earlier - it fails because I used the syntax wrongly, and I could have figured this out using the <code>trace.aesop</code> option.</p>",
        "id": 396383604,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697154709
    },
    {
        "content": "<p>But what did my <code>(add unsafe 1% linarith)</code> actually do, and should it have given an error?</p>",
        "id": 396383611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697154712
    },
    {
        "content": "<p>And I agree that having some nicer syntax for this would be nice, but the linked issue does describe why a general solution is more tricky than it appears</p>",
        "id": 396383799,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1697154820
    },
    {
        "content": "<p>So when I use <code>linarith</code> as you have done <del>(minus the <code>1%</code>)</del>  directly instead of <code>myLin</code> in Alex's solution, the following error is thrown:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">linarith</span> <span class=\"n\">was</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">i.e.</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">one</span> <span class=\"n\">of</span> <span class=\"n\">these</span> <span class=\"n\">types</span><span class=\"o\">:</span>\n  <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span>\n  <span class=\"n\">SimpleRuleTac</span>\n  <span class=\"n\">RuleTac</span>\n<span class=\"n\">However</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Lean.ParserDescr</span>\n</code></pre></div>",
        "id": 396384784,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697155417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Using.20finishing.20tactics.20inside.20aesop/near/396383611\">said</a>:</p>\n<blockquote>\n<p>But what did my <code>(add unsafe 1% linarith)</code> actually do, and should it have given an error?</p>\n</blockquote>\n<p>I am responding to this message.</p>",
        "id": 396385268,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697155644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Using.20finishing.20tactics.20inside.20aesop/near/396383611\">said</a>:</p>\n<blockquote>\n<p>But what did my <code>(add unsafe 1% linarith)</code> actually do, and should it have given an error?</p>\n</blockquote>\n<p>I think it tells aesop to use the statement named <code>linarith</code> (which does exist) as a rule, which is almost certainly junk, but not clearly wrong for type reasons</p>",
        "id": 396385725,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697155893
    },
    {
        "content": "<p>What Alex says. Extending the rule grammar so that you can give tactics directly (as well as <code>(add norm simp [&lt;- foo, bar])</code> and <code>(add safe apply foo x y z)</code>) is fairly high up on the todo list, but I need to figure out how to integrate this nicely with the rest of the grammar.</p>",
        "id": 396497572,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1697200633
    },
    {
        "content": "<p>Is <code>unsafe 1%</code> a reasonable configuration for an expensive finishing tactic like <code>linarith</code>? There is a sense in which it is vacuously safe because it never produces subgoals at all so can never produce unprovable ones..</p>",
        "id": 396530141,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697211768
    },
    {
        "content": "<p>I suppose part of the problem with marking it <code>safe</code> would be that it gets tried on every single goal, even the ones that aren't inequalities</p>",
        "id": 396530272,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697211825
    },
    {
        "content": "<p>I have no strong intuition about this, so we'd have to try it. Perhaps a separate <code>arith</code> rule set where <code>linarith</code> is <code>safe</code> could make sense, so you'd be able to use it only when the goal actually needs arithmetic. (I have some ideas for a tighter, more performant integration of <code>linarith</code> and <code>aesop</code>, but it's entirely vapourware so far.)</p>",
        "id": 396878070,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1697454171
    }
]