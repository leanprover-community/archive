[
    {
        "content": "<p>I would like to understand why there is an error in the following. The following is in mathlib4 Mathlib.Algebra.Category.Ring.Basic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.Ring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Localization.Away.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">localization_unit_isIso</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommRingCat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">CommRingCat.ofHom</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Localization.Away</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsIso.of_iso</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.toCommRingCatIso</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.toRingEquiv</span> <span class=\"o\">(</span><span class=\"n\">IsLocalization.atOne</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Localization.Away</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>Now, if we try to do the same but for semirings, it fails to identify the result from the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.Ring.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Localization.Away.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">localization_unit_isIso'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiRingCat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">CommSemiRingCat.ofHom</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Localization.Away</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsIso.of_iso</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.toCommSemiRingCatIso</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.toRingEquiv</span> <span class=\"o\">(</span><span class=\"n\">IsLocalization.atOne</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Localization.Away</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)))))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiRingCat</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n     <span class=\"n\">IsIso.of_iso</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.toCommSemiRingCatIso</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.toRingEquiv</span> <span class=\"o\">(</span><span class=\"n\">IsLocalization.atOne</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Localization.Away</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>Notice that the proof is correct, it just don't prove the assertion. </p>\n<p>Any help understanding this issue will be appreciated.</p>",
        "id": 407478062,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1702388504
    },
    {
        "content": "<p>You can use <code>by convert ...</code> to see the difference of the goal and the proof term you have.</p>",
        "id": 407479620,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702388969
    },
    {
        "content": "<p>In this case, it is because <code>RingEquiv.toCommSemiRingCatIso</code> actually gives an isomorphism in <code>SemiRingCat</code>. This should be fixed.</p>",
        "id": 407479800,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702389006
    },
    {
        "content": "<p>I see. I changed the definition of <code>RingEquiv.toCommSemiRingCatIso</code> and now it works.</p>",
        "id": 407481772,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1702389566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315546\">Xavier Xarles</span> has marked this topic as resolved.</p>",
        "id": 407482830,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702389800
    }
]