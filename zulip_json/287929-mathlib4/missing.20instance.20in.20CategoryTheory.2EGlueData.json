[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/3099\">mathlib4#3099</a>, I'm stumbling across </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">MultispanIndex.multispan</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"o\">(</span><span class=\"n\">mapGlueData</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Seems that lean4 is not able get that instance whie lean4 was? How should I add it?</p>",
        "id": 344549721,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1679775038
    },
    {
        "content": "<p><code>haveI</code>. We’ve had to do this elsewhere as well in some of the category theory files that have been ported</p>",
        "id": 344551729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679776483
    },
    {
        "content": "<p>I thought that Lean 3 <code>haveI</code> is lean 4 <code>have</code>?</p>",
        "id": 344551789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776522
    },
    {
        "content": "<p><code>have</code> works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gluedIso</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">D.glued</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">D.mapGlueData</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glued</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">MultispanIndex.multispan</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"o\">(</span><span class=\"n\">mapGlueData</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">preservesColimitIso</span> <span class=\"n\">F</span> <span class=\"n\">D.diagram.multispan</span> <span class=\"bp\">≪≫</span> <span class=\"n\">Limits.HasColimit.isoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">D.diagramIso</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 344551879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776566
    },
    {
        "content": "<p>Lean 4 <code>haveI</code> means something else (<code>I</code> for inline, not instance)</p>",
        "id": 344551915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776597
    },
    {
        "content": "<p>Yeah, I know. But i was under the impression that inlining is still preferable in such cases. Maybe a TC expert can chime in</p>",
        "id": 344551991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679776645
    },
    {
        "content": "<p>oh lol sorry for adding to the confusion then :-) I have no idea what inline even means.</p>",
        "id": 344552012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776667
    },
    {
        "content": "<p>It means not creating a <code>let</code> binding.</p>",
        "id": 344552175,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679776740
    },
    {
        "content": "<p>The terms produced are indeed different with have and haveI (at least with pp.all on)</p>",
        "id": 344552231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776787
    },
    {
        "content": "<p>yeah but the problem is that I don't know what a let binding is either :-/</p>",
        "id": 344552316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776816
    },
    {
        "content": "<p>indeed with pp.all off the diff is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span>   <span class=\"n\">let_fun</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">MultispanIndex.multispan</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"o\">(</span><span class=\"n\">mapGlueData</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">))))</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 344552477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776943
    },
    {
        "content": "<p>So if <code>have</code> adds some random junk to the term, is there ever a use case where <code>have</code> is better than <code>haveI</code>?</p>",
        "id": 344552524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679776993
    },
    {
        "content": "<p>You can think of it as a local definition. <code>let y := f x in (y, y)</code> is defeq to <code>(f x, f x)</code> but only after <em>inlining</em> the <code>let</code> binding. So the difference is not about defeq but about <em>computation</em>. I'm not actually sure what Lean 4 does here, but a reasonable thing to expect would be that <code>(f x, f x)</code> computes <code>f x</code> twice, while <code>let y := f x in (y, y)</code> computes it only once.</p>",
        "id": 344552535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679777006
    },
    {
        "content": "<p>Wait -- are you saying they're <em>not</em> defeq?</p>",
        "id": 344552633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777056
    },
    {
        "content": "<p>They are defeq! but (potentially, don't quote me) not computationally identical.</p>",
        "id": 344552658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679777081
    },
    {
        "content": "<p>yeah this is all a bit CS for me. I'm not sure I have any feeling for how many times something gets computed. Thanks!</p>",
        "id": 344552709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777110
    },
    {
        "content": "<p>Still interested to know why <code>have</code> is ever better than <code>haveI</code></p>",
        "id": 344552731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344552524\">said</a>:</p>\n<blockquote>\n<p>So if <code>have</code> adds some random junk to the term, is there ever a use case where <code>have</code> is better than <code>haveI</code>?</p>\n</blockquote>\n<p>This question can basically be rephrased as \"Why do we need definitions in mathematics? Can't we just write strings of symbols from the axioms?\"</p>",
        "id": 344552752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679777143
    },
    {
        "content": "<p><code>have</code> v <code>haveI</code> -- Oh I see -- you just answered this</p>",
        "id": 344552756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344552524\">said</a>:</p>\n<blockquote>\n<p>So if <code>have</code> adds some random junk to the term, is there ever a use case where <code>have</code> is better than <code>haveI</code>?</p>\n</blockquote>\n<p>I wouldn't call it either random or junk. <code>let_fun x := v; w</code> is syntactic sugar for <code>(fun x =&gt; w) v</code>. It's how Lean 4 implements <code>have</code>. See how <code>w</code> gets <code>x</code> but not the value of <code>v</code> itself.</p>\n<p><code>haveI</code> is the same as doing beta reduction of <code>let_fun</code> Think about what happens if <code>x</code> appears multiple times and you have multiple levels of <code>haveI</code>s: your proof becomes exponentially big relative to the number of <code>haveI</code>s.</p>",
        "id": 344552864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679777200
    },
    {
        "content": "<p>So this is all about implementation issues, basically, which is something I've resolutely ignored ever since I joined this community. I'm just grateful that there are many people here who do understand them!</p>",
        "id": 344552996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777300
    },
    {
        "content": "<p>Then again, <code>haveI</code> is apparently how Lean 3's <code>have</code> worked (<a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342071291\">a little experiment</a>)</p>",
        "id": 344553012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679777317
    },
    {
        "content": "<p>So in that example I have absolutely no feeling about which is better out of <code>2 + 2 + (2 + 2) + (2 + 2 + (2 + 2))</code> and <code>let_fun n := 2; let_fun n' := n + n; let_fun n'' := n' + n'; let_fun n''' := n'' + n''; n'''</code>.</p>",
        "id": 344553068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777398
    },
    {
        "content": "<p>They're just the same thing as far as I can see.</p>",
        "id": 344553125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344552175\">said</a>:</p>\n<blockquote>\n<p>It means not creating a <code>let</code> binding.</p>\n</blockquote>\n<p>To be clear, neither <code>have</code> nor <code>haveI</code> make <code>let</code> expressions. In a <code>let</code> expression, the body has access to the value itself for the variable that's defined. With <code>have</code>/<code>haveI</code>/<code>let_fun</code>, it doesn't.</p>",
        "id": 344553137,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679777426
    },
    {
        "content": "<p>Does it depend on context as to which is \"better\"?</p>",
        "id": 344553158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777444
    },
    {
        "content": "<p>in any case, I have now fixed it by using <code>have : HasColimit (MultispanIndex.multispan (diagram (mapGlueData D F))) := inferInstance</code>, in the two lemma where it was needed.<br>\nThanks everybody!</p>",
        "id": 344553313,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1679777555
    },
    {
        "content": "<p>well apparenly you should be using <code>haveI</code> :-)</p>",
        "id": 344553330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679777572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344553125\">said</a>:</p>\n<blockquote>\n<p>They're just the same thing as far as I can see.</p>\n</blockquote>\n<p>Asymptotically the <code>let_fun</code> seems like it's better, since if you keep nesting it you'll otherwise have exponentially many <code>2</code>'s. Whether this matters practice for elaboration I have no idea.</p>",
        "id": 344553502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679777709
    },
    {
        "content": "<p><code>have</code> it is then...</p>",
        "id": 344553755,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1679777912
    },
    {
        "content": "<p>With <code>haveI</code> the term <code>gluedIso</code>when printed out in full is 16K. With <code>have</code> it is 20K.  Is this an argument for <code>haveI</code>?</p>",
        "id": 344554226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679778201
    },
    {
        "content": "<p>Or is it an argument against printing them out?</p>",
        "id": 344554245,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679778236
    },
    {
        "content": "<p>Printing can be misleading, since subterms might be re-used, and there's some sort of cache so that things can be computed just once (though I'm not sure how this works or where it applies). As a user it looks like a term is a tree-like structure, but it's actually stored as a directed acyclic graph.</p>",
        "id": 344554421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679778369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344553068\">said</a>:</p>\n<blockquote>\n<p>So in that example I have absolutely no feeling about which is better out of <code>2 + 2 + (2 + 2) + (2 + 2 + (2 + 2))</code> and <code>let_fun n := 2; let_fun n' := n + n; let_fun n'' := n' + n'; let_fun n''' := n'' + n''; n'''</code>.</p>\n</blockquote>\n<p>The second one requires you to call <code>dsimp</code> in order to get to the poof state with the 2s</p>",
        "id": 344556576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679779914
    },
    {
        "content": "<p>So for definitions you want to prove things about, inlining everything can save you some cleanup at the start of a proof</p>",
        "id": 344556643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679779954
    },
    {
        "content": "<p>Which one has been inlined? (I don't know the meaning of the word)</p>",
        "id": 344556651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679779969
    },
    {
        "content": "<p>The inlined version of <code>let x := 2 in f x</code> is <code>f 2</code>; (the value of) <code>x</code> has been \"inlined\"</p>",
        "id": 344557056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679780304
    },
    {
        "content": "<p>so \"inlined\" means \"substituted in\". Thanks!</p>",
        "id": 344557100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679780342
    },
    {
        "content": "<p>And I guess presumably the point is that inlining doesn't change things up to definitional equality but does change them up to syntactic equality. Thanks, this has been instructive. The only confusion I have left is why the inlined term in the original example above is far smaller than the outlined one; I would have thought that inlining essentially always makes terms bigger.</p>",
        "id": 344557247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679780468
    },
    {
        "content": "<p>It doesn't really matter in category theory, I guess, since we use <code>dsimp</code> with impunity.</p>",
        "id": 344557258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679780484
    },
    {
        "content": "<p>A slighlty more mundane argument in favor of <code>haveI</code> over <code>have</code> is that the linter does not complain. It does complain for <code>have</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/4521142492/jobs/7962715755?pr=3099\">https://github.com/leanprover-community/mathlib4/actions/runs/4521142492/jobs/7962715755?pr=3099</a><br>\nSo I changed it back to <code>haveI</code></p>",
        "id": 344557650,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1679780778
    },
    {
        "content": "<p>That is a surprising error for me! If the <code>have</code> term is not actually used by the main term then typeclass inference wouldn't have complanied when it couldn't find the <code>have</code> term!</p>",
        "id": 344557983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679781043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> we were just talking about this over breakfast. Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.GlueData</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory.GlueData</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">GlueData</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">D.J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PreservesLimit</span> <span class=\"o\">(</span><span class=\"n\">cospan</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">HasMulticoequalizer</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">D</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">PreservesColimit</span> <span class=\"o\">(</span><span class=\"n\">MultispanIndex.multispan</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">hasColimit_multispan_comp</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">hasColimit_mapGlueData_diagram</span>\n\n<span class=\"sd\">/-- a docstring -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gluedIso'</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">D.glued</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">D.mapGlueData</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glued</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">MultispanIndex.multispan</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"o\">(</span><span class=\"n\">mapGlueData</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">preservesColimitIso</span> <span class=\"n\">F</span> <span class=\"n\">D.diagram.multispan</span> <span class=\"bp\">≪≫</span> <span class=\"n\">Limits.HasColimit.isoOfNatIso</span> <span class=\"o\">(</span><span class=\"n\">D.diagramIso</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `unusedHavesSuffices` linter reports:</span>\n<span class=\"cm\">THE FOLLOWING DECLARATIONS HAVE INEFFECTUAL TERM MODE HAVE/SUFFICES BLOCKS.</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">#check @gluedIso' /- unnecessary have this : HasColimit (MultispanIndex.multispan (diagram (mapGlueData D F)))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The problem goes away with <code>haveI</code>.</p>",
        "id": 360552810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684852715
    },
    {
        "content": "<p>If you instead write <code>have foo : HasColimit...</code> then a second linter complains: <code>unused variable </code>foo<code> [linter.unusedVariables]</code>. But if you comment it out the declaration breaks.</p>",
        "id": 360553286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684852805
    },
    {
        "content": "<p>wicked <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 360554303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684853020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20instance.20in.20CategoryTheory.2EGlueData/near/344553502\">said</a>:</p>\n<blockquote>\n<p>Asymptotically the <code>let_fun</code> seems like it's better, since if you keep nesting it you'll otherwise have exponentially many <code>2</code>'s. Whether this matters practice for elaboration I have no idea.</p>\n</blockquote>\n<p>Don't try to read too much into the term size.  Too much fun makes the performance tank.  For example, if you traverse a let-fun you need to create a free variable (this is expensive) and then substitute it for the bound variable (this is even more expensive).  Meanwhile, pretty much all operations use caches that make expressions behave daglike in practice.  I would recommend to always use haveI/letI over have/let in theorem statements, unless it severely hurts readability (of the goal state).</p>",
        "id": 360640005,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684876472
    },
    {
        "content": "<p>And if you actually need to construct exponentially-sized terms, I think it's best to introduce a definition for it (where you can control unfolding).  Like <code>2^n</code>.</p>",
        "id": 360640297,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684876584
    }
]