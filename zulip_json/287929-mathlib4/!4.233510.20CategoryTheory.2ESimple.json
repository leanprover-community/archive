[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3510\">!4#3510</a> Two errors remain in this file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">indecomposable_of_simple</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Simple</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Indecomposable</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Simple.not_isZero</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">or_iff_not_imp_left.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsZero.iff_isSplitMono_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">biprod.inl</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span> <span class=\"bp\">⊞</span> <span class=\"n\">Z</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">change</span> <span class=\"n\">biprod.inl</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Simple.mono_isIso_iff_nonzero</span> <span class=\"n\">biprod.inl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- here</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">biprod.is_iso_inl_iff_is_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">simple.of_iso</span> <span class=\"n\">i.symm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">infer_instance</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Simple.lean</span><span class=\"o\">:</span><span class=\"mi\">214</span><span class=\"o\">:</span><span class=\"mi\">10</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Simple</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.27073</span> <span class=\"bp\">⊞</span> <span class=\"bp\">?</span><span class=\"n\">m.27074</span><span class=\"o\">)</span>\n<span class=\"n\">Simple.lean</span><span class=\"o\">:</span><span class=\"mi\">214</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.28551</span>\n<span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">Preadditive</span> <span class=\"n\">C</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">HasBinaryBiproducts</span> <span class=\"n\">C</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Simple</span> <span class=\"n\">X</span>\n<span class=\"n\">YZ</span><span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Y</span> <span class=\"bp\">⊞</span> <span class=\"n\">Z</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">biprod.inl</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">IsZero</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>how do I fix them? (<img alt=\":eta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/37966.png\" title=\"eta\"> doesn't work)</p>",
        "id": 350856852,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681842317
    },
    {
        "content": "<p>(.)</p>",
        "id": 350876019,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681848543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span>   This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">indecomposable_of_simple</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Simple</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Indecomposable</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Simple.not_isZero</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">or_iff_not_imp_left.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IsZero.iff_isSplitMono_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">biprod.inl</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span> <span class=\"bp\">⊞</span> <span class=\"n\">Z</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">change</span> <span class=\"n\">biprod.inl</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Simple</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⊞</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Simple.of_iso</span> <span class=\"n\">i.symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Simple.mono_isIso_iff_nonzero</span> <span class=\"n\">biprod.inl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Biprod.isIso_inl_iff_isZero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 352858551,
        "sender_full_name": "Jürgen Bergmann",
        "timestamp": 1682524511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363199\">@Jürgen Bergmann</span> I already committed that fix, thanks</p>",
        "id": 352858792,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1682524539
    }
]