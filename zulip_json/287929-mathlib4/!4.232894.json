[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2894\">!4#2894</a> The mathlib3 code for the last function here works almost perfectly after correcting names. <strong>The exception is</strong> that Lean 4 cannot infer the instance <code>CharP R p</code> for the last few lines despite it already being encoded as a hypothesis <code>hp</code> (Lean 3 can). How can I \"extract\" the instance from the hypothesis?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">expChar_is_prime_or_one</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">ExpChar</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or_iff_not_imp_right.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">CharP.exists</span> <span class=\"n\">R</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n    <span class=\"c1\">-- ...</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_eq_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">char_eq_expChar_iff</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">char_prime_of_ne_zero</span> <span class=\"n\">R</span> <span class=\"n\">p_ne_zero</span><span class=\"o\">)</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">CharP.char_is_prime_or_zero</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">pprime</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">p_eq_q</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">pprime</span>\n    <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>I have provisionally included <code>CharP R p</code> up top as an explicit instance to illustrate my point</p>",
        "id": 341956160,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678853828
    },
    {
        "content": "<p>Trying to apply what I learned from <a href=\"https://github.com/leanprover-community/mathlib4/pull/2813\">!4#2813</a></p>",
        "id": 341956418,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678854120
    },
    {
        "content": "<p>I would guess <code>etaExperiment</code> might be relevant here</p>",
        "id": 341987504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678868939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/341987504\">said</a>:</p>\n<blockquote>\n<p>I would guess <code>etaExperiment</code> might be relevant here</p>\n</blockquote>\n<p>tried that, doesn't change anything, still errors out</p>",
        "id": 341992117,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678870367
    },
    {
        "content": "<p>Thanks for working on this. I just had a quick look and I think the issue was that we don't have <code>casesI</code> (yet?). I pushed a commit which I believe should fix the build.</p>",
        "id": 342004826,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678873965
    },
    {
        "content": "<p>Am I imagining that Lean 4 did away with the instance cache and that therefore casesI isn't needed?</p>",
        "id": 342006022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678874263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342004826\">said</a>:</p>\n<blockquote>\n<p>Thanks for working on this. I just had a quick look and I think the issue was that we don't have <code>casesI</code> (yet?). I pushed a commit which I believe should fix the build.</p>\n</blockquote>\n<p>oh, I didn't know <code>haveI</code> existed in Lean 4 at all, thanks</p>",
        "id": 342006613,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678874404
    },
    {
        "content": "<p>Lean 4's <code>haveI</code> does not mean the same thing as Lean 3's <code>haveI</code></p>",
        "id": 342006742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678874447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342006022\">said</a>:</p>\n<blockquote>\n<p>Am I imagining that Lean 4 did away with the instance cache and that therefore casesI isn't needed?</p>\n</blockquote>\n<p>Yes to the second part, no to the first. Lean 4 didn't do away with the instance cache, it now effectively calls <code>resetI</code> whenever the local context changes at all. Some internals had to be changed to make this performant enough</p>",
        "id": 342010171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678875389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342006742\">said</a>:</p>\n<blockquote>\n<p>Lean 4's <code>haveI</code> does not mean the same thing as Lean 3's <code>haveI</code></p>\n</blockquote>\n<p>Can you elaborate on this?</p>",
        "id": 342010273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678875422
    },
    {
        "content": "<p>It's now \"I\" for \"inline\" rather than \"instance cache\". I still don't know what that means in practice</p>",
        "id": 342010573,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678875498
    },
    {
        "content": "<p>12 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/tactic.20documentation\">#mathlib4 &gt; tactic documentation</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 342011939,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678875865
    },
    {
        "content": "<p>The difference is that <code>have x : Nat := 0; exact Nat.succ x</code> expands to <code>(fun x =&gt; Nat.succ x) 0</code> while <code>haveI x : Nat := 0; exact Nat.succ x</code> expands to <code>Nat.succ 0</code></p>",
        "id": 342012916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678876104
    },
    {
        "content": "<p>so lean 3 tactic <code>let</code> is lean 4 <code>have</code>? I hadn't realised this.</p>",
        "id": 342030192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678880580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> it seems that <code>have : CharP R p := hp</code> also works! I find this quite bizarre -- the claim seems to be that now Lean 4 doesn't need lean 3 <code>haveI</code> because the cache is reset, but the PR in its broken state before you inserted the haveI line seems to be an explicit counterexample to this. We have <code>hp</code> explicitly in the local context and the <code>have</code> line just adds it a second time, which magically fixes all the problems. This looks to me like a bug in the instance cache generation system?</p>",
        "id": 342031057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678880807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342030192\">said</a>:</p>\n<blockquote>\n<p>so lean 3 tactic <code>let</code> is lean 4 <code>have</code>? I hadn't realised this.</p>\n</blockquote>\n<p>No, <code>let</code> and <code>have</code> are still different and the distinction is the same as in lean 3</p>",
        "id": 342033724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678881512
    },
    {
        "content": "<p>the only difference with <code>haveI</code> is the resulting term after elaboration. You still cannot make use of a defeq <code>x = 0</code> after <code>haveI x := 0</code></p>",
        "id": 342033925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678881572
    },
    {
        "content": "<p>The behavior you describe sounds like an instability in the instance search mechanism, e.g. putting it last makes it take a different path</p>",
        "id": 342034243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678881650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342030192\">said</a>:</p>\n<blockquote>\n<p>so lean 3 tactic <code>let</code> is lean 4 <code>have</code>? I hadn't realised this.</p>\n</blockquote>\n<p>I think the confounding thing is that there's two different <code>have</code>s in Lean3 -  <code>have</code> in tactic mode, iirc, does just do the inlining process that Lean4 <code>haveI</code> does. However, there's a _term-mode_ <code>have</code> which is different, and is like lean4's <code>have</code> tactic.</p>",
        "id": 342058243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1678887206
    },
    {
        "content": "<p>Huh, I'd never realized this about Lean 3's <code>have</code> tactic. I'd always thought it worked just the same way as the <code>have</code> expression, but I'd never checked.</p>\n<p>Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo''</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n''</span> <span class=\"o\">:=</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">n'''</span> <span class=\"o\">:=</span> <span class=\"n\">n''</span> <span class=\"bp\">+</span> <span class=\"n\">n''</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n'''</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo''</span>\n<span class=\"c1\">-- def foo'' : ℕ :=</span>\n<span class=\"c1\">-- 2 + 2 + (2 + 2) + (2 + 2 + (2 + 2))</span>\n</code></pre></div>\n<p>Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo''</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"k\">have</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">n''</span> <span class=\"o\">:=</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span>\n  <span class=\"k\">have</span> <span class=\"n\">n'''</span> <span class=\"o\">:=</span> <span class=\"n\">n''</span> <span class=\"bp\">+</span> <span class=\"n\">n''</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n'''</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo''</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def foo'' : Nat :=</span>\n<span class=\"cm\">let_fun n := 2;</span>\n<span class=\"cm\">let_fun n' := n + n;</span>\n<span class=\"cm\">let_fun n'' := n' + n';</span>\n<span class=\"cm\">let_fun n''' := n'' + n'';</span>\n<span class=\"cm\">n'''</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(<code>let_fun x := v; w</code> is syntactic sugar for <code>(fun x =&gt; w) v</code>)</p>",
        "id": 342071291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678890025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342010171\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.232894/near/342006022\">said</a>:</p>\n<blockquote>\n<p>Am I imagining that Lean 4 did away with the instance cache and that therefore casesI isn't needed?</p>\n</blockquote>\n<p>Yes to the second part, no to the first. Lean 4 didn't do away with the instance cache, it now effectively calls <code>resetI</code> whenever the local context changes at all. Some internals had to be changed to make this performant enough</p>\n</blockquote>\n<p>So is the following a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Cases</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_foo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">exists_foo</span> <span class=\"k\">with</span> <span class=\"n\">T</span> <span class=\"n\">hT</span>\n  <span class=\"c1\">-- `hT : Foo T`</span>\n  <span class=\"c1\">-- have : Foo T := inferInstance -- fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">hT</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 342076547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678891169
    },
    {
        "content": "<p>I would guess that this is a bug with <code>cases'</code> but I can't say for sure. Of course, Mario will be able to tell immediately.</p>",
        "id": 342083377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678892543
    },
    {
        "content": "<p>This seems to affect <code>cases</code> too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_foo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exists_foo</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">T</span> <span class=\"n\">hT</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">hT</span> <span class=\"c1\">-- delete to get error in next line</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 342083551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678892581
    },
    {
        "content": "<p>both <code>rcases</code> and <code>obtain</code> work perfectly fine.</p>",
        "id": 342084150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678892683
    },
    {
        "content": "<p>Based on this evidence I would guess <code>cases</code> is at fault. <code>rcases</code> is most likely saved because it constructs some intermediates using <code>have</code></p>",
        "id": 342087992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678893498
    },
    {
        "content": "<p>Together with <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I figured out what causes this. </p>\n<ul>\n<li><code>cases</code> and <code>cases'</code> both call <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lean.MVarId.introN\">docs#Lean.MVarId.introN</a></li>\n<li><code>introN</code> (via <code>introNImp</code>) calls <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withNewLocalInstances#doc\">docs4#Lean.Meta.withNewLocalInstances</a> that checks whether certain fvars are classes using two methods <code>isClassQuick?</code> and <code>isClassExpensive?</code>. These two functions both have some support dealing with metavariables, but it makes the wrong decision in certain cases, not recognizing that <code>Foo T</code> is a class in Kyle's latest example. We tested that <a href=\"https://github.com/leanprover/lean4/compare/master...fpvandoorn:lean4:isClassMVarChange\">this fix</a> fixes Kyle's latest example. Is a PR with this change welcome?</li>\n</ul>",
        "id": 342121059,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678900792
    },
    {
        "content": "<p>Seems like it would be worth making a PR with this fix. It may sit on the queue for a little while still.</p>",
        "id": 342999495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679267754
    }
]