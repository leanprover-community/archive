[
    {
        "content": "<p>Hello</p>\n<p>I do not understand why the first example works and the second is not. It seems that <code>rw [Function.comp]</code> does not have the same behavior if mathlib is imported or not. Is it intended ?</p>\n<p>Without Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>        <span class=\"c1\">-- ⊢ ∀ (x : α), (id ∘ f) x = f x</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>             <span class=\"c1\">-- x: α</span>\n                      <span class=\"c1\">-- ⊢ (id ∘ f) x = f x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span>  <span class=\"c1\">-- ⊢ id (f x) = f x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">]</span>             <span class=\"c1\">-- No goals</span>\n</code></pre></div>\n<p>And with Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>        <span class=\"c1\">-- ⊢ ∀ (x : α), (id ∘ f) x = f x</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>             <span class=\"c1\">-- x: α</span>\n                      <span class=\"c1\">-- ⊢ (id ∘ f) x = f x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span>  <span class=\"c1\">-- ⊢ (fun x ↦ id (f x)) x = f x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">]</span>             <span class=\"c1\">-- failed to rewrite using equation theorems for 'id'</span>\n</code></pre></div>",
        "id": 405450522,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701471446
    },
    {
        "content": "<p>mathlib overrides the equation theorems for <code>Function.comp</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/42649c4da2724d1aa86b8dab06079db71daf1a84//Mathlib/Init/Function.lean#L27\">right here</a> to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.comp_def#doc\">docs#Function.comp_def</a> because the default for equation lemmas -- after a change to Lean in the last couple months -- is that they only apply to fully-applied functions (like <code>(id ∘ f) x</code>), but for operators like composition, you want to be able to rewrite the composition itself (like <code>id ∘ f</code>).</p>\n<p>(Pinging <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> about upstreaming this to std, since there was talk about this when the equation theorem was changed)</p>\n<p>A workaround is to use <code>unfold</code>. You can use <code>unfold id</code> instead of <code>rw [id]</code>.</p>",
        "id": 405451927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701472004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nThanks for your answer, but to be honest I am not sure I completely understand it.</p>",
        "id": 405453314,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701472825
    },
    {
        "content": "<p>With Mathlib imported, if I want to transform <code>(g ∘ f) x</code> into <code>g (f x)</code>, how can I do that ?</p>",
        "id": 405453316,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701472828
    },
    {
        "content": "<p>You use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.comp_apply#doc\">docs#Function.comp_apply</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ g (f x) = y</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405453399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701472919
    },
    {
        "content": "<p>Generally speaking, mathlib is designed where you rewrite using theorems, and you are not expected to unfold definitions.</p>",
        "id": 405453486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701472970
    },
    {
        "content": "<p>Ho I see. I am doing really basic stuffs: my ultimate goal is to teach some basic formalization to undergraduate students. So I need to unfold if I want to prove stuffs about functions (like <code>id ∘ f = f</code>) . I can try do to it without Mathlib, but it has some nice tactics... Not sure what will be the best choice at the end !</p>",
        "id": 405454058,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701473413
    },
    {
        "content": "<p>Thanks anyway !</p>",
        "id": 405454073,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1701473431
    },
    {
        "content": "<p>I mentioned it as a workaround earlier, but really I'd suggest using <code>unfold</code> if you're unfolding rather than <code>rw</code></p>",
        "id": 405454312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701473625
    },
    {
        "content": "<p>Well, I suppose that can potentially introduce <code>fun</code> terms, but you can follow that up with <code>dsimp only</code></p>",
        "id": 405454487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701473721
    }
]