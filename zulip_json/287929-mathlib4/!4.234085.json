[
    {
        "content": "<p>I am having trouble in <code>Analysis.SpecialFunctions.Pow.Real</code> because of some automatic unwanted coercion. More precisely, once <code>Pow ℝ ℝ</code> has been defined, all the integers exponents are coerced to real exponents, eg. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">pow_succ</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rpow</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">pow_succ</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Indeed, in the second example, the goal is now : <code>x ^ (↑n + 1) = x * x ^ ↑n</code>. Writing <code>x ^ (n : ℕ)</code> does not help, it is still changed automatically to <code>x ^ ↑n</code>. I tried to change the priority of the instance but that did not help either.</p>",
        "id": 359568549,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684482525
    },
    {
        "content": "<p>I got the same with complex powers and the only thing I found that worked was using <code>HPow.hPow</code> directly instead of <code>^</code></p>",
        "id": 359568823,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684482616
    },
    {
        "content": "<p>I didn't look hard, though</p>",
        "id": 359568849,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684482624
    },
    {
        "content": "<p>What about with integer powers of integers?  Same issue?</p>",
        "id": 359568917,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684482649
    },
    {
        "content": "<p>One thing I thought of but didn't try was replacing the <code>Pow</code> instance by a <code>HPow</code> instance</p>",
        "id": 359569049,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684482686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359568917\">said</a>:</p>\n<blockquote>\n<p>What about with integer powers of integers?  Same issue?</p>\n</blockquote>\n<p>No, that still works</p>",
        "id": 359569152,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684482719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359569049\">said</a>:</p>\n<blockquote>\n<p>One thing I thought of but didn't try was replacing the <code>Pow</code> instance by a <code>HPow</code> instance</p>\n</blockquote>\n<p>You mean this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rpow</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I doesn't solve anything. I have the same issue after the change.</p>",
        "id": 359570189,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684482982
    },
    {
        "content": "<p>Does <code>x ^ (n + 1 : \\N)</code> work? This is pretty horrible. Why would lean coerce to reals without looking for an instance for naturals first?</p>",
        "id": 359570691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684483106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359570691\">said</a>:</p>\n<blockquote>\n<p>Does <code>x ^ (n + 1 : \\N)</code> work?</p>\n</blockquote>\n<p>No. For</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I still get <code>x ^ ↑(n + 1) = x * x ^ ↑n</code> as goal.</p>",
        "id": 359571147,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684483204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359569152\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359568917\">said</a>:</p>\n<blockquote>\n<p>What about with integer powers of integers?  Same issue?</p>\n</blockquote>\n<p>No, that still works</p>\n</blockquote>\n<p>I guess actually there's no confusion here, integer powers require a group-with-zero, which the integers aren't.</p>",
        "id": 359571327,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684483248
    },
    {
        "content": "<p>Shouldn't they only require a <code>div_inv_monoid</code> or something like that?</p>",
        "id": 359571718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684483325
    },
    {
        "content": "<p>Still <code>ℤ</code> is not an instance of that, of course</p>",
        "id": 359571777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684483341
    },
    {
        "content": "<p>This is Xavier's problem, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">A</span> <span class=\"n\">Nat</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- @HPow.hPow.{0, 0, 0} A Nat A instHPowANat a (@OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) : A</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- @HPow.hPow.{0, 0, 0} A A A instHPowA a (@OfNat.ofNat.{0} A 4 (instOfNatA 4)) : A</span>\n</code></pre></div>",
        "id": 359572562,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684483524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359570189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359569049\">said</a>:</p>\n<blockquote>\n<p>One thing I thought of but didn't try was replacing the <code>Pow</code> instance by a <code>HPow</code> instance</p>\n</blockquote>\n<p>You mean this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rpow</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I doesn't solve anything. I have the same issue after the change.</p>\n</blockquote>\n<p>Too bad</p>",
        "id": 359574606,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684484010
    },
    {
        "content": "<p>This should probably move to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 359612467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684492475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359612467\">said</a>:</p>\n<blockquote>\n<p>This should probably move to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>\n</blockquote>\n<p>Should I post a copy of my original message there? It is probably better if <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  posts her <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 359666282,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684503946
    },
    {
        "content": "<p>Note that in <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'s mwe the expression <code>#check a ^ (4 : Nat)</code> uses the intended instance, so it doesn't capture the exact behavior in the wild.</p>",
        "id": 359668586,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684504484
    },
    {
        "content": "<p>This captures the full problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NatCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTail</span> <span class=\"n\">Nat</span> <span class=\"n\">R</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">NatCast.natCast</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">Nat</span> <span class=\"n\">R</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">NatCast.natCast</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">NatCast</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">natCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- @HPow.hPow.{0, 0, 0} Real Nat Real instHPowRealNat a (@OfNat.ofNat.{0} Nat 4 (instOfNatNat 4)) : Real</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span>\n<span class=\"c1\">-- @HPow.hPow.{0, 0, 0} Real Real Real instHPowReal a (@OfNat.ofNat.{0} Real 4 (instOfNatReal 4)) : Real</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- @HPow.hPow.{0, 0, 0} Real Real Real instHPowReal a (@NatCast.natCast.{0} Real natCast (@OfNat.ofNat.{0} Nat 4 (instOfNatNat 4))) : Real</span>\n</code></pre></div>",
        "id": 359674465,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684505615
    },
    {
        "content": "<p>I think I know what's going on. The notation <code>^</code> is declared as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>binop%</code> is a special elaborator that elaborates binary operations, and can insert casts to either argument. Removing this elaborator fixes this issue.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NatCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTail</span> <span class=\"n\">Nat</span> <span class=\"n\">R</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">NatCast.natCast</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">Nat</span> <span class=\"n\">R</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">NatCast.natCast</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">NatCast</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">natCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Nat instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Nat instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- Nat instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"c1\">-- Real instance</span>\n</code></pre></div>",
        "id": 359675135,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684505737
    },
    {
        "content": "<p>However, using that macro globally doesn't work, since we need some of the functionality of <code>binop%</code> in other places. So a full fix is nontrivial, and might require defining a variant of <code>binop%</code>. <br>\nAs a workaround, you can add the following line on top of file/section that experiences this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359679045,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684506514
    },
    {
        "content": "<p>Here is a regression that you would have with this local macro rule:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Classes.Cast</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ℝ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">NatCast</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span> <span class=\"n\">natCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">Nat</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">default</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Real ^ Nat instance</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Real ^ Real instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- Real ^ Real instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"c1\">-- Real ^ Real instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"c1\">-- Nat ^ Nat instance</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">default</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">local_macro_rules</span>\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Real ^ Nat instance</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HPow</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Real ^ Nat instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- Real ^ Nat instance</span>\n<span class=\"k\">#check</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"c1\">-- Real ^ Real instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"c1\">-- fails to find any instance, needs to know the type of `k`</span>\n<span class=\"kd\">end</span> <span class=\"n\">local_macro_rules</span>\n</code></pre></div>",
        "id": 359682184,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684507171
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a> to record this issue.</p>",
        "id": 359685491,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684507838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359679045\">said</a>:</p>\n<blockquote>\n<p>However, using that macro globally doesn't work, since we need some of the functionality of <code>binop%</code> in other places. So a full fix is nontrivial, and might require defining a variant of <code>binop%</code>. <br>\nAs a workaround, you can add the following line on top of file/section that experiences this issue:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, that helps a lot!</p>",
        "id": 359686286,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684508011
    },
    {
        "content": "<p>Presumably <code>binop%</code> has a preference for <code>A -&gt; A -&gt; A</code>, and so we want a custom elaborator with a preference for <code>A -&gt; B -&gt; A</code> (for pow) and <code>A -&gt; B -&gt; B</code> (for smul)</p>",
        "id": 359689121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508581
    },
    {
        "content": "<p>The only problems left in this file are for the <code>Tactics</code> section. I see that in the already ported <code>Analysis.SpecialFunctions.Pow.Complex</code>, the whole section <code>Tactics</code> has been commented out. Is it okay to do the same for this file?</p>",
        "id": 359707543,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684512663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359568823\">said</a>:</p>\n<blockquote>\n<p>I got the same with complex powers and the only thing I found that worked was using <code>HPow.hPow</code> directly instead of <code>^</code></p>\n</blockquote>\n<p>Do we need to adjust the previous file on complex powers to use Floris' workaround, too?</p>",
        "id": 359708378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684512864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span>, yes, you can just drop the tactics section while porting the theory.</p>",
        "id": 359718143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684515193
    },
    {
        "content": "<p>Don't drop it without a porting note naming the tactic that was removed!</p>",
        "id": 359723015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684516358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359708378\">said</a>:</p>\n<blockquote>\n<p>Do we need to adjust the previous file on complex powers to use Floris' workaround, too?</p>\n</blockquote>\n<p>I tried one file (I forgot which one) by doing the <code>local macro_rules</code> for the whole file, but that resulted in a few new elaboration errors, so it might not be worth it until we get a proper fix.</p>",
        "id": 359792232,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684544119
    },
    {
        "content": "<p>The elaboration error you've <a href=\"https://github.com/leanprover/lean4/issues/2220#issuecomment-1555032489\">mentioned on the bugtracker</a> is fixed by importing Mathlib.Algebra.Group.Defs</p>",
        "id": 359792686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684544488
    },
    {
        "content": "<p>Oh, neat!</p>\n<p>I looked through some other files that now use <code>Pow</code> workarounds, and there are a few other errors I get, but maybe we can also solve that with some default instance. Below is an example (I import a lot to show that in actual mathlib it's failing - it is likely reproducible with very few imports).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance HPow ℕ ℂ ?m.1970</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y.re</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- failed to synthesize instance HPow ℝ ℂ ?m.2123</span>\n</code></pre></div>",
        "id": 359868865,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684582043
    },
    {
        "content": "<p>All errors I saw from the <code>local macro_rules</code> where cases where the return type / codomain of the power function was a metavariable, and these two examples are (I think) representative. The first one might be a bit harder since the numeral has unspecified type (which should be <code>ℂ</code>, not the <code>ℕ</code> in the error message).</p>",
        "id": 359869313,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684582186
    },
    {
        "content": "<p>I would have guessed that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instHPow#doc\">docs4#instHPow</a> being a default instance would be enough to elaborate the second example.</p>",
        "id": 359869581,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684582252
    },
    {
        "content": "<p>Another minor issue is that if we change this in core, we also need to fix core (the <code>n = 2 ^ k</code> error in the issue was the first error on a <a href=\"https://github.com/leanprover/lean4/compare/master...fpvandoorn:lean4:pow_binop\">branch where I tried to change the macro</a>).</p>",
        "id": 359870074,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1684582390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234085/near/359679045\">said</a>:</p>\n<blockquote>\n<p>As a workaround, you can add the following line on top of file/section that experiences this issue:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I added a comment about this temporary workaround in the <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#hpow-and-coersion\">port wiki</a> as it came up again in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4331\">!4#4331</a></p>",
        "id": 361005815,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1685008629
    },
    {
        "content": "<p>I just ran into this problem too: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/07cb970e06f60cd37990f478168cfa919f317be6\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/07cb970e06f60cd37990f478168cfa919f317be6</a><br>\nThanks for posting a workaround.</p>",
        "id": 362243973,
        "sender_full_name": "David Renshaw",
        "timestamp": 1685465629
    }
]