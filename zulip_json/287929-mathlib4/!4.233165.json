[
    {
        "content": "<p>I'm having trouble with set separation.</p>",
        "id": 345322802,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680077079
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3165/files#diff-3874bf5e83938515cf916a663f46f5cb22693866d8c626a0d3684469930c570cR983\">https://github.com/leanprover-community/mathlib4/pull/3165/files#diff-3874bf5e83938515cf916a663f46f5cb22693866d8c626a0d3684469930c570cR983</a></p>",
        "id": 345323173,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680077176
    },
    {
        "content": "<p>Here I want to use the separation notation defined for ZFC sets. But if I try and do that it just defaults to building a <code>Set ZFSet</code>.</p>",
        "id": 345323232,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680077205
    },
    {
        "content": "<p>Even if I write something like <code>({ y ∈ x | p y } : ZFSet)</code></p>",
        "id": 345323287,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680077223
    },
    {
        "content": "<p>mathlib4 doesn't have a sep class anymore</p>",
        "id": 345332851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680079526
    },
    {
        "content": "<p>or at least, if there is one it doesn't work correctly</p>",
        "id": 345332881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680079533
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/1e9f59d/Mathlib/Data/Finset/Basic.lean#L2794-L2799\">https://github.com/leanprover-community/mathlib4/blob/1e9f59d/Mathlib/Data/Finset/Basic.lean#L2794-L2799</a></p>",
        "id": 345332886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680079535
    },
    {
        "content": "<p>Is this a thing that will change in the future?</p>",
        "id": 345333201,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680079611
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 345334032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680079797
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sep#doc\">docs4#Sep</a> exists</p>",
        "id": 345336748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680080514
    },
    {
        "content": "<p>I'm having some more trouble</p>",
        "id": 345442895,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104287
    },
    {
        "content": "<p>This time with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.map_definable_aux\">docs#Set.map_definable_aux</a></p>",
        "id": 345442999,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104308
    },
    {
        "content": "<p>The issue is that, as is, the definable condition is an unused argument</p>",
        "id": 345444397,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104599
    },
    {
        "content": "<p>So the linter is complaining</p>",
        "id": 345444413,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104602
    },
    {
        "content": "<p>I have this old PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15216\">#15216</a> where I do in fact prove this computably, though it's probably rotted by now</p>",
        "id": 345444542,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104631
    },
    {
        "content": "<p>If <code>x</code> is unused according to the linter but <code>_</code> doesn't work, you can use <code>_x</code></p>",
        "id": 345445048,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680104745
    },
    {
        "content": "<p>There are various possible solutions here: </p>\n<ul>\n<li>disable the unused argument linter (if possible)</li>\n<li>remove the <code>Definable</code> argument throughout the Lean 4 port</li>\n<li>get the constructive proof of <code>map_definable_aux</code> done</li>\n</ul>",
        "id": 345445096,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104754
    },
    {
        "content": "<p>Oh that works</p>",
        "id": 345445121,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104759
    },
    {
        "content": "<p>Still, I think it would be good to discuss the <code>Definable</code> class</p>",
        "id": 345445252,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104780
    },
    {
        "content": "<p>It makes some proofs \"constructive\", but we can't really do any computation with sets in any case, so I don't believe it's worth it</p>",
        "id": 345445336,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233165/near/345445048\">said</a>:</p>\n<blockquote>\n<p>If <code>x</code> is unused according to the linter but <code>_</code> doesn't work, you can use <code>_x</code></p>\n</blockquote>\n<p>This doesn't work either. The thing is, the argument is genuinely unused, but presumably shouldn't be in the future.</p>",
        "id": 345445604,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I vaguely recall discussing <code>Definable</code> in the past, but I don't remember what the conclusion was</p>",
        "id": 345446035,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680104955
    },
    {
        "content": "<p>You can always use <code>set_option linter.unusedVariables false in ...</code> if this is a genuine false positive.</p>",
        "id": 345448868,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680105577
    },
    {
        "content": "<p>I'll do that for now</p>",
        "id": 345449483,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680105710
    },
    {
        "content": "<p>I'm having further trouble here</p>",
        "id": 345455545,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107042
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YCeeUTb8h-GJ2rqm5ousczdd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YCeeUTb8h-GJ2rqm5ousczdd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YCeeUTb8h-GJ2rqm5ousczdd/image.png\"></a></div>",
        "id": 345455674,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107065
    },
    {
        "content": "<p>Apparently Lean is eagerly getting rid of the coercion, then telling me there is no coercion</p>",
        "id": 345455736,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107080
    },
    {
        "content": "<p>(<code>coe</code> here is defined in terms of <code>ofSet</code>)</p>",
        "id": 345455787,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107097
    },
    {
        "content": "<p>Mark the ofSet definition with @[coe]</p>",
        "id": 345457283,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680107469
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 345457414,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107505
    },
    {
        "content": "<p>I thought we were going to add that to the error message</p>",
        "id": 345458071,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680107671
    },
    {
        "content": "<p>Alright, the port is complete!</p>",
        "id": 345459107,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107947
    },
    {
        "content": "<p>(Modulo open Mathlb3 PRs I want to port simultaneously)</p>",
        "id": 345459182,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680107967
    },
    {
        "content": "<blockquote>\n<p>(Modulo open Mathlb3 PRs I want to port simultaneously)</p>\n</blockquote>\n<p>My advice on how to handle this is:</p>\n<ul>\n<li>Finish up the mathlib3 PRs</li>\n<li>Wait for mathport to process the files they touch</li>\n<li>Run <code>start_port.sh</code> again, which will spit out a commit sha</li>\n<li>Either merge or rebase on that commit sha (if this is a non-trivial I can give some extra advice at the time)</li>\n</ul>",
        "id": 345460793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680108363
    },
    {
        "content": "<p>By \"finish up\" do you mean get the PRs merged?</p>",
        "id": 345463267,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680108967
    },
    {
        "content": "<p>If so it's probably easier to do the porting manually, they're not big PRs</p>",
        "id": 345463311,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680108978
    },
    {
        "content": "<p>It's more work to review forward-ports than it is to review the initial port</p>",
        "id": 345464878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680109383
    },
    {
        "content": "<p>Given there is exactly one file unblocked by <code>set_theory.zfc.basic</code>, I would recommend you just finish off everything you want to do in mathlib3 with that file before finishing porting it</p>",
        "id": 345465004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680109422
    },
    {
        "content": "<p>Alternatively, abandon the lean 3 work and do everything in mathlib 4 after the port</p>",
        "id": 345472146,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680111189
    },
    {
        "content": "<p>I think if we want to encourage that approach we need a way to truly freeze a file; once it's been refactored in Lean4, forward-porting is going to be impossible</p>",
        "id": 345478169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680112713
    },
    {
        "content": "<p>(unless of course you mean \"after the port of all of mathlib\")</p>",
        "id": 345478284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680112745
    },
    {
        "content": "<p>Yeah, that's a good point. I was thinking about adding more than refactoring</p>",
        "id": 345491212,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680115957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233165/near/345445336\">said</a>:</p>\n<blockquote>\n<p>It makes some proofs \"constructive\", but we can't really do any computation with sets in any case, so I don't believe it's worth it</p>\n</blockquote>\n<p>It's not about computation, it's about being able to construct a model of ZF in lean without choice</p>",
        "id": 345498981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680118299
    },
    {
        "content": "<p>Ah, I understand.</p>",
        "id": 345577257,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680158720
    },
    {
        "content": "<p>Should that goal be scoped to the <code>basic.lean</code> file? It's probably going to be quite painful to deal with ordinals in a choice-agnostic way.</p>",
        "id": 345577332,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1680158756
    },
    {
        "content": "<p>Sure, I mean ordinals in IZF are weird already, so unless we want LEM to be an axiom we can't really do ZF without choice in lean</p>",
        "id": 345591407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680163001
    }
]