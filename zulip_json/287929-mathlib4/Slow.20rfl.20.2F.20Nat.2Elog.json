[
    {
        "content": "<p>Hi, does anyone mind explaining why the following behaviour? In particular, how should I resolve the last case? <code>norm_num</code> also does nothing to the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Log</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic execution of Lean.Parser.Tactic.refl took 28.8s</span>\n<span class=\"cm\">type checking took 20.8s</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">1003</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> 200ms -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">1003</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">log</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> both hangs - at least I don't have the patience -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> example : log 10 10300 = 4 := by -/</span>\n<span class=\"c\">/-</span><span class=\"cm\">   rfl -/</span>\n<span class=\"c\">/-</span><span class=\"cm\">   done -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">10300</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">log</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 401276216,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699584860
    },
    {
        "content": "<p>This does solve the final case, but takes 10 seconds (9s on type checking):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">10300</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">log</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dite_true</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 401276291,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699584907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">1019835301</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">9</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">log_of_one_lt_of_le</span><span class=\"o\">]</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>This takes no time - is it the \"recommended\" way?</p>",
        "id": 401276803,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699585155
    },
    {
        "content": "<p>(Btw, you can even golf it to <code>by simp only [log_of_one_lt_of_le]</code>)</p>",
        "id": 401278781,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699586093
    },
    {
        "content": "<p>If you are going to use it frequently, this quick macro may be useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"norm_log\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span>\n  <span class=\"n\">repeat</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">log_of_one_lt_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">add_left_inj</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">pick_goal</span> <span class=\"mi\">3</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"norm_log!\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"o\">(</span><span class=\"n\">norm_log</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span> <span class=\"n\">try</span> <span class=\"n\">trivial</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"mi\">10</span> <span class=\"mi\">10198353000</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_log</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 401311009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699606186
    },
    {
        "content": "<p>Ultimately, there should simply be a <code>norm_num</code> extension for <code>Nat.log</code>, though!</p>\n<p>But the slow <code>rfl</code> is still worth investigating in its own right...I wonder if it's anything like the issue with <code>gcd</code> from a while back, where, iirc, it was building a huge termination proof?</p>",
        "id": 401319991,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699608234
    },
    {
        "content": "<p>Of course a <code>norm_num</code> extension would be great!</p>\n<p>I was simply suggesting a quick workaround: Gareth is working on a project for which the unprincipled <code>macro</code> above could be useful.  (The project is for a module that I am teaching <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 401323322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699608782
    }
]