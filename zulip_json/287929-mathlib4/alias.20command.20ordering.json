[
    {
        "content": "<p>I was going to give this as a review comment on the alias PR <a href=\"https://github.com/leanprover/std4/pull/184\">std4#184</a>, but it seems like the sort of thing that will have people muttering about \"increased coordination between std and mathlib\", so let's do it via a poll here instead. In short: the current syntax of <code>alias</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">my_theorem</span> <span class=\"bp\">←</span> <span class=\"n\">alias1</span> <span class=\"n\">alias2</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and I would like to reverse the order to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">alias1</span> <span class=\"o\">:=</span> <span class=\"n\">my_theorem</span>\n</code></pre></div>\n<p>and remove the facility to declare multiple aliases in one command. This is more consistent with other declaration syntaxes (the fact that the declared symbol is on the right in the <code>alias</code> command always trips me up).</p>",
        "id": 378351642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690266468
    },
    {
        "content": "<p>/poll How should alias take its arguments?<br>\nalias original_thm &lt;- alias1 alias2<br>\nalias alias1 alias2 -&gt; original_thm<br>\nalias alias1 -&gt; original_thm (only one declaration allowed)<br>\nalias alias1 := original_thm</p>",
        "id": 378351931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690266555
    },
    {
        "content": "<p>There is also the biconditional form of <code>alias</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">A_iff_B</span> <span class=\"bp\">↔</span> <span class=\"n\">B_of_A</span> <span class=\"n\">A_of_B</span>\n<span class=\"n\">alias</span> <span class=\"n\">A_iff_B</span> <span class=\"bp\">↔</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>which I think is less suitable for std as is. I'm not sure what kind of syntax would be best for this, perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">B_of_A</span><span class=\"o\">,</span> <span class=\"n\">A_of_B</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">A_iff_B</span>\n</code></pre></div>\n<p>for the first version and omitting the second version entirely. Generating names like this seems very heuristic and not a good fit for a general purpose programming language. (Obviously these can be left in mathlib if they are useful in their current forms.)</p>",
        "id": 378352991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690266930
    },
    {
        "content": "<p>I agree that <code>alias ⟨B_of_A, A_of_B⟩ := A_iff_B</code> looks good for the bidirectional version. Maybe allow <code>alias ⟨B_of_A, -⟩ := A_iff_B</code> if one just wants one direction.</p>",
        "id": 378354855,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690267497
    },
    {
        "content": "<p><code>_</code> is already used to mean \"don't generate this direction\"</p>",
        "id": 378354975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690267522
    },
    {
        "content": "<p>and I agree we can keep that syntax, although it conflicts if you were hoping that it would mean \"generate with an automatic name\"</p>",
        "id": 378355083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690267548
    },
    {
        "content": "<p>I am all for disabling the automatic name generation.</p>",
        "id": 378355203,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690267571
    },
    {
        "content": "<p>I just saw this... right after I got done adding support for protected aliases to <a href=\"https://github.com/leanprover/std4/pull/184\">std4#184</a>. I'm all in favor of the proposal (as well as dropping automatic name generation). Moreover, since <code>alias</code> will now look like a proper declaration, we can add support for modifiers (protected, private, attributes) without reinventing the wheel!</p>",
        "id": 378417938,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690280784
    },
    {
        "content": "<p>There's now a PR partially implementing this <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a>. Just the simple case for now. I'm happy to get help for the iff case!</p>",
        "id": 378476896,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690291889
    },
    {
        "content": "<p>The implementation at <a href=\"https://github.com/leanprover/std4/pull/200\">std4#200</a> is now complete and ready for review! There is also a companion patch for Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/pull/6172\">#6172</a></p>",
        "id": 378757277,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690369775
    },
    {
        "content": "<p>This is ready for reviewing on Std! <a href=\"#narrow/stream/348111-std4/topic/New.20alias.20syntax\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/New.20alias.20syntax</a></p>",
        "id": 380353794,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1690811868
    }
]