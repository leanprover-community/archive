[
    {
        "content": "<p>Teaching today, I noticed that if you run <code>cases</code> or one of its derivatives like <code>obtain</code> on a nonexistent hypothesis you get two different errors: first</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unknown identifier\n</code></pre></div>\n<p>but also</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>tactic 'induction' failed, major premise type is not an inductive type\n</code></pre></div>\n<p>from Lean replacing the nonexistent hypothesis by a metavariable and then trying to split that metavariable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This is particularly confusing for the <code>obtain</code> tactic because there, because of the inverted syntax, the more useful \"unknown identifier\" hypothesis comes later where it is easy for a newbie to overlook.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">h1</span> <span class=\"bp\">|</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Would it be possible to change <code>cases</code> and its derivatives to fail fully on a metavariable?</p>",
        "id": 326487413,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675817844
    }
]