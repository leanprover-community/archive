[
    {
        "content": "<p>Hi, the following code doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrder.decidableEq</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"k\">#check</span> <span class=\"n\">instDecidableEqFin</span> <span class=\"mi\">5</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Fails, they are not rfl -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LinearOrder.decidableEq</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">instDecidableEqFin</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It seems that there's an \"instance diamond\" where the <code>DecidableEq</code> instance from <code>LinearOrder</code> does not coincide with the one from <code>Init.Prelude</code>. I am not sure how to fix it, but any guidance or help would be great.<br>\nThis is a \"real\" issue since it makes the following code fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">max'_image</span> <span class=\"n\">hf.monotone</span> <span class=\"n\">univ</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">Nonempty.image_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">66</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"bp\">-</span><span class=\"mi\">66</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instDecidableEqFin</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">inferred</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instDecidableEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 400800546,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699383957
    },
    {
        "content": "<p>Here's a workaround if you need it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">StrictMono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">max'_image</span> <span class=\"n\">hf.monotone</span> <span class=\"n\">univ</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">Nonempty.image_iff</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">univ_nonempty</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>(Note that you need <code>m</code> to be non-zero for it to be a nonempty type.)</p>\n<p><code>convert</code> here is like <code>exact</code> but is happy to handle non-defeq decidable instances for you.</p>",
        "id": 400804354,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699385667
    },
    {
        "content": "<p>Ohh yes that's useful, thanks! (I copy and pasted the entire proof again :P)</p>",
        "id": 400804471,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699385718
    },
    {
        "content": "<p>Shouldn't it be <code>False</code> instead of <code>false</code>? I also get an error <code>unknown identifier 'max'_image'</code> (with <code>import Mathlib</code> on Lean 4 Web). Furthermore, the claim should be false when <code>n &gt; m</code>.</p>",
        "id": 400815662,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699390948
    },
    {
        "content": "<p><code>false</code> and <code>False</code> both work, it's just a demonstration. Here <code>false</code> (Bool) is coerced to a Proposition <code>false = true</code> automatically. Anyways, that's not the point.</p>\n<p><code>max'_image</code> works for me. <a href=\"/user_uploads/3121/d_cB5faZ99g5YMpw2utt54KW/Screenshot-2023-11-07-at-21.03.37.png\">Screenshot-2023-11-07-at-21.03.37.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/d_cB5faZ99g5YMpw2utt54KW/Screenshot-2023-11-07-at-21.03.37.png\" title=\"Screenshot-2023-11-07-at-21.03.37.png\"><img src=\"/user_uploads/3121/d_cB5faZ99g5YMpw2utt54KW/Screenshot-2023-11-07-at-21.03.37.png\"></a></div><p>For <code>n &gt; m</code> I think you meant <code>n &lt; m</code>. The claim is true there since <code>StrictMono f</code> (there are no monotone functions to a smaller space by PGP), and false implies any proposition.</p>",
        "id": 400816138,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699391162
    },
    {
        "content": "<p>Michael, I think you are missing the <code>open Nat Int Finset</code> line from the earlier code.</p>",
        "id": 400816344,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699391264
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/bd3e369b6f82c874de0f318c71d7e0595f8a3aa4//Mathlib/Order/Basic.lean#L1102\">This line</a> seems to be forming the diamond with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableEqFin#doc\">docs#instDecidableEqFin</a></p>",
        "id": 400819591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699392906
    },
    {
        "content": "<p>I think we should change core so that the instance <del>is defeq to</del> uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=decidable_of_iff#doc\">docs#decidable_of_iff</a></p>",
        "id": 400820101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699393163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20infer.20incorrect.20instance/near/400816344\">said</a>:</p>\n<blockquote>\n<p>Michael, I think you are missing the <code>open Nat Int Finset</code> line from the earlier code.</p>\n</blockquote>\n<p>OK, true. Now <code>done</code> complains and the goal is <code>⊢ false = true</code>. (With <code>False</code>, the goal is still <code>False</code>.)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20infer.20incorrect.20instance/near/400816138\">said</a>:</p>\n<blockquote>\n<p>For <code>n &gt; m</code> I think you meant <code>n &lt; m</code>. The claim is true there since <code>StrictMono f</code> (there are no monotone functions to a smaller space by PGP), and false implies any proposition.</p>\n</blockquote>\n<p>With \"the claim is false\" I meant that the statement (with <code>False</code> as its conclusion) is not true. If <code>n &gt; m</code>, then there are strictly monotone maps from <code>Fin m.succ</code> to <code>Fin n</code> (take the identity of the naturals restricted to the domain), so no contradiction can be obtained.</p>",
        "id": 400820296,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699393264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20infer.20incorrect.20instance/near/400820296\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20infer.20incorrect.20instance/near/400816138\">said</a>:</p>\n<blockquote>\n<p>For <code>n &gt; m</code> I think you meant <code>n &lt; m</code>. The claim is true there since <code>StrictMono f</code> (there are no monotone functions to a smaller space by PGP), and false implies any proposition.</p>\n</blockquote>\n<p>With \"the claim is false\" I meant that the statement (with <code>False</code> as its conclusion) is not true. If <code>n &gt; m</code>, then there are strictly monotone maps from <code>Fin m.succ</code> to <code>Fin n</code> (take the identity of the naturals restricted to the domain), so no contradiction can be obtained.</p>\n</blockquote>\n<p>You are misunderstanding what my code snippet does. It's to show the incorrect instance issue (c.r. Eric above), not to state a theorem.</p>",
        "id": 400820600,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699393441
    },
    {
        "content": "<p>Replace <code>false</code> with <code>true</code> or <code>done</code> with <code>sorry</code> I guess.</p>",
        "id": 400820723,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699393485
    },
    {
        "content": "<p>OK. Sorry for the confusion!</p>",
        "id": 400820810,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699393535
    }
]