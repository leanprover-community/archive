[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib4/pull/6045\">#6045</a>, I migrated some lemmas to use <code>MonoidHomClass</code> as opposed to specifically typed such lemmas. This caused some breakage, and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> asked me to revert this, so that Lean works more smoothly. I was opposed to this, because I personally feel that the added flexibility is really great. However, they do have a great point that often these lemmata break more than just elaboration and often slow down proofs. I guess the main point of this thread is to start a discussion on this, and see what the way forward should be in many respects.</p>\n<p>One idea I had here was to write a metaprogram that can generate such lemmas - that is, when a lemma is tagged with <code>@[MNFA]</code>, (short for My New Fancy Attribute), anything with an instance of XHomClass gets its own automatically generated lemma that is fully type-correct, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">FooHomClass</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"c1\">--- two instances - RingHom and Homeomorph</span>\n\n<span class=\"kd\">@[MNFA]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- would produce two lemmas `RingHom.eq_id` and  `Homeomorph.eq_id`.</span>\n</code></pre></div>\n<p>This gets complicated by the fact that lemmas can be defined before instances of XClass are defined, and also the complexities of XClass applying sometimes.</p>\n<p>Another is just to give in and manually write duplicates for common cases. I think this is what Yael is advocating for.</p>\n<p>I'm personally fine with sticking with just HomClasses and hoping that we can squirrel down this behaviour into something that can be remotely fixable in core.</p>",
        "id": 389509430,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694031097
    },
    {
        "content": "<p>Do you think this was already the case in Lean3?</p>",
        "id": 389514791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694033682
    },
    {
        "content": "<p>Yes it was.</p>",
        "id": 389516911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694034719
    },
    {
        "content": "<p>All I'm saying really is that it's acceptable to have structure-specific lemmas where hom classes lemmas do not elaborate properly. Gladly, the most common hom classes lemmas  (<code>map_add</code>, <code>map_pow</code>, ...) do elaborate properly.</p>\n<p>I'm not advocating for full duplication.</p>",
        "id": 389517272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694034873
    },
    {
        "content": "<p>Sure, I am not saying duplication is a big problem, I am just curious if we can rather solve the elaboration problems.</p>",
        "id": 389519425,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694036110
    },
    {
        "content": "<p>It looks to me like this PR changes not only the lemmas, but the definitions too?</p>",
        "id": 389527310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694040218
    },
    {
        "content": "<p>In particular, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLocalRingHom#doc\">docs#IsLocalRingHom</a> now works on RingHomClass. This is possibly problematic, because now you need lemmas to translate between <code>IsLocalRingHom f</code> and <code>IsLocalRingHom ↑f</code> for every RingHomClass f</p>",
        "id": 389527518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694040361
    },
    {
        "content": "<p>It actually works on MonoidHomClass. There is an instance for f ringhomclass -&gt; f as a ring hom, but nothing else - I'm not sure why other translations would be necessary</p>",
        "id": 389527664,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694040454
    },
    {
        "content": "<p>And that was pretty much done to sate old code</p>",
        "id": 389527693,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694040478
    }
]