[
    {
        "content": "<p>In lean3, if i wanted to prove a property for finite sets i could apply <code>induction_on</code> directly. But in mathlib4 i get an error <code>failed to elaborate eliminator, expected type is not available</code>if i try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set.Finite</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">espacio_topologico</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">abiertos</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"n\">abierto_total</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span>\n  <span class=\"n\">abierto_vacio</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span>\n  <span class=\"n\">abierto_union</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">ℱ</span> <span class=\"bp\">⊆</span> <span class=\"n\">abiertos</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">ℱ</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span>\n  <span class=\"n\">abierto_interseccion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">espacio_topologico</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">espacio_topologico</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">abierto</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">abiertos</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abierto_interseccion_finita</span> <span class=\"o\">(</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">ℱ.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hℱ</span> <span class=\"o\">:</span> <span class=\"n\">ℱ</span> <span class=\"bp\">⊆</span> <span class=\"n\">abiertos</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">abierto</span> <span class=\"o\">(</span><span class=\"bp\">⋂₀</span> <span class=\"n\">ℱ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hℱ</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induction_on</span> <span class=\"n\">hfin</span>\n</code></pre></div>\n<p>any clue on how to do this?</p>",
        "id": 377128872,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689893708
    },
    {
        "content": "<p>Try <code>refine induction_on hfin ?_ ?_ ?_</code> (with the right number of <code>?_</code>s)</p>",
        "id": 377131850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689895155
    },
    {
        "content": "<p>thanks, it works (I hope the syntax is not too confusing to my students)</p>",
        "id": 377132497,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689895536
    },
    {
        "content": "<p>Lean 4 is worse at inferring motives than Lean 3; it's a shame that <code>apply</code> doesn't fall back on the above when it fails.</p>",
        "id": 377133286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689896005
    },
    {
        "content": "<p><code>induction s using finset.induction_on</code> is better</p>",
        "id": 377133305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689896017
    },
    {
        "content": "<p>Oh, this is finite not finset</p>",
        "id": 377133320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689896040
    },
    {
        "content": "<p>Still, in general you should use the induction tactic</p>",
        "id": 377133377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689896053
    },
    {
        "content": "<p><code>abierto_vacio</code> is implied by <code>abierto_union</code> with <code>ℱ</code> empty, by the way</p>",
        "id": 377133475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689896120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/tactic.20to.20apply.20induction.20on.20finite.20sets/near/377133475\">said</a>:</p>\n<blockquote>\n<p><code>abierto_vacio</code> is implied by <code>abierto_union</code> with <code>ℱ</code> empty, by the way</p>\n</blockquote>\n<p>yes, but I am trying to follow exacty the notes of our course. We use a set of axioms that is not minimal, but it is hopefully easier to grasp by the students.</p>",
        "id": 377134540,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689896783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/tactic.20to.20apply.20induction.20on.20finite.20sets/near/377133305\">said</a>:</p>\n<blockquote>\n<p><code>induction s using finset.induction_on</code> is better</p>\n</blockquote>\n<p><code>s</code>should be the hypothesis that states that the set is finite in this case?</p>",
        "id": 377134746,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689896920
    },
    {
        "content": "<p>It doens't work in my case :  <code>induction' hfin using Set.Finite.induction_on </code> produces an error <code>failed to infer implicit target, it contains unresolved metavariables   ?m.751</code></p>",
        "id": 377135504,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689897394
    },
    {
        "content": "<p>Does <code>induction hfin</code> work? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.induction_on#doc\">docs#Set.Finite.induction_on</a></p>",
        "id": 377135523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689897417
    },
    {
        "content": "<p>Ah, I think you need <code>induction hfin using Finite.dinduction_on</code></p>",
        "id": 377135687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689897498
    },
    {
        "content": "<p>no, it changes the the hypothesis to <code>Fintype ↑ℱ</code></p>",
        "id": 377135691,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689897503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/tactic.20to.20apply.20induction.20on.20finite.20sets/near/377135687\">said</a>:</p>\n<blockquote>\n<p>Ah, I think you need <code>induction hfin using Finite.dinduction_on</code></p>\n</blockquote>\n<p>that fails too: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expected</span> <span class=\"n\">type</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">C</span> <span class=\"bp\">∅</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 377135805,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689897599
    },
    {
        "content": "<p>... then that lemma is wrong</p>",
        "id": 377135938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689897647
    },
    {
        "content": "<p>This is what it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Finite.dinduction_on'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s.Finite</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">∅</span> <span class=\"n\">finite_empty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.insert</span> <span class=\"n\">a</span><span class=\"o\">))</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Finite.induction_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H0</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">has</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H1</span> <span class=\"n\">has</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">this</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 377136295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689897762
    },
    {
        "content": "<p>that works.</p>\n<p>maybe that lemma should be included in mathlib?</p>",
        "id": 377136704,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689897960
    },
    {
        "content": "<p>although I cannot access the names of the hypothesis in the induction step</p>",
        "id": 377137011,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1689898089
    },
    {
        "content": "<p>I created PR  <a href=\"https://github.com/leanprover-community/mathlib4/pull/6674\">#6674</a> to include this, but I am not sure of the procedure to follow.</p>",
        "id": 386002564,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1692401125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461731\">@Miguel Marco</span> We don't accept PRs from forks. I've just given you push-access to non-master branches of mathlib4, please create a branch and open a PR from there.</p>",
        "id": 386004131,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692402117
    },
    {
        "content": "<p>Note also that you don't need to add a new <code>Finite.dinduction_on'</code>; you should just change the statement of the existing lemma to have the arguments in the right order</p>",
        "id": 386006909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692403683
    },
    {
        "content": "<p>In fact, I think I might have jumped to conclusions; the original lemma works fine after all, as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">ℱ</span><span class=\"o\">,</span> <span class=\"n\">hfin</span> <span class=\"n\">using</span> <span class=\"n\">Set.Finite.dinduction_on</span>\n</code></pre></div>",
        "id": 386007134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692403815
    }
]