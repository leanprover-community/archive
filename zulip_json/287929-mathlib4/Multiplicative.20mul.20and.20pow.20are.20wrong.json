[
    {
        "content": "<p>Minimal working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">instHMul</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Multiplicative.mul</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">instHPow</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HPow</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">DivInvMonoid.Pow</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"n\">ℤ</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">6</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">8</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>The evals should output 5 and 6 respectively, not  6 and 8. This is despite that<code>#synth</code> shows the right thing for <code>Mul</code> (and no idea if <code>DivInvMonoid</code> is the right thing for <code>Pow</code>)...</p>",
        "id": 399622857,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1698796949
    },
    {
        "content": "<p>What if you change those to <code>show Multiplicative (ZMod 10) from (2 : ZMod 10)</code> for example? (I think I got the right syntax). Type ascriptions don't cause terms to have a type hint, they just do a defeq check, so it can be surprising to learn that you're still in <code>ZMod 10</code>. Try seeing the output of <code>#check ((2 : ZMod 10) : Multiplicative (ZMod 10))</code>.</p>",
        "id": 399623384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698797170
    },
    {
        "content": "<p>Here's a trick to register a type hint: <code>#check (id (2 : ZMod 10) : Multiplicative (ZMod 10))</code></p>",
        "id": 399623445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698797220
    },
    {
        "content": "<p>Ah you're right. Changing them to <code>Multiplicative.ofAdd (2 : ZMod 10)</code> and <code>Multiplicative.ofAdd (3 : ZMod 10)</code> gives expected output. However, this actually arose out of me trying to prove something to the effect of <code>Multiplicative.ofAdd (1 : ZMod N) ^ m = Multiplicative.ofAdd (m : ZMod N)</code> and me being suspicious about whether there was a bug related to that.</p>",
        "id": 399624051,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1698797626
    },
    {
        "content": "<p>Using <code>letI</code> is another way to specify the type, without inserting an <code>id</code> into the term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 8</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 6</span>\n</code></pre></div>",
        "id": 399624831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698798139
    },
    {
        "content": "<p><code>by exact</code> works too; which is what I've used in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8086\">#8086</a></p>",
        "id": 399813478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698878316
    },
    {
        "content": "<p>These tricks are way too folklore, haha.</p>",
        "id": 399814488,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1698878754
    }
]