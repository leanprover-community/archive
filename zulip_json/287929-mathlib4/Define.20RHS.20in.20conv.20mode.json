[
    {
        "content": "<p>(Sorry for wrong stream, guess <code>conv</code> is actually a lean feature, not a mathlib  feature)<br>\nGiven a goal <code>a * b</code>, I find myself wanting for a concise way of specifying the position of <code>b</code> (without repeating it),  saying that I want to prove it to be equal to <code>c</code>, then doing the proof of <code>b = c</code>, and end up with <code>a = c</code>. Of course the terms can be larger and more deeply nested, possibly in binders.<br>\nI can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">;</span> <span class=\"n\">proof_of_b_eq_c</span>\n</code></pre></div>\n<p>and <code>conv</code> is certainly nice for navigating there. Is there a better way of than <code>tactic =&gt; show (_ = c); …</code>?</p>\n<p>If not, would a command like this be a useful addition to <code>conv</code>? Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">equals</span> <span class=\"n\">c</span> <span class=\"kd\">by</span>\n  <span class=\"n\">proof_of_b_eq_c</span>\n</code></pre></div>",
        "id": 379304747,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690492789
    },
    {
        "content": "<p>This works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">equals</span><span class=\"o\">)</span> <span class=\"s2\">\"equals\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"by\"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span><span class=\"n\">equals</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span><span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">.</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>The only annoying thing left is that after the  <code>by</code> the goal is not yet updated; I have to type <code>skip</code> or something like that. Is that fixable?<br>\nProbably not, this is already a problem with <code>tactic by …</code>.</p>",
        "id": 379306680,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690493518
    },
    {
        "content": "<p>With  <code>tacticSeqIndentGt</code> instead of <code>tacticSeq</code>, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">equals</span><span class=\"o\">)</span> <span class=\"s2\">\"equals\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"by\"</span> <span class=\"n\">tacticSeqIndentGt</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n</code></pre></div>\n<p>I do get the goal immediately after <code>by</code>, but it means I have to indent the tactic at least this far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">equals</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n            <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Maybe ok, although I would like to be able two write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">equals</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 379309723,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690494718
    },
    {
        "content": "<p>that's not really approved style, you shouldn't hang a <code>by</code> after a one-line conv block because it's not one-line anymore</p>",
        "id": 379328954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690504248
    },
    {
        "content": "<p>prefer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">k</span>\n    <span class=\"n\">equals</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 379329028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690504281
    },
    {
        "content": "<p>I see, thanks! In that style I can even use <code>tacticSeqIdentGt</code> and get the right goal state, which is good.</p>\n<p>So maybe if I don't want to get rid of the single-line aesthetics, I should write a macro that takes the <code>convSeq</code> as well…</p>",
        "id": 379373040,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690525975
    },
    {
        "content": "<p>I’m trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cchange</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"cchange\"</span> <span class=\"n\">Lean.Parser.Tactic.Conv.convSeq</span> <span class=\"s2\">\" with \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">.</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>but lean doesn’t like that: <code>$conv</code> is a <code>convSeq</code>, but it expects a <code>conv</code> at this point. <br>\nIs there a way to append two <code>convSeq</code> (the one given by the user, and the <code>tactic… ; done</code>) in such rules?</p>",
        "id": 379397000,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690531366
    },
    {
        "content": "<p>You can do <code>($conv)</code> instead of <code>$conv</code> to turn the sequence into a single <code>conv</code>.</p>",
        "id": 379397822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690531495
    },
    {
        "content": "<p>Parentheses can be used for both <code>tactic</code> and <code>conv</code> sequences</p>",
        "id": 379398202,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690531552
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 379398679,
        "sender_full_name": "Peter Pfaffelhuber",
        "timestamp": 1690531623
    },
    {
        "content": "<p>Thanks! I think tried that, cargo-culting it from somewhere else, but then something else didn’t work… let me have a look again.</p>\n<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cchange</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"cchange\"</span> <span class=\"n\">Lean.Parser.Tactic.Conv.convSeq</span> <span class=\"s2\">\" with \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)}</span><span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cchange</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">right</span> <span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"mi\">4</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I get “no goals to be solved”  where the <code>sorry</code> is.</p>\n<p>(This isn’t super important, I am just playing around with the goal of understanding the machinery better.)</p>",
        "id": 379401672,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690532080
    },
    {
        "content": "<p>Watch out, <code>{ right; right }</code> means <code>(right; right; try rfl)</code> here. Curly braces focus on the first goal and then <code>try rfl</code> at the end to auto-close.</p>",
        "id": 379402616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690532213
    },
    {
        "content": "<p>You can do <code>cchange right; right with 4 =&gt; {  }</code> or <code>cchange (right; right) with 4 =&gt; {  }</code> to mean what you expect</p>",
        "id": 379402853,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690532246
    },
    {
        "content": "<p>Ah, indeed, and it’s even prettier. Thanks!<br>\nBased on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">convSeq</span> <span class=\"o\">:=</span> <span class=\"n\">convSeqBracketed</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">convSeq1Indented</span>\n</code></pre></div>\n<p>I was somehow expecting to have to use brackets or indentation there.</p>",
        "id": 379403055,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690532275
    },
    {
        "content": "<p>Is there a nice trick to make a multi-argument macro work nicely even if it is typed partiall? For example, so that after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cchange</span> <span class=\"n\">right</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>I see the <code>conv</code> state, even before I write <code>with</code> and <code>by</code>?</p>\n<p>This comes close, not sure if that’s the way to go, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">cchange</span><span class=\"o\">)</span>\n  <span class=\"s2\">\"cchange\"</span> <span class=\"n\">Lean.Parser.Tactic.Conv.convSeq</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" by \"</span> <span class=\"n\">tacticSeq</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)}</span><span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">done</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span> <span class=\"k\">with</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">conv</span> <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">cchange</span> <span class=\"bp\">$</span><span class=\"n\">conv</span><span class=\"o\">:</span><span class=\"n\">convSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">conv</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379410179,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690533573
    },
    {
        "content": "<p>I don't think that's something we've tackled so far. Most of our tactics have an independent meaning without the suffixes</p>",
        "id": 379415162,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690534538
    },
    {
        "content": "<p>Fair. Smaller composable tactics are nicer anyways, so I'll stick to <code>equals</code> maybe</p>",
        "id": 379433478,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690537911
    },
    {
        "content": "<p>I like this <code>equals</code> tactic idea. I wonder if the syntax could be <code>equals term =&gt; tacticSeq</code> to better match <code>tactic</code></p>\n<p>Maybe this could go into <code>Std.Tactic.Basic</code>?</p>",
        "id": 379439220,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690538870
    },
    {
        "content": "<p>I think I went back and forth between <code>by</code> and <code>=&gt;</code> half a dozen times yesterday :-)<br>\nI lean towards <code>by</code>, because that’s familiar as “opens a block of tactics to prove something”. I find it odd that <code>tactic</code> doesn’t use it, but maybe because it doesn’t always close a goal?</p>\n<p>If you think that this is useful I’ll happily PR it into <code>Std.Tactic.Basic</code>or where.</p>\n<p><em>I</em> think it is a very natural way of interactive proving. Stare at the goal, notice a subexpression where you can make progress, focus, say what you want to rewrite it to, prove the rewriting, all with DRY.<br>\nIt’s basically the less pretty; less verbose style version of a nice <code>calc</code> proof, without the repetition and the <code>:= by congr 3; … </code> before the actual proof steps.<br>\nOr the equivalent of the pen-and-paper style of putting curly braces under some subexpression to state that it’s equal to something else.</p>\n<p>I found it useful in a lemma dealing with series. If I try to do it with <code>cacl</code> and <code>∑' _ = _</code>, then I have all the <code>Summable</code> side conditions, and have to show some transformations twice. But if I state the result using <code>HasSum _ _</code> the summability is part of the goal, and I can use this tactic to freely shuffle things under the sum, or in the value of the sum, without dealing with side conditions.</p>",
        "id": 379649798,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690583762
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover/std4/pull/204\">https://github.com/leanprover/std4/pull/204</a>, happy to refine there</p>",
        "id": 379722635,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690619197
    }
]