[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/319686081\">said</a>:</p>\n<blockquote>\n<p>I think the only difficulty in changing the definition In Lean4 to match Lean3 is we have to reprove <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">docs4#Nat.mod_eq</a>; and that's only difficult because I've never written a Lean4 proof before</p>\n</blockquote>\n<p>Isn't that proof in lean 3 already? You should be able to use the mathported lean 3 proof</p>",
        "id": 319686805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod_eq\">docs#nat.mod_eq</a> doesn't exist</p>",
        "id": 319686821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958899
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod_def\">docs#nat.mod_def</a></p>",
        "id": 319686877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958923
    },
    {
        "content": "<p>I wonder if we can make a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">align#nat.mod_def</a> linkifier</p>",
        "id": 319687023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958991
    },
    {
        "content": "<p>How can I find the mathport output? Based on what you said in the meeting, mathport removes its own output once someone ports it</p>",
        "id": 319687144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959024
    },
    {
        "content": "<p>it's in the <a href=\"https://github.com/leanprover-community/mathlib3port\">mathlib3port</a> repo</p>",
        "id": 319687189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959047
    },
    {
        "content": "<p>Do I have to go back to an old commit?</p>",
        "id": 319687228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959061
    },
    {
        "content": "<p>Or does \"mathport output\" not mean the same thing as \"stuff in mathlib3port\"?</p>",
        "id": 319687276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959085
    },
    {
        "content": "<p>I'm confused by the question. mathport output means stuff in mathlib3port, but you will see the <code>#print</code>s in new (post-port) commits, not old ones</p>",
        "id": 319687395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959128
    },
    {
        "content": "<p>Either way, I found the code at <a href=\"https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Data/Nat/Lemmas.lean#L1318-L1345\">https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Data/Nat/Lemmas.lean#L1318-L1345</a></p>",
        "id": 319687698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959248
    },
    {
        "content": "<p>The <code>·</code> syntax is unfortunately causing trouble</p>",
        "id": 319687768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959278
    },
    {
        "content": "<p>what trouble?</p>",
        "id": 319688104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959423
    },
    {
        "content": "<p>I get \"expected command\" if  I paste that output in the file in coer</p>",
        "id": 319688334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959509
    },
    {
        "content": "<p>I would guess it's using syntax that isn't available yet there</p>",
        "id": 319688347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959518
    },
    {
        "content": "<p>the dot syntax is available in core, but <code>induction'</code> isn't</p>",
        "id": 319688745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959683
    },
    {
        "content": "<p>everything else looks ok</p>",
        "id": 319688798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959713
    },
    {
        "content": "<p>Well I can't get the <code>·</code> to work in  <code>lean/Init/Data/Nat/Div.lean</code></p>",
        "id": 319689367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959956
    },
    {
        "content": "<p>20 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29\">#mathlib4 &gt; Data.Fin.Basic (mathlib4#1084)</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 319692772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672961546
    },
    {
        "content": "<p>I'm still confused by why the <code>·</code> syntax isn't working for me; is there a non-unicode alternative I can use to focus goals?</p>",
        "id": 319692910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961629
    },
    {
        "content": "<p><code>.</code></p>",
        "id": 319692920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672961640
    },
    {
        "content": "<p>I still get <code>expected command</code></p>",
        "id": 319692967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961651
    },
    {
        "content": "<p>For code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"n\">cases</span> <span class=\"n\">x</span>\n        <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n        <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319692990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961665
    },
    {
        "content": "<p>It works fine without the <code>.</code>s and the space after them</p>",
        "id": 319693003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961675
    },
    {
        "content": "<p><code>cases'</code>? this isn't really how Lean 4 <code>cases</code> is meant to be used I think</p>",
        "id": 319693086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672961717
    },
    {
        "content": "<p>Not available in the file I'm in</p>",
        "id": 319693127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961739
    },
    {
        "content": "<p>it might be that <code>.</code> isn't available in that file? I forget if it is defined in stage 0 or stage 1</p>",
        "id": 319693156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672961761
    },
    {
        "content": "<p>I just reproved it from scratch, it was easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">mod_core_congr</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"n\">f1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"n\">f2</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">induction</span> <span class=\"n\">f1</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">f2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h1</span>\n      <span class=\"n\">clear</span> <span class=\"n\">h2</span>\n      <span class=\"n\">induction</span> <span class=\"n\">f2</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">f2</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.modCore</span><span class=\"o\">,</span> <span class=\"n\">Nat.modCore</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.modCore</span><span class=\"o\">,</span> <span class=\"n\">ite_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">f1</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.modCore</span><span class=\"o\">]</span>\n      <span class=\"n\">induction</span> <span class=\"n\">f2</span> <span class=\"n\">generalizing</span> <span class=\"n\">f1</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.modCore</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">Nat.modCore</span><span class=\"o\">,</span>\n          <span class=\"n\">ite_self</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">f2</span> <span class=\"n\">ih2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.modCore</span><span class=\"o\">]</span>\n        <span class=\"n\">refine'</span> <span class=\"n\">ite_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n        <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span>\n        <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h.1</span>\n          <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">]</span>\n            <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">h1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">h2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mod_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">Nat.modCore</span><span class=\"o\">,</span> <span class=\"n\">ite_self</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">ite_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mod_core_congr</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_sub_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 319694500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672962514
    }
]