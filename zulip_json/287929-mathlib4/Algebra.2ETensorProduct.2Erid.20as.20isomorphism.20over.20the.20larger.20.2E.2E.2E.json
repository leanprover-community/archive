[
    {
        "content": "<p>Here is a MWE. If anyone can fill the sorry better than I did, I'll be happy!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">AlgEquiv.toFun_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.toFun</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Algebra.TensorProduct</span>\n\n<span class=\"c1\">-- The natural `R`-algebra map from `R ⊗[A] A` to `R`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">rid'</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Algebra.TensorProduct.rid</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AlgEquiv.toFun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">]</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AlgEquiv.toFun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_apply</span><span class=\"o\">,</span> <span class=\"n\">AlgEquiv.toFun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">rid_tmul</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Algebra.TensorProduct.rid</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"k\">with</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 379848906,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690649237
    },
    {
        "content": "<p>I implemented this the other day</p>",
        "id": 379893854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690666801
    },
    {
        "content": "<p>Its in a local branch that is waiting for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6035\">#6035</a></p>",
        "id": 379893972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690666849
    },
    {
        "content": "<p>(also, <code>Algebra A R</code> is very backwards for mathlib conventions!)</p>",
        "id": 379894027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690666891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/379848460\">said</a>:</p>\n<blockquote>\n<p>yeah the two sides are displaying differently, maybe this is an error and the lemma shouldn't have been deleted? The linter seems happy.</p>\n</blockquote>\n<p>Lots of people ported FunLike stuff wrongly, then the linter told them to delete a bunch of lemmas. By the time reviewers came along and fixed the FunLike stuff, they usually didn't notice the missing lemmas.</p>",
        "id": 379894142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690666963
    },
    {
        "content": "<p>Which is to say, this lemma should definitely be restored</p>",
        "id": 379894189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690666996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/379894027\">said</a>:</p>\n<blockquote>\n<p>(also, <code>Algebra A R</code> is very backwards for mathlib conventions!)</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 379899532,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690670491
    },
    {
        "content": "<p>We almost always write <code>Algebra R A</code> where <code>A</code> is an <code>R</code>-algebra.</p>",
        "id": 379933974,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690690879
    },
    {
        "content": "<p><code>R</code> for \"Ring\", <code>A</code> for \"Algebra\"</p>",
        "id": 379933985,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690690902
    },
    {
        "content": "<p>As opposed to \"<strong>A</strong> ring\" and \"algeb<strong>R</strong>a\"</p>",
        "id": 379938784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690694129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/379893972\">said</a>:</p>\n<blockquote>\n<p>Its in a local branch that is waiting for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6035\">#6035</a></p>\n</blockquote>\n<p>Note that in order to have a nice defeq, this branch also depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6209\">#6209</a> which in turn depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6207\">#6207</a> (<img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">)</p>",
        "id": 379962656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690705590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/379933974\">said</a>:</p>\n<blockquote>\n<p>We almost always write <code>Algebra R A</code> where <code>A</code> is an <code>R</code>-algebra.</p>\n</blockquote>\n<p>Understood! (In French, where <code>A</code> is for « anneau », it is often the first letter that comes to my mind…)</p>",
        "id": 379969203,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690707692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/379893854\">said</a>:</p>\n<blockquote>\n<p>I implemented this the other day</p>\n</blockquote>\n<p>The Lean 4 version is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6306/files#diff-02b482ee01fb0c87dab1bf6870b425f19ab267f9b06787ead55d58483a76f6b6R599-R612\">here</a></p>",
        "id": 381206740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690990908
    },
    {
        "content": "<p>It's not quite clear to me whether we want <code>rid (a ⊗ₜ r) = a * algebraMap _ _ r</code> or <code>rid (a ⊗ₜ r) = r • a</code> as the defeq</p>",
        "id": 381207237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690990993
    },
    {
        "content": "<p>Ideally it would be <code>rid (a ⊗ₜ r) = MulOpposite.op r • a</code>, but that requires <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">!3#10716</a></p>",
        "id": 381207619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690991061
    },
    {
        "content": "<p>Anyway, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6417\">#6417</a> now changes <code>rid</code> to have the structure you wanted</p>",
        "id": 382573587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691404037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe/near/381207237\">said</a>:</p>\n<blockquote>\n<p>It's not quite clear to me whether we want <code>rid (a ⊗ₜ r) = a * algebraMap _ _ r</code> or <code>rid (a ⊗ₜ r) = r • a</code> as the defeq</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>: do you have any strong opinions on which one of these is the \"canonical\" defeq, or do you not care at all? This will propagate downstream to whether the base change of <code>Q</code> has the defeq:</p>\n<ul>\n<li><code>Q (a ⊗ₜ v) = a^2 * algebra_map _ _ (Q v)</code> or </li>\n<li><code>Q (a ⊗ₜ v) = Q v • a ^ 2</code>.</li>\n</ul>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/6417/files#r1285676099\">Github discussion</a> here)</p>",
        "id": 382612279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691411833
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/AlgEquiv.2EtoFun_eq_coe\">#mathlib4 &gt; AlgEquiv.toFun_eq_coe</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 382614404,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691412239
    },
    {
        "content": "<p>My instinct is not to care about what is defeq. As long as there's a lemma saying <code>Q (a ⊗ₜ v) = a^2 * algebra_map _ _ (Q v)</code> I don't care if the proof is <code>rfl</code> or not.</p>",
        "id": 382677668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691422526
    },
    {
        "content": "<p>Would you be unhappy if only the <code>Q (a ⊗ₜ v) = Q v • a ^ 2</code> lemma existed?</p>",
        "id": 382678522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691422671
    },
    {
        "content": "<p>(with a rationale like \"oh, that's the mathlib-canonical spelling, if you want it to look different you can do further rewrites yourself\")</p>",
        "id": 382678774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691422708
    },
    {
        "content": "<p>FWIW, I am finding it extraordinarily useful that I modified defeqs a few months ago such that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.lift.tmul#doc\">docs#TensorProduct.lift.tmul</a> (<code>_ : lift f (x ⊗ₜ[R] y) = f x y</code>) is now defeq</p>",
        "id": 382679194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691422788
    },
    {
        "content": "<p>It avoids slow proofs of the form <code>dsimp, rw [lift.tmul], dsimp</code></p>",
        "id": 382679781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691422870
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.rid#doc\">docs#TensorProduct.rid</a></p>",
        "id": 382685071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691423797
    },
    {
        "content": "<p>I would definitely be unhappy if the Q(av)=a^2*\\u Q(v) lemma didn't exist at all! How can that possibly not be mathlib-canonical? BTW is algebra_map a coercion yet?</p>",
        "id": 382686292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691424032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2ETensorProduct.2Erid.20as.20isomorphism.20over.20the.20larger.20.2E.2E.2E/near/382677668\">said</a>:</p>\n<blockquote>\n<p>My instinct is not to care about what is defeq. As long as there's a lemma saying <code>Q (a ⊗ₜ v) = a^2 * algebra_map _ _ (Q v)</code> I don't care if the proof is <code>rfl</code> or not.</p>\n</blockquote>\n<p>I think we found that we also need the lemma, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">QuadraticForm.baseChange_associated</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">QuadraticForm</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">associated</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.baseChange</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">associated</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">baseChange</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is that easy enough with your changes Eric?</p>",
        "id": 382687538,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691424189
    },
    {
        "content": "<p>Yeah, that one is easy</p>",
        "id": 382689053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691424386
    },
    {
        "content": "<p>Note that I don't have the full picture for what other people wrote here: it sounds like people worked on this in some secret Leiden repo</p>",
        "id": 382690137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691424567
    },
    {
        "content": "<p>Well its public but just a workshop project so it's not publicized if that makes sense, <a href=\"https://github.com/alexjbest/ant-lorentz\">https://github.com/alexjbest/ant-lorentz</a>, certainly no secrets here!</p>",
        "id": 382690651,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691424671
    },
    {
        "content": "<p>I've ended up going with <code>rid (a ⊗ₜ r) = r • a</code> since Antoine seemed to be in favor and it has the advantage of being defeq to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.rid#doc\">docs#TensorProduct.rid</a></p>",
        "id": 382691809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691424901
    },
    {
        "content": "<p>9 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.236342\">#PR reviews &gt; #6342</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 382729987,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691433718
    }
]