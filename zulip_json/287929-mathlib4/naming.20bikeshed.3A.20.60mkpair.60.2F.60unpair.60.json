[
    {
        "content": "<p>(See <a href=\"https://github.com/leanprover-community/mathlib4/pull/2324\">!4#2324</a>) There are currently the names <code>mkpair</code> and <code>unpair</code> in Data.Nat.Pairing. By the naming conventions (and consistency with all other <code>mk*</code> names in lean4, e.g. <code>mkConst</code>, <code>mkAppM</code>, etc.), <code>mkpair</code> should be <code>mkPair</code>. But <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> pointed out that <code>mkpair</code> is consistent with <code>unpair</code>, so maybe it was named this way to match.</p>\n<p>A blind application of the naming conventions gets us <code>mkPair</code> and <code>unpair</code>, but we should also consider <code>unPair</code> or leaving it as-is. For context, there is no type/declaration <code>Pair</code>—<code>unPair</code> would just be to keep it consistent with <code>mkPair</code>.</p>",
        "id": 344983609,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679958297
    },
    {
        "content": "<p>/poll <code>mkpair</code>/<code>unpair</code> naming bikeshed<br>\n<code>mkPair</code>, <code>unPair</code><br>\n<code>mkPair</code>, <code>unpair</code><br>\n<code>mkpair</code>, <code>unpair</code></p>",
        "id": 344983723,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679958343
    },
    {
        "content": "<p><code>mkpair</code> is short for \"make pair\" but <code>unpair</code> isn't short for \"un??? pair\" -- \"unpair\" is a single word, so I'm not sure what justifies <code>unPair</code>.</p>",
        "id": 344984264,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679958614
    },
    {
        "content": "<p>Right, I think the idea was just to be consistent with <code>mkPair</code> visually even though it doesn't \"make sense\", since they're more or less inverses and are used close together (e.g. theorems like <code>mkpair_unpair</code>).</p>",
        "id": 344984743,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679958874
    },
    {
        "content": "<p>By the same logic <code>mkpair</code> isn't one word, so we'd be breaking sense somehow either way! :)</p>",
        "id": 344984761,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679958889
    },
    {
        "content": "<p>Ooh, I like <code>pair</code>/<code>unpair</code>. (Was that you who added that just now, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?) <code>mk</code> makes me think we're applying a constructor, but there's no type or constructor <code>Pair</code>/<code>pair</code>, so it doesn't really fit with the other <code>mk</code>s.</p>",
        "id": 344984919,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679958968
    },
    {
        "content": "<p>I think the logic behind <code>mkPair</code> using constructor-like names is that it's the <code>Prod.mk</code> constructor for <code>Nat x Nat</code>, but using a bijection to <code>Nat</code>. (For all you know, <code>Nat x Nat</code> <em>is</em> <code>Nat</code> behind the scenes, so to speak.)</p>",
        "id": 344985221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679959146
    },
    {
        "content": "<p>Ah, I see! That <code>mk</code>s sense. :)</p>",
        "id": 344985606,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679959334
    },
    {
        "content": "<p>Seems like we have a consensus! It does however clash with a couple names in <code>Computability.Primrec</code>, so I had to explicitly use <code>Nat.pair</code> in some places and rename two lemmas (the lemmas were simply named <code>mkpair</code> (namespaced), so I renamed them to <code>nat_pair</code>).</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would you like to take a look (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2324\">!4#2324</a>) to make sure you're ok with that? Feel free to lmk if you'd rather it be different.</p>",
        "id": 345016254,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679974182
    },
    {
        "content": "<p>those namespaced lemmas should be protected</p>",
        "id": 345016325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679974219
    },
    {
        "content": "<p>The thing is that there are existing lemmas named <code>pair</code> (in the same namespace)</p>",
        "id": 345016412,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679974308
    },
    {
        "content": "<p>So renaming <code>mkpair</code> to <code>pair</code> clashes with those</p>",
        "id": 345016477,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679974334
    },
    {
        "content": "<p>did the other thread decide re: <code>natPair</code> / <code>nat_pair</code> / <code>NatPair</code> / something else?</p>",
        "id": 345016767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679974566
    },
    {
        "content": "<p>Not afaik; btw another thing that could be done here is to rename the existing one it clashes with (it's actually just one, I renamed the other for consistency)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">Primrec₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">pair</span> <span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">.</span><span class=\"n\">snd</span>\n</code></pre></div>",
        "id": 345016939,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679974698
    },
    {
        "content": "<p>I would go for <code>natPair</code> then</p>",
        "id": 345016989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679974748
    }
]