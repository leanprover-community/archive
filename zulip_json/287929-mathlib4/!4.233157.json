[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3157\">!4#3157</a> how do I solve the last three errors in this file?</p>",
        "id": 345207679,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680027405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.coprime.isPrimePow_dvd_mul</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">Nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">IsPrimePow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_zero_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">Finset.filter_singleton</span><span class=\"o\">,</span> <span class=\"n\">not_isPrimePow_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_zero_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">Finset.filter_singleton</span><span class=\"o\">,</span> <span class=\"n\">not_isPrimePow_one</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span>\n    <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">isPrimePow_nat_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hn</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hp.pow_dvd_iff_le_factorization</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"n\">Nat.factorization_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">hp.pow_dvd_iff_le_factorization</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hp.pow_dvd_iff_le_factorization</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">Finsupp.coe_add</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finsupp.not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Finsupp.not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">not_and_or</span><span class=\"o\">,</span> <span class=\"bp\">←</span>\n      <span class=\"n\">Finset.mem_inter</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorization_disjoint_of_coprime</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_bot</span> <span class=\"n\">t</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">imp_or</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 345207714,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680027417
    },
    {
        "content": "<p>In the second-last line above <code>(Nat.factorization_disjoint_of_coprime hab).le_bot t</code> does not reduce from <code>p ∈ ⊥</code> to <code>False</code>, unlike in Lean 3, but I can't figure out how to finish the reduction term-style</p>",
        "id": 345207926,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680027471
    },
    {
        "content": "<p>The other two errors are in the line<br>\n<code>Or.elim h (fun i =&gt; i.trans (dvd_mul_right _ _)) fun i =&gt; i.trans (dvd_mul_left _ _)⟩</code></p>",
        "id": 345208273,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680027561
    },
    {
        "content": "<p>OK I solved the first two errors, but what about the last one?</p>",
        "id": 345209471,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680027958
    }
]