[
    {
        "content": "<p>I think the following is well-understood, but not by me. Why does Lean 3 <code>(category_of_elements.π X).left_op</code> display as <code>Functor.leftOp (CategoryOfElements.π X)</code> in Lean 4? Dot notation is not being used. Is this something to do with \"unexpanders\", whatever they are? How can I fix this? This shows up in the unique broken proof in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3208\">!4#3208</a> , which I'm trying to fix by comparing with the lean 3 proof, but the goals are displaying differently and it makes it more annoying to figure out what's going on.</p>",
        "id": 351160711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681941822
    },
    {
        "content": "<p>What's the type of <code>CategoryOfElements.π X</code>?</p>",
        "id": 351160915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681941918
    },
    {
        "content": "<p><code>Functor.Elements X ⥤ Cᵒᵖ</code>, i.e. <code>Functor ...</code></p>",
        "id": 351160974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681941956
    },
    {
        "content": "<p>Another example in the same proof: Lean 3 <code>(category_of_elements.map f).op.obj</code> is displaying as <code>(Functor.op (CategoryOfElements.map f)).obj</code> in Lean 4.</p>",
        "id": 351161142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you can add an unexpander similar to those in the file <code>CategoryTheory/Functor/Basic</code></p>",
        "id": 351161205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681942078
    },
    {
        "content": "<p>It's just the pretty printing that's different</p>",
        "id": 351161306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681942115
    },
    {
        "content": "<p>It's not all dot notation that's broken though, is it?</p>",
        "id": 351161325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681942128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">This unexpander will pretty print `F.obj X` properly.</span>\n<span class=\"sd\">Without this, we would have `Prefunctor.obj F.toPrefunctor X`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[app_unexpander Prefunctor.obj]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandFunctorObj</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                           <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This unexpander will pretty print `F.map f` properly.</span>\n<span class=\"sd\">Without this, we would have `Prefunctor.map F.toPrefunctor f`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[app_unexpander Prefunctor.map]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandFunctorMap</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                           <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>This is gobbledegook to me.</p>",
        "id": 351161329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942131
    },
    {
        "content": "<p>1 sec</p>",
        "id": 351161348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681942140
    },
    {
        "content": "<p>How do I go about understanding it? Sounds like ultimately I'm going to have to know what's going on here for teaching if I'm rolling my own stuff.</p>",
        "id": 351161425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942184
    },
    {
        "content": "<p>My naive understanding is that this (the first one) tells lean how to pretty print terms of the form <br>\n<code>Prefunctor.obj F.toPrefunctor X Y Z ...</code> and that it should be printed as <code>F.obj X Y Z ...</code>.</p>",
        "id": 351161544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681942251
    },
    {
        "content": "<p>So I think something similar to this would work for <code>leftOp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[app_unexpander Functor.leftOp]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandFunctorObj</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leftOp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 351161811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681942375
    },
    {
        "content": "<blockquote>\n<p>How do I go about understanding it?</p>\n</blockquote>\n<p>Maybe it helps to realize that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.Unexpander#doc\">docs4#Lean.PrettyPrinter.Unexpander</a> is just an abbreviation for <code>Lean.Syntax → Lean.PrettyPrinter.UnexpandM Lean.Syntax</code>, where<code>Lean.Syntax</code> is roughly anything that can be quoted with <code> `(...) </code>, and <code>UnexpandM</code> is some monad you can probably just forget about, other than having <code>throw ()</code> for failure</p>",
        "id": 351161846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681942394
    },
    {
        "content": "<p>I'm afraid I don't know what \"quoted\" or <code> ` </code> means in this context, I'm totally lost. I don't know what <code>Lean.Syntax</code> is either. Where do I start?</p>",
        "id": 351162456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942730
    },
    {
        "content": "<p>What is <code>$_</code>? Is it related for some reason to <code>@[app_unexpander Functor.leftOp]</code>?</p>",
        "id": 351162623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942822
    },
    {
        "content": "<p>In Lean 3, <code> `(foo bar %baz) </code> matches the <code>expr</code> that you get when you write <code>foo bar x</code>, and it sets <code>baz</code> to the <code>expr</code> <code> `(x) </code>. Lean 4 is the same but with <code>$</code> instead of <code>%</code>, and <code>Syntax</code> instead of <code>Expr</code>. </p>\n<p>The <code>$_</code> is just a wildcard, because we told lean to only call our function when the head symbol is <code>Prefunctor.obj</code> so we don't bother to match it again</p>",
        "id": 351162715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681942904
    },
    {
        "content": "<p>What is <code>X</code> in <code>$(X)*</code>? Is <code>*</code> something like \"one or more\" or \"zero or more\" or something?</p>",
        "id": 351162841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681942968
    },
    {
        "content": "<p><code>X</code> is a binder like the <code>n</code> in <code>Nat.succ n</code> when matching a <code>Nat</code></p>",
        "id": 351162896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681943002
    },
    {
        "content": "<p>Btw the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">metaprogramming book</a> is a pretty good reference for most of these questions! :)</p>",
        "id": 351162970,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681943046
    },
    {
        "content": "<p>Why do we <code>set_option hygiene false</code>?</p>",
        "id": 351163027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681943062
    },
    {
        "content": "<p>See here: <a href=\"#narrow/stream/287929-mathlib4/topic/unexpanders.20for.20functors/near/338793493\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/unexpanders.20for.20functors/near/338793493</a></p>",
        "id": 351166399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681944841
    },
    {
        "content": "<p>Oh thanks! That's also very helpful. I didn't really read that thread at the time because it was all beyond me, I was busy with non port things, and didn't need to know about it. Pretty much all those things have changed in the mean time :-)</p>\n<p>At the end of the day, why is the user having to write this stuff at all? Why isn't dot notation just working? In the other thread someone referred to it as a feature request rather than a bug. Isn't my example above just a bug?</p>",
        "id": 351219105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681971745
    },
    {
        "content": "<p>There's \"dot notation\" the convenient notation to write things and \"dot notation\" having Lean make use of it too when displaying things. The first one works fine, and just because Lean isn't yet using it itself doesn't mean anything is broken. (Your example is still correct, if unwieldy, output.)</p>",
        "id": 351219788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681971968
    },
    {
        "content": "<p>I think Lean should definitely make use of dot notation when pretty printing. These unexpanders are a way to get that behavior on a case by case basis (cases where it's painful the feature is missing) until there is a general solution.</p>",
        "id": 351220061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681972083
    },
    {
        "content": "<p>I see! Thanks everyone for this illuminating thread. I understand a lot better what's going on now.</p>",
        "id": 351220720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681972307
    },
    {
        "content": "<p>OK so so far I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[app_unexpander Functor.leftOp]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandFunctorleftOp</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leftOp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[app_unexpander Functor.map]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandFunctorMap</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[app_unexpander Iso.toEquiv]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandIsotoEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[app_unexpander Iso.symm]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandIsosymm</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[app_unexpander Equiv.trans]</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandEquivtrans</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- IsColimit.homIso'</span>\n<span class=\"kd\">@[app_unexpander IsColimit.homIso']</span> <span class=\"kd\">def</span>\n  <span class=\"n\">unexpandIsColimithomIso'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">F</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">homIso'</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                 <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>and I'm still not done (although it's working great!). Am I doing it wrong? Is the idea that we don't want these, or we do want these but we don't want to have to write them, or what?</p>\n<p>By the way, I'm seeing <code>((blah).toEquiv).trans</code> with brackets in Lean 4, whereas in Lean 3 I'm seeing <code>(blah).to_equiv.trans</code>. Is there anything I can do about this?</p>",
        "id": 351238726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681977464
    }
]