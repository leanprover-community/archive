[
    {
        "content": "<p>I'm getting <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6251064816/job/17054998783?pr=7244#step:11:5\">this rather alarming CI failure</a></p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>[3777/3779] Building MathlibExtras.LibrarySearch\nerror: &gt; LEAN_PATH=./lake-packages/std/build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/Cli/build/lib:./lake-packages/proofwidgets/build/lib:./build/lib LD_LIBRARY_PATH=./build/lib /home/lean/.elan/toolchains/leanprover--lean4---v4.1.0-rc1/bin/lean ./././MathlibExtras/LibrarySearch.lean -R ././. -o ./build/lib/MathlibExtras/LibrarySearch.olean -i ./build/lib/MathlibExtras/LibrarySearch.ilean -c ./build/ir/MathlibExtras/LibrarySearch.c\nerror: stderr:\nlibc++abi: terminating due to uncaught exception of type lean::throwable: deep recursion was detected at 'interpreter' (potential solution: increase stack space in your system)\ninterpreter stacktrace:\n#1 Mathlib.Tactic.LibrarySearch.buildDiscrTree._lambda_1\n#2 Lean.Meta.DiscrTree.Trie.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_2._rarg\n#3 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_3._rarg\n#4 Lean.Meta.DiscrTree.Trie.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_2._rarg\n#5 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_3._rarg\n&lt;about another 5000 repeats of the last two lines&gt;\n#9902 Lean.Meta.DiscrTree.Trie.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_2._rarg\n#9903 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_3._rarg\n#9904 Lean.Meta.DiscrTree.Trie.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_2._rarg\n#9905 Lean.Meta.DiscrTree.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_1._rarg._lambda_1\n#9906 Lean.Meta.DiscrTree.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_1._rarg._lambda_1._boxed\n#9907 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_6._rarg\n#9908 Lean.PersistentHashMap.mapMAux._at.Lean.Meta.DiscrTree.mapArrays._spec_5._rarg\n#9909 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_6._rarg\n#9910 Lean.PersistentHashMap.mapMAux._at.Lean.Meta.DiscrTree.mapArrays._spec_5._rarg\n#9911 Array.mapMUnsafe.map._at.Lean.Meta.DiscrTree.mapArrays._spec_6._rarg\n#9912 Lean.PersistentHashMap.mapMAux._at.Lean.Meta.DiscrTree.mapArrays._spec_5._rarg\n#9913 Lean.PersistentHashMap.mapM._at.Lean.Meta.DiscrTree.mapArrays._spec_4._rarg\n#9914 Lean.Meta.DiscrTree.mapArraysM._at.Lean.Meta.DiscrTree.mapArrays._spec_1._rarg\n#9915 Mathlib.Tactic.DiscrTreeCache.mk._at.Mathlib.Tactic.LibrarySearch.buildDiscrTree._spec_4._lambda_4\n#9916 Mathlib.Tactic.DiscrTreeCache.mk._at.Mathlib.Tactic.LibrarySearch.buildDiscrTree._spec_4._lambda_4._boxed\n#9917 Mathlib.Tactic.DeclCache.mk._rarg._lambda_1\n#9918 Mathlib.Tactic.DeclCache.mk._rarg._lambda_1._boxed\n#9919 Lean.profileitM._at.Lean.Meta.synthInstance?._spec_16._rarg\n#9920 Mathlib.Tactic.DeclCache.mk._rarg._lambda_2\n#9921 Mathlib.Tactic.DeclCache.mk._rarg._lambda_2._boxed\n#9922 Mathlib.Tactic.Cache.get._rarg._lambda_6\n</code></pre></div>",
        "id": 392607060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695420210
    },
    {
        "content": "<p>Curiously, I cannot reproduce locally!</p>",
        "id": 392616241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695425535
    },
    {
        "content": "<p>You two have different <code>ulimit -s</code> values probably</p>",
        "id": 392658528,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695455763
    },
    {
        "content": "<p>It would be good to homogenize that setting somewhere along the path. In Lake?</p>",
        "id": 392658651,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695455864
    },
    {
        "content": "<p>Is the assumption then that this isn't an infinite loop, and that my PR genuinely just needs an awful lot of stack space?</p>",
        "id": 392660196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695457003
    },
    {
        "content": "<p>It looks like it's linear in the height of the tree. In which case that might not be a reasonable height for a discrimination tree!</p>",
        "id": 392661383,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695457899
    },
    {
        "content": "<p>Does this suggest that recursion-based processing of discrimination trees is a bad idea?</p>",
        "id": 392665118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695459641
    },
    {
        "content": "<p>Or simply that we should expect high stack usage?</p>",
        "id": 392665152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695459664
    },
    {
        "content": "<p>The problematic code is in <code>Mathlib.Lean.Meta.DiscrTree</code>, the implementation of <code>DiscrTree.mapArrays</code>. I wonder if the monadic <code>mapM</code> on arrays is a problem, stack-space wise? It seems only a pure map is needed here in the end. Although the stack trace doesn’t look like the array length matters…</p>",
        "id": 392666528,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695460407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, do you have a branch exhibiting this problem? You workflow log seems to be for some previous commit?</p>",
        "id": 392674241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695463434
    },
    {
        "content": "<p>It is indeed for a previous commit on the branch</p>",
        "id": 392674328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695463457
    },
    {
        "content": "<p>I made a non-monadic version of <code>DiscrTree.mapArrays</code>.</p>",
        "id": 392674332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695463460
    },
    {
        "content": "<p>Could you make a branch for me, and tell me the name?</p>",
        "id": 392674364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695463475
    },
    {
        "content": "<p>Well, there's a \"branch\" called <code>5654bed32ccdb8ae40830e4094050a385fd4b299</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 392674463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695463518
    },
    {
        "content": "<p>(which you can get locally with <code>git fetch origin 5654bed32ccdb8ae40830e4094050a385fd4b299</code>)</p>",
        "id": 392674496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695463535
    },
    {
        "content": "<p>This is a commit from <a href=\"https://github.com/leanprover-community/mathlib4/pull/7244\">#7244</a></p>",
        "id": 392674764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695463636
    },
    {
        "content": "<p>Okay, you can try merging <a href=\"https://github.com/leanprover-community/mathlib4/tree/DiscrTree.mapArrays\">branch#DiscrTree.mapArrays</a> in and see if it helps.</p>",
        "id": 392674843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695463674
    },
    {
        "content": "<p>(If you'd made a branch for me I would have done the merge for you, and even followed up to check the CI...)</p>",
        "id": 392674967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695463715
    },
    {
        "content": "<p>That branch doesn't appear to exist</p>",
        "id": 392676870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695464507
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/eric_CI_troubles\">branch#eric_CI_troubles</a></p>",
        "id": 392678514,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695465145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , isn’t the monadic version unused anyways and can be replaced with the pure one in any case? (Unless I mis-grepped)</p>",
        "id": 392678823,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695465333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/392674967\">said</a>:</p>\n<blockquote>\n<p>(If you'd made a branch for me I would have done the merge for you, and even followed up to check the CI...)</p>\n</blockquote>\n<p>I've cherry-picked your change into <a href=\"https://github.com/leanprover-community/mathlib4/pull/7244\">#7244</a>, as the head of that branch is still failing in the same way (and I'm done with the other changes now)</p>",
        "id": 392679709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695466058
    },
    {
        "content": "<p>Thanks for trying Scott, but I'm afraid this didn't help</p>",
        "id": 392692218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695471879
    },
    {
        "content": "<p>Can you reproduce locally?</p>",
        "id": 392756619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695516485
    },
    {
        "content": "<p>I have some more code to inspect <code>DiscrTree</code>s, I can send you this to try to find what is going wrong.</p>",
        "id": 392756658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695516511
    },
    {
        "content": "<p>On <code>master</code>, we already have some excessively long entries in the DiscrTree (2596!) I'm guessing you've just set a new record and gone over some bound.</p>",
        "id": 392756846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695516606
    },
    {
        "content": "<p>Presumably the fix is to truncate the keys before we insert them into the DiscrTree.</p>",
        "id": 392756871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695516623
    },
    {
        "content": "<p>Current longest key is for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PowerBasis.quotientEquivQuotientMinpolyMap_symm_apply#src\">src#PowerBasis.quotientEquivQuotientMinpolyMap_symm_apply</a></p>",
        "id": 392756967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695516694
    },
    {
        "content": "<p>This is the current \"spectrum\" of key lengths in the <code>exact?</code> discrimination tree:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">19243</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">8706</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">10585</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">8973</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">10958</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">10332</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">9878</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">8599</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">7929</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">7187</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">,</span> <span class=\"mi\">8856</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"mi\">6699</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">13</span><span class=\"o\">,</span> <span class=\"mi\">8449</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"mi\">5550</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">5543</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"mi\">5001</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">17</span><span class=\"o\">,</span> <span class=\"mi\">5433</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"mi\">4457</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">19</span><span class=\"o\">,</span> <span class=\"mi\">4319</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">3699</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">21</span><span class=\"o\">,</span> <span class=\"mi\">3402</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">22</span><span class=\"o\">,</span> <span class=\"mi\">3227</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">23</span><span class=\"o\">,</span> <span class=\"mi\">3397</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">24</span><span class=\"o\">,</span> <span class=\"mi\">2777</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">25</span><span class=\"o\">,</span> <span class=\"mi\">3211</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"mi\">2355</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">27</span><span class=\"o\">,</span> <span class=\"mi\">2334</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">28</span><span class=\"o\">,</span> <span class=\"mi\">2422</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">29</span><span class=\"o\">,</span> <span class=\"mi\">1933</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">30</span><span class=\"o\">,</span> <span class=\"mi\">1844</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">31</span><span class=\"o\">,</span> <span class=\"mi\">1807</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"mi\">1592</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">33</span><span class=\"o\">,</span> <span class=\"mi\">1595</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">34</span><span class=\"o\">,</span> <span class=\"mi\">1624</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">35</span><span class=\"o\">,</span> <span class=\"mi\">1293</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">1310</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">1164</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">38</span><span class=\"o\">,</span> <span class=\"mi\">1263</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">39</span><span class=\"o\">,</span> <span class=\"mi\">1122</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">40</span><span class=\"o\">,</span> <span class=\"mi\">1138</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">41</span><span class=\"o\">,</span> <span class=\"mi\">1038</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"mi\">950</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"mi\">905</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">44</span><span class=\"o\">,</span> <span class=\"mi\">743</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">45</span><span class=\"o\">,</span> <span class=\"mi\">776</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">46</span><span class=\"o\">,</span> <span class=\"mi\">753</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">47</span><span class=\"o\">,</span> <span class=\"mi\">740</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">48</span><span class=\"o\">,</span> <span class=\"mi\">692</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">49</span><span class=\"o\">,</span> <span class=\"mi\">708</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">50</span><span class=\"o\">,</span> <span class=\"mi\">624</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">51</span><span class=\"o\">,</span> <span class=\"mi\">614</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">52</span><span class=\"o\">,</span> <span class=\"mi\">645</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">53</span><span class=\"o\">,</span> <span class=\"mi\">503</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">54</span><span class=\"o\">,</span> <span class=\"mi\">517</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">55</span><span class=\"o\">,</span> <span class=\"mi\">580</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">56</span><span class=\"o\">,</span> <span class=\"mi\">411</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">57</span><span class=\"o\">,</span> <span class=\"mi\">457</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">58</span><span class=\"o\">,</span> <span class=\"mi\">478</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">59</span><span class=\"o\">,</span> <span class=\"mi\">461</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">60</span><span class=\"o\">,</span> <span class=\"mi\">398</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">61</span><span class=\"o\">,</span> <span class=\"mi\">366</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">62</span><span class=\"o\">,</span> <span class=\"mi\">327</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">63</span><span class=\"o\">,</span> <span class=\"mi\">339</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"o\">,</span> <span class=\"mi\">341</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">65</span><span class=\"o\">,</span> <span class=\"mi\">332</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">66</span><span class=\"o\">,</span> <span class=\"mi\">295</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">67</span><span class=\"o\">,</span> <span class=\"mi\">266</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">68</span><span class=\"o\">,</span> <span class=\"mi\">297</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">69</span><span class=\"o\">,</span> <span class=\"mi\">288</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">70</span><span class=\"o\">,</span> <span class=\"mi\">283</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">71</span><span class=\"o\">,</span> <span class=\"mi\">297</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">72</span><span class=\"o\">,</span> <span class=\"mi\">261</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">73</span><span class=\"o\">,</span> <span class=\"mi\">253</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">74</span><span class=\"o\">,</span> <span class=\"mi\">223</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">75</span><span class=\"o\">,</span> <span class=\"mi\">215</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">76</span><span class=\"o\">,</span> <span class=\"mi\">238</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">77</span><span class=\"o\">,</span> <span class=\"mi\">214</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">78</span><span class=\"o\">,</span> <span class=\"mi\">213</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">79</span><span class=\"o\">,</span> <span class=\"mi\">227</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">80</span><span class=\"o\">,</span> <span class=\"mi\">200</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">81</span><span class=\"o\">,</span> <span class=\"mi\">181</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">82</span><span class=\"o\">,</span> <span class=\"mi\">185</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">83</span><span class=\"o\">,</span> <span class=\"mi\">188</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">84</span><span class=\"o\">,</span> <span class=\"mi\">153</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">85</span><span class=\"o\">,</span> <span class=\"mi\">195</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">86</span><span class=\"o\">,</span> <span class=\"mi\">150</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">87</span><span class=\"o\">,</span> <span class=\"mi\">170</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">88</span><span class=\"o\">,</span> <span class=\"mi\">133</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">89</span><span class=\"o\">,</span> <span class=\"mi\">149</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">90</span><span class=\"o\">,</span> <span class=\"mi\">136</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">91</span><span class=\"o\">,</span> <span class=\"mi\">146</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">92</span><span class=\"o\">,</span> <span class=\"mi\">121</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">93</span><span class=\"o\">,</span> <span class=\"mi\">113</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">94</span><span class=\"o\">,</span> <span class=\"mi\">139</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">95</span><span class=\"o\">,</span> <span class=\"mi\">131</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">96</span><span class=\"o\">,</span> <span class=\"mi\">130</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">97</span><span class=\"o\">,</span> <span class=\"mi\">96</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">98</span><span class=\"o\">,</span> <span class=\"mi\">116</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">99</span><span class=\"o\">,</span> <span class=\"mi\">123</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">115</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">101</span><span class=\"o\">,</span> <span class=\"mi\">91</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">102</span><span class=\"o\">,</span> <span class=\"mi\">73</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">103</span><span class=\"o\">,</span> <span class=\"mi\">96</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">104</span><span class=\"o\">,</span> <span class=\"mi\">97</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">105</span><span class=\"o\">,</span> <span class=\"mi\">88</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">106</span><span class=\"o\">,</span> <span class=\"mi\">99</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">107</span><span class=\"o\">,</span> <span class=\"mi\">97</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">108</span><span class=\"o\">,</span> <span class=\"mi\">86</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">109</span><span class=\"o\">,</span> <span class=\"mi\">73</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">110</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">111</span><span class=\"o\">,</span> <span class=\"mi\">73</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">112</span><span class=\"o\">,</span> <span class=\"mi\">81</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">113</span><span class=\"o\">,</span> <span class=\"mi\">76</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">114</span><span class=\"o\">,</span> <span class=\"mi\">65</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">115</span><span class=\"o\">,</span> <span class=\"mi\">47</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">116</span><span class=\"o\">,</span> <span class=\"mi\">78</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">117</span><span class=\"o\">,</span> <span class=\"mi\">68</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">118</span><span class=\"o\">,</span> <span class=\"mi\">75</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">119</span><span class=\"o\">,</span> <span class=\"mi\">58</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">120</span><span class=\"o\">,</span> <span class=\"mi\">59</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">121</span><span class=\"o\">,</span> <span class=\"mi\">70</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">122</span><span class=\"o\">,</span> <span class=\"mi\">46</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">123</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">124</span><span class=\"o\">,</span> <span class=\"mi\">64</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">125</span><span class=\"o\">,</span> <span class=\"mi\">44</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">126</span><span class=\"o\">,</span> <span class=\"mi\">57</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">127</span><span class=\"o\">,</span> <span class=\"mi\">46</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">128</span><span class=\"o\">,</span> <span class=\"mi\">60</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">129</span><span class=\"o\">,</span> <span class=\"mi\">47</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">130</span><span class=\"o\">,</span> <span class=\"mi\">55</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">131</span><span class=\"o\">,</span> <span class=\"mi\">49</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">132</span><span class=\"o\">,</span> <span class=\"mi\">52</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">133</span><span class=\"o\">,</span> <span class=\"mi\">50</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">134</span><span class=\"o\">,</span> <span class=\"mi\">51</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">135</span><span class=\"o\">,</span> <span class=\"mi\">36</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">136</span><span class=\"o\">,</span> <span class=\"mi\">31</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">137</span><span class=\"o\">,</span> <span class=\"mi\">38</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">138</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">139</span><span class=\"o\">,</span> <span class=\"mi\">34</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">140</span><span class=\"o\">,</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">141</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">142</span><span class=\"o\">,</span> <span class=\"mi\">35</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">143</span><span class=\"o\">,</span> <span class=\"mi\">40</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">144</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">145</span><span class=\"o\">,</span> <span class=\"mi\">43</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">146</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">147</span><span class=\"o\">,</span> <span class=\"mi\">29</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">148</span><span class=\"o\">,</span> <span class=\"mi\">19</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">149</span><span class=\"o\">,</span> <span class=\"mi\">24</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">150</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">151</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">152</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">153</span><span class=\"o\">,</span> <span class=\"mi\">27</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">154</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">155</span><span class=\"o\">,</span> <span class=\"mi\">22</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">156</span><span class=\"o\">,</span> <span class=\"mi\">27</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">157</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">158</span><span class=\"o\">,</span> <span class=\"mi\">25</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">159</span><span class=\"o\">,</span> <span class=\"mi\">19</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">160</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">161</span><span class=\"o\">,</span> <span class=\"mi\">33</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">162</span><span class=\"o\">,</span> <span class=\"mi\">21</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">163</span><span class=\"o\">,</span> <span class=\"mi\">38</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">164</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">165</span><span class=\"o\">,</span> <span class=\"mi\">25</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">166</span><span class=\"o\">,</span> <span class=\"mi\">28</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">167</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">168</span><span class=\"o\">,</span> <span class=\"mi\">25</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">169</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">170</span><span class=\"o\">,</span> <span class=\"mi\">19</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">171</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">172</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">173</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">174</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">175</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">176</span><span class=\"o\">,</span> <span class=\"mi\">26</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">177</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">178</span><span class=\"o\">,</span> <span class=\"mi\">21</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">179</span><span class=\"o\">,</span> <span class=\"mi\">22</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">180</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">181</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">182</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">183</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">184</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">185</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">186</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">187</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">188</span><span class=\"o\">,</span> <span class=\"mi\">17</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">189</span><span class=\"o\">,</span> <span class=\"mi\">21</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">190</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">191</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">192</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">193</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">194</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">195</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">196</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">197</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">198</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">199</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">201</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">202</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">203</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">204</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">205</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">206</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">207</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">208</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">209</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">210</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">211</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">212</span><span class=\"o\">,</span> <span class=\"mi\">13</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">213</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">214</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">215</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">216</span><span class=\"o\">,</span> <span class=\"mi\">19</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">217</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">218</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">219</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">220</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">221</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">222</span><span class=\"o\">,</span> <span class=\"mi\">14</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">223</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">224</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">225</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">226</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">227</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">228</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">229</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">230</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">231</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">232</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">233</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">234</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">235</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">236</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">237</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">238</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">239</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">240</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">241</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">242</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">243</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">244</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">245</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">246</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">247</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">248</span><span class=\"o\">,</span> <span class=\"mi\">11</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">249</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">250</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">251</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">252</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">253</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">254</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">255</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">256</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">257</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">258</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">259</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">260</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">261</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">262</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">263</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">264</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">265</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">266</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">267</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">268</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">269</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">270</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">271</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">272</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">273</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">274</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">275</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">276</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">277</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">278</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">279</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">280</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">281</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">282</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">284</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">285</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">286</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">287</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">288</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">289</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">290</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">291</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">292</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">293</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">295</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">296</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">297</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">298</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">299</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">300</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">301</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">302</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">303</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">304</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">305</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">306</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">307</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">308</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">309</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">310</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">312</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">314</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">315</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">316</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">317</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">318</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">319</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">320</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">321</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">323</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">324</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">325</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">326</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">327</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">328</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">329</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">330</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">331</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">332</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">333</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">334</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">336</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">338</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">339</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">340</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">341</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">342</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">343</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">344</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">346</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">347</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">348</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">349</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">350</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">352</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">353</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">354</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">355</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">356</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">357</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">358</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">359</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">360</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">361</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">362</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">364</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">367</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">368</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">369</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">372</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">373</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">374</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">375</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">379</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">382</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">384</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">385</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">386</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">387</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">388</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">392</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">393</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">394</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">395</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">396</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">397</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">398</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">401</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">403</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">404</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">406</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">407</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">409</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">410</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">411</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">414</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">415</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">416</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">417</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">419</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">421</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">422</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">423</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">424</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">425</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">426</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">428</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">429</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">430</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">431</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">432</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">433</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">436</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">438</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">439</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">441</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">442</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">449</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">451</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">453</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">454</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">459</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">461</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">462</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">466</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">471</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">472</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">474</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">475</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">481</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">485</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">488</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">489</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">490</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">492</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">494</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">499</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">501</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">503</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">509</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">510</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">511</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">512</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">513</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">515</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">517</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">518</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">520</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">521</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">524</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">525</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">533</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">535</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">539</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">544</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">545</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">549</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">554</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">555</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">560</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">566</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">570</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">575</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">582</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">585</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">587</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">591</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">592</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">595</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">597</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">598</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">599</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">602</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">606</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">608</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">611</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">612</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">613</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">614</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">619</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">621</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">626</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">628</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">635</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">657</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">667</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">676</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">693</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">697</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">717</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">723</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">743</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">755</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">766</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">771</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">773</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">777</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">812</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">813</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">826</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">831</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">845</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">852</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">895</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">926</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">960</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">965</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">1187</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1376</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1397</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1482</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1543</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1572</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1660</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1710</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1968</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"mi\">2053</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2597</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 392760105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695518358
    },
    {
        "content": "<p>I propose we just truncate at 1000. This will be \"safe\" for this stackoverflow issue, and affects vanishingly few lemmas.</p>\n<p>It's possible that truncating won't even prevent those few lemmas from being applied (possibly if we truncate carefully).</p>\n<p>However I'm inclined to not spend the time investigating that, and just leave a note.</p>",
        "id": 392760519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695518585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, can I leave <a href=\"https://github.com/leanprover-community/mathlib4/pull/7345\">#7345</a> in your hands?</p>",
        "id": 392761479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695519121
    },
    {
        "content": "<p>This is a trie data structure, right? We could implement path compression: a sequence of degree one nodes without associated values is stored in a flat array. Should also greatly reduce the footprint of the trie.</p>",
        "id": 392792826,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695541018
    },
    {
        "content": "<p>I see more optimization potential there (array of tuples looks more expensive in terms of memory footprint and cache lines than a tuple of arrays). The DiscrTree is used all over the place, so maybe worthwhile to see what middle-hanging fruit there is left to pluck?</p>",
        "id": 392794085,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695541607
    },
    {
        "content": "<p>Looking into optimizations would be great as we do use it all over the place! But also it is an approximating data structure. We should evaluate whether there is even any benefit of keys of length 1000 compared to, say, 100, or even 10.</p>",
        "id": 392794269,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695541695
    },
    {
        "content": "<p>If we had dependent arrays we could safely build compact data structures (e.g. a <code>ArrayPair a b</code> stored as a single array with 2n elements).</p>",
        "id": 392795933,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695542596
    },
    {
        "content": "<p>(see &lt;<a href=\"#narrow/stream/287929-mathlib4/topic/More.20compact.20DiscrTree\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/More.20compact.20DiscrTree</a>&gt; for a possible way to make that data structure smaller and much less likely to cause stack issues.)</p>",
        "id": 392843766,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695569280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/392761479\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, can I leave <a href=\"https://github.com/leanprover-community/mathlib4/pull/7345\">#7345</a> in your hands?</p>\n</blockquote>\n<p>I tested it but unfortunately it didn't help.</p>",
        "id": 393063418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695660548
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2577\">https://github.com/leanprover/lean4/pull/2577</a> should help reliably, but it's not decided yet if that change will go in</p>",
        "id": 393112726,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695676621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> there's a toolchain for that PR as leanprover/lean4-pr-releases:pr-release-2577. Could you test your branch against that?</p>\n<p>I'm worried that if truncating at 1000 didn't help, we are misdiagnosing the problem.</p>",
        "id": 393129376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695684476
    },
    {
        "content": "<p>I likely won't have any time to do that tomorrow, but feel free to push whatever to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7244\">#7244</a> to diagnose as long as you don't rewrite the history of commits authored by me</p>",
        "id": 393129487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695684553
    },
    {
        "content": "<p>(force-pushing away my cherry-pick of your change is fine)</p>",
        "id": 393129506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695684574
    },
    {
        "content": "<p>No hurry. <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>'s <a href=\"https://github.com/leanprover/lean4/pull/2577\">lean4#2577</a> may not happen quickly, in any case.</p>",
        "id": 393129631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695684652
    },
    {
        "content": "<p>(relatedly, a review of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7237\">#7237</a> would substantially decrease the size of that PR)</p>",
        "id": 393129634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695684655
    },
    {
        "content": "<p>I assume you mean <a href=\"https://github.com/leanprover/lean4/pull/2577\">lean4#2577</a>?</p>",
        "id": 393129667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695684687
    },
    {
        "content": "<p>I pushed a CPS’sed and thus tail-recursive implementation of <code>Trie.mapArray</code> to <a href=\"https://github.com/leanprover-community/mathlib4/pull/7244\">#7244</a>… but it still overflows the stack. <br>\nIt says “interpreter stacktrace” – does the interpreter not perform tail-calls without using stack space?<br>\nAnd is it expected that there is an interpreter involved, shouldn’t this be using compiled code?</p>",
        "id": 393212906,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695727436
    },
    {
        "content": "<p>Is there a need for this to be monadic?</p>",
        "id": 393214020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695727909
    },
    {
        "content": "<p>CPS'ing this function doesn't help, you still will get a giant stack when evaluating the closure you have built up</p>",
        "id": 393214228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695727997
    },
    {
        "content": "<p>No, but switching to a pure <code>mapArray</code> didn’t help, Scott tried that already (see <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/392674332\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/392674332</a>)</p>",
        "id": 393214229,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695727997
    },
    {
        "content": "<p>Hmm, I see. I was expecting that if each closure itself continues in a tail-recursive way, no stack would be used.</p>",
        "id": 393214315,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728042
    },
    {
        "content": "<p>(Of course, the nested closures would be giant on the heap, but that’s heap space then.)</p>",
        "id": 393214398,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728066
    },
    {
        "content": "<p>this is the interpreter stack we're talking about, it's already \"on the heap\"</p>",
        "id": 393214456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728089
    },
    {
        "content": "<p>So the interpreter doesn’t do tail-call optimization?</p>",
        "id": 393214533,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728120
    },
    {
        "content": "<p>I ... don't think so?</p>",
        "id": 393214619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728158
    },
    {
        "content": "<p>the compiler is the one that does TCO</p>",
        "id": 393214696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728173
    },
    {
        "content": "<p>including the byte code compiler which prepares things for the interpreter</p>",
        "id": 393214723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728189
    },
    {
        "content": "<p>Ok, then I was too optimistic :-)</p>",
        "id": 393214978,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728275
    },
    {
        "content": "<p>But what about the other question: Why is this interpreted, and not compiled? Should it be that way?</p>",
        "id": 393215065,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728292
    },
    {
        "content": "<p>why would it be compiled? Isn't it just an <code>#eval</code> in <code>MathlibExtras</code>?</p>",
        "id": 393215233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728349
    },
    {
        "content": "<p>(It seems that In src/library/compiler/ir_interpreter.cpp has support for non-mutual tail-recursion, but no other mentions of <code>tail</code> in that file.)</p>",
        "id": 393215412,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728417
    },
    {
        "content": "<p>I am still ignorant of when things are evaluated/executed how :-).<br>\nMaybe again optimistically, I’d assume it would use compiled code when evaluating imported things – the intepreter code says “Whenever possible, we try to switch to native code by checking for the mangled symbol”</p>\n<p>So if we’d rewrite that from being an <code>#eval</code> to a proper executable that loads <code>Mathlib</code> from it’s <code>main</code> function it would be using compiled?</p>",
        "id": 393215821,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728584
    },
    {
        "content": "<p>Would it make a difference whether <code>Trie.mapArray</code> is defined in mathlib, std or init?</p>",
        "id": 393215880,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695728616
    },
    {
        "content": "<p>Here's a slightly cleaned up version of the IR for these two functions (from <code>set_option trace.compiler.ir.result true</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">go._rarg._lambda_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">u8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.DiscrTree.Trie.node</span><span class=\"o\">]</span> <span class=\"n\">x_2</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_3</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_6</span>\n<span class=\"kd\">def</span> <span class=\"n\">go._rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">u8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_3</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"bp\">◾</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">box</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">go._rarg._lambda_1._boxed</span> <span class=\"n\">x_11</span> <span class=\"n\">x_8</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">goA._rarg</span> <span class=\"n\">x_1</span> <span class=\"bp\">◾</span> <span class=\"n\">x_3</span> <span class=\"n\">x_7</span> <span class=\"n\">x_10</span> <span class=\"n\">x_12</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_13</span>\n<span class=\"kd\">def</span> <span class=\"n\">goA._rarg._lambda_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">u8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_1</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.push</span> <span class=\"bp\">◾</span> <span class=\"n\">x_2</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">goA._rarg</span> <span class=\"n\">x_3</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span> <span class=\"n\">x_5</span> <span class=\"n\">x_9</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_10</span>\n<span class=\"kd\">def</span> <span class=\"n\">goA._rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">u8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"n\">x_7</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_6</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_10</span>\n  <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.get</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_12</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_13</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">box</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">goA._rarg._lambda_1._boxed</span> <span class=\"n\">x_12</span> <span class=\"n\">x_5</span> <span class=\"n\">x_14</span> <span class=\"n\">x_3</span> <span class=\"n\">x_4</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">go._rarg</span> <span class=\"n\">x_1</span> <span class=\"bp\">◾</span> <span class=\"n\">x_3</span> <span class=\"n\">x_13</span> <span class=\"n\">x_15</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_16</span>\n</code></pre></div>",
        "id": 393216381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728786
    },
    {
        "content": "<p>One thing that immediately sticks out is that if the interpreter wanted to notice that e.g. the call to <code>go._rarg</code> on the second to last line is a tail call it would have to look ahead to the <code>ret</code> instruction</p>",
        "id": 393216586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728881
    },
    {
        "content": "<p>IRs designed for tail calls make this syntactically obvious with a call like <code>ret go._rarg x_1 ◾ x_3 x_13 x_15</code>, so this bodes ill for the IR having native tail call support</p>",
        "id": 393216807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695728960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/393215821\">said</a>:</p>\n<blockquote>\n<p>Maybe again optimistically, I’d assume it would use compiled code when evaluating imported things – the intepreter code says “Whenever possible, we try to switch to native code by checking for the mangled symbol”</p>\n</blockquote>\n<p>That's the <code>precompileImports</code> setting. We don't use it in mathlib because it has issues with having to dynamically link hundreds or thousands of files, which seems not to be an intended use case</p>",
        "id": 393217099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695729078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CI.20failure.20when.20building.20MathlibExtras/near/393215821\">said</a>:</p>\n<blockquote>\n<p>So if we’d rewrite that from being an <code>#eval</code> to a proper executable that loads <code>Mathlib</code> from it’s <code>main</code> function it would be using compiled?</p>\n</blockquote>\n<p>Yes, if you ran it as an executable (e.g. like <code>lake exe cache</code>, which is compiled).</p>\n<blockquote>\n<p>Would it make a difference whether Trie.mapArray is defined in mathlib, std or init?</p>\n</blockquote>\n<p>No, you would have to compile any dependencies in order to make an executable, so it would be compiled no matter where it ends up (although you probably want to not pull in too much of mathlib to compile this executable)</p>",
        "id": 393217647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695729287
    },
    {
        "content": "<p>actually, it seems the interpreter does have tail recursion detection after all:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"c1\">// tail recursion?</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr_tag</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expr_kind</span><span class=\"o\">::</span><span class=\"n\">FAp</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">expr_fap_fun</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">get_frame</span><span class=\"p\">().</span><span class=\"n\">m_fn</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span>\n<span class=\"w\">                        </span><span class=\"n\">fn_body_tag</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">fn_body_kind</span><span class=\"o\">::</span><span class=\"n\">Ret</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">arg_is_irrelevant</span><span class=\"p\">(</span><span class=\"n\">fn_body_ret_arg</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span>\n<span class=\"w\">                        </span><span class=\"n\">arg_var_id</span><span class=\"p\">(</span><span class=\"n\">fn_body_ret_arg</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">fn_body_vdecl_var</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>",
        "id": 393218091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695729463
    },
    {
        "content": "<p>That’s what I saw, too. But that’s only recursion, not arbitrary calls, right?</p>",
        "id": 393218266,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695729515
    },
    {
        "content": "<p>yeah, the first line is checking if it is a full application to the current function</p>",
        "id": 393218338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695729540
    },
    {
        "content": "<p>In any case I think the proper way to do this iteratively is using an explicit stack</p>",
        "id": 393218513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695729601
    },
    {
        "content": "<p>Let me try turning this into a single tail-recursive function, just to see if that optimization kicks in :-)</p>",
        "id": 393219435,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695729944
    },
    {
        "content": "<blockquote>\n<p>We don't use it in mathlib because it has issues with having to dynamically link hundreds or thousands of files, which seems not to be an intended use case</p>\n</blockquote>\n<p>I see that this would be expensive.<br>\nBut I am a bit surprised. Do do all the tactics like <code>simp</code> etc. run always completely interpreted? Isn’t this significantly slower than if we could run all meta-code in compiled form? (Is that part of what Sebastian wants to solve by having different import for meta and non-meta definitions)?</p>",
        "id": 393220062,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695730181
    },
    {
        "content": "<p>no, things from init/lean/lake are compiled</p>",
        "id": 393220113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695730202
    },
    {
        "content": "<p>Ah, if <code>mapArrays</code> was defined in init, it  <em>would</em> have avoided the interpreter here.</p>",
        "id": 393221266,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695730643
    },
    {
        "content": "<p>Thanks anyways, that was very helpful. Just to double check that I got this right:<br>\nIn mathlib, meta-code (tactics, elaboration) is performed using compiled code if its defined in the <code>lean</code> repo, but if it’s defined in <code>std</code> or <code>aesop</code> or <code>mathlib</code>, it’s executed by the IR interpreter.<br>\nIn particular, all the data structures defined in <code>std</code>, and operations in <code>std</code> for existing data structures, are not necessary as fast as they could be.</p>",
        "id": 393222107,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695731005
    },
    {
        "content": "<p>here's my attempt at turning this into a single tail-recursive function with an explicit stack:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Cont</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Key</span> <span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Key</span> <span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Key</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">State</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Key</span> <span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Key</span> <span class=\"n\">s</span> <span class=\"bp\">×</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n\n<span class=\"sd\">/-- Apply a monadic function to the array of values at each node in a `DiscrTree`. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Trie.mapArrays</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">t</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n<span class=\"n\">where</span>\n  <span class=\"kd\">@[inline]</span> <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Cont</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">State</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mkEmpty</span> <span class=\"n\">cs.size</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n  <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">vs'</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs'.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cs.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cs.get</span> <span class=\"o\">⟨</span><span class=\"n\">cs'.size</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n      <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">vs'</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"n\">key</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs'</span> <span class=\"n\">cs'</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ret</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">vs'</span> <span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"n\">key</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">c'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"n\">vs'</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">cs'.push</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">))</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 393222174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695731041
    },
    {
        "content": "<p>yes to the stuff about compilation in std/aesop/mathlib</p>",
        "id": 393222414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695731137
    },
    {
        "content": "<p>Nice; is that a straight forward defunctionalization of the CPS variant? </p>\n<p>Here is another variant, using arrays for the explicit stack (essentially an implicit zipper). Fun puzzle indeed :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Apply a function to the array of values at each node in a `DiscrTree`. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Trie.mapArrays</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs0</span> <span class=\"n\">cs0</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n  <span class=\"n\">go</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">cs0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"n\">parents</span> <span class=\"n\">cs'</span> <span class=\"n\">vs'</span> <span class=\"n\">i</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">cs.size</span> <span class=\"k\">then</span> <span class=\"c1\">-- move down</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs0</span> <span class=\"n\">cs0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cs.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n      <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">parents.push</span> <span class=\"o\">(</span><span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">cs0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs'</span> <span class=\"n\">cs'</span>\n      <span class=\"k\">if</span> <span class=\"n\">parents.isEmpty</span> <span class=\"k\">then</span> <span class=\"c1\">-- we are done</span>\n        <span class=\"n\">t</span>\n      <span class=\"k\">else</span> <span class=\"c1\">-- move up one level</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">parents.back</span>\n        <span class=\"n\">go</span> <span class=\"n\">parents.pop</span> <span class=\"o\">(</span><span class=\"n\">cs'.push</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">vs'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">cs</span>\n</code></pre></div>",
        "id": 393226135,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695732537
    },
    {
        "content": "<p>I don't know whether it is better to use an array or a list here; the <code>Cont</code> type is list-like although it is a custom inductive so that it gets a flatter representation</p>",
        "id": 393227370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695732938
    },
    {
        "content": "<p>in your case you probably want to also use a custom inductive for the elements of the <code>parents</code> array because otherwise you need 5 allocations for the tuples</p>",
        "id": 393227499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695732977
    },
    {
        "content": "<p>I mean, this is all mostly just idle finger exercises. I don't think we should have to rewrite this function, and instead the trie  shouldn’t be excessively deep.</p>",
        "id": 393227789,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733089
    },
    {
        "content": "<p>or lean should just get good and handle deep stacks</p>",
        "id": 393227869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733122
    },
    {
        "content": "<p>s/or/and/ :-)</p>",
        "id": 393227945,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733144
    },
    {
        "content": "<p>another possibility is to detect the case when the array has length 1 and tail recurse then</p>",
        "id": 393228185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733208
    },
    {
        "content": "<p>because I'm guessing that most of the deep recursion is coming from non-branching nodes</p>",
        "id": 393228270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733233
    },
    {
        "content": "<p>Yes, definitely – that’s why I am compressing them  in <a href=\"https://github.com/leanprover/lean4/pull/2557\">lean4#2557</a>. But you’d still need to pass some form of context or continuation to rebuild that path here, wouldn’t you?</p>",
        "id": 393228489,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733292
    },
    {
        "content": "<p>I am still wondering what to think of meta code from std not being compiled…<br>\ndo we have a sense of how much slow down this causes? Both for compiling mathlib, but also for things like people running <code>apply</code> interactively?<br>\nIs it possible to <code>precompileImports</code> selectively (e.g.  “precompile all of <code>Std</code>, <code>Mathlib.Meta</code>, <code>Mathlib.Tactics</code>”)</p>",
        "id": 393228786,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Trie.mapArrays</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"n\">id</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs</span> <span class=\"n\">children</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">children.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">children</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n      <span class=\"n\">go</span> <span class=\"n\">t'</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)])</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children.map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">t'.mapArrays</span> <span class=\"n\">f</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 393229211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733525
    },
    {
        "content": "<p>I think it's like a 20%-40% speedup IIRC</p>",
        "id": 393229544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733645
    },
    {
        "content": "<p>but it helps less than you might think because most of the heavy lifting tactics are compiled</p>",
        "id": 393229613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733671
    },
    {
        "content": "<p><code>norm_num</code> and <code>ring</code> benefit from compilation</p>",
        "id": 393229724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733696
    },
    {
        "content": "<p>I'm not sure what you mean by running <code>apply</code> interactively</p>",
        "id": 393229887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733753
    },
    {
        "content": "<p><code>apply</code> is compiled</p>",
        "id": 393229902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733760
    },
    {
        "content": "<p>No, it is not currently possible to use <code>precompileImports</code> selectively, and I agree that we want to do something like that</p>",
        "id": 393230076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695733808
    },
    {
        "content": "<p>And that <code>go</code>’s continuation will not itself grow large?</p>",
        "id": 393230462,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733933
    },
    {
        "content": "<p>With lists for the parents stack it gets even prettier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Apply a function to the array of values at each node in a `DiscrTree`. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Trie.mapArrays</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs0</span> <span class=\"n\">cs0</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n  <span class=\"n\">go</span> <span class=\"o\">[]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs0</span><span class=\"o\">)</span> <span class=\"n\">cs0.toList</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span>  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"o\">[]</span>                       <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs'</span> <span class=\"n\">cs'</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span>  <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)::</span><span class=\"n\">ps</span><span class=\"o\">,</span> <span class=\"n\">cs''</span><span class=\"o\">,</span> <span class=\"n\">vs''</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">ps</span> <span class=\"o\">(</span><span class=\"n\">cs'.push</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs''</span> <span class=\"n\">cs''</span><span class=\"o\">))</span> <span class=\"n\">vs'</span> <span class=\"n\">cs</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ps</span><span class=\"o\">,</span> <span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs0</span> <span class=\"n\">cs0</span><span class=\"o\">)::</span><span class=\"n\">cs</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"o\">((</span><span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)::</span><span class=\"n\">ps</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs0</span><span class=\"o\">)</span> <span class=\"n\">cs0.toList</span>\n</code></pre></div>",
        "id": 393230507,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733949
    },
    {
        "content": "<p>Sorry, I meant <code>apply?</code>.</p>",
        "id": 393230541,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695733961
    },
    {
        "content": "<p>A closure stack is basically an ad-hoc linked list</p>",
        "id": 393230990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734120
    },
    {
        "content": "<p>The continuation there will only grow as long as the length of a run of length-1 arrays, because it is reset in the <code>else</code> case (which recurses via the call to <code>mapArrays</code>)</p>",
        "id": 393231384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734246
    },
    {
        "content": "<p>I guess it could use <code>go t' id</code> there instead, not sure if lean knows to inline it or whether it will avoid doing so because of the recursion</p>",
        "id": 393231581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734306
    },
    {
        "content": "<p>I expect these runs to be almost as long as the height of the tree, so the resetting won't safe us in this case.</p>",
        "id": 393232424,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695734596
    },
    {
        "content": "<p>no, long runs are fine here</p>",
        "id": 393232503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734622
    },
    {
        "content": "<p>hm, actually maybe not, when evaluating the closure stack it doesn't tail-call even though it is calling itself because it is using <code>Ap</code> instead of <code>FAp</code> for the call</p>",
        "id": 393232899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734759
    },
    {
        "content": "<p>so you would need to defunctionalize</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Trie.mapArrays</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">t</span> <span class=\"o\">[]</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs</span> <span class=\"n\">children</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">children.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">children</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n      <span class=\"n\">go</span> <span class=\"n\">t'</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">ret</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children.map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">go</span> <span class=\"n\">t'</span> <span class=\"o\">[])))</span>\n  <span class=\"n\">ret</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">vs'</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ret</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">vs'</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)])</span>\n</code></pre></div>\n<p>which loses a lot of the appeal</p>",
        "id": 393233640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695734992
    },
    {
        "content": "<p>Yeah, then you can just defunctionalize the whole thing</p>",
        "id": 393233788,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695735025
    },
    {
        "content": "<p>the interpreter should really just get good, this is silly</p>",
        "id": 393233924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695735072
    },
    {
        "content": "<p>Good = arbitrary tail calls, or good = unbounded stack? (Or both)</p>",
        "id": 393234068,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695735119
    },
    {
        "content": "<p>arbitrary tail calls</p>",
        "id": 393234126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695735129
    },
    {
        "content": "<p>there are defensible reasons for not having unbounded stack</p>",
        "id": 393234168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695735148
    },
    {
        "content": "<p>So you'd have to CPS, but wouldn't have to defunctionalize</p>",
        "id": 393234199,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695735157
    },
    {
        "content": "<p>like being able to print that stack trace</p>",
        "id": 393234208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695735161
    },
    {
        "content": "<p>but it should be able to do tail calls to variable functions and other constant functions</p>",
        "id": 393234370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695735206
    },
    {
        "content": "<p>Looking at the lake code, it already seems well equipped the support selective precompilation of just some modules. It might suffice to change the per-library boolean queried in <a href=\"https://github.com/leanprover/lean4/blob/e6fe3bee71f359c866a29766f774864577099778/src/lake/Lake/Config/Module.lean#L119\">https://github.com/leanprover/lean4/blob/e6fe3bee71f359c866a29766f774864577099778/src/lake/Lake/Config/Module.lean#L119</a> with something selective (list of names as a first approximation).<br>\n<span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> , would that be a useful contribution, or are there bigger issues with that I can't see yet?</p>",
        "id": 393250627,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695739697
    },
    {
        "content": "<p>We used to enable Lake's <code>precompileModules</code> option for Aesop and std (?), but this broke the cache. I'm not sure what the current status of this issue is.</p>",
        "id": 393252204,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695740074
    },
    {
        "content": "<p>Thanks, that explains why not even <code>std</code> is compiled; I assume there must have been a reason.</p>",
        "id": 393254880,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695740594
    },
    {
        "content": "<p>The most recent investigation for mathlib was at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3575\">https://github.com/leanprover-community/mathlib4/pull/3575</a>. It looked like a 5% speedup was feasible but would certainly require more work in Lake and cache as well as testing on all platforms</p>",
        "id": 393256357,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695740883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , I pushed my stackless implementation to your branch (which lets CI proceed), so that you are unblocked there.</p>",
        "id": 393280018,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695746412
    },
    {
        "content": "<p>I'm blocked by the dependent PR anyway, but thanks!</p>",
        "id": 393280182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695746454
    },
    {
        "content": "<p>Ok, in that case I better submit it as its own PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7387\">mathlib4#7387</a>), before more innocent PRs like yours get stuck due to this.</p>",
        "id": 393282040,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695746947
    },
    {
        "content": "<p>This is now the last dependency of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7244\">#7244</a></p>",
        "id": 395757638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696882301
    },
    {
        "content": "<p>If you don't see anything wrong with it and it unblocks you, you can just merge it, I'd say.</p>",
        "id": 395761657,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696884856
    },
    {
        "content": "<p>I think I'd rather have the eyes of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> give it a final review</p>",
        "id": 395761749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696884920
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 395761890,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696885021
    }
]