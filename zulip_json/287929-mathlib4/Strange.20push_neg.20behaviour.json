[
    {
        "content": "<p>I've been having some trouble recently with <code>push_neg</code> (and hence also <code>contrapose!</code>) in Lean4. I was always able to fix my proofs by using more targeted <code>rewrite</code>s with lemmas like <code>not_exists</code> etc, but I'm wondering if there is a better way to fix the problem. Here is a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">s.lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r.lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_neg</span> <span class=\"c1\">-- now the goal is s.lt a b ∧ s.le b a !</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Error message:</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  id</span>\n<span class=\"cm\">    (Eq.trans (Mathlib.Tactic.PushNeg.not_implies_eq (a &lt; b) (a &lt; b))</span>\n<span class=\"cm\">      (congrArg (And (a &lt; b)) (Mathlib.Tactic.PushNeg.not_lt_eq a b)))</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  (¬(a &lt; b → a &lt; b)) = (a &lt; b ∧ b ≤ a)</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  (¬(a &lt; b → a &lt; b)) = (a &lt; b ∧ b ≤ a) → (¬(a &lt; b → a &lt; b)) = (a &lt; b ∧ b ≤ a)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>So <code>push_neg</code> changed the goal into something that is not equivalent, but it also generated an error so I didn't end up writing a wrong proof. (It did stump me for quite a while before I realized what was going on, because in my original example the <code>push_neg</code> was hidden in a <code>contrapose!</code> in the middle of a long proof, and the error message told me that the problem was at the beginning of the statement.)<br>\nDoes anybody know what is going on here ?</p>",
        "id": 362022527,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685389069
    },
    {
        "content": "<p><code>push_neg</code> is a <code>mathlib</code> tactic, so I moved the thread here.</p>",
        "id": 362023932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389621
    },
    {
        "content": "<p>Probably, <code>push_neg</code> doesn't work well when you have two <code>*Order</code> instances that don't agree with each other.</p>",
        "id": 362024019,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389655
    },
    {
        "content": "<p><code>push_neg</code> knows about <code>LT.lt</code> and so on and it synthesizes some <code>LinearOrder</code> instances to make some conversions. It's not expecting that you have overlapping instances like this. Do you mean to have a separate <code>Preorder</code>? This comes from the <code>LinearOrder</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 362024039,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685389664
    },
    {
        "content": "<p>Unfortunately I'm proving stuff about the set of (total) preorders on a type, so I don't really have a choice...</p>",
        "id": 362024147,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685389698
    },
    {
        "content": "<p><code>push_neg</code> can try to unify <code>LT.lt</code> from generated <code>LinearOrder</code> with the one it sees.</p>",
        "id": 362024291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389779
    },
    {
        "content": "<p>(In fact, in my original proof I had at least four different orders floating around.)</p>",
        "id": 362024307,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685389785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> fixed one bug in this code some time ago (<code>push_neg</code> tried to apply <code>not_lt</code> on a partial order)</p>",
        "id": 362024444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Strange.20push_neg.20behaviour/near/362024291\">said</a>:</p>\n<blockquote>\n<p><code>push_neg</code> can try to unify <code>LT.lt</code> from generated <code>LinearOrder</code> with the one it sees.</p>\n</blockquote>\n<p>Is there any way for me to tell <code>push_neg</code> not to do that ? At this point I have to avoid it in a lot of proofs.</p>",
        "id": 362024460,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685389839
    },
    {
        "content": "<p>There is a way: open the source code in <code>Mathlib/Tactic/PushNeg.lean</code> and fix it.</p>",
        "id": 362024680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389935
    },
    {
        "content": "<p>I'm looking into it right now</p>",
        "id": 362024700,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685389949
    },
    {
        "content": "<p>Unfortunately, I'm not good enough with Lean 4 meta programming to do it.</p>",
        "id": 362024706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685389952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Strange.20push_neg.20behaviour/near/362024680\">said</a>:</p>\n<blockquote>\n<p>There is a way: open the source code in <code>Mathlib/Tactic/PushNeg.lean</code> and fix it.</p>\n</blockquote>\n<p>Okay, or I could juste use <code>rw</code> ! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 362024778,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685389984
    },
    {
        "content": "<p>My knowledge of Lean4 metaprogramming is nil...</p>",
        "id": 362024844,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685390028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Strange.20push_neg.20behaviour/near/362024700\">said</a>:</p>\n<blockquote>\n<p>I'm looking into it right now</p>\n</blockquote>\n<p>Thanks Kyle !</p>",
        "id": 362024860,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685390036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> It still needs to pass CI, but here's a fix: <a href=\"https://github.com/leanprover-community/mathlib4/pull/4478\">mathlib4#4478</a></p>",
        "id": 362030561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685393014
    },
    {
        "content": "<p>Wow !</p>",
        "id": 362031156,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1685393378
    }
]