[
    {
        "content": "<p>If I try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsMulCentral</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n  <span class=\"n\">left_assoc</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n  <span class=\"n\">mid_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">right_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then the <code>to_additive</code> gives me the error <code>Expected IsAddCentral to have a value.</code></p>\n<p>There appear to be other examples of using <code>to_additive</code> with a structure in Mathlib e.g. <a href=\"https://github.com/leanprover-community/mathlib4/blob/a063f8c5f58507dfc51a551d0d47ae5fb83082aa/Mathlib/MeasureTheory/Group/FundamentalDomain.lean#L60\">https://github.com/leanprover-community/mathlib4/blob/a063f8c5f58507dfc51a551d0d47ae5fb83082aa/Mathlib/MeasureTheory/Group/FundamentalDomain.lean#L60</a> - so why can't I get this one to work?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 388070914,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1693389154
    },
    {
        "content": "<p>I think that you should declare the additive structure before, and then the <code>to_additive</code> tag links the two.</p>",
        "id": 388071259,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389286
    },
    {
        "content": "<p>Note that  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.IsFundamentalDomain#doc\">docs#MeasureTheory.IsFundamentalDomain</a> is in the source, it is not autogenerated.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/e8477a93d0167f0ba267556bd90720efe762529c/Mathlib/MeasureTheory/Group/FundamentalDomain.lean#L50C11-L50C33\">https://github.com/leanprover-community/mathlib4/blob/e8477a93d0167f0ba267556bd90720efe762529c/Mathlib/MeasureTheory/Group/FundamentalDomain.lean#L50C11-L50C33</a></p>",
        "id": 388071463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389366
    },
    {
        "content": "<p><code>to_additive</code> should start to do its magic on lemmas, where it will know to replace <code>IsMulCentral</code> with whatever you want it to align (and <code>to_additive</code> suspects that it will be <code>IsAddCentral</code>).</p>",
        "id": 388071805,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693389490
    },
    {
        "content": "<p><code>@[to_additive]</code> doesn't auto-generate structures yet (it will be able to do this, this just hasn't been programmed yet). So you have to write the additive version first, as Damiano said.</p>",
        "id": 388072501,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1693389726
    }
]