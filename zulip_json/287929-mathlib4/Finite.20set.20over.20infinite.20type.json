[
    {
        "content": "<p>Is there a theorem asserting that for infinite α, <code>∀ (s : Finset α), ∃ (x : α), x ∉ s</code>? If not, how would one go about proving that?</p>",
        "id": 325017021,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675199625
    },
    {
        "content": "<p>if not then the set is finite by definition</p>",
        "id": 325017325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199726
    },
    {
        "content": "<p>For the sake of a concrete example, can I prove <code>∀ (s : Finset String), ∃ (x : α), x ∉ s</code>?</p>",
        "id": 325017480,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675199783
    },
    {
        "content": "<p>Oh I was assuming you have an actual assumption of the form <code>Infinite A</code></p>",
        "id": 325017535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199806
    },
    {
        "content": "<p>which probably exists for string, not sure</p>",
        "id": 325017567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199821
    },
    {
        "content": "<p>Thanks, that helps a lot already</p>",
        "id": 325017793,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675199899
    },
    {
        "content": "<p>hm, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Infinite.exists_not_mem_finset#doc\">docs4#Set.Infinite.exists_not_mem_finset</a> looks close to what you want</p>",
        "id": 325018127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675200017
    },
    {
        "content": "<p>there is a proof that <code>Nat</code> and <code>List A</code> are infinite, but not <code>String</code>. It shouldn't be hard by applying the isomorphism from <code>List Char</code></p>",
        "id": 325018657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675200214
    },
    {
        "content": "<p>oh, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Infinite.exists_not_mem_finset#doc\">docs4#Infinite.exists_not_mem_finset</a> is exactly the theorem you want</p>",
        "id": 325018947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675200312
    },
    {
        "content": "<p>Excellent, thank you very much</p>",
        "id": 325019308,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675200439
    },
    {
        "content": "<p>Although there does indeed not seem to be an instance of <code>Infinite String</code></p>",
        "id": 325020386,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675200783
    },
    {
        "content": "<p>I wouldn't get your hopes up regarding the existence of too many theorems about strings in mathlib4 :-)</p>",
        "id": 325020508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675200828
    },
    {
        "content": "<p>yeah, the people who care about strings don't talk to the people who care about infinitude <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 325020809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675200941
    },
    {
        "content": "<p>[string theorists leave the room]</p>",
        "id": 325022025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675201341
    },
    {
        "content": "<p>Fortunately it's easy to prove, should I open a PR?</p>",
        "id": 325022555,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675201546
    },
    {
        "content": "<p>sure</p>",
        "id": 325022831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675201643
    },
    {
        "content": "<p>to which repo? I'm not sure mathlib4 wants new material which isn't in mathlib3 right now</p>",
        "id": 325022899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675201669
    },
    {
        "content": "<p>yes, mathlib4 wants new material</p>",
        "id": 325022991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675201699
    },
    {
        "content": "<p>This was not my understanding of what was going on right now. I thought the idea was to keep mathlib3 and mathlib4 in exact sync.</p>",
        "id": 325023171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675201781
    },
    {
        "content": "<p>Why not put it in both?</p>",
        "id": 325023303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201826
    },
    {
        "content": "<p>Right -- that was the answer I was expecting.</p>",
        "id": 325023359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675201847
    },
    {
        "content": "<p>If people want to not have to worry about mathlib3 any more, they should help with the port!</p>",
        "id": 325023397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201863
    },
    {
        "content": "<p>I really do not want to encourage backports for everything, this is a lot more work and counterproductive besides</p>",
        "id": 325023457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675201896
    },
    {
        "content": "<p>If you are starting a new file, I don't see any reason why it should be backported to ml3.</p>",
        "id": 325023465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675201900
    },
    {
        "content": "<p>if nothing in mathlib3 depends on it there is no need for a backport</p>",
        "id": 325023568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675201927
    },
    {
        "content": "<p>I'm not sure we're starting a new file just containing the result that <code>String</code> is an infinite type!</p>",
        "id": 325024698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675202328
    },
    {
        "content": "<p>Well, why not? It's easy enough to merge it into some other file after the port is done</p>",
        "id": 325025090,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675202459
    },
    {
        "content": "<p>mathlib4 is already not exactly 1-1 with align statements. The whole discussion seems silly to me, of course we should allow new material - there is already quite a bit of new material, in addition to tons of upstream new material</p>",
        "id": 325025392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675202544
    },
    {
        "content": "<p>Would std4 take the definition of Infinite? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 325025558,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675202591
    },
    {
        "content": "<p>and not allowing new material will set us back more than necessary</p>",
        "id": 325025570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675202595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finite.20set.20over.20infinite.20type/near/325025558\">said</a>:</p>\n<blockquote>\n<p>Would std4 take the definition of Infinite? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>the real question is whether it would be able to disentangle all the dependencies</p>",
        "id": 325025636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675202622
    },
    {
        "content": "<p>the definition of infinite itself isn't so bad but it depends on all the finiteness stuff</p>",
        "id": 325025748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675202644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> 's List.Perm PR is just one small part of this, it will take a while to work through all of it</p>",
        "id": 325025887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675202687
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1973\">https://github.com/leanprover-community/mathlib4/pull/1973</a></p>\n<p>I put the <code>mathlib4</code> version into <code>Data.Fintype.Card</code>, where the <code>Infinite ℤ</code> instance also lives. The proof can't be backported one-to-one because, as far as I can tell, Lean3/Mathlib3 doesn't have the <code>String.replicate</code> function.</p>",
        "id": 325027318,
        "sender_full_name": "Sebastian Zivota",
        "timestamp": 1675203148
    },
    {
        "content": "<p>Anything called replicate in 4 was probably called repeat in 3</p>",
        "id": 325028516,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675203603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finite.20set.20over.20infinite.20type/near/325025748\">said</a>:</p>\n<blockquote>\n<p>the definition of infinite itself isn't so bad but it depends on all the finiteness stuff</p>\n</blockquote>\n<p>I wasn't really serious, but it's not that bad. It doesn't depend on Fintype, just Finite, which needs only Nat/Fin n (which are in core, I think) and Equiv (including Function.Left/RightInverse)</p>",
        "id": 325029130,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675203836
    }
]