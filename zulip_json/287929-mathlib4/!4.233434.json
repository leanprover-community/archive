[
    {
        "content": "<p>I am having some troubles with <code>Submodule.inductionOnRank</code> in this file. To prove <a href=\"https://github.com/leanprover-community/mathlib4/blob/01c78d12c2dff045ad5d4e2d7cebc49f8cd420e0/Mathlib/LinearAlgebra/FreeModule/Pid.lean#L305\"> Submodule.nonempty_basis_of_pid</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Submodule.nonempty_basis_of_pid</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>where the  goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>I need to write explicitly the induction hypothesis: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">inductionOnRank</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">N</span> <span class=\"bp\">↦</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>to be able to use <code>inductionOnRank</code>. (It was simply <code> refine N.induction_on_rank b _ _</code> with Lean 3).  Still, this works and the proof completes. </p>\n<p>But, for the proof of <a href=\"https://github.com/leanprover-community/mathlib4/blob/01c78d12c2dff045ad5d4e2d7cebc49f8cd420e0/Mathlib/LinearAlgebra/FreeModule/Pid.lean#L458\">Submodule.exists_smith_normal_form_of_le</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Submodule.exists_smith_normal_form_of_le</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">N_le_O</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">O</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">hno</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">o</span><span class=\"o\">)(</span><span class=\"n\">bO</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">O</span><span class=\"o\">)(</span><span class=\"n\">bN</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bN</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">bO</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLE</span> <span class=\"n\">hno</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span>  <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"n\">hno</span> <span class=\"n\">bO</span> <span class=\"n\">bN</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">bN</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">bO</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Fin.castLE</span> <span class=\"n\">hno</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and I cannot make <code>Submodule.inductionOnRank</code> work. Even if I do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">O</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">hno</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">o</span><span class=\"o\">)(</span><span class=\"n\">bO</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">O</span><span class=\"o\">)</span>   <span class=\"o\">(</span><span class=\"n\">bN</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">)(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bN</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">bO</span> <span class=\"o\">(</span><span class=\"n\">Fin.castLE</span> <span class=\"n\">hno</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">refine</span> <span class=\"n\">inductionOnRank</span> <span class=\"n\">b</span> <span class=\"n\">P</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">O</span>\n</code></pre></div>\n<p>to specify the induction hypothesis, it does not work and gives me the new goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N'</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">N'</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">N'</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">N'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 351065968,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1681914449
    },
    {
        "content": "<p>Does <code>induction N using Submodule.inductionOnRank</code> work?</p>",
        "id": 351083825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681918313
    },
    {
        "content": "<p>It does work but I need also to specify the basis <code>b</code> somehow and I don't know how to do that. How can I provide the arguments to <code>Submodule.inductionOnRank</code>?</p>",
        "id": 351096744,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1681921191
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.inductionOnRank#doc\">docs4#Submodule.inductionOnRank</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.induction_on_rank\">docs#submodule.induction_on_rank</a></p>",
        "id": 351105217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923364
    },
    {
        "content": "<p><del>The lemma is stupid, it should take <code>module.free</code> instead</del></p>",
        "id": 351105329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681923398
    },
    {
        "content": "<p>Ah, it's a def not a lemma!</p>",
        "id": 351107958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681924054
    }
]