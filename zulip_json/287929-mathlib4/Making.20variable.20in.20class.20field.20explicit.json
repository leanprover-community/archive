[
    {
        "content": "<p>What's the Lean4 way to accomplish the following lean3 code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.equiv.defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo.e</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≃</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">bar.e</span>\n</code></pre></div>\n<p>Adding the <code>[]</code> doesn't seem to work in Lean4.</p>",
        "id": 324081560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674833697
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Making.20variable.20in.20class.20field.20explicit\">#new members &gt; Making variable in class field explicit</a> by <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>.</p>",
        "id": 324082045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674833825
    },
    {
        "content": "<p>(I posted in the wrong stream accidentally)</p>",
        "id": 324082147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674833856
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> , I'm trying to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/1889\">mathlib4#1889</a> to compile, I hope that's okay with you (the PR is tagged with \"help needed\")</p>",
        "id": 324082645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674834000
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 324083731,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674834257
    },
    {
        "content": "<p>well, I got the file to build, but there is still explicit/implicit variable issue in the <code>IsFreeGroup</code> class.</p>",
        "id": 324084386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674834427
    },
    {
        "content": "<p>I think the current lean4 solution is making it as a dot notation thing separately and priming the structure field. It's not great.</p>",
        "id": 324087018,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674835027
    },
    {
        "content": "<p>Yeah that's not ideal. So what should we do to move this porting PR along? The issue is that lean3's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_free_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_equiv</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">free_group</span> <span class=\"n\">generators</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>has become </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">IsFreeGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Generators</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">MulEquiv</span> <span class=\"o\">:</span> <span class=\"n\">FreeGroup</span> <span class=\"n\">Generators</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>with the <code>G</code> implicit in the second version but explicit in the first version.</p>",
        "id": 324087619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674835161
    },
    {
        "content": "<p>It doesn't really make sense to rename to <code>MulEquiv'</code> and add a separate def since we also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_free_group.to_free_group\">docs#is_free_group.to_free_group</a></p>",
        "id": 324091713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674835414
    },
    {
        "content": "<p>I'd just do that, see for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Countable.exists_injective_nat#doc\">docs4#Countable.exists_injective_nat</a></p>",
        "id": 324097586,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674836792
    },
    {
        "content": "<p>and maybe we should make a lean4 feature request</p>",
        "id": 324097729,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674836825
    },
    {
        "content": "<p>i think it was removed because the syntax was weird (and it is) but the feature is useful still</p>",
        "id": 324097813,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674836843
    },
    {
        "content": "<p>And see what I just did for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bornology#doc\">docs4#Bornology</a></p>",
        "id": 324105590,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674838821
    },
    {
        "content": "<p>yeah okay, I made a separate def. But it still feels wrong.</p>",
        "id": 324108288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674839466
    },
    {
        "content": "<p>anyway, the PR should be ready to review</p>",
        "id": 324108378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674839494
    },
    {
        "content": "<p>I know, it felt wrong to me too, but if we can completely avoid the primed versions (by fixing the <code>simps</code> projections and the <code>ext</code> lemmas), then it should work; it's just a headache. Worst case, if you ever end up with a primed version, you can rewrite backwards with the equation lemma for the non-primed version.</p>",
        "id": 324134609,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674846606
    }
]