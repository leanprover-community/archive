[
    {
        "content": "<p>If I coerce an <code>OrderIso</code> to a function I get a nasty looking term displayed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Bounded</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ↑(RelIso.toRelEmbedding f).toEmbedding a = sorryAx ((fun x =&gt; β) a)</span>\n</code></pre></div>\n<p>I guess there needs to be some tidy up somewhere, but I haven't figured it out exactly yet. It seems to be causing some rewrites to fail in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3036\">!4#3036</a></p>",
        "id": 344060274,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1679594098
    },
    {
        "content": "<p>I think I put the trick to this in the wiki</p>",
        "id": 344062180,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679594610
    },
    {
        "content": "<p>I did!</p>",
        "id": 344062701,
        "sender_full_name": "Arien Malec",
        "timestamp": 1679594740
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rel_embedding.coe_fn_to_embedding\">docs#rel_embedding.coe_fn_to_embedding</a> should be applying (edit: if you <code>dsimp</code>)</p>",
        "id": 344063648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679594955
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RelIso.instCoeFunRelIsoForAll#doc\">docs4#RelIso.instCoeFunRelIsoForAll</a> is to blame</p>",
        "id": 344064016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679595047
    },
    {
        "content": "<p>That should be  removed or implemented with <code>FunLike.coe</code></p>",
        "id": 344064150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679595077
    },
    {
        "content": "<p>Thanks for figuring that out</p>",
        "id": 344094291,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1679603226
    }
]