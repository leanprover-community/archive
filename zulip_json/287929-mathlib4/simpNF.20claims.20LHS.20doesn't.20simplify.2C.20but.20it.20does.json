[
    {
        "content": "<p>I'm really beginning to hate the <code>simpNF</code> linter. It is claimed here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a34afbb01d496f13578c002ddc997dd0cab0a083/Mathlib/GroupTheory/Subgroup/Basic.lean#L164\">https://github.com/leanprover-community/mathlib4/blob/a34afbb01d496f13578c002ddc997dd0cab0a083/Mathlib/GroupTheory/Subgroup/Basic.lean#L164</a> that <code>simpNF</code> says the linter complains when adding the <code>simp</code> attribute (which it does). However, the <code>simpNF</code> linter's claim is false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[to_additive (attr := simp)]</span> <span class=\"c1\">-- porting note: `simp` cannot simplify LHS</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_inv</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">inv_mem</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: simp only [foo_inv]</span>\n\n<span class=\"c1\">-- just to make sure there was no weird trickery by using the exact same statement.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: simp only [foo_inv]</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- `simpNF` claims `foo_inv` can't apply to the LHS and thus will never apply, but it's wrong.</span>\n</code></pre></div>",
        "id": 324150755,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674852251
    },
    {
        "content": "<p>This definitely seems like a bug in <code>simpNF</code> to me.</p>",
        "id": 324150940,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674852331
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1689\">!4#1689</a> had 3 of these</p>",
        "id": 324151302,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1674852493
    },
    {
        "content": "<p>Moreover, <code>simpNF</code> is doubly wrong (because I'm working on <code>GroupTheory.Coset</code> and I have an in-practice example where this <code>simp</code> lemma fires in that file if it is marked with <code>@[simp]</code>)</p>",
        "id": 324151542,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674852606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> see above</p>",
        "id": 324151577,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674852621
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1874\">!4#1874</a> I just added the <code>simp</code> attribrute to this lemma and marked <code>nolint simpNF</code>.</p>",
        "id": 324162552,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674857175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> will you check the ones from <a href=\"https://github.com/leanprover-community/mathlib4/pull/1689\">!4#1689</a> like I did above to see if <code>simpNF</code> is wrong in those cases too?</p>",
        "id": 324162669,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674857229
    },
    {
        "content": "<p>They were. I just <code>nolint</code>ed them all with a  <code>Porting note </code></p>",
        "id": 324166702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1674858685
    },
    {
        "content": "<p>The linter has a point here.  <code>foo_inv</code> and <code>foo_neg</code> should not be simp lemmas.  Lean has no good way to match against the pattern <code>?P x⁻¹</code> and this will fail in all but toy examples.</p>",
        "id": 324193710,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674865612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">simp</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>",
        "id": 324193969,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674865676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> please see line 330 of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1874\">!4#1874</a>. Do you consider that a toy example? If so, then I defer to your judgement.</p>",
        "id": 324231496,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674886993
    },
    {
        "content": "<p>\"Toy example\" was maybe a slightly too colorful expression in the heat of the moment..</p>",
        "id": 324233054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674888400
    },
    {
        "content": "<p>The technical issue here is that the lemma wouldn't apply if the sides of the equation were swapped.</p>",
        "id": 324233076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674888431
    },
    {
        "content": "<p>Okay, thanks. Sorry if my question came across as confrontational; it wasn't intended as such. </p>\n<p>Do you think it would be better to keep these lemmas in the simp set for now with nolints to prevent <code>simp</code> calls from breaking during porting, or should we obey the linter? The only downside is performance due to a bigger simp set, right? Or am I wrong about that?</p>",
        "id": 324233816,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674888897
    },
    {
        "content": "<p>More examples: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.tendsto_comp_val_Ioi_atTop#doc\">docs4#Filter.tendsto_comp_val_Ioi_atTop</a> (same reason? should I remove <code>@[simp]</code>?), <a href=\"https://github.com/leanprover-community/mathlib4/pull/2108\">!4#2108</a> (why?)</p>",
        "id": 326221168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675711506
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2108\">!4#2108</a>, it doesn't like <code>MeasurableSpace.measurableSet_inf</code> and <code>MeasurableSpace.measurableSet_infᵢ</code>.</p>",
        "id": 326221438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675711578
    },
    {
        "content": "<p>In the latter case, it says that <code>simp</code> can prove it using <code>MeasurableSpace.measurableSet_infₛ</code> but why would <code>simp</code> unfold <code>infᵢ</code> here?</p>",
        "id": 326221676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675711654
    },
    {
        "content": "<p>UPD: it does unfold <code>infᵢ</code>. removing one <code>@[simp]</code></p>",
        "id": 326223884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675712366
    }
]