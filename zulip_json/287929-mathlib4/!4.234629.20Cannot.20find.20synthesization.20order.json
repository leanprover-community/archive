[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4629/files#diff-ab1128cb580c03f0392ae7de1272eb216f4c3dc9cfed37f47a30ed5d1f49df92R387\">This instance</a> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4629\">https://github.com/leanprover-community/mathlib4/pull/4629</a> is causing the following errors: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Perfection.lean</span><span class=\"o\">:</span><span class=\"mi\">387</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"n\">charPmodP</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">O</span> <span class=\"n\">K</span><span class=\"o\">],</span>\n    <span class=\"n\">Valuation.Integers</span> <span class=\"n\">v</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hvp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)],</span> <span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">ModP</span> <span class=\"n\">O</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Field</span> <span class=\"bp\">?</span><span class=\"n\">K</span>\n  <span class=\"bp\">@</span><span class=\"n\">Algebra</span> <span class=\"n\">O</span> <span class=\"bp\">?</span><span class=\"n\">K</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">DivisionSemiring.toSemiring</span>\n  <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"bp\">↑?</span><span class=\"n\">v</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Perfection.lean</span><span class=\"o\">:</span><span class=\"mi\">387</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"n\">charPmodP</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">O</span> <span class=\"n\">K</span><span class=\"o\">],</span>\n    <span class=\"n\">Valuation.Integers</span> <span class=\"n\">v</span> <span class=\"n\">O</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hvp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">v</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)],</span> <span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">ModP</span> <span class=\"n\">O</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"bp\">↑?</span><span class=\"n\">v</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The following is the instance with variables written out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">charPmodP</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">O</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hvp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"o\">(</span><span class=\"n\">ModP</span> <span class=\"n\">O</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">:=</span>\n  <span class=\"n\">CharP.quotient</span> <span class=\"n\">O</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mt</span> <span class=\"n\">hv.one_of_isUnit</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">map_natCast</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">O</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hvp.1</span>\n</code></pre></div>\n<p>I've tried playing with outparams and couldn't get it to work, but the thing that really boggles my mind is that it doesn't seem to pick up K as a variable, since it's complaining about it being a meta-variabele. Any pointers?</p>",
        "id": 365059446,
        "sender_full_name": "Pim Otte",
        "timestamp": 1686388035
    }
]