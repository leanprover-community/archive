[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, could you have a look at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">ProofWidgets.Presentation.Expr</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.10</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.10</span><span class=\"bp\">/</span><span class=\"n\">macOS</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Data.Json</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Compat</span>\n<span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Component.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Data.Html</span>\n<span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">ProofWidgets.Presentation.Expr</span>\n<span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/././</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Presentation</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span><span class=\"o\">:</span><span class=\"mi\">85</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">ProofWidgets.getExprPresentation</span><span class=\"bp\">`</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">deprecated</span>\n</code></pre></div>",
        "id": 364428421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686190963
    },
    {
        "content": "<p>Oh, yeah, that's an unfortunate interaction between attributes. I have <code>@[deprecated, server_rpc_method] def getExprPresentation</code>, and the default attribute elaborator uses <code>resolveName</code> which checks for deprecation. So the implementation of the <code>server_rpc_method</code> attribute ends up complaining about the deprecation. Nevertheless I still need that attribute, even for the deprecated definition.</p>",
        "id": 364622342,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686242490
    },
    {
        "content": "<p>Okay, I found a stopgap to hide the warning. <a href=\"https://github.com/leanprover-community/mathlib4/pull/4865\">!4#4865</a></p>",
        "id": 364630624,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1686244537
    }
]