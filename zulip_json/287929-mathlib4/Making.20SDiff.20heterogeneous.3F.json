[
    {
        "content": "<p>I would like to make <code>SDiff</code> heterogeneous so it can denote more general 'removals' than set difference in cases where <code>\\</code> is standard notation, such as removing sets of edges from a graph. I don't have enough experience for such things - is this a major change/bad idea?</p>",
        "id": 375524912,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689421870
    },
    {
        "content": "<p>The danger of using notation is that it gives the false impression that any of the existing lemmas about <code>sdiff</code> could be used here</p>",
        "id": 375527535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689422509
    },
    {
        "content": "<p>In this case can't you define <code>sdiff</code> to remove one graph from another?</p>",
        "id": 375527702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689422534
    },
    {
        "content": "<p>That is, <code>G \\ SimpleGraph.mkFromEdgeSet s</code> or similar?</p>",
        "id": 375527817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689422566
    },
    {
        "content": "<p>There are at least two reasonable \"diff\" operations on graphs: remove edges and remove vertices.</p>",
        "id": 375527927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689422591
    },
    {
        "content": "<p>Yes, and you can also remove either sets of edges/vertices or single edges/vertices  - I think that's a good argument for heterogeneity. (I actually have deletions of elements /sets of matroids in mind; I just wanted to pick a more familiar example).</p>",
        "id": 375531142,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689423367
    },
    {
        "content": "<p>It's a little annoying to not be able to use standard mathematical notation for those things, just because that symbol happens to be defined for sets.</p>",
        "id": 375531546,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689423472
    },
    {
        "content": "<p>You can always introduce notation like <code>\\ₑ</code></p>",
        "id": 375531775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423519
    },
    {
        "content": "<p>What is different between this and the heterogeneity of <code>+, /</code>, etc that was introduced in lean4? I was happy to see this, before I saw that <code>SDiff</code> wasn't included.</p>",
        "id": 375532025,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689423582
    },
    {
        "content": "<p>We don't use <code>HAdd</code> in <code>mathlib</code> (yet).</p>",
        "id": 375532092,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423601
    },
    {
        "content": "<p><code>SDiff</code> is defined in <code>mathlib</code></p>",
        "id": 375532173,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423610
    },
    {
        "content": "<p>An interesting question is whether we can use heterogeneous multiplication for both left and right actions.</p>",
        "id": 375532408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423688
    },
    {
        "content": "<p>Is there a situation when <code>A</code> acts on <code>B</code> on the left and <code>B</code> acts on <code>A</code> on the right?</p>",
        "id": 375532567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423728
    },
    {
        "content": "<p>(so that we can't decide what's the correct meaning of <code>(a : A) * (b : B)</code>)?</p>",
        "id": 375532657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689423757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375527927\">said</a>:</p>\n<blockquote>\n<p>There are at least two reasonable \"diff\" operations on graphs: remove edges and remove vertices.</p>\n</blockquote>\n<p>Only \"remove edges\" is well-typed as <code>sdiff</code> for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph#doc\">docs#SimpleGraph</a></p>",
        "id": 375533355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689423947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375532567\">said</a>:</p>\n<blockquote>\n<p>Is there a situation when <code>A</code> acts on <code>B</code> on the left and <code>B</code> acts on <code>A</code> on the right?</p>\n</blockquote>\n<p>There are many such situations; but the relevant question is probably \"in what situations are the two not defeq\", and I have none in mind yet</p>",
        "id": 375533657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689424023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375532408\">said</a>:</p>\n<blockquote>\n<p>An interesting question is whether we can use heterogeneous multiplication for both left and right actions.</p>\n</blockquote>\n<p>I think we learned the answer to this is \"no\", and for reasons other than the left/right ambiguity. <code>x ^ y</code> is a right action, and we've had lots of trouble with its <code>binop%</code> casting rules throughout the port.  I have <a href=\"https://gist.github.com/kmill/bc58941368cc60738f3c932fe2546c9d\">some code</a> that makes the casting be for a right action (the assumption is it will likely have types <code>X -&gt; Y -&gt; X</code>, with <code>Y</code> having no relationship to <code>X</code>), and I was hoping to eventually get it into Lean so that we can remove our <code>macro_rules</code> overrides.</p>",
        "id": 375533825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689424067
    },
    {
        "content": "<p>I think <code>\\</code> does make sense as another kind of right action (though I'm not saying anything about it being confusing to use this notation). I wonder if there's a good symbol for an inverse to it? It shouldn't be union/sup since that should be symmetric</p>",
        "id": 375534568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689424239
    },
    {
        "content": "<p>So, while Lean 4 has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HAdd#doc\">docs#HAdd</a>, we are not going to use it anywhere because of parsing rules for <code>a + b</code>? Should we drop <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HSMul#doc\">docs#HSMul</a> then?</p>",
        "id": 375534992,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689424340
    },
    {
        "content": "<p>The issue with <code>HPow</code> in particular is that we don't want <code>y</code> in <code>x ^ y</code> to be coerced just because <code>x</code> has another type and <code>y</code> can be coerced to it. The <code>binop%</code> algorithm looks at the types of everything in an algebraic expression and tries to find a single type everything coerces to.</p>",
        "id": 375536009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689424572
    },
    {
        "content": "<p>I think it's fine having heterogenous operator instances when there aren't coercions between the operands. (<code>Nat</code> just happens to be able to coerce to every ring, which makes <code>x ^ n</code> be the unexpected thing.)</p>",
        "id": 375536345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689424668
    },
    {
        "content": "<p>I think I thought about HSMul a bit while writing my scalar actions paper, and concluded that <code>HSMul X X Y</code> would open up a massive number of typeclass diamonds.</p>",
        "id": 375536556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689424719
    },
    {
        "content": "<p>So would having <code>G \\ e := G \\ ({e} : Set E)</code> be problematic for an edge <code>e : E</code> in a graph <code>G</code>?</p>",
        "id": 375536558,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689424720
    },
    {
        "content": "<p>Peter, I think it's safest to just make modified <code>\\</code> notation as Yury suggested above. If we determine it's possible to merge the two notations, it's always possible to do later.</p>",
        "id": 375536958,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689424806
    },
    {
        "content": "<p>E.g., we merged different <code>×ˢ</code> notations recently.</p>",
        "id": 375537158,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689424854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375536558\">said</a>:</p>\n<blockquote>\n<p>So would having <code>G \\ e := G \\ ({e} : Set E)</code> be problematic for an edge <code>e : E</code> in a graph <code>G</code>?</p>\n</blockquote>\n<p>I still think you'd do better to promote <code>{e}</code> to a graph so that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.completeBooleanAlgebra#doc\">docs#SimpleGraph.completeBooleanAlgebra</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"n\">G</span> <span class=\"bp\">\\</span> <span class=\"n\">SimpleGraph.fromEdgeSet</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 375537274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689424874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375536558\">said</a>:</p>\n<blockquote>\n<p>So would having <code>G \\ e := G \\ ({e} : Set E)</code> be problematic for an edge <code>e : E</code> in a graph <code>G</code>?</p>\n</blockquote>\n<p>It seems like it would work? It'd take engineering effort to redo <code>SDiff</code> and maybe it'd take changes to Lean if there are issues. I wouldn't try doing vertex deletions too with this notation.</p>",
        "id": 375537587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689424961
    },
    {
        "content": "<p>Yup, I'm already using modified notation; there is basically no other way. It just makes things look less pretty than I'd like. </p>\n<p>And that was my original question really - what are the engineering issues? And it looks like the answer is that there really are some.</p>",
        "id": 375537741,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689425006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375537274\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375536558\">said</a>:</p>\n<blockquote>\n<p>So would having <code>G \\ e := G \\ ({e} : Set E)</code> be problematic for an edge <code>e : E</code> in a graph <code>G</code>?</p>\n</blockquote>\n<p>I still think you'd do better to promote <code>{e}</code> to a graph so that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.completeBooleanAlgebra#doc\">docs#SimpleGraph.completeBooleanAlgebra</a></p>\n</blockquote>\n<p>The graph thing was really a toy example - I'm working in a situation where you can't do something like that.</p>",
        "id": 375537818,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689425035
    },
    {
        "content": "<p>You need to be able to reliably figure out the type of the SDiff expression and propagate types to its operands</p>",
        "id": 375537932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425062
    },
    {
        "content": "<p>For example, without additional support, <code>S \\ {x, y}</code> won't elaborate, since it will say it can't infer an <code>Insert</code> instance for the <code>{x, y}</code> notation</p>",
        "id": 375538090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425105
    },
    {
        "content": "<p>Kyle, isn't that not a problem anymore because of <code>default_instance</code>s? Or is that what you mean by \"additional support\"?</p>",
        "id": 375538318,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689425170
    },
    {
        "content": "<p>There are a couple pieces to the additional support. Default instances are one, but the <code>binop%</code> and <code>unop%</code> elaborators are another.</p>",
        "id": 375538455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Making.20SDiff.20heterogeneous.3F/near/375537158\">said</a>:</p>\n<blockquote>\n<p>E.g., we merged different <code>×ˢ</code> notations recently.</p>\n</blockquote>\n<p>Yeah, getting this to (finally) work reliably took a custom elaborator: <a href=\"https://github.com/leanprover-community/mathlib4/blob/41a80d7f6a9db42342210225d6fc50f34781b9b3/Mathlib/Tactic/FBinop.lean\">https://github.com/leanprover-community/mathlib4/blob/41a80d7f6a9db42342210225d6fc50f34781b9b3/Mathlib/Tactic/FBinop.lean</a></p>",
        "id": 375539014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I forgot to mention what a point of <code>binop%</code> and <code>unop%</code> are: they figure out where you need to insert coercions so that the default instances can be applied</p>",
        "id": 375539464,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> There's a chance that it might all Just Work if someone made SDiff be heterogenous, made a homogenous version, used this to give the heterogenous one a default instance, and installed a <code>binop%</code> macro rule for SDiff, and then cross a couple fingers and compile mathlib</p>",
        "id": 375540577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689425739
    },
    {
        "content": "<p>That sounds great - I don't think I understand enough of the under-the-hood stuff to be that someone, though!</p>",
        "id": 375540856,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1689425809
    },
    {
        "content": "<p>Peter, just have a look at the existing <code>HMul</code> and <code>Mul</code>, then ask Kyle where to find a good <code>%binop</code> example. This should be mostly mimicry.</p>",
        "id": 375542543,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689426233
    },
    {
        "content": "<p>I'm a mimic too, and I've just picked up on it by trying to read a lot of core code. My understanding is that the following pieces are what you need for a heterogenous arithmetic-like operator that prefers to be homogenous. For multiplication:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1157\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1157</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1273\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1273</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1372\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L1372</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L276\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L276</a></li>\n<li><a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L295\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L295</a></li>\n</ul>",
        "id": 375544183,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689426612
    }
]