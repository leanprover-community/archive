[
    {
        "content": "<p>In the porting PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2767\">!4#2767</a> specifically <a href=\"https://github.com/leanprover-community/mathlib4/blob/3069af05fbf930734f4c504a8d3a8ecd561ade07/Mathlib/CategoryTheory/Limits/ConeCategory.lean#L76\">here</a> you will notice a pretty silly simps! declaration.</p>\n<p>The reason for this is that <code>simps!</code> alone generated some useless lemmas that the simpNF linter caught. These lemmas were of the form <code>_ = _</code> where both <code>_</code> are proofs of some proposition. The lean3 version of one such lemma is here:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cone.equiv_costructured_arrow_functor_map_right_down_down\">docs#category_theory.limits.cone.equiv_costructured_arrow_functor_map_right_down_down</a></p>\n<p>Is there a way to tell simps in lean4 to <em>not</em> generate a particular lemma (or lemmas) while generating all others? <br>\nIs there a way to tell simps in lean4 to <em>not</em> generate worthless lemmas which prove that two proofs are equal?</p>",
        "id": 340916311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678467600
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 340916376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678467606
    },
    {
        "content": "<p>You can use <code>@[simps (config := { notRecursive := [`PLift, `Ulift] })]</code> to not apply projections of certain structures (you probably only need one of them, presumably <code>ULift</code>). <br>\nCurrently <code>simps</code> indeed doesn't check whether the lemmas it generates are propositional, in the rare case that a projection is sometimes propositional and sometimes data.<br>\nGenerating all default lemmas except some that you list is currently not supported, but on the wishlist.</p>",
        "id": 340927522,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678470605
    },
    {
        "content": "<p>Thanks! The nonrecursive option should work well in this case.</p>",
        "id": 340929375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678471125
    }
]