[
    {
        "content": "<p><del>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4857\">!4#4857</a> I got problems getting <code>Magma.of</code> to work, which is just defined as <code>Bundled.of</code>.  In particularly I fail to insert an element <code>(x : X)</code> into a function that takes <code>of X → of Y</code>. Here is a minimised example:</del></p>\n<p>Nvm, typo in the MWE, need to fix that first</p>",
        "id": 364577194,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1686233734
    },
    {
        "content": "<p>ok second try <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4857\">!4#4857</a> <code>Magma.ofHom</code> has type <code>of X → of Y</code> but somehow it cannot be applied to an element <code>(x : X)</code> even though <code>(↑x : of X)</code> seems to work fine. In this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> the last line fails with <code>function expected at `ofHom f` term has type `of X ⟶ of Y` </code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.ConcreteCategory.BundledHom</span>\n<span class=\"c1\">-- import Mathlib.Algebra.PEmptyInstances</span>\n<span class=\"c1\">-- import Mathlib.CategoryTheory.Functor.ReflectsIso</span>\n<span class=\"c1\">-- import Mathlib.CategoryTheory.Elementwise</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Magma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Bundled</span> <span class=\"n\">Mul</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Magma</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bundledHom</span> <span class=\"o\">:</span> <span class=\"n\">BundledHom</span> <span class=\"bp\">@</span><span class=\"n\">MulHom</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">MulHom.toFun</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulHom.id</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulHom.comp</span><span class=\"o\">,</span>\n    <span class=\"c1\">--Porting note : was `@MulHom.coe_inj` which is deprecated</span>\n    <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_injective</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">LargeCategory</span> <span class=\"n\">for</span> <span class=\"n\">Magma</span>\n<span class=\"kd\">instance</span> <span class=\"n\">concreteCategory</span> <span class=\"o\">:</span> <span class=\"n\">ConcreteCategory</span> <span class=\"n\">Magma</span> <span class=\"o\">:=</span> <span class=\"n\">BundledHom.concreteCategory</span> <span class=\"n\">MulHom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Magma</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Bundled.coeSort</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Bundled.of</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofHom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">of</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ofHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>demonstration which worked in lean3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.hom.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled_hom</span>\n<span class=\"c1\">-- import algebra.pempty_instances</span>\n<span class=\"c1\">-- import category_theory.functor.reflects_isomorphisms</span>\n<span class=\"c1\">-- import category_theory.elementwise</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Magma</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">has_mul</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Magma</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bundled_hom</span> <span class=\"o\">:</span> <span class=\"n\">bundled_hom</span> <span class=\"bp\">@</span><span class=\"n\">mul_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">mul_hom.to_fun</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_hom.id</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_hom.comp</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mul_hom.coe_inj</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"o\">[</span><span class=\"n\">large_category</span><span class=\"o\">,</span> <span class=\"n\">concrete_category</span><span class=\"o\">]]</span> <span class=\"n\">Magma</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">Magma</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">bundled.has_coe_to_sort</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Magma</span> <span class=\"o\">:=</span> <span class=\"n\">bundled.of</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of_hom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">of</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">of</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">of_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Magma</span>\n</code></pre></div>\n<p>Does anybody have an idea?</p>",
        "id": 364595193,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1686236882
    },
    {
        "content": "<p>(I also just realised that <code>of X → of Y</code> and <code>of X ⟶ of Y</code> are not the same thing... the latter is a quiver. so the problem might have to do with quivers, but Im out of time to debug for now)</p>",
        "id": 364597166,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1686237240
    }
]