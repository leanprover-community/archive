[
    {
        "content": "<p>I;m trying to port <a href=\"https://github.com/leanprover-community/mathlib4/pull/1328\"><code>Data.Rat.MetaDefs</code></a>. I could find the <code>expr</code> is defined in the lean3 standard. What is the alternative of that in lean4?</p>",
        "id": 319533672,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672906662
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a></p>",
        "id": 319540034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672909633
    },
    {
        "content": "<p>Didn't mathport answer that for you though?</p>",
        "id": 319540072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672909647
    },
    {
        "content": "<p>No, meta code has very few alignments because we aren't using mathport to port meta code</p>",
        "id": 319543995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672911068
    },
    {
        "content": "<p>I think it is reasonable to have a few obvious alignments like expr, level, name though</p>",
        "id": 319544057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672911094
    },
    {
        "content": "<p>Yeah, I think we may as well put in the obvious alignments to get people started</p>",
        "id": 319545820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672911688
    },
    {
        "content": "<p>Would the ported file indeed lie at <code>Mathlib/Data/Rat/MetaDefs.lean</code> or would it go somewhere else?</p>",
        "id": 345027355,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679980933
    },
    {
        "content": "<p>It's a moot point, this is a meta file and if it needs porting / replacing for some concrete purpose in other meta code, then the authors of that will presumably decide where the material goes. We're simply not porting meta code on a \"file-by-file\" basis.</p>",
        "id": 345032485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679983084
    },
    {
        "content": "<p>We seem to be porting this now on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5934\">#5934</a>; I noticed it on <a href=\"https://github.com/leanprover-community/mathlib4/pulls?q=is%3Aopen+is%3Apr+label%3Ahelp-wanted+sort%3Aupdated-asc+-label%3Anew-feature+-label%3Aafter-port\">#help-wanted</a>. Many or all of these defs seem to overlap with internal <code>norm_num</code> components. Should we refactor them to use those internal norm_num components? Or are we porting this file separately as a demonstration of Qq, or for some other reason? (Sorry, I couldn't find a recent zulip discussion about this file, though I thought I saw one somewhere...)</p>",
        "id": 375797833,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689524484
    },
    {
        "content": "<p>I just thought I'd have a go at porting it as a Qq exercise</p>",
        "id": 375797875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524505
    },
    {
        "content": "<p>I agree there's almost certainly overlap</p>",
        "id": 375797902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524519
    },
    {
        "content": "<p>I think the defs that are probably actually useful are:</p>\n<ul>\n<li><code>def Qq.ofRat {u : Lean.Level} (α : Q(Type u)) : ℚ → Lean.MetaM Q($α)</code></li>\n<li><code>def Rat.toExprQ {u : Lean.Level} (α : Q(Type u)) (_ : Q(Neg $α)) (_ : Q(Div $α)) (q : ℚ)\n  (_ : let qnna := q.num.natAbs; by exact Q(OfNat $α $qnna))\n  (i3 : let qd := q.den; by exact Q(OfNat $α $qd)) : Q($α)</code></li>\n</ul>",
        "id": 375798162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524600
    }
]