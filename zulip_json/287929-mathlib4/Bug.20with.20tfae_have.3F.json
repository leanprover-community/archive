[
    {
        "content": "<p>It looks like the <code>tfae_have</code> tactic doesn't work when variables appear in the TFAE list which were introduced into the context during tactic mode. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.TFAE</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.TFAE</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"c1\">-- error: [_uniq.5469 = 1, _uniq.5469 + 1 = 2] must be an explicit list of propositions</span>\n  <span class=\"n\">tfae_finish</span>\n</code></pre></div>\n<p>This is the sort of operation one wants to do when there's a rewrite that is helpful for multiple implications. Is this a bug? Is there a workaround?</p>\n<p>Note that the following examples work fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.TFAE</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.TFAE</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">tfae_finish</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.TFAE</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">tfae_have</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">tfae_finish</span>\n    <span class=\"n\">n</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 368369817,
        "sender_full_name": "Grant Barkley",
        "timestamp": 1687384543
    },
    {
        "content": "<p>Definitely a bug; it seems to be a problem with the <code>Qq</code> match. If I replace <code>~q($a :: $l') =&gt; ...</code> on line 94 with the manual version <code>.app (.app (.app (.const ``List.cons _) _) a) l' =&gt; ...</code>, there's no issue. I'm not quite sure why...</p>",
        "id": 368373874,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687386449
    },
    {
        "content": "<p>the error looks like a missing withContext</p>",
        "id": 368374057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687386530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bug.20with.20tfae_have.3F/near/368374057\">said</a>:</p>\n<blockquote>\n<p>the error looks like a missing withContext</p>\n</blockquote>\n<p>Do you have a Zulip hotkey pasting that sentence?</p>",
        "id": 368374146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687386575
    },
    {
        "content": "<p>note that Qq match uses isDefEq and hence needs a well formed local context appropriate for the thing being matched</p>",
        "id": 368374147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687386576
    },
    {
        "content": "<p>The <code>withContext</code>s were actually the second thing I looked at, but moving the <code>goal.withContext</code> line to the appropriate place in the tactic didn't help. Are there some cases where it can \"fail to propagate inwards\" somehow?</p>",
        "id": 368375393,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687387181
    },
    {
        "content": "<p>Huh. Maybe the issue is that <code>generalize n = m</code> does not actually update the goal's context correctly? I'm not seeing any hypothesis of type <code>n = m</code> appear in the tactic state.</p>",
        "id": 368376180,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687387518
    },
    {
        "content": "<p>Same issue with <code>generalize h : n = m</code></p>",
        "id": 368376389,
        "sender_full_name": "Grant Barkley",
        "timestamp": 1687387651
    },
    {
        "content": "<p>And with <code>cases'</code>, which is how I originally noticed it</p>",
        "id": 368376490,
        "sender_full_name": "Grant Barkley",
        "timestamp": 1687387687
    },
    {
        "content": "<p>Oh, I see, I misread the \"works just fine\" example. And there's no reason it should <em>need</em> the hypothesis in the context anyway. Hmmm.</p>",
        "id": 368377197,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687388076
    },
    {
        "content": "<p>Actually, I was doing something silly which meant I was looking at the wrong output for ages, rip. Updating the context correctly works fine. PR to follow shortly</p>",
        "id": 368378532,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687388772
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5358\">!4#5358</a> ; I also added an <code>instantiateMVars</code> where it ought to be just to preempt problems from that, even though that's not related.</p>",
        "id": 368380756,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687390134
    }
]