[
    {
        "content": "<p>Hey everyone, currently porting <code>Algebra.Category.GroupCat.Adjunctions</code> (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/5292\">PR 5292</a>), and I'm down to 3 errors that are all essentially the same error, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The free-forgetful adjunction for abelian groups.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"bp\">⊣</span> <span class=\"n\">forget</span> <span class=\"n\">AddCommGroupCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Adjunction.mkOfHomEquiv</span>\n    <span class=\"o\">{</span> <span class=\"n\">homEquiv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeAbelianGroup.lift.symm</span>\n      <span class=\"n\">homEquiv_naturality_left_symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">AddCommGroup.adj</span> <span class=\"n\">AddCommGroupCat.adj</span>\n</code></pre></div>\n<p>This errors at the <code>rfl</code>, with the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.3139</span> <span class=\"bp\">?</span><span class=\"n\">m.3139</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeAbelianGroup.lift.symm</span><span class=\"o\">)</span> <span class=\"n\">X'</span><span class=\"bp\">✝</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">free.map</span> <span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"bp\">≫</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"bp\">↦</span> <span class=\"n\">FreeAbelianGroup.lift.symm</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"bp\">✝</span> <span class=\"n\">Y</span><span class=\"bp\">✝</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">g</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Essentially what I need to show is that <code>↑FreeAbelianGroup.lift (f ≫ g) = free.map f ≫ ↑FreeAbelianGroup.lift g</code>, which seems like a use case for <code>FreeAbelianGroup.lift_comp</code> but I can't quite get that to work either. Any ideas?</p>",
        "id": 368051342,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1687294286
    },
    {
        "content": "<p>Just a heads-up: I've edited <code>Mathlib.lean</code> in that PR because otherwise <code>lake exe cache get</code> doesn't work for me.</p>",
        "id": 368052661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687294702
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"bp\">⊣</span> <span class=\"n\">forget</span> <span class=\"n\">AddCommGroupCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Adjunction.mkOfHomEquiv</span>\n    <span class=\"o\">{</span> <span class=\"n\">homEquiv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FreeAbelianGroup.lift.symm</span>\n      <span class=\"n\">homEquiv_naturality_left_symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intros</span>\n        <span class=\"n\">ext</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Equiv.symm_symm</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">FreeAbelianGroup.lift_comp</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It's a bit annoying that this is no longer <code>rfl</code>. I don't really know how that has happened.</p>",
        "id": 368053199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687294863
    },
    {
        "content": "<p><code>FreeAbelianGroup</code> has always been pretty fragile, relying on too much defeq, so it's not totally surprising. <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>",
        "id": 368063863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687299179
    },
    {
        "content": "<p>Thanks! I've fixed the other errors and the PR is now awaiting review.</p>",
        "id": 368074864,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1687305167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"623879\">@Geno Racklin Asher</span>, I left a few comments.</p>",
        "id": 368076346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687306064
    },
    {
        "content": "<p>Sweet, thanks! Should all be resolved now.</p>",
        "id": 368080481,
        "sender_full_name": "Geno Racklin Asher",
        "timestamp": 1687308135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"623879\">Geno Racklin Asher</span> has marked this topic as resolved.</p>",
        "id": 368083210,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687309408
    },
    {
        "content": "<p>Generally no need, <span class=\"user-mention\" data-user-id=\"623879\">@Geno Racklin Asher</span>, to mark things as resolved. Zulip lets you do this, but we wish it didn't. (It's very poorly implemented.)</p>",
        "id": 368088807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687312103
    }
]