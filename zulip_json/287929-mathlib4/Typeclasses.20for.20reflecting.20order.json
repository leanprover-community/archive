[
    {
        "content": "<p>I think I've just put the finger on one of the things I find weird about the <code>Covariant</code>/<code>Contravariant</code> business. I can justify the existence of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">PosMulMono</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass</span> <span class=\"n\">α</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulPosMono</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass</span> <span class=\"n\">α</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">PosMulStrictMono</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulPosStrictMono</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406024842,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772000
    },
    {
        "content": "<p>But I can't justify the existence of the other four:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">PosMulReflectLT</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulPosReflectLT</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">PosMulMonoRev</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulPosMonoRev</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ContravariantClass</span> <span class=\"n\">α</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406024933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, is there really a situation where \"reverse monotonicity\" (<code>f a &lt; f b → a &lt; b</code>) is not deducible from linearity of the order + monotonicity (<code>b ≤ a → f b ≤ f a</code>)?</p>",
        "id": 406025336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772119
    },
    {
        "content": "<p>I've tried looking for use cases in mathlib and none showed up</p>",
        "id": 406025466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772156
    },
    {
        "content": "<p>the complex numbers with the evil order (<code>a &lt;= b</code> iff <code>a.im = b.im</code> and <code>a.re &lt;= b.re</code>) satisfies all these classes, I believe.<br>\nNow I'm not sure if that actually is used in mathlib, but I expect that are natural non-linear orders that also satisfy it.</p>",
        "id": 406026287,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701772428
    },
    {
        "content": "<p>Oh! Good point</p>",
        "id": 406026479,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772481
    },
    {
        "content": "<p>And I think it's good if the Co(ntra)variant classes are also usable in rare cases: they are already a layer more explicit than the bundled classes like <code>LinearOrderedRing</code>  and friends.</p>",
        "id": 406026523,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701772493
    },
    {
        "content": "<p>The context is that today is the day I've decided I was done with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderedSMul#doc\">docs#OrderedSMul</a>, so I'm copying all the covariant/contravariant machinery from <code>*</code> to <code>•</code></p>",
        "id": 406027022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701772627
    },
    {
        "content": "<p>I find <code>OrderedSMul</code> cumbersome, too.</p>",
        "id": 406034095,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701774864
    }
]