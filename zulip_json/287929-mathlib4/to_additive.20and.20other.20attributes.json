[
    {
        "content": "<p>There is some <a href=\"https://github.com/leanprover-community/mathlib4/blob/7be3f9939fab1b0a8c8cfe8c4b1cdfcdaafc6c4b/Mathlib/Tactic/ToAdditive.lean#L910\">hacky code</a> when we want to apply <code>to_additive</code> and other attributes to a declaration.<br>\nThe problem we're trying to solve is the following:</p>\n<ul>\n<li><code>to_additive</code> generates an additivized version of each declaration, and there is a dictionary to keep track of the (multipliciative, additive) pairs of declarations.</li>\n<li>Other attributes (<code>simp</code>, <code>norm_cast</code>, <code>simps</code>, ...) can also generate new declarations (e.g. equation lemmas)</li>\n</ul>\n<p>In order for <code>to_additive</code> to work, the declaration-pairs generated by other attributes also need to be added to the dictionary. Currently this is done in a hacky way for <code>simp</code> and <code>simps</code>, by modifying what these attributes do (that is: run versions of the attributes that return an array of added declarations and then insert translations between those), but this is not really extendible.</p>\n<p>I was considering a new approach: do something similar to <code>whatsnew in</code>: look at what declarations have been added to the environment, and just pairwise add these declarations to the dictionary.</p>\n<p>Two questions:</p>\n<ul>\n<li>Does this seem like a reasonable approach? Is there a less hacky way to do this?</li>\n<li>In what way is the list returned by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PersistentHashMap.toList#doc\">docs#Lean.PersistentHashMap.toList</a> ordered? I need to make sure that if an attribute adds multiple declarations, the correct correspondences are added to the dictionary.</li>\n</ul>",
        "id": 407222277,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702294791
    },
    {
        "content": "<p>(c.f. bug report at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1074\">#1074</a>)</p>",
        "id": 407222368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702294811
    },
    {
        "content": "<p>An alternative approach would be to have a core change which adds some kind of environment hook, which allows you to run a handler whenever anything is added to the environment.</p>",
        "id": 407225070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702295861
    }
]