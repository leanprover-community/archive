[
    {
        "content": "<p>Hey there ! Lately I have been asking a lot of questions related to some proofs I have been attempting to formalize in Lean4 about G4ip (a contraction-free sequent calculus for intuitionistic propositional logic).</p>\n<p>Currently I am stuck because of a dependent elimination error, I am am somewhat puzzled by the problem.</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Variable</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAnd</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAnd</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.and</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HOr</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">hOr</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.or</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.not</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.imp</span> <span class=\"n\">G</span> <span class=\"bp\">.</span><span class=\"n\">bot</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.top</span> <span class=\"o\">:=</span> <span class=\"n\">not</span> <span class=\"n\">bot</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.equiv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">imp</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">imp</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.var</span> <span class=\"n\">v</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.imp</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.not</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Bot</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.bot</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.top</span>\n\n<span class=\"c1\">-- Model theory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HeytingAlgebra</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">H</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bot</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span> <span class=\"n\">P</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">P</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⊔</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⊓</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⇨</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> We say that `A` is a consequence of `Γ` if for all valuations in any Heyting algebra, if</span>\n<span class=\"cm\">  `eval v B` is above a certain element for all `B ∈ Γ` then `eval v A` is above this element.</span>\n<span class=\"cm\">  Note that for finite sets `Γ` this corresponds exactly to</span>\n<span class=\"cm\">  `Infimum { eval v B | B ∈ Γ } ≤ eval v A`.</span>\n<span class=\"cm\">  This \"yoneda'd\" version of the definition of validity is very convenient to work with. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Models</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HeytingAlgebra</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⊨ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Models</span>\n<span class=\"kd\">def</span> <span class=\"n\">Valid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊨</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">:=</span><span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sequent</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Sequent</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span>  <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">AndI</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">AndE</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrI1</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrI2</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrE</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpI</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Now the ImpE rules, that are exploded by cases</span>\n<span class=\"c1\">-- Γ, a, B ⊢ C → Γ, a, a ⇒ B ⊢ C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEAtom</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEBot</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEAnd</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEOr</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">|||</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEImp</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A₁</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">A₂</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"c1\">-- ImpETop is not necessary see the lemma later</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"solve_mem\"</span><span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"apply_ax\"</span><span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">solve_mem</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span>\n  <span class=\"n\">first</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_singleton.mpr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_insert_self</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_insert_of_mem</span><span class=\"bp\">;</span> <span class=\"n\">solve_mem</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">apply_ax</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">Sequent.Ax</span><span class=\"bp\">;</span> <span class=\"n\">solve_mem</span><span class=\"o\">})</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sequent.ImpETop</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Sequent.ImpEImp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply_ax</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">AndI</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply_ax</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Ax</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ExFalso</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">AndI</span> <span class=\"bp\">Γ</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AndI</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"n\">hA</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"n\">hB</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">OrI1</span> <span class=\"bp\">Γ</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">hA</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"n\">hA</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">OrI2</span> <span class=\"bp\">Γ</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">hB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"n\">hB</span>\n  <span class=\"o\">}</span>\n  <span class=\"c1\">-- dependent elimination failed</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">AndE</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">C</span> <span class=\"n\">hAB</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- | AndE _ =&gt; sorry</span>\n  <span class=\"c1\">-- | OrE _ _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpI _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpEAtom _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpEBot _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpEAnd _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpEOr _ =&gt; sorry</span>\n  <span class=\"c1\">-- | ImpEImp _ _ =&gt; sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405628864,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701596759
    },
    {
        "content": "<p>I realize that the example is a bit big, but it is mostly a modified version of GlimpseOfLean applied to the sequent calculus mentionned</p>",
        "id": 405629018,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701596805
    },
    {
        "content": "<p>Another thing that surprised me is that changing the <code>cases</code> to a <code>induction</code> in the very last theorem causes an error stating the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">target's</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">cases</span><span class=\"bp\">`</span> <span class=\"n\">tactic</span> <span class=\"n\">instead</span><span class=\"o\">)</span>\n  <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n</code></pre></div>",
        "id": 405629426,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701596955
    },
    {
        "content": "<p>use <code>generalize e : A &amp;&amp;&amp; B = AB at h</code> before <code>induction</code></p>",
        "id": 405629912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701597336
    },
    {
        "content": "<p>Oh, I did not know about that <code>generalize</code> tactic, that's good for future use<br>\nThough doing that does not seem to fix the problem on my end</p>",
        "id": 405630110,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701597493
    },
    {
        "content": "<p>Maybe I need to <code>generalize e : insert (A &amp;&amp;&amp; B) \\Gamma = \\Gamma' at h</code> rather ?</p>",
        "id": 405630130,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701597520
    },
    {
        "content": "<p>oh, yes you should</p>",
        "id": 405630610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701597824
    },
    {
        "content": "<p>So that seemed to fix the issue then, may I ask why it happened ?</p>",
        "id": 405630774,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701597948
    },
    {
        "content": "<p><code>induction</code> would otherwise lose information about the index at which you are applying the inductive type, you would be left with subgoals like <code>Γ' ⊢ C -&gt; insert A (insert B Γ) ⊢ C</code> which are obviously not provable</p>",
        "id": 405632336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701598751
    },
    {
        "content": "<p>Proofs like this usually have to be careful / explicit about exactly how the index is generalized, because doing it wrong results in the wrong inductive hypothesis. The one I just showed means that you can only recurse on cases which don't change the context, meaning that <code>OrI1</code> is okay but you may have difficulty with <code>ImpEOr</code></p>",
        "id": 405632867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701598874
    },
    {
        "content": "<p>You may need to think a bit more carefully about what the induction hypothesis is here</p>",
        "id": 405633143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701598934
    },
    {
        "content": "<p>Hmm okay, I'll look into that carefully then</p>",
        "id": 405633736,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701599067
    },
    {
        "content": "<p>Thinking about it some more, I think the theorem is provable with the <code>generalize</code> as I suggested, but you also need to use <code>induction h generalizing Γ</code></p>",
        "id": 405635910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701599561
    },
    {
        "content": "<p>Hmm, probably, I'll try that then (I can't rn)</p>",
        "id": 405636197,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701599637
    },
    {
        "content": "<p>So using the <code>generalize</code> as you suggested does not fix the problem about the index in the induction, which seems weird to me.</p>\n<p>I am trying right now to do it using <code>generalize e : insert (A &amp;&amp;&amp; B) \\Gamma = \\Gamma' at h</code> but while it helped in the beginning, it does not help much anymore</p>",
        "id": 405758272,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701673037
    },
    {
        "content": "<p>Here is the (partial) proof at the moment (note that the case ImpI is done now):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=</span> <span class=\"bp\">Γ₀</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"n\">generalizing</span> <span class=\"bp\">Γ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Ax</span> <span class=\"n\">A'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">AndI</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">apply_ax</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Ax</span>\n      <span class=\"n\">solve_mem</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ExFalso</span>\n    <span class=\"n\">solve_mem</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">AndI</span> <span class=\"bp\">Γ</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span> <span class=\"n\">IHA</span> <span class=\"n\">IHB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AndI</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHA</span> <span class=\"n\">e</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHB</span> <span class=\"n\">e</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">ImpI</span> <span class=\"n\">A'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">B'</span> <span class=\"n\">hA</span> <span class=\"n\">IHA</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpI</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.Insert.comm</span> <span class=\"n\">A'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.Insert.comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IHA</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.Insert.comm</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI1</span> <span class=\"n\">hA</span> <span class=\"n\">IHA</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IHA</span> <span class=\"n\">e</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI2</span> <span class=\"n\">hB</span> <span class=\"n\">IHB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IHB</span> <span class=\"n\">e</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">AndE</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">C'</span> <span class=\"n\">hC'</span> <span class=\"n\">IHC'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    case AndE</span>\n<span class=\"cm\">    H : Type ?u.59957</span>\n<span class=\"cm\">    inst✝ : HeytingAlgebra H</span>\n<span class=\"cm\">    A B C : Formula</span>\n<span class=\"cm\">    Γ₀ : Finset Formula</span>\n<span class=\"cm\">    A' B' : Formula</span>\n<span class=\"cm\">    Γ' : Finset Formula</span>\n<span class=\"cm\">    C' : Formula</span>\n<span class=\"cm\">    hC' : Sequent (insert A' (insert B' Γ')) C'</span>\n<span class=\"cm\">    IHC' : ∀ {Γ : Finset Formula}, insert (A &amp;&amp;&amp; B) Γ = insert A' (insert B' Γ') → Sequent (insert A (insert B Γ)) C'</span>\n<span class=\"cm\">    Γ : Finset Formula</span>\n<span class=\"cm\">    e : insert (A &amp;&amp;&amp; B) Γ = insert (A' &amp;&amp;&amp; B') Γ'</span>\n<span class=\"cm\">    ⊢ Sequent (insert A (insert B Γ)) C'</span>\n<span class=\"cm\">    -/</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">OrE</span> <span class=\"n\">A'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">C'</span> <span class=\"n\">B'</span> <span class=\"n\">hA'</span> <span class=\"n\">hB'</span> <span class=\"n\">IHA'</span> <span class=\"n\">IHB'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">ImpEAtom</span> <span class=\"n\">A'</span> <span class=\"n\">B'</span> <span class=\"bp\">Γ'</span> <span class=\"n\">C</span> <span class=\"n\">hC</span> <span class=\"n\">IHC</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEBot</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEAnd</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEOr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEImp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405758466,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701673124
    },
    {
        "content": "<p>I can't really find a way to use the <code>insert (A &amp;&amp;&amp; B) \\Gamma = insert (A' &amp;&amp;&amp; B') \\Gamma'</code> to my advantage though, and that seems to be the main culprit</p>",
        "id": 405759667,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701673621
    },
    {
        "content": "<p>It seems that my induction principle is a little off, but I quite can't come up with another one.</p>\n<p>My intuition would be to make it simpler by inducting on the \"height\" of a derivaion, but I can't come up with a good way of defining the height for some reason</p>",
        "id": 405838741,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701700831
    },
    {
        "content": "<p>This gives me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Sequent.height</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'cases' failed, nested error:</span>\n<span class=\"cm\">tactic 'induction' failed, recursor 'Sequent.casesOn' can only eliminate into Prop</span>\n\n<span class=\"cm\">Γ: Finset Formula</span>\n<span class=\"cm\">C: Formula</span>\n<span class=\"cm\">x✝¹: Sequent Γ C</span>\n<span class=\"cm\">motive: Sequent Γ C → Sort ?u.60142</span>\n<span class=\"cm\">h_1: (a : C ∈ Γ) → motive _</span>\n<span class=\"cm\">a✝¹: Finset Formula</span>\n<span class=\"cm\">a✝: Formula</span>\n<span class=\"cm\">x✝: Sequent a✝¹ a✝</span>\n<span class=\"cm\">⊢ Γ = a✝¹ → C = a✝ → HEq x✝¹ x✝ → motive x✝¹</span>\n<span class=\"cm\"> after processing</span>\n<span class=\"cm\">  _</span>\n<span class=\"cm\">the dependent pattern matcher can solve the following kinds of equations</span>\n<span class=\"cm\">- &lt;var&gt; = &lt;term&gt; and &lt;term&gt; = &lt;var&gt;</span>\n<span class=\"cm\">- &lt;term&gt; = &lt;term&gt; where the terms are definitionally equal</span>\n<span class=\"cm\">- &lt;constructor&gt; = &lt;constructor&gt;, examples: List.cons x xs = List.cons y ys, and List.cons x xs = List.nil</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 405838897,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701700883
    },
    {
        "content": "<p>I think I will give up on trying to prove this, I really simply can't come up with a correct way to formulate my induction hypothesis to make it work</p>",
        "id": 405884830,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701713149
    },
    {
        "content": "<p>So, reworking the definition of my inductive type, I now include the height of the derivation _in_ the inductive type, such that <code>Sequent G A n</code> represents derivations From G to A with size n</p>",
        "id": 405905550,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701721285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"658705\">@Thomas Vigouroux</span> your last proof doesn't work for me, <code>solve_mem</code> fails in two cases</p>",
        "id": 405909577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701723215
    },
    {
        "content": "<p>Oh I think I changed the definition of the macro to include <code>assumption</code> as a first clause in the <code>first</code> block</p>",
        "id": 405913051,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701724651
    },
    {
        "content": "<p>I've also exceeded my budget to think about this, but my recommendation would be to try to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sequent.mono</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"bp\">Γ'</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Γ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Γ'</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sequent.AndE.invertible</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">}))</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and do cases on whether <code>A &amp;&amp;&amp; B</code> is equal to <code>A' &amp;&amp;&amp; B'</code> in the AndE case</p>",
        "id": 405916286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701726123
    },
    {
        "content": "<p>Okay so here is the new proof I am attempting (complete file for completeness):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Variable</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAnd</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAnd</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.and</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HOr</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">hOr</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.or</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.not</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.imp</span> <span class=\"n\">G</span> <span class=\"bp\">.</span><span class=\"n\">bot</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.top</span> <span class=\"o\">:=</span> <span class=\"n\">not</span> <span class=\"n\">bot</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Formula.equiv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">imp</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">imp</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.var</span> <span class=\"n\">v</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Formula.imp</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.not</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Bot</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.bot</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"n\">Formula</span> <span class=\"n\">where</span>\n  <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">Formula.top</span>\n\n<span class=\"c1\">-- Model theory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HeytingAlgebra</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">H</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bot</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">⊥</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span> <span class=\"n\">P</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"n\">P</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⊔</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⊓</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span> <span class=\"bp\">⇨</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> We say that `A` is a consequence of `Γ` if for all valuations in any Heyting algebra, if</span>\n<span class=\"cm\">  `eval v B` is above a certain element for all `B ∈ Γ` then `eval v A` is above this element.</span>\n<span class=\"cm\">  Note that for finite sets `Γ` this corresponds exactly to</span>\n<span class=\"cm\">  `Infimum { eval v B | B ∈ Γ } ≤ eval v A`.</span>\n<span class=\"cm\">  This \"yoneda'd\" version of the definition of validity is very convenient to work with. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Models</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HeytingAlgebra</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Variable</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">eval</span> <span class=\"n\">v</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⊨ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Models</span>\n<span class=\"kd\">def</span> <span class=\"n\">Valid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span> <span class=\"bp\">⊨</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hABool</span><span class=\"o\">:</span> <span class=\"n\">HeytingAlgebra</span> <span class=\"n\">Bool</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">himp_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">himp</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Provability</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">27</span> <span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">:=</span><span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sequent</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Sequent</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">AndI</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">AndE</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrI1</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrI2</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">OrE</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">|||</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpI</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Now the ImpE rules, that are exploded by cases</span>\n<span class=\"c1\">-- Γ, a, B ⊢ C → Γ, a, a ⇒ B ⊢ C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEAtom</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEBot</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEAnd</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEOr</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">|||</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">ImpEImp</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">A₁</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A₂</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">A₂</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">insert</span> <span class=\"o\">((</span><span class=\"n\">A₁</span> <span class=\"bp\">⟹</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span>\n<span class=\"c1\">-- ImpETop is not necessary see the lemma later</span>\n\n<span class=\"c1\">-- Because this is a recursive macro, this has to be done in two parts</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finset_extract</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"bp\">∃</span><span class=\"n\">S'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"n\">S'</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∉</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">exists</span> <span class=\"n\">S.erase</span> <span class=\"n\">A</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.insert_erase</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.not_mem_erase</span> <span class=\"n\">A</span> <span class=\"n\">S</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"solve_mem\"</span><span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">solve_mem</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span>\n  <span class=\"n\">first</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_singleton.mpr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_insert_self</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_insert_of_mem</span><span class=\"bp\">;</span> <span class=\"n\">solve_mem</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"apply_ax\"</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">Sequent.Ax</span><span class=\"bp\">;</span> <span class=\"n\">solve_mem</span><span class=\"o\">})</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sequent.ImpETop</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"bp\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Sequent.ImpEImp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply_ax</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Sequent.mono</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">Γ</span> <span class=\"n\">generalizing</span> <span class=\"bp\">Δ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Sequent.Ax</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Sequent.ExFalso</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AndI</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span> <span class=\"n\">IHA</span> <span class=\"n\">IHB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AndI</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHA</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHB</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpI</span> <span class=\"n\">h'</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpI</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IH</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.insert_subset_insert</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI1</span> <span class=\"n\">h'</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI2</span> <span class=\"n\">h'</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">AndE</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">Γ</span> <span class=\"n\">C</span> <span class=\"n\">h'</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">hAB</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span> <span class=\"k\">then</span> <span class=\"o\">{</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">Γ'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"bp\">Γ'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">Γ'</span><span class=\"n\">nm</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset_extract</span> <span class=\"n\">hAB</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=</span> <span class=\"bp\">Γ</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.insert_eq_self.mpr</span> <span class=\"n\">hAB</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">Γ'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">Δ'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"n\">nm</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset_extract</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:=</span><span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:=</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span>\n        <span class=\"n\">simp</span>\n      <span class=\"o\">})</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">AndE</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"bp\">Δ'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"n\">nm</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset_extract</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:=</span><span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:=</span><span class=\"n\">A</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span>\n        <span class=\"n\">simp</span>\n      <span class=\"o\">})</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">AndE</span>\n      <span class=\"n\">apply</span> <span class=\"n\">IH</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.insert_subset_insert</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.insert_subset_insert</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Finset.insert_subset_insert_iff</span> <span class=\"n\">hAB</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEAtom</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEBot</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEAnd</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEOr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEImp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406007202,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701766863
    },
    {
        "content": "<p>I am already stuck at the <code>AndE</code> case, when <code>A &amp;&amp;&amp; B \\in \\Gamma</code>, in this case, my intuition is that I can just reduce to a case with a <code>\\Gamma'</code> sucha that <code>A &amp;&amp;&amp; B \\notin \\Gamma'</code>, but the induction hypothesis is wrong in this case.</p>",
        "id": 406007610,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701766972
    },
    {
        "content": "<p>I don't think you need to do cases on <code>A &amp;&amp;&amp; B \\in Gamma</code> to prove monotonicity</p>",
        "id": 406011259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701768216
    },
    {
        "content": "<p>I thought too, but I can't find the theorem I'd need to avoid the cases on that</p>",
        "id": 406012828,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701768736
    },
    {
        "content": "<p>Okay so I think I found the correct way to state the theorem for the proof to work, the thing I am now proving is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sequent.mono</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>Which is much esaier to prove because of the union</p>",
        "id": 406082271,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701789870
    },
    {
        "content": "<p>Here's the complete proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Sequent.weakening</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"bp\">Γ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Ax</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ax</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_union_left</span> <span class=\"bp\">Δ</span> <span class=\"n\">h'</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ExFalso</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ExFalso</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_union_left</span> <span class=\"bp\">Δ</span> <span class=\"n\">h'</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AndI</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IHA</span> <span class=\"n\">IHB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AndI</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHA</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHB</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpI</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpI</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI1</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrI2</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrI2</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">AndE</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AndE</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEAtom</span> <span class=\"n\">_</span>  <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpEAtom</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">OrE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IHA</span> <span class=\"n\">IHB</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">OrE</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHA</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHB</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEBot</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpEBot</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEAnd</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpEAnd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEOr</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpEOr</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ImpEImp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IHA</span> <span class=\"n\">IHC</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ImpEImp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.insert_union</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHA</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IHC</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Sequent.mono</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊆</span> <span class=\"bp\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"bp\">Δ</span> <span class=\"bp\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">:</span> <span class=\"bp\">Δ</span> <span class=\"bp\">\\</span> <span class=\"bp\">Γ</span> <span class=\"bp\">=</span> <span class=\"bp\">Δ'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"bp\">Δ</span> <span class=\"bp\">=</span> <span class=\"bp\">Γ</span> <span class=\"bp\">∪</span> <span class=\"bp\">Δ'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"bp\">Δ'</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">Δ</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">weakening</span> <span class=\"n\">h</span><span class=\"bp\">Γ</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406084051,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701790402
    }
]