[
    {
        "content": "<p>Ok, so taking my stab at card embedding <a href=\"https://github.com/leanprover-community/mathlib4/pull/2166\">https://github.com/leanprover-community/mathlib4/pull/2166</a> and I am a bit stuck. </p>\n<p>Can someone help me understand the error message?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span>\n  <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.18390</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.18390</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the erroring line is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction'</span> <span class=\"o\">‹</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"n\">using</span> <span class=\"n\">Fintype.induction_empty_option</span> <span class=\"k\">with</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span> <span class=\"n\">ih</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>Here is induction_empty_option <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fintype/Option.lean#L93\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fintype/Option.lean#L93</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An induction principle for finite types, analogous to `Nat.rec`. It effectively says</span>\n<span class=\"sd\">that every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_empty_option</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">of_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">e.symm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">β</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_empty</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">PEmpty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_option</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>\n<p>induction_empty_option above seems to take a <br>\nUnsure what this error means, I think it means that <code>‹Fintype α›</code> is type <code>Fintype α : Type u_1</code> but needs to be <code>Type _ : Type _</code>, but i don't know what lean means by <code>Type ?u.18390 : Type (?u.18390 + 1)</code>, a type of types or something</p>",
        "id": 326737468,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675923450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244020\">@Alex Kassil</span> does <code>refine' Fintype.induction_empty_option _ _ _</code> work, instead of the <code>induction'</code> line?</p>",
        "id": 326738148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675923902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thanks, that unblocks me!</p>",
        "id": 326740139,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675925188
    },
    {
        "content": "<p>Another step another error message. Can anyone help me make heads of tails of this? <br>\nerror:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_1</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span>\n<span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₂</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">descFactorial</span> <span class=\"bp\">‖</span><span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span><span class=\"bp\">‖</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₁</span> <span class=\"o\">:=</span> <span class=\"n\">ofEquiv</span> <span class=\"n\">α₂</span> <span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span>\n<span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">e</span> <span class=\"n\">v1</span>\n<span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span> <span class=\"n\">card_congr</span> <span class=\"n\">v2</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">descFactorial</span> <span class=\"bp\">‖</span><span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span><span class=\"bp\">‖</span><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_1</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span>\n<span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₂</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">descFactorial</span> <span class=\"bp\">‖</span><span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span><span class=\"bp\">‖</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₁</span> <span class=\"o\">:=</span> <span class=\"n\">ofEquiv</span> <span class=\"n\">α₂</span> <span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span>\n<span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">e</span> <span class=\"n\">v1</span>\n<span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span> <span class=\"n\">card_congr</span> <span class=\"n\">v2</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"n\">descFactorial</span> <span class=\"bp\">‖</span><span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">‖</span><span class=\"n\">α₂</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>Code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span> <span class=\"n\">ih</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">α₂</span> <span class=\"n\">e.symm</span>\n      <span class=\"k\">let</span> <span class=\"n\">v1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">e</span> <span class=\"n\">v1</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span> <span class=\"n\">card_congr</span> <span class=\"n\">v2</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">v3</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">card_congr</span> <span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What confuses me is I see in the goal state <code>‖α₂ ↪ β‖</code>, so I should be able to just rw with v3</p>",
        "id": 326743564,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675926943
    },
    {
        "content": "<p>Does <code>erw</code> work instead of <code>rw</code>?</p>",
        "id": 326743820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675927043
    },
    {
        "content": "<p>Also, you can maybe set <code>pp.implicit</code> to true. To see if implicit arguments line up.</p>",
        "id": 326743917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675927074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<p>No, same error with <code>erw</code>.<br>\nDo I set <code>pp.implicit</code> to true with <code>set_option autoImplicit true</code>? or <code>set_option pp.explicit false</code>? I don't seem to have a <code>pp.implicit</code> option</p>",
        "id": 326744782,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675927407
    },
    {
        "content": "<p>I also just pushed my local state so far in case that makes it easier to see what I have tried <a href=\"https://github.com/leanprover-community/mathlib4/pull/2166/commits/4feaff521e651201c8e71aba20e8075177e68b1d\">https://github.com/leanprover-community/mathlib4/pull/2166/commits/4feaff521e651201c8e71aba20e8075177e68b1d</a></p>",
        "id": 326745134,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675927560
    },
    {
        "content": "<p>Setting pp.explicit to true might hint at the error? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_1</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span>\n<span class=\"n\">emb</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₂</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">descFactorial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₁</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ofEquiv</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Equiv.symm</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span>\n<span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">e</span> <span class=\"n\">v1</span>\n<span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₁</span> <span class=\"n\">β</span> <span class=\"n\">this</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">card_congr</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₁</span> <span class=\"n\">β</span> <span class=\"n\">this</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"n\">v2</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">descFactorial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"n\">Lean</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 326745528,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675927690
    },
    {
        "content": "<p>aah, it's now called <code>pp.explicit</code> in Lean 4. Yes, that's the option I meant.</p>",
        "id": 326745783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675927823
    },
    {
        "content": "<p>You can try to <code>convert v3.symm</code>.</p>",
        "id": 326745928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675927900
    },
    {
        "content": "<p>Still unable to crack this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span>\n<span class=\"n\">emb</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">α₁α₂</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₂</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">descFactorial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">β</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"n\">v0</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α₁</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ofEquiv</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Equiv.symm</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">v1</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span>\n<span class=\"n\">v2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">e</span> <span class=\"n\">v1</span>\n<span class=\"n\">v3</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₁</span> <span class=\"n\">β</span> <span class=\"n\">v0</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">card_congr</span> <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₁</span> <span class=\"n\">β</span> <span class=\"n\">v0</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"n\">v2</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">HEq.rfl</span> <span class=\"bp\">?</span><span class=\"n\">m.22040</span> <span class=\"bp\">?</span><span class=\"n\">m.22041</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.22040</span> <span class=\"bp\">?</span><span class=\"n\">m.22041</span> <span class=\"bp\">?</span><span class=\"n\">m.22040</span> <span class=\"bp\">?</span><span class=\"n\">m.22041</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The issue seems to be that the two embeddings are slightly different, unsure why or how to fix :(</p>",
        "id": 326752659,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675930638
    },
    {
        "content": "<p>my code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">card_embedding_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">emb</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‖</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"bp\">‖</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">β</span><span class=\"bp\">‖.</span><span class=\"n\">descFactorial</span> <span class=\"bp\">‖</span><span class=\"n\">α</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n    <span class=\"c1\">-- letI := 1</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">Fintype.induction_empty_option</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">α</span>\n    <span class=\"c1\">-- intro α₁ α₂ h₂ e ih</span>\n\n    <span class=\"c1\">-- induction' ‹Fintype α› using Fintype.induction_empty_option with α₁ α₂ h₂ e ih α h ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span> <span class=\"n\">ih</span>\n      <span class=\"k\">let</span> <span class=\"n\">v0</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">α₂</span> <span class=\"n\">e.symm</span>\n      <span class=\"k\">let</span> <span class=\"n\">v1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Equiv.embeddingCongr</span> <span class=\"n\">e</span> <span class=\"n\">v1</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">v3</span> <span class=\"o\">:=</span> <span class=\"n\">card_congr</span> <span class=\"n\">v2</span>\n      <span class=\"n\">convert</span> <span class=\"bp\">←</span><span class=\"n\">v3.symm</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 326752724,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675930667
    },
    {
        "content": "<p>Huh, is that left-arrow legal in that <code>convert</code> line?</p>",
        "id": 326753062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675930782
    },
    {
        "content": "<p>well it seems to be legal<br>\n<a href=\"/user_uploads/3121/z8fWD7gHsq1JsBCQi9cYAtKK/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/z8fWD7gHsq1JsBCQi9cYAtKK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/z8fWD7gHsq1JsBCQi9cYAtKK/image.png\"></a></div>",
        "id": 326753466,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675930936
    },
    {
        "content": "<p>if I do it without arrow, still works,but my goal again has two different embeddings</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">emb</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Embedding.fintype</span> <span class=\"n\">α₂</span> <span class=\"n\">β</span> <span class=\"n\">h₂</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.propDecidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 326753576,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675930988
    },
    {
        "content": "<p>Those are the same, but in a different order, right?</p>",
        "id": 326754172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675931185
    },
    {
        "content": "<p>Does <code>congr</code> make progress here? Ideally this would be <code>congr; apply Subsingleton.elim</code></p>",
        "id": 326754225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675931208
    },
    {
        "content": "<p>The <code>&lt;-</code> is supposed to just reverse the order of the resulting equalities</p>",
        "id": 326754246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675931219
    },
    {
        "content": "<p>That seems to match reality (-;</p>",
        "id": 326754293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675931231
    },
    {
        "content": "<p>But I didn't know about that feature.</p>",
        "id": 326754351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675931251
    },
    {
        "content": "<p>congr doesn't seem to do anything</p>",
        "id": 326754716,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675931351
    },
    {
        "content": "<p>Gonna go to sleep soon, but will leave my pr as help wanted</p>",
        "id": 326755375,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675931574
    },
    {
        "content": "<p>also pushed my current state to my branch <a href=\"https://github.com/leanprover-community/mathlib4/pull/2166\">https://github.com/leanprover-community/mathlib4/pull/2166</a> if anyone is willing to take another look :)</p>",
        "id": 326755751,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675931685
    },
    {
        "content": "<p>It is quite surprising that <code>refine' congr_arg (@card (α₂ ↪ β)) _</code> doesn't make progress</p>",
        "id": 326757214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675932197
    },
    {
        "content": "<p>Huh! The goal seems to be not well-typed! Because <code>emb</code> has type <code>Fintype (α ↪ β)</code>.</p>",
        "id": 326757918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675932438
    },
    {
        "content": "<p>Yea somehow we need to related <code>@Embedding.fintype α₂ β h₂ b (fun a b =&gt; Classical.propDecidable (@Eq α₂ a b)) fun a b =&gt;\n      Classical.propDecidable (@Eq β a b))</code> and <code>Fintype (α ↪ β)</code></p>",
        "id": 326762474,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1675933952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244020\">Alex Kassil</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addin.20.40alexkassil.20on.20github.20for.20port/near/326737468\">said</a>:</p>\n<blockquote>\n<p>Ok, so taking my stab at card embedding <a href=\"https://github.com/leanprover-community/mathlib4/pull/2166\">https://github.com/leanprover-community/mathlib4/pull/2166</a> and I am a bit stuck. </p>\n<p>Can someone help me understand the error message?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span>\n  <span class=\"n\">inst</span><span class=\"bp\">✝²</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.18390</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.18390</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the erroring line is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction'</span> <span class=\"o\">‹</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"n\">using</span> <span class=\"n\">Fintype.induction_empty_option</span> <span class=\"k\">with</span> <span class=\"n\">α₁</span> <span class=\"n\">α₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span> <span class=\"n\">ih</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>Here is induction_empty_option <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fintype/Option.lean#L93\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Fintype/Option.lean#L93</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An induction principle for finite types, analogous to `Nat.rec`. It effectively says</span>\n<span class=\"sd\">that every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_empty_option</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">of_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">e.symm</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">β</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_empty</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">PEmpty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_option</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>\n<p>induction_empty_option above seems to take a <br>\nUnsure what this error means, I think it means that <code>‹Fintype α›</code> is type <code>Fintype α : Type u_1</code> but needs to be <code>Type _ : Type _</code>, but i don't know what lean means by <code>Type ?u.18390 : Type (?u.18390 + 1)</code>, a type of types or something</p>\n</blockquote>\n<p>This sounds like a bug in the induction tactic</p>",
        "id": 326765087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675934710
    },
    {
        "content": "<p>I will let someone else take over this file port due to the seeming bug.</p>",
        "id": 327223145,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1676111993
    },
    {
        "content": "<p>I'm sorry that this file with only 3 lemmas turned out to be so complicated!</p>",
        "id": 327223385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676112098
    },
    {
        "content": "<p>All good!! And all part of the fun</p>",
        "id": 327276159,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1676131985
    },
    {
        "content": "<p>Five years ago some of my basic 1st year \"intro to proofs\" problem sheets turned out to be very complicated to do in Lean, and my interpretation was that indeed this was all part of the fun (or part of the challenge, if you like).</p>",
        "id": 327279950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676133830
    },
    {
        "content": "<p>as the writer of the original file, thought I'd dive in and try find some workaround - I can now get most things working, but <code>rw</code> gives me a deterministic timeout at <code>whnf</code>?! this is way above my paygrade, sadly, but I pushed what I had</p>",
        "id": 327283573,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676135748
    },
    {
        "content": "<p>I think this proof would work better with <code>Nat.card</code> and <code>Finite</code>, now that that all exists, as I think some of the issues are the amount of <code>Fintype</code> instances I have to juggle...</p>",
        "id": 327283655,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676135777
    },
    {
        "content": "<p>not on a computer atm, but timeout at \"whnf\" sounds like somerhing that might be fixed by merging todays master with the new lean bump<span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 327289429,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1676138816
    },
    {
        "content": "<p>sadly not fully (altohugh stuff feels faster!)</p>",
        "id": 327291524,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676139891
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8E9F54fIEnLVNcBA6d1bO8bo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8E9F54fIEnLVNcBA6d1bO8bo/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/8E9F54fIEnLVNcBA6d1bO8bo/image.png\"></a></div>",
        "id": 327291525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676139894
    },
    {
        "content": "<p>for some reason Lean just doesn't like this term</p>",
        "id": 327291543,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676139905
    },
    {
        "content": "<p>whenever I try to do anything to it it gets really annoyed at me</p>",
        "id": 327291555,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676139912
    },
    {
        "content": "<p>(the heartbeats are lower but I can bump them up to any number I want and still stuff breaks)</p>",
        "id": 327291650,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676139971
    },
    {
        "content": "<p>(there's some shadowed variables in this screenshot, and I thought this may have been related - it's not)</p>",
        "id": 327292191,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676140295
    },
    {
        "content": "<p>this is really weird: Lean thinks this term has a metavariable, but it doesn't, <code>h</code> is in the context:</p>\n<p><a href=\"/user_uploads/3121/TtNcNWA15TlEYzArkTCezuSc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TtNcNWA15TlEYzArkTCezuSc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TtNcNWA15TlEYzArkTCezuSc/image.png\"></a></div>",
        "id": 327292629,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676140526
    },
    {
        "content": "<p>for the purposes of debugging, is there some tactic that I can run that says \"set this metavariable to X\" and see if this fixes it?</p>",
        "id": 327292704,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676140564
    },
    {
        "content": "<p>(also, @mods, is there any chance the preceding discussion could be moved to a thread specific to this PR?)</p>",
        "id": 327293239,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676140886
    },
    {
        "content": "<p>44 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Addin.20.40alexkassil.20on.20github.20for.20port\">#mathlib4 &gt; Addin @alexkassil on github for port</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 327293355,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676140947
    },
    {
        "content": "<p>I ran into a whnf timeout a week or two ago and the issue was that Lean couldn't unify. Providing the correct type ascription fixed it. I used #whnf and #check to figure things out. The check showed me there was a variable in one of the expressions and then I realized it wasn't unifying. So maybe try that?</p>",
        "id": 327306605,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676150525
    },
    {
        "content": "<p>I fixed it by changing other stuff, but I'm not really happy about my fix</p>",
        "id": 327309251,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676152933
    },
    {
        "content": "<p>I also made <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.fintype\">docs#function.embedding.fintype</a> just be noncomputable and not have decidable_eqs, they were causing unresolvable problems as far as I can tell</p>",
        "id": 327309266,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676152956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Efintype.2Ecard_embedding.20!4.232166/near/327292704\">said</a>:</p>\n<blockquote>\n<p>for the purposes of debugging, is there some tactic that I can run that says \"set this metavariable to X\" and see if this fixes it?</p>\n</blockquote>\n<p>i'm still curious about this, fwiw</p>",
        "id": 327773479,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676380852
    },
    {
        "content": "<p>and separately, this PR is ready for review - sorry that I didn't set the labels correctly before!</p>",
        "id": 327773684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1676380908
    },
    {
        "content": "<p>PR is merged :D</p>",
        "id": 328027025,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1676472138
    }
]