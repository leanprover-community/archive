[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2194\">!4#2194</a> I had a look at the original mathlib 3 code for this file. <code>heq_of_heq_of_eq</code> serendipitously exists in Lean 4 and I've pushed that. But <code>@@eq.drec_on</code>is not a valid field in Lean 4. What is the correct translation of this construct?</p>",
        "id": 342110221,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678898170
    },
    {
        "content": "<p>I would guess <code>Eq.drecOn</code>?</p>",
        "id": 342110859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678898317
    },
    {
        "content": "<p>It's probably something like <code>Eq.drecOn (motive := &lt;first argument&gt;) &lt;all other arguments&gt;</code></p>",
        "id": 342111947,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678898571
    },
    {
        "content": "<p>It's <code>Eq.ndrecOn</code>. I don't know what the <code>n</code> stands for.</p>",
        "id": 342112162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678898629
    },
    {
        "content": "<p>\"<strong>n</strong>on-<strong>d</strong>ependent <strong>rec</strong>ursor for the equality type\"</p>",
        "id": 342112290,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678898659
    },
    {
        "content": "<p>just pushed this to the PR. Now the rest theoretically should be easy… but I've got no more time for that today</p>",
        "id": 342112643,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678898757
    },
    {
        "content": "<p>oh ok maybe they're not exactly the same.</p>",
        "id": 342112722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678898768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq.drec_on</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ</span><span class=\"o\">),</span>\n    <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">ᾰ</span> <span class=\"n\">n</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.ndrecOn.</span><span class=\"o\">{</span><span class=\"n\">u1</span><span class=\"o\">,</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 342112883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678898803
    },
    {
        "content": "<p>it's just <code>Eq.recOn</code> in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Eq.recOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"bp\">¹</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">¹</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">a</span><span class=\"bp\">¹</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 342113740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678899019
    },
    {
        "content": "<p>pushed again, and added types. This is probably close now</p>",
        "id": 342115190,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678899332
    }
]