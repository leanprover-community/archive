[
    {
        "content": "<p>I get a strange error at <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/ToMathlib/Analysis/Calculus.lean#L126\">https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/ToMathlib/Analysis/Calculus.lean#L126</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"n\">or</span> <span class=\"kd\">constant</span> <span class=\"n\">marked</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"o\">[</span><span class=\"n\">match_pattern</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"n\">expected</span>\n</code></pre></div>\n<p>What does it mean? How do I fix this?</p>",
        "id": 378618917,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690324992
    },
    {
        "content": "<p>More details: the error disappears if I replace <code>ψ</code> with <code>a</code>.</p>",
        "id": 378644822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690336492
    },
    {
        "content": "<p>The offending theorem was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">Differentiable.fderiv_partial_fst</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">Differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">↿</span><span class=\"o\">(</span><span class=\"bp\">∂₁</span> <span class=\"bp\">𝕜</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">↦</span> <span class=\"n\">ψ.comp</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">uncurry</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext1</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">fderiv_partial_fst</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">hasFDerivAt</span>\n</code></pre></div>\n<p>I fixed compile by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.precomp#doc\">docs#ContinuousLinearMap.precomp</a></p>",
        "id": 378645656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690336941
    },
    {
        "content": "<p>Got another error, again with letter <code>ψ</code>. What makes it special?</p>",
        "id": 378651502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690340301
    },
    {
        "content": "<p>Found it! (Not really) scoped notation in <code>OperatorNorm</code>.</p>",
        "id": 378651737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690340448
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6143\">#6143</a></p>",
        "id": 378775481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690373260
    }
]