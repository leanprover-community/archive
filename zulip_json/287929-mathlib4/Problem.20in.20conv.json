[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mport</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- obtained by `conv?` and shift-clicking on the first `z`</span>\n   <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- error `cannot select argument`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><code>enter [1]</code>gives <code>| ↑Complex.abs z</code>, and <code>enter [1,1]</code> gives <code>| Complex.abs</code>. How do I reach the argument <code>z</code>?<br>\n<code>enter [1, 3]</code> gives the (expected) error <code>invalid 'arg' conv tactic, application has only 2 (nondependent) argument(s)</code>.</p>",
        "id": 400168440,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699029156
    },
    {
        "content": "<p>The issue is with the conv mode congr tactic. It should ideally produce two conv goals when applied here, one for the function being <code>FunLike</code>d and one for the argument. Unfortunately It uses a weaker congruence lemma which doesn't allow the arguments to be different, so only returns the goals of the differences between the functions. I don't see an obvious way to fix this easily, it looks like the non-conv <code>congr</code> is using <code>hcongr</code> under the hood to construct the better lemma, and this doesn't fit so nicely into the conv framework. Making a mathlib-free minimization and reporting to core would probably be the best way forward here</p>",
        "id": 400221957,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699056762
    },
    {
        "content": "<p>Now I have even managed to produce a PANIC  in conv!<br>\nUsing <code>conv?</code>, in the term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">factors</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>I select <code>¬x &lt; p</code>, shift-click and \"generate conv\". This results in</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>PANIC<span class=\"w\"> </span>at<span class=\"w\"> </span>_private.Mathlib.Tactic.Widget.Conv.0.solveLevel<span class=\"w\"> </span>Mathlib.Tactic.Widget.Conv:63:13:<span class=\"w\"> </span>no<span class=\"w\"> </span>name<span class=\"w\"> </span>found\n</code></pre></div>\n<p><em>If</em> I have time later today, I will try to minimize. (But I don't want to discourage everybody else <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 400290769,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699097186
    },
    {
        "content": "<p>It seems I cannot reproduce this in a clean test file. What I get with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.factors</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n    <span class=\"n\">List.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.factors</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">Nat.factors</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(where the <code>enter</code>line was produced by the widget) is the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">refl'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">metavariable</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">assigned</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 400317033,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699120726
    },
    {
        "content": "<p>It seems that <code>conv</code>'s <code>enter</code> is actually just not capable of visiting every sub-expression.</p>\n<p>I'm wondering if <code>conv</code> needs to be modified to support having <code>Eq</code> <em>and</em> <code>HEq</code> goals, which would let <code>conv</code> get into every argument</p>",
        "id": 400317679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699121303
    },
    {
        "content": "<p>I just had the PANIC again. It seems likely to be triggered when there are fairly complicated terms.</p>",
        "id": 400322176,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699126386
    },
    {
        "content": "<p>I also noticed that <code>conv? at h</code> does not seem to work (whereas <code>conv at h</code> does).</p>",
        "id": 400324048,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699128361
    },
    {
        "content": "<p>conv? should let you select a subterm in the local context.</p>",
        "id": 400327854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699132984
    },
    {
        "content": "<p>When I do that, <code>conv?</code> says \"The selected sub-expression should be in the main goal.\"</p>",
        "id": 400327925,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699133075
    },
    {
        "content": "<p>E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span><span class=\"bp\">?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>select <code>n ^ 4</code> (say) in <code>h</code> and shift-click.</p>",
        "id": 400328124,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699133374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I'm sorry, I misremembered. It should be fixed at  <a href=\"https://github.com/leanprover-community/mathlib4/pull/8217\">#8217</a>.</p>",
        "id": 400430260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699226735
    }
]