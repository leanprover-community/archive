[
    {
        "content": "<p>It seems that since two days, <code>lake update</code> in a repository that imports mathlib does “stuff” (override my local toolchain, run <code>lake cache</code>). Is there a way to disable that, i.e. “import mathlib without post hooks”? It may not be the right thing to do in all cases, e.g. when I am intentionally testing a fork of lean.</p>\n<p>Also (minor!) annoyances: the lean-toolchain file in mathlib has no terminating newline, and it seems to guess a wrong location for <code>elan</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">execute</span> <span class=\"n\">external</span> <span class=\"n\">process</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">elan'</span>\n</code></pre></div>\n<p>maybe because of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">which</span> <span class=\"n\">elan</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">ynxaiiw7pyrrm5has4wcipqy034dcpji</span><span class=\"bp\">-</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">elan</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 401507908,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699705936
    },
    {
        "content": "<p>I'm seeing the same and have a PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8319\">#8319</a>, but I'm not sure if using \"lake\" from the PATH as in the PR is the best approach</p>",
        "id": 401509180,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699707294
    },
    {
        "content": "<p>(The PR is not about disabling the hook, though. I agree it would be a good idea in case of overrides.)</p>",
        "id": 401509308,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1699707424
    },
    {
        "content": "<p>Ah, this is good to know! Issues like this are exactly the kind of thing I was hoping to discover by beta-testing this feature on Mathlib (as the next step is to implement a similar, but more general, approach in Lake).</p>",
        "id": 401540936,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699734760
    },
    {
        "content": "<p>This seems like a communication probably between Lake and Elan. Lake assumes that Elan steps <code>ELAN_HOME</code> to the root of its installation and the its binaries are locating in <code>$ELAN_HOME/bin</code>. It sounds like this is not the case on Nix. I think <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> will need to weigh in here on how to properly find Elan on such systems.</p>",
        "id": 401541148,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699735061
    },
    {
        "content": "<p>For now, as a stop-gap fix, my suggestion on <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> PR would be to just call Elan via <code>elan</code> directly (i.e., defaulting to one in PATH) rather than using Lake's detecting. Using the <code>+</code> option may work, but I have seen it break in the past under some circumstances.</p>",
        "id": 401541311,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699735207
    },
    {
        "content": "<p>I agree that simply using the elan that's in the path is a good bet - all distro packaging would put the binary somewhere system wide, not just Nix's</p>",
        "id": 401546292,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699741372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> As far as I understand, were the installer puts <code>elan</code> puts it is not the problem. Lake is not hard-coded to look for Elan in the home directory. The problem is that I assumed <code>ELAN_HOME</code> pointed to the root of Elan install (as it does on Windows). Apparently, <code>ELAN_HOME</code> is for something different. Fixing this detection will be important for future Lake features (e.g., <code>lake install</code>, local package cache, etc.). Maybe Lake should be guess and checking whether Lake is in <code>&lt;elan-root&gt;/toolchains/&lt;toolchain&gt;/bin/lake</code> and that elan is then located a <code>&lt;elan-root&gt;/bin/elan</code>, instead?</p>",
        "id": 401586798,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699773061
    },
    {
        "content": "<p>I don't think that would work: why should elan the binary (in general) be installed in the directory that elan installs stuff into? The location of elan the binary is determined by how that program was installed (copied manually, package manager) - just like you expect lake to be in an elan-managed place, not a lake-managed place.</p>\n<p>This is just a stop gap anyways, isn't it? because lake calling out to elan seems - to me -  to be an odd inversion of control anyways as elan is (usually) the tool that installs lake.</p>\n<p>Just using <code>elan</code> from the PATH doesn't work?</p>",
        "id": 401591110,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699777261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401591110\">said</a>:</p>\n<blockquote>\n<p>I don't think that would work: why should elan the binary (in general) be installed in the directory that elan installs stuff into? </p>\n</blockquote>\n<p>While these can be theoretically separate, Elan also manages binaries of its own (e.g., <code>lean</code>, <code>lake</code>) that it are generally added to PATH. Personally, it makes more sense to me if these are all in the same directory (which can be added to PATH to get them all).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401591110\">said</a>:</p>\n<blockquote>\n<p>This is just a stop gap anyways, isn't it? because lake calling out to elan seems - to me -  to be an odd inversion of control anyways as elan is (usually) the tool that installs lake.</p>\n</blockquote>\n<p>Lake calling Elan is not a stop gap at all. Lake will definitely need intimate knowledge of the Elan configuration to add and removes toolchain-wide packages (for a <code>lake install</code> a la <code>cargo install</code>). It will also need cooperation from Elan to manage global components (adding new shims for global packages which wish to install a toolchain-versioned executable to PATH). Admittedly, Cargo uses its own user-wide directory for this kind of stuff. However, in Cargo ecosystem, you can often build or install a crate from one Rust version and use it with another. Lean packages are generally locked to a toolchain (and need to be updated alongside them), so it makes more sense to  store them under an Elan toolchain rather than beside it (and thus need to hack together synchronization with Elan).</p>\n<blockquote>\n<p>Just using <code>elan</code> from the PATH doesn't work?</p>\n</blockquote>\n<p>It is fine as a stop-gap. However, problems could arise if the elan in PATH is not the same as the elan which launched Lake (or at, the very least, if Lake cannot distinguish the two).</p>",
        "id": 401811422,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699895427
    },
    {
        "content": "<p>Hmm, I don’t quite follow the first point. If I install <code>elan</code> from my distribution, it simply won’t be in <code>~/.elan/bin</code>.</p>\n<p>elan is already wrapping <code>lake</code>, and setting up an environment for it. So if <code>lake</code> calling back to <code>elan</code> is a supported use case, then <code>elan</code> should maybe set an environment variable <code>ELAN_BINARY</code> indicating how it wants to be called back? Such explicit coorporation between the tool might be more reliable than <code>lake</code> making assumptions about the dot-directories that <code>elan</code> manages.</p>",
        "id": 401813930,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699896376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Disable.20lake.20post-hook.20when.20importing.20mathlib.3F/near/401813930\">said</a>:</p>\n<blockquote>\n<p>So if <code>lake</code> calling back to <code>elan</code> is a supported use case, then <code>elan</code> should maybe set an environment variable <code>ELAN_BINARY</code> indicating how it wants to be called back? Such explicit coorporation between the tool might be more reliable than <code>lake</code> making assumptions about the dot-directories that <code>elan</code> manages.</p>\n</blockquote>\n<p>Yes. I agree. I would bike shed and suggest <code>ELAN</code> as the environment variable (a la <code>PYTHON</code>). In fact, I had thought this was what I was already doing via using the <code>ELAN_HOME</code> that Elan sets. It was my understanding that <code>elan</code> was expected to be stored in the <code>bin</code> directory of <code>ELAN_HOME</code> (like <code>lean</code> is expected to be stored in <code>bin</code> directory of <code>LEAN_SYSROOT</code>), but I learned otherwise from this thread.</p>",
        "id": 401860570,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699916941
    }
]