[
    {
        "content": "<p>Now that we have bumped Lean, we can finally change priorities of instances. <br>\nI believe the current instances priorities are highest for the instances that should have the lowest priority (namely, the projection to the last structure that we extend). We should experiment with making these instance priorities lowest.</p>",
        "id": 374996945,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689266722
    },
    {
        "content": "<p>Does anything good happen if you try this for some pertinent instances in the cube from CommRing to NonAssocSemiring?</p>",
        "id": 375067759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689284350
    },
    {
        "content": "<p>Is there a command to see the current priority of an instance?</p>",
        "id": 375564032,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689431745
    },
    {
        "content": "<p>Are ties on priority still broken by declaration order (latest wins)? If so, should the <code>class</code> command generate the instances in reverse order?</p>",
        "id": 375699017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689496457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/375564032\">said</a>:</p>\n<blockquote>\n<p>Is there a command to see the current priority of an instance?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.getInstancePriority%3F#doc\">docs#Lean.Meta.getInstancePriority?</a></p>",
        "id": 375840045,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689543476
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5941\">#5941</a> Kevin and I changed one instance priority at the bottom of the hierarchy, and benchmarked it. Does the <a href=\"https://unix.stackexchange.com/questions/30940/getrusage-system-call-what-is-maximum-resident-set-size\"><code>maxrss</code></a> mean that this decreases the peak memory usage by 29%? That's pretty big!</p>",
        "id": 375840311,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689543620
    },
    {
        "content": "<p>Imagine what happens if we fix 10 of those instances!</p>",
        "id": 375912827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689578598
    },
    {
        "content": "<p>And you seem to outline a strategy that could even be automated?</p>",
        "id": 375912872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689578617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/375840311\">said</a>:</p>\n<blockquote>\n<p>Does the <a href=\"https://unix.stackexchange.com/questions/30940/getrusage-system-call-what-is-maximum-resident-set-size\"><code>maxrss</code></a> mean that this decreases the peak memory usage by 29%? That's pretty big!</p>\n</blockquote>\n<p>Yes, this appears statistically significant. We have been stuck at &gt; 6GB for over a month while this run is at 4.4GB</p>",
        "id": 375913999,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689578958
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/instance_prio2\">branch#instance_prio2</a> does a few more but I'll probably have to fix the build before we can benchmark</p>",
        "id": 375925127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689581316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/375699017\">said</a>:</p>\n<blockquote>\n<p>Are ties on priority still broken by declaration order (latest wins)? If so, should the <code>class</code> command generate the instances in reverse order?</p>\n</blockquote>\n<p>How hard is it to try this suggestion?</p>",
        "id": 375952667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689586837
    },
    {
        "content": "<p>11 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump\">#mathlib4 &gt; std4 / Lean4 bump</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 375972133,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689590755
    },
    {
        "content": "<p>I have a linter failure in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> which I cannot reproduce locally -- maybe some later import now makes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.add_one_lt_iff#doc\">docs#Fin.add_one_lt_iff</a> a bad simp lemma for some reason? I am quite interested in understanding why perturbations of instance prios can cause such tiny but nonzero breakage. What is so weird and rare about these very few random lemma statements that suddenly makes them unable to unify? I'm looking at you, <code>CovariantClass</code>.</p>",
        "id": 375993731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689594973
    },
    {
        "content": "<p>I am assuming that until I fix this issue, I cannot benchmark <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> ?</p>",
        "id": 375993883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689595009
    },
    {
        "content": "<p>I opened a RFC about this at <a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a></p>",
        "id": 376008884,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689597867
    },
    {
        "content": "<p>The TL;DR: I think we should add a linter that makes sure we use the right instances everywhere in mathlib, and maybe we can change the default extends-priorities in core.</p>",
        "id": 376011337,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689598269
    },
    {
        "content": "<p>Re the linter issue in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> : I can now reproduce locally, but <code>set_option synthInstance.maxHeartbeats 40000</code> fixes it. Can I tell the linter to try harder or do I have to somehow fix this?</p>",
        "id": 376029334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689601407
    },
    {
        "content": "<p>I don't know what to do here at all. The linter error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Data.Fin.Basic</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fin</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"mi\">956</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Fin.add_one_lt_iff</span> <span class=\"n\">LINTER</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n<span class=\"n\">simplify</span> <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x_1</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this is the statement that b&lt;c implies a+b&lt;a+c for <code>Fin (n+2)</code>, and this is not true as far as I can see.</p>",
        "id": 376066643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689607553
    },
    {
        "content": "<p>I think the problem is it took too long to confirm that the statement is not true (by exhaustive search over all instances)</p>",
        "id": 376067937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689607730
    },
    {
        "content": "<p>\"I looked and I couldn't find the instance\" is treated differently to \"I tried to look but timed out before I could finish\"</p>",
        "id": 376068150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689607756
    },
    {
        "content": "<p>Kevin, just so you know, I encountered a similar problem with a <code>simpNF</code> call timing out, and it was in a file completely separate from the one being ported. In that case, the issue was a bad <code>simp</code> lemma in the new file (one which would trigger a huge amount of the time and wasn't useful), but this lemma required a <code>Compact Space</code> instance. So the <code>simpNF</code> linter was timing out looking for this instance while trying to apply this useless lemma.</p>",
        "id": 376121349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689616863
    },
    {
        "content": "<p>I commented out <code>simp</code> on the erroring lemmas and I <em>think</em> mathlib compiled...</p>",
        "id": 376127520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689618495
    },
    {
        "content": "<p>We have the results of <code>!bench</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a>. It seems pretty good.</p>",
        "id": 376348552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689686626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you think this can help with the problem of finding instances related to subtypes? For example now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Algebra</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓞</span> <span class=\"n\">K</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>happens a lot more than in mathlib3.</p>",
        "id": 376349860,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689686859
    },
    {
        "content": "<p>Wall-clock is about the same?</p>",
        "id": 376350300,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689686927
    },
    {
        "content": "<p>yeah I'm not sure if these additional changes made much difference. Basically I am very interested in making algebra faster but who knows what problems this trick will solve.</p>",
        "id": 376350552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689686980
    },
    {
        "content": "<p>I've had a bit more time to think about this. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> what should happen in the following situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroup</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>implies, via your rule, that <code>Monoid.toSemigroup</code> should be boosted and <code>CommSemigroup.toSemigroup</code> should have reduced priority. However</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LeftCancelMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LeftCancelSemigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>implies that <code>LeftCancelSemigroup.toSemigroup</code> should be boosted and <code>Monoid.toSemigroup</code> should have reduced priority -- but we just argued that we wanted to boost it. What should I do?</p>",
        "id": 376738890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689786924
    },
    {
        "content": "<p>It means that we have a non-coherent library here: either both of them should first extend the monoid part and then the semigroup part, or conversely, but certainly not a mixed situation like the one you are describing.</p>",
        "id": 376739575,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689787123
    },
    {
        "content": "<p>What is the rule for ordering the classes appearing after <code>extends</code>?</p>",
        "id": 376739751,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689787172
    },
    {
        "content": "<p>Sebastien: So you are suggesting that I redefine LeftCancelMonoid to extend these two classes but in the other order?</p>",
        "id": 376739781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689787177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/changing.20algebra.20instance.20priorities/near/376739751\">said</a>:</p>\n<blockquote>\n<p>What is the rule for ordering the classes appearing after <code>extends</code>?</p>\n</blockquote>\n<p>At least one person suggested \"alphabetical\" :-) Can we do any better than this?</p>",
        "id": 376739930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689787204
    },
    {
        "content": "<p>Complexity?</p>",
        "id": 376740006,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689787215
    },
    {
        "content": "<p>Which is more complicated -- a monoid or a commutative semigroup? :-) Aah -- one potential tie-breaker is that one of them adds data.</p>",
        "id": 376740196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689787261
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s paper argues that there is just no coherent way to do this in general, but maybe I've misunderstood.</p>",
        "id": 376746059,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689788745
    },
    {
        "content": "<p>That reminds me that I should put the final version on arXiv...</p>",
        "id": 376746314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689788818
    },
    {
        "content": "<p>I don't think that argument quite applies here: we're not worried about everything commuting, we just want to lay out or instance graph on a page such that the preferred parent is always the leftmost arrow (i.e. the sort order of the parents is the x position on the page)</p>",
        "id": 376746813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689788940
    },
    {
        "content": "<p>Well, alphabetical would work I guess, until we rename something. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 376747445,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689789116
    },
    {
        "content": "<p>This feels like it might be indicative that the priority mechanism is wrong. Because aren't we now attaching priorities to a class rather than an instance?</p>",
        "id": 376748000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689789256
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6011\">#6011</a> BTW</p>",
        "id": 376748646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689789423
    },
    {
        "content": "<p>Probably Monoid first, because it contains all the data.</p>",
        "id": 376748911,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689789488
    },
    {
        "content": "<p>But even \"contains all the data\" only works as long as one of the classes does that. I agree that it makes the most sense where possible though.</p>",
        "id": 376753731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689790605
    },
    {
        "content": "<p>One downside of experimenting here is that every change probably causes elaboration to fail somewhere, and so trying a bunch of things introduces ugly type annotations or \"obvious\" implicit args, making the source marginally uglier</p>",
        "id": 376755353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689790962
    },
    {
        "content": "<p>Can we autogenerate some skeleton of the hierarchy and try to benchmark each permutation of the orderings?</p>",
        "id": 376760969,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689792226
    },
    {
        "content": "<p>I hope the alphabetical ordering suggestion is a joke. This order is really important. It changes what becomes a field and what gets split into pieces not overlapping the previous fields. And this has important performance implications. See the hierarchy chapter in MIL if needed.</p>",
        "id": 376762115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689792512
    },
    {
        "content": "<p>I am sure it is a joke.</p>",
        "id": 376762857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689792723
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CancelMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LeftCancelMonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">RightCancelMonoid</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>Did we get this one right?</p>",
        "id": 376764460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689793132
    },
    {
        "content": "<p>The alphabetical ordering was not really a joke. If we really do have to put a global order over all typeclasses, the only one that every contributor has a hope of applying instantly on the spot is sorting alphabetically</p>",
        "id": 376773832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689795628
    },
    {
        "content": "<p>The fact we have to choose this global order at all seems pretty problematic to me</p>",
        "id": 376773983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689795667
    },
    {
        "content": "<p>We can have more complicated orderings as long as we have a linter to auto-enforce it, so I don't think alphabetical is our only hope. It just needs to be sufficiently well-specified.</p>",
        "id": 376774468,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689795793
    },
    {
        "content": "<p>A reasonable compromise would be a text file (or DSL) that provide the arbitrary linear ordering</p>",
        "id": 376784886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689798764
    },
    {
        "content": "<p>(I agree that strictly it doesn't have to be linear, but dropping that makes it harder to apply)</p>",
        "id": 376785107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689798821
    },
    {
        "content": "<p>This seems to me a good case for automatic optimization: let the computer try many choices and show which are good.</p>",
        "id": 377679070,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690058816
    },
    {
        "content": "<p>Unfortunately, with some choices Mathlib fails to compile (and requires little modifications here and there to fix compile), so you can't do it absolutely automatically.</p>",
        "id": 377679384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690058976
    },
    {
        "content": "<p>Yes, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> with various proof fixes caused by the priority changes.</p>",
        "id": 377681781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690060418
    }
]