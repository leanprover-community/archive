[
    {
        "content": "<p>Do we have any ways to avoid <a href=\"https://github.com/leanprover-community/mathlib4/blob/50a70a288b303dde4c9d7bead584c1de68b2f756/Mathlib/Analysis/InnerProductSpace/Adjoint.lean#L365\">this</a>? For context this is PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5771\">#5771</a></p>",
        "id": 386092336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692442968
    },
    {
        "content": "<p>I'm not sure this is worth worrying about</p>",
        "id": 386102260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692449787
    },
    {
        "content": "<p>I thought <code>Type*</code> was supposed to avoid it by forcing all types to be in different universes whatever happens.</p>",
        "id": 386117533,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1692459278
    },
    {
        "content": "<p>I don't think that's the question here; the problem is that when you write <code>have := FiniteDimensional.complete ùïú</code> it creates a single local bound by a single universe metavariable, which can be only unified once; wherease when you write <code>lemma foo := FiniteDimensional.complete ùïú</code> then Lean generates a family of declarations indexed by the universe variable</p>",
        "id": 386121559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692461401
    },
    {
        "content": "<p>I see, so <code>Type*</code> is having the desired effect by not using the instance for both <code>E</code> and <code>F</code>. I agree that's it's not a huge problem probably. It's never come up for me.</p>",
        "id": 386121883,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1692461549
    },
    {
        "content": "<p>I don't think <code>Type*</code> is relevant here</p>",
        "id": 386122141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692461683
    }
]