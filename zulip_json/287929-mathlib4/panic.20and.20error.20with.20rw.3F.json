[
    {
        "content": "<p>The following example raises an error and panics on the latest mathlib for me. (Note that in the first example the <code>intros</code> is necessary to trigger it - I wonder whether it is related to <code>instantiateMVars</code>/<code>cleanupAnnotations</code>/<code>withMainGoal</code> or the like). I noticed the panic while minimizing the first example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Rewrites</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span> <span class=\"c1\">-- unknown free variable '_uniq.17'</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span> <span class=\"c1\">-- Lean panics</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 370495531,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687969514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 370495586,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687969524
    },
    {
        "content": "<p>(I also had a panic when using <code>apply?</code> in a separate project, but I cannot reproduce that on the latest mathlib)</p>",
        "id": 370496013,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687969600
    },
    {
        "content": "<p><code>withLocation</code> <a href=\"https://github.com/leanprover/lean4/issues/2150\">doesn't itself</a> use <code>withMainContext</code>, which suggests its missing here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Rewrites.lean#L220\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Rewrites.lean#L220</a></p>",
        "id": 370498857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687970100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370496013\">said</a>:</p>\n<blockquote>\n<p>(I also had a panic when using <code>apply?</code> in a separate project, but I cannot reproduce that on the latest mathlib)</p>\n</blockquote>\n<p>Is it possible that <code>lake update</code> and then <code>lake exe cache get</code> doesn't update the <code>apply?</code> cache? I have two projects depending on identical versions of mathlib, with identical configurations (lakefile, lake-manifest) except for the name, and in one project <code>apply?</code> panics on a line, and in the other project it doesn't panic on the same line. The first project was updated from a ~1 month old mathlib, the other one is brand new.</p>",
        "id": 370500970,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687970487
    },
    {
        "content": "<p>If you're still getting mathlib oleans you should be getting the <code>apply?</code> cache.</p>",
        "id": 370589866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687991492
    },
    {
        "content": "<p>In <a href=\"#narrow/stream/287929-mathlib4/topic/apply.3F.20cache.20corrupts.20when.20updating.20mathlib\">this thread</a> <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> found out that the reason is that two caches are there, and the wrong one is used.</p>",
        "id": 370591795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687992375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, thanks for the report and the suggestion. I've also fixed the panic reported above in <code>rw?</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5563\">#5563</a>.</p>",
        "id": 370597579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687995192
    },
    {
        "content": "<p>Oh snap, I also just got a panic in <code>rw?</code>.  Is it the \"unreachable code has been reached\" one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Rewrites</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">K.ring</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 370598036,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687995429
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/hrmacbeth-panic-unreachable\">branch#hrmacbeth-panic-unreachable</a></p>",
        "id": 370598302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687995568
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5563\">#5563</a> should fix this.</p>",
        "id": 370600677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996931
    },
    {
        "content": "<p>(Sorry, <code>rw?</code> was tested exactly to the extent the test file indicates. Thanks everyone for giving it a spin regardless. :-)</p>",
        "id": 370600717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> My panic seems to persist (I just merged in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5563\">#5563</a>)</p>",
        "id": 370606566,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688000467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, now fixed on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5563\">#5563</a>.</p>",
        "id": 370608674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688001797
    }
]