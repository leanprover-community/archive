[
    {
        "content": "<p>What could cause <code>simp_rw [foo]</code> to succeed but <code>simp only [foo]</code> to fail? I don't have a nice mwe to point to unfortunately. I thought those were equivalent.</p>",
        "id": 404774409,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701230029
    },
    {
        "content": "<p><code>simp_rw [foo]</code> should expand to exactly <code>simp only (config := { failIfUnchanged := false }); simp only [foo]</code>.</p>\n<p>Does the preliminary <code>simp only</code> explain the difference you're seeing?</p>",
        "id": 404780326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701232666
    },
    {
        "content": "<p>ack, I just switched branches. Hold on.</p>",
        "id": 404780454,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701232703
    },
    {
        "content": "<p>Yes, in my context <code>simp only (config := { failIfUnchanged := false })</code> yields a <code>simp made no progress</code> error.</p>",
        "id": 404780782,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701232906
    },
    {
        "content": "<p>So the config isn't working?</p>",
        "id": 404780820,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701232923
    },
    {
        "content": "<p>Wait, no, that's confusing. The <code>simp_rw</code> <em>does</em> work, but when expanded to the form you suggest it breaks.</p>",
        "id": 404780929,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701232991
    },
    {
        "content": "<p>For ... reasons ... I'll say that I think it may be tied to a unification problem. Basically, to apply the lemma <code>foo</code>, Lean needs to unify the types, but I think the unification happens too late for typeclass inference to synthesize one of the instances needed for the lemma. I think this because <code>rw [foo]</code> fails with a \"failed to synthesize instance\" error, but if you supply the explicit arguments then <code>rw</code> succeeds.</p>\n<p>So maybe elaboration is happening in a slightly different way for <code>simp_rw</code> vs. <code>simp only</code> and the <code>simp_rw</code> is just getting lucky?</p>",
        "id": 404781550,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701233347
    },
    {
        "content": "<p>If you want to play with the very non-mwe, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=quotientSpanCXSubCAlgEquiv#doc\">docs#quotientSpanCXSubCAlgEquiv</a> on <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Frefactor-AlgEquiv\">branch#j-loreaux/refactor-AlgEquiv</a></p>",
        "id": 404781702,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701233425
    }
]