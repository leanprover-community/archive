[
    {
        "content": "<p>In lean 3 whenever I am teaching I start my files with <code>import tactic</code>. It's a great, easy to remember, useful import which gets everything I need to do logic, natural numbers, all the basic stuff. It does basic group theory, equivalence relations etc etc. It imports a really nice chunk of mathlib. It was written once and got out of date: I don't think it imported stuff like <code>slim_check</code> or <code>omega</code> and one would occasionally run into other tactics which we'd forgotten to put in there, but who cares. It worked modulo obscure edge cases and that was exactly what I needed for teaching.</p>\n<p>Is it possible to emulate this experience in mathlib4 by me or someone else writing <code>Mathlib/Tactic.lean</code> which imports all of the tactic files which are there today, and who cares if it gets out of date? I'm writing basic logic files and I've just to <code>import Mathlib.Tactic.LeftRight</code> so I can port the <code>or</code> sheet! I don't want to have to put beginners through seeing that.</p>",
        "id": 346647758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680546069
    },
    {
        "content": "<p>I agree we need that. I would merge a PR adding it. A couple of weeks ago there was a crazy discussion where Martin felt he needed to explain what to import in a beginner tactic cheat sheet. This shouldn't be needed. It should be <code>import Tactic</code>.</p>",
        "id": 346650804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680546920
    },
    {
        "content": "<p>I'm not exactly disagreeing that having this would be nice, but I think the issue is that we want to prevent people from writing <code>import Tactic</code> in mathlib. Of course, we could demand that reviewers don't merge PRs with this, but I think it's hard to avoid it being abused (even unintentionally).</p>\n<p>Kevin, as at least a temporary workaround, couldn't you just create a file in your project repo called <code>Tactic.lean</code> and import all the relevant pieces you want into that?</p>",
        "id": 346654401,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1680548141
    },
    {
        "content": "<p>The problem is that we also don't want a rogue file in no folder, and it needs to be under <code>Mathlib</code>. So it seems the best we can do is <code>import Mathlib.Tactic.Basic</code>.</p>",
        "id": 346655032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680548330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/import.20tactic/near/346654401\">said</a>:</p>\n<blockquote>\n<p>I'm not exactly disagreeing that having this would be nice, but I think the issue is that we want to prevent people from writing <code>import Tactic</code> in mathlib. Of course, we could demand that reviewers don't merge PRs with this, but I think it's hard to avoid it being abused (even unintentionally).</p>\n</blockquote>\n<p>That sounds like something that could be trivially linted against inside mathlib</p>",
        "id": 346655312,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680548406
    },
    {
        "content": "<p>In fact, we already did so for other imports.</p>",
        "id": 346656647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680548779
    },
    {
        "content": "<p><code>import Mathlib.Tactic.Basic</code> does not even import <code>left</code> and <code>right</code> which I typically cover in lecture 1 of an introductory lean course for undergraduates (that was what motivated me to start this thread)</p>",
        "id": 346657655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680549118
    },
    {
        "content": "<p>Oh wait, that's already a file!</p>",
        "id": 346657739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680549140
    },
    {
        "content": "<p>It's too basic</p>",
        "id": 346657769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680549154
    },
    {
        "content": "<p>It's what I was using instead of <code>import tactic</code></p>",
        "id": 346657831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680549171
    },
    {
        "content": "<p>we could put a file called <code>Tactic.lean</code> with the relevant imports in the <code>Mathlib</code> folder, and use <code>import Mathlib.Tactic</code></p>",
        "id": 346658520,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680549398
    },
    {
        "content": "<p>does Lean4 support <code>Default.lean</code> files?</p>",
        "id": 346658753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680549483
    },
    {
        "content": "<p>Incidentally, there's both <code>Mathlib.Tactic.Basic</code> and <code>Mathlib.Tactic.Core</code>, and I'm not sure what is supposed to go in each.</p>",
        "id": 346659401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680549692
    },
    {
        "content": "<p>Could there be a comprehensive <code>Mathlib.Tactic.All</code>, <code>Mathlib.AllTactics</code>, or <code>Mathlib.Tactics</code>?</p>",
        "id": 346659475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680549716
    },
    {
        "content": "<p>why not just <code>Mathlib.Tactic</code>?</p>",
        "id": 346659689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680549769
    },
    {
        "content": "<p><code>Mathlib.Tactic.All</code> also sounds good to me!</p>",
        "id": 346659730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680549781
    },
    {
        "content": "<p>We have <code>import Mathlib</code> for \"import all of mathlib\" after all. That's probably also banned in mathlib.</p>",
        "id": 346660581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680550018
    },
    {
        "content": "<p>Writing a linter to prevent <code>import Tactic</code> in mathlib should be very easy.</p>",
        "id": 346661254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680550207
    },
    {
        "content": "<p>The obvious and canonical solution to this is to port <code>tactic</code> -&gt; <code>Mathlib.Tactic</code> just like every other file in mathlib</p>",
        "id": 346669082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553087
    },
    {
        "content": "<p>We don't need a Default.lean file, it would just be <code>Mathlib/Tactic.lean</code></p>",
        "id": 346669160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553110
    },
    {
        "content": "<p>As for the list getting out of date, that is hopefully something that can be solved by a PR; I don't think it was really ever \"curated\" because it doesn't get much use inside mathlib itself so people that use it (e.g. in classes and downstream projects) need to provide input for maintenance</p>",
        "id": 346669459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/import.20tactic/near/346660581\">said</a>:</p>\n<blockquote>\n<p>We have <code>import Mathlib</code> for \"import all of mathlib\" after all. That's probably also banned in mathlib.</p>\n</blockquote>\n<p>We don't even need a lint for this one, as lean itself will get angry if you do it since it is a circular reference</p>",
        "id": 346669578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553273
    },
    {
        "content": "<p>But then are we going to end up with default files outside the folders they belong to?</p>",
        "id": 346669612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680553286
    },
    {
        "content": "<p>yes</p>",
        "id": 346669618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553290
    },
    {
        "content": "<p>That sounds bad.</p>",
        "id": 346669647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680553299
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 346669660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553304
    },
    {
        "content": "<p>How difficult would it be for <code>Mathlib/Tactic.lean</code> to be required to import all of <code>Mathlib/Tactic</code>, and (bonus) have <code>Mathlib.lean</code> import just <code>Mathlib.Tactic</code>?</p>",
        "id": 346669956,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680553416
    },
    {
        "content": "<p>it would complicate the one-liner which calculates <code>Mathlib.lean</code></p>",
        "id": 346670310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553536
    },
    {
        "content": "<p>you could use a similar one-liner to calculate <code>Mathlib.Tactic</code>, or even calculate all \"default\" files (lean files with the same name as a directory)</p>",
        "id": 346670440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553582
    },
    {
        "content": "<p>I think it would actually make <code>import Mathlib.Tactic</code> less useful though, since the original <code>import tactic</code> did not contain everything on purpose</p>",
        "id": 346670580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553644
    },
    {
        "content": "<p>On the other hand, one of the things we have talked about re: improving precompilation is to reduce the number of entry points, in which case having a one-stop shop <code>Mathlib.Tactic</code> containing everything we want to compile would be a good thing, even inside mathlib</p>",
        "id": 346670783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553730
    },
    {
        "content": "<p>Some of the tactics are more (mathematically) advanced though and this plays havoc with our dependency graph</p>",
        "id": 346670873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553768
    },
    {
        "content": "<p>Can we change the way <code>import</code> works so that <code>import x</code> imports <code>x.lean</code> if it exists, or <code>x/y.lean</code> for all <code>y</code> else?</p>",
        "id": 346670889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680553776
    },
    {
        "content": "<p>That sounds like the only way to effectively have all those default files without cluttering every folder which has subfolders.</p>",
        "id": 346671071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680553831
    },
    {
        "content": "<p>To some extent this is a design decision, you don't necessarily want to require directory traversals to build things</p>",
        "id": 346671168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553871
    },
    {
        "content": "<p>Plus, I actually have a file called <code>Mathlib/Test.lean</code> in which I put random crap people ask me on zulip, and I wouldn't want it to be impossible for that file to exist without getting built by <code>lake build</code></p>",
        "id": 346671458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680553989
    },
    {
        "content": "<p>currently I can do this by just not putting it in <code>Mathlib.lean</code> and adding it to <code>.git/info/exclude</code> so it isn't pushed in PRs</p>",
        "id": 346671669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680554068
    },
    {
        "content": "<p>I'm not sure there's really any issue regarding clutter, but one concrete problem I can think of is that it's a little inconvenient to move modules around since you have to remember to move its sibling. (Of course, if you move a module you also have to update imports everywhere too.)</p>",
        "id": 346671801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680554142
    },
    {
        "content": "<p>\"build everything in the directory\" might be right for a pristine copy of mathlib but it is probably less likely to be correct for many peoples' mathlib development setups, so separating the two (and checking that they agree in CI) seems like the right approach</p>",
        "id": 346671913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680554178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/import.20tactic/near/346671801\">said</a>:</p>\n<blockquote>\n<p>I'm not sure there's really any issue regarding clutter, but one concrete problem I can think of is that it's a little inconvenient to move modules around since you have to remember to move its sibling. (Of course, if you move a module you also have to update imports everywhere too.)</p>\n</blockquote>\n<p>This could be a code assist BTW</p>",
        "id": 346672233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680554309
    },
    {
        "content": "<p>I'm not sure why we are talking about default files here. There's no proposal to generally introduce default files, there's just a single file, <code>Mathlib/Tactic.lean</code>.</p>",
        "id": 346689330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680560641
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is indirectly arguing the feature should be reintroduced; which I'm sympathetic to, but isn't really relevant to this conversation (or a good use of Lean4 dev   time)</p>",
        "id": 346752845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680593014
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3263\">mathlib4#3263</a></p>",
        "id": 346820961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680608534
    },
    {
        "content": "<p>My quick merge is not a vote <em>against</em> adding CI that enforces that it imports everything. We can still do that. :-)</p>",
        "id": 346990534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680651467
    }
]