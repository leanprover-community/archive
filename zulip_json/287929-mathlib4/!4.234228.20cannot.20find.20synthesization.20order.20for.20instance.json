[
    {
        "content": "<p>A local instance</p>\n<div class=\"codehilite\" data-code-language=\"lean3\"><pre><span></span><code>attribute [local instance] GradedModule.isModule\n</code></pre></div>\n<p>fails in this file with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">isModule</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n      <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n        <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n          <span class=\"o\">{</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n            <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n              <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"bp\">𝓐</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"n\">σ'</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                    <span class=\"o\">(</span><span class=\"bp\">𝓜</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                      <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                        <span class=\"o\">[</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                          <span class=\"o\">[</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">SetLike</span> <span class=\"n\">σ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                            <span class=\"o\">[</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">AddSubmonoidClass</span> <span class=\"n\">σ'</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                              <span class=\"o\">[</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">AddSubmonoidClass</span> <span class=\"n\">σ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                                <span class=\"o\">[</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">SetLike.GradedMonoid</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                                  <span class=\"o\">[</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">SetLike.GradedSmul</span> <span class=\"bp\">𝓐</span> <span class=\"bp\">𝓜</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                                    <span class=\"o\">[</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n                                      <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">GradedRing</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓜</span> <span class=\"n\">i</span> <span class=\"o\">})</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">SetLike</span> <span class=\"bp\">?</span><span class=\"n\">σ'</span> <span class=\"n\">A</span>\n  <span class=\"bp\">@</span><span class=\"n\">AddSubmonoidClass</span> <span class=\"bp\">?</span><span class=\"n\">σ'</span> <span class=\"n\">A</span> <span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝</span>\n  <span class=\"bp\">@</span><span class=\"n\">SetLike.GradedMonoid</span> <span class=\"n\">ι</span> <span class=\"n\">A</span> <span class=\"bp\">?</span><span class=\"n\">σ'</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">MonoidWithZero.toMonoid</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹¹</span> <span class=\"bp\">?𝓐</span>\n  <span class=\"bp\">@</span><span class=\"n\">SetLike.GradedSmul</span> <span class=\"n\">ι</span> <span class=\"bp\">?</span><span class=\"n\">σ'</span> <span class=\"n\">A</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"n\">AddZeroClass.toAdd</span> <span class=\"bp\">?𝓐</span> <span class=\"bp\">𝓜</span>\n  <span class=\"bp\">@</span><span class=\"n\">GradedRing</span> <span class=\"n\">ι</span> <span class=\"n\">A</span> <span class=\"bp\">?</span><span class=\"n\">σ'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹¹</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"bp\">?</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"bp\">?𝓐</span>\n</code></pre></div>\n<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isModule</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">GradedRing</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">𝓜</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">DirectSum.decomposeRingEquiv</span> <span class=\"bp\">𝓐</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">𝓐</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRingHom</span> <span class=\"k\">with</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectSum.decompose</span> <span class=\"bp\">𝓐</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Note that this definition takes a long time to elaborate (maxHeartbeats set to 300000).</p>",
        "id": 360502379,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1684841437
    },
    {
        "content": "<p>Note what looks to me to be a related question <a href=\"#narrow/stream/270676-lean4/topic/Understanding.20synthesization.20order/near/360308995\">here</a>. The key part of error says</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>all remaining arguments have metavariables:\n  SetLike ?σ' A\n  @AddSubmonoidClass ?σ' A AddMonoid.toAddZeroClass ?inst✝\n  @SetLike.GradedMonoid ι A ?σ' ?inst✝ MonoidWithZero.toMonoid inst✝¹¹ ?𝓐\n  @SetLike.GradedSmul ι ?σ' A σ M ?inst✝ inst✝⁶ SMulZeroClass.toSMul AddZeroClass.toAdd ?𝓐 𝓜\n  @GradedRing ι A ?σ' (fun a b ↦ inst✝¹ a b) inst✝¹¹ inst✝¹⁰ ?inst✝ ?inst✝¹ ?𝓐\n</code></pre></div>\n<p>This is the situation that typeclass inference finds itself in. It hasn't figured out how what type you actually want <code>σ'</code> to be. This is funny because you can read <code>σ'</code> off from the type of the first explicit input, but I have no idea in what order things happen when the system is doing all this unification and typeclass inference stuff. And what it's really trying to put off is using typeclass inference on any of the above goals,  because it might end up in a loop or searching in a very large tree for something that isn't there.</p>",
        "id": 360517367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845183
    },
    {
        "content": "<p>Oh there are two similar errors: the second one has shorter output.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  @SetLike.GradedMonoid ι A σ' inst✝⁹ MonoidWithZero.toMonoid inst✝¹¹ ?𝓐\n  @SetLike.GradedSmul ι σ' A σ M inst✝⁹ inst✝⁶ SMulZeroClass.toSMul AddZeroClass.toAdd ?𝓐 𝓜\n  @GradedRing ι A σ' (fun a b ↦ inst✝¹ a b) inst✝¹¹ inst✝¹⁰ inst✝⁹ inst✝⁵ ?𝓐\n</code></pre></div>\n<p>So this indicates that the system doesn't know what <code>𝓐</code> is but now needs to know that whatever it is, it's a graded ring, and that will make typeclass inference go on a wild goose chase.</p>",
        "id": 360518447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845432
    },
    {
        "content": "<p>I think this translates down to the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_module</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">graded_ring</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">𝓜</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>If typeclass inference gets its hands on this declaration then it realises that it will have to figure out what <code>𝓐</code> is in order to check it's a graded ring, but it has no hope. Hopefully the experts will fix which parts of the explanation I mangled.</p>",
        "id": 360519632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845710
    },
    {
        "content": "<p>It might have just been an unnoticed dangerous instance in Lean 3</p>",
        "id": 360519782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845738
    },
    {
        "content": "<p>Yeah the Lean 3 linter has the following to say about that instance:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/- The `dangerous_instance` linter reports: -/\n/- DANGEROUS INSTANCES FOUND.\nThese instances are recursive, and create a new type-class problem which will have metavariables.\nPossible solution: remove the instance attribute or make it a local instance instead.\n\nCurrently this linter does not check whether the metavariables only occur in arguments marked with `out_param`, in which case this linter gives a false positive. -/\n#check @graded_module.is_module /- The following arguments become metavariables. argument 5: {σ' : Type u_6}, argument 8: (𝓐 : ι → σ') -/\n</code></pre></div>",
        "id": 360520038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845796
    },
    {
        "content": "<p>Bottom line though is that I don't know how to fix it.</p>",
        "id": 360524741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684846935
    },
    {
        "content": "<p>Yes, Lean complains because it can't reliably figure out the <code>𝓐</code>.  I would just put in a <code>letI := GradedModule.isModule 𝓐 𝓜</code>.</p>",
        "id": 360591542,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684861519
    },
    {
        "content": "<p>If one of the type class assumptions reliably determines the <code>𝓐</code>, you could mark that argument of that type class as outparam.  But I think there is more than one choice for the scalar multiplication usually.</p>",
        "id": 360592421,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684861738
    }
]