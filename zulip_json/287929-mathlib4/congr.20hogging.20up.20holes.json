[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_self</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> synthetic hole has already been defined and assigned to value incompatible with the current context</span>\n<span class=\"cm\">  h_congr_thm‚úù Nat (1 + 1) (1 + 1) (Eq.refl (1 + 1)) 3 (1 + 1) (absurd h (of_decide_eq_false (Eq.refl (decide False)))) -/</span>\n</code></pre></div>\n<p><code>h_congr_thm</code> seems to be from <code>congr!</code>, but I can't seem to get a simple mwe with <code>congr!</code>.</p>",
        "id": 406989258,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702169305
    },
    {
        "content": "<p>Here's with <code>congr!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">congr</span><span class=\"bp\">!</span>\n    <span class=\"n\">contradiction</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iff_self</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 407096140,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702234342
    },
    {
        "content": "<p>There's nothing in <code>congr!</code> that's directly using the name <code>h</code>, but maybe somehow there's an <code>h</code> in a parameter name to the congruence theorem that is being applied, and so <a href=\"https://github.com/leanprover-community/mathlib4/blob/390d5fb5d505dfe3c33374803f0a7c3fb59dc5e4//Mathlib/Tactic/Congr!.lean#L142\">this <code>apply</code></a> is responsible for it indirectly?</p>",
        "id": 407096189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702234413
    }
]