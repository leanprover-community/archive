[
    {
        "content": "<p>Sometimes the <code>ring</code> tactic succeeds, but it puts a message saying <code>Try this:  ring_nf</code> in the Infoview.  What's the reason for this?  Is Lean telling me that for some reason I should have used <code>ring_nf</code> rather than <code>ring</code>?  If so, why?</p>",
        "id": 340498004,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1678326772
    },
    {
        "content": "<p><code>ring</code> consists of trying two tactics, <code>ring1</code> and <code>ring_nf</code>.  If it succeeds without error, that means <code>ring1</code> worked.  If it succeeds with the blue underline and \"try this\", that means that <code>ring1</code> failed but <code>ring_nf</code> worked.</p>",
        "id": 340498113,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678326879
    },
    {
        "content": "<p>So changing to <code>ring_nf</code> according to its suggestion will avoid the wasted work of trying <code>ring1</code> and having it fail.</p>",
        "id": 340498134,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678326915
    },
    {
        "content": "<p>The point is that <code>ring</code> is supposed to be a \"finishing tactic\".</p>",
        "id": 340498209,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678326972
    },
    {
        "content": "<p><code>ring1</code> (the \"true\" <code>ring</code>) only closes equality goals.</p>\n<p><code>ring_nf</code> (the <code>nf</code> is for \"normal form\") will normalize, without necessarily closing the goal.  It also has the useful feature that it normalizes inside function applications, so for example it would solve <code>f (1 + a) = f (a + 1)</code>.</p>",
        "id": 340498280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678327062
    },
    {
        "content": "<p>Anyway, <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> is probably interested in teaching applications, and I actually think the difference is not worth stressing in this case.  I just tell my students to use it freely and ignore the blue underline -- I wish there were an option I could set to turn it off.</p>",
        "id": 340498497,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678327211
    },
    {
        "content": "<p>the option is <code>macro_rules | `(tactic| ring) =&gt; `(tactic| ring_nf)</code></p>",
        "id": 340503157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678330850
    },
    {
        "content": "<p>Nice!</p>",
        "id": 340504171,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678331451
    },
    {
        "content": "<p>But we can add an explicit option if that is nicer to beginners, too!</p>",
        "id": 340528837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678346303
    },
    {
        "content": "<p>we could make it a pseudo-linter warning</p>",
        "id": 340528889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678346329
    },
    {
        "content": "<p>Note that there are some places in the library where it seems <code>ring_nf</code> works as a finishing tactic by <code>ring</code> fails. (I just saw these in <code>Quandle.lean</code>, for example.)</p>",
        "id": 340528926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678346341
    },
    {
        "content": "<p>I think maybe <code>ring_nf</code> is getting by with weaker typeclasses than <code>ring</code>?</p>",
        "id": 340528954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678346355
    },
    {
        "content": "<p>yes, there are some cases where that is true, Heather gave <code>f (1 + a) = f (a + 1)</code> as an example above</p>",
        "id": 340529046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678346379
    },
    {
        "content": "<p>I don't think it's a weaker typeclasses thing, they have the same backend</p>",
        "id": 340529101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678346403
    },
    {
        "content": "<p>The example I had in mind was <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Quandle.lean#L504\">here</a>, where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">Dihedral</span> <span class=\"n\">n</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>needs <code>ring_nf</code> (which closes the goal), rather than <code>ring</code>.</p>",
        "id": 340749363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678413407
    },
    {
        "content": "<p>what instances are on <code>Dihedral</code>?</p>",
        "id": 340751097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678414595
    },
    {
        "content": "<p>looking at the code I don't see any instances at all, in which case I don't see how you can prove anything. Maybe these are actually <code>-</code> and <code>*</code> on <code>ZMod</code> instead of <code>Dihedral</code>?</p>",
        "id": 340751269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678414707
    },
    {
        "content": "<p>in any case this is cursed code which is abusing <code>ring_nf</code> and non-canonical instances</p>",
        "id": 340751313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678414746
    }
]