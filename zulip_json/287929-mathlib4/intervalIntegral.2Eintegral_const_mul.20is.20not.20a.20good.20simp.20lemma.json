[
    {
        "content": "<p>... because <code>simp</code> will change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>So to make it reasonable, a lemma that pulls out <code>r</code> from the RHS would be needed.<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_const_mul#doc\">docs#intervalIntegral.integral_const_mul</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_mul_const#doc\">docs#intervalIntegral.integral_mul_const</a></p>\n<p>But I would question the assumption that having the constant factor outside is necessarily the simpler form.</p>",
        "id": 401808597,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699894484
    },
    {
        "content": "<p>well we could always make <code>div_eq_mul_inv</code> a simp lemma ;-) </p>\n<p>(context: back before the Lean 3 fork, <code>sub_eq_add_neg</code> was a simp lemma in core and it drove everyone nuts. It was one of the first things to be changed after the fork IIRC)</p>",
        "id": 401809205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699894690
    },
    {
        "content": "<p>I agree with you, Michael. The simp lemma should go the other way, because it's a distributivity lemma. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.mul_sum#doc\">docs#Finset.mul_sum</a>.</p>",
        "id": 401856933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699915057
    },
    {
        "content": "<p>Whatever the reasonable direction is, it should be consistent between addition, sums, and integrals.</p>",
        "id": 402013300,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699976593
    },
    {
        "content": "<p>Yes, so that's a <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me to turn your integral lemma around.</p>",
        "id": 402013751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699976731
    },
    {
        "content": "<p>It's not \"my\" lemma <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nI have enough rabbit holes to get myself lost in already, so I won't go down this one.</p>",
        "id": 402027189,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699980508
    }
]