[
    {
        "content": "<p>Hello,<br>\nFirst time posting here. I am new to Lean, currently going through the \"Mathematics in Lean\" book (question is not related, that's just to say that I'm a beginner).<br>\nI wanted to try proving a simple equality about matrices, that is, expressing a matrix product with a sum of vector outer products.<br>\nHere is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_mat_eq_outer_prod</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">k</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span><span class=\"o\">,</span> <span class=\"n\">Matrix.row</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.sum_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsum_congr</span> <span class=\"n\">h'</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But lean is giving the following error (on apply finsum_congr h'):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">apply'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">∑ᶠ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">Matrix.transpose</span> <span class=\"n\">M</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">Matrix.transpose</span> <span class=\"n\">M</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>I don't understand what is wrong exactly. How should I apply finsum_congr?</p>",
        "id": 401497688,
        "sender_full_name": "cookiewill",
        "timestamp": 1699696516
    },
    {
        "content": "<p>You are using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsum_congr#doc\">docs#finsum_congr</a> that is about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finsum#doc\">docs#finsum</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a></p>",
        "id": 401497931,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699696763
    },
    {
        "content": "<p>You can notice the difference between <code>∑ᶠ </code> and <code>∑</code></p>",
        "id": 401497948,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699696786
    },
    {
        "content": "<p>The lemma you want is probably <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_congr#doc\">docs#Finset.sum_congr</a> (unstested).</p>",
        "id": 401498010,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699696809
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_mat_eq_outer_prod</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Matrix.col</span> <span class=\"o\">(</span><span class=\"n\">M.transpose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Matrix.row</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">k</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Matrix.transpose</span><span class=\"o\">,</span> <span class=\"n\">Matrix.col</span><span class=\"o\">,</span> <span class=\"n\">Matrix.row</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.sum_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>works</p>",
        "id": 401498301,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699696980
    },
    {
        "content": "<p>Thanks!<br>\nWhat does \"..\" mean? (sorry if it's a dumb question)</p>",
        "id": 401498717,
        "sender_full_name": "cookiewill",
        "timestamp": 1699697350
    },
    {
        "content": "<p>As many <code>_</code> as needed.</p>",
        "id": 401498818,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699697441
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 401498891,
        "sender_full_name": "cookiewill",
        "timestamp": 1699697523
    }
]