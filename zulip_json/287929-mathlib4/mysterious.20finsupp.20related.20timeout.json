[
    {
        "content": "<p>Minimising <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>'s timeout a little further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.ring_division</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_no_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_37</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_mem</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- deterministic timeout:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 365716917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686620939
    },
    {
        "content": "<p>It's not anything about <code>roots</code> itself: we can replace it with a stub definition, and still see the timeout. It's something about <code>polynomial.map</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"c1\">-- Mostly harmless version of `polynomial.roots`:</span>\n<span class=\"c1\">-- examples below are the same using this or the real one.</span>\n<span class=\"kd\">def</span> <span class=\"n\">polynomial.roots'</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_no_map</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_37</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_mem</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_nonempty</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">polynomial.map'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_map'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map'</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- deterministic timeout:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 365719262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686622055
    },
    {
        "content": "<p>Note this timeout now only imports <code>data.polynomial.eval</code>, so <a href=\"https://github.com/leanprover-community/mathlib/pull/19182\">#19182</a> can't help as that only touches downstream. Perhaps more of the same further upstream??</p>",
        "id": 365720071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686622545
    },
    {
        "content": "<p>I am not sure if this counts as further minimizing, but this also times out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"c1\">--  stubs for the definitions of `roots'` and `ring_hom_id` all specialized to `ℕ`</span>\n<span class=\"kd\">def</span> <span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--  note the positions of the final two arguments of `polynomial.eval₂`: they swap between here...</span>\n<span class=\"kd\">structure</span> <span class=\"n\">zero_last</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">polynomial.eval₂</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C.comp</span> <span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"c1\">-- ... and here</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">polynomial.eval₂</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C.comp</span> <span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>The second times out, while the first does not.</p>\n<p>Also note that <code>eval₂</code> is defined at the very beginning of <code>data.polynomial.eval</code>, but I do not have time to see if it times out also with <code>eval₂</code> replaced by the direct <code>polynomial.sum</code> call, which would push the time out further up in the import hierarchy.</p>",
        "id": 365751878,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686637027
    },
    {
        "content": "<p>Further minimized to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"c1\">--  stubs for the definitions of `roots'` and `ring_hom_id` all specialized to `ℕ`</span>\n<span class=\"kd\">def</span> <span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">polynomial.C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">roots'</span> <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>so we're now right at the beginning of the polynomial development. :-(</p>",
        "id": 365759022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686639190
    },
    {
        "content": "<p>I'm not sure whether I'm happy of the minimisation or said for how early it happens!</p>",
        "id": 365760861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686639699
    },
    {
        "content": "<p>Now we're all the way back at <code>monoid_algebra</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 365761646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686639899
    },
    {
        "content": "<p>I'm on mobile, but using <code>finsupp</code> instead of <code>add_monoid_algebra</code> might minimise further, maybe?</p>",
        "id": 365762587,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686640143
    },
    {
        "content": "<p>Otherwise it might be the ring structure, which was something that I suspected, since stubbing out <code>polynomial</code>s i wasn't able to get a time-out</p>",
        "id": 365762850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686640209
    },
    {
        "content": "<p>(fwiw, I've fixed the final sorry on the ml4 PR)</p>",
        "id": 365764593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686640654
    },
    {
        "content": "<p>are we sure that <code>sorry</code>-ing a def isn't going to mess up these minimizations?</p>",
        "id": 365764661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686640680
    },
    {
        "content": "<p>anyway, changing <code>def := sorry</code> to <code>constant</code> also gives a timout</p>",
        "id": 365765765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686640965
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is instant <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span></p>",
        "id": 365766520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686641154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 365767045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641270
    },
    {
        "content": "<p>I am increasingly fearful that it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">classical.dec_eq</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">∅</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in <code>data.finsupp.defs</code>.</p>",
        "id": 365767204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641300
    },
    {
        "content": "<p>The timeout is preserved with <code>def Q (p : finsupp ℕ ℕ) : Type := ℕ </code>, so no, the sorry isn't implicated here.</p>",
        "id": 365767384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641346
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.MonoidAlgebra.Basic</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>also times out in ml4.</p>",
        "id": 365767485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686641380
    },
    {
        "content": "<p>What is <code>structure</code> doing that a sigma doesn't? Could that be a hint?</p>",
        "id": 365768711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686641656
    },
    {
        "content": "<p>I noticed a lot of <code>has_sizeof</code>s in the typeclass search trace. I did try earlier switching to <code>inductive</code> but that seemed to preserve the timeouts, and so didn't notice the sigma trick.</p>",
        "id": 365769354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641793
    },
    {
        "content": "<p>Curiously the lean4-ification of my last minimisation seems to run fine.</p>",
        "id": 365770063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641978
    },
    {
        "content": "<p>Have to run for a bit.</p>",
        "id": 365770094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686641987
    },
    {
        "content": "<p>21 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.234891.20.20FieldTheory.2ESplittingField\">#mathlib4 &gt; !4#4891  FieldTheory.SplittingField</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 365773271,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686642674
    },
    {
        "content": "<p>Here the timeouts are slowing down:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.defs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyNat_to_fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">slow_but_works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyNat_to_fun</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 365782829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686644780
    },
    {
        "content": "<p>With the hint of taking the <code>to_fun</code> of the <code>finsupp</code> Lean is slow, but works in <code>slow_but_works</code>, whereas it still times out on <code>mystery_timeout</code>, without the <code>to_fun</code> hint.</p>",
        "id": 365783145,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686644850
    },
    {
        "content": "<p>Also, Lean doe not want anything to be marked <code>nonconstructible</code>.</p>",
        "id": 365783546,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686644931
    },
    {
        "content": "<p>And, if in <code>def E</code> you remove one of the two sums, there is no timeout and it is very quick.</p>",
        "id": 365783785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686644983
    },
    {
        "content": "<p>Even using the \"strong\" type ascription</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>gives a time out.</p>",
        "id": 365784464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686645115
    },
    {
        "content": "<p>Further minimization: I got rid of the <code>finsupp</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">multiset</span>\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n<span class=\"o\">((({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">myfins</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">m0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">myfins</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">myfins</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">myfins.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyfinNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">m0</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyfinNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 365791869,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686646625
    },
    {
        "content": "<p>I suspect that the coercions <code>(p 0) : ℕ → ℕ</code> are doing some harm.</p>",
        "id": 365792064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686646652
    },
    {
        "content": "<p>Oh dear! I was just about to report that giving <code>finsupp.single</code> variable <code>decidable_eq</code> instances did not resolve the problem, but this last minimization better shows that that was not the culprit.</p>",
        "id": 365792258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686646692
    },
    {
        "content": "<p>I have replaced the <code>\\sum</code> with their explicit expressions, since I wanted to get out of <code>big_operators</code>, but I did not manage, so it might be clearer to revert to <code>\\sum</code>s or keep minimizing!</p>",
        "id": 365792536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686646756
    },
    {
        "content": "<p>(I slightly edited the above, so that now there are only multisets, no finsets, I think.)</p>",
        "id": 365794096,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647069
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365782829\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365782829</a></p>\n<p>I don't get a timeout with that code. How come I'm missing out on the fun? I have lean memory limit set to 12000 in VS Code.</p>",
        "id": 365794314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686647116
    },
    {
        "content": "<p>Replacing multisets with list, it goes back to being almost instantaneous.</p>",
        "id": 365794798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647196
    },
    {
        "content": "<p>Kevin, I have memory limit 4096.</p>",
        "id": 365795090,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647258
    },
    {
        "content": "<p>Anyway, if you add more of the sums, each one, on my machine, adds a significant amount of extra processing time.</p>",
        "id": 365795299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647295
    },
    {
        "content": "<p>More specifically, use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for <code>E</code> and keep adding extra <code>\\sum</code> lines, if that is still not timing out!</p>",
        "id": 365795861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647407
    },
    {
        "content": "<p>right, so it's a slowdown not a loop.</p>",
        "id": 365795906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686647420
    },
    {
        "content": "<p>Yes, I think so.  At least this issue on which we have zoomed in...</p>",
        "id": 365796094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647457
    },
    {
        "content": "<p>Unfortunately, I have to go back to some non-Lean slowdowns...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 365796507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686647537
    },
    {
        "content": "<p>I think at least the original one was really a loop (or something similar, but not a slowdown). This one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.ring_division</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_no_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_37</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">test_mem</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- deterministic timeout:</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">roots.to_finset</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is taking forever on my machine, even on the command line.</p>",
        "id": 365797003,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686647659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365767045\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finsupp.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">))))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This it works (on the command line) for me, it's just very slow. The previous one,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>really seems to take forever.</p>",
        "id": 365802465,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686648847
    },
    {
        "content": "<p>Let's see if this is my computer being slow or not: does this seem like a loop or a timeout?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 365806300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686649678
    },
    {
        "content": "<p>So it might really be the ring structure on <code>add_monoid_algebra</code>... Changing <code>p * 1</code> to <code>1 • p</code> or <code>p • 1</code> does not give a timeout.</p>",
        "id": 365807231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686649879
    },
    {
        "content": "<p>yeah that times out for me</p>",
        "id": 365807966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686650059
    },
    {
        "content": "<p>Looks like a loop.</p>",
        "id": 365808225,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686650114
    },
    {
        "content": "<p>If you force the multiplication to happen in <code>nat</code>, e.g. by defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then it is also very quick.</p>",
        "id": 365809351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686650346
    },
    {
        "content": "<p>Isn't <code>Q (E n)</code> nonsense? <code>add_monoid_algebra</code> has no function coercion, does it?</p>",
        "id": 365813814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686651332
    },
    {
        "content": "<p>Eric, if I understand correctly, <code>add_monoid_algebra</code> does have a coercion from natural numbers, since it as a <code>1</code>, an addition and maybe a <code>0</code>...</p>",
        "id": 365827859,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686654067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"c1\">-- works: ↑n : add_monoid_algebra ℕ ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"c1\">-- fails:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ℕ →₀ ℕ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 365828345,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686654149
    },
    {
        "content": "<p>But <code>Q</code> eats a function, and a term of an <code>add_monoid_algebra</code> doesn't look like a function...</p>",
        "id": 365829339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686654323
    },
    {
        "content": "<p>I am probably misunderstanding, but there is a coercion to functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"c1\">-- ⇑x : (λ (_x : add_monoid_algebra ℕ ℕ), ℕ → ℕ) x</span>\n</code></pre></div>",
        "id": 365830508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686654551
    },
    {
        "content": "<p>I think that there are lots of coincidences of types that are tripping me up and probably also Lean...</p>",
        "id": 365830867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686654613
    },
    {
        "content": "<p>ooh, I didn't expect that to exist</p>",
        "id": 365831044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686654653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">):=</span> <span class=\"n\">add_monoid_algebra.has_coe_to_fun</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.has_coe_to_fun\">docs#add_monoid_algebra.has_coe_to_fun</a></p>",
        "id": 365831295,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686654713
    },
    {
        "content": "<p>Yes, I suspect we long ago intended to remove that, but never did.</p>",
        "id": 365832858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686655052
    },
    {
        "content": "<p>And this is the coercion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.cast_coe</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a></p>",
        "id": 365833895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686655254
    },
    {
        "content": "<p>That one is expected but I don't think it's relevant to your example above?</p>",
        "id": 365835300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686655555
    },
    {
        "content": "<p>Eric, the definition of <code>E</code> seems to interpret a natural number as an element of an <code>add_monoid_algebra</code>, I think.</p>",
        "id": 365835721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686655645
    },
    {
        "content": "<p>and i suspect that the product <code>p * 1</code> in <code>add_monoid_algebra</code> is what is really causing damage.</p>",
        "id": 365836730,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686655848
    },
    {
        "content": "<p>So this is timing out for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finsupp.sum'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f.support</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp.sum'</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum'</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span><span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">mystery_timeout</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"c1\">-- don't even need to write `: mystery_timeout`</span>\n</code></pre></div>",
        "id": 365836796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686655857
    },
    {
        "content": "<p>Wow, with <code>inductive</code>!</p>",
        "id": 365837398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686655987
    },
    {
        "content": "<p>I'm still mystified why it is instant with <code>Sigma</code>.</p>",
        "id": 365837821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686656083
    },
    {
        "content": "<p>Does any of this reproduce in Lean 4?</p>",
        "id": 365837947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686656105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.MonoidAlgebra.Basic</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>times out</p>",
        "id": 365838022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686656123
    },
    {
        "content": "<p>But that's a few minimization-stages ago</p>",
        "id": 365838056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686656132
    },
    {
        "content": "<p>If you change <code>(b₁ * b₂)</code> at the end of <code>E</code> with <code> b₁</code>, it is just really slow...<br>\nEDIT: this comment is related to Kevin's message.</p>",
        "id": 365838084,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686656139
    },
    {
        "content": "<p>This is slow, but works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">_p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finsupp.sum'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f.support</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">.</span><span class=\"n\">sum'</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">↦</span> <span class=\"bp\">.</span><span class=\"n\">sum'</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"bp\">↦</span> <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">mystery_timeout</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 365839267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686656369
    },
    {
        "content": "<p>Looking at the trace there are a couples of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Kernel</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">491174</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">typechecking</span> <span class=\"n\">declaration</span>\n</code></pre></div>\n<p>is this normal?</p>",
        "id": 365840654,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686656650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365838022\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.MonoidAlgebra.Basic</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>times out</p>\n</blockquote>\n<p>With <code>set_option maxHeartbeats 0 in</code> this works, it is just <em>very</em> slow. The trace has various</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">596550</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">E</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">E</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 365842571,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686657070
    },
    {
        "content": "<p>Maybe there never was a loop, just a really long computation...</p>",
        "id": 365844223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686657433
    },
    {
        "content": "<p>Yes, I think that is likely.</p>",
        "id": 365850537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686658843
    },
    {
        "content": "<p>I can confirm that variations on example that Kevin sent do seem to terminate, but they also require a long time...</p>",
        "id": 365856836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686660371
    },
    {
        "content": "<p>Maybe we should understand why the original problem does not exist in current master. In the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field.construction</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">test1</span> <span class=\"o\">:=</span> <span class=\"c1\">-- deterministic timeout</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">root_set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the first one works fine, the second gives a timeout. Is it possible that the difference is that <code>splitting_field</code> is defined using <code>nat.rec</code>?</p>",
        "id": 365900214,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686668604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365842571\">said</a>:</p>\n<blockquote>\n<p>With <code>set_option maxHeartbeats 0 in</code> this works, it is just <em>very</em> slow. The trace has various</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">596550</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">E</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">E</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Judging from the shape of the unification problem, this is likely in automatic generation of injectivity theorems, which can be disabled with the option <code>genInjectivity</code></p>",
        "id": 365978698,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686686439
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.MonoidAlgebra.Basic</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">works</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">--set_option trace.Meta.synthInstance true</span>\n<span class=\"c1\">--set_option trace.Meta.isDefEq true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span> <span class=\"c1\">--37s</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout'</span> <span class=\"o\">:=</span> <span class=\"c1\">-- 0.8s</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>From 37 seconds to 0,8!</p>",
        "id": 365987714,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686688925
    },
    {
        "content": "<p>Is there a similar option in Lean3?</p>",
        "id": 365987791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686688945
    },
    {
        "content": "<p>I don't think so from a quick glance</p>",
        "id": 365993759,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686690909
    },
    {
        "content": "<p>This may be relevant or not, but in <a href=\"https://github.com/leanprover-community/mathlib/pull/19178\">#19178</a> I replaced (because of this timeout)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">primitive_add_char</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">add_char</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">R'</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">prim</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">primitive_add_char</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">add_char</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">R'</span><span class=\"o\">)),</span> <span class=\"n\">is_primitive</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I also wanted to have the projections, so I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">primitive_add_char.n</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">primitive_add_char</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">χ</span><span class=\"o\">,</span> <span class=\"n\">χ.1</span>\n</code></pre></div>\n<p>(and similarly for the others). Now, this timeouts! But adding <code>noncomputable!</code> fixes everything. If I only add <code>noncomputable</code>, Lean says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">modifier</span><span class=\"o\">,</span> <span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"n\">primitive_add_char.n'</span> <span class=\"n\">is</span> <span class=\"n\">computable</span>\n</code></pre></div>\n<p>Can this be one of the problems? Lean somehow tries to make the projection computable, but times out.</p>",
        "id": 366013014,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686698387
    },
    {
        "content": "<p>Yes, this (random timeouts in algebra being fixed by <code>noncomputable!</code>) is not uncommon in some parts of the lean 3 library. Probably you can just search for <code>noncomputable!</code> to get a feeling for where it's used.</p>",
        "id": 366076379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686727682
    },
    {
        "content": "<p><code>noncomputable!</code> is just spelled <code>noncomputable</code> now</p>",
        "id": 366081676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686728816
    },
    {
        "content": "<p>My code was in Lean3.</p>",
        "id": 366086154,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686729826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/365978698\">said</a>:</p>\n<blockquote>\n<p>Judging from the shape of the unification problem, this is likely in automatic generation of injectivity theorems, which can be disabled with the option <code>genInjectivity</code></p>\n</blockquote>\n<p>Is there a way to disable this option globally and see if it breaks anything in mathlib/see if there is a significant timing difference?</p>",
        "id": 366114871,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686735992
    },
    {
        "content": "<p>This will surely break things in mathlib, as we use things like <code>prod.mk.inj_iff</code> at least 100 times</p>",
        "id": 366115320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686736085
    },
    {
        "content": "<p>Sure, I meant we could opt in instead of opt out for cases where we use it.</p>",
        "id": 366115798,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686736186
    },
    {
        "content": "<p>Can we fix the generator to not need to solve such hard elaboration problems?</p>",
        "id": 366119600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686736918
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mystery_timeout</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidAlgebra</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mystery_timeout.inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mystery_timeout</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.n</span> <span class=\"bp\">=</span> <span class=\"n\">b.n</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">a.x</span> <span class=\"n\">b.x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span>   <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"n\">mystery_timeout.n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg_heq</span> <span class=\"n\">mystery_timeout.x</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span>   <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n        <span class=\"n\">congr</span>\n        <span class=\"n\">exact</span> <span class=\"n\">eq_of_heq</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 366119680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686736927
    },
    {
        "content": "<p>(Also <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>, can we change the web editor to use 2-space indentation?)</p>",
        "id": 366119833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686736956
    },
    {
        "content": "<p>We'll do that later today<span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 366120431,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1686737084
    },
    {
        "content": "<p>Even computing the type of the injectivity lemma takes rather a long time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"kn\">private</span> <span class=\"n\">mkInjectiveEqTheorem</span> <span class=\"k\">in</span> <span class=\"n\">Lean.Meta.mkInjectiveTheorems</span>\n<span class=\"kn\">open</span> <span class=\"kn\">private</span> <span class=\"n\">mkInjectiveEqTheoremType</span><span class=\"bp\">?</span> <span class=\"k\">in</span> <span class=\"n\">mkInjectiveEqTheorem</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.debug</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- set_option profiler true in</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getConstInfoCtor</span> <span class=\"bp\">`</span><span class=\"n\">mystery_timeout.mk</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkInjectiveEqTheoremType</span><span class=\"bp\">?</span> <span class=\"n\">info</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"{x}\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 366125537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686738087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mysterious.20finsupp.20related.20timeout/near/366119680\">said</a>:</p>\n<blockquote>\n<p>This seems to work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mystery_timeout.inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mystery_timeout</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.n</span> <span class=\"bp\">=</span> <span class=\"n\">b.n</span> <span class=\"bp\">∧</span> <span class=\"n\">HEq</span> <span class=\"n\">a.x</span> <span class=\"n\">b.x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that it gets slow again if you \"accidentally\" use <code>a.x = b.x</code>. The slow defeq problem is from the injEq generator deciding whether to use Eq or HEq.</p>",
        "id": 366136359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686740026
    },
    {
        "content": "<p>Does the naive \"<code>x</code> depends on <code>n</code> so should be <code>HEq</code>\" algorithm not work?</p>",
        "id": 366137628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686740243
    },
    {
        "content": "<p>I guess in some usecases the types may actually be defeq anyways</p>",
        "id": 366142800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686741277
    },
    {
        "content": "<p>But in those cases I guess the lemmas could be generated manually</p>",
        "id": 366142907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686741301
    },
    {
        "content": "<p>IMO emitting <code>HEq</code> even if things are defeq \"by accident\" is a feature</p>",
        "id": 366146522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686741981
    },
    {
        "content": "<p>For instance, I don't agree with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">why</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pi_Lp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">why.mk.inj_eq</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">why.mk.inj_eq :</span>\n<span class=\"cm\">  ∀ {p : ennreal} {f : pi_Lp p (λ (_x : fin 3), ℝ)} {p_1 : ennreal} {f_1 : pi_Lp p_1 (λ (_x : fin 3), ℝ)},</span>\n<span class=\"cm\">    {p := p, f := f} = {p := p_1, f := f_1} = (p = p_1 ∧ f = f_1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 366146554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686741989
    },
    {
        "content": "<p>If you've made the effort of creating a type synonym, <code>structure</code> shouldn't be unfolding it</p>",
        "id": 366146864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686742058
    },
    {
        "content": "<p>Lean 4 does the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.PiLp</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">why</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ENNReal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PiLp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">why.mk.injEq</span>\n</code></pre></div>",
        "id": 366147577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686742177
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/812\">lean#812</a> attempts to change this in Lean 3</p>",
        "id": 366159344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686744388
    },
    {
        "content": "<p>In the end, I used the easier-to-implement algorithm of \"defeq but only unfold <code>reducible</code>\". <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, do you think this is a reasonable change for Lean4 too?</p>",
        "id": 366171208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686746761
    },
    {
        "content": "<p>It might be. I don't have a good guideline for when it is appropriate and when not</p>",
        "id": 366175702,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686747698
    },
    {
        "content": "<p>IMO we should merge <a href=\"https://github.com/leanprover-community/lean/pull/812\">leanprover-community/lean#812</a>; that will mean we can keep our structures in lean 3, and use <code>set_option genInjectivity false</code> when we port them to Lean 4. We can always evaluate porting <a href=\"https://github.com/leanprover-community/lean/pull/812\">leanprover-community/lean#812</a> to Lean4 at a later date; the <code>genInjectivity</code> option makes it non-urgent.</p>",
        "id": 367847757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250994
    },
    {
        "content": "<p>I agree, and am happy to merge, but will wait a moment longer in case anyone wants to call a hold!</p>",
        "id": 367865969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687254973
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 368831618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687514531
    }
]