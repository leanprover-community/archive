[
    {
        "content": "<p>I am approaching a point in my project where I would like to have my polynomials be computable, so I am thinking again about how we can make that happen. People have suggested that we introduce a new type, which is an idea I have resisted because I don't want to reprove the entire <code>Polynomial</code> API, and it feels like bifurcation.</p>\n<p>It occurred to me, though, that the polynomials I am working with all always have an explicit upper bound on their degree. I thought maybe this could be a new type I could introduce, with the following benefits:</p>\n<ul>\n<li>I'm pretty sure that the definition would just be <code>def degreeBound_polynomial {R} (n : nat) := Fin (n+1) -&gt; R</code>. I think this avoids the computability issue, which was previously mainly about not knowing whether certain terms cancelled out (because we needed to make a Finset of the nonzero terms). Now, these zero terms are just carried around.</li>\n<li>Now that we are in Lean 4, heterogeneous operators are, I understand, much easier. So it should be fine to define <code>HMul (db_polynomial R a) (db_polynomial R b) (db_polynomial R (a+b))</code></li>\n<li>For the applications that I in particular am working on, it would be fine, I think, since the degree-bound exists for all the polynomials I use anyway.</li>\n<li>Thinking in terms of security for cryptography, this makes it more likely that code written using this type is <a href=\"https://en.wikipedia.org/wiki/Timing_attack#Avoidance\">constant time</a>, thus making timing-based side-channel attacks less likely (though side-channel attacks are a complicated area and there's much I don't understand about them).</li>\n<li>Perhaps we can someday make a computable polynomial out of equivalence classes of these?</li>\n</ul>\n<p>Potential Cons</p>\n<ul>\n<li>Issues with <code>db_polynomial R (a+b)</code> not having the same type as <code>db_polynomial R (b+a)</code>.</li>\n<li>For polynomials whose actual degree is much less than the bound, equality comparisons are more expensive than they have to be.</li>\n</ul>\n<p>Any thoughts on this?</p>",
        "id": 392266572,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695282609
    },
    {
        "content": "<p>Representing arrays as functions <code>Fin n -&gt; R</code> can be extremely slow depending on what sort of computation you want to do. The coefficients won't actually be stored, the only thing stored will be the function that computes them, which could  become extremely complicated quite quickly. I think I once tried matrices in a similar way, and it's super slow because if for example you try to invert a matrix, then each time you access an element of this matrix it will recompute the inverse. You should probably use <code>Array</code> or <code>Vector</code> or <code>List</code> instead.</p>",
        "id": 392267224,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1695282899
    },
    {
        "content": "<p>Could this be the cause of the slowness in <a href=\"https://github.com/leanprover/lean4/pull/2564\">lean4#2564</a> ? Some not-that-slow thing being done millions of times?</p>",
        "id": 392267870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695283190
    },
    {
        "content": "<p>I suspect that it is possible to normalize <code>Fin n -&gt; R</code> functions in some way such that all the values are precomputed and the function is just <code>fun i =&gt; array.get i</code> on an array thunk</p>",
        "id": 392268369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695283358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Kernel computation automatically memoizes everything, so I don't think this is sufficient to explain the situation there</p>",
        "id": 392268743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695283479
    },
    {
        "content": "<p>It's just <code>#eval</code> computation that suffers from the issue Chris is highlighting</p>",
        "id": 392268839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695283521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392267224\">said</a>:</p>\n<blockquote>\n<p>You should probably use <code>Array</code> or <code>Vector</code> or <code>List</code> instead.</p>\n</blockquote>\n<p>Vector would be the appropriate one, since it comes with a built-in length. Does <code>Vector</code> have an <code>Add</code> instance though?</p>",
        "id": 392280504,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695287470
    },
    {
        "content": "<p>Why do you want the length in the type?</p>",
        "id": 392282220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695288059
    },
    {
        "content": "<p>Isn't that what we're discussing here?</p>",
        "id": 392283723,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695288565
    },
    {
        "content": "<p>I guess you're proposing a degree bound polynomial type that is equivalent to <code>List</code>? I suppose that could work. The downside I see is that if I want to write something like <code>P</code> is true of all polynomials with degree bound 10, it's written like <code>forall (p : DBpolynomial R), p.degree_bound &lt; 10 -&gt; P p</code> rather than <code>forall (p : DBPolynomial R 10), P p</code></p>",
        "id": 392284587,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695288846
    },
    {
        "content": "<p>It also feels confusing for <code>[1, 0]</code> to be of the same type as <code>[1]</code>, since they are not equal, but they correspond to the same polynomial.</p>",
        "id": 392285669,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695289263
    },
    {
        "content": "<p>I think one of the previous proposals for computable polynomials was through setoids on lists, I guess this is another way to fix all this. I had a PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16160\">!3#16160</a> building to this.</p>",
        "id": 392285987,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695289382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392284587\">said</a>:</p>\n<blockquote>\n<p>I guess you're proposing a degree bound polynomial type that is equivalent to <code>List</code>? </p>\n</blockquote>\n<p>I'm not going as far as proposing it; simply asking why you're proposing something different</p>",
        "id": 392288012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695290182
    },
    {
        "content": "<p>Q: What kind of computation are you doing with these polynomials? Does <code>norm_num</code> / <code>ring</code> computation suffice? (in which case you might just be able to use regular polynomials)</p>",
        "id": 392288698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290440
    },
    {
        "content": "<p>I guess to elaborate more, you can look at <a href=\"#narrow/stream/287929-mathlib4/topic/Scope.20of.20mathlib/near/391930408\">this comment</a>. Note that I've written it one way in Lean, but if you look at the reference, everything is written using a special notation for the set of polynomials with degree below a certain value. So it feels like there should be a def of some kind for this concept.</p>",
        "id": 392288806,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695290480
    },
    {
        "content": "<p>Isn't there already a definition for bounded degree polynomials?</p>",
        "id": 392288967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290531
    },
    {
        "content": "<p><code>degreeLE</code> or something</p>",
        "id": 392288990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392288698\">said</a>:</p>\n<blockquote>\n<p>Q: What kind of computation are you doing with these polynomials? Does <code>norm_num</code> / <code>ring</code> computation suffice? (in which case you might just be able to use regular polynomials)</p>\n</blockquote>\n<p>I'd like to be able to write code that manipulates the polynomials and then returns other polynomials/evaluations of polynomials, I don't want to just prove things.</p>",
        "id": 392289238,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695290642
    },
    {
        "content": "<p>can you be more specific?</p>",
        "id": 392289426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290707
    },
    {
        "content": "<p>any concrete code manipulating polynomial-like objects almost certainly will need to invent its own data structures for the polynomials</p>",
        "id": 392289520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290755
    },
    {
        "content": "<p>especially if everything is bounded degree, that's a specialized situation where you can do much better by using custom data structures</p>",
        "id": 392289750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695290837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392289520\">said</a>:</p>\n<blockquote>\n<p>any concrete code manipulating polynomial-like objects almost certainly will need to invent its own data structures for the polynomials</p>\n</blockquote>\n<p>Right, because mathlib's polynomials aren't computable, so I am looking for a good way to make a new data structure that can go in mathlib which I can manipulate.</p>",
        "id": 392289931,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695290907
    },
    {
        "content": "<p>what's the actual application? Can you give an example?</p>",
        "id": 392291439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695291438
    },
    {
        "content": "<p>the design of a data structure for computational purposes is very tightly coupled to the algorithm in which it is being used</p>",
        "id": 392291607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695291487
    },
    {
        "content": "<p>You're not the first person to suggest this to me. But if a paper describes an algorithm using polynomials, I'd like to be able to use mathlib's <code>Polynomial</code> type to implement it.</p>",
        "id": 392291857,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695291594
    },
    {
        "content": "<p>I am working on a verified implementation of <a href=\"https://eprint.iacr.org/2019/1047.pdf\">this paper</a></p>",
        "id": 392292006,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695291642
    },
    {
        "content": "<p>An example of a polynomial operation that I need to be able to do: I am given three polynomials <code>a b c</code> over a finite field such that <code>a * b - c = 0</code> on some subgroup of the field. I want to be able to compute the polynomial <code>(a * b - c)/V</code>, where <code>V</code> is the monic polynomial whose roots are the subgroup.</p>",
        "id": 392292284,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695291757
    },
    {
        "content": "<p>(I'm actually noticing now that the degree-bound <em>won't</em> work for this, since <code>V = X^|H| - 1</code> is asymptotically slower to divide by if it's represented as a huge vector.)</p>",
        "id": 392292637,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695291900
    },
    {
        "content": "<p>are these in the quotient ring <code>R[X]/V</code>?</p>",
        "id": 392292640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695291901
    },
    {
        "content": "<p>yeah, if you actually want to get the asymptotic order right for a complicated paper like that you will have to implement all the tricks</p>",
        "id": 392292886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695291967
    },
    {
        "content": "<p>Well <code>a,b,c</code> are all Lagrange interpolants of arbitrary functions from the subgroup <code>H</code> to the field, so <code>a * b</code> has degree larger than <code>|H|</code>.</p>",
        "id": 392293038,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695292037
    },
    {
        "content": "<p>I may need <code>R[X]/(X^n-1)</code> for my FFT.</p>",
        "id": 392293040,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1695292038
    },
    {
        "content": "<p>saying that an algorithm \"uses polynomials\" is to me a bit analogous to \"using graphs\". It's a conceptual language for describing the program, but it is only tenuously related to the actual implementation and a naive implementation will be completely impractical</p>",
        "id": 392293109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292079
    },
    {
        "content": "<p>We can certainly have a type for doing naive calculations with polynomials, but most applications will want something better</p>",
        "id": 392293304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392293304\">said</a>:</p>\n<blockquote>\n<p>We can certainly have a type for doing naive calculations with polynomials</p>\n</blockquote>\n<p>Is there any reason not to make <code>Polynomial</code> be that type?</p>",
        "id": 392293395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695292178
    },
    {
        "content": "<p>It was, once upon a time</p>",
        "id": 392293433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292193
    },
    {
        "content": "<p>but people didn't like the decidability assumptions</p>",
        "id": 392293483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292203
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/wiki/Computation-models-for-polynomials-and-finitely-supported-functions#possible-designs-for-a-more-computable-finsupp\">related wiki page</a>)</p>",
        "id": 392293599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695292253
    },
    {
        "content": "<p>I assume the \"once upon a time\" is the first column of that table</p>",
        "id": 392293798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695292335
    },
    {
        "content": "<p>I believe so</p>",
        "id": 392293919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292401
    },
    {
        "content": "<p>(we have a new entry for the list of zulip conversations)</p>",
        "id": 392293967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695292419
    },
    {
        "content": "<p>Mathlib already has an algorithm for dividing a polynomial by its roots, you just do division with remainder and prove there's no remainder.</p>",
        "id": 392295051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695292879
    },
    {
        "content": "<p>I am ok with implementing the tricks, but I'd like to implement them in a type that I can put in mathlib when I'm done. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392293483\">said</a>:</p>\n<blockquote>\n<p>but people didn't like the decidability assumptions</p>\n</blockquote>\n<p>This is sort of the point of this whole suggestion. It can be another type that doesn't interfere with Polynomial, but which the people who want computability can use.</p>",
        "id": 392295356,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695292988
    },
    {
        "content": "<p>I guess that fact that the type actually already does exist in mathlib hampers this.</p>",
        "id": 392295472,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695293039
    },
    {
        "content": "<p>are they univariate polynomials? This also simplifies things a lot</p>",
        "id": 392295759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392295759\">said</a>:</p>\n<blockquote>\n<p>are they univariate polynomials? This also simplifies things a lot</p>\n</blockquote>\n<p>Erf, it's complicated. There are lots of \"sparse\" bivariate polynomials, but I guess they're all ultimately represented in the concrete algorithms as univariate polynomials, yes.</p>",
        "id": 392295957,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695293228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392293040\">said</a>:</p>\n<blockquote>\n<p>I may need <code>R[X]/(X^n-1)</code> for my FFT.</p>\n</blockquote>\n<p>Also, it's worth noting that the \"tricks\" we are talking about are essentially always discrete Fourier transforms, so I'm always interested to know more about FFT work for this reason. Do you have a PR?</p>",
        "id": 392296420,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695293434
    },
    {
        "content": "<p>I would just do unbounded-degree univariate polynomials over a DecidableEq ring by using <code>Array</code> and keeping the tail trimmed</p>",
        "id": 392296431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293439
    },
    {
        "content": "<p>and then you can implement bounded-degree multiplication in the quotient ring by polynomial division with that underlying representation</p>",
        "id": 392296517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293482
    },
    {
        "content": "<p>that seems like a reasonable compromise between flexibility and performance that could fit as a mathlib type</p>",
        "id": 392296652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695293544
    },
    {
        "content": "<p>I guess the best way for me to start on that then is maybe to revive my setoid list PR, possibly with more decidability assumptions.</p>",
        "id": 392297047,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695293726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392296420\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20degree-bound.20polynomials/near/392293040\">said</a>:</p>\n<blockquote>\n<p>I may need <code>R[X]/(X^n-1)</code> for my FFT.</p>\n</blockquote>\n<p>Also, it's worth noting that the \"tricks\" we are talking about are essentially always discrete Fourier transforms, so I'm always interested to know more about FFT work for this reason. Do you have a PR?</p>\n</blockquote>\n<p>No, it's still on my todo list. I'm still thinking about how to make it easier to prove the correctness of an (not naturally functional) algorithm with as little loss of efficiency and generality as possible. Maybe I'm too perfectionistic. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 392299997,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1695294875
    }
]