[
    {
        "content": "<p>Hello, I'm new in Lean and I want to contribute sifted categories as well as a proof that sifted colimits commute with finite products. Before I begin writing the code, what should be the official definition of them? In the literature it is common to define sifted colimits as those that commute with finite products and then characterizing them.</p>\n<p>Is there any convention or rule of thumb on which equivalent definition I should use? For the particular case of <em>sifted</em>, any of 1.1, 2.1, or 2.2. from the <a href=\"https://ncatlab.org/nlab/show/sifted+category\">nlab</a> seem like a good definition to me. The characterization in 2.2. is the most concrete and parallels the definition of filtered categories already in mathlib, but it's so concrete it may never be actually used.</p>",
        "id": 406934108,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702128083
    },
    {
        "content": "<p>Definitions 2.1 or 2.2 are better because definition 1.1 would create universe issues (in Lean/mathlib, we have as many categories of sets as there are universes). Between 2.1 and 2.2, I would rather choose 2.1 because we already have an API for final/initial functors.</p>",
        "id": 406935156,
        "sender_full_name": "Joël Riou",
        "timestamp": 1702128804
    },
    {
        "content": "<p>But there's also API for cospans and connected categories, I believe.</p>",
        "id": 406939042,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702130384
    },
    {
        "content": "<p>I suspect 2.1 will be more useful in Mathlib.<br>\n(Doesn't hurt to prove the equivalence, of course!)</p>",
        "id": 406958351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702143710
    },
    {
        "content": "<p>Yeah fix a definition and then the more API the better :-)</p>",
        "id": 406967995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702152797
    },
    {
        "content": "<p>Okay, I'll choose 2.1 then, thanks for the comments! I'll ask here again later if any problems appear.</p>",
        "id": 406968330,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702153142
    },
    {
        "content": "<p>Hello, after reading the library some more I got this so far <a href=\"https://github.com/leanprover-community/mathlib4/commit/4afc84c7864b8a50f18f7d9cfffb2346826858c4\">https://github.com/leanprover-community/mathlib4/commit/4afc84c7864b8a50f18f7d9cfffb2346826858c4</a></p>\n<p>I wanted some early feedback even though there's not much, and also to ask what would be the best way to show that <code>C</code> is nonempty from <code>[HasFiniteCoproducts C]</code>. I'm not sure how to get the initial element data from it.</p>",
        "id": 407558359,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702412044
    },
    {
        "content": "<p>Is there <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasInitialObject#doc\">docs#HasInitialObject</a> ?</p>",
        "id": 407581970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702419638
    },
    {
        "content": "<p>No not quite. I was hoping it would all have been anyway done for you</p>",
        "id": 407582121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702419713
    },
    {
        "content": "<p>You can write <code>\\bot_ _</code> (modulo unicode) to get the initial object</p>",
        "id": 407587871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702422627
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.HasInitial#doc\">docs#CategoryTheory.Limits.HasInitial</a></p>",
        "id": 407588314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702422869
    },
    {
        "content": "<p>I'm getting <code>failed to synthesize instance:  Bot C</code> I suppose because <code>[HasFiniteCoproducts C]</code> gives me  <code>HasColimitsOfShape (Discrete (Fin n)) C</code>, not <code>HasColimitsOfShape (Discrete.{0} PEmpty) C</code> hmmmm. I suppose the problem is that these discrete categories are not definitionally equal?</p>",
        "id": 407588906,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702423229
    },
    {
        "content": "<p>Don’t fortget the underscore</p>",
        "id": 407589678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702423709
    },
    {
        "content": "<p>Oh my bad, it's working now, thanks! But now I'm wondering, how did it bypass the non-definitional-equality between the two discrete categories?</p>",
        "id": 407591063,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1702424552
    },
    {
        "content": "<p>It’s just an instance that’s registered somewhere in mathlib, I think.</p>",
        "id": 407591540,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702424854
    }
]