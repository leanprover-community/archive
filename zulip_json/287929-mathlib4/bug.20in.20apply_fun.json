[
    {
        "content": "<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Equiv.refl</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"bp\">?</span><span class=\"n\">u.32</span> <span class=\"bp\">?</span><span class=\"n\">u.33</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It looks like a missing <code>coeFn</code> needs to be inserted somewhere</p>",
        "id": 350998164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681898810
    },
    {
        "content": "<p>Though presumably it would be better to just ask lean to elaborate <code>Injective f</code> rather than build the expr manually</p>",
        "id": 350998477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681898895
    },
    {
        "content": "<p><code>apply_fun ... at ...</code> is able to do function coercions already; maybe something like what it's doing can be used for <code>apply_fun ... using ...</code></p>",
        "id": 351039178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681908925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3582\">mathlib4#3582</a></p>",
        "id": 351700019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682100351
    },
    {
        "content": "<p>I left a comment. Happy to have a go at that refactor if you'd prefer.</p>",
        "id": 351759499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682125572
    },
    {
        "content": "<p>Can we use syntax quotations to construct a q() application, and then evaluatw that Expr to get the real Expr?</p>",
        "id": 351827991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155983
    },
    {
        "content": "<p>I don't really understand why we could use <code> `(quotes) </code> to do everything automatically here in Lean 3, but somehow have to manually build and match all our expressions in Lean 4</p>",
        "id": 351828241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682156039
    },
    {
        "content": "<p>I feel like it's easier to think through the consequences to each construction when they're done one at a time. You have to worry about metavariables that might be created at different times (perhaps due to coercions), when they're solved for, and who's responsible for collecting them to add to the list of goals. (Aside: I think many (most?) uses of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkAppM#doc\">docs4#Lean.Meta.mkAppM</a> in tactic code are incorrect, since expressions from the user can easily have holes, and also this function doesn't do the whole elaboration procedure with coercions. There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabAppArgs#doc\">docs4#Lean.Elab.Term.elabAppArgs</a> to create applications, but you do have to think about the TermElabM monad.)</p>",
        "id": 351830647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682156617
    },
    {
        "content": "<p>Rather than qq quotations, it's possible to do a lot of these things with syntax quotations, but unlike Lean 3 you have to explicitly run the elaborator on these. You can embed expressions into syntax using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.exprToSyntax#doc\">docs4#Lean.Elab.Term.exprToSyntax</a></p>\n<p>For individual applications I just find it's easier to do it by hand than having to look at expressions with <code>exprToSyntax</code> in them.</p>",
        "id": 351831098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682156745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Syntax quotations are like <code>pexpr</code> quotations, and qq quotations are like <code>expr</code> quotations, if you want the Lean 3 analogues. In Lean 4, there's a small hoop you have to jump through to embed an \"expr\" into a \"pexpr\", which is this <code>exprToSyntax</code> function. It creates a syntactic representation of a metavariable, embeds that, and assigns the metavariable to your Expr.</p>",
        "id": 351831637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682156892
    },
    {
        "content": "<p>Perhaps I'm misremembering the lean3 <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.apply_fun/src\">src#tactic.interactive.apply_fun</a> implementation</p>",
        "id": 351832685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682157207
    },
    {
        "content": "<p>It's using <code>pexpr</code> quotations and <code>to_expr</code>, which could be translated as Syntax quotations and running the elaborator. The Lean 3 one is not making use of expected types, and it's not collecting any holes like <code>refine</code> would.</p>",
        "id": 351835322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682157976
    },
    {
        "content": "<p>If you want to see a <code>pexpr</code>-like quotation, take a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3582/files#diff-d272d0233c9cb593439825761f1a8bcb5858ebc28d1bba77f6199ffbf9046e30R96\">this line</a> in the PR.</p>",
        "id": 351835895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682158161
    }
]