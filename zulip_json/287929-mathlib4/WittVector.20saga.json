[
    {
        "content": "<p>The file <code>RingTheory.WittVector.IsPoly</code> is available for porting.  A large portion of this file develops <code>gost_calc</code> and <code>ghost_simp</code>, but never uses these tactics.  I am willing to try to port these tactics: which one do you think is the simplest file that uses the tactics?</p>\n<p>ping <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, as the listed authors of the file.</p>",
        "id": 364452050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686204645
    },
    {
        "content": "<p>Probably <code>src/ring_theory/witt_vector/mul_p.lean</code>. It is only 81 lines.</p>",
        "id": 364458874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686207091
    },
    {
        "content": "<p>Ok, I'll port what is not tactic in <code>is_poly</code> and will then use <code>mul_p</code> as a guinea pig for developing the tactics.</p>",
        "id": 364464004,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686208569
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/4851\">!4#4851</a>, porting <code>RingTheory.WittVector.IsPoly</code>.  There are only a couple of <code>sorry</code>s left and all the tactic material commented out.  If anyone feels like fixing the, possibly easy, <code>sorry</code>s, please, go ahead!</p>",
        "id": 364480556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686212944
    },
    {
        "content": "<p>In the meanwhile, I will take a look at <code>ring_theory/witt_vector/mul_p.lean</code> and see whether I can implement the tactics <code>ghost_calc</code> and <code>ghost_simp</code> of <code>RingTheory.WittVector.IsPoly</code>.</p>",
        "id": 364480955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686213047
    },
    {
        "content": "<p>Looks like <code>src/ring_theory/witt_vector/verschiebung.lean</code> might be a better test for the tactics: <code>mul_p</code> does not use any new tactic!</p>\n<p>Also, since the tactics <code>ghost_calc</code> and <code>ghost_simp</code> are not actually used in the file <code>RingTheory.WittVector.IsPoly</code>, it is probably a better idea to port the whole file without any tactics and then implement the tactics once the file is ported.</p>",
        "id": 364487905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686214654
    },
    {
        "content": "<p>The file <code>RingTheory.WittVector.IsPoly</code> is ready for review!  For the moment, I commented out all meta code, fixed all the sorries and created a new \"Attributes\" file.  The attributes currently do nothing other than allowing <code>@[attribute]</code> to work.  Moreover, as far as I understand, attributes cannot be defined in the file where they are used, so it was either a matter of creating a new file or of putting the attributes in an earlier file.</p>",
        "id": 364513140,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686220195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> thanks! I kicked it on the queue</p>",
        "id": 364644273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686248196
    },
    {
        "content": "<p>Great!  Seems to have been approved twice!</p>",
        "id": 364651572,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686250241
    },
    {
        "content": "<p>I am currently working on <code>RingTheory.WittVector.Frobenius</code> and it is using <code>ghost_simp</code> and <code>ghost_calc</code> a a few places. Are these tactics being ported or should I try to do without them?</p>",
        "id": 364804285,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686306317
    },
    {
        "content": "<p>Yes, my plan was to port them, but only once they started being needed.  I guess that now is the time, but I probably won't have much time until Monday...</p>",
        "id": 364808773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686307328
    },
    {
        "content": "<p>The attributes should \"work\", in the sense that I registered them, but I left the tactics unported, since they were not used in the file where they were defined (which was <code>...Witt...IsPoly</code>.</p>",
        "id": 364809080,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686307394
    },
    {
        "content": "<p>Great!  I'll do the parts of this file that doesn't need these tactics in the meantime.</p>",
        "id": 364838332,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1686313545
    },
    {
        "content": "<p>I have been trying to port the <code>ghost</code> tactics, but have had little success.  Also, over the coming two weeks, I will have little Lean time and lots of administrative chores.  I have not given up on porting these tactics, but realistically, I won't have them working before sometime in July.</p>\n<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span></p>",
        "id": 367241256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687030933
    },
    {
        "content": "<p>If someone else wants to take over, feel free to do so.</p>",
        "id": 367241437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1687031039
    },
    {
        "content": "<p>I guess this can wait a bit. Thanks for working on this!</p>",
        "id": 367378645,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687093269
    },
    {
        "content": "<p>Anyone with meta skills who wants to take a look at these tactics? If needed, I can try to explain the maths side of things.<br>\nIn the near future these tactics will probably block the longest unported chain.</p>",
        "id": 369613787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687769719
    },
    {
        "content": "<p>as for ghost_simp, is it something along the lines of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">ghost_simp</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"n\">simpArgs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">simpArgs.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getElems</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">intro</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ghost_simps</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>(essentially c&amp;p from <code>zify</code>)</p>",
        "id": 370018914,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1687864326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and I did a hacking session this morning (after Kyle pushed some stuff last night).<br>\nThe result is <a href=\"https://github.com/leanprover-community/mathlib4/pull/4897\">https://github.com/leanprover-community/mathlib4/pull/4897</a></p>",
        "id": 370019894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687864499
    },
    {
        "content": "<p>It seems that <code>ghost_calc</code> and <code>ghost_simp</code> are now working quite well</p>",
        "id": 370019986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687864512
    },
    {
        "content": "<p>And happily we discovered that the @[is_poly] attribute is no longer required: it used to generate additional instance declarations, but type class search can now generated these unaided. A Lean 4 win!</p>",
        "id": 370020674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687864647
    },
    {
        "content": "<p>So I have been using the new tactics (thanks!) for the port of <code>RingTheory.WittVector.Frobenius</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/4887\">#4887</a> but I am getting some errors while using <code>ghost_calc</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsPoly₂</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">frobeniusFun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">IsPoly₂</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">frobeniusFun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">frobeniusFun</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>The goal here is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">𝕎</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">frobeniusFun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">frobeniusFun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">frobeniusFun</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>I have been looking at functions around <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/WittVector/IsPoly.html#WittVector.mulIsPoly₂\">docs#WittVector.mulIsPoly₂</a> but I have been not successful so far...</p>",
        "id": 370070798,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687873667
    },
    {
        "content": "<p>Nice!! <a href=\"https://github.com/leanprover-community/mathlib4/pull/5520\">!4#5520</a> is nearly there, with <code>ghost_calc</code> also still giving one last error here even with the new work—hopefully there's now a much smaller gap to cross! :) The issue is synthesizing <code>IsPoly p fun {R} [CommRing R] x ↦ select P x + select (fun i ↦ ¬P i) x</code>.</p>\n<p>It seems lean is struggling to find its way up to <code>IsPoly₂</code> then back down to <code>IsPoly</code> via <code>IsPoly₂.diag</code>. For a simpler example, consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Interestingly,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- succeeds, and relies on IsPoly₂.comp via negIsPoly, idIsPolyI')</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>This instance is constructable \"by hand\" as e.g. <code>#check @IsPoly₂.diag p _ (IsPoly₂.comp (h := fun _ _ =&gt; (·+·)) (f := fun _ _ =&gt; (-·)) (g := fun _ _ =&gt; (-·)))</code>, so we have all the instances—we just can't see them via TC search. I'm not sure what the solution is here, though.</p>\n<p>(I've marked this PR <code>help-wanted</code> in case anyone wants to take over, and won't be working on it any further for the next several hours.)</p>",
        "id": 370073526,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687874101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> you'll have to make all occurences of <code>IsPoly</code> into instances instead of theorems. In particular:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/4887/files#diff-e4a6458fbec116d2b2426060db7aa7cce13c4fa07f890a20cdccf142040607afR235\">https://github.com/leanprover-community/mathlib4/pull/4887/files#diff-e4a6458fbec116d2b2426060db7aa7cce13c4fa07f890a20cdccf142040607afR235</a></p>",
        "id": 370074252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687874219
    },
    {
        "content": "<p>(Hmm, thinking about it, one option is to help lean along by introducing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">diag_comp_isPoly</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsPoly₂</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsPoly</span> <span class=\"n\">p</span> <span class=\"k\">fun</span> <span class=\"n\">_R</span> <span class=\"n\">_Rcr</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">IsPoly₂.diag</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsPoly₂.comp</span>\n</code></pre></div>\n<p>though I'm a bit wary of introducing instances like this. Lean then has no problem synthesizing any of the above (including the \"real-world\" instance), although there's still some work to be done later on in that theorem even when including this.)</p>",
        "id": 370080907,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687875323
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4887\">#4887</a> is ready now</p>",
        "id": 370082066,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687875502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> left a review and a <code>bors d+</code></p>",
        "id": 370082339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687875549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> it could be that Scott and I decided a bit too quickly that TC could handle all of this. For now I suggest that you add the required instance by hand in the proof that needs it. Together with a porting note.</p>",
        "id": 370083357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687875719
    },
    {
        "content": "<p>We can then port 3 more files, and look at the total damage.</p>",
        "id": 370083511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687875736
    },
    {
        "content": "<p>Ok, sounds good!</p>",
        "id": 370083554,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687875744
    },
    {
        "content": "<p>I'll take back the help-wanted :)</p>",
        "id": 370083863,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687875792
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5520\">!4#5520</a> builds and just needs to lint; it's now <code>awaiting-review</code> and <code>awaiting-CI</code> :)</p>",
        "id": 370095692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687877616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/WittVector.20saga/near/370019986\">said</a>:</p>\n<blockquote>\n<p>It seems that <code>ghost_calc</code> and <code>ghost_simp</code> are now working quite well</p>\n</blockquote>\n<p>I'm happy to see that the <code>ghost_calc</code> implementation actually made it through the <code>infer_instance</code>s like I hoped it would, and it figures that it still needed a little tweaking beyond that point <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 370146485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687886445
    },
    {
        "content": "<p>Ok, I got <code>WittVector.Identities</code> building (waiting for CI on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5527\">!4#5527</a>)! :) This was a bit of a difficult one for TC search unfortunately; <code>ghost_calc</code> was used only twice but needed all instances provided.</p>\n<p>There was also another issue to report: <code>simp only []</code> was necessary before <code>ghost_calc</code> in both cases for it to recognize the goal—otherwise it errors with <code>ghost_calc expecting target to be an equality of `WittVector`s</code>. From manual inspection it seems as though it's just performing beta reduction.</p>",
        "id": 370179616,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687893390
    },
    {
        "content": "<p>Ah, I see <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> already merged it, nice! :D (and that I left a stray LibrarySearch import in there, whoops. Thanks for catching that!!)</p>",
        "id": 370180214,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687893496
    },
    {
        "content": "<p>Also, just to record this publicly somewhere for when we get the chance, else I'll forget: I think <code>frobenius_zmodp</code> in <code>WittVector.Frobenius</code> ought to be <code>frobenius_zmodP</code></p>",
        "id": 370180570,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687893587
    },
    {
        "content": "<p>Yeah, maybe <code>ghost_calc</code> should just start of with a <code>simp only []</code>.</p>",
        "id": 370180579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687893589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/WittVector.20saga/near/370180570\">said</a>:</p>\n<blockquote>\n<p>Also, just to record this publicly somewhere for when we get the chance, else I'll forget: I think <code>frobenius_zmodp</code> in <code>WittVector.Frobenius</code> ought to be <code>frobenius_zmodP</code></p>\n</blockquote>\n<p>Probably consistent. But I still find those capital <code>p</code>s very weird.</p>",
        "id": 370180804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687893625
    },
    {
        "content": "<p>They are a bit weird! But I think better than the alternative, which might consist of staring at something like <code>charp</code> for 30 seconds before realizing it's not a word <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 370182124,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687893894
    },
    {
        "content": "<p>(I also personally probably don't find them <em>as</em> weird simply because I don't have the mathlib3 history, and my eyes automatically look for the upperCamelCase boundaries for semantic content. so a string of lowercases stands out more.)</p>",
        "id": 370182853,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687894082
    },
    {
        "content": "<p>Ideally we would come up with names that didn't hardcode variable conventions into them</p>",
        "id": 370182908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687894085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/WittVector.20saga/near/370179616\">said</a>:</p>\n<blockquote>\n<p>There was also another issue to report: <code>simp only []</code> was necessary before <code>ghost_calc</code> in both cases for it to recognize the goal—otherwise it errors with <code>ghost_calc expecting target to be an equality of `WittVector`s</code>. From manual inspection it seems as though it's just performing beta reduction.</p>\n</blockquote>\n<p>If you change <code>getTarget''</code> to <code>getTarget'</code> it might be enough</p>",
        "id": 370183933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687894319
    },
    {
        "content": "<p>I chose the more conservative one first.  One prime does whnf</p>",
        "id": 370184167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687894379
    },
    {
        "content": "<p>aha, yeah, I think we want a bit more whnf</p>",
        "id": 370185604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687894697
    }
]