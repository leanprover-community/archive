[
    {
        "content": "<p>I struggle with situations like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"c1\">-- ok; leads to `hab : b ≤ a`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"c1\">-- ok; leads to `hab : b ≤ a`</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> tactic 'rewrite' failed, did not find instance of the pattern in</span>\n<span class=\"cm\">  the target expression</span>\n<span class=\"cm\">    ¬?m.302 &lt; ?m.303</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>I suspect that the last example is wrongly defined because there are two instances of <code>LinearOrder</code> on the type <code>α</code> in my context.</p>\n<p>I came to the conclusion because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>succeeds, but clicking on \"Try this\" leads to a failure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hab</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Synthesized type class instance is not definitionally equal to</span>\n<span class=\"cm\">  expression inferred by typing rules, synthesized</span>\n<span class=\"cm\">    inst✝¹</span>\n<span class=\"cm\">  inferred</span>\n<span class=\"cm\">    LinearOrderedAddCommMonoid.toLinearOrder</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>even though both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hab</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hab</span>\n</code></pre></div>\n<p>perfectly work.</p>\n<p>Sorry for the long introduction.<br>\nI'll formulate my question now...</p>\n<p>Consider I have a structure parametrized by <code>{α : Type}</code> with <code>[LinearOrder α]</code> on it.<br>\nFor some theorems, I want to strengthen the assumption to <code>[LinearOrderedAddCommMonoid α]</code>.<br>\nHow can I add the additional typeclass while talking about <em>the</em> order on <code>α</code> my structure uses?</p>",
        "id": 395665865,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696846797
    },
    {
        "content": "<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 395666451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696847010
    },
    {
        "content": "<p><code>[LinearOrder α] [LinearOrderedAddCommMonoid α]</code> is indeed nonsense because it puts two orders on <code>α</code></p>",
        "id": 395666488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696847023
    },
    {
        "content": "<p>Either with <code>section</code> or by calling the stronger one something else</p>",
        "id": 395666529,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696847039
    },
    {
        "content": "<p>The solution is to not let <code>[LinearOrder α] [LinearOrderedAddCommMonoid α]</code> be simultaneous assumptions to your lemmas</p>",
        "id": 395666631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696847067
    },
    {
        "content": "<p>OK but if <code>[LinearOrder α]</code> already exists on the structure, how can I specify additional properties of <em>that</em> linear order?</p>",
        "id": 395666736,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696847110
    },
    {
        "content": "<p>Add them as hypotheses?</p>",
        "id": 395666895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696847165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20additionally.20specified/near/395666488\">said</a>:</p>\n<blockquote>\n<p><code>[LinearOrder α] [LinearOrderedAddCommMonoid α]</code> is indeed nonsense because it puts two orders on <code>α</code></p>\n</blockquote>\n<p>Funny that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">hab</span>\n</code></pre></div>\n<p>succeeds.</p>",
        "id": 395666972,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696847200
    },
    {
        "content": "<p>Typeclass inference works in mysterious ways.  Usually, it seems to mix instances around and find clashes rather quickly.  However, when the two \"equal\" instances are syntactically equal, it may have a mechanism to systematically discard one and be reasonable about it.  I <em>think</em>.</p>",
        "id": 395669202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696848078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60LinearOrder.60.20additionally.20specified/near/395666736\">said</a>:</p>\n<blockquote>\n<p>OK but if <code>[LinearOrder α]</code> already exists on the structure, how can I specify additional properties of <em>that</em> linear order?</p>\n</blockquote>\n<p>What do you mean by \"exists on the structure\"? Please make a mwe!</p>",
        "id": 395671251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696848886
    },
    {
        "content": "<p>While your example above may succeed, it's still mathematically nonsense</p>",
        "id": 395671346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696848918
    },
    {
        "content": "<p>I found out.<br>\nMy mental model of typeclasses was wrong.<br>\nSorry for the noise.</p>",
        "id": 395675485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696850452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 395675495,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696850456
    }
]