[
    {
        "content": "<p>The following example is bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.MeasureSpaceDef</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- the following line takes 2+ seconds to compile</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">μ₁</span> <span class=\"n\">μ₂</span> <span class=\"n\">μ₃</span> <span class=\"n\">μ₄</span> <span class=\"n\">μ₅</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- this also takes 2+ seconds to compile</span>\n\n<span class=\"c1\">-- every command in this file will take 2 extra seconds to compile</span>\n</code></pre></div>\n<p>The problem is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure#doc\">docs4#MeasureTheory.Measure</a> is overloaded with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Measure#doc\">docs4#Measure</a>, and for every variable it now attempts an (expensive and failing) type-class problem to find a coercion from <code>Type ?u.2</code> (the type of <code>α</code>) to <code>?m.10 → ℕ</code> (the type of the first argument of <code>Measure</code>). Note that variables are recompiled for every new <code>variable</code>/<code>def</code>/<code>theorem</code>/... so this file will probably get very slow</p>\n<p>We hit this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4929\">!4#4929</a>, but I expect this is a major slowdown in all files using measures.</p>\n<p>What should we do to fix this? We should probably do multiple of the following list:<br>\n(1) As a temporary workaround, write <code>MeasureTheory.Measure</code> in a lot of places (especially <code>variable</code> commands) instead of <code>Measure</code><br>\n(2) Move <code>Measure</code> to a namespace (<code>Nat.Measure</code>?)<br>\n(3) Cache type-class failures in this case<br>\n(4) Have a precached failure that <code>Type _</code> will not coerce to any function (or anything else, probably).<br>\n(5) Have <code>x : _root_.Measure α</code> fail without doing any type-class inference: <code>_root_.Measure _</code> will have type <code>_ → _ → Prop</code> which should never match with <code>Sort _</code> (I'm very happy if we disallow coercions like this - assuming that we can keep the coercion <code>Set _ &gt;-&gt; Type _</code>)</p>",
        "id": 366584965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686852314
    },
    {
        "content": "<p>Wow, great find. I definitely support 2, probably also 3--5, and maybe even 1. Who can action this?</p>",
        "id": 366587193,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1686852876
    },
    {
        "content": "<p>Continuing the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- takes ~2.5s to compile (since it also parses variables)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- takes ~10s to compile, apparently it parses all the variables 4 times?</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span> <span class=\"s2\">\" ⋆ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Is it intended that the <code>notation</code> command parses the variable list 4 separate times (at least, that's what seems to be happening)?</p>",
        "id": 366589236,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686853375
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4929\">!4#4929</a> takes <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5280171318/jobs/9551895379\">5m 46s</a> to build using <code>Measure</code> and <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/5282322010/jobs/9557078815\">1m 50s</a> to build using <code>MeasureTheory.Measure</code>.</p>",
        "id": 366591381,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686853888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Measure.20is.20overloaded/near/366589236\">said</a>:</p>\n<blockquote>\n<p>Is it intended that the <code>notation</code> command parses the variable list 4 separate times (at least, that's what seems to be happening)?</p>\n</blockquote>\n<p>That's an \"interesting\" side effect of <code>notation</code> expanding into multiple primitive declarations</p>",
        "id": 366592089,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686854072
    },
    {
        "content": "<p>Of course, the slowdown would be greatly mitigated by</p>\n<p>(6) do not re-elaborate the variables for every command</p>\n<p>but I don't know the reasons for the Lean 4 behavior of the variable command, so this option might be bad.</p>",
        "id": 366593304,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686854348
    },
    {
        "content": "<p>I may be responsible for suggesting \"variables should just be inserted syntactically, like macros!\" in order to avoid all our problems with them in Lean 3. Now we have new problems...</p>",
        "id": 366594733,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686854668
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5100\">!4#5100</a> I changed all occurences in <code>variable</code> lines. I think that will already have a big impact, and this PR can be used to measure how big. <a href=\"https://github.com/leanprover/lean4/pull/2275\">lean4#2275</a> implements option (2).</p>",
        "id": 366622687,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686861879
    }
]