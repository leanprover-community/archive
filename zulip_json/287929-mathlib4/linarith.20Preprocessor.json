[
    {
        "content": "<p>Mario, while you're here, I have another question. In Lean3, the linarith preprocessors used the tactic monad (what else?). In Lean 4 they use MetaM. Isn't it a problem for rewriting?</p>",
        "id": 355889351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236160
    },
    {
        "content": "<p>I mean specifically <a href=\"https://github.com/leanprover-community/mathlib/blob/36b8aa61ea7c05727161f96a0532897bd72aedab/src/tactic/linarith/preprocessing.lean#L202-L207\">https://github.com/leanprover-community/mathlib/blob/36b8aa61ea7c05727161f96a0532897bd72aedab/src/tactic/linarith/preprocessing.lean#L202-L207</a></p>",
        "id": 355889460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236192
    },
    {
        "content": "<p>what do you mean by \"problem for rewriting\"?</p>",
        "id": 355889571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236240
    },
    {
        "content": "<p>I must confess I didn't try too hard to think about what this function is doing, but a very naive port is at <a href=\"https://github.com/leanprover-community/mathlib4/blob/linarithRat/Mathlib/Tactic/Linarith/Preprocessing.lean#L283-L290\">https://github.com/leanprover-community/mathlib4/blob/linarithRat/Mathlib/Tactic/Linarith/Preprocessing.lean#L283-L290</a> which is in TacticM</p>",
        "id": 355889697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236285
    },
    {
        "content": "<p>The secret goal of this message is to make you panic and port this yourself to prevent me from writing non-sense.</p>",
        "id": 355889766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236326
    },
    {
        "content": "<p>Generally, things should be in <code>TacticM</code> if they actually use / manipulate the goal state, <code>TermElabM</code> if they need to elaborate syntax, and <code>MetaM</code> if they just need to be able to unify metavariables and know the local context</p>",
        "id": 355889791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236339
    },
    {
        "content": "<p>the description of the function doesn't sound like it needs anything more than <code>MetaM</code> but I'm not sure about how the implementation is supposed to work</p>",
        "id": 355890021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236429
    },
    {
        "content": "<p><code>MVarId.rewrite</code> is in MetaM, what requires more?</p>",
        "id": 355890087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236480
    },
    {
        "content": "<p>But where would the MVarId come from?</p>",
        "id": 355890122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236500
    },
    {
        "content": "<p>a parameter</p>",
        "id": 355890154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236513
    },
    {
        "content": "<p>This is what was puzzling to me. So I simply assumed it was meant to be the main goal.</p>",
        "id": 355890178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236520
    },
    {
        "content": "<p>\"tactics\" in MetaM just pass MVarIds in and out</p>",
        "id": 355890255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236533
    },
    {
        "content": "<p>like <code>MVarId.rewrite</code></p>",
        "id": 355890269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236539
    },
    {
        "content": "<p>for that you don't <em>really</em> need the goal state</p>",
        "id": 355890313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236562
    },
    {
        "content": "<p>I understand this. I'm talking about my specific case.</p>",
        "id": 355890319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236565
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `normalizeDenominatorsInLHS h lhs` assumes that `h` is a proof of `lhs R 0`.</span>\n<span class=\"sd\"> It creates a proof of `lhs' R 0`, where all numeric division in `lhs` has been cancelled. -/</span>\n</code></pre></div>\n<p>sounds like it's getting the argument in a parameter</p>",
        "id": 355890374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236596
    },
    {
        "content": "<p>I mean this doesn't even care about the goal</p>",
        "id": 355890460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236642
    },
    {
        "content": "<p>it's just building a proof of one thing from another</p>",
        "id": 355890505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236651
    },
    {
        "content": "<p>I agree it sounds like it doesn't care about the goal, but I'm confused about what it is rewriting.</p>",
        "id": 355890573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236694
    },
    {
        "content": "<p>I'm confused about your confusion</p>",
        "id": 355890661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236729
    },
    {
        "content": "<p>what is \"it\"?</p>",
        "id": 355890675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236734
    },
    {
        "content": "<p>I think you would waste a lot less time by actually looking at the Lean 3 code and telling me what the Lean 4 code should be.</p>",
        "id": 355890812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236776
    },
    {
        "content": "<p><code>MVarId.rewrite</code> rewrites the type of the goal it is passed, by assigning it and returning a new mvar with a different type</p>",
        "id": 355890821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236779
    },
    {
        "content": "<p>I mean wasting <em>your</em> time</p>",
        "id": 355890832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236784
    },
    {
        "content": "<p>I'm working based on github because I will be leaving in a few minutes</p>",
        "id": 355890866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236802
    },
    {
        "content": "<p>I think the core problem is I couldn't find the actual analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rewrite_core\">docs#tactic.rewrite_core</a></p>",
        "id": 355890895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236816
    },
    {
        "content": "<p>oh I see you are confused by this docstring</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Rewrite goal `mvarId`</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Lean.MVarId.rewrite</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">occs</span> <span class=\"o\">:</span> <span class=\"n\">Occurrences</span> <span class=\"o\">:=</span> <span class=\"n\">Occurrences.all</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">:</span> <span class=\"n\">Rewrite.Config</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">RewriteResult</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 355891030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236877
    },
    {
        "content": "<p>it appears that <code>e</code> is the expression to rewrite (e.g. the type of the goal or of a hypothesis), and <code>heq</code> is an equality that you are using to rewrite with</p>",
        "id": 355891249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236977
    },
    {
        "content": "<p>But what is <code>mvarId</code>?</p>",
        "id": 355891355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683237010
    },
    {
        "content": "<p>That <code>mvarId</code> argument is the reason why I went to <code>TacticM</code> where I can get something which at least has the correct type.</p>",
        "id": 355891421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683237043
    },
    {
        "content": "<p>it appears to be essentially unused, except that it is used for deriving the names of subgoals and for the local context</p>",
        "id": 355891464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683237063
    },
    {
        "content": "<p>I think you could just pass <code>mkFreshExprMVar</code> to it</p>",
        "id": 355891568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683237113
    },
    {
        "content": "<p>Ok, I'll try that, thanks.</p>",
        "id": 355891932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683237250
    },
    {
        "content": "<p>I'll stop for today because I need some sleep, but everybody should feel free to hack on <a href=\"https://github.com/leanprover-community/mathlib4/tree/linarithRat\">https://github.com/leanprover-community/mathlib4/tree/linarithRat</a>. The current state is everything type-checks but nothing works (see the test file for linarith).</p>",
        "id": 355892611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683237564
    },
    {
        "content": "<p>I'm looking at this now. (Actually I started fresh after looking at the PR, I'll report what I find soon!)</p>",
        "id": 355907177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683245527
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3801\">!4#3801</a>. That took longer than it should have, because I kept mixing up the arguments of <code>MVarId.rewrite</code> (order of arguments, and expressions vs types <span aria-label=\"woman facepalming\" class=\"emoji emoji-1f926-200d-2640\" role=\"img\" title=\"woman facepalming\">:woman_facepalming:</span>). I added <code>Expr.rewrite</code> and <code>Expr.rewriteType</code> as helper functions to be less confusing next time around!</p>",
        "id": 355913223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683248541
    },
    {
        "content": "<p>Amazing! Do you understand why my version wasn't working (apart from the fact that I wrote it at least one hour too late instead of sleeping)?</p>",
        "id": 355963681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683270790
    },
    {
        "content": "<p>At least one thing wrong with your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lhs.containsConst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">has_div.div</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is looking for a mathlib3 name that doesn't exist anymore, so your code never fired.</p>",
        "id": 356025651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683286314
    },
    {
        "content": "<p>That's indeed a very good reason, and very consistent with the time of the day when this was written.</p>",
        "id": 356030319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683287293
    },
    {
        "content": "<p>Don't worry, I made exactly the same mistake on the first pass. :-)</p>",
        "id": 356031679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683287640
    },
    {
        "content": "<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">``</span><span class=\"n\">has_div.div</span>\n</code></pre></div>\n<p>is a way to prevent this btw, it checks that the name actually refers to a declaration at compile time.</p>",
        "id": 356031703,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683287643
    }
]