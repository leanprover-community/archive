[
    {
        "content": "<p>A small example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_add_of_pos_left</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This does not work, because (I think) simp does not introduce the LHS of implications when it descends into binders. But simp, I think, <em>could</em> do exactly that -- when it descends into the RHS of an arrow, add the LHS to simp's hypothesis context.</p>\n<p>Is there a reason why it doesn't do that?</p>",
        "id": 323913299,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674768771
    },
    {
        "content": "<p>I'm mainly asking because I am unsure I understand how the <code>Logic.lean</code> simp lemmas are designed. What is the simp-normal form for first-order logical statements, if there is one?</p>",
        "id": 323913687,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674768927
    },
    {
        "content": "<p><code>(config := {contextual := true})</code></p>",
        "id": 323913742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674768962
    },
    {
        "content": "<p>Is there a reason that's not the default behavior? Seems useful.</p>",
        "id": 323918350,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674770870
    },
    {
        "content": "<p>For the same reason that <code>simp*</code> or <code>erw</code> are not the default: it is more expensive, and not always what you want.<br>\nIt might be useful to have a shorter notation for it though.</p>",
        "id": 323919823,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674771456
    },
    {
        "content": "<p>Yeah. One of those situations where you probably want the expensive version to be easy to try, since it's pretty much strictly more powerful.</p>\n<p>I am trying to prove some Pairwise lemmas for <a href=\"https://github.com/leanprover/std4/pull/38\">std4#38</a>; first lemma, simp did not do anything, but contextual simp solved it entirely :)</p>",
        "id": 323921019,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674771899
    },
    {
        "content": "<p>It also just seems odd to me that something like this isn't solved by plain <code>simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">Not</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But perhaps I have too high expectations for simp.</p>",
        "id": 323925778,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674773926
    },
    {
        "content": "<p>(it's also odd to me that I have to unpack <code>Not</code> there, but I can see why, since otherwise I assume simp won't enter the final <code>p x -&gt; False</code> binder)</p>",
        "id": 323925862,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674773965
    },
    {
        "content": "<p>it's presumably solved by simp with the relevant comm lemma</p>",
        "id": 323925863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674773966
    },
    {
        "content": "<p>Oh? This is in Std, so that's possible</p>",
        "id": 323925895,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674773983
    },
    {
        "content": "<p>it appears to be literally the forward direction of a std lemma</p>",
        "id": 323925932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674774001
    },
    {
        "content": "<p>It feels odd to me that we rely on simp lemmas to solve FOL problems, instead of having a dedicated solver routine for it. I'm not sure what the tradeoff is there.</p>",
        "id": 323926379,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674774188
    },
    {
        "content": "<p>the tradeoff is that it takes time and people to make a sat solver</p>",
        "id": 323926455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674774227
    },
    {
        "content": "<p>in std itself FOL problems are mostly done using manual term proofs in Std.Logic, and afterward you can use <code>simp</code> or proof-structural tactics like <code>cases</code>, <code>apply</code> etc to do most FOL stuff</p>",
        "id": 323926699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674774329
    },
    {
        "content": "<p>it's pretty rare to have a pure FOL problem as a goal</p>",
        "id": 323926745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674774347
    },
    {
        "content": "<p>it's usually mixed with definitional unfolding or other lemmas and that's where <code>simp</code> does well</p>",
        "id": 323926826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674774367
    }
]