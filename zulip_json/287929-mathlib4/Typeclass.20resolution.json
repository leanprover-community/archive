[
    {
        "content": "<p>Sorry if this is a FAQ, but I couldn’t find it (easily), and the porting wiki does not address it:<br>\nIt seems that lean4 fails to find instances where lean3 would, because lean4 does no or less unfolding of the definitions in the goal (or something like that, I might be wrong).<br>\nWhat is the suggested fix? Add more instances (which are defined to be def-equal to the other instance)? (Or maybe I am barking up the wrong tree)</p>",
        "id": 325993942,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1675619697
    },
    {
        "content": "<p>Any specific examples?</p>",
        "id": 325997614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675621547
    },
    {
        "content": "<p>(e.g., a link to a PR or an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 325997767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675621598
    },
    {
        "content": "<p>Typeclass inference has changed in several ways between Lean 3 and Lean 4. There is at least one open issue where regressions have been observed. Another has just been closed an hour ago, but it will take a while to filter up to mathlib. If you can point me to an explicit example I can try to figure out whether it's covered by existing issues on the Lean 4 repo.</p>",
        "id": 326009321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675629271
    },
    {
        "content": "<p>I am not 100% sure this is the problem, but in <code>map_neg</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1979/files#diff-6f14283bfbc75a32a870660bc104a4b628a3645bacef2d02343637199a25f517R1062\">https://github.com/leanprover-community/mathlib4/pull/1979/files#diff-6f14283bfbc75a32a870660bc104a4b628a3645bacef2d02343637199a25f517R1062</a> I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The negation of a linear map is linear. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">N₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>in <code>LinearMap.lean</code> and that is the instance that was used in lean3</p>",
        "id": 326011861,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1675631242
    },
    {
        "content": "<p>Similarly, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1765/files\">https://github.com/leanprover-community/mathlib4/pull/1765/files</a> I added </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableSubsetFinset</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidableDforallFinset</span>\n</code></pre></div>\n<p>to <code>Mathlib/Data/Finset/Basic.lean</code> for (presumably) the same reason. There, it seems lean3 unfolded <code>⊆</code> and found an instance using the underlying definition.</p>",
        "id": 326012518,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1675631709
    },
    {
        "content": "<p>(the new behavior is probably cleaner, the question is more about what's the right way to adapt)</p>",
        "id": 326014468,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1675633316
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 326016350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675634912
    },
    {
        "content": "<p>The first one looks familiar. If you try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>and unfold the traces (click on the triangles) you can see <code>   [] ❌ R →+* R =?= R →+* R </code> at some point. If you now switch on <code>pp.all</code> as well you can see that the actual goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">RingHom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">RingHom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.854759</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and although I need to get back to marking (and in particular can't look at the second one right now) it would not surprise me if these were defeq if eta for structures is on (which it is usually) but not defeq if it's off (and for the version of Lean being used by mathlib it's off at this point). In short, hopefully this issue is fixed in lean4 master <a href=\"https://github.com/leanprover/lean4/pull/2093\">https://github.com/leanprover/lean4/pull/2093</a> and it's just a matter of time before the issue permeates up to mathlib4.</p>",
        "id": 326084326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675678358
    },
    {
        "content": "<p>Is there an open PR already to bump mathlib4's lean4 version, or are we waiting for a lean4 release?</p>",
        "id": 326091814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675680469
    },
    {
        "content": "<p><code>nightly-2023-02-06</code> has been out for two hours, so go for it :)</p>",
        "id": 326095663,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675681576
    },
    {
        "content": "<p>Does it definitely contain the fix?</p>",
        "id": 326096192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675681757
    },
    {
        "content": "<p>It claims to have </p>\n<div class=\"codehilite\"><pre><span></span><code>15a045e fix: reenable structure eta during tc search\n</code></pre></div>\n\n<p>is that the one?</p>",
        "id": 326097076,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675682060
    },
    {
        "content": "<p>lgtm</p>",
        "id": 326097110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675682072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> is either of you working on this?</p>",
        "id": 326097931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675682363
    },
    {
        "content": "<p>I don't plan to for at least a few hours</p>",
        "id": 326098082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675682404
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 326100189,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675683171
    },
    {
        "content": "<p>JFTR, I checked if with the latest lean4 bump I can remove the instance that I added while porting (<a href=\"#narrow/stream/287929-mathlib4/topic/Typeclass.20resolution/near/326012518\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Typeclass.20resolution/near/326012518</a>), but it still seems to be required. Not sure if that’s a noteworthy difference in instance resolution.</p>",
        "id": 327269479,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1676129359
    },
    {
        "content": "<p>Thanks for checking!</p>",
        "id": 327269838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676129494
    },
    {
        "content": "<p>No changes are expected from 2003.  It's only supposed to be faster.</p>",
        "id": 327291388,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676139819
    }
]