[
    {
        "content": "<p><code>Mathlib.Init.Data.Int.CompLemmas</code> was ported from core, and was never really intended for outside use. Nevertheless, people started using it. (Surprise!)</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7142\">#7142</a> removes one out of the two uses in Mathlib.</p>\n<p>If anyone would like to do the other in a separate PR, please do! You would need to reprove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.natAbs_add_nonneg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">wa</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.natAbs_add_neg</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">wa</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Int.natAbs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">Int.natAbs</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think after that we should just delete the file.</p>",
        "id": 390840841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694660797
    },
    {
        "content": "<p>I want that in std</p>",
        "id": 390840906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660833
    },
    {
        "content": "<p>the latter theorem is true as long as the variables are nonpositive</p>",
        "id": 390840971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694660866
    },
    {
        "content": "<p>My guess is that people start using it because <code>exact?</code> finds random stuff? I used to see this with <code>library_search</code> in Lean 3, random lemmas being used by my students that had <code>norm_num</code> in the name or really weird names, which were just internal things used by norm_num but library_search found them because they happened to be exactly what someone wanted.</p>",
        "id": 390883393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681428
    },
    {
        "content": "<p>I think these were simp lemmas that were in the prelude in lean3, or was that another file?</p>",
        "id": 390885928,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694682313
    }
]